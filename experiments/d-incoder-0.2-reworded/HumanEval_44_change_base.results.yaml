language: d
name: HumanEval_44_change_base
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeos0e23f.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeos0e23f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl5r21x0o.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl5r21x0o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp44biv630.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44biv630.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0) {\n        long mod = temp\
    \ % base;\n        temp = temp / base;\n        if(mod != 0) {\n            result\
    \ += char((mod + '0'));\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9bcuwpsd.d(23): Error: cannot implicitly convert expression
    `mod + 48L` of type `long` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp9bcuwpsd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        long rem =\
    \ temp % base;\n        temp = temp / base;\n        if(rem > 0)\n        {\n\
    \            result += char(rem);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4a0li45q.d(25): Error: cannot implicitly convert expression
    `rem` of type `long` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4a0li45q.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm2thtffi.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm2thtffi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\t\n\twhile(x != 0)\n\t{\n\t\tlong temp = x % base;\n\t\tresult += to_string(temp);\n\
    \t\tx = x / base;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd6ltjzmx.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd6ltjzmx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1euhek_a.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1euhek_a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5c3_ynqy.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c3_ynqy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x / base;\n\t\n\twhile (temp > 0) {\n\t\t\
    result = to_string(temp % base) + result;\n\t\ttemp = temp / base;\n\t}\n\t\n\t\
    while (result != \"\") {\n\t\tresult = to_string(base * long(result.back())) +\
    \ result;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj2wklcom.d(23): Error: undefined identifier `to_string`\n/tmp/tmpj2wklcom.d(28):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpj2wklcom.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\twhile (temp > 0) {\n\t\tresult = to_string(temp\
    \ % base) + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpewer1fan.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpewer1fan.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp > 0) {\n\t\ttemp = temp\
    \ / base;\n\t\tresult = to_string(temp) + result;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyppe_vzi.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyppe_vzi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x / base;\n\t\n\twhile (temp > 0) {\n\t\t\
    result = temp % base + result;\n\t\ttemp = temp / base;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu06gng_a.d(23): Error: incompatible types for `(temp % base)
    + (result)`: `long` and `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu06gng_a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long n = x;\n    long d = 1;\n    while(n > 0)\n    {\n       \
    \ long r = n % base;\n        result += char(r + '0');\n        n = n / base;\n\
    \        d++;\n    }\n    while(d > 0)\n    {\n        result += \"0\";\n    \
    \    d--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoxlnm9mx.d(23): Error: cannot implicitly convert expression
    `r + 48L` of type `long` to `char`\n/tmp/tmpoxlnm9mx.d(29): Error: slice `result`
    is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoxlnm9mx.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp != 0)\n    {\n        int digit\
    \ = temp % base;\n        temp = temp / base;\n        if(digit > 9)\n       \
    \ {\n            digit = digit - 9;\n            result += char(digit + '0');\n\
    \        }\n        else\n        {\n            result += char(digit + '0');\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpne7dtifv.d(21): Error: cannot implicitly convert expression
    `temp % base` of type `long` to `int`\n/tmp/tmpne7dtifv.d(26): Error: cannot implicitly
    convert expression `digit + 48` of type `int` to `char`\n/tmp/tmpne7dtifv.d(30):
    Error: cannot implicitly convert expression `digit + 48` of type `int` to `char`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpne7dtifv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = temp % base + result;\n        temp = temp / base;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_xfn4d_o.d(23): Error: incompatible types for `(temp % base)
    + (result)`: `long` and `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_xfn4d_o.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long tmp = x;\n    long tmp2 = base;\n    \n    while(tmp != 0)\n\
    \    {\n        long digit = tmp % base;\n        tmp = tmp / base;\n        \n\
    \        if(digit > 0)\n        {\n            result += digit;\n        }\n \
    \   }\n    \n    while(tmp2 != 0)\n    {\n        long digit = tmp2 % base;\n\
    \        tmp2 = tmp2 / base;\n        \n        if(digit > 0)\n        {\n   \
    \         result += digit;\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppp5jawwy.d(28): Error: incompatible types for `(result) += (digit)`:
    `string` and `long`\n/tmp/tmppp5jawwy.d(39): Error: incompatible types for `(result)
    += (digit)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppp5jawwy.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long r = temp % base;\n        temp = temp / base;\n        result =\
    \ to_string(r) + result;\n    }\n    \n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd7hdwn1b.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd7hdwn1b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    if (x < base) {\n        result = to_string(x - base)\
    \ + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_maj15sq.d(23): Error: undefined identifier `to_string`\n/tmp/tmp_maj15sq.d(28):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp_maj15sq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0n5u6hgz.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0n5u6hgz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnfems0__.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnfems0__.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\n/*\nChange numerical base of input number x to base.\n    return\
    \ string representation after the conversion.\n    base numbers are less than\
    \ 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n\
    \    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring change_base(long\
    \ x, int base) \n{\n    string result = \"\";\n    long temp;\n    \n    while\
    \ (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n \
    \       x = x / base;\n    }\n    \n    return result;\n}\n/*\nChange numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n\
    \    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, short base) \n{\n   \
    \ string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp\
    \ = x % base;\n        result += to_string(temp);\n        x = x / base;\n   \
    \ }\n    \n    return result;\n}\n/*\nChange numerical base of input number x\
    \ to base.\n    return string representation after the conversion.\n    base numbers\
    \ are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L,\
    \ 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ change_base(long x, char base) \n{\n    string result = \"\";\n    long temp;\n\
    \    \n    while (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x = x / base;\n    }\n    \n    return result;\n}\n/*\nChange numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n\
    \    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, float base) \n{\n   \
    \ string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp\
    \ = x % base;\n        result += \nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc515z65x.d(123): Error: expression expected, not `unittest`\n/tmp/tmpc515z65x.d(124):
    Error: found `{` when expecting `;` following statement\n/tmp/tmpc515z65x.d(140):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc515z65x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        result\
    \ = char(rem) + result;\n    }\n    \n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4tkzqrb7.d(25): Error: cannot implicitly convert expression
    `rem` of type `long` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4tkzqrb7.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\n/*\n    Convert number x to string representation in base\
    \ base using \n    radix base.\n    \n    base numbers are less than 10.\n   \
    \ >>> to_string(8L, 3L)\n    \"22\"\n    >>> to_string(8L, 2L)\n    \"1000\"\n\
    \    >>> to_string(7L, 2L)\n    \"111\"\n    \n*/\nstring to_string(long x, long\
    \ base)\n{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n \
    \   \n    while (temp != 0) {\n        temp = temp / base;\n        result +=\
    \ to_string(temp);\n    }\n    \n    return result;\n}\n/*\n    Convert number\
    \ x to string representation in base base using \n    radix base.\n    \n    base\
    \ numbers are less than 10.\n    >>> to_string(8L, 3L)\n    \"22\"\n    >>> to_string(8L,\
    \ 2L)\n    \"1000\"\n    >>> to_string(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ to_string(double x, long base)\n{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp != 0) {\n        temp = temp / base;\n\
    \        result += to_string(temp);\n    }\n    \n    return result;\n}\n/*\n\
    \    Convert number x to string representation in base base using \n    radix\
    \ base.\n    \n    base numbers are less than 10.\n    >>> to_string(8L, 3L)\n\
    \    \"22\"\n    >>> to_string(8L, 2L)\n    \"1000\"\n    >>> to_string(7L, 2L)\n\
    \    \"111\"\n    \n*/\nstring to_string(float x, long base)\n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\n/*\n    Convert number x to string representation in base\
    \ base using \n    radix base.\n    \n    base numbers are less than 10.\n   \
    \ >>> to_string(8L, 3L)\n    \"22\"\n    >>> to_string(8L, 2L)\n    \"1000\"\n\
    \    >>> to_string(7L, 2L)\n    \"111\"\n    \n*/\nstring to_string(double x,\
    \ int base)\n{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n\
    \    \n\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpymy9i50v.d(131): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpymy9i50v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\t\n\twhile (x != 0)\n\t{\n\t\tlong rem = x % base;\n\t\tstring s = to_string(rem);\n\
    \t\tresult += s;\n\t\tx = x / base;\n\t}\n\t\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5ajuffuv.d(22): Error: undefined identifier `to_string`\n/tmp/tmp5ajuffuv.d(23):
    Error: slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp5ajuffuv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\t\n\tlong tmp = x;\n\t\n\twhile (tmp > 0) {\n\t\tlong rem = tmp % base;\n\
    \t\ttmp = tmp / base;\n\t\tresult = to_string(base) + result;\n\t}\n\t\n\treturn\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw3rx9fgd.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw3rx9fgd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int digit = temp\
    \ % base;\n        temp = temp / base;\n        result = digits[digit] + result;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv8ycplt5.d(20): Error: cannot implicitly convert expression
    `temp % base` of type `long` to `int`\n/tmp/tmpv8ycplt5.d(22): Error: undefined
    identifier `digits`, did you mean variable `digit`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpv8ycplt5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    if (temp == 0)\n    {\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmporjhmv0x.d(24): Error: undefined identifier `to_string`\n/tmp/tmporjhmv0x.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmporjhmv0x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x > 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj30lqtsq.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj30lqtsq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5c3_ynqy.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c3_ynqy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0)\n    {\n        result = temp % base + result;\n        temp = temp / base;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0_f3nhtq.d(24): Error: incompatible types for `(temp % base)
    + (result)`: `long` and `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0_f3nhtq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp > 0) {\n\t\ttemp = temp\
    \ / base;\n\t\tresult = to_string(temp) + result;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyppe_vzi.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyppe_vzi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0)\n\
    \    {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_mwlcems.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_mwlcems.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long xx = x;\n\
    \    long xx_div_base = x / base;\n    long xx_mod_base = x % base;\n    string\
    \ result = \"\";\n    \n    while (xx_div_base != 0)\n    {\n        long xx_div_base2\
    \ = xx_div_base / base;\n        long xx_mod_base2 = xx_mod_base % base;\n   \
    \     \n        if (xx_mod_base2 == 0)\n        {\n            result += to_string(xx_div_base2);\n\
    \        }\n        else\n        {\n            result += to_string(xx_mod_base2)\
    \ + \"0\";\n        }\n        \n        xx_div_base = xx_div_base2;\n       \
    \ xx_mod_base = xx_mod_base2;\n    }\n    \n    if (xx_mod_base == 0)\n    {\n\
    \        result += to_string(xx_div_base);\n    }\n    else\n    {\n        result\
    \ += to_string(xx_mod_base);\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj_rmcz3x.d(29): Error: undefined identifier `to_string`\n/tmp/tmpj_rmcz3x.d(33):
    Error: undefined identifier `to_string`\n/tmp/tmpj_rmcz3x.d(42): Error: undefined
    identifier `to_string`\n/tmp/tmpj_rmcz3x.d(46): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_rmcz3x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long res = 0;\n\
    \    string result = \"\";\n    while(x != 0)\n    {\n        res += x / base;\n\
    \        x %= base;\n    }\n    while(base > 0)\n    {\n        res /= base;\n\
    \        base--;\n    }\n    while(base > 0)\n    {\n        res *= base;\n  \
    \      base--;\n    }\n    while(base > 0)\n    {\n        res %= base;\n    \
    \    base--;\n    }\n    while(base > 0)\n    {\n        res /= base;\n      \
    \  base--;\n    }\n    while(base > 0)\n    {\n        res *= base;\n        base--;\n\
    \    }\n    while(base > 0)\n    {\n        res %= base;\n        base--;\n  \
    \  }\n    while(base > 0)\n    {\n        res /= base;\n        base--;\n    }\n\
    \    while(base > 0)\n    {\n        res *= base;\n        base--;\n    }\n  \
    \  while(base > 0)\n    {\n        res %= base;\n        base--;\n    }\n    while(base\
    \ > 0)\n    {\n        res /= base;\n        base--;\n    }\n    while(base >\
    \ 0)\n    {\n        res *= base;\n        base--;\n    }\n    while(base > 0)\n\
    \    {\n        res %= base;\n        base--;\n    }\n    while(base > 0)\n  \
    \  {\n        res /= base;\n        base--;\n    }\n    while(base > 0)\n    {\n\
    \        res *= base;\n        base--;\n    }\n    while(base > 0)\n    {\n  \
    \      res %= base;\n        base--;\n    }\n    while(base > 0)\n    {\n    \
    \    res /= base;\n        base--;\n    }\n    while(base > 0)\n    {\n      \
    \  res *= base;\n        base--;\n    }\n    while(base > 0)\n    {\n        res\
    \ %= base;\n        base--;\n    }\n    while(base > 0)\n    {\n        res /=\
    \ base;\n        base--;\n    }\n    while(base > 0)\n    {\n        res *= base;\n\
    \        base--;\n    }\n    while(base > 0)\n    {\n        res %= base;\n  \
    \      base--;\n    }\n    while(base > 0)\n    {\n        res /= base;\n    \
    \    base--;\n    }\n    while(base > 0)\n    {\n        res *= base;\n      \
    \  base--;\n    }\n    while(base > 0)\n    {\n        res %= base;\n        base--;\n\
    \    }\n    while(base > 0)\n    {\n        res /= base;\n        base--;\n  \
    \  }\n    while(base \nunittest\n{\n    alias candidate = change_base;\n\n   \
    \ assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplkpi7c0s.d(150): Error: found `unittest` when expecting `)`\n/tmp/tmplkpi7c0s.d(167):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplkpi7c0s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        if (temp % base == 0) {\n            result += to_string(temp / base);\n\
    \        } else {\n            result += to_string(temp % base);\n        }\n\
    \        temp = temp / base;\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjwv4wjeq.d(24): Error: undefined identifier `to_string`\n/tmp/tmpjwv4wjeq.d(26):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpjwv4wjeq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}\n/*\n    Convert binary number to decimal\
    \ number.\n    \n    Input string must be in binary form.\n    \n    Output decimal\
    \ number in base 10.\n    \n    >>> to_decimal(\"1001\")\n    10\n    >>> to_decimal(\"\
    1010\")\n    16\n    \n*/\nlong to_decimal(string x)\n{\n    long result = 0;\n\
    \    \n    for (auto i : x)\n    {\n        result *= 2;\n        result += i\
    \ - '0';\n    }\n    \n    return result;\n}\n/*\n    Convert decimal number to\
    \ binary number.\n    \n    Input decimal number in base 10.\n    \n    Output\
    \ binary number in base 2.\n    \n    >>> to_binary(\"10\")\n    \"1010\"\n  \
    \  >>> to_binary(\"16\")\n    \"1010\"\n    \n*/\nstring to_binary(long x)\n{\n\
    \    string result = \"\";\n    \n    while (x > 0)\n    {\n        result = to_string(x\
    \ % 2) + result;\n        x /= 2;\n    }\n    \n    return result;\n}\n/*\n  \
    \  Convert decimal number to hexadecimal number.\n    \n    Input decimal number\
    \ in base 10.\n    \n    Output hexadecimal number in base 16.\n    \n    >>>\
    \ to_hex(\"10\")\n    \"A\"\n    >>> to_hex(\"16\")\n    \"10\"\n    \n*/\nstring\
    \ to_hex(long x)\n{\n    string result = \"\";\n    \n    while (x > 0)\n    {\n\
    \        result = to_string(x % 16) + result;\n        x /= 16;\n    }\n    \n\
    \    return result;\n}\n/*\n    Convert hexadecimal number to decimal number.\n\
    \    \n    Input hexadecimal number in base 16.\n    \n    Output decimal number\
    \ in base 10.\n    \n    >>> to_decimal(\"A\")\n    10\n    >>> to_decimal(\"\
    10\")\n    16\n    \n*/\nlong to_decimal(string x)\n{\n    long result = 0;\n\
    \    \n    for (auto i : x)\n    {\n        result *= 16;\n        result += i\
    \ - '0';\n    }\n    \n    return result;\n}\n/*\n    Convert binary number to\
    \ octal number.\n    \n    Input string must be in binary form.\n    \n    Output\
    \ octal number in base 8.\n    \n    >>> to_octal(\"1001\")\n    3\n    >>> to_octal(\"\
    1010\")\n    7\n    \n\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpws5owjdu.d(47): Error: no identifier for declarator `i`\n/tmp/tmpws5owjdu.d(47):
    Error: expression expected, not `:`\n/tmp/tmpws5owjdu.d(47): Error: found `x`
    when expecting `;` following `for` condition\n/tmp/tmpws5owjdu.d(122): Error:
    no identifier for declarator `i`\n/tmp/tmpws5owjdu.d(122): Error: expression expected,
    not `:`\n/tmp/tmpws5owjdu.d(122): Error: found `x` when expecting `;` following
    `for` condition\n/tmp/tmpws5owjdu.d(130): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpws5owjdu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x;\n    while (temp > 0) {\n     \
    \   temp = temp / base;\n        result = to_string(temp) + result;\n    }\n \
    \   \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5m6tq76x.d(23): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5m6tq76x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long n = x;\n    long d = 1;\n    long r = 1;\n    long m = 1;\n\
    \    long temp;\n    \n    while (n > 0)\n    {\n        temp = n % base;\n  \
    \      n = n / base;\n        d = d * temp;\n        r = r * temp;\n        m\
    \ = m * temp;\n    }\n    \n    long temp2 = d;\n    long temp3 = r;\n    long\
    \ temp4 = m;\n    \n    while (temp4 > 0)\n    {\n        result = result + to_string(temp4);\n\
    \        temp4 = temp4 / 10;\n    }\n    \n    while (temp3 > 0)\n    {\n    \
    \    result = result + to_string(temp3);\n        temp3 = temp3 / 10;\n    }\n\
    \    \n    while (temp2 > 0)\n    {\n        result = result + to_string(temp2);\n\
    \        temp2 = temp2 / 10;\n    }\n    \n    while (n > 0)\n    {\n        result\
    \ = result + to_string(n % base);\n        n = n / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg1iahzi8.d(39): Error: undefined identifier `to_string`\n/tmp/tmpg1iahzi8.d(45):
    Error: undefined identifier `to_string`\n/tmp/tmpg1iahzi8.d(51): Error: undefined
    identifier `to_string`\n/tmp/tmpg1iahzi8.d(57): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1iahzi8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeos0e23f.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeos0e23f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long tmp = x;\n    long power = 1;\n    \n    while (power < base)\n\
    \    {\n        tmp = tmp * power;\n        power *= base;\n    }\n    \n    long\
    \ tmp = tmp / power;\n    \n    while (tmp > 0)\n    {\n        result = to_string(tmp\
    \ % base) + result;\n        tmp = tmp / base;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq195ko_x.d(27): Error: declaration `tmpq195ko_x.change_base.tmp`
    is already defined\n/tmp/tmpq195ko_x.d(31): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq195ko_x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp44biv630.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44biv630.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    if (temp == 0)\n        result = to_string(temp) +\
    \ result;\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1amzpv2d.d(23): Error: undefined identifier `to_string`\n/tmp/tmp1amzpv2d.d(28):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1amzpv2d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5c3_ynqy.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c3_ynqy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x / base;\n    \n    if (temp > 0)\n\
    \    {\n        result = temp.to_string() + result;\n    }\n    \n    while (temp\
    \ > 0)\n    {\n        temp = temp / base;\n        result = base.to_string()\
    \ + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa5c90k_j.d(24): Error: no property `to_string` for type `long`\n/tmp/tmpa5c90k_j.d(30):
    Error: no property `to_string` for type `long`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpa5c90k_j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\twhile(x > 0) {\n\t\ttemp = x % base;\n\t\tresult\
    \ = to_string(temp) + result;\n\t\tx = x / base;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt8zl4e53.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt8zl4e53.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\twhile (temp > 0) {\n\t\ttemp = temp\
    \ / base;\n\t\tresult = to_string(temp) + result;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpww3o7rbc.d(23): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpww3o7rbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\twhile(x != 0) {\n\t\ttemp = x % base;\n\t\tresult\
    \ = to_string(temp) + result;\n\t\tx = x / base;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcmm0xe7k.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcmm0xe7k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += (char)('0' + temp);\n        x /= base;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxxnkamfd.d(22): Error: C style cast illegal, use `cast(char)(\''0\''
    + temp)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxxnkamfd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    if (result == \"0\")\n    {\n        result =\
    \ \"1\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_oelfjch.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_oelfjch.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long res = 0;\n\
    \    string s = \"\";\n    while(x > 0) {\n        res += (x % base);\n      \
    \  x /= base;\n    }\n    while(x > 0) {\n        res -= (x % base);\n       \
    \ x /= base;\n    }\n    while(x > 0) {\n        res *= base;\n        x /= base;\n\
    \    }\n    while(x > 0) {\n        res /= base;\n        x /= base;\n    }\n\
    \    return to_string(res);\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaeim10kt.d(35): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaeim10kt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n     \
    \   temp = temp / base;\n        result = to_string(temp) + result;\n    }\n \
    \   \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph2adicg2.d(23): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph2adicg2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\n/*\nChange numerical base of input number x\
    \ to base.\n    return string representation after the conversion.\n    base numbers\
    \ are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L,\
    \ 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ change_base(long x, int base) \n{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n\
    \        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, short base) \n{\n   \
    \ string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}\n/*\nChange numerical base of\
    \ input number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, char base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\n/*\nChange numerical base of input number x\
    \ to base.\n    return string representation after the conversion.\n    base numbers\
    \ are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L,\
    \ 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ change_base(long x, double base) \n{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp > 0) {\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvsdx7gxi.d(127): Error: found `unittest` instead of statement\n/tmp/tmpvsdx7gxi.d(144):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvsdx7gxi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_9_jd85i.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_9_jd85i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp != 0)\n\t{\n\t\tresult\
    \ = to_string(temp % base) + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdd2d0nji.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdd2d0nji.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnfems0__.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnfems0__.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long tmp = x;\n    long tmp2 = base;\n    \n    while(tmp2 > 0)\n\
    \    {\n        tmp = tmp / tmp2;\n        tmp2 = tmp % tmp2;\n        result\
    \ += char(tmp + '0');\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp_2egoky.d(25): Error: cannot implicitly convert expression
    `tmp + 48L` of type `long` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpp_2egoky.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long r = x;\n\
    \    string s = \"\";\n    while(base > 0)\n    {\n        r = r / base;\n   \
    \     s = to_string(base) + s;\n        base = base * 10;\n    }\n    while(base\
    \ > 0)\n    {\n        r = r / base;\n        s = to_string(base) + s;\n     \
    \   base = base * 10;\n    }\n    return to_string(r) + s;\n}\nunittest\n{\n \
    \   alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo2_wg_19.d(22): Error: undefined identifier `to_string`\n/tmp/tmpo2_wg_19.d(28):
    Error: undefined identifier `to_string`\n/tmp/tmpo2_wg_19.d(31): Error: undefined
    identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo2_wg_19.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7qdr3pka.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qdr3pka.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeos0e23f.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeos0e23f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0)\n    {\n        temp = x %\
    \ base;\n        result += to_string(temp);\n        x = x / base;\n    }\n  \
    \  \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn1wzgdb_.d(23): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1wzgdb_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp > 0)\n    {\n\
    \        result = to_string(temp % base) + result;\n        temp = temp / base;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpanf_kbgu.d(23): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpanf_kbgu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp44biv630.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44biv630.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long result =\
    \ 0;\n    long remainder;\n    string result = \"\";\n    \n    while (x != 0)\
    \ {\n        remainder = x % base;\n        result += (char)('0' + remainder);\n\
    \        x /= base;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph2x3qkxw.d(23): Error: C style cast illegal, use `cast(char)(\''0\''
    + remainder)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph2x3qkxw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\t\n\twhile(x != 0)\n\t{\n\t\tlong temp = x % base;\n\t\tresult += to_string(temp);\n\
    \t\tx = x / base;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd6ltjzmx.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd6ltjzmx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\t\n\tlong temp;\n\t\n\ttemp = x / base;\n\t\n\twhile (temp > 0)\n\t\
    {\n\t\tresult = to_string(temp % base) + result;\n\t\ttemp = temp / base;\n\t\
    }\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf5zbcaxi.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf5zbcaxi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(base) + result;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjl7tgiz9.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjl7tgiz9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while(temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvdlrpwbh.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvdlrpwbh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0)\n\
    \    {\n        if (temp % base == 0)\n        {\n            result += (char)('0'\
    \ + temp % base);\n        }\n        \n        temp = temp / base;\n    }\n \
    \   \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp08rkucce.d(26): Error: C style cast illegal, use `cast(char)(\''0\''
    + temp % base)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp08rkucce.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp44biv630.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44biv630.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n     \
    \   temp = temp / base;\n        result = to_string(temp) + result;\n    }\n \
    \   \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph2adicg2.d(23): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph2adicg2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp > 0)\n\t{\n\t\tlong\
    \ rem = temp % base;\n\t\tresult = to_string(base) + result;\n\t\ttemp = temp\
    \ / base;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ydxdam1.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ydxdam1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    long temp2 = base;\n    while(temp != 0)\n\
    \    {\n        long mod = temp % temp2;\n        temp = temp / temp2;\n     \
    \   result = to_string(mod) + result;\n        temp2 = temp2;\n    }\n    return\
    \ result;\n}\n/*\n    Convert string representation of number to long integer.\n\
    \    \n    string representation of number must be in base 10\n    \n    return\
    \ long integer representation of number\n    \n    example\n    >>> to_long(\"\
    22\")\n    22\n    >>> to_long(\"1000\")\n    1000\n    >>> to_long(\"111\")\n\
    \    111\n    \n*/\nlong to_long(string s)\n{\n    long result = 0;\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        long digit = s[i] - '0';\n     \
    \   result = result * 10 + digit;\n    }\n    return result;\n}\n/*\n    Convert\
    \ long integer representation of number to string representation.\n    \n    long\
    \ integer representation of number must be in base 10\n    \n    return string\
    \ representation of number\n    \n    example\n    >>> to_string(1)\n    \"1\"\
    \n    >>> to_string(22)\n    \"22\"\n    >>> to_string(1000)\n    \"1000\"\n \
    \   >>> to_string(111)\n    \"111\"\n    \n*/\nstring to_string(long x)\n{\n \
    \   string result = \"\";\n    while(x != 0)\n    {\n        result = to_string(x%10)\
    \ + result;\n        x = x / 10;\n    }\n    return result;\n}\n/*\n    Convert\
    \ long integer representation of number to string representation.\n    \n    long\
    \ integer representation of number must be in base 10\n    \n    return string\
    \ representation of number\n    \n    example\n    >>> to_string(1)\n    \"1\"\
    \n    >>> to_string(22)\n    \"22\"\n    >>> to_string(1000)\n    \"1000\"\n \
    \   >>> to_string(111)\n    \"111\"\n    \n*/\nstring to_string(long x, int base)\n\
    {\n    string result = \"\";\n    while(x != 0)\n    {\n        result = to_string(x\
    \ % base) + result;\n        x = x / base;\n    }\n    return result;\n}\n/*\n\
    \    Convert long integer representation of number to string representation.\n\
    \    \n    long integer representation of number must be in base 10\n    \n  \
    \  return string representation of number\n    \n    example\n    >>> to_string(1)\n\
    \    \"1\"\n    >>> to_string(22)\n    \"22\"\n    >>> to_string(1000)\n    \"\
    1000\"\n    >>> to_string(111)\n    \"111\"\n    \n*/\nstring to_string(long x,\
    \ int base, int digits)\n{\n    string result = \"\";\n    while(x != 0)\n   \
    \ {\n        result = to_string(x % base\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3s_g1p69.d(135): Error: found `unittest` when expecting `,`\n/tmp/tmp3s_g1p69.d(152):
    Error: found `void` when expecting `,`\n/tmp/tmp3s_g1p69.d(152): Error: found
    `{` when expecting `,`\n/tmp/tmp3s_g1p69.d(152): Error: expression expected, not
    `}`\n/tmp/tmp3s_g1p69.d(152): Error: found `End of File` when expecting `,`\n/tmp/tmp3s_g1p69.d(152):
    Error: found `End of File` when expecting `)`\n/tmp/tmp3s_g1p69.d(152): Error:
    found `End of File` when expecting `;` following statement\n/tmp/tmp3s_g1p69.d(152):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp3s_g1p69.d(152):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s_g1p69.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long tmp = x;\n    \n    while(tmp != 0)\n    {\n        long rem\
    \ = tmp % base;\n        tmp = tmp / base;\n        \n        if(rem > 0)\n  \
    \      {\n            result += char(rem);\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz0eb58m8.d(27): Error: cannot implicitly convert expression
    `rem` of type `long` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0eb58m8.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp != 0) {\n    \
    \    temp = temp / base;\n        result += to_string(temp);\n    }\n    \n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnv_itzvu.d(23): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnv_itzvu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5c3_ynqy.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c3_ynqy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n     \
    \   temp = temp / base;\n        result = to_string(temp) + result;\n    }\n \
    \   \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph2adicg2.d(23): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph2adicg2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x > 0)\n    {\n        temp = x %\
    \ base;\n        result += (char)('0' + temp);\n        x /= base;\n    }\n  \
    \  \n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| a\
    \ tags=c++,algorithm,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <sstream>\nusing namespace std;\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbntrkngk.d(23): Error: C style cast illegal, use `cast(char)(\''0\''
    + temp)`\n/tmp/tmpbntrkngk.d(29): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbntrkngk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    long temp2 = base;\n    while(temp != 0)\n\
    \    {\n        temp = temp/temp2;\n        result += char(temp%10);\n       \
    \ temp2 = temp2/10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsah7z8n7.d(23): Error: cannot implicitly convert expression
    `temp % 10L` of type `long` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpsah7z8n7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        result\
    \ = char(rem) + result;\n    }\n    \n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfv6qbo6s.d(25): Error: cannot implicitly convert expression
    `rem` of type `long` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfv6qbo6s.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\twhile (temp > 0) {\n\t\tresult = to_string(temp\
    \ % base) + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpewer1fan.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpewer1fan.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while(temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    while(temp < 0)\n    {\n        result = to_string(abs(temp\
    \ % base)) + result;\n        temp = abs(temp / base);\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphzmemjvk.d(24): Error: undefined identifier `to_string`\n/tmp/tmphzmemjvk.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmphzmemjvk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        int digit =\
    \ temp % base;\n        temp = temp / base;\n        if(digit > 0)\n        {\n\
    \            result += digit;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer. I tried your code, but I got this error\
    \ `error: cannot find symbol\n        long temp = x;\n        ^\n  symbol:   variable\
    \ x\n  location: class Main`\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a complete working example. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I tried your code, but I got this error `error: cannot find symbol\n\
    \        long temp = x;\n        ^\n  symbol:   variable x\n  location: class\
    \ Main`\n<|/ c |>\n<| c |>\nI edited my answer to include a complete working example.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried your code,\
    \ but I got this error `error: cannot find symbol\n        long temp = x;\n  \
    \      ^\n  symbol:   variable x\n  location: class Main`\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Scanner;\npublic class Main {\n    public static\
    \ void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n \
    \       System.out.println(\"Enter a number\");\n        long num = sc.nextLong();\n\
    \        System.out.println(\"Enter the base number\");\n        long base = sc.nextLong();\n\
    \        long temp = num;\n        while(temp > 0){\n            int digit = temp\
    \ % base;\n            temp = temp / base;\n            if(digit > 0){\n     \
    \           System.out.print(digit);\n            }\n        }\n    }\n}\n</code>\n\
    <|/ a tags=java,math |>\n<| c |>\nThanks for your answer. I tried your code, but\
    \ I got this error `error: cannot find symbol\n        long temp = num;\n    \
    \    ^\n  symbol:   variable num\n  location: class Main`\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a complete working example. Hope it helps.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. I tried your code, but I got this error\
    \ `error: cannot find symbol\n        long temp = num;\n        ^\n  symbol: \
    \  variable num\n  location\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx1r_esjl.d(30): Error: declaration expected, not `<`\n/tmp/tmpx1r_esjl.d(64):
    Error: identifier expected following `.`, not `in`\n/tmp/tmpx1r_esjl.d(65): Error:
    identifier expected following `.`, not `out`\n/tmp/tmpx1r_esjl.d(67): Error: identifier
    expected following `.`, not `out`\n/tmp/tmpx1r_esjl.d(74): Error: identifier expected
    following `.`, not `out`\n/tmp/tmpx1r_esjl.d(79): Error: declaration expected,
    not `<`\n/tmp/tmpx1r_esjl.d(92): Error: unterminated string constant starting
    at /tmp/tmpx1r_esjl.d(92)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx1r_esjl.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd966j1iz.d(23): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd966j1iz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd966j1iz.d(23): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd966j1iz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while(temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    while(temp < 0)\n    {\n        result = to_string(abs(temp\
    \ % base)) + result;\n        temp = abs(temp / base);\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphzmemjvk.d(24): Error: undefined identifier `to_string`\n/tmp/tmphzmemjvk.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmphzmemjvk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x / base;\n    \n    if (temp > 0)\
    \ {\n        result = to_string(temp) + result;\n    }\n    \n    temp = x % base;\n\
    \    \n    if (temp > 0) {\n        result = to_string(temp) + result;\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxi1id_j_.d(23): Error: undefined identifier `to_string`\n/tmp/tmpxi1id_j_.d(29):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpxi1id_j_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x % base;\n    \n    if (temp == 0)\n\
    \    {\n        result = to_string(base);\n    }\n    else\n    {\n        result\
    \ = to_string(base) + to_string(temp);\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7ro5lv_u.d(24): Error: undefined identifier `to_string`\n/tmp/tmp7ro5lv_u.d(28):
    Error: undefined identifier `to_string`\n/tmp/tmp7ro5lv_u.d(28): Error: undefined
    identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ro5lv_u.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjgzj433_.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjgzj433_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0) {\n        long r = temp %\
    \ base;\n        temp = temp / base;\n        result = to_string(r) + result;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThis\
    \ code does not compile. `to_string` does not exist in C++.\n<|/ c |>\n<| c |>\n\
    `to_string` was added in C++11. http://en.cppreference.com/w/cpp/string/basic_string/to_string\n\
    <|/ c |>\n<| c |>\n`to_string` was added in C++11, but `std::to_string` was added\
    \ in C++14. http://en.cppreference.com/w/cpp/string/basic_string/to_string\n<|/\
    \ c |>\n<| c |>\n`to_string` was added in C++11, but `std::to_string` was added\
    \ in C++14. http://en.cppreference.com/w/cpp/string/basic_string/to_string\n<|/\
    \ c |>\n<| c |>\n`to_string` was added in C++11, but `std::to_string` was added\
    \ in C++14. http://en.cppreference.com/w/cpp/string/basic_string/to_string\n<|/\
    \ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <sstream>\nusing namespace std;\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm7wc976h.d(26): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm7wc976h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_9_jd85i.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_9_jd85i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\twhile (x != 0) {\n\t\ttemp = x % base;\n\t\tresult\
    \ = to_string(temp) + result;\n\t\tx = x / base;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1uvvdybh.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1uvvdybh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(x != 0) {\n        remainder =\
    \ x % base;\n        result += to_string(remainder);\n        x /= base;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpymf967lv.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpymf967lv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while (x>0)\n    {\n        remainder\
    \ = x % base;\n        result += char(remainder);\n        x = x / base;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9_x6xatg.d(23): Error: cannot implicitly convert expression
    `remainder` of type `long` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp9_x6xatg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5c3_ynqy.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c3_ynqy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5c3_ynqy.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c3_ynqy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp44biv630.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44biv630.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while(temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvdlrpwbh.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvdlrpwbh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5c3_ynqy.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c3_ynqy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnfems0__.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnfems0__.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeos0e23f.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeos0e23f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong remainder;\n\t\n\twhile (x != 0) {\n\t\tremainder = x % base;\n\
    \t\tresult = to_string(remainder) + result;\n\t\tx = x / base;\n\t}\n\t\n\treturn\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcbgk5xq8.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcbgk5xq8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5c3_ynqy.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c3_ynqy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        long rem = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(base) + result;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv5bzvdbg.d(26): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv5bzvdbg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeos0e23f.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeos0e23f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0n5u6hgz.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0n5u6hgz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string res;\n    \n    temp = x;\n    \n    while (temp != 0)\n    {\n   \
    \     res += (char)(temp % base);\n        temp /= base;\n    }\n    \n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqw6x2mth.d(24): Error: C style cast illegal, use `cast(char)(temp
    % base)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqw6x2mth.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    if (temp == 0)\n    {\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsdqlkknl.d(24): Error: undefined identifier `to_string`\n/tmp/tmpsdqlkknl.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpsdqlkknl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long remainder = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(base) + result;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbgbdiupg.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbgbdiupg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5c3_ynqy.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c3_ynqy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5c3_ynqy.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c3_ynqy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        long r = temp\
    \ % base;\n        temp = temp / base;\n        result = char(r) + result;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7sofj_20.d(23): Error: cannot implicitly convert expression
    `r` of type `long` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sofj_20.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp45pclvxc.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp45pclvxc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    if (temp > 0)\n\
    \    {\n        result = to_string(temp) + result;\n    }\n    \n    while (temp\
    \ > 0)\n    {\n        temp = temp / base;\n        result = to_string(temp) +\
    \ result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm_izci3d.d(24): Error: undefined identifier `to_string`\n/tmp/tmpm_izci3d.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpm_izci3d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    if (temp > 0)\n\
    \    {\n        result = temp.to_string() + result;\n    }\n    \n    while (temp\
    \ > 0)\n    {\n        temp = temp / base;\n        result = base.to_string()\
    \ + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprjv4n_zq.d(24): Error: no property `to_string` for type `long`\n/tmp/tmprjv4n_zq.d(30):
    Error: no property `to_string` for type `long`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmprjv4n_zq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x;\n    \n    while (temp != 0)\n\
    \    {\n        if (temp % base == 0)\n        {\n            result += to_string(temp\
    \ / base);\n        }\n        temp = temp / base;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfhda1b32.d(26): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfhda1b32.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeos0e23f.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeos0e23f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long res = 0;\n\
    \    long temp = 0;\n    \n    while (x != 0) {\n        temp = x % base;\n  \
    \      res = (res * base) + temp;\n        x = x / base;\n    }\n    \n    return\
    \ to_string(res);\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm9vcsi75.d(26): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm9vcsi75.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5c3_ynqy.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c3_ynqy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long tmp = x;\n    \n    while (base > 0)\n    {\n        tmp =\
    \ tmp / base;\n        result += to_string(tmp);\n        base--;\n    }\n   \
    \ \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxcq5muvo.d(23): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxcq5muvo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x / base;\n\t\n\twhile (temp > 0)\n\t{\n\t\
    \tresult = to_string(temp % base) + result;\n\t\ttemp = temp / base;\n\t}\n\t\n\
    \treturn result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvzaidcne.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvzaidcne.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5c3_ynqy.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c3_ynqy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    if (temp == 0)\n    {\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsdqlkknl.d(24): Error: undefined identifier `to_string`\n/tmp/tmpsdqlkknl.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpsdqlkknl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    if (x < base)\n    {\n        result = to_string(x\
    \ - base) + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph8nko_gx.d(24): Error: undefined identifier `to_string`\n/tmp/tmph8nko_gx.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmph8nko_gx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long tmp = x;\n\
    \    string result = \"\";\n    \n    while(base > 0)\n    {\n        tmp = tmp\
    \ / base;\n        result += (char)(tmp % base);\n        base = base/10;\n  \
    \  }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz8yoxm4e.d(23): Error: C style cast illegal, use `cast(char)(tmp
    % base)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz8yoxm4e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long tmp = x;\n    while(tmp > 0)\n    {\n        long r = tmp\
    \ % base;\n        tmp = tmp / base;\n        result = char(r) + result;\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaphe4brh.d(27): Error: declaration expected, not `<`\n/tmp/tmpaphe4brh.d(39):
    Error: declaration expected, not `assert`\n/tmp/tmpaphe4brh.d(40): Error: declaration
    expected, not `assert`\n/tmp/tmpaphe4brh.d(41): Error: declaration expected, not
    `assert`\n/tmp/tmpaphe4brh.d(42): Error: declaration expected, not `assert`\n/tmp/tmpaphe4brh.d(43):
    Error: declaration expected, not `assert`\n/tmp/tmpaphe4brh.d(44): Error: declaration
    expected, not `assert`\n/tmp/tmpaphe4brh.d(45): Error: declaration expected, not
    `assert`\n/tmp/tmpaphe4brh.d(46): Error: declaration expected, not `assert`\n/tmp/tmpaphe4brh.d(47):
    Error: declaration expected, not `assert`\n/tmp/tmpaphe4brh.d(48): Error: declaration
    expected, not `assert`\n/tmp/tmpaphe4brh.d(49): Error: declaration expected, not
    `assert`\n/tmp/tmpaphe4brh.d(50): Error: declaration expected, not `assert`\n/tmp/tmpaphe4brh.d(51):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaphe4brh.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp = x;\n\twhile (temp > 0) {\n\t\tlong rem = temp % base;\n\
    \t\ttemp = temp / base;\n\t\tresult = to_string(base) + result;\n\t\tif (rem !=\
    \ 0)\n\t\t\tresult = to_string(base) + result;\n\t}\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7xk94thn.d(22): Error: undefined identifier `to_string`\n/tmp/tmp7xk94thn.d(24):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7xk94thn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long n = x;\n    long d = 1;\n    long r = 1;\n    long t = 1;\n\
    \    long i = 0;\n    \n    while (n != 0)\n    {\n        long digit = n % base;\n\
    \        n /= base;\n        d *= base;\n        \n        if (digit > 0)\n  \
    \      {\n            result += (char)(digit + '0');\n        }\n        else\n\
    \        {\n            result += (char)(digit - '0');\n        }\n    }\n   \
    \ \n    while (d != 0)\n    {\n        r = r * t;\n        t = t / d;\n      \
    \  i++;\n    }\n    \n    while (i < base)\n    {\n        result += (char)(10\
    \ + '0');\n        i++;\n    }\n    \n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8rd30qpi.d(32): Error: C style cast illegal, use `cast(char)(digit
    + \''0\'')`\n/tmp/tmp8rd30qpi.d(36): Error: C style cast illegal, use `cast(char)(digit
    - \''0\'')`\n/tmp/tmp8rd30qpi.d(49): Error: C style cast illegal, use `cast(char)(10
    + \''0\'')`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rd30qpi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdbnbzu8g.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdbnbzu8g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while(temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    while(temp < 0)\n    {\n        result = to_string(abs(temp\
    \ % base)) + result;\n        temp = abs(temp / base);\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphzmemjvk.d(24): Error: undefined identifier `to_string`\n/tmp/tmphzmemjvk.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmphzmemjvk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        if (temp % base == 0) {\n            temp = temp / base;\n          \
    \  result = result + to_string(temp);\n        }\n        else {\n           \
    \ temp = temp / base;\n            result = result + to_string(temp);\n      \
    \      result = result + \"0\";\n        }\n    }\n    \n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, int base) \n{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0) {\n        if (temp % base == 0) {\n            temp = temp / base;\n   \
    \         result = result + to_string(temp);\n        }\n        else {\n    \
    \        temp = temp / base;\n            result = result + to_string(temp);\n\
    \            result = result + \"0\";\n        }\n    }\n    \n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, short base) \n{\n   \
    \ string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        if (temp % base == 0) {\n            temp = temp / base;\n\
    \            result = result + to_string(temp);\n        }\n        else {\n \
    \           temp = temp / base;\n            result = result + to_string(temp);\n\
    \            result = result + \"0\";\n        }\n    }\n    \n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, byte base) \n{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0) {\n        if (temp % base == 0) {\n            temp = temp / base;\n   \
    \         result = result \nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppjthpg5c.d(125): Error: found `unittest` when expecting `;`
    following statement\n/tmp/tmppjthpg5c.d(142): Error: found `End of File` when
    expecting `}` following compound statement\n/tmp/tmppjthpg5c.d(142): Error: found
    `End of File` when expecting `}` following compound statement\n/tmp/tmppjthpg5c.d(142):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppjthpg5c.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        long r = temp\
    \ % base;\n        temp = temp / base;\n        result = to_string(base) + result;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqrk_zup0.d(23): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrk_zup0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long n = x;\n    long d = 1;\n    \n    while (n != 0) {\n    \
    \    long r = n % base;\n        n /= base;\n        d *= base;\n        result\
    \ += char(r);\n    }\n    \n    string s = to_string(d);\n    \n    while (s.length()\
    \ < base) {\n        s = \"0\" + s;\n    }\n    \n    return result + s;\n}\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppzt36y8a.d(25): Error: cannot implicitly convert expression
    `r` of type `long` to `char`\n/tmp/tmppzt36y8a.d(28): Error: undefined identifier
    `to_string`\n/tmp/tmppzt36y8a.d(30): Error: no property `length` for type `string`\n/tmp/tmppzt36y8a.d(31):
    Error: invalid array operation `"0" + s` (possible missing [])\n/tmp/tmppzt36y8a.d(34):
    Error: invalid array operation `result + s` (possible missing [])\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmppzt36y8a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long tmp = x;\n    \n    while (base > 0)\n    {\n        if (tmp\
    \ % base == 0)\n        {\n            result += tmp / base;\n            tmp\
    \ %= base;\n        }\n        else\n        {\n            result += tmp % base;\n\
    \            tmp /= base;\n        }\n        \n        base--;\n    }\n    \n\
    \    result += tmp;\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp97227n5k.d(24): Error: incompatible types for `(result) += (tmp
    / base)`: `string` and `long`\n/tmp/tmp97227n5k.d(29): Error: incompatible types
    for `(result) += (tmp % base)`: `string` and `long`\n/tmp/tmp97227n5k.d(36): Error:
    incompatible types for `(result) += (tmp)`: `string` and `long`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp97227n5k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = temp % base + result;\n        temp = temp / base;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_xfn4d_o.d(23): Error: incompatible types for `(temp % base)
    + (result)`: `long` and `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_xfn4d_o.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = temp % base + result;\n        temp = temp / base;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_xfn4d_o.d(23): Error: incompatible types for `(temp % base)
    + (result)`: `long` and `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_xfn4d_o.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0)\n\
    \    {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_mwlcems.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_mwlcems.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long n = x;\n    long d = 1;\n    while (n >= base) {\n       \
    \ n /= base;\n        d *= base;\n    }\n    long r = n;\n    while (r > 0) {\n\
    \        r = r / base;\n        result += to_string(r);\n    }\n    result +=\
    \ (d > 1) ? to_string(d) : \"\";\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmmy_ufm4.d(27): Error: undefined identifier `to_string`\n/tmp/tmpmmy_ufm4.d(29):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpmmy_ufm4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while (x != 0) {\n        remainder\
    \ = x % base;\n        result += (char)('0' + remainder);\n        x /= base;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpobzd_z2d.d(22): Error: C style cast illegal, use `cast(char)(\''0\''
    + remainder)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpobzd_z2d.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdbnbzu8g.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdbnbzu8g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdbnbzu8g.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdbnbzu8g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        \n        if (temp != 0) {\n           \
    \ result += to_string(temp);\n        }\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0jr1kchf.d(26): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0jr1kchf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    return result;\n}\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, int base) \n{\n    string result =\
    \ \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp > 0)\
    \ {\n        result = to_string(temp % base) + result;\n        temp = temp /\
    \ base;\n    }\n    \n    return result;\n}\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, short base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    return result;\n}\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, ushort base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    return result;\n}\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, int base) \n{\n    string result =\
    \ \"\";\n\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp190huy4l.d(123): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp190huy4l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjgzj433_.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjgzj433_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(base) + result;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjl7tgiz9.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjl7tgiz9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0)\n    {\n        temp = x %\
    \ base;\n        result += (char)('0' + temp);\n        x /= base;\n    }\n  \
    \  \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhgk8sfe.d(23): Error: C style cast illegal, use `cast(char)(\''0\''
    + temp)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhgk8sfe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x > 0) {\n        temp = x % base;\n\
    \        result = to_string(temp) + result;\n        x = x / base;\n    }\n  \
    \  \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1gwd7fet.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1gwd7fet.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long n = x;\n    long r = 1;\n    string digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    ;\n    \n    while (n > 0)\n    {\n        r = r * base;\n        n = n / base;\n\
    \    }\n    \n    long temp = r;\n    \n    while (temp != 0)\n    {\n       \
    \ result = digits[temp % base] + result;\n        temp = temp / base;\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpop_zkk6l.d(32): Error: incompatible types for `(digits[cast(ulong)(temp
    % base)]) + (result)`: `immutable(char)` and `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpop_zkk6l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp44biv630.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44biv630.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        int digit = temp\
    \ % base;\n        result += char(digit);\n        temp /= base;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,c++11,string |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;\nunittest\n{\n  \
    \  alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps8_5mnyl.d(26): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps8_5mnyl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x > 0) {\n        temp = x % base;\n\
    \        result += (char)('0' + temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9por3q8v.d(22): Error: C style cast illegal, use `cast(char)(\''0\''
    + temp)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9por3q8v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp != 0) {\n\t\tresult\
    \ = to_string(temp % base) + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp44skuyw2.d(23): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44skuyw2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        result += (char)('0' + temp % base);\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaamzzh2_.d(25): Error: C style cast illegal, use `cast(char)(\''0\''
    + temp % base)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaamzzh2_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0)\n    {\n        temp = x %\
    \ base;\n        result += to_string(temp);\n        x = x / base;\n    }\n  \
    \  \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn1wzgdb_.d(23): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1wzgdb_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long n = x;\n    long d = 1;\n    long r = 1;\n    long t = 1;\n\
    \    long base2 = base;\n    long base3 = base2;\n    long base4 = base3;\n  \
    \  long base5 = base4;\n    long base6 = base5;\n    long base7 = base6;\n   \
    \ long base8 = base7;\n    long base9 = base8;\n    long base10 = base9;\n   \
    \ long base11 = base10;\n    long base12 = base11;\n    long base13 = base12;\n\
    \    long base14 = base13;\n    long base15 = base14;\n    long base16 = base15;\n\
    \    long base17 = base16;\n    long base18 = base17;\n    long base19 = base18;\n\
    \    long base20 = base19;\n    long base21 = base20;\n    long base22 = base21;\n\
    \    long base23 = base22;\n    long base24 = base23;\n    long base25 = base24;\n\
    \    long base26 = base25;\n    long base27 = base26;\n    long base28 = base27;\n\
    \    long base29 = base28;\n    long base30 = base29;\n    long base31 = base30;\n\
    \    long base32 = base31;\n    long base33 = base32;\n    long base34 = base33;\n\
    \    long base35 = base34;\n    long base36 = base35;\n    long base37 = base36;\n\
    \    long base38 = base37;\n    long base39 = base38;\n    long base40 = base39;\n\
    \    long base41 = base40;\n    long base42 = base41;\n    long base43 = base42;\n\
    \    long base44 = base43;\n    long base45 = base44;\n    long base46 = base45;\n\
    \    long base47 = base46;\n    long base48 = base47;\n    long base49 = base48;\n\
    \    long base50 = base49;\n    long base51 = base50;\n    long base52 = base51;\n\
    \    long base53 = base52;\n    long base54 = base53;\n    long base55 = base54;\n\
    \    long base56 = base55;\n    long base57 = base56;\n    long base58 = base57;\n\
    \    long \nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj6mzza85.d(80): Error: no identifier for declarator `long`\n/tmp/tmpj6mzza85.d(80):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpj6mzza85.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long tmp = x;\n\
    \    string res = \"\";\n    while(true)\n    {\n        tmp = tmp / base;\n \
    \       if(tmp == 0)\n        {\n            break;\n        }\n        res +=\
    \ (char)(tmp % base);\n    }\n    return res;\n}\n/*\n    Convert number x to\
    \ string representation with base base\n    \n    \n    >>> to_string(8L, 3L)\n\
    \    \"22\"\n    >>> to_string(8L, 2L)\n    \"1000\"\n    >>> to_string(7L, 2L)\n\
    \    \"111\"\n    \n*/\nstring to_string(long x, long base) \n{\n    string res\
    \ = \"\";\n    while(true)\n    {\n        long tmp = x;\n        while(true)\n\
    \        {\n            tmp = tmp / base;\n            if(tmp == 0)\n        \
    \    {\n                break;\n            }\n            res += (char)(tmp %\
    \ base);\n        }\n        if(res.length() > 0)\n        {\n            break;\n\
    \        }\n    }\n    return res;\n}\n/*\n    Convert number x to string representation\
    \ with base base\n    \n    \n    >>> to_string(8L, 3L)\n    \"22\"\n    >>> to_string(8L,\
    \ 2L)\n    \"1000\"\n    >>> to_string(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ to_string(double x, long base) \n{\n    string res = \"\";\n    while(true)\n\
    \    {\n        double tmp = x;\n        while(true)\n        {\n            tmp\
    \ = tmp / base;\n            if(tmp == 0)\n            {\n                break;\n\
    \            }\n            res += (char)(tmp % base);\n        }\n        if(res.length()\
    \ > 0)\n        {\n            break;\n        }\n    }\n    return res;\n}\n\
    /*\n    Convert number x to string representation with base base\n    \n    \n\
    \    >>> to_string(8L, 3L)\n    \"22\"\n    >>> to_string(8L, 2L)\n    \"1000\"\
    \n    >>> to_string(7L, 2L)\n    \"111\"\n    \n*/\nstring to_string(float x,\
    \ long base) \n{\n    string res = \"\";\n    while(true)\n    {\n        float\
    \ tmp = x;\n        while(true)\n        {\n            tmp = tmp / base;\n  \
    \          if(tmp == 0)\n            {\n                break;\n            }\n\
    \            res += (char)(tmp % base);\n        }\n        if(res.length() >\
    \ 0)\n        {\n            break;\n        }\n    }\n    return res;\n}\n/*\n\
    \    Convert number x to string representation with base base\n    \n    \n  \
    \  >>> to_string(8L, 3L)\n    \"22\"\n    >>> to_string(8L, 2L)\n    \"1000\"\n\
    \    >>> to_string(7L, \nunittest\n{\n    alias candidate = change_base;\n\n \
    \   assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpko5u8t8q.d(26): Error: C style cast illegal, use `cast(char)(tmp
    % base)`\n/tmp/tmpko5u8t8q.d(55): Error: C style cast illegal, use `cast(char)(tmp
    % base)`\n/tmp/tmpko5u8t8q.d(89): Error: C style cast illegal, use `cast(char)(tmp
    % base)`\n/tmp/tmpko5u8t8q.d(123): Error: C style cast illegal, use `cast(char)(tmp
    % base)`\n/tmp/tmpko5u8t8q.d(132): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpko5u8t8q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeos0e23f.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeos0e23f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6jpni2mu.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6jpni2mu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\t\n\twhile (x > 0) {\n\t\tlong r = x % base;\n\t\tx = x / base;\n\t\t\
    result = char(r) + result;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6hrsu4a7.d(22): Error: cannot implicitly convert expression
    `r` of type `long` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6hrsu4a7.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while (x != 0) {\n        remainder\
    \ = x % base;\n        result += (char)('0' + remainder);\n        x /= base;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpobzd_z2d.d(22): Error: C style cast illegal, use `cast(char)(\''0\''
    + remainder)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpobzd_z2d.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5c3_ynqy.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c3_ynqy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long r = x;\n\
    \    string s = \"\";\n    while(base > 0)\n    {\n        r = r / base;\n   \
    \     s = to_string(base) + s;\n        base = base * 10;\n    }\n    return to_string(base)\
    \ + to_string(r);\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsa0uirx9.d(22): Error: undefined identifier `to_string`\n/tmp/tmpsa0uirx9.d(25):
    Error: undefined identifier `to_string`\n/tmp/tmpsa0uirx9.d(25): Error: undefined
    identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsa0uirx9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    if (temp == 0)\n        result = to_string(temp) +\
    \ result;\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpimh5o4u5.d(23): Error: undefined identifier `to_string`\n/tmp/tmpimh5o4u5.d(28):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpimh5o4u5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzgs7wln4.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzgs7wln4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        long mod = temp\
    \ % base;\n        temp = temp / base;\n        result = to_string(mod) + result;\n\
    \    }\n    return result;\n}\n/*\n    Convert string to integer.\n    \n    string\
    \ -> int\n    \n*/\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp242iz81u.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp242iz81u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long rem = x %\
    \ base;\n    string result = \"\";\n    \n    if (rem == 0)\n    {\n        result\
    \ = to_string(base);\n    }\n    else\n    {\n        string s = to_string(base);\n\
    \        \n        while (x != 0)\n        {\n            long temp = x % base;\n\
    \            \n            if (temp == 0)\n            {\n                result\
    \ += s;\n            }\n            else\n            {\n                result\
    \ += to_string(temp);\n            }\n            \n            x /= base;\n \
    \       }\n    }\n    \n    return result;\n}\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, int base) \n{\n    long rem = x %\
    \ base;\n    string result = \"\";\n    \n    if (rem == 0)\n    {\n        result\
    \ = to_string(base);\n    }\n    else\n    {\n        string s = to_string(base);\n\
    \        \n        while (x != 0)\n        {\n            long temp = x % base;\n\
    \            \n            if (temp == 0)\n            {\n                result\
    \ += s;\n            }\n            else\n            {\n                result\
    \ += to_string(temp);\n            }\n            \n            x /= base;\n \
    \       }\n    }\n    \n    return result;\n}\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, short base) \n{\n    long rem = x\
    \ % base;\n    string result = \"\";\n    \n    if (rem == 0)\n    {\n       \
    \ result = to_string(base);\n    }\n    else\n    {\n        string s = to_string(base);\n\
    \        \n        while (x != 0)\n        {\n            long temp = x % base;\n\
    \            \n            if (temp == 0)\n            {\n                result\
    \ += s;\n            }\n            else\n            {\n                result\
    \ += to_string(temp);\n            }\n            \n            x /= base;\n \
    \       }\n    }\n    \n    return result;\n}\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg4k2drel.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg4k2drel.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp44biv630.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44biv630.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long r = temp % base;\n        temp = temp / base;\n        result =\
    \ to_string(r) + result;\n    }\n    \n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd7hdwn1b.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd7hdwn1b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdbnbzu8g.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdbnbzu8g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp44biv630.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44biv630.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    if (temp > 0)\n\
    \    {\n        result = change_base(temp, base);\n    }\n    \n    temp = x %\
    \ base;\n    \n    if (temp > 0)\n    {\n        result += (temp - 1) * base;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdzqti874.d(31): Error: incompatible types for `(result) += ((temp
    - 1L) * base)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpdzqti874.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnfems0__.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnfems0__.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long remainder = temp % base;\n        temp = temp / base;\n        result\
    \ = remainder + result;\n    }\n    \n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5_nzf3sq.d(25): Error: incompatible types for `(remainder) +
    (result)`: `long` and `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5_nzf3sq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjgzj433_.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjgzj433_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    if (temp == 0)\n\
    \    {\n        result = \"0\";\n    }\n    else\n    {\n        result = to_string(temp);\n\
    \    }\n    \n    result += \"0\";\n    \n    while (result != \"0\" && result\
    \ != \"1\")\n    {\n        temp = result / base;\n        \n        if (temp\
    \ == 0)\n        {\n            result = \"0\";\n        }\n        else\n   \
    \     {\n            result = to_string(temp);\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp93wj5ien.d(28): Error: undefined identifier `to_string`\n/tmp/tmp93wj5ien.d(31):
    Error: slice `result` is not mutable\n/tmp/tmp93wj5ien.d(35): Error: incompatible
    types for `(result) / (base)`: `string` and `long`\n/tmp/tmp93wj5ien.d(43): Error:
    undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp93wj5ien.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp44biv630.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44biv630.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    long temp2 = base;\n    while(temp != 0)\n\
    \    {\n        temp = temp / temp2;\n        result = to_string(temp) + result;\n\
    \        temp2 = temp2 - 1;\n    }\n    return result;\n}\n/*\nChange numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n\
    \    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, int base) \n{\n    string\
    \ result = \"\";\n    long temp = x;\n    int temp2 = base;\n    while(temp !=\
    \ 0)\n    {\n        temp = temp / temp2;\n        result = to_string(temp) +\
    \ result;\n        temp2 = temp2 - 1;\n    }\n    return result;\n}\n/*\nChange\
    \ numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, short base) \n{\n   \
    \ string result = \"\";\n    long temp = x;\n    short temp2 = base;\n    while(temp\
    \ != 0)\n    {\n        temp = temp / temp2;\n        result = to_string(temp)\
    \ + result;\n        temp2 = temp2 - 1;\n    }\n    return result;\n}\n/*\nChange\
    \ numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, ushort base) \n{\n  \
    \  string result = \"\";\n    long temp = x;\n    ushort temp2 = base;\n    while(temp\
    \ != 0)\n    {\n        temp = temp / temp2;\n        result = to_string(temp)\
    \ + result;\n        temp2 = temp2 - 1;\n    }\n    return result;\n}\n/*\nChange\
    \ numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, int base) \n\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2yckzyu6.d(117): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yckzyu6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    if (x < base)\n    {\n        result = to_string(x\
    \ - base) + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp0s9s9tf.d(24): Error: undefined identifier `to_string`\n/tmp/tmpp0s9s9tf.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpp0s9s9tf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(base) + result;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjl7tgiz9.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjl7tgiz9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long tmp = x;\n    \n    while (base > 0)\n    {\n        tmp =\
    \ tmp / base;\n        result += to_string(tmp);\n        base--;\n    }\n   \
    \ \n    while (base < 0)\n    {\n        tmp = tmp * base;\n        result +=\
    \ to_string(tmp);\n        base++;\n    }\n    \n    return result;\n}\n/*\n \
    \   Convert a string to integer.\n    \n    Input string can be in any base from\
    \ 2 to 36. \n    \n    Output integer in base 10.\n    \n    Input string can\
    \ have leading zeros.\n    \n    >>> to_int(\"0\", 10)\n    0\n    >>> to_int(\"\
    1\", 10)\n    1\n    >>> to_int(\"10\", 10)\n    10\n    >>> to_int(\"100\", 10)\n\
    \    100\n    >>> to_int(\"1000\", 10)\n    1000\n    >>> to_int(\"1000000000000\"\
    , 10)\n    1000000000000\n    >>> to_int(\"100000000000000\", 10)\n    100000000000000\n\
    \    >>> to_int(\"1000000000000000\", 10)\n    1000000000000000\n    >>> to_int(\"\
    10000000000000000\", 10)\n    10000000000000000\n    >>> to_int(\"100000000000000000\"\
    , 10)\n    100000000000000000\n    >>> to_int(\"1000000000000000000\", 10)\n \
    \   1000000000000000000\n    >>> to_int(\"10000000000000000000\", 10)\n    10000000000000000000\n\
    \    >>> to_int(\"100000000000000000000\", 10)\n    100000000000000000000\n  \
    \  >>> to_int(\"1000000000000000000000\", 10)\n    1000000000000000000000\n  \
    \  >>> to_int(\"10000000000000000000000\", 10)\n    10000000000000000000000\n\
    \    >>> to_int(\"100000000000000000000000\", 10)\n    100000000000000000000000\n\
    \    >>> to_int(\"1000000000000000000000000\", 10)\n    1000000000000000000000000\n\
    \    >>> to_int(\"10000000000000000000000000\", 10)\n    10000000000000000000000000\n\
    \    >>> to_int(\"100000000000000000000000000\", 10)\n    100000000000000000000000000\n\
    \    >>> to_int(\"1000000000000000000000000000\", 10)\n    1000000000000000000000000000\n\
    \    >>> to_int(\"10000000000000000000000000000\", 10)\n    10000000000000000000000000000\n\
    \    >>> to_int(\"100000000000000000000000000000\", 10)\n    100000000000000000000000000000\n\
    \    >>> to_int(\"1000000000000000000000000000000\", 10)\n    1000000000000000000000000000000\n\
    \    >>> to_int(\"10000000000000000000000000000000\", 10)\n    10000000000000000000000000000000\n\
    \    >>> to_int(\"100000000000000000000000000000000\", 10)\n    100000000000000000000000000000000\n\
    \    >>> to_int(\"1000000000000000000000000000000000\", 10)\n    1000000000000000000000000000000000\n\
    \    >>> to_int(\"1000000000000000000000000000000000\", 10)\n    1000000000000000000\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx3lujw2n.d(36): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpx3lujw2n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1euhek_a.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1euhek_a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        long rem = temp\
    \ % base;\n        temp = temp / base;\n        result = to_string(rem) + result;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuk8yegxe.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuk8yegxe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x > 0)\n    {\n        temp = x %\
    \ base;\n        result += to_string(temp);\n        x /= base;\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4f5sa14i.d(23): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4f5sa14i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result += (char)('0' + temp % base);\n \
    \   }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe6gbjt6b.d(24): Error: C style cast illegal, use `cast(char)(\''0\''
    + temp % base)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe6gbjt6b.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x / base;\n\t\n\twhile (temp > 0) {\n\t\t\
    result = to_string(temp % base) + result;\n\t\ttemp = temp / base;\n\t}\n\t\n\t\
    while (temp < 0) {\n\t\tresult = to_string(abs(temp)) + result;\n\t\ttemp = abs(temp);\n\
    \t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6qk1d4ps.d(23): Error: undefined identifier `to_string`\n/tmp/tmp6qk1d4ps.d(28):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp6qk1d4ps.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        long mod = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(mod) + result;\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpel3h6s_q.d(26): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpel3h6s_q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5c3_ynqy.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c3_ynqy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += (char)('0' + temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbje_2b_e.d(22): Error: C style cast illegal, use `cast(char)(\''0\''
    + temp)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbje_2b_e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        \n        if (temp == 0)\n       \
    \ {\n            result += \"0\";\n        }\n        else\n        {\n      \
    \      result += to_string(temp);\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_tjdzrp2.d(28): Error: slice `result` is not mutable\n/tmp/tmp_tjdzrp2.d(32):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp_tjdzrp2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5c3_ynqy.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c3_ynqy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long r = x;\n\
    \    string s = \"\";\n    while(base > 0)\n    {\n        r = r / base;\n   \
    \     s = to_string(base) + s;\n        base = base * 10;\n    }\n    while(base\
    \ > 0)\n    {\n        r = r * base;\n        s = to_string(base) + s;\n     \
    \   base = base * 10;\n    }\n    return to_string(r) + s;\n}\nunittest\n{\n \
    \   alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0altym1k.d(22): Error: undefined identifier `to_string`\n/tmp/tmp0altym1k.d(28):
    Error: undefined identifier `to_string`\n/tmp/tmp0altym1k.d(31): Error: undefined
    identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0altym1k.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdbnbzu8g.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdbnbzu8g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_9_jd85i.d(24): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_9_jd85i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(base) + result;\n    }\n    \n    return result;\n}\n/*\n    Convert\
    \ binary number to decimal number.\n    \n    Input binary number is a string\
    \ with only '0' and '1'.\n    \n    Output decimal number is a string with only\
    \ '0' and '1'.\n    \n    \n    >>> to_decimal(\"1001\")\n    \"7\"\n    >>> to_decimal(\"\
    1010\")\n    \"15\"\n    >>> to_decimal(\"1111\")\n    \"31\"\n    \n*/\nstring\
    \ to_decimal(string binary) \n{\n    string result = \"\";\n    \n    for (int\
    \ i = 0; i < binary.length(); i++) {\n        long temp;\n        \n        if\
    \ (binary[i] == '1') {\n            temp = pow(10, binary.length() - 1 - i);\n\
    \            result = to_string(temp) + result;\n        }\n    }\n    \n    return\
    \ result;\n}\n/*\n    Convert decimal number to binary number.\n    \n    Input\
    \ decimal number is a string with only '0' and '1'.\n    \n    Output binary number\
    \ is a string with only '0' and '1'.\n    \n    \n    >>> to_binary(\"7\")\n \
    \   \"1001\"\n    >>> to_binary(\"15\")\n    \"1010\"\n    >>> to_binary(\"31\"\
    )\n    \"1111\"\n    \n*/\nstring to_binary(string decimal) \n{\n    string result\
    \ = \"\";\n    \n    for (int i = 0; i < decimal.length(); i++) {\n        long\
    \ temp;\n        \n        if (decimal[i] == '0') {\n            temp = pow(10,\
    \ decimal.length() - 1 - i);\n            result = to_string(temp) + result;\n\
    \        }\n    }\n    \n    return result;\n}\n/*\n    Convert hexadecimal number\
    \ to decimal number.\n    \n    Input hexadecimal number is a string with only\
    \ '0' and '1'.\n    \n    Output decimal number is a string with only '0' and\
    \ '1'.\n    \n    \n    >>> to_decimal(\"1001\")\n    \"7\"\n    >>> to_decimal(\"\
    1010\")\n    \"15\"\n    >>> to_decimal(\"1111\")\n    \"31\"\n    \n*/\nstring\
    \ to_decimal(string hexadecimal) \n{\n    string result = \"\";\n    \n    for\
    \ (int i = 0; i < hexadecimal.length(); i++) {\n        long temp;\n        \n\
    \        if (hexadecimal[i] == '1') {\n            temp = pow(16, hexadecimal.length()\
    \ - 1 - i);\n            result = to_string(temp) + result;\n        }\n    }\n\
    \    \n    return result;\n}\n/*\n    \nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjj45bdfx.d(123): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjj45bdfx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp = x;\n\
    \    string result = \"\";\n    while(temp > 0)\n    {\n        int digit = temp\
    \ % base;\n        temp = temp / base;\n        if(digit > 0)\n        {\n   \
    \         result += digit;\n        }\n    }\n    return result;\n}\n/*\n    Convert\
    \ a string to integer with base base and sign sign.\n    \n    >>> string_to_int(\"\
    100\", 2, 1)\n    100\n    >>> string_to_int(\"100\", 2, -1)\n    100\n    >>>\
    \ string_to_int(\"100\", 2, 0)\n    100\n    >>> string_to_int(\"100\", 2, 2)\n\
    \    100\n    >>> string_to_int(\"100\", 2, -2)\n    100\n    >>> string_to_int(\"\
    100\", 2, 3)\n    100\n    >>> string_to_int(\"100\", 2, -3)\n    100\n    >>>\
    \ string_to_int(\"100\", 2, 4)\n    100\n    >>> string_to_int(\"100\", 2, -4)\n\
    \    100\n    >>> string_to_int(\"100\", 2, 5)\n    100\n    >>> string_to_int(\"\
    100\", 2, -5)\n    100\n    >>> string_to_int(\"100\", 2, 6)\n    100\n    >>>\
    \ string_to_int(\"100\", 2, -6)\n    100\n    >>> string_to_int(\"100\", 2, 7)\n\
    \    100\n    >>> string_to_int(\"100\", 2, -7)\n    100\n    >>> string_to_int(\"\
    100\", 2, 8)\n    100\n    >>> string_to_int(\"100\", 2, -8)\n    100\n    >>>\
    \ string_to_int(\"100\", 2, 9)\n    100\n    >>> string_to_int(\"100\", 2, -9)\n\
    \    100\n    >>> string_to_int(\"100\", 2, 10)\n    100\n    >>> string_to_int(\"\
    100\", 2, -10)\n    100\n    >>> string_to_int(\"100\", 2, 11)\n    100\n    >>>\
    \ string_to_int(\"100\", 2, -11)\n    100\n    >>> string_to_int(\"100\", 2, 12)\n\
    \    100\n    >>> string_to_int(\"100\", 2, -12)\n    100\n    >>> string_to_int(\"\
    100\", 2, 13)\n    100\n    >>> string_to_int(\"100\", 2, -13)\n    100\n    >>>\
    \ string_to_int(\"100\", 2, 14)\n    100\n    >>> string_to_int(\"100\", 2, -14)\n\
    \    100\n    >>> string_to_int(\"100\", 2, 15)\n    100\n    >>> string_to_int(\"\
    100\", 2, -15)\n    100\n    >>> string_to_int(\"100\", 2, 16)\n    100\n    >>>\
    \ string_to_int(\"100\", 2, -16)\n\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp07l0l9lq.d(30): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp07l0l9lq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long n = x;\n\
    \    string result = \"\";\n    while(n > 0)\n    {\n        int digit = n % base;\n\
    \        result += digits[digit];\n        n /= base;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfrxuvzo_.d(21): Error: cannot implicitly convert expression
    `n % base` of type `long` to `int`\n/tmp/tmpfrxuvzo_.d(22): Error: undefined identifier
    `digits`, did you mean variable `digit`?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpfrxuvzo_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long n = x;\n\
    \    string result = \"\";\n    while(n > 0)\n    {\n        long r = n % base;\n\
    \        result += char(r + '0');\n        n = n / base;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprw89twjm.d(22): Error: cannot implicitly convert expression
    `r + 48L` of type `long` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprw89twjm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0n5u6hgz.d(22): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0n5u6hgz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long n = x;\n    \n    while (n != 0) {\n        long r = n % base;\n\
    \        result += char(r);\n        n = n / base;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc7s5bkh5.d(22): Error: cannot implicitly convert expression
    `r` of type `long` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc7s5bkh5.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeos0e23f.d(25): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeos0e23f.d", "-I/tmp"]\n'''
  stdout: b''
