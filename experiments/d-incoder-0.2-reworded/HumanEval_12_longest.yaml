name: HumanEval_12_longest
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings, return\
  \ the longest one. Return the first one in case of multiple\n    strings of the\
  \ same length. Return null in case the input array is empty.\n    >>> longest([])\n\
  \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
  a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
  \ strings) \n"
tests: "unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
  \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
  , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n\
  {\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
  , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\n\
  void main(){}"
completions: ["{\n    if (strings.length == 0) {\n        return null;\n    }\n  \
    \  \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    \n    return\
    \ maxString;\n}", "{\n\tint? maxLength = null;\n\tforeach(string; strings) {\n\
    \t\tint length = string.length;\n\t\tif (maxLength == null || length > maxLength)\
    \ {\n\t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n}", "{\n\tint?\
    \ maxLength = null;\n\tforeach (string s in strings) {\n\t\tif (maxLength == null\
    \ || s.length() > maxLength) {\n\t\t\tmaxLength = s.length;\n\t\t}\n\t}\n\treturn\
    \ maxLength;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string;\
    \ strings) {\n        if (longest == null || string.length >= longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (string string : strings) {\n        int length\
    \ = string.length;\n        if (length > maxLength) {\n            maxLength =\
    \ length;\n            maxString = string;\n        }\n    }\n    \n    return\
    \ maxString;\n}", "{\n    if (strings.length == 0) {\n        return null;\n \
    \   }\n    \n    int maxLength = 0;\n    string maxString = null;\n    foreach\
    \ (string s in strings) {\n        if (s.length() > maxLength) {\n           \
    \ maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return\
    \ maxString;\n}", "{\n\tif (strings.length == 0) {\n\t\treturn null;\n\t}\n\t\n\
    \tstring longest = strings[0];\n\tfor (int i = 1; i < strings.length; i++) {\n\
    \t\tif (strings[i].length() > longest.length()) {\n\t\t\tlongest = strings[i];\n\
    \t\t}\n\t}\n\treturn longest;\n}", "{\n    if (strings.length == 0) {\n      \
    \  return null;\n    }\n    \n    int maxLen = strings[0].length;\n    string\
    \ longest = strings[0];\n    \n    for (int i = 1; i < strings.length; ++i) {\n\
    \        if (strings[i].length >= maxLen) {\n            longest = strings[i];\n\
    \            maxLen = longest.length;\n        }\n    }\n    \n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLength = 0;\n    string maxString = null;\n    foreach (string s in\
    \ strings) {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n\
    \    if (strings.length == 0)\n        return null;\n    \n    int maxLength =\
    \ 0;\n    string maxString = null;\n    foreach (string s in strings)\n    {\n\
    \        if (s.length() > maxLength)\n        {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n\
    \    Nullable!(string) longest = null;\n    foreach(string; strings)\n    {\n\
    \        if (longest == null || string.length < longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}", "{\n\tif (strings.length == 0) {\n\
    \t\treturn null;\n\t}\n\t\n\tstring longest = strings[0];\n\t\n\tfor (int i =\
    \ 1; i < strings.length; i++) {\n\t\tif (strings[i].length() > longest.length())\
    \ {\n\t\t\tlongest = strings[i];\n\t\t}\n\t}\n\t\n\treturn longest;\n}", "{\n\
    \    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length();\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for (var\
    \ i = 1; i < strings.length; i++) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    int? maxLength = null;\n    foreach (string s in strings) {\n    \
    \    if (maxLength == null || s.length() > maxLength) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}", "{\n    var longest\
    \ = strings[0];\n    foreach(string; strings)\n    {\n        if (string.length\
    \ > longest.length)\n        {\n            longest = string;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    \n    int maxLen = 0;\n    string max = null;\n    foreach\
    \ (string s in strings) {\n        int len = s.length();\n        if (len > maxLen)\
    \ {\n            max = s;\n            maxLen = len;\n        }\n    }\n    return\
    \ max;\n}", "{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach(string;\
    \ strings) {\n        var length = string.length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = string;\n      \
    \  }\n    }\n    return maxString;\n}\n</code>\n<|/ a tags=string,arrays,c#,algorithm\
    \ |>\n<| c |>\nI like your solution but I think it would be better to use a foreach\
    \ loop instead of an index. Also the return statement should be `return maxLength\
    \ > 0 ? maxString : null;`\n<|/ c |>\n<| c |>\nI agree with you on both counts.\
    \ I wanted to keep it simple and avoid the extra variable and to keep it close\
    \ to the OP's original code. Also, I think it would be better to return `null`\
    \ instead of `\"\"` if the input array is empty. I'll edit my answer to reflect\
    \ this.\n<|/ c |>\n<| c |>\nI agree with you on both counts. I wanted to keep\
    \ it simple and avoid the extra variable and to keep it close to the OP's original\
    \ code. Also, I think it would be better to return `null` instead of `\"\"` if\
    \ the input array is empty. I'll edit my answer to reflect this.\n<|/ c |>\n<|\
    \ a tags=string,arrays,c#,algorithm |>\n<code>\nstring longest(string [] strings)\n\
    {\n    string longest = \"\";\n    foreach (string s in strings)\n    {\n    \
    \    if (s.Length > longest.Length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work if there are multiple strings of the same length. Try it with\
    \ `string[] strings = { \"a\", \"bb\", \"ccc\", \"dddd\" };`\n<|/ c |>\n<| c |>\n\
    Yes, it does. Try it with `string[] strings = { \"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\" };`\n<|/ c |>\n<| c |>\nIt doesn't work if there are multiple strings\
    \ of the same length. Try it with `string[] strings = { \"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\" };`\n<|/ c |>\n<| c |>\nYes, it does. Try it with `string[]\
    \ strings = { \"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\" };`\n<|/ c |>\n<| c |>\n\
    It doesn't work if there are multiple strings of the same length. Try it with\
    \ `string[] strings = { \"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\" };`\n<|/ ",
  "{\n    if (strings.length == 0)\n        return null;\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i)\n        if (strings[i].length >=\
    \ longest.length)\n            longest = strings[i];\n    return longest;\n}",
  "{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (string s in strings) {\n\
    \        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    \n    return maxString;\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    var maxLength\
    \ = 0;\n    var maxString = \"\";\n    for (var i = 0; i != strings.length; ++i)\
    \ {\n        var length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    return maxString;\n}", "{\n    if (strings.length == 0)\n\
    \        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n\
    \    \n    for (int i = 0; i < strings.length; ++i)\n    {\n        int length\
    \ = strings[i].length;\n        if (length > maxLength)\n        {\n         \
    \   maxLength = length;\n            maxString = strings[i];\n        }\n    }\n\
    \    \n    return maxString;\n}", "{\n    int? maxLength = null;\n    foreach(string;\
    \ strings) {\n        if (maxLength == null || string.length < maxLength.value)\n\
    \            maxLength = string.length;\n    }\n    return maxLength;\n}", "{\n\
    \    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}", "{\n\tint? maxLength = null;\n\
    \tstring maxString = null;\n\t\n\tforeach(string; strings) {\n\t\tif (maxLength\
    \ == null || string.length < maxLength) {\n\t\t\tmaxLength = string.length;\n\t\
    \t\tmaxString = string;\n\t\t}\n\t}\n\t\n\treturn maxString;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLen = 0;\n    int maxIndex\
    \ = 0;\n    \n    for (int i = 0; i < strings.length; ++i) {\n        int len\
    \ = strings[i].length;\n        if (len > maxLen) {\n            maxLen = len;\n\
    \            maxIndex = i;\n        }\n    }\n    \n    return strings[maxIndex];\n\
    }", "{\n    var longest:string = Null!(string);\n    var longestLength:int = 0;\n\
    \    foreach(string; strings)\n    {\n        if(longestLength < string.length)\n\
    \        {\n            longest = string;\n            longestLength = string.length;\n\
    \        }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    \n    int maxLength = 0;\n    int maxIndex =\
    \ 0;\n    \n    for (int i = 0; i < strings.length; ++i) {\n        int length\
    \ = strings[i].length;\n        if (length > maxLength) {\n            maxLength\
    \ = length;\n            maxIndex = i;\n        }\n    }\n    \n    return strings[maxIndex];\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    var maxLength\
    \ = 0;\n    var maxString = \"\";\n    for (var i = 0; i != strings.length; ++i)\
    \ {\n        var s = strings[i];\n        if (s.length == maxLength) {\n     \
    \       maxString = s;\n        }\n        else {\n            maxLength = s.length;\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n\
    \    if (strings.length == 0)\n        return null;\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    for (var i = 0; i != strings.length; ++i) {\n\
    \        var s = strings[i];\n        if (s.length == maxLength)\n           \
    \ continue;\n        if (s.length > maxLength) {\n            maxLength = s.length;\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n\
    \tint? maxLength = null;\n\tforeach(string; strings) {\n\t\tint length = string.length;\n\
    \t\tif (maxLength == null || length > maxLength) {\n\t\t\tmaxLength = length;\n\
    \t\t}\n\t}\n\treturn maxLength;\n}", "{\n    if (strings.length == 0) {\n    \
    \    return null;\n    }\n    int maxLength = 0;\n    int maxIndex = 0;\n    for\
    \ (int i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n}", "{\n\t\
    int? maxLength = null;\n\tforeach (string s in strings) {\n\t\tint? length = s.length();\n\
    \t\tif (maxLength == null || length < maxLength) {\n\t\t\tmaxLength = length;\n\
    \t\t}\n\t}\n\treturn maxLength;\n}", "{\n    var maxLength = 0;\n    var maxString\
    \ = \"\";\n    foreach(string; strings) {\n        if (string.length > maxLength)\
    \ {\n            maxLength = string.length;\n            maxString = string;\n\
    \        }\n    }\n    return maxString;\n}", "{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    \n    for (string string : strings) {\n        int length = string.length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = string;\n        }\n    }\n    \n    return maxString;\n}", "{\n\
    \tint? maxLength = null;\n\tforeach(string,strings) {\n\t\tif(maxLength == null\
    \ || string.length >= maxLength) {\n\t\t\tmaxLength = string.length;\n\t\t}\n\t\
    }\n\treturn maxLength;\n}", "{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    \n    string longest = strings[0];\n    \n    for (string\
    \ s : strings) {\n        if (s.length() > longest.length()) {\n            longest\
    \ = s;\n        }\n    }\n    \n    return longest;\n}", "{\n    int? maxLength\
    \ = null;\n    foreach (string s in strings) {\n        if (maxLength == null\
    \ || s.length() > maxLength.Value()) {\n            maxLength = s.length;\n  \
    \      }\n    }\n    return maxLength;\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\n\
    function longestString(strings: string[]): string {\n    let longestString: string\
    \ = null;\n    strings.forEach((string) => {\n        if (longestString == null\
    \ || string.length > longestString.length) {\n            longestString = string;\n\
    \        }\n    });\n    return longestString;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring longestString(string[]\
    \ strings) {\n    string longest = null;\n    foreach (string s in strings) {\n\
    \        if (longest == null || s.Length > longest.Length) {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring longestString(string[] strings)\n\
    {\n    string longest = null;\n    foreach (string s in strings)\n    {\n    \
    \    if (longest == null || s.Length > longest.Length)\n        {\n          \
    \  longest = s;\n        }\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nstring longestString(string[] strings)\n{\n  \
    \  string longest = null;\n    foreach (string s in strings)\n    {\n        if\
    \ (longest == null || s.Length > longest.Length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=2 |>\n<code>\nstring longestString(string[] strings)\n{\n  \
    \  string longest = null;\n    foreach (string s in strings)\n    {\n        if\
    \ (longest == null || s.Length > longest.Length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring longestString(string[] strings)\n\
    {\n    string longest = null;\n    foreach (string s in strings)\n    {\n    \
    \    if (longest == null || s.Length > longest.Length)\n        {\n          \
    \  longest = s;\n        }\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\n", "{\n    if (strings.length == 0) {\n      \
    \  return null;\n    }\n    \n    int maxLength = 0;\n    string maxString = null;\n\
    \    \n    for (int i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n}",
  "{\n    int? maxLength = null;\n    foreach (string s in strings) {\n        if\
    \ (maxLength == null || s.length() > maxLength) {\n            maxLength = s.length;\n\
    \        }\n    }\n    return maxLength;\n}", "{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    \n    for (string s in strings) {\n        if (s.length() > maxLength)\
    \ {\n            maxLength = s.length();\n            maxString = s;\n       \
    \ }\n    }\n    \n    return maxString;\n}", "{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}", "{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    \n    int maxLen = 0;\n    string maxStr = null;\n    \n \
    \   for (string str : strings) {\n        if (str.length() > maxLen) {\n     \
    \       maxLen = str.length();\n            maxStr = str;\n        }\n    }\n\
    \    \n    return maxStr;\n}", "{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ i++) {\n        var len = strings[i].length;\n        if (len > longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLength = 0;\n    string maxString = null;\n    foreach (string s in\
    \ strings) {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n\
    \    if (strings.length == 0) {\n        return null;\n    }\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}", "{\n\tint? maxLength = null;\n\tforeach(string; strings)\
    \ {\n\t\tint length = string.length;\n\t\tif (maxLength == null || length > maxLength)\
    \ {\n\t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n}", "{\n    if\
    \ (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n\
    \    string maxString = null;\n    \n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLen = 0;\n    string maxStr =\
    \ null;\n    for (string str : strings) {\n        int len = str.length;\n   \
    \     if (len > maxLen) {\n            maxLen = len;\n            maxStr = str;\n\
    \        }\n    }\n    return maxStr;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string; strings) {\n        if (longest == null || string.length\
    \ >= longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLength = 0;\n    string maxString = null;\n    \n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        int length = strings[i].length();\n    \
    \    if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    \n    return maxString;\n}", "{\n\t\n\t\
    if (strings.length == 0)\n\t\treturn null;\n\t\n\tstring longest = strings[0];\n\
    \t\n\tfor (int i = 1; i < strings.length; i++)\n\t{\n\t\tif (strings[i].length()\
    \ > longest.length())\n\t\t\tlongest = strings[i];\n\t}\n\t\n\treturn longest;\n\
    }", "{\n\t\n\tint? maxLength = null;\n\tstring maxString = null;\n\t\n\tforeach(string,s,strings)\
    \ {\n\t\t\n\t\tif(s.length() > maxLength) {\n\t\t\tmaxLength = s.length;\n\t\t\
    \tmaxString = s;\n\t\t}\n\t}\n\t\n\treturn maxString;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length() > longest.length()) {\n            longest = string;\n  \
    \      }\n    }\n    return longest;\n}", "{\n\tint? maxLength = null;\n\tforeach\
    \ (string s in strings) {\n\t\tif (maxLength == null || s.length() > maxLength.Value())\
    \ {\n\t\t\tmaxLength = s.length;\n\t\t}\n\t}\n\treturn maxLength;\n}", "{\n  \
    \  int? maxLength = null;\n    foreach(string; strings) {\n        if (maxLength\
    \ == null || string.length < maxLength.value)\n            maxLength = string.length;\n\
    \    }\n    return maxLength;\n}", "{\n    if (strings.length == 0)\n        return\
    \ null;\n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= longest.length)\n            longest\
    \ = strings[i];\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string; strings) {\n        if (longest == null || string.length()\
    \ > longest.length()) {\n            longest = string;\n        }\n    }\n   \
    \ return longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    \n    int maxLength = 0;\n    int maxIndex = 0;\n    \n    for (int\
    \ i = 0; i < strings.length; i++) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxIndex = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}",
  "{\n    int? maxLength = null;\n    foreach(string; strings) {\n        if (maxLength\
    \ == null || string.length < maxLength.value)\n            maxLength = string.length;\n\
    \    }\n    return maxLength;\n}", "{\n    if (strings.length == 0) {\n      \
    \  return null;\n    }\n    \n    string longest = strings[0];\n    \n    for\
    \ (string s : strings) {\n        if (s.length() > longest.length()) {\n     \
    \       longest = s;\n        }\n    }\n    \n    return longest;\n}", "{\n  \
    \  if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n\
    \    int maxIndex = 0;\n    \n    for (int i = 0; i < strings.length; ++i) {\n\
    \        int length = strings[i].length;\n        if (length > maxLength) {\n\
    \            maxLength = length;\n            maxIndex = i;\n        }\n    }\n\
    \    \n    return strings[maxIndex];\n}", "{\n    var maxLength = 0;\n    var\
    \ maxString = \"\";\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxString =\
    \ s;\n        }\n    }\n    return maxString;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0;\
    \ i &lt; strings.length; i++) {\n        var s = strings[i];\n        if (s.length\
    \ &gt; maxLength) {\n            maxLength = s.length;\n            maxString\
    \ = s;\n        }\n    }\n    return maxString;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLen = strings[0].length;\n\
    \    \n    for (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= maxLen) {\n            return strings[i];\n        }\n        maxLen = strings[i].length;\n\
    \    }\n    \n    return null;\n}", "{\n\tif (strings.length == 0)\n\t\treturn\
    \ null;\n\telse\n\t\treturn strings[0];\n}", "{\n    int? longestLength = null;\n\
    \    foreach(string[] stringArray, strings) {\n        int length = stringArray.length;\n\
    \        if (longestLength == null || length > longestLength) {\n            longestLength\
    \ = length;\n        }\n    }\n    return longestLength;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ < longest.length) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}", "{\n\tint? longestLength = null;\n\tstring longestString\
    \ = null;\n\tforeach(string[] stringArray, strings) {\n\t\tint stringLength =\
    \ stringArray.length;\n\t\tif(longestLength == null || stringLength > longestLength)\
    \ {\n\t\t\tlongestLength = stringLength;\n\t\t\tlongestString = stringArray[0];\n\
    \t\t}\n\t}\n\treturn longestString;\n}", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    \n    for (int i = 0; i < strings.length; ++i) {\n        int length\
    \ = strings[i].length;\n        if (length > maxLength) {\n            maxLength\
    \ = length;\n            maxString = strings[i];\n        }\n    }\n    \n   \
    \ return maxString;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    \n    int maxLength = 0;\n    string maxString = null;\n    \n   \
    \ for (int i = 0; i < strings.length; i++) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n}",
  "{\n\tint? longestLength = null;\n\tstring longestString = null;\n\tforeach(string[]\
    \ stringArray, strings) {\n\t\tint stringLength = stringArray.length;\n\t\tif\
    \ (longestLength == null || longestLength > stringLength) {\n\t\t\tlongestLength\
    \ = stringLength;\n\t\t\tlongestString = stringArray[0];\n\t\t}\n\t}\n\treturn\
    \ longestString;\n}", "{\n\tint? maxLength = null;\n\tstring maxString = null;\n\
    \tforeach(string,s,strings) {\n\t\tint length = s.length();\n\t\tif(maxLength\
    \ == null || length > maxLength) {\n\t\t\tmaxLength = length;\n\t\t\tmaxString\
    \ = s;\n\t\t}\n\t}\n\treturn maxString;\n}", "{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    \n    int[] lengths = strings.length.map!(x\
    \ => x.toInt);\n    int maxLength = lengths.max;\n    \n    for (int i = 0; i\
    \ < lengths.length; i++) {\n        if (lengths[i] != maxLength) {\n         \
    \   return strings[i];\n        }\n    }\n    \n    return null;\n}", "{\n   \
    \ int? maxLength = null;\n    foreach (string s in strings) {\n        int len\
    \ = s.length();\n        if (maxLength == null || len > maxLength) {\n       \
    \     maxLength = len;\n        }\n    }\n    return maxLength;\n}", "{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = strings[0];\n    \n    for (int i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length() > maxLength) {\n            maxLength\
    \ = strings[i].length();\n            maxString = strings[i];\n        }\n   \
    \ }\n    \n    return maxString;\n}", "{\n\tint? maxLength = null;\n\tforeach(string;\
    \ strings) {\n\t\tint length = string.length;\n\t\tif (maxLength == null || length\
    \ > maxLength) {\n\t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n\
    }", "{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n", "{\n    if (strings.length == 0) {\n        return null;\n  \
    \  }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0; i\
    \ &lt; strings.length; ++i) {\n        var s = strings[i];\n        if (s.length\
    \ &gt; maxLength) {\n            maxLength = s.length;\n            maxString\
    \ = s;\n        }\n    }\n    return maxString;\n}\n</pre>\n</div>", "{\n    int?\
    \ maxLength = null;\n    foreach(string; strings) {\n        if (maxLength ==\
    \ null || string.length >= maxLength) {\n            maxLength = string.length;\n\
    \        }\n    }\n    return maxLength;\n}", "{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    \n    int maxLen = strings[0].length;\n\
    \    \n    for (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= maxLen) {\n            maxLen = strings[i].length;\n        }\n    }\n  \
    \  \n    return strings[strings.length - 1];\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (int i = 0; i < strings.length; i++) {\n  \
    \      int length = strings[i].length;\n        if (length > maxLength) {\n  \
    \          maxLength = length;\n            maxString = strings[i];\n        }\n\
    \    }\n    \n    return maxString;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach (string s in strings) {\n        if (longest == null || s.length()\
    \ > longest.length()) {\n            longest = s;\n        }\n    }\n    return\
    \ longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n   \
    \ }\n    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++)\
    \ {\n        if (strings[i].length >= longest.length) {\n            longest =\
    \ strings[i];\n        }\n    }\n    return longest;\n}", "{\n\tint? maxLength\
    \ = null;\n\tforeach(string; strings) {\n\t\tint? length = string.length;\n\t\t\
    if (maxLength == null || length > maxLength) {\n\t\t\tmaxLength = length;\n\t\t\
    }\n\t}\n\treturn maxLength;\n}", "{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    \n    int maxLength = 0;\n    string maxString = null;\n \
    \   \n    for (int i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      int length = s.length();\n        if (length > maxLength) {\n         \
    \   maxLength = length;\n            maxString = s;\n        }\n    }\n    return\
    \ maxString;\n}", "{\n    if (strings.length == 0) {\n        return null;\n \
    \   }\n    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for\
    \ (string string : strings) {\n        int length = string.length;\n        if\
    \ (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = string;\n        }\n    }\n    \n    return maxString;\n}", "{\n\tint? maxLength\
    \ = null;\n\tforeach (string s in strings)\n\t{\n\t\tif (maxLength == null ||\
    \ s.length() > maxLength.value)\n\t\t{\n\t\t\tmaxLength = s.length;\n\t\t}\n\t\
    }\n\treturn maxLength;\n}", "{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    \n    int maxLength = 0;\n    string maxString = null;\n \
    \   foreach (string s in strings) {\n        if (s.length() > maxLength) {\n \
    \           maxLength = s.length();\n            maxString = s;\n        }\n \
    \   }\n    return maxString;\n}", "{\n    if (strings.length == 0) {\n       \
    \ return null;\n    }\n    \n    int maxLength = 0;\n    int maxIndex = 0;\n \
    \   \n    for (int i = 0; i < strings.length; ++i) {\n        int length = strings[i].length();\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxIndex = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}",
  "{\n    int? maxLength = null;\n    foreach (string s in strings) {\n        if\
    \ (maxLength == null || s.length() > maxLength.Value()) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (string string : strings) {\n        int length\
    \ = string.length;\n        if (length > maxLength) {\n            maxLength =\
    \ length;\n            maxString = string;\n        }\n    }\n    \n    return\
    \ maxString;\n}", "{\n    if (strings.length == 0) {\n        return null;\n \
    \   }\n    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for\
    \ (int i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLength\
    \ = 0;\n    int maxIndex = 0;\n    for (int i = 0; i < strings.length; ++i) {\n\
    \        int length = strings[i].length;\n        if (length > maxLength) {\n\
    \            maxLength = length;\n            maxIndex = i;\n        }\n    }\n\
    \    return strings[maxIndex];\n}", "{\n\tint? maxLength = null;\n\tstring maxString\
    \ = null;\n\tforeach(string,string,strings) {\n\t\tif (maxLength == null || maxLength\
    \ > string.length)\n\t\t\tmaxLength = string.length;\n\t\tif (maxString == null\
    \ || maxString.length < string.length)\n\t\t\tmaxString = string;\n\t}\n\treturn\
    \ maxString;\n}", "{\n    foreach (string s in strings) {\n        if (s.length()\
    \ > longest.length)\n            longest = s;\n    }\n    return longest;\n}",
  "{\n    var longest = strings[0];\n    for (var i = 1; i < strings.length; ++i)\
    \ {\n        var len = strings[i].length;\n        if (len > longest.length) longest\
    \ = strings[i];\n    }\n    return longest;\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    int maxLen = strings[0].length;\n\
    \    \n    for (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= maxLen) {\n            return strings[i];\n        }\n        maxLen = strings[i].length;\n\
    \    }\n    \n    return null;\n}", "{\n    if (strings.length == 0) {\n     \
    \   return null;\n    }\n    \n    int maxLength = 0;\n    int maxIndex = 0;\n\
    \    \n    for (int i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxIndex = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    int maxLen = 0;\n    int maxIndex = 0;\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLen) {\n            maxLen = s.length();\n  \
    \          maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n}\n\
    </code>\n<|/ a |>\n<| c |>\nI like your solution, but I wonder why you didn't\
    \ use std.algorithm.maxBy instead of writing your own maxBy function?\n<|/ c |>\n\
    <| c |>\nBecause I didn't know about std.algorithm.maxBy. Thanks for pointing\
    \ it out!\n<|/ c |>\n<| c |>\nI didn't know about std.algorithm.maxBy either.\
    \ Thanks for pointing it out!\n<|/ c |>\n<| a |>\nI came up with a solution that\
    \ uses std.algorithm.maxBy and std.algorithm.minBy:\n<code>\nimport std.algorithm;\n\
    import std.array;\nimport std.conv;\nimport std.stdio;\nimport std.string;", "{\n\
    \    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (string string : strings)\
    \ {\n        if (string.length > maxLength) {\n            maxLength = string.length;\n\
    \            maxString = string;\n        }\n    }\n    \n    return maxString;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLength = 0;\n    string maxString = null;\n    \n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        int length = strings[i].length;\n      \
    \  if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    \n    return maxString;\n}", "{\n\tint?\
    \ maxLength = null;\n\tforeach (string s in strings)\n\t{\n\t\tif (maxLength ==\
    \ null || s.length() > maxLength)\n\t\t{\n\t\t\tmaxLength = s.length;\n\t\t}\n\
    \t}\n\treturn maxLength;\n}", "{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    \n    int maxLen = strings[0].length;\n    \n    for (int\
    \ i = 1; i < strings.length; i++) {\n        if (strings[i].length >= maxLen)\
    \ {\n            return strings[i];\n        }\n        maxLen = strings[i].length;\n\
    \    }\n    \n    return null;\n}", "{\n\tint? maxLength = null;\n\tstring maxString\
    \ = null;\n\tforeach(string; strings) {\n\t\tif (maxLength == null || string.length\
    \ < maxLength) {\n\t\t\tmaxLength = string.length;\n\t\t\tmaxString = string;\n\
    \t\t}\n\t}\n\treturn maxString;\n}", "{\n    if (strings.length == 0) {\n    \
    \    return null;\n    }\n    int maxLength = 0;\n    string maxString = null;\n\
    \    for (string s : strings) {\n        if (s.length() > maxLength) {\n     \
    \       maxLength = s.length();\n            maxString = s;\n        }\n    }\n\
    \    return maxString;\n}", "{\n\tint? maxLength = null;\n\tforeach(string,strings)\
    \ \n\t{\n\t\tint length = string.length;\n\t\tif (maxLength == null || length\
    \ > maxLength)\n\t\t{\n\t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n\
    }", "{\n    int? maxLength = null;\n    foreach (string s in strings) {\n    \
    \    int len = s.length();\n        if (maxLength == null || len > maxLength)\
    \ {\n            maxLength = len;\n        }\n    }\n    return maxLength;\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (string string : strings)\
    \ {\n        int length = string.length;\n        if (length > maxLength) {\n\
    \            maxLength = length;\n            maxString = string;\n        }\n\
    \    }\n    \n    return maxString;\n}", "{\n    if (strings.length == 0)\n  \
    \      return null;\n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= longest.length)\n            longest\
    \ = strings[i];\n    }\n    return longest;\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLength = 0;\n    string maxString\
    \ = strings[0];\n    for (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length()\
    \ > maxLength) {\n            maxLength = strings[i].length();\n            maxString\
    \ = strings[i];\n        }\n    }\n    return maxString;\n}", "{\n    int? maxLength\
    \ = null;\n    foreach (string s in strings) {\n        if (maxLength == null\
    \ || s.length() > maxLength) {\n            maxLength = s.length;\n        }\n\
    \    }\n    return maxLength;\n}", "{\n    if (strings.length == 0) {\n      \
    \  return null;\n    }\n    \n    int maxLength = 0;\n    string maxString = null;\n\
    \    \n    for (int i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n}",
  "{\n\tint? maxLength = null;\n\tstring maxString = null;\n\tforeach(string; strings)\
    \ {\n\t\tint length = string.length;\n\t\tif (maxLength == null || length > maxLength)\
    \ {\n\t\t\tmaxLength = length;\n\t\t\tmaxString = string;\n\t\t}\n\t}\n\treturn\
    \ maxString;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string;\
    \ strings) {\n        if (longest == null || string.length < longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    string longest = strings[0];\n\
    \    \n    for (string s : strings) {\n        if (s.length() > longest.length())\
    \ {\n            longest = s;\n        }\n    }\n    \n    return longest;\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    var maxLength\
    \ = 0;\n    var maxString = \"\";\n    for (var i = 0; i &lt; strings.length;\
    \ i++) {\n        var s = strings[i];\n        if (s.length &gt; maxLength) {\n\
    \            maxLength = s.length;\n            maxString = s;\n        }\n  \
    \  }\n    return maxString;\n}", "{\n    int? maxLength = null;\n    foreach (string\
    \ s in strings) {\n        if (maxLength == null || s.length() > maxLength.Value())\
    \ {\n            maxLength = s.length;\n        }\n    }\n    return maxLength;\n\
    }", "{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength\
    \ = 0;\n    string maxString = strings[0];\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}", "{\n\tint? maxLength = null;\n\
    \tstring maxString = null;\n\tforeach(string,s,strings) {\n\t\tif(s.length() >\
    \ maxLength) {\n\t\t\tmaxLength = s.length;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\
    \treturn maxString;\n}", "{\n    var maxLength = 0;\n    var maxString = \"\"\
    ;\n    foreach(string; strings) {\n        var length = string.length;\n     \
    \   if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = string;\n        }\n    }\n    return maxString;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length >= longest.length)\n            longest = string;\n    }\n\
    \    return longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length > longest.length) {\n            longest\
    \ = strings[i];\n        }\n    }\n    return longest;\n}", "{\n\tint? maxLength\
    \ = null;\n\tforeach(string; strings) {\n\t\tint length = string.length;\n\t\t\
    if (maxLength == null || length > maxLength) {\n\t\t\tmaxLength = length;\n\t\t\
    }\n\t}\n\treturn maxLength;\n}", "{\n    if (strings.length == 0)\n        return\
    \ null;\n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= longest.length)\n            longest\
    \ = strings[i];\n    }\n    return longest;\n}", "{\n    if (strings.length ==\
    \ 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    \n    for (string s : strings)\n    {\n        int length = s.length();\n\
    \        if (length > maxLength)\n        {\n            maxLength = length;\n\
    \            maxString = s;\n        }\n    }\n    \n    return maxString;\n}",
  "{\n\tint? maxLength = null;\n\tforeach(string; strings) {\n\t\tint length = string.length;\n\
    \t\tif (maxLength == null || length > maxLength) {\n\t\t\tmaxLength = length;\n\
    \t\t}\n\t}\n\treturn maxLength;\n}", "{\n    if (strings.length == 0) {\n    \
    \    return null;\n    }\n    \n    int maxLength = 0;\n    string maxString =\
    \ null;\n    \n    for (string string : strings) {\n        if (string.length\
    \ > maxLength) {\n            maxLength = string.length;\n            maxString\
    \ = string;\n        }\n    }\n    \n    return maxString;\n}", "{\n\tint? maxLength\
    \ = null;\n\tstring maxString = null;\n\tforeach(string,s,strings) {\n\t\tif(s.length()\
    \ > maxLength) {\n\t\t\tmaxLength = s.length;\n\t\t\tmaxString = s;\n\t\t}\n\t\
    }\n\treturn maxString;\n}", "{\n    int? maxLength = null;\n    foreach(string;\
    \ strings) {\n        if (maxLength == null || string.length < maxLength) {\n\
    \            maxLength = string.length;\n        }\n    }\n    return maxLength;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLength = 0;\n    string maxString = null;\n    \n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        int length = strings[i].length();\n    \
    \    if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    \n    return maxString;\n}", "{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    for (var i = 0; i &lt; strings.length; i++) {\n\
    \        var length = strings[i].length;\n        if (length &gt; maxLength) {\n\
    \            maxLength = length;\n            maxString = strings[i];\n      \
    \  }\n    }\n    return maxString;\n}", "{\n    if (strings.length == 0)\n   \
    \     return null;\n    \n    int maxLength = 0;\n    string maxString = strings[0];\n\
    \    \n    for (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length()\
    \ > maxLength) {\n            maxLength = strings[i].length();\n            maxString\
    \ = strings[i];\n        }\n    }\n    \n    return maxString;\n}", "{\n    if\
    \ (strings.length == 0)\n        return null;\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i)\n        if (strings[i].length >=\
    \ longest.length)\n            longest = strings[i];\n    return longest;\n}\n\
    /*\n Out of array of strings, return the shortest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return null in case the input\
    \ array is empty.\n    >>> shortest([\"\"])\n    None\n    >>> shortest([\"a\"\
    , \"b\", \"c\"])\n    \"a\"\n    >>> shortest([\"a\", \"bb\", \"ccc\"])\n    \"\
    a\"\n    \n*/\nNullable!(string) shortest(string[] strings) \n{\n    if (strings.length\
    \ == 0)\n        return null;\n    var shortest = strings[0];\n    for (var i\
    \ = 1; i < strings.length; ++i)\n        if (strings[i].length < shortest.length)\n\
    \            shortest = strings[i];\n    return shortest;\n}\n/*\n Out of array\
    \ of strings, return the longest one in case of multiple strings of the same length.\n\
    \    Return null in case the input array is empty.\n    >>> longest([\"a\", \"\
    b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\
    \n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length\
    \ == 0)\n        return null;\n    var longest = strings[0];\n    for (var i =\
    \ 1; i < strings.length; ++i)\n        if (strings[i].length > longest.length)\n\
    \            longest = strings[i];\n    return longest;\n}\n/*\n Out of array\
    \ of strings, return the shortest one in case of multiple strings of the same\
    \ length.\n    Return null in case the input array is empty.\n    >>> shortest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> shortest([\"a\", \"bb\", \"ccc\"])\n \
    \   \"a\"\n    \n*/\nNullable!(string) shortest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    var shortest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i)\n        if (strings[i].length <\
    \ shortest.length)\n            shortest = strings[i];\n    return shortest;\n\
    }\n/*\n Out of array of strings, return the longest one in case of multiple strings\
    \ of the same length.\n    Return null in case the input array is empty.\n   \
    \ >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\"\
    , \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings)\
    \ \n{\n    if (strings.length == 0)\n        return null;\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i)\n        if (strings[i].length >\
    \ longest.length)\n            longest", "{\n    if (strings.length == 0)\n  \
    \      return null;\n    \n    int maxLength = 0;\n    int maxIndex = 0;\n   \
    \ \n    for (int i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxIndex = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}",
  "{\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\
    \ longest = s;\n    }\n    return longest;\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (string string : strings) {\n        int length\
    \ = string.length;\n        if (length > maxLength) {\n            maxLength =\
    \ length;\n            maxString = string;\n        }\n    }\n    \n    return\
    \ maxString;\n}", "{\n    var longest:string = Null!(string);\n    var i:int =\
    \ 0;\n    var len:int = 0;\n    var s:string = strings[i];\n    while(i < strings.length)\n\
    \    {\n        len = s.length();\n        if(len > longest.length)\n        {\n\
    \            longest = s;\n        }\n        i++;\n        s = strings[i];\n\
    \    }\n    return longest;\n}", "{\n\tif (strings.length == 0)\n\t\treturn null;\n\
    \t\n\tstring longest = strings[0];\n\t\n\tfor (int i = 1; i < strings.length;\
    \ ++i)\n\t{\n\t\tif (strings[i].length() > longest.length())\n\t\t\tlongest =\
    \ strings[i];\n\t}\n\t\n\treturn longest;\n}", "{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    \n    for (int i = 0; i < strings.length; ++i) {\n        int length\
    \ = strings[i].length;\n        if (length > maxLength) {\n            maxLength\
    \ = length;\n            maxString = strings[i];\n        }\n    }\n    \n   \
    \ return maxString;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    \n    int maxLength = 0;\n    string maxString = null;\n    \n   \
    \ for (string string : strings) {\n        int length = string.length;\n     \
    \   if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = string;\n        }\n    }\n    \n    return maxString;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString\
    \ = strings[0];\n    \n    for (int i = 1; i < strings.length; ++i) {\n      \
    \  int length = strings[i].length;\n        if (length > maxLength) {\n      \
    \      maxLength = length;\n            maxString = strings[i];\n        }\n \
    \   }\n    \n    return maxString;\n}", "{\n    int? maxLength = null;\n    foreach\
    \ (string s in strings) {\n        if (maxLength == null || s.length() > maxLength)\
    \ {\n            maxLength = s.length;\n        }\n    }\n    return maxLength;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}", "{\n   \
    \ if (strings.length == 0) {\n        return null;\n    }\n    \n    string longest\
    \ = strings[0];\n    \n    for (int i = 1; i < strings.length; ++i) {\n      \
    \  if (strings[i].length() > longest.length()) {\n            longest = strings[i];\n\
    \        }\n    }\n    \n    return longest;\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    var maxLength = 0;\n    var maxString\
    \ = \"\";\n    foreach (string s in strings) {\n        if (s.length() > maxLength)\
    \ {\n            maxLength = s.length();\n            maxString = s;\n       \
    \ }\n    }\n    return maxString;\n}", "{\n    if (strings.length == 0) {\n  \
    \      return null;\n    }\n    \n    int maxLength = 0;\n    int maxIndex = 0;\n\
    \    \n    for (int i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxIndex = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (string string : strings)\
    \ {\n        if (string.length > maxLength) {\n            maxLength = string.length;\n\
    \            maxString = string;\n        }\n    }\n    \n    return maxString;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n        var len\
    \ = strings[i].length;\n        if (len > longest.length) {\n            longest\
    \ = strings[i];\n        }\n    }\n    return longest;\n}", "{\n\tif (strings.length\
    \ == 0)\n\t\treturn null;\n\t\n\tstring longest = strings[0];\n\t\n\tfor (int\
    \ i = 1; i < strings.length; i++)\n\t{\n\t\tif (strings[i].length() > longest.length)\n\
    \t\t\tlongest = strings[i];\n\t}\n\t\n\treturn longest;\n}", "{\n    foreach(string;\
    \ strings) {\n        if (string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}", "{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length;\n        }\n    }\n    return\
    \ maxLength;\n}", "{\n    if (strings.length == 0) {\n        return null;\n \
    \   }\n    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for\
    \ (string s in strings) {\n        if (s.length() > maxLength) {\n           \
    \ maxLength = s.length();\n            maxString = s;\n        }\n    }\n    \n\
    \    return maxString;\n}", "{\n    var longest = strings[0];\n    var longestLength\
    \ = longest.length;\n    for(var i = 1; i < strings.length; ++i)\n    {\n    \
    \    var s = strings[i];\n        var l = s.length;\n        if(l > longestLength)\n\
    \        {\n            longest = s;\n            longestLength = l;\n       \
    \ }\n    }\n    return longest;\n}", "{\n\tint? maxLength = null;\n\tstring maxString\
    \ = null;\n\tforeach(string,s,strings) {\n\t\tif (s.length() > maxLength) {\n\t\
    \t\tmaxLength = s.length;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\treturn maxString;\n\
    }", "{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen\
    \ = strings[0].length;\n    \n    for (int i = 1; i < strings.length; ++i) {\n\
    \        if (strings[i].length >= maxLen)\n            continue;\n        \n \
    \       maxLen = strings[i].length;\n    }\n    \n    return strings[strings.length\
    \ - 1];\n}", "{\n    var longest = strings[0];\n    for(var i = 1; i < strings.length;\
    \ ++i)\n        if(strings[i].length >= longest.length)\n            longest =\
    \ strings[i];\n    return longest;\n}", "{\n    int? maxLength = null;\n    foreach(string;\
    \ strings) {\n        if (maxLength == null || string.length < maxLength.value)\n\
    \            maxLength = string.length;\n    }\n    return maxLength;\n}", "{\n\
    \    int? maxLength = null;\n    foreach(string; strings) {\n        if(maxLength\
    \ == null || string.length < maxLength) {\n            maxLength = string.length;\n\
    \        }\n    }\n    return maxLength;\n}", "{\n\tint? maxLength = null;\n\t\
    foreach(string,strings) {\n\t\tint length = string.length;\n\t\tif(maxLength ==\
    \ null || length > maxLength) {\n\t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn\
    \ maxLength;\n}", "{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var maxLength = strings[0].Length;\n\
    \    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].Length\
    \ > maxLength) {\n            maxLength = strings[i].Length;\n        }\n    }\n\
    \    return maxLength > 0 ? strings[0] : null;\n}\n/*\n In array of strings, return\
    \ the longest one in case of multiple strings of the same length.\n    Otherwise\
    \ return the first one in case of multiple strings of different length. Return\
    \ null in case\n    the input array is empty.\n    >>> longestIn([])\n    None\n\
    \    >>> longestIn([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longestIn([\"a\"\
    , \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longestIn(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = strings[0].Length;\n    for (var i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].Length > maxLength) {\n            maxLength\
    \ = strings[i].Length;\n        }\n    }\n    return maxLength > 0 ? strings[0]\
    \ : null;\n}\n/*\n In array of strings, return the longest one in case of multiple\
    \ strings of the same length.\n    Otherwise return the first one in case of multiple\
    \ strings of different length. Return null in case\n    the input array is empty.\n\
    \    >>> longestIn([])\n    None\n    >>> longestIn([\"a\", \"b\", \"c\"])\n \
    \   \"a\"\n    >>> longestIn([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\n\
    Nullable!(string) longestIn(string[] strings) \n{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    var maxLength = strings[0].Length;\n   \
    \ for (var i = 1; i < strings.length; i++) {\n        if (strings[i].Length >\
    \ maxLength) {\n            maxLength = strings[i].Length;\n        }\n    }\n\
    \    return maxLength > 0 ? strings[0] : null;\n}\n/*\n In array of strings, return\
    \ the longest one in case of multiple strings of the same length.\n    Otherwise\
    \ return the first one in case of multiple strings of different length. Return\
    \ null in case\n    the input array is empty.\n    >>> longestIn([])\n    None\n\
    \    >>> longestIn([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longestIn([\"a\"\
    , \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longestIn(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = strings[0].Length;\n    for (var i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].Length > maxLength) {\n            maxLength\
    \ = strings[i].Length;\n        }\n    }\n    return maxLength", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (int i = 0; i < strings.length; ++i) {\n  \
    \      int length = strings[i].length;\n        if (length > maxLength) {\n  \
    \          maxLength = length;\n            maxString = strings[i];\n        }\n\
    \    }\n    \n    return maxString;\n}", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    \n    int maxLength = 0;\n    string maxString\
    \ = strings[0];\n    \n    for (int i = 1; i < strings.length; ++i) {\n      \
    \  if (strings[i].length() > maxLength) {\n            maxLength = strings[i].length();\n\
    \            maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n        var len\
    \ = strings[i].length;\n        if (len > longest.length) {\n            longest\
    \ = strings[i];\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (string s in strings) {\n        int length\
    \ = s.length();\n        if (length > maxLength) {\n            maxLength = length;\n\
    \            maxString = s;\n        }\n    }\n    \n    return maxString;\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      int length = s.length();\n        if (length > maxLength) {\n         \
    \   maxLength = length;\n            maxString = s;\n        }\n    }\n    return\
    \ maxString;\n}", "{\n    if (strings.length == 0) {\n        return null;\n \
    \   }\n    \n    int maxLength = 0;\n    string maxString = null;\n    foreach\
    \ (string s in strings) {\n        if (s.length() > maxLength) {\n           \
    \ maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return\
    \ maxString;\n}", "{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach(string;\
    \ strings) {\n        if (string.length > maxLength) {\n            maxLength\
    \ = string.length;\n            maxString = string;\n        }\n    }\n    return\
    \ maxString;\n}", "{\n    if (strings.length == 0) {\n        return null;\n \
    \   }\n    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for\
    \ (int i = 0; i < strings.length; i++) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n}",
  "{\n\tint? maxLength = null;\n\tstring maxString = null;\n\tforeach(string; strings)\
    \ {\n\t\tif (maxLength == null || string.length < maxLength) {\n\t\t\tmaxLength\
    \ = string.length;\n\t\t\tmaxString = string;\n\t\t}\n\t}\n\treturn maxString;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLength\
    \ = 0;\n    string maxString = null;\n    for (string string : strings) {\n  \
    \      if (string.length > maxLength) {\n            maxLength = string.length;\n\
    \            maxString = string;\n        }\n    }\n    return maxString;\n}",
  "{\n\tint? maxLength = null;\n\tstring maxString = null;\n\tforeach(string[] s,\
    \ strings) {\n\t\tint len = s.length();\n\t\tif (maxLength == null || len > maxLength)\
    \ {\n\t\t\tmaxLength = len;\n\t\t\tmaxString = s[0];\n\t\t}\n\t\telse if (len\
    \ == maxLength) {\n\t\t\tmaxString = maxString + \",\" + s[0];\n\t\t}\n\t}\n\t\
    return maxString;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    \n    int maxLength = 0;\n    int maxIndex = 0;\n    \n    for (int\
    \ i = 0; i < strings.length; i++) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxIndex = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    \n    int maxLength = 0;\n    string maxString = null;\n    \n   \
    \ for (string string : strings) {\n        if (string.length > maxLength) {\n\
    \            maxLength = string.length;\n            maxString = string;\n   \
    \     }\n    }\n    \n    return maxString;\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (string string : strings) {\n        if (string.length\
    \ > maxLength) {\n            maxLength = string.length;\n            maxString\
    \ = string;\n        }\n    }\n    \n    return maxString;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (string s : strings) {\n        int length\
    \ = s.length();\n        if (length > maxLength) {\n            maxLength = length;\n\
    \            maxString = s;\n        }\n    }\n    \n    return maxString;\n}",
  "{\n    int? maxLength = null;\n    foreach (string s in strings) {\n        if\
    \ (maxLength == null || s.length() > maxLength) {\n            maxLength = s.length;\n\
    \        }\n    }\n    return maxLength;\n}", "{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    \n    int maxLen = strings[0].length;\n\
    \    \n    for (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= maxLen) {\n            maxLen = strings[i].length;\n        }\n    }\n  \
    \  \n    return strings[strings.length - 1];\n}", "{\n    if (strings.length ==\
    \ 0)\n        return null;\n    var longest = strings[0];\n    for (var i = 1;\
    \ i < strings.length; ++i) {\n        var s = strings[i];\n        if (s.length\
    \ < longest.length)\n            longest = s;\n    }\n    return longest;\n}",
  "{\n\tif (strings.length == 0)\n\t\treturn null;\n\t\n\tint maxLength = strings[0].length;\n\
    \t\n\tfor (int i = 1; i < strings.length; ++i)\n\t{\n\t\tif (strings[i].length\
    \ >= maxLength)\n\t\t{\n\t\t\tmaxLength = strings[i].length;\n\t\t}\n\t}\n\t\n\
    \treturn strings[strings.length - 1];\n}", "{\n    int? maxLength = null;\n  \
    \  foreach(string; strings) {\n        if (maxLength == null || string.length\
    \ < maxLength.value)\n            maxLength = string.length;\n    }\n    return\
    \ maxLength;\n}", "{\n    if (strings.length == 0) {\n        return null;\n \
    \   }\n    \n    var longest = strings[0];\n    var longestLength = longest.length;\n\
    \    \n    for (var i = 1; i < strings.length; i++) {\n        var s = strings[i];\n\
    \        var length = s.length;\n        if (length > longestLength) {\n     \
    \       longest = s;\n            longestLength = length;\n        }\n    }\n\
    \    \n    return longest;\n}", "{\n    int? maxLength = null;\n    foreach (string\
    \ s in strings) {\n        if (maxLength == null || s.length() > maxLength.Value())\
    \ {\n            maxLength = s.length;\n        }\n    }\n    return maxLength;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLength) {\n            maxLength = s.length();\n  \
    \          maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n\t\
    if (strings.length == 0)\n\t\treturn null;\n\telse\n\t\treturn strings[strings.length\
    \ - 1];\n}", "{\n\tint? maxLength = null;\n\tforeach(string; strings) {\n\t\t\
    int? length = string.length;\n\t\tif (maxLength == null || length > maxLength)\
    \ {\n\t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n}", "{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for (var\
    \ i = 1; i < strings.length; i++) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n\tint? maxLength = null;\n\tstring maxString = null;\n\tforeach(string,s,strings)\
    \ {\n\t\tif(maxLength == null || s.length() > maxLength) {\n\t\t\tmaxLength =\
    \ s.length;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\treturn maxString;\n}", "{\n \
    \   Nullable!(string) longest = null;\n    foreach(string; strings) {\n      \
    \  if (longest == null || string.length() > longest.length()) {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    string longest = strings[0];\n\
    \    \n    for (int i = 1; i < strings.length; i++) {\n        if (strings[i].length()\
    \ > longest.length()) {\n            longest = strings[i];\n        }\n    }\n\
    \    \n    return longest;\n}", "{\n\tint? maxLength = null;\n\tstring maxString\
    \ = null;\n\tforeach(string; strings) {\n\t\tif (maxLength == null || string.length\
    \ < maxLength) {\n\t\t\tmaxLength = string.length;\n\t\t\tmaxString = string;\n\
    \t\t}\n\t}\n\treturn maxString;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string; strings)\n    {\n        if (longest == null || string.length()\
    \ > longest.length())\n            longest = string;\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n        var len\
    \ = strings[i].length;\n        if (len > longest.length) {\n            longest\
    \ = strings[i];\n        }\n    }\n    return longest;\n}\n/*\n Out of array of\
    \ strings, return the shortest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return null in case the input array is empty.\n\
    \    >>> shortest([\"\"])\n    \"\"\n    >>> shortest([\"a\", \"b\", \"c\"])\n\
    \    \"a\"\n    >>> shortest([\"a\", \"bb\", \"ccc\"])\n    \"a\"\n    \n*/\n\
    Nullable!(string) shortest(string[] strings) \n{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    var shortest = strings[0];\n    for (var\
    \ i = 1; i < strings.length; i++) {\n        var len = strings[i].length;\n  \
    \      if (len < shortest.length) {\n            shortest = strings[i];\n    \
    \    }\n    }\n    return shortest;\n}\n/*\n Out of array of strings, return the\
    \ longest one in case of multiple strings of the same length.\n    Return null\
    \ in case the input array is empty.\n    >>> longest([\"a\", \"b\", \"c\"])\n\
    \    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\n\
    Nullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    var longest = strings[0];\n    for (var\
    \ i = 1; i < strings.length; i++) {\n        var len = strings[i].length;\n  \
    \      if (len > longest.length) {\n            longest = strings[i];\n      \
    \  }\n    }\n    return longest;\n}\n/*\n Out of array of strings, return the\
    \ shortest one in case of multiple strings of the same length.\n    Return null\
    \ in case the input array is empty.\n    >>> shortest([\"\"])\n    \"\"\n    >>>\
    \ shortest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> shortest([\"a\", \"bb\"\
    , \"ccc\"])\n    \"a\"\n    \n*/\nNullable!(string) shortest(string[] strings)\
    \ \n{\n    if (strings.length == 0) {\n        return null;\n    }\n    var shortest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n        var len\
    \ = strings[i].length;\n        if (len < shortest.length) {\n            shortest\
    \ = strings[i];\n        }\n    }\n    return shortest;\n}\n/*\n Out of array\
    \ of strings, return the longest one in case of multiple strings of the same length.\n\
    \    Return null in case the input array is empty.\n    >>> longest([\"a\", \"\
    b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\
    \n    \n*/\nNullable!(string) longest(string[] strings) \n", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    \n    for (int i = 0; i < strings.length; ++i) {\n        int length\
    \ = strings[i].length();\n        if (length > maxLength) {\n            maxLength\
    \ = length;\n            maxString = strings[i];\n        }\n    }\n    \n   \
    \ return maxString;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
