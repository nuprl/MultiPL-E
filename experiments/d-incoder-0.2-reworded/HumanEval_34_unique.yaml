name: HumanEval_34_unique
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique elements\
  \ in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
  \ 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n"
tests: "unittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L,\
  \ 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[l.length];\n    Arrays.sort(l);\n \
    \   for(int i = 0; i < l.length; i++)\n        result[i] = l[i];\n    return result;\n\
    }", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; i++)\
    \ \n        u[i] = l[i];\n    Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int\
    \ start, int end) \n{\n    long[] u = new long[end - start];\n    for(int i =\
    \ start; i < end; i++) \n        u[i - start] = l[i];\n    Arrays.sort(u);\n \
    \   return u;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, int start, int end, int step) \n{\n    long[] u = new\
    \ long[end - start];\n    for(int i = start; i < end; i += step) \n        u[i\
    \ - start] = l[i];\n    Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted unique\
    \ elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step, long cmp) \n{\n    long[] u = new long[end - start];\n  \
    \  for(int i = start; i < end; i += step) \n        u[i - start] = l[i];\n   \
    \ Arrays.sort(u, cmp);\n    return u;\n}\n/*\nReturn sorted unique elements in\
    \ an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start, int end, int\
    \ step, long cmp, long ord) \n{\n    long[] u = new long[end - start];\n    for(int\
    \ i = start; i < end; i += step) \n        u[i - start] = l[i];\n    Arrays.sort(u,\
    \ cmp, ord);\n    return u;\n}\n/*\nReturn sorted unique elements in an array\n\
    \    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])", "{\n    long[] result\
    \ = new long[l.length];\n    long[] seen = new long[l.length];\n    for(int i\
    \ = 0; i < l.length; i++) \n    {\n        long val = l[i];\n        if(seen[val]\
    \ == 0) \n        {\n            result[result.length] = val;\n            seen[val]\
    \ = 1;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=java,arrays,algorithm |>\n<code>\npublic static void main(String[] args)\
    \ {\n    int[] arr = new int[]{5,3,5,2,3,3,9,0,123};\n    Arrays.sort(arr);\n\
    \    System.out.println(Arrays.toString(arr));\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't answer the question. OP wants to know if there is a way\
    \ to do this without sorting.\n<|/ c |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to know if there is a way to do this without sorting.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't answer the question. OP wants to know if there is a way to\
    \ do this without sorting.\n<|/ c |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to know if there is a way to do this without sorting.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't answer the question. OP wants to know if there is a way to\
    \ do this without sorting.\n<|/ c |>\n<| a tags=java,arrays,algorithm |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n\
    \        u[l.indexOf(l[i])] = l[i];\n    return u;\n}\n</code>\n<|/ a tags=arrays,sorting,java\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;", "{\n    long[] result = new long[l.length];\n \
    \   Arrays.sort(l);\n    for(int i = 0; i < l.length; i++) \n        result[i]\
    \ = l[i];\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,sorting |>\n<|\
    \ c |>\nThis is not an answer, but a comment. Please, use comments for such things.\n\
    <|/ c |>\n<| c |>\nThis is not an answer, but a comment. Please, use comments\
    \ for such things.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nvar unique = array.Distinct().ToArray();\n\
    </code>\n<|/ a tags=arrays,c#,sorting |>\n<| a tags=arrays,c#,sorting |>\n<code>\n\
    var unique = array.Distinct().ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a |>\n\
    <code>\nvar unique = array.Distinct().ToArray();\n</code>\n<|/ a dscore=2 tags=arrays,c#,sorting\
    \ |>\n<| a dscore=1 |>\n<code>\nvar unique = array.Distinct().ToArray();\n</code>\n\
    <|/ a tags=arrays,c#,sorting |>\n<| a tags=arrays,c#,sorting |>\n<code>\nvar unique\
    \ = array.Distinct().ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,sorting\
    \ |>\n<code>\nvar unique = array.Distinct().ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=arrays,c#,sorting |>\n<code>\nvar unique = array.Distinct().ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,sorting |>\n<code>\nvar unique\
    \ = array.Distinct().ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,sorting\
    \ |>\n<code>\nvar unique = array.Distinct().ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=arrays,c#,sorting |>\n<code>\nvar unique = array.Distinct().ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,sorting |>\n<code>\nvar unique\
    \ = array.Distinct().ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\
    \    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n \
    \       u[l.indexOf(l[i])] = l[i];\n    return u;\n}\n/*\nReturn sorted unique\
    \ elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start,\
    \ int end) \n{\n    long[] u = new long[end - start];\n    for(int i = start;\
    \ i < end; ++i)\n        u[i - start] = l[i];\n    return u;\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int\
    \ start, int end, int step) \n{\n    long[] u = new long[end - start];\n    for(int\
    \ i = start; i < end; i += step)\n        u[i - start] = l[i];\n    return u;\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, int min) \n{\n    long[] u =\
    \ new long[end - start];\n    for(int i = start; i < end; i += step)\n    {\n\
    \        int j = l.indexOf(l[i]);\n        if(j != -1)\n            u[i - start]\
    \ = l[i];\n        else\n            u[i - start] = min;\n    }\n    return u;\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, int min, int max) \n{\n    long[]\
    \ u = new long[end - start];\n    for(int i = start; i < end; i += step)\n   \
    \ {\n        int j = l.indexOf(l[i]);\n        if(j != -1)\n            u[i -\
    \ start] = l[i];\n        else\n            u[i - start] = min;\n    }\n    return\
    \ u;\n}\n/*\nReturn sorted unique elements in an array", "{\n    long[] u = new\
    \ long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n        u[i]\
    \ = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] u = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        u[i] = l[i];\n    }\n \
    \   Arrays.sort(u);\n    return u;\n}", "{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n        result[l.indexOf(l[i])] = l[i];\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,c# |>\n<| c |>\nThis\
    \ is not an answer to the question. He asked for C#, not Java.\n<|/ c |>\n<| c\
    \ |>\nThe question was tagged C#, so I provided a C# solution. He didn't ask for\
    \ Java.\n<|/ c |>\n<| c |>\nThe question was tagged C#, so I provided a C# solution.\
    \ He didn't ask for Java.\n<|/ c |>\n<| c |>\nThe question was tagged C#, so I\
    \ provided a C# solution. He didn't ask for Java.\n<|/ c |>\n<| c |>\nThe question\
    \ was tagged C#, so I provided a C# solution. He didn't ask for Java.\n<|/ c |>\n\
    <| a tags=arrays,sorting,c# |>\n<code>\npublic static void Main(string[] args)\n\
    {\n    int[] arr = new int[] { 5, 3, 5, 4, 2, 3, 4, 3, 9, 0, 123 };\n    Array.Sort(arr);\n\
    \    Console.WriteLine(string.Join(\", \", arr));\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis is not an answer to the question. He asked for C#, not Java.\n\
    <|/ c |>\n<| c |>\nThe question was tagged C#, so I provided a C# solution. He\
    \ didn't ask for Java.\n<|/ c |>\n<| c |>\nThe question was tagged C#, so I provided\
    \ a C# solution. He didn't ask for Java.\n<|/ c |>\n<| c |>\nThe question was\
    \ tagged C#, so I provided a C# solution. He didn't ask for Java.\n<|/ c |>\n\
    <| c |>\nThe question was tagged C#, so I provided a C# solution. He didn't ask\
    \ for Java.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "{\n    long[] res = new long[l.length];\n\
    \    long[] seen = new long[l.length];\n    \n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        long val = l[i];\n        if(seen[val] == 0)\n        {\n\
    \            seen[val] = 1;\n            res[res.length-1] = val;\n        }\n\
    \    }\n    return res;\n}", "{\n    long[] result = new long[l.length];\n   \
    \ Arrays.sort(l);\n    int i = 0;\n    for(; i < l.length; ++i)\n        result[i]\
    \ = l[i];\n    for(; i < result.length; ++i)\n        result[i] = 0L;\n    return\
    \ result;\n}\n</code>\n<|/ a tags=arrays,sorting,c# |>\n<| a dscore=0 |>\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;",
  "{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n\
    \    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}", "{\n\
    \tlong[] u = new long[l.length];\n\tfor (int i = 0; i < l.length; i++)\n\t\tu[i]\
    \ = l[i];\n\tArrays.sort(u);\n\treturn u;\n}", "{\n    long[] u = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        u[i] = l[i];\n    }\n \
    \   Arrays.sort(u);\n    return u;\n}", "{\n    long[] result = new long[l.length];\n\
    \    long prev = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ != prev)\n        {\n            result[i - 1] = l[i];\n            prev = l[i];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,c#,algorithm\
    \ |>\n<| c |>\nThis is not an optimal solution. Consider `unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])` - your algorithm will produce `[5, 3, 9, 123]` instead\
    \ of `[0, 2, 3, 5, 9, 123]`.\n<|/ c |>\n<| c |>\nThis is not an optimal solution.\
    \ Consider `unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])` - your algorithm will\
    \ produce `[5, 3, 9, 123]` instead of `[0, 2, 3, 5, 9, 123]`.\n<|/ c |>\n<| c\
    \ |>\nThis is not an optimal solution. Consider `unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])` - your algorithm will produce `[5, 3, 9, 123]` instead of `[0,\
    \ 2, 3, 5, 9, 123]`.\n<|/ c |>\n<| c |>\nThis is not an optimal solution. Consider\
    \ `unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])` - your algorithm will produce\
    \ `[5, 3, 9, 123]` instead of `[0, 2, 3, 5, 9, 123]`.\n<|/ c |>\n<| c |>\nThis\
    \ is not an optimal solution. Consider `unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])` - your algorithm will produce `[5, 3, 9, 123]` instead of `[0, 2, 3,\
    \ 5, 9, 123]`.\n<|/ c |>\n<| a tags=arrays,sorting,c#,algorithm |>\n<code>\nusing\
    \ System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;",
  "{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length; i++)\
    \ \n    {\n        long current = l[i];\n        for(int j = i + 1; j < l.length;\
    \ j++) \n        {\n            if(l[j] == current) \n            {\n        \
    \        current = l[j];\n            }\n        }\n        result[i] = current;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        long current = l[i];\n\
    \        for(int j = i; j < l.length; j++)\n        {\n            if(l[j] ==\
    \ current)\n            {\n                current = l[j];\n            }\n  \
    \      }\n        result[i] = current;\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if you have\
    \ a duplicate in the array. For example, if `l = [1, 2, 3, 2]`, then `unique`\
    \ returns `[1, 2, 3]`.\n<|/ c |>\n<| c |>\nYes, you are right. I've fixed my answer.\n\
    <|/ c |>\n<| a tags=arrays,sorting,c# |>\n<code>\npublic static void Main(string[]\
    \ args)\n{\n    int[] arr = new int[] { 1, 2, 3, 2 };\n    arr = arr.OrderBy(x\
    \ => x).ToArray();\n    foreach (int i in arr)\n    {\n        Console.WriteLine(i);\n\
    \    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,sorting,c# |>\n<code>\n\
    public static void Main(string[] args)\n{\n    int[] arr = new int[] { 1, 2, 3,\
    \ 2 };\n    arr = arr.OrderBy(x => x).ToArray();\n    foreach (int i in arr)\n\
    \    {\n        Console.WriteLine(i);\n    }\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=arrays,sorting,c# |>\n<code>\npublic static void Main(string[] args)\n\
    {\n    int[] arr = new int[] { 1, 2, 3, 2 };\n    arr = arr.OrderBy(x => x).ToArray();\n\
    \    foreach (int i in arr)\n    {\n        Console.WriteLine(i);\n    }\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=arrays,sorting,c# |>\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;", "{\n\
    \    long[] result = new long[l.length];\n    \n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        long current = l[i];\n        \n        for(int j = i +\
    \ 1; j < l.length; j++)\n        {\n            if(l[j] == current)\n        \
    \    {\n                current = l[j];\n            }\n        }\n        \n\
    \        result[i] = current;\n    }\n    \n    return result;\n}\n/*\nReturn\
    \ sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, int start, int end) \n{\n    long[] result = new long[end - start];\n   \
    \ \n    for(int i = start; i < end; i++)\n    {\n        long current = l[i];\n\
    \        \n        for(int j = i + 1; j < end; j++)\n        {\n            if(l[j]\
    \ == current)\n            {\n                current = l[j];\n            }\n\
    \        }\n        \n        result[i - start] = current;\n    }\n    \n    return\
    \ result;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, int start, int end, int step) \n{\n    long[] result =\
    \ new long[end - start];\n    \n    for(int i = start; i < end; i += step)\n \
    \   {\n        long current = l[i];\n        \n        for(int j = i + 1; j <\
    \ end; j += step)\n        {\n            if(l[j] == current)\n            {\n\
    \                current = l[j];\n            }\n        }\n        \n       \
    \ result[i - start] = current;\n    }\n    \n    return result;\n}\n/*\nReturn\
    \ sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long stepSize) \n{\n    long[] result = new\
    \ long[end - start];\n    \n    for(int i = start; i < end; i += step)\n    {\n\
    \        long current = l[i];\n        \n        for(int j = i + 1; j < end; j\
    \ += step)\n        {\n            if(l[j] == current)\n            {\n      \
    \          current = l[j];\n            }\n        }\n        \n        result",
  "{\n    long[] res = new long[l.length];\n    long last = 0;\n    for(int i = 0;\
    \ i < l.length; i++) \n    {\n        if(l[i] != last) \n        {\n         \
    \   last = l[i];\n            res[i] = last;\n        }\n    }\n    return res;\n\
    }", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n    long[]\
    \ u = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n   \
    \     u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int\
    \ start, int end) \n{\n    long[] u = new long[end - start];\n    for(int i =\
    \ start; i < end; i++) \n    {\n        u[i - start] = l[i];\n    }\n    Arrays.sort(u);\n\
    \    return u;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, int start, int end, int step) \n{\n    long[] u = new\
    \ long[end - start];\n    for(int i = start; i < end; i += step) \n    {\n   \
    \     u[i - start] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n/*\n\
    Return sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, int inc) \n{\n    long[] u = new long[end -\
    \ start];\n    for(int i = start; i < end; i += step) \n    {\n        u[i - start]\
    \ = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted unique\
    \ elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step, int inc, int compare) \n{\n    long[] u = new long[end -\
    \ start];\n    for(int i = start; i < end; i += step) \n    {\n        u[i - start]\
    \ = l[i];\n    }\n    Arrays.sort(u, compare);\n    return u;\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5L, ", "{\n    long[] result =\
    \ new long[l.length];\n    long[] seen = new long[l.length];\n    int i = 0;\n\
    \    int j = 0;\n    for(; i < l.length; ++i)\n    {\n        seen[i] = 0;\n \
    \       for(; j < l.length; ++j)\n        {\n            if(l[j] == l[i])\n  \
    \          {\n                seen[i]++;\n                break;\n           \
    \ }\n        }\n        if(seen[i] == 0)\n        {\n            result[i] = l[i];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,arrays,algorithm\
    \ |>\n<code>\npublic static int[] Unique(int[] arr)\n{\n    int[] result = new\
    \ int[arr.Length];\n    HashSet<int> set = new HashSet<int>();\n    for (int i\
    \ = 0; i < arr.Length; i++)\n    {\n        if (set.Add(arr[i]))\n        {\n\
    \            result[i] = arr[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static int[] Unique(int[]\
    \ arr)\n{\n    int[] result = new int[arr.Length];\n    HashSet<int> set = new\
    \ HashSet<int>();\n    for (int i = 0; i < arr.Length; i++)\n    {\n        if\
    \ (set.Add(arr[i]))\n        {\n            result[i] = arr[i];\n        }\n \
    \   }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays,algorithm |>\n<| a\
    \ dscore=1 |>\n<code>\npublic static int[] Unique(int[] arr)\n{\n    int[] result\
    \ = new int[arr.Length];\n    HashSet<int> set = new HashSet<int>();\n    for\
    \ (int i = 0; i < arr.Length; i++)\n    {\n        if (set.Add(arr[i]))\n    \
    \    {\n            result[i] = arr[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,arrays,algorithm |>\n<| a tags=c#,arrays,algorithm |>\n\
    <code>\npublic static int[] Unique(int[] arr)\n{\n    int[] result = new int[arr.Length];\n\
    \    HashSet<int> set = new HashSet<int>();\n    for (int i = 0; i < arr.Length;\
    \ i++)\n    {\n        if (set.Add(arr[i]))\n        {\n            result[i]\
    \ = arr[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,arrays,algorithm |>\n<code>\npublic static int[] Unique(int[]\
    \ arr)\n{\n    int[] result = new int[arr.Length];\n    HashSet<int> set = new\
    \ HashSet<int>();\n    for (int i = 0; i < arr.Length; i++)\n    {\n        if\
    \ (set.Add(arr[i]))\n", "{\n    long[] result = new long[l.length];\n    Arrays.sort(l);\n\
    \    for(int i = 0; i < l.length; i++)\n        result[i] = l[i];\n    return\
    \ result;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, int start, int end) \n{\n    long[] result = new long[end\
    \ - start];\n    Arrays.sort(l, start, end);\n    for(int i = start; i < end;\
    \ i++)\n        result[i - start] = l[i];\n    return result;\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int\
    \ start, int end, int step) \n{\n    long[] result = new long[end - start];\n\
    \    Arrays.sort(l, start, end, step);\n    for(int i = start; i < end; i += step)\n\
    \        result[i - start] = l[i];\n    return result;\n}\n/*\nReturn sorted unique\
    \ elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step, long stepSize) \n{\n    long[] result = new long[end - start];\n\
    \    Arrays.sort(l, start, end, step, stepSize);\n    for(int i = start; i < end;\
    \ i += step)\n        result[i - start] = l[i];\n    return result;\n}\n/*\nReturn\
    \ sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long stepSize, long stepSize2) \n{\n    long[]\
    \ result = new long[end - start];\n    Arrays.sort(l, start, end, step, stepSize,\
    \ stepSize2);\n    for(int i = start; i < end; i += step)\n        result[i -\
    \ start] = l[i];\n    return result;\n}\n/*\nReturn sorted unique elements in\
    \ an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, ",
  "{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n\
    \    {\n        long x = l[i];\n        for(int j = i; j < l.length; j++)\n  \
    \      {\n            if(l[j] == x)\n            {\n                u[j] = x;\n\
    \                break;\n            }\n        }\n    }\n    return u;\n}\n</code>\n\
    <|/ a tags=arrays,c#,algorithm |>\n<| c |>\nThis is not the fastest solution.\
    \ Sorting takes O(n log n) time. Your solution takes O(n^2) time. Your solution\
    \ also doesn't take into account that there might be duplicate elements in the\
    \ array.\n<|/ c |>\n<| c |>\n: Yes, I agree with you. But the OP didn't ask for\
    \ fastest solution. He asked for unique elements. And I believe that sorting is\
    \ O(n log n) time complexity. He also didn't ask for fastest solution. He asked\
    \ for unique elements. And I believe that sorting is O(n log n) time complexity.\
    \ He also didn't ask for fastest solution. He asked for unique elements. And I\
    \ believe that sorting is O(n log n) time complexity. He also didn't ask for fastest\
    \ solution. He asked for unique elements. And I believe that sorting is O(n log\
    \ n) time complexity. He also didn't ask for fastest solution. He asked for unique\
    \ elements. And I believe that sorting is O(n log n) time complexity. He also\
    \ didn't ask for fastest solution. He asked for unique elements. And I believe\
    \ that sorting is O(n log n) time complexity. He also didn't ask for fastest solution.\
    \ He asked for unique elements. And I believe that sorting is O(n log n) time\
    \ complexity. He also didn't ask for fastest solution. He asked for unique elements.\
    \ And I believe that sorting is O(n log n) time complexity. He also didn't ask\
    \ for fastest solution. He asked for unique elements. And I believe that sorting\
    \ is O(n log n) time complexity. He also didn't ask for fastest solution. He asked\
    \ for unique elements. And I believe that sorting is O(n log n) time complexity.\
    \ He also didn't ask for fastest solution. H", "{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        long current = l[i];\n\
    \        for(int j = i + 1; j < l.length; j++)\n        {\n            if(l[j]\
    \ == current)\n            {\n                current = l[j];\n            }\n\
    \        }\n        result[i] = current;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays,algorithm |>\n<| a |>\n<code>\npublic static int[] unique(int[]\
    \ arr)\n{\n    int[] result = new int[arr.Length];\n    Array.Sort(arr);\n   \
    \ int j = 0;\n    for (int i = 0; i < arr.Length; i++)\n    {\n        if (arr[i]\
    \ == arr[j])\n        {\n            j++;\n        }\n        else\n        {\n\
    \            result[j] = arr[i];\n            j++;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,arrays,algorithm dscore=2 |>\n<| c |>\nThis\
    \ doesn't work if you have duplicate numbers in the array.\n<|/ c |>\n<| c |>\n\
    This doesn't work if you have duplicate numbers in the array.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if you have duplicate numbers in the array.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if you have duplicate numbers in the array.\n<|/ c\
    \ |>\n<| a tags=c#,arrays,algorithm |>\n<code>\npublic static int[] unique(int[]\
    \ arr)\n{\n    Array.Sort(arr);\n    List<int> list = new List<int>();\n    for(int\
    \ i = 0; i < arr.Length; i++)\n    {\n        if(list.Contains(arr[i]))\n    \
    \        continue;\n        list.Add(arr[i]);\n    }\n    return list.ToArray();\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static int[] unique(int[]\
    \ arr)\n{\n    Array.Sort(arr);\n    List<int> list = new List<int>();\n    for(int\
    \ i = 0; i < arr.Length; i++)\n    {\n        if(list.Contains(arr[i]))\n    \
    \        continue;\n        list.Add(arr[i]);\n    }\n    return list.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,arrays,algorithm |>\n<| a dscore=1 |>\n<code>\npublic\
    \ static int[] unique(int[] arr)\n{\n    Array.Sort(arr);\n    List<int> list\
    \ = new List<int>();\n    for(int i = 0; i < arr.Length; i++)\n    {\n       \
    \ if(list.Contains(arr[i]))\n            continue;\n        list.Add(arr[i]);\n\
    \    }\n    return list.ToArray();\n}\n</code>\n<|/ a tags=", "{\n    long[] result\
    \ = new long[l.length];\n    Arrays.sort(l);\n    for(int i = 0; i < l.length;\
    \ i++)\n        result[i] = l[i];\n    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,c#\
    \ |>\n<| c |>\nThis doesn't work if you have a duplicate number in the array.\
    \ For example, if you have `[1,2,2,3]` the result will be `[1,2,3]` instead of\
    \ `[1,2,2,3]`.\n<|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\n: I tested it myself before posting, and\
    \ it works. Try it yourself.\n<|/ c |>\n<| c |>\n: I tested it myself before posting,\
    \ and it works. Try it yourself.\n<|/ c |>\n<| c |>\n: I tested it myself before\
    \ posting, and it works. Try it yourself.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    var unique = array.Distinct().OrderBy(x => x).ToArray();\n</code>\n<|/ a tags=arrays,sorting,c#\
    \ |>\n<| c |>\nThis doesn't work if you have a duplicate number in the array.\
    \ For example, if you have `[1,2,2,3]` the result will be `[1,2,3]` instead of\
    \ `[1,2,2,3]`.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself.\n<|/ c |>\n\
    <| c |>\n: I tested it myself before posting, and it works. Try it yourself.\n\
    <|/ c |>\n<| c |>\n: I tested it myself before posting, and it works. Try it yourself.\n\
    <|/ c |>\n<| c |>\n: I tested it myself before posting, and it works. Try it yourself.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\nvar unique = array.Distinct().OrderBy(x =>\
    \ x).ToArray();\n</code>\n<|/ a tags=arrays,sorting,c# |>\n<| c |>\nThis doesn't\
    \ work if you have a duplicate number in the array. For example, if you have `[1,2,2,3]`\
    \ the result will be `[1,2,3]` instead of `[1,2,2,3]`.\n<|/ c |>\n<| c |>\n: I\
    \ tested it myself before posting, and it works. Try it yourself.\n<|/ ", "{\n\
    \    long[] result = new long[l.length];\n    long[] seen = new long[l.length];\n\
    \    long last = 0;\n    long cur = 0;\n    int i = 0;\n    \n    foreach(long\
    \ x, l) \n    {\n        if (last == x) \n        {\n            seen[i] = cur;\n\
    \            i++;\n        }\n        else\n        {\n            last = x;\n\
    \            cur = x;\n            seen[i] = cur;\n            i++;\n        }\n\
    \    }\n    \n    foreach(long x, seen) \n    {\n        result[i - 1] = x;\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ code doesn't work. Try it with `unique([1L, 2L, 3L, 2L, 3L, 3L, 9L, 0L, 123L])`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the code from http://stackoverflow.com/questions/1800788/how-to-find-unique-elements-in-a-list-in-java\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `unique([1L, 2L, 3L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])`.\n<|/ c |>\n<| c |>\nI tested it and it works. I used the code\
    \ from http://stackoverflow.com/questions/1800788/how-to-find-unique-elements-in-a-list-in-java\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `unique([1L, 2L, 3L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])`.\n<|/ c |>\n<| a tags=arrays,c#,algorithm |>\nI believe this\
    \ should work:\n<code>\npublic int[] unique(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    int[] seen = new int[array.Length];\n    int index\
    \ = 0;\n    foreach (int i in array)\n    {\n        if (seen[i - 1])\n      \
    \  {\n            result[index++] = i;\n        }\n        else\n        {\n \
    \           seen[i - 1] = i;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis code doesn't work. Try it with `unique([1L, 2L,\
    \ 3L, 2L, 3L, 3L, 9L, 0L, 123L])`.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I used the code from http://stackoverflow.com/questions/1800788/how-to-find-",
  "{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n\
    \    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like your answer, but I think it would be better to explain\
    \ why this works.\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThe explanation was very helpful. Thank you!\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\npublic static <T> void sort(T[] array, Comparator<?\
    \ super T> comparator) {\n    Arrays.sort(array, comparator);\n}\n</code>\n<|/\
    \ a tags=java,sorting,arrays |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis is not the fastest solution. Sorting takes O(n\
    \ log n) time. Your solution takes O(n) time.\n<|/ c |>\n<| c |>\n: Yes, I know.\
    \ But it is the fastest solution, since it uses no extra memory and no extra CPU\
    \ cycles. And it is the most readable solution, since it uses no extra lines of\
    \ code. Of course, if you want a fast solution, there are other solutions available.\n\
    <|/ c |>\n<| c |>\nI agree with you. But the OP asked for \"fastest\" solution.\
    \ Your solution is also the fastest solution. Just because you wrote it in a different\
    \ way does not mean it is faster.\n<|/ c |>\n<| c |>\n: I agree with you, but\
    \ I disagree with your statement that \"it uses no extra memory and no extra CPU\
    \ cycles\". Yes, it uses extra memory, but it is also a CPU cycle. Yes, it uses\
    \ extra CPU cycles, but it is also a CPU cycle. Yes, it uses extra CPU cycles,\
    \ but it is also a CPU cycle. Yes, it uses extra CPU cycles, but it is also a\
    \ CPU cycle. Yes, it uses extra CPU cycles, but it is also a CPU cycle. Yes, it\
    \ uses extra CPU cycles, but it is also a CPU cycle. Yes, it uses extra CPU cycles,\
    \ but it is also a CPU cycle. Yes, it uses extra CPU cycles, but it is also a\
    \ CPU cycle. Yes, it uses extra CPU cycles, but it is also a CPU cycle. Yes, it\
    \ uses extra CPU cycles, but it is also a CPU cycle. Yes, it uses extra CPU cycles,\
    \ but it is also a CPU cycle. Yes, it uses extra CPU cycles, but it is also a\
    \ CPU cycle. Yes, it uses extra CPU cycles, but it is also a CPU cycle. Yes, it\
    \ uses extra CPU cycles, but it is also a CPU cycle. Yes, it uses extra CPU cycles,\
    \ but it is also a CPU cycle. Yes, it uses extra CPU cycles, but it is also a\
    \ CPU cycle. Yes, it uses extra CPU cycles, but it is also a CPU cycle. Yes, it\
    \ uses extra CPU cycles, but it is also a CPU cycle. Yes, it uses extra CPU cycles,\
    \ but it is also a CPU cycle. Yes, it uses extra CPU ", "{\n    long[] result\
    \ = new long[l.length];\n    long[] seen = new long[l.length];\n    for(int i\
    \ = 0; i < l.length; i++)\n    {\n        if(!seen[l[i]])\n        {\n       \
    \     result[i] = l[i];\n            seen[l[i]] = true;\n        }\n    }\n  \
    \  return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| c |>\nThis doesn't\
    \ answer the question. OP asked for C#, not Java.\n<|/ c |>\n<| c |>\nThe question\
    \ was tagged C# and I provided a C# solution. Why do you think it doesn't?\n<|/\
    \ c |>\n<| c |>\nBecause the question was tagged C#. Your answer was in Java.\n\
    <|/ c |>\n<| c |>\nThe question was tagged C# and I provided a C# solution. Why\
    \ do you think it doesn't?\n<|/ c |>\n<| c |>\nBecause the question was tagged\
    \ C#. Your answer was in Java.\n<|/ c |>\n<| a tags=c#,arrays |>\n<code>\nvar\
    \ unique = array.Distinct().ToArray();\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This doesn't answer the question. OP asked for C#, not Java.\n<|/ c |>\n<| c |>\n\
    This answer is correct. OP asked for C#, not Java.\n<|/ c |>\n<| c |>\nThis answer\
    \ is not correct. OP asked for C#, not Java.\n<|/ c |>\n<| c |>\nThis answer is\
    \ not correct. OP asked for C#, not Java.\n<|/ c |>\n<| c |>\nThis answer is not\
    \ correct. OP asked for C#, not Java.\n<|/ c |>\n<| a tags=c#,arrays |>\n<code>\n\
    var unique = array.Distinct().ToArray();\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This doesn't answer the question. OP asked for C#, not Java.\n<|/ c |>\n<| c |>\n\
    This answer is correct. OP asked for C#, not Java.\n<|/ c |>\n<| c |>\nThis answer\
    \ is not correct. OP asked for C#, not Java.\n<|/ c |>\n<| c |>\nThis answer is\
    \ not correct. OP asked for C#, not Java", "{\n    long[] u = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n        u[i] = l[i];\n    Arrays.sort(u);\n\
    \    return u;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, long x) \n{\n    long[] u = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n        if(l[i] == x)\n            u[i] = l[i];\n\
    \        else\n            u[i] = x;\n    Arrays.sort(u);\n    return u;\n}\n\
    /*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, int x) \n{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n        if(l[i] == x)\n            u[i] = l[i];\n        else\n      \
    \      u[i] = x;\n    Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted unique\
    \ elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, long x, int\
    \ y) \n{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n        if(l[i] == x && l[i] == y)\n            u[i] = l[i];\n       \
    \ else\n            u[i] = x;\n    Arrays.sort(u);\n    return u;\n}\n/*\nReturn\
    \ sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, int x, int y) \n{\n    long[] u = new long[l.length];\n    for(int i = 0;\
    \ i < l.length; ++i)\n        if(l[i] == x && l[i] == y)\n            u[i] = l[i];\n\
    \        else\n            u[i] = x;\n    Arrays.sort(u);\n    return u;\n}\n\
    /*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, ",
  "{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n\
    \    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n/*\n\
    Return sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, int start, int end) \n{\n    long[] u = new long[end - start];\n    for(int\
    \ i = start; i < end; i++) \n    {\n        u[i - start] = l[i];\n    }\n    Arrays.sort(u);\n\
    \    return u;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, int start, int end, int step) \n{\n    long[] u = new\
    \ long[end - start];\n    for(int i = start; i < end; i += step) \n    {\n   \
    \     u[i - start] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n/*\n\
    Return sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long cmp) \n{\n    long[] u = new long[end\
    \ - start];\n    for(int i = start; i < end; i += step) \n    {\n        u[i -\
    \ start] = l[i];\n    }\n    Arrays.sort(u, cmp);\n    return u;\n}\n/*\nReturn\
    \ sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long cmp, long ord) \n{\n    long[] u = new\
    \ long[end - start];\n    for(int i = start; i < end; i += step) \n    {\n   \
    \     u[i - start] = l[i];\n    }\n    Arrays.sort(u, cmp, ord);\n    return u;\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique", "{\n    long[]\
    \ res = new long[l.length];\n    long last = 0;\n    for(int i = 0; i < l.length;\
    \ ++i)\n    {\n        if(l[i] != last)\n        {\n            last = l[i];\n\
    \            res[i] = last;\n        }\n    }\n    return res;\n}", "{\n\tlong[]\
    \ u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i]\
    \ = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n    long[] result = new long[l.length];\n    for(int i =\
    \ 0; i < l.length; i++)\n    {\n        long current = l[i];\n        int j =\
    \ 0;\n        for(; j < i; j++)\n        {\n            if(l[j] == current)\n\
    \                break;\n        }\n        result[i] = l[j];\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ if there are duplicates in the original array.\n<|/ c |>\n<| c |>\nIt does,\
    \ but only if the array is sorted.\n<|/ c |>\n<| c |>\nYes, but that wasn't the\
    \ question. Your solution doesn't work if there are duplicates in the original\
    \ array.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting.\n<|/ c\
    \ |>\n<| c |>\nIt does, but only if the array is sorted. Your solution doesn't\
    \ work if there are duplicates in the original array.\n<|/ c |>\n<| a |>\n<code>\n\
    public static void main(String[] args) {\n    int[] arr = {1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3};\n    System.out.println(Arrays.toString(unique(arr)));\n}", "{\n    long[]\
    \ result = new long[l.length];\n    long[] seen = new long[l.length];\n    int\
    \ i = 0;\n    for (; i < l.length; ++i)\n    {\n        long x = l[i];\n     \
    \   if (seen[x] == 0)\n        {\n            result[i] = x;\n            seen[x]\
    \ = 1;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting\
    \ |>\n<| c |>\nThis is not an answer to the question. He asked for a java solution,\
    \ not a python one.\n<|/ c |>\n<| c |>\nThe question was tagged Java, so I thought\
    \ this would be a good solution. Of course the OP can always convert it to Java\
    \ if he wants to.\n<|/ c |>\n<| c |>\nThis is not an answer to the question. He\
    \ asked for a java solution, not a python one.\n<|/ c |>\n<| a |>\n<code>\nimport\
    \ java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long[] result = new long[l.length];\n    long[] seen = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++) \n    {\n        if (!seen[i])\
    \ \n        {\n            result[j] = l[i];\n            seen[i] = 1;\n     \
    \       j++;\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start,\
    \ int end) \n{\n    long[] result = new long[end - start];\n    long[] seen =\
    \ new long[l.length];\n    int j = 0;\n    for (int i = start; i < end; i++) \n\
    \    {\n        if (!seen[i]) \n        {\n            result[j] = l[i];\n   \
    \         seen[i] = 1;\n            j++;\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step) \n{\n    long[] result = new\
    \ long[end - start];\n    long[] seen = new long[l.length];\n    int j = 0;\n\
    \    for (int i = start; i < end; i += step) \n    {\n        if (!seen[i]) \n\
    \        {\n            result[j] = l[i];\n            seen[i] = 1;\n        \
    \    j++;\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique elements\
    \ in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
    \ 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start, int end,\
    \ int step, long stepSize) \n{\n    long[] result = new long[end - start];\n \
    \   long[] seen = new long[l.length];\n    int j = 0;\n    for (int i = start;\
    \ i < end; i += step) \n    {\n        if (!seen[i]) \n        {\n           \
    \ result[j] = l[i];\n            seen[i] = 1;\n            j++;\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique elements in an array\n\
    \    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L,\
    \ 9L, 123L]\n    \n", "{\n    long[] res = new long[l.length];\n    long prev\
    \ = 0;\n    long cur = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n   \
    \     cur = l[i];\n        if(cur != prev) \n        {\n            prev = cur;\n\
    \            res[res.length - 1] = cur;\n        }\n    }\n    return res;\n}\n\
    </code>\n<|/ a tags=arrays,c#,sorting |>\n<| a dscore=1 |>\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;", "{\n\
    \    long[] result = new long[l.length];\n    long last = 0;\n    long cur = 0;\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] != last)\n    \
    \    {\n            result[cur++] = l[i];\n            last = l[i];\n        }\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,c#\
    \ |>\n<| c |>\nThis doesn't work if there are duplicate elements in the array.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. The OP didn't\
    \ specify that he wanted it to be unique.\n<|/ c |>\n<| c |>\nI tested it and\
    \ it doesn't work. Try it with this array: [1, 2, 2, 3, 4, 4, 5]. It returns [1,2,3,4,5]\
    \ instead of [1,2,3,4,5,5]\n<|/ c |>\n<| c |>\nIt doesn't work because you didn't\
    \ test it correctly. Try it with this array: [1, 2, 2, 3, 4, 4, 5]. It returns\
    \ [1,2,3,4,5] instead of [1,2,3,4,5,5]\n<|/ c |>\n<| c |>\nI tested it and it\
    \ works. I added the test case to the answer. Try it yourself.\n<|/ c |>\n<| a\
    \ tags=arrays,sorting,c# |>\n<code>\npublic static int[] SortUnique(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int j = 0;\n    int k = 0;\n\
    \    int temp = 0;\n    for (int i = 0; i < array.Length; i++)\n    {\n      \
    \  if (array[i] != array[j])\n        {\n            result[k] = array[i];\n \
    \           j++;\n        }\n        else\n        {\n            temp = array[i];\n\
    \            while (array[j] != temp)\n            {\n                j++;\n \
    \           }\n            result[k] = temp;\n            k++;\n        }\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if there are duplicate elements in the array.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if there are duplicate elements in the array.\n<|/ c |>\n<| a tags=arrays,sorting,c#\
    \ |>\n<code>\npublic static int[] SortUnique(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    int j = 0;\n    int k = 0;\n    int temp = 0;\n\
    \    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] != array[j])\n\
    \        {\n            result[k] = array[i];\n            j++;\n        }\n \
    \       else\n        {\n            temp = array[i];\n            while (array[j]\
    \ != temp)\n            {\n                ", "{\n    long[] u = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        u[i] = l[i];\n    }\n \
    \   Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted unique elements in an\
    \ array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start, int end) \n\
    {\n    long[] u = new long[end - start];\n    for(int i = start; i < end; ++i)\n\
    \    {\n        u[i - start] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step) \n{\n    long[] u = new long[end\
    \ - start];\n    for(int i = start; i < end; i += step)\n    {\n        u[i -\
    \ start] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int\
    \ start, int end, int step, long stepSize) \n{\n    long[] u = new long[end -\
    \ start];\n    for(int i = start; i < end; i += step)\n    {\n        u[i - start]\
    \ = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted unique\
    \ elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step, long stepSize, long stepSize2) \n{\n    long[] u = new long[end\
    \ - start];\n    for(int i = start; i < end; i += step)\n    {\n        u[i -\
    \ start] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5L, 3L, ", "{\n    long[] u = new\
    \ long[l.length];\n    for(int i = 0; i < l.length; ++i)\n        u[i] = l[i];\n\
    \    Arrays.sort(u);\n    return u;\n}", "{\n    long[] res = new long[l.length];\n\
    \    long last = l[0];\n    int i = 0;\n    for (; i < l.length; ++i)\n    {\n\
    \        if (l[i] != last)\n        {\n            res[i] = last;\n          \
    \  last = l[i];\n        }\n    }\n    res[i] = last;\n    return res;\n}\n/*\n\
    Return sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, int start, int end) \n{\n    long[] res = new long[end - start];\n    long\
    \ last = l[start];\n    int i = 0;\n    for (; i < end - start; ++i)\n    {\n\
    \        if (l[i + start] != last)\n        {\n            res[i] = last;\n  \
    \          last = l[i + start];\n        }\n    }\n    res[i] = last;\n    return\
    \ res;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, int start, int end, int step) \n{\n    long[] res = new\
    \ long[end - start];\n    long last = l[start];\n    int i = 0;\n    for (; i\
    \ < end - start; i += step)\n    {\n        if (l[i + start] != last)\n      \
    \  {\n            res[i] = last;\n            last = l[i + start];\n        }\n\
    \    }\n    res[i] = last;\n    return res;\n}\n/*\nReturn sorted unique elements\
    \ in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
    \ 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start, int end,\
    \ int step, long step2) \n{\n    long[] res = new long[end - start];\n    long\
    \ last = l[start];\n    int i = 0;\n    for (; i < end - start; i += step, last\
    \ += step2)\n    {\n        if (l[i + start] != last)\n        {\n           \
    \ res[i] = last;\n            last = l[i + start];\n        }\n    }\n    res[i]\
    \ = last;\n    return res;\n}\n/*\nReturn sorted unique elements in an array\n\
    \    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n", "{\n    long[] result\
    \ = new long[l.length];\n    long last = 0;\n    long cur = 0;\n    for(int i\
    \ = 0; i < l.length; i++) \n    {\n        cur = l[i];\n        if(cur != last)\
    \ \n        {\n            result[i - 1] = cur;\n            last = cur;\n   \
    \     }\n    }\n    return result;\n}\n/*\nReturn sorted unique elements in an\
    \ array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, long compare) \n{\n   \
    \ long[] result = new long[l.length];\n    long last = 0;\n    long cur = 0;\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        cur = l[i];\n        if(cur\
    \ != last && compare(cur, last)) \n        {\n            result[i - 1] = cur;\n\
    \            last = cur;\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L], std.math.Ordering.LT)\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n\
    */\nlong[] unique(long[] l, Ordering compare) \n{\n    long[] result = new long[l.length];\n\
    \    long last = 0;\n    long cur = 0;\n    for(int i = 0; i < l.length; i++)\
    \ \n    {\n        cur = l[i];\n        if(cur != last && compare(cur, last))\
    \ \n        {\n            result[i - 1] = cur;\n            last = cur;\n   \
    \     }\n    }\n    return result;\n}\n/*\nReturn sorted unique elements in an\
    \ array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L], std.math.Ordering.LT)\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, Ordering compare,\
    \ long compare2) \n{\n    long[] result = new long[l.length];\n    long last =\
    \ 0;\n    long cur = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n     \
    \   cur = l[i];\n        if(cur != last && compare(cur, last) && compare2(cur,\
    \ last)) \n        {\n            result[i - 1] = cur;\n            last = cur;\n\
    \        }\n    }\n    return result;\n}\n/*\nReturn sorted unique elements in\
    \ an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, ", "{\n    long[] u = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n        u[l.indexOf(l[i])] = l[i];\n\
    \    return u;\n}", "{\n    long[] result = new long[l.length];\n    long[] seen\
    \ = new long[l.length];\n    int j = 0;\n    for(int i = 0; i < l.length; i++)\n\
    \    {\n        if(!seen[i])\n        {\n            result[j] = l[i];\n     \
    \       seen[i] = 1;\n            j++;\n        }\n    }\n    return result;\n\
    }", "{\n\tlong[] result = new long[l.length];\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tresult[i] = l[i];\n\tArrays.sort(result);\n\treturn result;\n}", "{\n\
    \    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n\
    \    {\n        u[l.indexOf(l[i])] = l[i];\n    }\n    return u;\n}\n</code>\n\
    <|/ a tags=java,arrays |>\n<| c |>\nThis solution does not work if you have duplicate\
    \ elements in the array. For example, if you have `[1,2,2,3]` the result will\
    \ be `[1,2,3]` instead of `[1,2,2,3]`.\n<|/ c |>\n<| c |>\nThis solution does\
    \ not work if you have duplicate elements in the array. For example, if you have\
    \ `[1,2,2,3]` the result will be `[1,2,3]` instead of `[1,2,2,3]`.\n<|/ c |>\n\
    <| c |>\nThis solution does not work if you have duplicate elements in the array.\
    \ For example, if you have `[1,2,2,3]` the result will be `[1,2,3]` instead of\
    \ `[1,2,2,3]`.\n<|/ c |>\n<| c |>\nThis solution does not work if you have duplicate\
    \ elements in the array. For example, if you have `[1,2,2,3]` the result will\
    \ be `[1,2,3]` instead of `[1,2,2,3]`.\n<|/ c |>\n<| a tags=java,arrays |>\n<code>\n\
    public static void main(String[] args) {\n    int[] arr = new int[]{1,2,2,3};\n\
    \    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis solution does not work if you have duplicate\
    \ elements in the array. For example, if you have `[1,2,2,3]` the result will\
    \ be `[1,2,3]` instead of `[1,2,2,3]`.\n<|/ c |>\n<| c |>\nThis solution does\
    \ not work if you have duplicate elements in the array. For example, if you have\
    \ `[1,2,2,3]` the result will be `[1,2,3]` instead of `[1,2,2,3]`.\n<|/ c |>\n\
    <| c |>\nThis solution does not work if you have duplicate elements in the array.\
    \ For example, if you have `[1,2,2,3]` the result will be `[1,2,3]` instead of\
    \ `[1,2,2,3]`.\n<|/ c |>\n<| c |>\nThis solution does not work if you have duplicate\
    \ elements in the array. For example, if you have `[1,2,2,3]` the result will\
    \ be `[1,2,3]` instead of `[1,2,2,3]`.\n<|/ c |>\n<| c |>\nThis solution does\
    \ not work if you have duplicate elements in the array. For example, if you have\
    \ `[1,2,2,3]` the result will be `[1,2,3]` instead of `[", "{\n    long[] u =\
    \ new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        u[i]\
    \ = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}", "{\n    long[] u = new\
    \ long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        u[i]\
    \ = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted unique\
    \ elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start,\
    \ int end) \n{\n    long[] u = new long[end - start];\n    for(int i = start;\
    \ i < end; i++)\n    {\n        u[i - start] = l[i];\n    }\n    Arrays.sort(u);\n\
    \    return u;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, int start, int end, int step) \n{\n    long[] u = new\
    \ long[end - start];\n    for(int i = start; i < end; i += step)\n    {\n    \
    \    u[i - start] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n/*\n\
    Return sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long cmp) \n{\n    long[] u = new long[end\
    \ - start];\n    for(int i = start; i < end; i += step)\n    {\n        u[i -\
    \ start] = l[i];\n    }\n    Arrays.sort(u, cmp);\n    return u;\n}\n/*\nReturn\
    \ sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long cmp, long ord) \n{\n    long[] u = new\
    \ long[end - start];\n    for(int i = start; i < end; i += step)\n    {\n    \
    \    u[i - start] = l[i];\n    }\n    Arrays.sort(u, cmp, ord);\n    return u;\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, ", "{\n\
    \    long[] result = new long[l.length];\n    long[] seen = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(!seen[i])\n        {\n\
    \            seen[i] = 1;\n            result[i] = l[i];\n        }\n    }\n \
    \   return result;\n}", "{\n    long[] result = new long[l.length];\n    long\
    \ lastValue = l[0];\n    int i = 0;\n    for(; i < l.length; ++i)\n    {\n   \
    \     if(l[i] != lastValue)\n        {\n            result[result.length-1] =\
    \ lastValue;\n            lastValue = l[i];\n        }\n    }\n    result[result.length-1]\
    \ = lastValue;\n    return result;\n}", "{\n    long[] u = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        u[i] = l[i];\n    }\n \
    \   Arrays.sort(u);\n    return u;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,sorting,c#\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;", "{\n    long[] u = new long[l.length];\n    for(int i = 0;\
    \ i < l.length; ++i)\n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n\
    \    return u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor (int i = 0; i\
    \ < l.length; ++i)\n\t{\n\t\tlong x = l[i];\n\t\tfor (int j = i; j < l.length;\
    \ ++j)\n\t\t{\n\t\t\tif (l[j] == x)\n\t\t\t{\n\t\t\t\tu[j] = x;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn u;\n}", "{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        long current = l[i];\n\
    \        for(int j = i + 1; j < l.length; j++)\n        {\n            if(l[j]\
    \ == current)\n            {\n                long tmp = l[i];\n             \
    \   l[i] = l[j];\n                l[j] = tmp;\n            }\n        }\n    \
    \    result[i] = current;\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c#\
    \ |>\n<| c |>\nThis is not the most efficient solution. Sorting takes O(n log\
    \ n) time. Your solution takes O(n^2) time. Sorting takes O(n^2) time because\
    \ of the nested loop. Your solution takes O(n^2) time because of the nested loop.\
    \ Sorting takes O(n^2) time because of the nested loop. Sorting takes O(n^2) time\
    \ because of the nested loop. Sorting takes O(n^2) time because of the nested\
    \ loop. Sorting takes O(n^2) time because of the nested loop. Sorting takes O(n^2)\
    \ time because of the nested loop. Sorting takes O(n^2) time because of the nested\
    \ loop. Sorting takes O(n^2) time because of the nested loop. Sorting takes O(n^2)\
    \ time because of the nested loop. Sorting takes O(n^2) time because of the nested\
    \ loop. Sorting takes O(n^2) time because of the nested loop. Sorting takes O(n^2)\
    \ time because of the nested loop. Sorting takes O(n^2) time because of the nested\
    \ loop. Sorting takes O(n^2) time because of the nested loop. Sorting takes O(n^2)\
    \ time because of the nested loop. Sorting takes O(n^2) time because of the nested\
    \ loop. Sorting takes O(n^2) time because of the nested loop. Sorting takes O(n^2)\
    \ time because of the nested loop. Sorting takes O(n^2) time because of the nested\
    \ loop. Sorting takes O(n^2) time because of the nested loop. Sorting takes O(n^2)\
    \ time because of the nested loop. Sorting takes O(n^2) time because of the nested\
    \ loop. Sorting takes O(n^2) time because of the nested loop. Sorting takes O(n^2)\
    \ time because of the nested loop. Sorting takes O(n^2) time because of the nested\
    \ loop. Sorting takes O(n^2) time because of the nested loop. Sorting takes O(n^2)\
    \ time because of the nested loop. Sorting takes O(n^2) time because of the nested\
    \ loop. Sorting takes O(n^", "{\n    long[] u = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        u[l.indexOf(l[i])] = l[i];\n    }\n\
    \    return u;\n}", "{\n    long[] result = new long[l.length];\n    long last\
    \ = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] != last)\
    \ \n        {\n            result[i - 1] = l[i];\n            last = l[i];\n \
    \       }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,sorting,algorithm\
    \ |>\n<| c |>\nThis doesn't work for me. Try it on `[1,2,2,3,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
  "{\n    long[] res = new long[l.length];\n    long last = 0;\n    long cur = 0;\n\
    \    for (int i = 0; i < l.length; i++)\n    {\n        cur = l[i];\n        if\
    \ (cur != last)\n        {\n            res[i - 1] = cur;\n            last =\
    \ cur;\n        }\n    }\n    return res;\n}\n</code>\n<|/ a tags=arrays,sorting,java\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n\tlong[] result = new long[l.length];\n\tfor (int i = 0; i < l.length; i++)\n\
    \t\tresult[i] = l[i];\n\tArrays.sort(result);\n\treturn result;\n}", "{\n    long[]\
    \ result = new long[l.length];\n    long last = 0;\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        if(l[i] != last)\n        {\n            result[result.length\
    \ - 1] = l[i];\n            last = l[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis is not the correct answer. `unique` should\
    \ return `[5, 3, 9, 123]` and not `[0, 2, 3, 5, 9, 123]`.\n<|/ c |>\n<| c |>\n\
    : I see what you mean. I'll fix my answer.\n<|/ c |>\n<| c |>\n: I fixed my answer.\n\
    <|/ c |>\n<| c |>\n: I fixed my answer.\n<|/ c |>\n<| c |>\n: I fixed my answer.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\nimport std.array;\nimport std.stdio;\nimport\
    \ std.conv;", "{\n    long[] result = new long[l.length];\n    long[] sorted =\
    \ sort(l);\n    for(int i = 0; i < sorted.length; i++)\n    {\n        for(int\
    \ j = i + 1; j < sorted.length; j++)\n        {\n            if(sorted[i] == sorted[j])\n\
    \            {\n                long temp = sorted[i];\n                sorted[i]\
    \ = sorted[j];\n                sorted[j] = temp;\n            }\n        }\n\
    \    }\n    for(int i = 0; i < sorted.length; i++)\n    {\n        result[sorted.length\
    \ - 1 - i] = sorted[i];\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, long key) \n\
    {\n    long[] result = new long[l.length];\n    long[] sorted = sort(l);\n   \
    \ for(int i = 0; i < sorted.length; i++)\n    {\n        for(int j = i + 1; j\
    \ < sorted.length; j++)\n        {\n            if(sorted[i] == sorted[j])\n \
    \           {\n                long temp = sorted[i];\n                sorted[i]\
    \ = sorted[j];\n                sorted[j] = temp;\n            }\n        }\n\
    \    }\n    for(int i = 0; i < sorted.length; i++)\n    {\n        if(sorted[i]\
    \ == key)\n        {\n            result[sorted.length - 1 - i] = sorted[i];\n\
    \        }\n    }\n    return result;\n}\n/*\nReturn sorted unique elements in\
    \ an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int key) \n{\n    long[]\
    \ result = new long[l.length];\n    long[] sorted = sort(l);\n    for(int i =\
    \ 0; i < sorted.length; i++)\n    {\n        for(int j = i + 1; j < sorted.length;\
    \ j++)\n        {\n            if(sorted[i] == sorted[j])\n            {\n   \
    \             long temp = sorted[i];\n                sorted[i] = sorted[j];\n\
    \                sorted[j] = temp;\n            }\n        }\n    }\n    for(int\
    \ i = 0; i < sorted.length; i++)\n    {\n        if(sorted[i] == key)\n      \
    \  {\n            result[sorted.length - 1 - i] = sorted[i];\n        }\n    }\n\
    \    return result;\n}\n/*\nReturn sorted unique elements in an array\n    >>>\
    \ unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n\
    \    \n*/\nlong[] unique(long[] l, long key, int ", "{\n    long[] result = new\
    \ long[l.length];\n    long prev = 0;\n    long curr = l[0];\n    for(int i =\
    \ 1; i < l.length; i++)\n    {\n        if(curr != l[i])\n        {\n        \
    \    result[i - 1] = curr;\n            curr = l[i];\n        }\n    }\n    result[i\
    \ - 1] = curr;\n    return result;\n}", "{\n\tlong[] u = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < l.length;\
    \ j++) \n\t\t{\n\t\t\tif (l[i] == l[j]) \n\t\t\t{\n\t\t\t\tu[i] = l[i];\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tu[l.indexOf(l[i])] = l[i];\n\treturn\
    \ u;\n}", "{\n\tlong[] result = new long[l.length];\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tfor (int j = i + 1; j < l.length; ++j)\n\t\t\tif (l[i] == l[j])\n\t\
    \t\t\tfor (int k = j; k < l.length; ++k)\n\t\t\t\t\tl[k] = l[k + 1];\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tresult[i] = l[i];\n\treturn result;\n}", "{\n\
    \    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n\
    \        u[i] = l[i];\n    Arrays.sort(u);\n    return u;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=arrays,sorting,c# |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;", "{\n\tlong[] result = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tfor (int j = 0; j < i; j++)\n\t\t\t\
    if (l[i] == l[j])\n\t\t\t\tbreak;\n\t\telse\n\t\t\tresult[i] = l[i];\n\treturn\
    \ result;\n}", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i <\
    \ l.length; ++i)\n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n  \
    \  return u;\n}", "{\n    long[] result = new long[l.length];\n    long last =\
    \ 0;\n    long lastCount = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n\
    \        if(l[i] != last)\n        {\n            last = l[i];\n            lastCount\
    \ = 1;\n        }\n        else\n        {\n            lastCount++;\n       \
    \ }\n        if(lastCount > 1)\n        {\n            result[i] = last;\n   \
    \         lastCount = 1;\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, long key) \n{\n    long[] result = new long[l.length];\n    long last = 0;\n\
    \    long lastCount = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n     \
    \   if(l[i] != last && l[i] == key)\n        {\n            last = l[i];\n   \
    \         lastCount = 1;\n        }\n        else\n        {\n            lastCount++;\n\
    \        }\n        if(lastCount > 1)\n        {\n            result[i] = last;\n\
    \            lastCount = 1;\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, long key, long key2) \n{\n    long[] result = new long[l.length];\n    long\
    \ last = 0;\n    long lastCount = 0;\n    for(int i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] != last && l[i] == key && l[i] == key2)\n        {\n \
    \           last = l[i];\n            lastCount = 1;\n        }\n        else\n\
    \        {\n            lastCount++;\n        }\n        if(lastCount > 1)\n \
    \       {\n            result[i] = last;\n            lastCount = 1;\n       \
    \ }\n    }\n    return result;\n}\n/*\nReturn sorted unique elements in an array\n\
    \    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L,\
    \ 9L, 123L]\n    \n*/\nlong[] unique(long[] l, long key, long key2, long key3)\
    \ \n{\n    long[] result = new long[l.length];\n    long last = 0;\n    long lastCount\
    \ = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] != last\
    \ && l[i] == key && l[i] == key2 && ", "{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        long current = l[i];\n\
    \        for(int j = i + 1; j < l.length; j++)\n        {\n            if(l[j]\
    \ == current)\n            {\n                current = l[j];\n            }\n\
    \        }\n        result[i] = current;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c# |>\n<| a tags=arrays,c# |>\n<code>\nvar unique = array.GroupBy(x\
    \ => x).Select(x => x.First()).ToArray();\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    This doesn't work if you have duplicate values in the array. For example, if you\
    \ have an array with [1,2,2,3,4] then it will return [1,2,3].\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if you have duplicate values in the array. For example,\
    \ if you have an array with [1,2,2,3,4] then it will return [1,2,3].\n<|/ c |>\n\
    <| c |>\nThis doesn't work if you have duplicate values in the array. For example,\
    \ if you have an array with [1,2,2,3,4] then it will return [1,2,3].\n<|/ c |>\n\
    <| a tags=arrays,c# |>\n<code>\nvar unique = array.Distinct().ToArray();\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nThis doesn't work if you have duplicate values in\
    \ the array. For example, if you have an array with [1,2,2,3,4] then it will return\
    \ [1,2,3].\n<|/ c |>\n<| c |>\nThis doesn't work if you have duplicate values\
    \ in the array. For example, if you have an array with [1,2,2,3,4] then it will\
    \ return [1,2,3].\n<|/ c |>\n<| a tags=arrays,c# |>\n<code>\nvar unique = array.Distinct().ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work if you have duplicate values\
    \ in the array. For example, if you have an array with [1,2,2,3,4] then it will\
    \ return [1,2,3].\n<|/ c |>\n<| a tags=arrays,c# |>\n<code>\nvar unique = array.Distinct().ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work if you have duplicate values\
    \ in the array. For example, if you have an array with [1,2,2,3,4] then it will\
    \ return [1,2,3].\n<|/ c |>\n<| a tags=arrays,c# |>\n<code>\nvar unique = array.Distinct",
  "{\n\tlong[] result = new long[l.length];\n\tfor (int i = 0; i < l.length; ++i)\n\
    \t{\n\t\tfor (int j = i + 1; j < l.length; ++j)\n\t\t{\n\t\t\tif (l[i] == l[j])\n\
    \t\t\t{\n\t\t\t\tfor (int k = j; k < l.length; ++k)\n\t\t\t\t{\n\t\t\t\t\tl[k]\
    \ = l[k + 1];\n\t\t\t\t}\n\t\t\t\t--l.length;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t}\n\tfor (int i = 0; i < l.length; ++i)\n\t{\n\t\tresult[i] = l[i];\n\t}\n\t\
    return result;\n}", "{\n    long[] u = new long[l.length];\n    for(int i = 0;\
    \ i < l.length; i++) \n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n\
    \    return u;\n}\n</code>\n<|/ a tags=c#,arrays,sorting |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to sort a list without using LINQ.\n<|/ c |>\n\
    <| c |>\nThis answer doesn't even compile.\n<|/ c |>\n<| c |>\nThis answer doesn't\
    \ even compile.\n<|/ c |>\n<| c |>\nThis answer doesn't even compile.\n<|/ c |>\n\
    <| c |>\nThis answer doesn't even compile.\n<|/ c |>\n<| a dscore=5 tags=c#,arrays,sorting\
    \ |>\n<code>", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i <\
    \ l.length; ++i)\n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n  \
    \  return u;\n}", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i\
    \ < l.length; i++) \n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n\
    \    return u;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't answer the\
    \ question. OP asked for unique elements, not unique keys. Your solution returns\
    \ unique keys. Also, the OP asked for unique elements, not unique keys. Your solution\
    \ returns unique keys. Also, the OP asked for unique elements, not unique keys.\
    \ Your solution returns unique keys. Also, the OP asked for unique elements, not\
    \ unique keys. Your solution returns unique keys. Also, the OP asked for unique\
    \ elements, not unique keys. Your solution returns unique keys. Also, the OP asked\
    \ for unique elements, not unique keys. Your solution returns unique keys. Also,\
    \ the OP asked for unique elements, not unique keys. Your solution returns unique\
    \ keys. Also, the OP asked for unique elements, not unique keys. Your solution\
    \ returns unique keys. Also, the OP asked for unique elements, not unique keys.\
    \ Your solution returns unique keys. Also, the OP asked for unique elements, not\
    \ unique keys. Your solution returns unique keys. Also, the OP asked for unique\
    \ elements, not unique keys. Your solution returns unique keys. Also, the OP asked\
    \ for unique elements, not unique keys. Your solution returns unique keys. Also,\
    \ the OP asked for unique elements, not unique keys. Your solution returns unique\
    \ keys. Also, the OP asked for unique elements, not unique keys. Your solution\
    \ returns unique keys. Also, the OP asked for unique elements, not unique keys.\
    \ Your solution returns unique keys. Also, the OP asked for unique elements, not\
    \ unique keys. Your solution returns unique keys. Also, the OP asked for unique\
    \ elements, not unique keys. Your solution returns unique keys. Also, the OP asked\
    \ for unique elements, not unique keys. Your solution returns unique keys. Also,\
    \ the OP asked for unique elements, not unique keys. Your solution returns unique\
    \ keys. Also, the OP asked for unique elements, not unique keys. Your solution\
    \ returns unique keys. Also, the OP asked for unique elements, not unique keys.\
    \ Your solution returns unique keys. Also, the OP asked for unique elements, not\
    \ unique keys. Your solution returns unique keys. Also, the OP asked for unique\
    \ elements, not unique keys. Your solution returns unique keys. Also, the OP asked\
    \ for unique elements, not unique keys. Your ", "{\n    long[] u = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        u[i] = l[i];\n    }\n \
    \   Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted unique elements in an\
    \ array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start, int end) \n\
    {\n    long[] u = new long[end - start];\n    for(int i = start; i < end; i++)\n\
    \    {\n        u[i - start] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step) \n{\n    long[] u = new long[end\
    \ - start];\n    for(int i = start; i < end; i += step)\n    {\n        u[i -\
    \ start] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int\
    \ start, int end, int step, long cmp) \n{\n    long[] u = new long[end - start];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        u[i - start] = l[i];\n\
    \    }\n    Arrays.sort(u, cmp);\n    return u;\n}\n/*\nReturn sorted unique elements\
    \ in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
    \ 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start, int end,\
    \ int step, long cmp, long ord) \n{\n    long[] u = new long[end - start];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        u[i - start] = l[i];\n\
    \    }\n    Arrays.sort(u, cmp, ord);\n    return u;\n}\n/*\nReturn sorted unique\
    \ elements in an array\n    >>> unique([5L, 3L, ", "{\n    long[] result = new\
    \ long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        long\
    \ current = l[i];\n        for(int j = i + 1; j < l.length; j++)\n        {\n\
    \            if(l[j] == current)\n            {\n                current = l[j];\n\
    \            }\n        }\n        result[i] = current;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it on `[1,2,2,3]`.\n\
    <|/ c |>\n<| c |>\nIt works. I tested it before posting. What is the problem?\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it on `[1,2,2,3]`.\n<|/ c |>\n<| c |>\n\
    It works. I tested it before posting. What is the problem?\n<|/ c |>\n<| c |>\n\
    It works. I tested it before posting. What is the problem?\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport\
    \ java.util.List;", "{\n\tlong[] res = new long[l.length];\n\tfor (int i = 0;\
    \ i < l.length; i++)\n\t\tres[i] = l[i];\n\tArrays.sort(res);\n\treturn res;\n\
    }", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}", "{\n\
    \    long[] result = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n\
    \    {\n        long current = l[i];\n        int j = 0;\n        for(; j < i;\
    \ j++)\n        {\n            if(l[j] == current)\n                break;\n \
    \       }\n        result[i] = l[j];\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i <\
    \ l.length; i++) \n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n \
    \   return u;\n}\n</code>\n<|/ a tags=c#,arrays,sorting |>\n<| c |>\nI believe\
    \ this solution will fail if there are duplicate numbers in the input array. For\
    \ example, unique([5, 3, 5]) will return [5, 3, 5] instead of [5, 3, 5]\n<|/ c\
    \ |>\n<| c |>\nYes, you are right. I will fix the answer.\n<|/ c |>\n<| c |>\n\
    This solution will fail if there are duplicate numbers in the input array. For\
    \ example, unique([5, 3, 5]) will return [5, 3, 5] instead of [5, 3, 5]\n<|/ c\
    \ |>\n<| c |>\nYes, you are right. I will fix the answer.\n<|/ c |>\n<| c |>\n\
    This solution will fail if there are duplicate numbers in the input array. For\
    \ example, unique([5, 3, 5]) will return [5, 3, 5] instead of [5, 3, 5]\n<|/ c\
    \ |>\n<| a dscore=5 |>\n<code>\npublic static int[] unique(int[] array)\n{\n \
    \   HashSet<int> set = new HashSet<int>();\n    int[] result = new int[array.Length];\n\
    \    for (int i = 0; i < array.Length; i++)\n    {\n        if (set.Add(array[i]))\n\
    \            result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,arrays,sorting |>\n<| c |>\nThis solution will fail if there are duplicate\
    \ numbers in the input array. For example, unique([5, 3, 5]) will return [5, 3,\
    \ 5] instead of [5, 3, 5]\n<|/ c |>\n<| c |>\nThis solution will fail if there\
    \ are duplicate numbers in the input array. For example, unique([5, 3, 5]) will\
    \ return [5, 3, 5] instead of [5, 3, 5]\n<|/ c |>\n<| c |>\nThis solution will\
    \ fail if there are duplicate numbers in the input array. For example, unique([5,\
    \ 3, 5]) will return [5, 3, 5] instead of [5, 3, 5]\n<|/ c |>\n<| c |>\nThis solution\
    \ will fail if there are duplicate numbers in the input array. For example, unique([5,\
    \ 3, 5]) will return [5, 3, 5] instead of [5, 3, 5]\n<|/ c |>\n<| a tags=c#,arrays,sorting\
    \ |>\n<code>\npublic static int[] unique(int[] array)\n{\n    HashSet<int> set\
    \ = new HashSet<int>();\n    int[] result = new int[array.Length", "{\n    long[]\
    \ result = new long[l.length];\n    Arrays.sort(l);\n    int i = 0;\n    for(long\
    \ j : l)\n    {\n        if(result[i] != j)\n        {\n            result[i++]\
    \ = j;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,java\
    \ |>\n<| c |>\nThis doesn't work if there are duplicate numbers in the array.\
    \ For example, unique([5, 3, 5]) returns [5, 3, 5].\n<|/ c |>\n<| c |>\nYes, I\
    \ missed that case. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis is not\
    \ the correct solution. `unique([5, 3, 5])` returns `[5, 3, 5]` because `3` is\
    \ repeated twice. `unique([5, 3, 5])` should return `[5, 5]` because `5` is repeated\
    \ once.\n<|/ c |>\n<| c |>\nThis is not the correct solution. `unique([5, 3, 5])`\
    \ returns `[5, 3, 5]` because `3` is repeated twice. `unique([5, 3, 5])` should\
    \ return `[5, 5]` because `5` is repeated once.\n<|/ c |>\n<| c |>\nThis is not\
    \ the correct solution. `unique([5, 3, 5])` returns `[5, 3, 5]` because `3` is\
    \ repeated twice. `unique([5, 3, 5])` should return `[5, 5]` because `5` is repeated\
    \ once.\n<|/ c |>\n<| a tags=arrays,sorting,algorithm,java |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n        result[i] = l[i];\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,c++,sorting |>\n<| a tags=arrays,c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\nusing namespace std;",
  "{\n    long[] result = new long[l.length];\n    long[] seen = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        seen[i] = 0;\n        result[i]\
    \ = l[i];\n    }\n    for(int i = 0; i < l.length; i++)\n    {\n        for(int\
    \ j = i + 1; j < l.length; j++)\n        {\n            if(l[i] == l[j])\n   \
    \         {\n                seen[j]++;\n                break;\n            }\n\
    \        }\n    }\n    for(int i = 0; i < l.length; i++)\n    {\n        if(seen[i]\
    \ == 0)\n        {\n            result[i] = l[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, int start, int end) \n{\n    long[] result = new long[end\
    \ - start];\n    long[] seen = new long[l.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        seen[i] = 0;\n        result[i - start] = l[i];\n\
    \    }\n    for(int i = start; i < end; i++)\n    {\n        for(int j = i + 1;\
    \ j < end; j++)\n        {\n            if(l[i] == l[j])\n            {\n    \
    \            seen[j]++;\n                break;\n            }\n        }\n  \
    \  }\n    for(int i = start; i < end; i++)\n    {\n        if(seen[i] == 0)\n\
    \        {\n            result[i - start] = l[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, int start, int end, int step) \n{\n    long[] result =\
    \ new long[end - start];\n    long[] seen = new long[l.length];\n    for(int i\
    \ = start; i < end; i += step)\n    {\n        seen[i] = 0;\n        result[i\
    \ - start] = l[i];\n    }\n    for(int i = start; i < end; i += step)\n    {\n\
    \        for(int j = i + 1; j < end; j += step)\n        {\n            if(l[i]\
    \ == l[j])\n            {\n                seen[j]++;\n                break;\n\
    \            }\n        }\n    }\n    for(int i = start; i < end; i += step)\n\
    \    {\n        if(seen[i] == 0)\n        {\n            result[i - start] = l[i];\n\
    \        }\n    }\n    return result;\n}\n/*\nReturn sorted unique elements in\
    \ an array\n    >>> ", "{\n    long[] u = new long[l.length];\n    for(int i =\
    \ 0; i < l.length; ++i)\n        u[i] = l[i];\n    Arrays.sort(u);\n    return\
    \ u;\n}", "{\n    long[] result = new long[l.length];\n    for(int i = 0; i <\
    \ l.length; i++) \n    {\n        long x = l[i];\n        for(int j = i; j < l.length;\
    \ j++) \n        {\n            if(l[j] == x) \n            {\n              \
    \  result[j] = x;\n                break;\n            }\n        }\n    }\n \
    \   return result;\n}", "{\n    long[] res = new long[l.length];\n    long last\
    \ = l[0];\n    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i]\
    \ != last)\n        {\n            res[i] = l[i];\n            last = l[i];\n\
    \        }\n    }\n    return res;\n}\n/*\nReturn sorted unique elements in an\
    \ array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start, int end) \n\
    {\n    long[] res = new long[end - start];\n    long last = l[start];\n    int\
    \ i = start;\n    for (; i < end; ++i)\n    {\n        if (l[i] != last)\n   \
    \     {\n            res[i - start] = l[i];\n            last = l[i];\n      \
    \  }\n    }\n    return res;\n}\n/*\nReturn sorted unique elements in an array\n\
    \    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L,\
    \ 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start, int end, int step) \n\
    {\n    long[] res = new long[end - start];\n    long last = l[start];\n    int\
    \ i = start;\n    for (; i < end; i += step)\n    {\n        if (l[i] != last)\n\
    \        {\n            res[i - start] = l[i];\n            last = l[i];\n   \
    \     }\n    }\n    return res;\n}\n/*\nReturn sorted unique elements in an array\n\
    \    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L,\
    \ 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start, int end, int step, long\
    \ stepSize) \n{\n    long[] res = new long[end - start];\n    long last = l[start];\n\
    \    int i = start;\n    for (; i < end; i += step, last += stepSize)\n    {\n\
    \        if (l[i] != last)\n        {\n            res[i - start] = l[i];\n  \
    \          last = l[i];\n        }\n    }\n    return res;\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique", "{\n    long[]\
    \ result = new long[l.length];\n    \n    for(int i = 0; i < l.length; i++) \n\
    \    {\n        long current = l[i];\n        \n        for(int j = i; j < l.length;\
    \ j++) \n        {\n            if(l[j] == current) \n            {\n        \
    \        current = l[j];\n            }\n        }\n        \n        result[i]\
    \ = current;\n    }\n    \n    return result;\n}", "{\n    long[] result = new\
    \ long[l.length];\n    long last = 0;\n    long cur = 0;\n    for(int i = 0; i\
    \ < l.length; i++) \n    {\n        if(l[i] != last) \n        {\n           \
    \ result[cur++] = l[i];\n            last = l[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, int start, int end) \n{\n    long[] result = new long[end\
    \ - start];\n    long last = 0;\n    long cur = 0;\n    for(int i = start; i <\
    \ end; i++) \n    {\n        if(l[i] != last) \n        {\n            result[cur++]\
    \ = l[i];\n            last = l[i];\n        }\n    }\n    return result;\n}\n\
    /*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step) \n{\n    long[] result = new long[end - start];\n\
    \    long last = 0;\n    long cur = 0;\n    for(int i = start; i < end; i += step)\
    \ \n    {\n        if(l[i] != last) \n        {\n            result[cur++] = l[i];\n\
    \            last = l[i];\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long stepSize) \n{\n    long[] result = new\
    \ long[end - start];\n    long last = 0;\n    long cur = 0;\n    for(int i = start;\
    \ i < end; i += step, last += stepSize) \n    {\n        if(l[i] != last) \n \
    \       {\n            result[cur++] = l[i];\n            last = l[i];\n     \
    \   }\n    }\n    return result;\n}\n/*\nReturn sorted unique elements in an array\n\
    \    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L,\
    \ 9L, 123L]\n    \n*/\nlong[] unique(long[] l, ", "{\n\tlong[] u = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i\
    \ < l.length; ++i)\n        u[i] = l[i];\n    Arrays.sort(u);\n    return u;\n\
    }", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n    long[]\
    \ u = new long[l.length];\n    long uidx = 0;\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        if(l[i] != l[uidx])\n        {\n            u[uidx] = l[i];\n\
    \            uidx++;\n        }\n    }\n    return u;\n}", "{\n    long[] result\
    \ = new long[l.length];\n    long last = l[0];\n    for(int i = 1; i < l.length;\
    \ i++)\n    {\n        if(l[i] != last)\n        {\n            result[i - 1]\
    \ = last;\n            last = l[i];\n        }\n    }\n    result[result.length\
    \ - 1] = last;\n    return result;\n}", "{\n\tlong[] u = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n    long[] result = new long[l.length];\n    long[] seen\
    \ = new long[l.length];\n    long[] sorted = new long[l.length];\n    \n    for\
    \ (int i = 0; i < l.length; i++)\n    {\n        seen[i] = 0;\n        sorted[i]\
    \ = l[i];\n    }\n    \n    for (int i = 0; i < l.length; i++)\n    {\n      \
    \  for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[j] ==\
    \ sorted[i])\n            {\n                seen[j]++;\n                sorted[j]\
    \ = l[j];\n            }\n        }\n    }\n    \n    for (int i = 0; i < l.length;\
    \ i++)\n    {\n        if (seen[i] > 1)\n        {\n            result[i - seen[0]]\
    \ = sorted[i];\n        }\n    }\n    \n    return result;\n}", "{\n    long[]\
    \ u = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n        u[i]\
    \ = l[i];\n    Arrays.sort(u);\n    return u;\n}\n</code>\n<|/ a tags=sorting,arrays,java\
    \ |>\n<| c |>\nThis is not the most efficient solution. Sorting will take O(nlogn)\
    \ time. Using a HashSet will take O(n) time.\n<|/ c |>\n<| c |>\nSorting will\
    \ take O(nlogn) time if implemented correctly (which it is). HashSet will take\
    \ O(n) time if implemented correctly.\n<|/ c |>\n<| c |>\nSorting will take O(nlogn)\
    \ time if implemented correctly (which it is). HashSet will take O(n) time if\
    \ implemented correctly.\n<|/ c |>\n<| c |>\nSorting will take O(nlogn) time if\
    \ implemented correctly (which it is). HashSet will take O(n) time if implemented\
    \ correctly.\n<|/ c |>\n<| c |>\nSorting will take O(nlogn) time if implemented\
    \ correctly (which it is). HashSet will take O(n) time if implemented correctly.\n\
    <|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] a = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};\n\
    \    Arrays.sort(a);\n    System.out.println(a);\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis is not the most efficient solution. Sorting will take O(nlogn) time.\
    \ Using a HashSet will take O(n) time.\n<|/ c |>\n<| c |>\nSorting will take O(nlogn)\
    \ time if implemented correctly (which ", "{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        long current = l[i];\n\
    \        int j = 0;\n        for(; j < i; j++)\n        {\n            if(l[j]\
    \ == current)\n                break;\n        }\n        result[i] = l[j];\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=arrays,sorting,c# |>\n<code>\npublic static int[] Sort(int[] array)\n\
    {\n    Array.Sort(array);\n    return array;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a |>\n<code>\npublic static int[] Sort(int[] array)\n{\n    Array.Sort(array);\n\
    \    return array;\n}\n</code>\n<|/ a dscore=2 tags=arrays,sorting,c# |>\n<| a\
    \ tags=arrays,sorting,c# |>\n<code>", "{\n    long[] u = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n        u[l.indexOf(l[i])] = l[i];\n \
    \   return u;\n}\n</code>\n<|/ a tags=arrays,sorting,c# |>\n<| a dscore=2 |>\n\
    <code>\nvar unique = myArray.Distinct().ToArray();\n</code>\n<|/ a tags=arrays,sorting,c#\
    \ |>\n<| a tags=arrays,sorting,c# |>\n<code>\nvar unique = myArray.Distinct().ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=arrays,sorting,c# |>\n<code>\nvar unique\
    \ = myArray.Distinct().ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,sorting,c#\
    \ |>\n<code>\nvar unique = myArray.Distinct().ToArray();\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=arrays,sorting,c# |>\n<code>\nvar unique = myArray.Distinct().ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nvar unique = myArray.Distinct().ToArray();\n\
    </code>\n<|/ a tags=arrays,sorting,c# |>\n<| a dscore=1 |>\n<code>\nvar unique\
    \ = myArray.Distinct().ToArray();\n</code>\n<|/ a tags=arrays,sorting,c# |>\n\
    <| a dscore=1 |>\n<code>\nvar unique = myArray.Distinct().ToArray();\n</code>\n\
    <|/ a tags=arrays,sorting,c# |>\n<| a |>\n<code>\nvar unique = myArray.Distinct().ToArray();\n\
    </code>\n<|/ a tags=arrays,sorting,c# dscore=1 |>\n<| a tags=arrays,sorting,c#\
    \ |>\n<code>\nvar unique = myArray.Distinct().ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nvar unique = myArray.Distinct().ToArray();\n</code>\n\
    <|/ a tags=arrays,sorting,c# |>\n<| a dscore=1 |>\n<code>\nvar unique = myArray.Distinct().ToArray();\n\
    </code>\n<|/ a tags=arrays,sorting,c# |>\n<| a tags=", "{\n    long[] result =\
    \ new long[l.length];\n    long last = 0;\n    for(int i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] != last)\n        {\n            last = l[i];\n      \
    \      result[i] = last;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[l.length];\n    long[] seen = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        long x = l[i];\n      \
    \  if(seen[x] == 0)\n        {\n            seen[x] = 1;\n            result[i]\
    \ = x;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[l.length];\n    long last = 0;\n    for(int i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] != last)\n        {\n            result[result.length-1]\
    \ = l[i];\n            last = l[i];\n        }\n    }\n    return result;\n}",
  "{\n\tlong[] u = new long[l.length];\n\tArrays.sort(l);\n\tfor(int i = 0; i < l.length;\
    \ i++)\n\t\tu[i] = l[i];\n\treturn u;\n}\n/*\nReturn sorted unique elements in\
    \ an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start, int end) \n\
    {\n\tlong[] u = new long[end - start];\n\tArrays.sort(l, start, end);\n\tfor(int\
    \ i = start; i < end; i++)\n\t\tu[i - start] = l[i];\n\treturn u;\n}\n/*\nReturn\
    \ sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step) \n{\n\tlong[] u = new long[end - start];\n\t\
    Arrays.sort(l, start, end, step);\n\tfor(int i = start; i < end; i += step)\n\t\
    \tu[i - start] = l[i];\n\treturn u;\n}\n/*\nReturn sorted unique elements in an\
    \ array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start, int end, int\
    \ step, long cmp) \n{\n\tlong[] u = new long[end - start];\n\tArrays.sort(l, start,\
    \ end, step, cmp);\n\tfor(int i = start; i < end; i += step)\n\t\tu[i - start]\
    \ = l[i];\n\treturn u;\n}\n/*\nReturn sorted unique elements in an array\n   \
    \ >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L,\
    \ 123L]\n    \n*/\nlong[] unique(long[] l, int start, int end, int step, long\
    \ cmp, int step2) \n{\n\tlong[] u = new long[end - start];\n\tArrays.sort(l, start,\
    \ end, step, cmp, step2);\n\tfor(int i = start; i < end; i += step2)\n\t\tu[i\
    \ - start] = l[i];\n\treturn u;\n}\n/*\nReturn sorted unique elements in an array\n\
    \    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9", "{\n\tlong[] u = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\t\
    return u;\n}", "{\n    long[] result = new long[l.length];\n    for(int i = 0;\
    \ i < l.length; ++i)\n        result[l.indexOf(l[i])] = l[i];\n    return result;\n\
    }", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; i++)\
    \ \n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n\
    </code>\n<|/ a tags=c++,sorting,arrays |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <algorithm>\n#include <vector>", "{\n    long[] u = new long[l.length];\n\
    \    long uidx = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n        while(uidx<u.length\
    \ && l[i]==u[uidx])\n            uidx++;\n        if(uidx<u.length)\n        \
    \    u[uidx++] = l[i];\n    }\n    return u;\n}", "{\n    long[] res = new long[l.length];\n\
    \    Arrays.sort(l);\n    for(int i = 0; i < l.length; i++) \n    {\n        res[i]\
    \ = l[i];\n    }\n    return res;\n}", "{\n    long[] result = new long[l.length];\n\
    \    \n    for(int i = 0; i < l.length; i++)\n    {\n        long current = l[i];\n\
    \        for(int j = i; j < l.length; j++)\n        {\n            if(l[j] ==\
    \ current)\n            {\n                result[j] = current;\n            \
    \    break;\n            }\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    long[] result = new long[l.length];\n    \n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        long current = l[i];\n        for(int j = i; j < l.length;\
    \ j++)\n        {\n            if(l[j] == current)\n            {\n          \
    \      result[j] = current;\n                break;\n            }\n        }\n\
    \    }\n    \n    return result;\n}", "{\n\tlong[] u = new long[l.length];\n\t\
    for (int i = 0; i < l.length; i++)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn\
    \ u;\n}", "{\n    long[] result = new long[l.length];\n    Arrays.sort(l);\n \
    \   int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (j ==\
    \ i)\n            result[i] = l[i];\n        else\n        {\n            if (l[j]\
    \ == l[i])\n            {\n                result[i] = l[j];\n               \
    \ j++;\n            }\n            else\n            {\n                result[i]\
    \ = l[j];\n                j++;\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,arrays,sorting |>\n<| c |>\nThis solution has O(n^2)\
    \ complexity, which is very inefficient.\n<|/ c |>\n<| c |>\nYes, but it's O(n)\
    \ complexity and it's easy to understand.\n<|/ c |>\n<| c |>\nYes, but it's O(n)\
    \ complexity and it's easy to understand.\n<|/ c |>\n<| c |>\nYes, but it's O(n)\
    \ complexity and it's easy to understand.\n<|/ c |>\n<| c |>\nYes, but it's O(n)\
    \ complexity and it's easy to understand.\n<|/ c |>\n<| a tags=c#,arrays,sorting\
    \ |>\n<code>\npublic static int[] SortUnique(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    Array.Sort(array);\n    int j = 0;\n    for (int\
    \ i = 0; i < array.Length; i++)\n    {\n        if (j == i)\n            result[i]\
    \ = array[i];\n        else\n        {\n            if (array[j] == array[i])\n\
    \            {\n                result[i] = array[j];\n                j++;\n\
    \            }\n            else\n            {\n                result[i] = array[j];\n\
    \                j++;\n            }\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis solution has O(n^2) complexity, which\
    \ is very inefficient.\n<|/ c |>\n<| c |>\nYes, but it's O(n) complexity and it's\
    \ easy to understand.\n<|/ c |>\n<| c |>\nYes, but it's O(n) complexity and it's\
    \ easy to understand.\n<|/ c |>\n<| c |>\nYes, but it's O(n) complexity and it's\
    \ easy to understand.\n<|/ c |>\n<| c |>\nYes, but it's O(n) complexity and it's\
    \ easy to understand.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "{\n\tlong[] result\
    \ = new long[l.length];\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tfor (int\
    \ j = i + 1; j < l.length; j++)\n\t\t{\n\t\t\tif (l[i] == l[j])\n\t\t\t{\n\t\t\
    \t\tfor (int k = j; k < l.length; k++)\n\t\t\t\t{\n\t\t\t\t\tl[k] = l[k + 1];\n\
    \t\t\t\t}\n\t\t\t\tl.length--;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\tresult[i] =\
    \ l[i];\n\t}\n\treturn result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    \n    for(int i = 0; i < l.length; i++)\n    {\n        long current = l[i];\n\
    \        for(int j = i + 1; j < l.length; j++)\n        {\n            if(l[j]\
    \ == current)\n            {\n                long temp = l[i];\n            \
    \    l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n  \
    \      result[i] = current;\n    }\n    \n    return result;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't work if there are duplicate elements in\
    \ the array.\n<|/ c |>\n<| c |>\nIt does work if there are duplicate elements\
    \ in the array. Try it yourself.\n<|/ c |>\n<| c |>\nYes, it does. Try it yourself.\
    \ It doesn't work if there are duplicate elements in the array.\n<|/ c |>\n<|\
    \ c |>\nIt does work if there are duplicate elements in the array. Try it yourself.\
    \ It doesn't work if there are duplicate elements in the array.\n<|/ c |>\n<|\
    \ c |>\nIt does work if there are duplicate elements in the array. Try it yourself.\
    \ It doesn't work if there are duplicate elements in the array.\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>\npublic static int[] unique(int[] a) {\n    Set<Integer>\
    \ set = new HashSet<Integer>();\n    int[] result = new int[a.length];\n    for\
    \ (int i = 0; i < a.length; i++) {\n        set.add(a[i]);\n    }\n    for (int\
    \ i = 0; i < a.length; i++) {\n        if (!set.contains(a[i])) {\n          \
    \  result[i] = a[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=java,arrays |>\n<| c |>\nThis doesn't work if there are duplicate elements\
    \ in the array.\n<|/ c |>\n<| c |>\nIt does work if there are duplicate elements\
    \ in the array. Try it yourself. It doesn't work if there are duplicate elements\
    \ in the array.\n<|/ c |>\n<| c |>\nIt does work if there are duplicate elements\
    \ in the array. Try it yourself. It doesn't work if there are duplicate elements\
    \ in the array.\n<|/ c |>\n<| c |>\nIt does work if there are duplicate elements\
    \ in the array. Try it yourself. It doesn't work if there are duplicate elements\
    \ in the array.\n<|/ c |>\n<| c |>\nIt does work if there are duplicate elements\
    \ in the array. Try it yourself. It doesn't work if there are duplicate elements\
    \ in the array.\n<|/ c |>\n<| a tags=java,arrays |>\n<code>\npublic static int[]\
    \ unique(int[] a) {\n    ", "{\n    long[] u = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n\
    \    return u;\n}\n</code>\n<|/ a tags=arrays,c# |>\n<| c |>\nThis doesn't work\
    \ if the array contains duplicate elements. For example: unique([5L, 3L, 5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L]) returns [0, 2, 3, 4, 5, 9, 123]\n<|/ c |>\n<| c |>\n\
    : Yes, I know. That's why I wrote \"sort unique elements\". My point was that\
    \ you can easily adapt this code to your needs.\n<|/ c |>\n<| c |>\n: I added\
    \ a solution that works with duplicate elements.\n<|/ c |>\n<| c |>\n: I added\
    \ a solution that works with duplicate elements.\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>", "{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n        result[i] = l[i];\n    Arrays.sort(result);\n    return result;\n\
    }", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \        u[l.indexOf(l[i])] = l[i];\n    return u;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis solution does not work if you have a duplicate value in a\
    \ list. For example, `unique([1L, 2L, 2L, 3L, 3L, 3L, 3L, 3L])` returns `[1L,\
    \ 2L, 3L, 3L, 3L]`\n<|/ c |>\n<| c |>\nThe question was about unique elements.\
    \ If you have a duplicate value in a list, then you have a different problem.\
    \ For example, `unique([1L, 2L, 2L, 3L, 3L, 3L, 3L, 3L])` returns `[1L, 2L, 3L,\
    \ 3L, 3L]`\n<|/ c |>\n<| c |>\nYes, I agree with you. My comment was meant to\
    \ point out that your solution does not work if you have a duplicate value in\
    \ a list. For example, `unique([1L, 2L, 2L, 3L, 3L, 3L, 3L, 3L])` returns `[1L,\
    \ 2L, 3L, 3L, 3L]`\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer\
    \ to include a solution that does work if you have duplicate values in a list.\n\
    <|/ c |>\n<| c |>\nThis solution doesn't work if you have a duplicate value in\
    \ a list. For example, `unique([1L, 2L, 2L, 3L, 3L, 3L, 3L, 3L])` returns `[1L,\
    \ 2L, 3L, 3L, 3L]`\n<|/ c |>\n<| a tags=arrays,c#,unique |>\n<code>\nvar uniqueArray\
    \ = array.Distinct().ToArray();\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis solution\
    \ does not work if you have a duplicate value in a list. For example, `unique([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 3L, 3L])` returns `[1L, 2L, 3L, 3L, 3L]`\n<|/ c |>\n<| c\
    \ |>\nThis solution doesn't work if you have a duplicate value in a list. For\
    \ example, `unique([1L, 2L, 2L, 3L, 3L, 3L, 3L, 3L])` returns `[1L, 2L, 3L, 3L,\
    \ 3L]`\n<|/ c |>\n<| a dscore=2 |>\n<code>\nvar unique", "{\n    long[] u = new\
    \ long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n        u[i]\
    \ = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}", "{\n    long[] u = new\
    \ long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        u[i]\
    \ = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n</code>\n<|/ a tags=arrays,sorting,c#\
    \ |>\n<| a tags=arrays,sorting,c# |>\n<code>\npublic static int[] SortArray(int[]\
    \ array)\n{\n    Array.Sort(array);\n    return array;\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nThis doesn't answer the question at all. OP asked for sorting an\
    \ array. Your answer doesn't do that.\n<|/ c |>\n<| a tags=arrays,sorting,c# |>\n\
    <code>", "{\n\tlong[] result = new long[l.length];\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tresult[i] = l[i];\n\tArrays.sort(result);\n\treturn result;\n}\n/*\n\
    Return sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, long[] r) \n{\n\tlong[] result = new long[l.length];\n\tfor (int i = 0; i\
    \ < l.length; i++)\n\t\tresult[i] = l[i];\n\tArrays.sort(result);\n\tfor (int\
    \ i = 0; i < r.length; i++)\n\t\tresult[i] = r[i];\n\tArrays.sort(result);\n\t\
    return result;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, long[] r, long[] s) \n{\n\tlong[] result = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tresult[i] = l[i];\n\tArrays.sort(result);\n\
    \tfor (int i = 0; i < r.length; i++)\n\t\tresult[i] = r[i];\n\tArrays.sort(result);\n\
    \tfor (int i = 0; i < s.length; i++)\n\t\tresult[i] = s[i];\n\tArrays.sort(result);\n\
    \treturn result;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, long[] r, long[] s, long[] t) \n{\n\tlong[] result = new\
    \ long[l.length];\n\tfor (int i = 0; i < l.length; i++)\n\t\tresult[i] = l[i];\n\
    \tArrays.sort(result);\n\tfor (int i = 0; i < r.length; i++)\n\t\tresult[i] =\
    \ r[i];\n\tArrays.sort(result);\n\tfor (int i = 0; i < s.length; i++)\n\t\tresult[i]\
    \ = s[i];\n\tArrays.sort(result);\n\tfor (int i = 0; i < t.length; i++)\n\t\t\
    result[i] = t[i];\n\tArrays.sort(result);\n\treturn result;\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, long[]\
    \ r, long[] s, long[] t, long[] u) ", "{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        long x = l[i];\n      \
    \  for(int j = i; j < l.length; j++)\n        {\n            if(l[j] == x)\n \
    \           {\n                res[j-1] = x;\n                break;\n       \
    \     }\n        }\n    }\n    return res;\n}\n</code>\n<|/ a tags=c#,algorithm,sorting\
    \ |>\n<| c |>\nThis doesn't work. Try it with `unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])`\n<|/ c |>\n<| c |>\nIt does work. Try it with `unique([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it\
    \ with `unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])`\n<|/ c |>\n<| c |>\nIt\
    \ does work. Try it with `unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])`\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it with `unique([5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L])`\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static IEnumerable<T>\
    \ Unique<T>(this IEnumerable<T> source)\n{\n    HashSet<T> set = new HashSet<T>();\n\
    \    foreach (T item in source)\n    {\n        set.Add(item);\n    }\n    return\
    \ set.ToArray();\n}\n</code>\n<|/ a tags=c#,algorithm,sorting |>\n<| c |>\nThis\
    \ doesn't work. Try it with `unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])`\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])`\n<|/ c |>\n<| c |>\nIt does work. Try it with `unique([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])`\n<|/ c |>\n<| c |>\nIt does work. Try it with\
    \ `unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])`", "{\n    long[] result = new\
    \ long[l.length];\n    long last = l[0];\n    int j = 0;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] != last)\n        {\n          \
    \  result[j++] = l[i];\n            last = l[i];\n        }\n    }\n    result[j++]\
    \ = last;\n    return result;\n}\n/*\nReturn sorted unique elements in an array\n\
    \    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L,\
    \ 9L, 123L]\n    \n*/\nlong[] unique(long[] l, long last) \n{\n    long[] result\
    \ = new long[l.length];\n    long last = l[0];\n    int j = 0;\n    for (int i\
    \ = 1; i < l.length; i++)\n    {\n        if (l[i] != last)\n        {\n     \
    \       result[j++] = l[i];\n            last = l[i];\n        }\n    }\n    result[j++]\
    \ = last;\n    return result;\n}\n/*\nReturn sorted unique elements in an array\n\
    \    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L,\
    \ 9L, 123L]\n    \n*/\nlong[] unique(long[] l, long last, long first) \n{\n  \
    \  long[] result = new long[l.length];\n    long last = l[0];\n    int j = 0;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] != last && l[i]\
    \ != first)\n        {\n            result[j++] = l[i];\n            last = l[i];\n\
    \        }\n    }\n    result[j++] = last;\n    return result;\n}\n/*\nReturn\
    \ sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, long last, long first, long rest) \n{\n    long[] result = new long[l.length];\n\
    \    long last = l[0];\n    int j = 0;\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] != last && l[i] != first && l[i] != rest)\n        {\n\
    \            result[j++] = l[i];\n            last = l[i];\n        }\n    }\n\
    \    result[j++] = last;\n    return result;\n}\n/*\nReturn sorted unique elements\
    \ in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
    \ 2L, 3", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,c#,sorting |>\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;", "{\n\
    \    long[] u = new long[l.length];\n    long uval;\n    for(int i = 0; i < l.length;\
    \ ++i)\n    {\n        uval = l[i];\n        for(int j = i; j < l.length; ++j)\n\
    \        {\n            if(l[j] == uval)\n            {\n                u[j]\
    \ = l[j];\n            }\n        }\n    }\n    return u;\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int\
    \ start, int end) \n{\n    long[] u = new long[end - start];\n    long uval;\n\
    \    for(int i = start; i < end; ++i)\n    {\n        uval = l[i];\n        for(int\
    \ j = i; j < end; ++j)\n        {\n            if(l[j] == uval)\n            {\n\
    \                u[j] = l[j];\n            }\n        }\n    }\n    return u;\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step) \n{\n    long[] u = new long[end\
    \ - start];\n    long uval;\n    for(int i = start; i < end; i += step)\n    {\n\
    \        uval = l[i];\n        for(int j = i; j < end; j += step)\n        {\n\
    \            if(l[j] == uval)\n            {\n                u[j] = l[j];\n \
    \           }\n        }\n    }\n    return u;\n}\n/*\nReturn sorted unique elements\
    \ in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
    \ 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start, int end,\
    \ int step, long stepSize) \n{\n    long[] u = new long[end - start];\n    long\
    \ uval;\n    for(int i = start; i < end; i += step)\n    {\n        uval = l[i];\n\
    \        for(int j = i; j < end; j += step)\n        {\n            if(l[j] ==\
    \ uval)\n            {\n                u[j] = l[j];\n            }\n        }\n\
    \    }\n    return u;\n}\n/*\nReturn sorted unique elements in an array\n    >>>\
    \ unique([5L, 3L, ", "{\n    long[] result = new long[l.length];\n    \n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        long current = l[i];\n        int\
    \ j = 0;\n        for(; j < i; j++)\n        {\n            if(l[j] == current)\n\
    \                break;\n        }\n        result[i] = l[j];\n    }\n    \n \
    \   Arrays.sort(result);\n    return result;\n}", "{\n    long[] result = new\
    \ long[l.length];\n    for(int i = 0; i < l.length; i++)\n        result[l.indexOf(l[i])]\
    \ = l[i];\n    return result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n        result[l.indexOf(l[i])] = l[i];\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,c#,sorting,unique |>\n<| a\
    \ dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing\
    \ System.Linq;\nusing System.Text;", "{\n\tlong[] u = new long[l.length];\n\t\
    for(int i = 0; i < l.length; i++)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn\
    \ u;\n}", "{\n    long[] result = new long[l.length];\n    long last = 0;\n  \
    \  for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] != last)\n      \
    \  {\n            last = l[i];\n            result[i] = last;\n        }\n   \
    \ }\n    return result;\n}", "{\n    long[] u = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        long x = l[i];\n        for(int j\
    \ = i + 1; j < l.length; j++)\n        {\n            if(l[j] == x)\n        \
    \    {\n                u[i] = x;\n                u[j] = x;\n               \
    \ break;\n            }\n        }\n    }\n    return u;\n}", "{\n\tlong[] result\
    \ = new long[l.length];\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tfor\
    \ (int j = i + 1; j < l.length; j++)\n\t\t{\n\t\t\tif (l[i] == l[j])\n\t\t\t{\n\
    \t\t\t\tlong temp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t\
    }\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t\tresult[i] = l[i];\n\
    \t\n\tArrays.sort(result);\n\t\n\treturn result;\n}", "{\n    long[] result =\
    \ new long[l.length];\n    Arrays.sort(l);\n    for(int i = 0; i < l.length; i++)\n\
    \        result[l.length - 1 - i] = l[i];\n    return result;\n}", "{\n    long[]\
    \ u = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n    \
    \    u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}", "{\n    long[]\
    \ u = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n   \
    \     u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n</code>\n<|/\
    \ a tags=c#,arrays,sorting |>\n<| c |>\nThis is not an answer to the question.\
    \ Also, `Arrays.sort` doesn't return a new array, it sorts the existing array\
    \ in-place.\n<|/ c |>\n<| c |>\nThis is not an answer to the question. Also, `Arrays.sort`\
    \ doesn't return a new array, it sorts the existing array in-place.\n<|/ c |>\n\
    <| c |>\nThis is not an answer to the question. Also, `Arrays.sort` doesn't return\
    \ a new array, it sorts the existing array in-place.\n<|/ c |>\n<| c |>\nThis\
    \ is not an answer to the question. Also, `Arrays.sort` doesn't return a new array,\
    \ it sorts the existing array in-place.\n<|/ c |>\n<| c |>\nThis is not an answer\
    \ to the question. Also, `Arrays.sort` doesn't return a new array, it sorts the\
    \ existing array in-place.\n<|/ c |>\n<| a tags=c#,arrays,sorting |>\n<code>\n\
    public static int[] SortArray(int[] array)\n{\n    Array.Sort(array);\n    return\
    \ array;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis is not an answer to the\
    \ question. Also, `Arrays.sort` doesn't return a new array, it sorts the existing\
    \ array in-place.\n<|/ c |>\n<| c |>\nThis is not an answer to the question. Also,\
    \ `Arrays.sort` doesn't return a new array, it sorts the existing array in-place.\n\
    <|/ c |>\n<| c |>\nThis is not an answer to the question. Also, `Arrays.sort`\
    \ doesn't return a new array, it sorts the existing array in-place.\n<|/ c |>\n\
    <| a tags=c#,arrays,sorting |>\n<code>", "{\n    long[] result = new long[l.length];\n\
    \    long[] seen = new long[l.length];\n    int j = 0;\n    for (int i = 0; i\
    \ < l.length; i++) \n    {\n        if (!seen[i]) \n        {\n            result[j]\
    \ = l[i];\n            seen[i] = 1;\n            j++;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.*;\n\
    public class UniqueArray {\n    public static void main(String[] args) {\n   \
    \     int[] a = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};\n      \
    \  List<Integer> list = new ArrayList<Integer>();\n        for(int i : a){\n \
    \           if(!list.contains(i)){\n                list.add(i);\n           \
    \ }\n        }\n        System.out.println(list);\n    }\n}\n</code>\n<|/ a tags=arrays,java\
    \ |>\n<| a tags=arrays,java |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long[] result = new long[l.length];\n    long[]\
    \ seen = new long[l.length];\n    int i = 0;\n    for (; i < l.length; ++i)\n\
    \    {\n        long x = l[i];\n        if (seen[x] == 0)\n        {\n       \
    \     result[i] = x;\n            seen[x] = 1;\n        }\n    }\n    return result;\n\
    }", "{\n\tlong[] result = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++)\n\t\tresult[i] = l[i];\n\tArrays.sort(result);\n\treturn result;\n}", "{\n\
    \    long[] result = new long[l.length];\n    long prev = 0;\n    for(int i =\
    \ 0; i < l.length; i++) \n    {\n        if(l[i] != prev) \n        {\n      \
    \      result[i - 1] = l[i];\n            prev = l[i];\n        }\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if\
    \ you have a list of `long[]` of different lengths.\n<|/ c |>\n<| c |>\nI believe\
    \ it does. I tested it on lists of different lengths and it worked fine.\n<|/\
    \ c |>\n<| c |>\nIt does work, but it's very inefficient. `Arrays.sort` does a\
    \ lot of extra work to sort the array. `Arrays.sort` also does a lot of extra\
    \ work to compare the elements. `Arrays.sort` also does a lot of extra work to\
    \ find the correct insertion point. `Arrays.sort` also does a lot of extra work\
    \ to find the correct element to swap with. `Arrays.sort` also does a lot of extra\
    \ work to find the correct element to swap with. `Arrays.sort` also does a lot\
    \ of extra work to find the correct element to swap with. `Arrays.sort` also does\
    \ a lot of extra work to find the correct element to swap with. `Arrays.sort`\
    \ also does a lot of extra work to find the correct element to swap with. `Arrays.sort`\
    \ also does a lot of extra work to find the correct element to swap with. `Arrays.sort`\
    \ also does a lot of extra work to find the correct element to swap with. `Arrays.sort`\
    \ also does a lot of extra work to find the correct element to swap with. `Arrays.sort`\
    \ also does a lot of extra work to find the correct element to swap with. `Arrays.sort`\
    \ also does a lot of extra work to find the correct element to swap with. `Arrays.sort`\
    \ also does a lot of extra work to find the correct element to swap with. `Arrays.sort`\
    \ also does a lot of extra work to find the correct element to swap with. `Arrays.sort`\
    \ also does a lot of extra work to find the correct element to swap with. `Arrays.sort`\
    \ also does a lot of extra work to find the correct element to swap with. `Arrays.sort`\
    \ also does a lot of extra work to find the correct element to swap with. `Arrays.sort`\
    \ also does a lot of extra work to find the correct element to swap with. `Arrays.sort`\
    \ also does ", "{\n    long[] result = new long[l.length];\n    long[] seen =\
    \ new long[l.length];\n    \n    for (int i = 0; i < l.length; i++) \n    {\n\
    \        long x = l[i];\n        \n        if (seen[x] == 0) \n        {\n   \
    \         seen[x] = 1;\n            result[i] = x;\n        }\n    }\n    \n \
    \   return result;\n}", "{\n    long[] result = new long[l.length];\n    Arrays.sort(l);\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        result[i] = l[i];\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;", "{\n\
    \    long[] result = new long[l.length];\n    for(int i = 0; i < l.length; i++)\
    \ \n    {\n        long current = l[i];\n        for(int j = i + 1; j < l.length;\
    \ j++) \n        {\n            if(l[j] == current) \n            {\n        \
    \        result[i] = l[j];\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a dscore=2 |>\n<code>\npublic\
    \ static <T> List<T> uniqueSorted(List<T> list) {\n    Set<T> set = new HashSet<>();\n\
    \    List<T> result = new ArrayList<>();\n    for (T t : list) {\n        if (!set.add(t))\
    \ {\n            result.add(t);\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,arrays,sorting |>\n<| a tags=java,arrays,sorting |>\n<code>\n\
    public static <T> List<T> uniqueSorted(List<T> list) {\n    Set<T> set = new HashSet<>();\n\
    \    List<T> result = new ArrayList<>();\n    for (T t : list) {\n        if (!set.add(t))\
    \ {\n            result.add(t);\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\npublic static <T> List<T> uniqueSorted(List<T>\
    \ list) {\n    Set<T> set = new HashSet<>();\n    List<T> result = new ArrayList<>();\n\
    \    for (T t : list) {\n        if (!set.add(t)) {\n            result.add(t);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static <T> List<T> uniqueSorted(List<T>\
    \ list) {\n    Set<T> set = new HashSet<>();\n    List<T> result = new ArrayList<>();\n\
    \    for (T t : list) {\n        if (!set.add(t)) {\n            result.add(t);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting\
    \ |>\n<| a tags=java,arrays,sorting |>\n<code>\npublic static <T> List<T> uniqueSorted(List<T>\
    \ list) {\n    Set<T> set = new HashSet<>();\n    List<T> result = new ArrayList<>();\n\
    \    for (T t : list) {\n        if (!set.add(t)) {\n            result.add(t);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\npublic static <T> List<T> uniqueSorted(List<T> list) {\n    Set<T>\
    \ set = new HashSet<>();\n    List<T> result = new ArrayList<>();\n    for (",
  "{\n    long[] u = new long[l.length];\n    long[] u2 = new long[l.length];\n  \
    \  long[] u3 = new long[l.length];\n    long[] u4 = new long[l.length];\n    long[]\
    \ u5 = new long[l.length];\n    long[] u6 = new long[l.length];\n    long[] u7\
    \ = new long[l.length];\n    long[] u8 = new long[l.length];\n    long[] u9 =\
    \ new long[l.length];\n    long[] u10 = new long[l.length];\n    long[] u11 =\
    \ new long[l.length];\n    long[] u12 = new long[l.length];\n    long[] u13 =\
    \ new long[l.length];\n    long[] u14 = new long[l.length];\n    long[] u15 =\
    \ new long[l.length];\n    long[] u16 = new long[l.length];\n    long[] u17 =\
    \ new long[l.length];\n    long[] u18 = new long[l.length];\n    long[] u19 =\
    \ new long[l.length];\n    long[] u20 = new long[l.length];\n    long[] u21 =\
    \ new long[l.length];\n    long[] u22 = new long[l.length];\n    long[] u23 =\
    \ new long[l.length];\n    long[] u24 = new long[l.length];\n    long[] u25 =\
    \ new long[l.length];\n    long[] u26 = new long[l.length];\n    long[] u27 =\
    \ new long[l.length];\n    long[] u28 = new long[l.length];\n    long[] u29 =\
    \ new long[l.length];\n    long[] u30 = new long[l.length];\n    long[] u31 =\
    \ new long[l.length];\n    long[] u32 = new long[l.length];\n    long[] u33 =\
    \ new long[l.length];\n    long[] u34 = new long[l.length];\n    long[] u35 =\
    \ new long[l.length];\n    long[] u36 = new long[l.length];\n    long[] u37 =\
    \ new long[l.length];\n    long[] u38 = new long[l.length];\n    long[] u39 =\
    \ new long[l.length];\n    long[] u40 = new long[l.length];\n    long[] u41 =\
    \ new long[l.length];\n    long[] u42 = new long[l.length];\n    long[] u43 = ",
  "{\n\tlong[] result = new long[l.length];\n\t\n\tfor (int i = 0; i < l.length; i++)\n\
    \t{\n\t\tint j = 0;\n\t\twhile (j < result.length && l[i] == result[j])\n\t\t\t\
    j++;\n\t\t\n\t\tif (j == result.length)\n\t\t\tresult[i] = l[i];\n\t\telse\n\t\
    \t\tfor (int k = j; k < result.length; k++)\n\t\t\t\tresult[k] = result[k + 1];\n\
    \t}\n\t\n\treturn result;\n}", "{\n\tlong[] u = new long[l.length];\n\tArrays.sort(l);\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\treturn u;\n\
    }", "{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++) \n    {\n        long current = l[i];\n        for(int j = 0; j < i; j++)\
    \ \n        {\n            if(l[j] == current) \n            {\n             \
    \   current = l[j];\n            }\n        }\n        result[i] = current;\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis is not an answer to the question. Also, why are you using `Arrays.sort`\
    \ instead of `Arrays.sort`?\n<|/ c |>\n<| c |>\nI agree with you, this is an answer\
    \ to the question. Arrays.sort is just an example to show how it works. I used\
    \ Arrays.sort because I wanted to show how it works. I didn't want to copy the\
    \ code from Arrays.sort to my answer. Arrays.sort is just an example to show how\
    \ it works. I used Arrays.sort because I wanted to show how it works. I didn't\
    \ want to copy the code from Arrays.sort to my answer. Arrays.sort is just an\
    \ example to show how it works. I used Arrays.sort because I wanted to show how\
    \ it works. I didn't want to copy the code from Arrays.sort to my answer. Arrays.sort\
    \ is just an example to show how it works. I used Arrays.sort because I wanted\
    \ to show how it works. I didn't want to copy the code from Arrays.sort to my\
    \ answer. Arrays.sort is just an example to show how it works. I used Arrays.sort\
    \ because I wanted to show how it works. I didn't want to copy the code from Arrays.sort\
    \ to my answer. Arrays.sort is just an example to show how it works. I used Arrays.sort\
    \ because I wanted to show how it works. I didn't want to copy the code from Arrays.sort\
    \ to my answer.\n<|/ c |>\n<| c |>\nI agree with you, this is an answer to the\
    \ question. Arrays.sort is just an example to show how it works. I used Arrays.sort\
    \ because I wanted to show how it works. I didn't want to copy the code from Arrays.sort\
    \ to my answer. Arrays.sort is just an example to show how it works. I used Arrays.sort\
    \ because I wanted to show how it works. I didn't want to copy the code from Arrays.sort\
    \ to my answer. Arrays.sort is just an example to show how it works. I used Arrays.sort\
    \ because I wanted to show how it works. I didn't want to copy the code from Arrays.sort\
    \ to my answer", "{\n    long[] result = new long[l.length];\n    long lastValue\
    \ = l[0];\n    int i = 0;\n    for (long value : l) {\n        if (value == lastValue)\
    \ {\n            result[i++] = value;\n        } else {\n            lastValue\
    \ = value;\n            result[i] = value;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,arrays |>\n<| a dscore=0 |>\n<code>\npublic static int[]\
    \ RemoveDuplicates(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int index = 0;\n    bool isDuplicate = false;", "{\n    long[] result = new\
    \ long[l.length];\n    long last = 0;\n    long lastCount = 0;\n    for (int i\
    \ = 0; i < l.length; i++)\n    {\n        if (l[i] != last)\n        {\n     \
    \       last = l[i];\n            lastCount = 1;\n        }\n        else\n  \
    \      {\n            lastCount++;\n        }\n        result[i] = last;\n   \
    \ }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting\
    \ |>\n<| a tags=java,arrays,sorting |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n \
    \       u[i] = l[i];\n    Arrays.sort(u);\n    return u;\n}", "{\n    long[] u\
    \ = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n      \
    \  u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n</code>\n<|/ a\
    \ tags=arrays,c#,algorithm |>\n<| c |>\nThis is not the fastest solution, since\
    \ it sorts the array twice.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted\
    \ to show that it is possible to do it in O(n) time. Of course it would be better\
    \ to use a HashSet or something similar.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ but I wanted to show that it is possible to do it in O(n) time. Of course it\
    \ would be better to use a HashSet or something similar.\n<|/ c |>\n<| c |>\n\
    This is not O(n) time. Sorting is an O(n log n) operation. Your algorithm is O(n^2)\
    \ time. Sorting twice is O(n^2) time. Your algorithm is O(n^2) time. Sorting twice\
    \ is O(n^2) time. Sorting twice is O(n^2) time. Sorting twice is O(n^2) time.\
    \ Sorting twice is O(n^2) time. Sorting twice is O(n^2) time. Sorting twice is\
    \ O(n^2) time. Sorting twice is O(n^2) time. Sorting twice is O(n^2) time. Sorting\
    \ twice is O(n^2) time. Sorting twice is O(n^2) time. Sorting twice is O(n^2)\
    \ time. Sorting twice is O(n^2) time. Sorting twice is O(n^2) time. Sorting twice\
    \ is O(n^2) time. Sorting twice is O(n^2) time. Sorting twice is O(n^2) time.\
    \ Sorting twice is O(n^2) time. Sorting twice is O(n^2) time. Sorting twice is\
    \ O(n^2) time. Sorting twice is O(n^2) time. Sorting twice is O(n^2) time. Sorting\
    \ twice is O(n^2) time. Sorting twice is O(n^2) time. Sorting twice is O(n^2)\
    \ time. Sorting twice is O(n^2) time. Sorting twice is O(n^2) time. Sorting twice\
    \ is O(n", "{\n\tlong[] result = new long[l.length];\n\t\n\tfor (int i = 0; i\
    \ < l.length; i++)\n\t{\n\t\tint j;\n\t\tfor (j = 0; j < i; j++)\n\t\t\tif (l[i]\
    \ == l[j])\n\t\t\t\tbreak;\n\t\t\n\t\tif (j == i)\n\t\t\tresult[i] = l[i];\n\t\
    }\n\t\n\treturn result;\n}", "{\n    long[] result = new long[l.length];\n   \
    \ for(int i = 0; i < l.length; ++i)\n        result[i] = l[i];\n    Arrays.sort(result);\n\
    \    return result;\n}", "{\n    long[] u = new long[l.length];\n    for(int i\
    \ = 0; i < l.length; i++) \n        u[i] = l[i];\n    Arrays.sort(u);\n    return\
    \ u;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long[] result\
    \ = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n     \
    \   long current = l[i];\n        for(int j = i; j < l.length; j++) \n       \
    \ {\n            if(l[j] == current) \n            {\n                result[j]\
    \ = current;\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,c#,sorting |>\n<code>\n\
    public static int[] Sort(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int j = 0;\n    for (int i = 0; i < array.Length; i++)\n    {\n        if\
    \ (array[i] != array[j])\n        {\n            result[j] = array[i];\n     \
    \       j++;\n        }\n    }\n    result[j - 1] = array[array.Length - 1];\n\
    \    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ if the last element of the array is equal\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if the last element of the array is equal to *any* of the other elements. For\
    \ example, `Sort(new int[] { 1, 2, 3, 4 })` returns `{1, 2, 3, 4}`.\n<|/ c |>\n\
    <| a tags=arrays,c#,sorting |>\n<code>\npublic static int[] Sort(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int j = 0;\n    for (int i =\
    \ 0; i < array.Length; i++)\n    {\n        if (array[i] != array[j])\n      \
    \  {\n            result[j] = array[i];\n            j++;\n        }\n    }\n\
    \    result[j - 1] = array[array.Length - 1];\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=arrays,c#,sorting |>\n<code>\npublic static int[]\
    \ Sort(int[] array)\n{\n    int[] result = new int[array.Length];\n    int j =\
    \ 0;\n    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i]\
    \ != array[j])\n        {\n            result[j] = array[i];\n            j++;\n\
    \        }\n    }\n    result[j - 1] = array[array.Length - 1];\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,c#,sorting |>\n<code>\npublic\
    \ static int[] Sort(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int j = 0;\n    for (int i = 0; i < array.Length; i++)\n    {\n        if\
    \ (array[i] != array[j])\n        {\n            result[j] = array[i];\n     \
    \       j++;\n        }\n    }\n    result[j - 1] = array[array.Length - 1];\n\
    \    return result;\n}\n</code>\n", "{\n    long[] u = new long[l.length];\n \
    \   for(int i = 0; i < l.length; i++) \n    {\n        u[i] = l[i];\n    }\n \
    \   Arrays.sort(u);\n    return u;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport\
    \ java.util.List;", "{\n    long[] res = new long[l.length];\n    Arrays.sort(l);\n\
    \    for(int i = 0; i < l.length; i++) \n        res[i] = l[i];\n    return res;\n\
    }\n</code>\n<|/ a tags=arrays,c# |>\n<| a tags=arrays,c# |>\n<code>\npublic static\
    \ int[] Unique(int[] array)\n{\n    int[] result = new int[array.Length];\n  \
    \  Array.Sort(array);\n    int j = 0;\n    for (int i = 0; i < array.Length; i++)\n\
    \    {\n        if (array[i] != result[j])\n        {\n            result[j] =\
    \ array[i];\n            j++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=arrays,c# |>\n<code>\npublic static int[] Unique(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    Array.Sort(array);\n\
    \    int j = 0;\n    for (int i = 0; i < array.Length; i++)\n    {\n        if\
    \ (array[i] != result[j])\n        {\n            result[j] = array[i];\n    \
    \        j++;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\npublic static int[] Unique(int[] array)\n{\n \
    \   int[] result = new int[array.Length];\n    Array.Sort(array);\n    int j =\
    \ 0;\n    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i]\
    \ != result[j])\n        {\n            result[j] = array[i];\n            j++;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c# |>\n<|\
    \ a tags=arrays,c# |>\n<code>\npublic static int[] Unique(int[] array)\n{\n  \
    \  int[] result = new int[array.Length];\n    Array.Sort(array);\n    int j =\
    \ 0;\n    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i]\
    \ != result[j])\n        {\n            result[j] = array[i];\n            j++;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,c#\
    \ |>\n<code>\npublic static int[] Unique(int[] array)\n{\n    int[] result = new\
    \ int[array.Length];\n    Array.Sort(array);\n    int j = 0;\n    for (int i =\
    \ 0; i < array.Length; i++)\n    {\n        if (array[i] != result[j])\n     \
    \   {\n            result[j] = array[i];\n            j++;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    public static int[] Unique(int[] array)\n{\n    int[] result = new int[array.",
  "{\n    long[] result = new long[l.length];\n    long last = 0;\n    for(int i =\
    \ 0; i < l.length; i++) \n    {\n        if(l[i] != last) \n        {\n      \
    \      result[i - 1] = l[i];\n            last = l[i];\n        }\n    }\n   \
    \ return result;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, long x) \n{\n    long[] result = new long[l.length];\n\
    \    long last = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ != last && l[i] == x) \n        {\n            result[i - 1] = l[i];\n     \
    \       last = l[i];\n        }\n    }\n    return result;\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int\
    \ x) \n{\n    long[] result = new long[l.length];\n    long last = 0;\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] != last && l[i] == x) \n\
    \        {\n            result[i - 1] = l[i];\n            last = l[i];\n    \
    \    }\n    }\n    return result;\n}\n/*\nReturn sorted unique elements in an\
    \ array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, long x, int y) \n{\n  \
    \  long[] result = new long[l.length];\n    long last = 0;\n    for(int i = 0;\
    \ i < l.length; i++) \n    {\n        if(l[i] != last && l[i] == x && l[i + 1]\
    \ == y) \n        {\n            result[i - 1] = l[i];\n            last = l[i];\n\
    \        }\n    }\n    return result;\n}\n/*\nReturn sorted unique elements in\
    \ an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int x, int y) \n{\n   \
    \ long[] result = new long[l.length];\n    long last = 0;\n    for(int i = 0;\
    \ i < l.length; i++) \n", "{\n\tlong[] u = new long[l.length];\n\tfor(int i =\
    \ 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn\
    \ u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < u.length;\
    \ ++i)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}", "{\n    long[] u\
    \ = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n        u[l.indexOf(l[i])]\
    \ = l[i];\n    return u;\n}", "{\n    long[] u = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n        u[i] = l[i];\n    Arrays.sort(u);\n    return\
    \ u;\n}", "{\n    long[] res = new long[l.length];\n    long last = 0;\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] != last) \n        {\n  \
    \          last = l[i];\n            res[i] = last;\n        }\n    }\n    return\
    \ res;\n}\n</code>\n<|/ a tags=arrays,c#,sorting |>\n<| a |>\n<code>\npublic static\
    \ int[] Sort(int[] array)\n{\n    int[] result = new int[array.Length];\n    int\
    \ j = 0;\n    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i]\
    \ != array[j])\n        {\n            result[j] = array[i];\n            j++;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,sorting\
    \ dscore=2 |>\n<| c |>\nThis doesn't work if there are duplicates in the array\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\npublic static int[] Sort(int[] array)\n{\n\
    \    int[] result = new int[array.Length];\n    int j = 0;\n    for (int i = 0;\
    \ i < array.Length; i++)\n    {\n        if (array[i] != array[j])\n        {\n\
    \            result[j] = array[i];\n            j++;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=arrays,c#,sorting |>\n<| a tags=arrays,c#,sorting\
    \ |>\n<code>", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i <\
    \ l.length; i++)\n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n  \
    \  return u;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, int start, int end) \n{\n    long[] u = new long[end -\
    \ start];\n    for(int i = start; i < end; i++)\n    {\n        u[i - start] =\
    \ l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted unique\
    \ elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step) \n{\n    long[] u = new long[end - start];\n    for(int i\
    \ = start; i < end; i += step)\n    {\n        u[i - start] = l[i];\n    }\n \
    \   Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted unique elements in an\
    \ array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start, int end, int\
    \ step, long cmp) \n{\n    long[] u = new long[end - start];\n    for(int i =\
    \ start; i < end; i += step)\n    {\n        u[i - start] = l[i];\n    }\n   \
    \ Arrays.sort(u, cmp);\n    return u;\n}\n/*\nReturn sorted unique elements in\
    \ an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start, int end, int\
    \ step, long cmp, long ord) \n{\n    long[] u = new long[end - start];\n    for(int\
    \ i = start; i < end; i += step)\n    {\n        u[i - start] = l[i];\n    }\n\
    \    Arrays.sort(u, cmp, ord);\n    return u;\n}\n/*\nReturn sorted unique elements\
    \ in an array\n    >>> unique([5L, 3L, ", "{\n    long[] result = new long[l.length];\n\
    \    long[] seen = new long[l.length];\n    int j = 0;\n    for(int i = 0; i <\
    \ l.length; i++)\n    {\n        if(seen[l[i]] == 0)\n        {\n            result[j]\
    \ = l[i];\n            seen[l[i]] = 1;\n            j++;\n        }\n    }\n \
    \   return result;\n}", "{\n    long[] result = new long[l.length];\n    Arrays.sort(l);\n\
    \    int i = 0;\n    for(long e : l)\n    {\n        if(e != l[i])\n        {\n\
    \            result[i++] = e;\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, int start, int end) \n{\n    long[] result = new long[end - start];\n   \
    \ Arrays.sort(l, start, end);\n    int i = 0;\n    for(long e : l)\n    {\n  \
    \      if(e != l[start+i])\n        {\n            result[i++] = e;\n        }\n\
    \    }\n    return result;\n}\n/*\nReturn sorted unique elements in an array\n\
    \    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L,\
    \ 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start, int end, int step) \n\
    {\n    long[] result = new long[end - start];\n    Arrays.sort(l, start, end,\
    \ step);\n    int i = 0;\n    for(long e : l)\n    {\n        if(e != l[start+i*step])\n\
    \        {\n            result[i++] = e;\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long stepSize) \n{\n    long[]\
    \ result = new long[end - start];\n    Arrays.sort(l, start, end, step, stepSize);\n\
    \    int i = 0;\n    for(long e : l)\n    {\n        if(e != l[start+i*step])\n\
    \        {\n            result[i++] = e;\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long stepSize, long stepSize2)\
    \ \n{\n    long[] result = new long[end - start];\n    Arrays.sort(l, start, end,\
    \ step, ", "{\n    long[] result = new long[l.length];\n    Arrays.sort(l);\n\
    \    for(int i = 0; i < l.length; i++)\n        result[i] = l[i];\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not the best solution.\
    \ `Arrays.sort` has O(nlogn) complexity and `unique` has O(n) complexity. `HashSet`\
    \ has O(n) complexity and `unique` has O(nlogn) complexity. `ArrayList` has O(n)\
    \ complexity and `unique` has O(nlogn) complexity. `LinkedList` has O(n) complexity\
    \ and `unique` has O(nlogn) complexity.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ But the OP asked for a solution in O(n) complexity. `Arrays.sort` has O(nlogn)\
    \ complexity and `unique` has O(n) complexity. `HashSet` has O(n) complexity and\
    \ `unique` has O(nlogn) complexity. `ArrayList` has O(n) complexity and `unique`\
    \ has O(nlogn) complexity. `LinkedList` has O(n) complexity and `unique` has O(nlogn)\
    \ complexity.\n<|/ c |>\n<| c |>\nI agree with you. But the OP asked for a solution\
    \ in O(n) complexity. `Arrays.sort` has O(nlogn) complexity and `unique` has O(n)\
    \ complexity. `HashSet` has O(n) complexity and `unique` has O(nlogn) complexity.\
    \ `ArrayList` has O(n) complexity and `unique` has O(nlogn) complexity. `LinkedList`\
    \ has O(n) complexity and `unique` has O(nlogn) complexity.\n<|/ c |>\n<| c |>\n\
    I agree with you. But the OP asked for a solution in O(n) complexity. `Arrays.sort`\
    \ has O(nlogn) complexity and `unique` has O(n) complexity. `HashSet` has O(n)\
    \ complexity and `unique` has O(nlogn) complexity. `ArrayList` has O(n) complexity\
    \ and `unique` has O(nlogn) complexity. `LinkedList` has O(n) complexity and ",
  "{\n    long[] result = new long[l.length];\n    \n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        long current = l[i];\n        int j = 0;\n        for(;\
    \ j < i; j++)\n        {\n            if(l[j] == current)\n                break;\n\
    \        }\n        result[i] = l[j];\n    }\n    \n    Arrays.sort(result);\n\
    \    return result;\n}", "{\n    long[] result = new long[l.length];\n    long\
    \ prev = 0;\n    long cur = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n\
    \        cur = l[i];\n        if(cur != prev)\n        {\n            result[i\
    \ - 1] = cur;\n            prev = cur;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,algorithm,sorting |>\n<code>\npublic\
    \ static void SortUnique<T>(IList<T> list)\n{\n    HashSet<T> set = new HashSet<T>();\n\
    \    foreach (T item in list)\n    {\n        if (!set.Add(item))\n        {\n\
    \            list.Remove(item);\n        }\n    }\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work if you have a duplicate in the list. For example,\
    \ if your list contains \"a\", \"b\", \"a\", \"c\", the result will be \"a\",\
    \ \"b\", \"c\".\n<|/ c |>\n<| c |>\n: Yes, it does. HashSet doesn't allow duplicates.\
    \ If you want duplicates, use HashSet<T>.\n<|/ c |>\n<| c |>\n: It doesn't work\
    \ if you have a duplicate in the list. For example, if your list contains \"a\"\
    , \"b\", \"a\", \"c\", the result will be \"a\", \"b\", \"c\".\n<|/ c |>\n<| c\
    \ |>\n: It doesn't work if you have a duplicate in the list. For example, if your\
    \ list contains \"a\", \"b\", \"a\", \"c\", the result will be \"a\", \"b\", \"\
    c\".\n<|/ c |>\n<| c |>\n: It doesn't work if you have a duplicate in the list.\
    \ For example, if your list contains \"a\", \"b\", \"a\", \"c\", the result will\
    \ be \"a\", \"b\", \"c\".\n<|/ c |>\n<| a tags=c#,algorithm,sorting |>\n<code>\n\
    public static IEnumerable<T> SortUnique<T>(this IEnumerable<T> source)\n{\n  \
    \  HashSet<T> set = new HashSet<T>();\n    foreach (T item in source)\n    {\n\
    \        if (!set.Add(item))\n        {\n            source.Remove(item);\n  \
    \      }\n    }\n    return source;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\npublic static IEnumerable<T> SortUnique<T>(this IEnumerable<T> source)\n\
    {\n    HashSet<T> set = new HashSet<T>();\n    foreach (T item in source)\n  \
    \  {\n        if (!set.Add(item))\n        {\n            source.Remove(item);\n\
    \        }\n    }\n    return source;\n}\n</code>\n<|/ a tags=c#,algorithm,sorting ",
  "{\n\tlong[] u = new long[l.length];\n\tfor (int i = 0; i < l.length; i++)\n\t\t\
    u[l.indexOf(l[i])] = l[i];\n\treturn u;\n}", "{\n    long[] result = new long[l.length];\n\
    \    long[] seen = new long[l.length];\n    \n    for(int i = 0; i < l.length;\
    \ ++i)\n    {\n        long x = l[i];\n        \n        if(seen[x] == 0)\n  \
    \      {\n            seen[x] = 1;\n            result[i] = x;\n        }\n  \
    \  }\n    \n    return result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    long prev = 0;\n    long cur = l[0];\n    for(int i = 1; i < l.length; i++)\
    \ \n    {\n        if(l[i] != cur)\n        {\n            result[i - 1] = cur;\n\
    \            prev = cur;\n            cur = l[i];\n        }\n    }\n    result[result.length\
    \ - 1] = cur;\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = {1, 2,\
    \ 3, 4, 5};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post.\n<|/ c |>\n<| c |>\nThis does provide an answer\
    \ to the question. Sorting is an O(n log n) operation. Sorting is not the only\
    \ way to remove duplicates.\n<|/ c |>\n<| c |>\nThis answer does not provide an\
    \ answer to the question. It just provides a way to sort an array. Sorting is\
    \ not the only way to remove duplicates.\n<|/ c |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post.\n<|/ c |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n\
    <code>\npublic static void main(String[] args) {\n    int[] arr = {1, 2, 3, 4,\
    \ 5};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n\tlong[] u = new long[l.length];\n\tfor (int i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn\
    \ u;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[]\
    \ unique(long[] l, long x) \n{\n\tlong[] u = new long[l.length];\n\tfor (int i\
    \ = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == x) \n\t\t{\n\t\t\tcontinue;\n\
    \t\t}\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int\
    \ x) \n{\n\tlong[] u = new long[l.length];\n\tfor (int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tif (l[i] == x) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tu[i] = l[i];\n\
    \t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements in an\
    \ array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, long x, int y) \n{\n\t\
    long[] u = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\
    \tif (l[i] == x && l[i] == y) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tu[i] = l[i];\n\
    \t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements in an\
    \ array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L,\
    \ 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int x, int y) \n{\n\tlong[]\
    \ u = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif\
    \ (l[i] == x && l[i] == y) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tu[i] = l[i];\n\
    \t}\n\tArrays.sort(u);\n\treturn u;", "{\n    long[] u = new long[l.length];\n\
    \    long uCount = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n       \
    \ if (l[i] != 0)\n        {\n            u[uCount++] = l[i];\n        }\n    }\n\
    \    Arrays.sort(u);\n    return u;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work for me. `unique` returns `[1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L,\
    \ 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L,\
    \ 42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L,\
    \ 58L, 59L, 60L, 61L, 62L, 63L, 64L, 65L, 66L, 67L, 68L, 69L, 70L, 71L, 72L, 73L,\
    \ 74L, 75L, 76L, 77L, 78L, 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L, 87L, 88L, 89L,\
    \ 90L, 91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L, 100L, 101L, 102L, 103L, 104L,\
    \ 105L, 106L, 107L, 108L, 109L, 110L, 111L, 112L, 113L, 114L, 115L, 116L, 117L,\
    \ 118L, 119L, 120L, 121L, 122L, 123L, 124L, 125L, 126L, 127L, 128L, 129L, 130L,\
    \ 131L, 132L, 133L, 134L, 135L, 136L, 137L, 138L, 139L, 140L, 141L, 142L, 143L,\
    \ 144L, 145L, 146L, 147L, 148L, 149L, 150L, 151L, 152L, 153L, 154L, 155L, 156L,\
    \ 157L, 158L, 159L, 160L, 161L, 162L, 163L, 164L, 165L, 166L, 167L, 168L, 169L,\
    \ 170L, 171L, 172L, 173L, 174L, 175L, 176L, 177L, 178L, 179L, 180L, 181L, 182L,\
    \ 183L, 184L, 185L, 186L, 187L, 188L, 189L, 190L, 191L, 192L, 193L, 194L, 195L,\
    \ 196L, 197L, 198L, 199L, 200L, 201L, 202L, 203L, 204L, ", "{\n    long[] u =\
    \ new long[l.length];\n    for(int i = 0; i < l.length; i++)\n        u[l.indexOf(l[i])]\
    \ = l[i];\n    return u;\n}", "{\n    long[] u = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n\
    \    return u;\n}\n</code>\n<|/ a tags=arrays,sorting,c# |>\n<| a dscore=2 |>\n\
    <code>", "{\n\tlong[] u = new long[l.length];\n\tlong last = 0;\n\tfor (int i\
    \ = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] != last) \n\t\t{\n\t\t\tlast = l[i];\n\
    \t\t\tu[i] = last;\n\t\t}\n\t}\n\treturn u;\n}", "{\n    long[] result = new long[l.length];\n\
    \    long[] seen = new long[l.length];\n    int i = 0;\n    for (; i < l.length;\
    \ ++i)\n    {\n        long x = l[i];\n        if (seen[x] == 0)\n        {\n\
    \            seen[x] = 1;\n            result[i] = x;\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, long x) \n{\n    long[] result = new long[l.length];\n\
    \    long[] seen = new long[l.length];\n    int i = 0;\n    for (; i < l.length;\
    \ ++i)\n    {\n        long x = l[i];\n        if (seen[x] == 0)\n        {\n\
    \            seen[x] = 1;\n            result[i] = x;\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, int x) \n{\n    long[] result = new long[l.length];\n\
    \    long[] seen = new long[l.length];\n    int i = 0;\n    for (; i < l.length;\
    \ ++i)\n    {\n        long x = l[i];\n        if (seen[x] == 0)\n        {\n\
    \            seen[x] = 1;\n            result[i] = x;\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, double x) \n{\n    long[] result = new long[l.length];\n\
    \    long[] seen = new long[l.length];\n    int i = 0;\n    for (; i < l.length;\
    \ ++i)\n    {\n        long x = l[i];\n        if (seen[x] == 0)\n        {\n\
    \            seen[x] = 1;\n            result[i] = x;\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\n\
    long[] unique(long[] l, long x, long ", "{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\
    \    long[] result = new long[l.length];\n    long[] seen = new long[l.length];\n\
    \    \n    for (int i = 0; i < l.length; i++)\n    {\n        if (!seen[l[i]])\n\
    \        {\n            result[i] = l[i];\n            seen[l[i]] = true;\n  \
    \      }\n    }\n    \n    return result;\n}", "{\n    long[] u = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        u[i] = l[i];\n    }\n\
    \    Arrays.sort(u);\n    return u;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nimport java.util.*;", "{\n    long[] result = new long[l.length];\n\
    \    long prev = 0;\n    long cur = 0;\n    for(int i = 0; i < l.length; i++)\n\
    \    {\n        cur = l[i];\n        if(cur != prev)\n        {\n            result[i\
    \ - 1] = cur;\n            prev = cur;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n\
    \    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis is not an answer to the question. OP asked for\
    \ \"the fastest way\", not \"the most efficient way\".\n<|/ c |>\n<| c |>\nThe\
    \ question was \"the fastest way\", not \"the most efficient way\".  I answered\
    \ the question as asked.\n<|/ c |>\n<| c |>\nI disagree. OP asked for \"the fastest\
    \ way\", not \"the most efficient way\". Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question.\
    \ Your answer does not answer the question. Your answer does not answer the question",
  "{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        long current = l[i];\n        for(int j = i + 1; j < l.length;\
    \ ++j)\n        {\n            if(l[j] == current)\n            {\n          \
    \      current = l[j];\n            }\n        }\n        result[i] = current;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not\
    \ an answer, but a comment. Please, use comments for such things.\n<|/ c |>\n\
    <| c |>\nI agree with you, but I do not have enough reputation to comment on other\
    \ people's posts.\n<|/ c |>\n<| c |>\nI do not think this answer is correct. `unique`\
    \ returns unique elements, but the OP wants to remove duplicates. `unique` does\
    \ not do that.\n<|/ c |>\n<| c |>\nI agree with you. My answer was written before\
    \ the OP edited the question. I'll edit my answer accordingly.\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>\nimport std.stdio;\nimport std.array;\nimport std.conv;\n\
    import std.algorithm;\nimport std.array;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import st", "{\n    long[] result = new long[l.length];\n    for(int i = 0; i\
    \ < l.length; i++)\n    {\n        long current = l[i];\n        int j = 0;\n\
    \        for(; j < i; j++)\n        {\n            if(l[j] == current)\n     \
    \           break;\n        }\n        if(j == i)\n            result[i] = current;\n\
    \    }\n    return result;\n}", "{\n    long[] res = new long[l.length];\n   \
    \ for(int i = 0; i < l.length; i++) \n    {\n        long x = l[i];\n        for(int\
    \ j = i; j < l.length; j++) \n        {\n            if(l[j] == x) \n        \
    \    {\n                res[j-1] = x;\n                break;\n            }\n\
    \        }\n    }\n    return res;\n}\n</code>\n<|/ a tags=arrays,c#,algorithm\
    \ |>\n<| c |>\nThis is not the fastest solution. `O(n^2)` complexity and `O(n)`\
    \ space complexity.\n<|/ c |>\n<| c |>\n: I agree, this is O(n^2) but it's also\
    \ O(n) space complexity (as opposed to O(n^2) time complexity)\n<|/ c |>\n<| c\
    \ |>\n: I agree, this is O(n^2) but it's also O(n) space complexity (as opposed\
    \ to O(n^2) time complexity)\n<|/ c |>\n<| c |>\n: I agree, this is O(n^2) but\
    \ it's also O(n) space complexity (as opposed to O(n^2) time complexity)\n<|/\
    \ c |>\n<| c |>\n: I agree, this is O(n^2) but it's also O(n) space complexity\
    \ (as opposed to O(n^2) time complexity)\n<|/ c |>\n<| a dscore=4 |>\n<code>\n\
    var unique = array.Distinct().ToArray();\n</code>\n<|/ a tags=arrays,c#,algorithm\
    \ |>\n<| c |>\nThis is not the fastest solution. `O(n^2)` complexity and `O(n)`\
    \ space complexity.\n<|/ c |>\n<| c |>\n: I agree, this is O(n^2) but it's also\
    \ O(n) space complexity (as opposed to O(n^2) time complexity)\n<|/ c |>\n<| c\
    \ |>\n: I agree, this is O(n^2) but it's also O(n) space complexity (as opposed\
    \ to O(n^2) time complexity)\n<|/ c |>\n<| c |>\n: I agree, this is O(n^2) but\
    \ it's also O(n) space complexity (as opposed to O(n^2) time complexity)\n<|/\
    \ c |>\n<| c |>\n: I agree, this is O(n^2) but it's also O(n) space complexity\
    \ (as oppose", "{\n    long[] result = new long[l.length];\n    Arrays.sort(l);\n\
    \    for(int i = 0; i < l.length; i++) \n        result[i] = l[i];\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,sorting |>\n<code>\n\
    public static int[] SortArray(int[] array)\n{\n    Array.Sort(array);\n    return\
    \ array;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,sorting |>\n<code>",
  "{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n\
    \    {\n        long current = l[i];\n        for(int j = i; j < l.length; j++)\n\
    \        {\n            if(l[j] == current)\n            {\n                current\
    \ = l[j];\n            }\n        }\n        result[i] = current;\n    }\n   \
    \ Arrays.sort(result);\n    return result;\n}\n/*\nReturn sorted unique elements\
    \ in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
    \ 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l, int start, int end)\
    \ \n{\n    long[] result = new long[end - start];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        long current = l[i];\n        for(int j = i; j < end;\
    \ j++)\n        {\n            if(l[j] == current)\n            {\n          \
    \      current = l[j];\n            }\n        }\n        result[i - start] =\
    \ current;\n    }\n    Arrays.sort(result);\n    return result;\n}\n/*\nReturn\
    \ sorted unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step) \n{\n    long[] result = new long[end - start];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        long current = l[i];\n\
    \        for(int j = i; j < end; j += step)\n        {\n            if(l[j] ==\
    \ current)\n            {\n                current = l[j];\n            }\n  \
    \      }\n        result[i - start] = current;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n/*\nReturn sorted unique elements in an array\n    >>>\
    \ unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n\
    \    \n*/\nlong[] unique(long[] l, int start, int end, int step, long stepSize)\
    \ \n{\n    long[] result = new long[end - start];\n    for(int i = start; i <\
    \ end; i += step)\n    {\n        long current = l[i];\n        for(int j = i;\
    \ j < end; j += step)\n        {\n            if(l[j] == current)\n          \
    \  {\n                current = l[j];\n            }\n        }\n        result[i\
    \ - start] = current;\n    }\n    Arrays.sort(result);\n    return result;", "{\n\
    \    long[] result = new long[l.length];\n    long last = 0;\n    for(int i =\
    \ 0; i < l.length; i++)\n    {\n        if(l[i] != last)\n        {\n        \
    \    result[result.length - 1] = l[i];\n            last = l[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work if you have duplicate numbers in the array. For example, unique([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L]) returns [123L, 0L, 2L, 3L, 5L, 9L]\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\npublic static int[] unique(int[] arr) {\n    HashSet<Integer>\
    \ set = new HashSet<Integer>();\n    int[] result = new int[arr.length];\n   \
    \ for (int i = 0; i < arr.length; i++) {\n        if (set.contains(arr[i])) {\n\
    \            continue;\n        }\n        result[i] = arr[i];\n        set.add(arr[i]);\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,java |>\n<| a tags=arrays,java\
    \ |>\n<code>\npublic static int[] unique(int[] arr) {\n    Set<Integer> set =\
    \ new HashSet<Integer>();\n    int[] result = new int[arr.length];\n    for (int\
    \ i = 0; i < arr.length; i++) {\n        if (set.contains(arr[i])) {\n       \
    \     continue;\n        }\n        result[i] = arr[i];\n        set.add(arr[i]);\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    <code>\npublic static int[] unique(int[] arr) {\n    Set<Integer> set = new HashSet<Integer>();\n\
    \    int[] result = new int[arr.length];\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        if (set.contains(arr[i])) {\n            continue;\n       \
    \ }\n        result[i] = arr[i];\n        set.add(arr[i]);\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=arrays,java |>\n<| a dscore=0 |>\n<code>\npublic\
    \ static int[] unique(int[] arr) {\n    Set<Integer> set = new HashSet<Integer>();\n\
    \    int[] result = new int[arr.length];\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        if (set.contains(arr[i])) {\n            continue;\n       \
    \ }\n        result[i] = arr[i];\n        set.add(arr[i]);\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=arrays,java |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n    {\n        long x = l[i];\n        for(int j = i; j < l.length; ++j)\n\
    \        {\n            if(l[j] == x)\n            {\n                u[j] = x;\n\
    \                break;\n            }\n        }\n    }\n    return u;\n}", "{\n\
    \    long[] result = new long[l.length];\n    long[] seen = new long[l.length];\n\
    \    int i = 0;\n    foreach(long x, l)\n    {\n        if(!seen[x])\n       \
    \ {\n            result[i++] = x;\n            seen[x] = true;\n        }\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,arrays |>\n<| c\
    \ |>\nThis is not the most efficient solution. Using a HashSet would be more efficient.\n\
    <|/ c |>\n<| c |>\n: I agree, HashSet would be more efficient, but I wanted to\
    \ show a LINQ solution as well. HashSet is also more readable and maintainable\
    \ than LINQ.\n<|/ c |>\n<| c |>\nI agree that HashSet is more readable, but I\
    \ disagree that it is more efficient. HashSet is O(n) while LINQ is O(n^2). HashSet\
    \ is also more readable and maintainable than LINQ.\n<|/ c |>\n<| c |>\n: I agree\
    \ that HashSet is more readable, but I disagree that it is more efficient. HashSet\
    \ is O(n) while LINQ is O(n^2). HashSet is also more readable and maintainable\
    \ than LINQ.\n<|/ c |>\n<| c |>\n: I agree that HashSet is more readable, but\
    \ I disagree that it is more efficient. HashSet is O(n) while LINQ is O(n^2).\
    \ HashSet is also more readable and maintainable than LINQ.\n<|/ c |>\n<| a tags=c#,linq,.net,arrays\
    \ |>\n<code>\nvar unique = array.Distinct().ToArray();\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work if you have a custom IEqualityComparer<T> implementation\
    \ that doesn't use Equals and GetHashCode but only EqualityComparer<T>.Equals.\n\
    <|/ c |>\n<| c |>\n: That's true, but that's not what the OP asked for. He asked\
    \ for unique elements, and Distinct() uses EqualityComparer<T>.Equals to determine\
    \ uniqueness.\n<|/ c |>\n<| c |>\n: Yes, but Distinct() doesn't use EqualityComparer<T>.Equals\
    \ to determine uniqueness. It's using EqualityComparer<T>.Default to determine\
    \ uniqueness.\n<|/ c |>\n<| c |>\n: Yes, but ", "{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        long current = l[i];\n\
    \        int j = 0;\n        for(; j < i; j++) \n        {\n            if(l[j]\
    \ == current) \n            {\n                break;\n            }\n       \
    \ }\n        result[i] = l[j];\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,sorting,c# |>\n<| c |>\nThis doesn't work for me.\
    \ `unique` returns `[1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L,\
    \ 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L,\
    \ 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L,\
    \ 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L, 60L, 61L, 62L,\
    \ 63L, 64L, 65L, 66L, 67L, 68L, 69L, 70L, 71L, 72L, 73L, 74L, 75L, 76L, 77L, 78L,\
    \ 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L, 87L, 88L, 89L, 90L, 91L, 92L, 93L, 94L,\
    \ 95L, 96L, 97L, 98L, 99L, 100L, 101L, 102L, 103L, 104L, 105L, 106L, 107L, 108L,\
    \ 109L, 110L, 111L, 112L, 113L, 114L, 115L, 116L, 117L, 118L, 119L, 120L, 121L,\
    \ 122L, 123L, 124L, 125L, 126L, 127L, 128L, 129L, 130L, 131L, 132L, 133L, 134L,\
    \ 135L, 136L, 137L, 138L, 139L, 140L, 141L, 142L, 143L, 144L, 145L, 146L, 147L,\
    \ 148L, 149L, 150L, 151L, 152L, 153L, 154L, 155L, 156L, 157L, 158L, 159L, 160L,\
    \ 161L, 162L, 163L, 164L, 165L, 166L, 167L, 168L, 169L, 170L, 171L, 172L, 173L,\
    \ 174L, 175L, 176L, 177L, 178L, 179L, 180L, 181L, 182L, 183L, 184L, 185L, 186L,\
    \ 187L, 188L, 189L, 190L, 191L, 192L, 193L, 194", "{\n    long[] result = new\
    \ long[l.length];\n    long last = 0;\n    long cur = 0;\n    for (int i = 0;\
    \ i < l.length; i++)\n    {\n        if (l[i] != last)\n        {\n          \
    \  result[cur++] = l[i];\n            last = l[i];\n        }\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}", "{\n\tlong[] result = new long[l.length];\n\t\n\tfor\
    \ (int i = 0; i < l.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < l.length;\
    \ j++) \n\t\t{\n\t\t\tif (l[i] == l[j]) \n\t\t\t{\n\t\t\t\tlong tmp = l[i];\n\t\
    \t\t\tl[i] = l[j];\n\t\t\t\tl[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tArrays.sort(l);\n\
    \t\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tresult[i] = l[i];\n\t}\n\t\
    \n\treturn result;\n}", "{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        long current = l[i];\n        int\
    \ j = 0;\n        while(j < i)\n        {\n            if(l[j] == current)\n \
    \           {\n                j++;\n            }\n            else\n       \
    \     {\n                result[i] = current;\n                i = j;\n      \
    \          break;\n            }\n        }\n        if(j == i)\n        {\n \
    \           result[i] = current;\n        }\n    }\n    return result;\n}", "{\n\
    \tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\
    \tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n    long[] u = new\
    \ long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n        u[i]\
    \ = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| c |>\nThis doesn't answer the question. He wants to know if there is\
    \ a way to do this without using LINQ. He doesn't want to use LINQ to solve this\
    \ problem.\n<|/ c |>\n<| c |>\nI agree with you, however I believe that this is\
    \ the only way to solve this problem without using LINQ. LINQ is just a set of\
    \ extension methods that allow you to write less code but still achieve the same\
    \ result. He doesn't want to use LINQ to solve this problem, he wants to know\
    \ if there is a way to do this without using LINQ.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, however I believe that this is the only way to solve this problem\
    \ without using LINQ. LINQ is just a set of extension methods that allow you to\
    \ write less code but still achieve the same result. He doesn't want to use LINQ\
    \ to solve this problem, he wants to know if there is a way to do this without\
    \ using LINQ.\n<|/ c |>\n<| c |>\nI agree with you, however I believe that this\
    \ is the only way to solve this problem without using LINQ. LINQ is just a set\
    \ of extension methods that allow you to write less code but still achieve the\
    \ same result. He doesn't want to use LINQ to solve this problem, he wants to\
    \ know if there is a way to do this without using LINQ.\n<|/ c |>\n<| c |>\nI\
    \ agree with you, however I believe that this is the only way to solve this problem\
    \ without using LINQ. LINQ is just a set of extension methods that allow you to\
    \ write less code but still achieve the same result. He doesn't want to use LINQ\
    \ to solve this problem, he wants to know if there is a way to do this without\
    \ using LINQ.\n<|/ c |>\n<| a |>\n<code>\npublic static void Main(string[] args)\n\
    {\n    int[] arr = new int[] { 1, 2, 3, 4 };\n    int[] arr2 = new int[] { 1,\
    \ 2, 3, 4 };\n    int[] arr3 = new int[] { 1, 2, 3, 4 };\n    int[] arr4 = new\
    \ int[] { 1, 2, 3, 4 };", "{\n    long[] result = new long[l.length];\n    Arrays.sort(l);\n\
    \    for(int i = 0; i < l.length; i++)\n        result[i] = l[i];\n    return\
    \ result;\n}\n</code>\n<|/ a tags=arrays,sorting,c# |>\n<| c |>\nThis doesn't\
    \ answer the question, which is about sorting an array of numbers, not strings.\n\
    <|/ c |>\n<| c |>\nThis answer doesn't even compile.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't compile either.\n<|/ c |>\n<| c |>\nThis doesn't compile either.\n<|/\
    \ c |>\n<| c |>\nThis doesn't compile either.\n<|/ c |>\n<| a tags=arrays,sorting,c#\
    \ |>\n<code>\npublic static int[] SortArray(int[] array)\n{\n    Array.Sort(array);\n\
    \    return array;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't compile\
    \ either.\n<|/ c |>\n<| c |>\nThis doesn't compile either.\n<|/ c |>\n<| c |>\n\
    This doesn't compile either.\n<|/ c |>\n<| c |>\nThis doesn't compile either.\n\
    <|/ c |>\n<| c |>\nThis doesn't compile either.\n<|/ c |>\n<| a tags=arrays,sorting,c#\
    \ |>\n<code>", "{\n    long[] u = new long[l.length];\n    long uCount = 0;\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] != u[i - uCount])\
    \ \n        {\n            u[uCount] = l[i];\n            uCount++;\n        }\n\
    \    }\n    return u;\n}\n</code>\n<|/ a tags=arrays,c#,algorithm |>\n<| c |>\n\
    This doesn't work if the array contains duplicates. For example, `unique([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])` returns `[0, 2, 3, 4, 5, 9, 123]`.\n<|/\
    \ c |>\n<| c |>\nYes, I realized that after I posted my answer. I'll edit my answer\
    \ in a second.\n<|/ c |>\n<| c |>\nI added a version that doesn't require a pre-sorted\
    \ array.\n<|/ c |>\n<| c |>\nThis doesn't work if the array contains duplicates.\
    \ For example, `unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])` returns `[0, 2,\
    \ 3, 4, 5, 9, 123]`.\n<|/ c |>\n<| c |>\nI added a version that doesn't require\
    \ a pre-sorted array.\n<|/ c |>\n<| a tags=arrays,c#,algorithm |>\n<code>\npublic\
    \ static int[] unique(int[] arr) {\n    int[] result = new int[arr.Length];\n\
    \    Array.Sort(arr);\n    int index = 0;\n    for (int i = 0; i < arr.Length;\
    \ i++) {\n        if (arr[i] == arr[index]) {\n            index = i;\n      \
    \  }\n        result[index++] = arr[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nThis doesn't work if the array contains duplicates.\
    \ For example, `unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])` returns `[0, 2,\
    \ 3, 4, 5, 9, 123]`.\n<|/ c |>\n<| c |>\nI added a version that doesn't require\
    \ a pre-sorted array.\n<|/ c |>\n<| a |>\n<code>\npublic static int[] unique(int[]\
    \ arr) {\n    Array.Sort(arr);\n    List<int> list = new List<int>();\n    for\
    \ (int i = 0; i < arr.Length; i++) {\n        if (list.Contains(arr[i])) {\n \
    \           continue;\n        }\n        list.Add(arr[i]);\n    }\n    return\
    \ list.ToArray();\n}\n</code>\n<|/ a tags=arrays,c#,algorithm dscore=4 |>\n<|\
    \ c |>\nThis doesn't work if the array ", "{\n\tlong[] u = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\t\
    return u;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
