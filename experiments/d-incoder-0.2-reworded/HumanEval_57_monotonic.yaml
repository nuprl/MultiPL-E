name: HumanEval_57_monotonic
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
  \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n\
  \    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
  \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n"
tests: "unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
  \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n \
  \   assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
  \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L,\
  \ 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
  \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
completions: ["{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i] > max)\n\t\t\
    \tmax = l[i];\n\t}\n\treturn (min <= max);\n}", "{\n    long min = l[0];\n   \
    \ long max = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ < min)\n            min = l[i];\n        if(l[i] > max)\n            max = l[i];\n\
    \    }\n    return min < max;\n}", "{\n    long max = l[0];\n    long min = l[0];\n\
    \    bool result = true;\n    for (int i = 1; i < l.length; ++i) {\n        if\
    \ (l[i] > max) {\n            result = false;\n            break;\n        }\n\
    \        if (l[i] < min) {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}", "{\n\tlong min = l[0];\n\tlong max\
    \ = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t\
    {\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\
    \t}\n\t}\n\treturn (min <= max);\n}", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\
    \tbool isMonotonic = true;\n\tfor (int i = 1; i < l.length; ++i) {\n\t\tif (l[i]\
    \ < min) {\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\
    \t\t}\n\t\tif (l[i] < min) {\n\t\t\tisMonotonic = false;\n\t\t}\n\t\tif (l[i]\
    \ > max) {\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn isMonotonic;\n}",
  "{\n    long i = 0;\n    long j = 1;\n    long k = 0;\n    long n = l.length;\n\
    \    long m = n - 1;\n    long x = l[0];\n    long y = l[1];\n    long z = l[2];\n\
    \    long w = l[3];\n    long a = l[4];\n    long b = l[5];\n    long c = l[6];\n\
    \    long d = l[7];\n    long e = l[8];\n    long f = l[9];\n    long g = l[10];\n\
    \    long h = l[11];\n    long i = l[12];\n    long j = l[13];\n    long k = l[14];\n\
    \    long l = l[15];\n    long m = l[16];\n    long n = l[17];\n    long o = l[18];\n\
    \    long p = l[19];\n    long q = l[20];\n    long r = l[21];\n    long s = l[22];\n\
    \    long t = l[23];\n    long u = l[24];\n    long v = l[25];\n    long w = l[26];\n\
    \    long x = l[27];\n    long y = l[28];\n    long z = l[29];\n    long a = l[30];\n\
    \    long b = l[31];\n    long c = l[32];\n    long d = l[33];\n    long e = l[34];\n\
    \    long f = l[35];\n    long g = l[36];\n    long h = l[37];\n    long i = l[38];\n\
    \    long j = l[39];\n    long k = l[40];\n    long l = l[41];\n    long m = l[42];\n\
    \    long n = l[43];\n    long o = l[44];\n    long p = l[45];\n    long q = l[46];\n\
    \    long r = l[47];\n    long s = l[48];\n    long t = l[49];\n    long u = l[50];\n\
    \    long v = l[51];\n    long w = l[52];\n    long x = l[53];\n    long y = l[54];\n\
    \    long z = l[55];\n    long a = l[56];\n    long b = l[57];\n    long c = l[58];\n\
    \    long d = l[59];\n    long e = l[60];\n    long f = l[61];\n    long g = l[62];\n\
    \    ", "{\n\tlong max = 0;\n\tlong min = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t{\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t\tif (l[i] < min)\n\t\t\
    \tmin = l[i];\n\t}\n\treturn (min <= max);\n}", "{\n    int i = 0;\n    int j\
    \ = l.length - 1;\n    bool isIncreasing = true;\n    bool isDecreasing = true;\n\
    \    while (i < j) {\n        if (l[i] > l[j]) {\n            isIncreasing = false;\n\
    \        }\n        if (l[i] < l[j]) {\n            isDecreasing = false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return isIncreasing || isDecreasing;\n\
    }", "{\n    long prev = 0;\n    long curr = l[0];\n    bool result = true;\n \
    \   for(int i = 1; i < l.length; i++) \n    {\n        if(curr < l[i]) \n    \
    \    {\n            result = false;\n            break;\n        }\n        else\
    \ if(curr > l[i]) \n        {\n            result = true;\n            break;\n\
    \        }\n        prev = curr;\n        curr = l[i];\n    }\n    return result;\n\
    }", "{\n    int n = l.length;\n    if (n == 0) return true;\n    if (n == 1) return\
    \ false;\n    if (l[0] == l[1]) return true;\n    \n    long m = l[0];\n    long\
    \ l = l[1];\n    \n    for (int i = 2; i < n; i++) {\n        long x = l[i];\n\
    \        long y = l[i - 1];\n        \n        if (x < y) \n            return\
    \ false;\n        if (x > y) \n            return true;\n    }\n    \n    return\
    \ true;\n}", "{\n\tlong max = l[0];\n\tlong min = l[0];\n\tfor (int i = 1; i <\
    \ l.length; ++i)\n\t{\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\
    \tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn (max < min);\n\
    }", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool result = true;\n\tfor (int\
    \ i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\
    \t\t}\n\t\telse if (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\telse\n\t\
    \t{\n\t\t\tresult = false;\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long max\
    \ = l[0];\n    long min = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] < min)\n            min = l[i];\n        if(l[i] > max)\n   \
    \         max = l[i];\n    }\n    return max >= min;\n}", "{\n    long min = l[0];\n\
    \    long max = l[0];\n    for(int i = 1; i < l.length; ++i) {\n        if(l[i]\
    \ < min) min = l[i];\n        if(l[i] > max) max = l[i];\n    }\n    return min\
    \ <= max;\n}", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i\
    \ < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\
    \t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n\
    }", "{\n    long min = l[0];\n    long max = l[0];\n    bool isMonotonic = true;\n\
    \    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] < min)\n      \
    \  {\n            isMonotonic = false;\n            min = l[i];\n        }\n \
    \       else if(l[i] > max)\n        {\n            isMonotonic = false;\n   \
    \         max = l[i];\n        }\n    }\n    return isMonotonic;\n}\n</code>\n\
    <|/ a tags=c++,arrays,sorting |>\n<| c |>\nThis doesn't work if the array is all\
    \ zeroes. Try it with `monotonic([0L, 0L, 0L, 0L])`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it with `monotonic([0L, 0L, 0L, 0L])`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if all elements are zero. Try it with `monotonic([0L, 0L, 0L, 0L])`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `monotonic([0L, 0L, 0L, 0L])`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if all elements are zero. Try it with `monotonic([0L,\
    \ 0L, 0L, 0L])`.\n<|/ c |>\n<| a tags=c++,arrays,sorting |>\n<code>", "{\n\tlong\
    \ max = l[0];\n\tlong min = l[0];\n\tbool result = true;\n\tfor (int i = 1; i\
    \ < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tresult = false;\n\t\
    \t\tbreak;\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn result;\n}", "{\n\tlong max = l[0];\n\tlong min = l[0];\n\
    \tbool isMonotonic = true;\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif\
    \ (l[i] < min)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t\tbreak;\n\t\t}\n\t\tif\
    \ (l[i] > max)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\
    return isMonotonic;\n}", "{\n    long min = l[0];\n    long max = l[0];\n    bool\
    \ result = true;\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ < min)\n        {\n            min = l[i];\n        }\n        else if(l[i]\
    \ > max)\n        {\n            max = l[i];\n        }\n        else\n      \
    \  {\n            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long min = 0;\n    long max = l[0];\n    bool changed =\
    \ true;\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] < min)\n\
    \        {\n            min = l[i];\n        }\n        if(l[i] > max)\n     \
    \   {\n            max = l[i];\n        }\n        if(l[i] < min)\n        {\n\
    \            changed = false;\n        }\n    }\n    return changed;\n}", "{\n\
    \tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\
    \t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i] > max)\n\t\t\tmax =\
    \ l[i];\n\t}\n\treturn (min < max);\n}", "{\n\tlong min = l[0];\n\tlong max =\
    \ l[0];\n\tbool isMonotonic = true;\n\tfor (int i = 1; i < l.length; ++i)\n\t\
    {\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\
    \t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\tif (min < max)\n\t{\n\t\tisMonotonic =\
    \ false;\n\t}\n\treturn isMonotonic;\n}", "{\n\tlong min = l[0];\n\tlong max =\
    \ l[0];\n\tfor (int i = 1; i < l.length; ++i) {\n\t\tif (l[i] < min) min = l[i];\n\
    \t\tif (l[i] > max) max = l[i];\n\t}\n\treturn (min <= max);\n}", "{\n    long\
    \ prev = 0;\n    long curr = l[0];\n    long next = 1;\n    bool result = true;\n\
    \    for(int i = 1; i < l.length; i++){\n        prev = curr;\n        curr =\
    \ next;\n        next = l[i];\n        if(curr < prev){\n            result =\
    \ false;\n            break;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=algorithm,sorting |>\nI believe this can be done\
    \ in O(n) time complexity using binary search. \n<code>", "{\n\tlong min = l[0];\n\
    \tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] <\
    \ min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax\
    \ = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}", "{\n\tlong min = l[0];\n\t\
    long max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\
    \t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn (min <= max);\n}", "{\n    long prev = 0;\n    long curr\
    \ = l[0];\n    bool isIncreasing = true;\n    bool isDecreasing = true;\n    for(int\
    \ i = 1; i < l.length; ++i)\n    {\n        if(l[i] < curr)\n        {\n     \
    \       isDecreasing = false;\n        }\n        else if(l[i] > curr)\n     \
    \   {\n            isIncreasing = false;\n        }\n        else\n        {\n\
    \            isIncreasing &= (l[i] < prev);\n            isDecreasing &= (l[i]\
    \ > prev);\n        }\n        prev = curr;\n        curr = l[i];\n    }\n   \
    \ return isIncreasing || isDecreasing;\n}", "{\n\tlong max = l[0];\n\tlong min\
    \ = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t\
    \tmin = l[i];\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn (min <= max);\n\
    }", "{\n\tlong max = l[0];\n\tlong min = l[0];\n\tbool changed = true;\n\tfor\
    \ (int i = 1; i < l.length; ++i) {\n\t\tlong cur = l[i];\n\t\tif (cur < min) {\n\
    \t\t\tchanged = true;\n\t\t\tmin = cur;\n\t\t}\n\t\tif (cur > max) {\n\t\t\tchanged\
    \ = true;\n\t\t\tmax = cur;\n\t\t}\n\t}\n\treturn changed;\n}", "{\n    long min\
    \ = l[0];\n    long max = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] < min)\n            min = l[i];\n        if(l[i] > max)\n   \
    \         max = l[i];\n    }\n    return min <= max;\n}", "{\n\tlong min = l[0];\n\
    \tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i) {\n\t\tif (l[i] < min)\
    \ min = l[i];\n\t\tif (l[i] > max) max = l[i];\n\t}\n\treturn (min <= max);\n}",
  "{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\
    \t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\
    \t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}", "{\n    long\
    \ max = l[0];\n    long min = l[0];\n    for(int i = 1; i < l.length; i++) \n\
    \    {\n        if(l[i] > max) max = l[i];\n        if(l[i] < min) min = l[i];\n\
    \    }\n    return max >= min;\n}", "{\n    long min = l[0];\n    long max = l[0];\n\
    \    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] < min)\n      \
    \      min = l[i];\n        if(l[i] > max)\n            max = l[i];\n    }\n \
    \   return min <= max;\n}", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool\
    \ isMonotonic = true;\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i]\
    \ < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\t\
    max = l[i];\n\t\t}\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\
    \t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn\
    \ isMonotonic;\n}", "{\n    long min = l[0];\n    long max = l[0];\n    bool isMonotonic\
    \ = true;\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] < min)\n\
    \        {\n            min = l[i];\n        }\n        if(l[i] > max)\n     \
    \   {\n            max = l[i];\n        }\n        if(l[i] < min)\n        {\n\
    \            isMonotonic = false;\n        }\n    }\n    return isMonotonic;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction monotonic(arr)\
    \ {\n  var min = arr[0];\n  var max = arr[0];\n  arr.forEach(function(item) {\n\
    \    if (item < min) {\n      min = item;\n    }\n    if (item > max) {\n    \
    \  max = item;\n    }\n  });\n  return min <= max;\n}\n</code>\n<|/ a tags=algorithm,arrays,sorting\
    \ |>\n<| a dscore=1 |>\n<code>\nfunction monotonic(arr) {\n  var min = arr[0];\n\
    \  var max = arr[0];\n  arr.forEach(function(item) {\n    if (item < min) {\n\
    \      min = item;\n    }\n    if (item > max) {\n      max = item;\n    }\n \
    \ });\n  return min <= max;\n}\n</code>\n<|/ a tags=algorithm,arrays,sorting |>\n\
    <| a dscore=1 |>\n<code>\nfunction monotonic(arr) {\n    var min = arr[0];\n \
    \   var max = arr[0];\n    arr.forEach(function(item) {\n        if (item < min)\
    \ {\n            min = item;\n        }\n        if (item > max) {\n         \
    \   max = item;\n        }\n    });\n    return min <= max;\n}\n</code>\n<|/ a\
    \ tags=algorithm,arrays,sorting |>\n<| a tags=algorithm,arrays,sorting |>\n<code>\n\
    function monotonic(arr) {\n    var min = arr[0];\n    var max = arr[0];\n    arr.forEach(function(item)\
    \ {\n        if (item < min) {\n            min = item;\n        }\n        if\
    \ (item > max) {\n            max = item;\n        }\n    });\n    return min\
    \ <= max;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,arrays,sorting |>\n\
    <code>\nfunction monotonic(arr) {\n    var min = arr[0];\n    var max = arr[0];\n\
    \    arr.forEach(function(item) {\n        if (item < min) {\n            min\
    \ = item;\n        }\n        if (item > max) {\n            max = item;\n   \
    \     }\n    });\n    return min <= max;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i <\
    \ l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\
    \tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn min <= max;\n\
    }", "{\n    long prev = 0;\n    long curr = l[0];\n    bool result = true;\n \
    \   for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] < curr)\n      \
    \  {\n            result = false;\n            break;\n        }\n        else\
    \ if(l[i] > prev)\n        {\n            result = false;\n            break;\n\
    \        }\n        prev = curr;\n        curr = l[i];\n    }\n    return result;\n\
    }", "{\n    int i;\n    int j;\n    int k;\n    int m;\n    bool result;\n   \
    \ \n    for (i = 1; i < l.length; ++i)\n    {\n        if (l[i-1] > l[i])\n  \
    \      {\n            result = false;\n            break;\n        }\n    }\n\
    \    \n    if (result)\n    {\n        return true;\n    }\n    \n    for (i =\
    \ 1; i < l.length; ++i)\n    {\n        for (j = 1; j < l.length; ++j)\n     \
    \   {\n            if (l[j-1] > l[j])\n            {\n                result =\
    \ false;\n                break;\n            }\n        }\n    }\n    \n    if\
    \ (result)\n    {\n        return true;\n    }\n    \n    for (i = 1; i < l.length;\
    \ ++i)\n    {\n        for (j = 1; j < l.length; ++j)\n        {\n           \
    \ for (k = 1; k < l.length; ++k)\n            {\n                if (l[k-1] >\
    \ l[k])\n                {\n                    result = false;\n            \
    \        break;\n                }\n            }\n        }\n    }\n    \n  \
    \  if (result)\n    {\n        return true;\n    }\n    \n    for (i = 1; i <\
    \ l.length; ++i)\n    {\n        for (j = 1; j < l.length; ++j)\n        {\n \
    \           for (k = 1; k < l.length; ++k)\n            {\n                if\
    \ (l[k-1] > l[k])\n                {\n                    result = false;\n  \
    \                  break;\n                }\n            }\n        }\n    }\n\
    \    \n    if (result)\n    {\n        return true;\n    }\n    \n    for (i =\
    \ 1; i < l.length; ++i)\n    {\n        for (j = 1; j < l.length; ++j)\n     \
    \   {\n            for (k = 1; k < l.length; ++k)\n            {\n           \
    \     if (l[k-1] > l[k])\n                {\n                    result = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    \n    if (result)\n    {\n        return true;\n    }\n    \n    for\
    \ (i = 1; i < l.length; ++i)\n    {\n        for (j = 1; j < l.length; ++j)\n\
    \        {\n            for (k = 1; k < l.length; ++k)\n            {\n      \
    \          if (l[k-1] > l[k])\n                {\n                    result =\
    \ false;\n                    break;\n                }\n            }\n     \
    \   }\n    }\n    \n    if (result)\n    {\n        return true;\n    }\n    \n\
    \    for (i = 1; i < l.length; ++i)\n    {\n        for (j = 1; j < l.length;\
    \ ++j)\n        {\n            for (k = 1; k < l.length; ++k)\n            {\n\
    \                if (l[k-1] > l[k])\n                {\n                    result\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }\n    }\n    \n    if (result)\n    {\n        return true;\n    }\n  \
    \  \n    for (i = 1; i < l.length; ++i)\n    {\n        for (j = 1; j < l.length;\
    \ ++j)\n        {\n            for (k = 1; k < l.length; ++k)\n            {\n\
    \                if (l[k-1] > ", "{\n    long max = l[0];\n    long min = l[0];\n\
    \    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] > max)\n      \
    \      max = l[i];\n        if(l[i] < min)\n            min = l[i];\n    }\n \
    \   return max < min;\n}", "{\n    long max = l[0];\n    long min = l[0];\n  \
    \  for(int i = 1; i < l.length; i++) \n    {\n        if(l[i] > max) \n      \
    \  {\n            max = l[i];\n        }\n        if(l[i] < min) \n        {\n\
    \            min = l[i];\n        }\n    }\n    return max < min;\n}", "{\n  \
    \  long min = l[0];\n    long max = l[0];\n    bool result = true;\n    for (int\
    \ i = 1; i < l.length; ++i) {\n        if (l[i] < min) {\n            min = l[i];\n\
    \        } else if (l[i] > max) {\n            max = l[i];\n        } else {\n\
    \            result = false;\n        }\n    }\n    return result;\n}", "{\n \
    \   long max = l[0];\n    long min = l[0];\n    for(int i = 1; i < l.length; ++i)\n\
    \    {\n        if(l[i] > max)\n        {\n            max = l[i];\n        }\n\
    \        if(l[i] < min)\n        {\n            min = l[i];\n        }\n    }\n\
    \    return max >= min;\n}", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor\
    \ (int i = 1; i < l.length; ++i) {\n\t\tif (l[i] < min) min = l[i];\n\t\tif (l[i]\
    \ > max) max = l[i];\n\t}\n\treturn (min <= max);\n}", "{\n    long max = l[0];\n\
    \    long min = l[0];\n    bool result = true;\n    for(int i = 1; i < l.length;\
    \ i++)\n    {\n        if(l[i] < min)\n        {\n            min = l[i];\n  \
    \      }\n        if(l[i] > max)\n        {\n            max = l[i];\n       \
    \ }\n    }\n    if(max < min)\n    {\n        result = false;\n    }\n    return\
    \ result;\n}", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i\
    \ < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\
    \t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n\
    }", "{\n    long last = l[0];\n    long curr = l[0];\n    bool result = true;\n\
    \    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] < last)\n     \
    \   {\n            result = false;\n            break;\n        }\n        last\
    \ = curr;\n        curr = l[i];\n    }\n    return result;\n}", "{\n\tlong min\
    \ = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\t\
    if (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\
    \t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}", "{\n\tlong min = l[0];\n\
    \tlong max = l[0];\n\tbool isMonotonic = true;\n\tfor (int i = 1; i < l.length;\
    \ i++)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\tif (min < max)\n\t{\n\t\tisMonotonic\
    \ = false;\n\t}\n\treturn isMonotonic;\n}", "{\n    long min = l[0];\n    long\
    \ max = l[0];\n    bool result = true;\n    for(int i = 1; i < l.length; ++i)\
    \ {\n        if(l[i] < min) {\n            min = l[i];\n        }\n        if(l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    if(min > max) {\n \
    \       result = false;\n    }\n    return result;\n}", "{\n    long min = l[0];\n\
    \    long max = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ < min)\n            min = l[i];\n        if(l[i] > max)\n            max = l[i];\n\
    \    }\n    return min <= max;\n}", "{\n    long min = l[0];\n    long max = l[0];\n\
    \    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] < min)\n      \
    \      min = l[i];\n        if(l[i] > max)\n            max = l[i];\n    }\n \
    \   return min <= max;\n}", "{\n    long prev = 0;\n    long curr = l[0];\n  \
    \  bool result = true;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] < curr)\n        {\n            result = false;\n            break;\n\
    \        }\n        else if(l[i] > curr)\n        {\n            prev = curr;\n\
    \            curr = l[i];\n        }\n    }\n    if(!result)\n    {\n        prev\
    \ = curr;\n        curr = l[0];\n    }\n    return result && (prev < curr);\n}",
  "{\n    long min = l[0];\n    long max = l[0];\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < min)\n            min = l[i];\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return min <= max;\n}", "{\n\tlong\
    \ min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\
    \t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\telse if (l[i] > max)\n\
    \t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}", "{\n    long\
    \ min = l[0];\n    long max = l[0];\n    bool isMonotonic = true;\n    for (int\
    \ i = 1; i < l.length; ++i) {\n        if (l[i] < min) min = l[i];\n        if\
    \ (l[i] > max) max = l[i];\n    }\n    if (isMonotonic) {\n        if (min < max)\
    \ {\n            isMonotonic = false;\n        }\n    }\n    return isMonotonic;\n\
    }", "{\n    long min = l[0];\n    long max = l[0];\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < min)\n        {\n            min = l[i];\n  \
    \      }\n        else if(l[i] > max)\n        {\n            max = l[i];\n  \
    \      }\n    }\n    return min < max;\n}", "{\n    long min = l[0];\n    long\
    \ max = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] <\
    \ min)\n            min = l[i];\n        if(l[i] > max)\n            max = l[i];\n\
    \    }\n    return min < max;\n}", "{\n    int n = l.length;\n    if (n < 2) return\
    \ true;\n    long m = l[0], l0 = l[1], l1 = l[2], l2 = l[3];\n    if (l0 > l1)\
    \ return false;\n    if (l1 > l2) return false;\n    if (l2 > l3) return true;\n\
    \    if (l0 > l3) return true;\n    if (l1 > l2) return false;\n    if (l2 > l1)\
    \ return false;\n    if (l0 > l1) return true;\n    if (l2 > l3) return true;\n\
    \    if (l1 > l3) return true;\n    return false;\n}\n/*\nReturn true is array\
    \ elements are monotonically increasing or decreasing.\n    >>> monotonic([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n    \n*/", "{\n\tlong max =\
    \ l[0];\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif\
    \ (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\
    \t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}", "{\n    long min = l[0];\n\
    \    long max = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ < min)\n            min = l[i];\n        if(l[i] > max)\n            max = l[i];\n\
    \    }\n    return min <= max;\n}", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\
    \tbool isMonotonic = true;\n\tfor(int i = 1; i < l.length; i++)\n\t{\n\t\tif(l[i]\
    \ < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\telse if(l[i] > max)\n\t\t{\n\t\t\
    \tmax = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\
    \treturn isMonotonic;\n}", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int\
    \ i = 1; i < l.length; ++i) {\n\t\tif (l[i] < min) min = l[i];\n\t\tif (l[i] >\
    \ max) max = l[i];\n\t}\n\treturn (min <= max);\n}", "{\n    long min = l[0];\n\
    \    long max = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ < min)\n            min = l[i];\n        if(l[i] > max)\n            max = l[i];\n\
    \    }\n    return min <= max;\n}", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\
    \tbool isMonotonic = true;\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif\
    \ (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\
    \t\tmax = l[i];\n\t\t}\n\t}\n\tif (min > max)\n\t{\n\t\tisMonotonic = false;\n\
    \t}\n\treturn isMonotonic;\n}", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\t\
    for(int i = 1; i < l.length; ++i)\n\t{\n\t\tif(l[i] < min)\n\t\t{\n\t\t\tmin =\
    \ l[i];\n\t\t}\n\t\telse if(l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\
    \treturn (min <= max);\n}", "{\n\tlong max = l[0];\n\tlong min = l[0];\n\tfor\
    \ (int i = 1; i < l.length; ++i) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\
    \t\t}\n\t\tif (l[i] < min) {\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn (max > min);\n\
    }", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}", "{\n\
    \tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\
    \t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i] > max)\n\t\t\tmax =\
    \ l[i];\n\t}\n\treturn (min <= max);\n}", "{\n\tlong min = l[0];\n\tlong max =\
    \ l[0];\n\tbool isMonotonic = true;\n\tfor (int i = 1; i < l.length; ++i)\n\t\
    {\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\telse if (l[i] > max)\n\
    \t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tisMonotonic = false;\n\
    \t\t}\n\t}\n\treturn isMonotonic;\n}", "{\n\tlong minValue = l[0];\n\tlong maxValue\
    \ = l[0];\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\tfor (int\
    \ i = 1; i < l.length; ++i) {\n\t\tif (l[i] < minValue) {\n\t\t\tminValue = l[i];\n\
    \t\t}\n\t\tif (l[i] > maxValue) {\n\t\t\tmaxValue = l[i];\n\t\t}\n\t\tif (l[i]\
    \ < minValue || l[i] > maxValue) {\n\t\t\tisIncreasing = false;\n\t\t\tisDecreasing\
    \ = false;\n\t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}", "{\n\tlong\
    \ min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\
    \t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t\
    {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}", "{\n    long max\
    \ = l[0];\n    long min = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max)\n            max = l[i];\n        if(l[i] < min)\n   \
    \         min = l[i];\n    }\n    return max < min;\n}", "{\n    long max = l[0];\n\
    \    long min = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ < min)\n            min = l[i];\n        if(l[i] > max)\n            max = l[i];\n\
    \    }\n    return max < min;\n}", "{\n    long min = l[0];\n    long max = l[0];\n\
    \    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] < min)\n      \
    \      min = l[i];\n        if(l[i] > max)\n            max = l[i];\n    }\n \
    \   return min <= max;\n}", "{\n    long max = l[0];\n    long min = l[0];\n \
    \   bool isMonotonic = true;\n    for(int i = 1; i < l.length; ++i) {\n      \
    \  if(l[i] < min) {\n            isMonotonic = false;\n            break;\n  \
    \      }\n        if(l[i] > max) {\n            isMonotonic = false;\n       \
    \     break;\n        }\n    }\n    return isMonotonic;\n}", "{\n    long min\
    \ = l[0];\n    long max = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] < min)\n            min = l[i];\n        if(l[i] > max)\n   \
    \         max = l[i];\n    }\n    return min < max;\n}", "{\n    long max = l[0];\n\
    \    long min = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ < min)\n            min = l[i];\n        if(l[i] > max)\n            max = l[i];\n\
    \    }\n    return max < min;\n}", "{\n    long min = l[0];\n    long max = l[0];\n\
    \    for(int i = 1; i < l.length; ++i) {\n        if(l[i] < min) min = l[i];\n\
    \        if(l[i] > max) max = l[i];\n    }\n    return min < max;\n}", "{\n  \
    \  long min = l[0];\n    long max = l[0];\n    for(int i = 1; i < l.length; ++i)\
    \ {\n        if(l[i] < min) min = l[i];\n        if(l[i] > max) max = l[i];\n\
    \    }\n    return min <= max;\n}", "{\n\tlong max = l[0];\n\tlong min = l[0];\n\
    \tfor(int i = 1; i < l.length; i++) \n\t{\n\t\tif(l[i] < min) min = l[i];\n\t\t\
    if(l[i] > max) max = l[i];\n\t}\n\treturn (min < max);\n}", "{\n    long maxVal\
    \ = l[0];\n    long minVal = l[0];\n    for(int i = 1; i < l.length; ++i)\n  \
    \  {\n        if(l[i] > maxVal)\n        {\n            maxVal = l[i];\n     \
    \   }\n        if(l[i] < minVal)\n        {\n            minVal = l[i];\n    \
    \    }\n    }\n    return maxVal < minVal;\n}", "{\n    long min = l[0];\n   \
    \ long max = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ < min)\n            min = l[i];\n        if(l[i] > max)\n            max = l[i];\n\
    \    }\n    return min <= max;\n}", "{\n\tlong max = l[0];\n\tlong min = l[0];\n\
    \tfor(int i = 1; i < l.length; ++i)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\
    \t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn (max < min);\n}", "{\n\t\
    long min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\
    {\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\
    \t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}", "{\n\tlong min\
    \ = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\tfor (int i = 1; i\
    \ < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\t\tif (min > max)\n\t\t\tisMonotonic = false;\n\t\
    }\n\treturn isMonotonic;\n}", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor\
    \ (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin =\
    \ l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\t\
    return (min <= max);\n}", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int\
    \ i = 1; i < l.length; ++i) {\n\t\tlong cur = l[i];\n\t\tif (cur < min)\n\t\t\t\
    min = cur;\n\t\tif (cur > max)\n\t\t\tmax = cur;\n\t}\n\treturn (min <= max);\n\
    }", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\t\
    for (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tisMonotonic\
    \ = false;\n\t\t\tmin = l[i];\n\t\t}\n\t\telse if (l[i] > max)\n\t\t{\n\t\t\t\
    isMonotonic = false;\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn isMonotonic;\n}",
  "{\n    int n = l.length;\n    if (n < 2) return true;\n    int i = 0;\n    int\
    \ j = 1;\n    while (i < n && j < n) {\n        if (l[i] < l[j]) {\n         \
    \   i++;\n        } else if (l[i] > l[j]) {\n            j++;\n        } else\
    \ {\n            return false;\n        }\n    }\n    return i == n;\n}", "{\n\
    \    long min = l[0];\n    long max = l[0];\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < min)\n            min = l[i];\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return min <= max;\n}", "{\n\tlong\
    \ min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\
    \t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t\
    {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}", "{\n    long prev\
    \ = 0;\n    long curr = l[0];\n    bool isIncreasing = true;\n    bool isDecreasing\
    \ = true;\n    for (int i = 1; i < l.length; ++i) {\n        long next = l[i];\n\
    \        if (curr > next) {\n            isDecreasing = false;\n        } else\
    \ if (curr < next) {\n            isIncreasing = false;\n        } else {\n  \
    \          isIncreasing = isDecreasing = true;\n        }\n        if (isIncreasing\
    \ && isDecreasing) {\n            return false;\n        }\n        prev = curr;\n\
    \        curr = next;\n    }\n    return isIncreasing || isDecreasing;\n}\n</code>\n\
    <|/ a tags=algorithm,arrays,sorting,c# |>\n<| c |>\nThis doesn't work if you have\
    \ negative numbers in the array.\n<|/ c |>\n<| c |>\n: It does work if you add\
    \ `if (curr < next) isIncreasing = isDecreasing = false;`\n<|/ c |>\n<| c |>\n\
    : I added a version that works with negative numbers. It's not as elegant as yours,\
    \ but it works.\n<|/ c |>\n<| c |>\n: I added a version that works with negative\
    \ numbers. It's not as elegant as yours, but it works.\n<|/ c |>\n<| c |>\n: I\
    \ added a version that works with negative numbers. It's not as elegant as yours,\
    \ but it works.\n<|/ c |>\n<| a |>\n<code>", "{\n    long min = l[0];\n    long\
    \ max = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] <\
    \ min)\n            min = l[i];\n        if(l[i] > max)\n            max = l[i];\n\
    \    }\n    return min <= max;\n}", "{\n\tlong max = l[0];\n\tlong min = l[0];\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\
    \t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn (min <= max);\n}", "{\n\t\
    long min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\
    {\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\
    \t}\n\treturn (min <= max);\n}", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\t\
    for (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\
    \t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn (min <= max);\n}", "{\n\t\
    long max = l[0];\n\tlong min = l[0];\n\tbool result = true;\n\tfor (int i = 1;\
    \ i < l.length; ++i) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t\t\
    if (l[i] < min) {\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn result;\n}", "{\n\t\
    long min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\
    {\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\
    \t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}", "{\n    long\
    \ first = l[0];\n    long last = l[l-1];\n    long mid;\n    bool isIncreasing\
    \ = true;\n    bool isDecreasing = true;\n    \n    for (int i = 1; i < l.length;\
    \ ++i)\n    {\n        mid = l[i];\n        if (mid > last)\n        {\n     \
    \       isDecreasing = false;\n        }\n        else if (mid < first)\n    \
    \    {\n            isIncreasing = false;\n        }\n        else if (mid ==\
    \ last && mid != first)\n        {\n            isDecreasing = false;\n      \
    \  }\n        else if (mid == first && mid != last)\n        {\n            isIncreasing\
    \ = false;\n        }\n        last = mid;\n    }\n    return isIncreasing ||\
    \ isDecreasing;\n}", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i\
    \ = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\
    \t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min\
    \ <= max);\n}", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool result = true;\n\
    \tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\telse if (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\
    \t\telse\n\t\t{\n\t\t\tresult = false;\n\t\t}\n\t}\n\treturn result;\n}", "{\n\
    \tlong min = l[0];\n\tlong max = l[0];\n\tbool first = true;\n\tfor (long i :\
    \ l)\n\t{\n\t\tif (first && i == min)\n\t\t\tcontinue;\n\t\tif (first && i ==\
    \ max)\n\t\t\treturn false;\n\t\tif (i > max)\n\t\t\treturn false;\n\t\tif (i\
    \ < min)\n\t\t\treturn false;\n\t\tfirst = false;\n\t\tmax = i;\n\t}\n\treturn\
    \ true;\n}", "{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i <\
    \ l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i] >\
    \ max)\n\t\t\tmax = l[i];\n\t}\n\treturn (min <= max);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
