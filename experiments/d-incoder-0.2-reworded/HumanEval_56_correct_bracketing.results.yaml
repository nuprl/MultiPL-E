language: d
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        if(brackets[i] == '>')\n        {\n            if(brackets[i + 1] !=\
    \ '<')\n            {\n                result = false;\n            }\n      \
    \      i++;\n        }\n        else if(brackets[i] == '<')\n        {\n     \
    \       if(brackets[i + 1] != '>')\n            {\n                result = false;\n\
    \            }\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7v6srgxd.d(20): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7v6srgxd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n        case '<':\n            if(brackets[j] == '>') {\n\
    \                i++;\n                j++;\n            } else {\n          \
    \      result = false;\n                break;\n            }\n            break;\n\
    \        case '>':\n            if(brackets[j] == '<') {\n                i++;\n\
    \                j++;\n            } else {\n                result = false;\n\
    \                break;\n            }\n            break;\n        default:\n\
    \            result = false;\n            break;\n        }\n        i++;\n  \
    \      j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt7w6l3z8.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt7w6l3z8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiytj2xi_.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiytj2xi_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n        case '<':\n            if(brackets[j] == '>') {\n\
    \                j++;\n            } else {\n                result = false;\n\
    \                break;\n            }\n            break;\n        case '>':\n\
    \            if(brackets[j] == '<') {\n                j++;\n            } else\
    \ {\n                result = false;\n                break;\n            }\n\
    \            break;\n        default:\n            if(brackets[j] == c) {\n  \
    \              j++;\n            } else {\n                result = false;\n \
    \               break;\n            }\n            break;\n        }\n       \
    \ i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxet6p48u.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxet6p48u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        if(brackets[i] == '>')\n        {\n            if(!(brackets[i + 1] ==\
    \ '<'))\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n        else if(brackets[i] == '<')\n        {\n  \
    \          if(!(brackets[i + 1] == '>'))\n            {\n                result\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr7wfi32v.d(20): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr7wfi32v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfv9ufy3b.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfv9ufy3b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphri7wosd.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphri7wosd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg6dhuqz7.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg6dhuqz7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp37539s3f.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp37539s3f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n   \
    \ {\n        char c = brackets[i];\n        if(c == '>')\n        {\n        \
    \    if(brackets[i+1] == '>')\n            {\n                brackets[i] = '<';\n\
    \                ++i;\n            }\n            else\n            {\n      \
    \          brackets[i] = '<';\n            }\n        }\n        else if(c ==\
    \ '<')\n        {\n            if(brackets[i+1] == '<')\n            {\n     \
    \           brackets[i] = '>';\n                ++i;\n            }\n        \
    \    else\n            {\n                brackets[i] = '>';\n            }\n\
    \        }\n    }\n    return brackets.length() == 0;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwcg3nu9g.d(19): Error: no property `length` for type `string`\n/tmp/tmpwcg3nu9g.d(27):
    Error: cannot modify `immutable` expression `brackets[i]`\n/tmp/tmpwcg3nu9g.d(32):
    Error: cannot modify `immutable` expression `brackets[i]`\n/tmp/tmpwcg3nu9g.d(39):
    Error: cannot modify `immutable` expression `brackets[i]`\n/tmp/tmpwcg3nu9g.d(44):
    Error: cannot modify `immutable` expression `brackets[i]`\n/tmp/tmpwcg3nu9g.d(48):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpwcg3nu9g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmputa1_n0d.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmputa1_n0d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdk45qym2.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdk45qym2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        if(c == '<') {\n            if(brackets[j] == '>')\n                j++;\n\
    \            else\n                j++;\n        }\n        else if(c == '>')\
    \ {\n            if(brackets[j] == '<')\n                j++;\n            else\n\
    \                j++;\n        }\n        else if(c == '[') {\n            if(brackets[j]\
    \ == ']')\n                j++;\n            else\n                j++;\n    \
    \    }\n        else if(c == ']') {\n            if(brackets[j] == '[')\n    \
    \            j++;\n            else\n                j++;\n        }\n       \
    \ else if(c == '(') {\n            if(brackets[j] == ')')\n                j++;\n\
    \            else\n                j++;\n        }\n        else if(c == ')')\
    \ {\n            if(brackets[j] == '(')\n                j++;\n            else\n\
    \                j++;\n        }\n        else {\n            result = false;\n\
    \            break;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptpkha7lw.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptpkha7lw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        switch(brackets[i]) {\n\
    \            case '<':\n                j++;\n                break;\n       \
    \     case '>':\n                j--;\n                break;\n            default:\n\
    \                i++;\n                break;\n        }\n        if(j < 0) {\n\
    \            result = false;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpui76vn3e.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpui76vn3e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    auto brackets_array = brackets.toCharArray();\n\tauto brackets_array_size = brackets.size();\n\
    \t\n\tfor (int i = 0; i < brackets_array_size; ++i)\n\t{\n\t\tauto opening = brackets_array[i];\n\
    \t\tauto closing = brackets_array[i+1];\n\t\t\n\t\tif (opening != closing)\n\t\
    \t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n   \
    \ alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplhna44zb.d(19): Error: no property `toCharArray` for type `string`\n/tmp/tmplhna44zb.d(20):
    Error: no property `size` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmplhna44zb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(!brackets.at(i).isalnum())\n\
    \        {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzt03vl8y.d(19): Error: no property `length` for type `string`\n/tmp/tmpzt03vl8y.d(24):
    Error: no property `at` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzt03vl8y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    bool result = true;\n    \n\
    \    while(opening_brackets_index < brackets_size)\n    {\n        char opening_bracket\
    \ = brackets[opening_brackets_index];\n        char closing_bracket = brackets[closing_brackets_index];\n\
    \        \n        if(opening_bracket == '<')\n        {\n            opening_brackets_size++;\n\
    \        }\n        else if(opening_bracket == '>')\n        {\n            opening_brackets_size--;\n\
    \        }\n        \n        if(closing_bracket == '<')\n        {\n        \
    \    closing_brackets_size++;\n        }\n        else if(closing_bracket == '>')\n\
    \        {\n            closing_brackets_size--;\n        }\n        \n      \
    \  if(opening_brackets_size == 0 && closing_brackets_size == 0)\n        {\n \
    \           result = false;\n            break;\n        }\n        \n       \
    \ if(opening_brackets_size != closing_brackets_size)\n        {\n            result\
    \ = false;\n            break;\n        }\n        \n        opening_brackets_index++;\n\
    \        closing_brackets_index++;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5xnz2gi_.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5xnz2gi_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n        case '<':\n            if(brackets[j] == '>') {\n\
    \                i++;\n                j++;\n            } else {\n          \
    \      result = false;\n            }\n            break;\n        case '>':\n\
    \            if(brackets[j] == '<') {\n                i++;\n                j++;\n\
    \            } else {\n                result = false;\n            }\n      \
    \      break;\n        default:\n            i++;\n            j++;\n        \
    \    break;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| c |>\nThis fails for `n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnc2d8z6t.d(50): Error: declaration expected, not `<`\n/tmp/tmpnc2d8z6t.d(53):
    Error: unterminated string constant starting at /tmp/tmpnc2d8z6t.d(53)\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnc2d8z6t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool ret = true;\n   \
    \ for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '<')\n        {\n\
    \            if(brackets[i+1] == '>')\n            {\n                ret &= true;\n\
    \                i += 2;\n            }\n            else\n            {\n   \
    \             ret &= false;\n            }\n        }\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6aoe4be1.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6aoe4be1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    auto brackets_iter = brackets.begin();\n\tauto brackets_end = brackets.end();\n\
    \twhile (brackets_iter != brackets_end)\n\t{\n\t\tauto opening_bracket = *brackets_iter++;\n\
    \t\tauto closing_bracket = *brackets_iter++;\n\t\tif (opening_bracket != closing_bracket)\n\
    \t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplwqmhb00.d(19): Error: no property `begin` for type `string`\n/tmp/tmplwqmhb00.d(20):
    Error: no property `end` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmplwqmhb00.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    for(i = 0; i < brackets_size;\
    \ ++i)\n    {\n        char c = brackets[i];\n        if(c == '<')\n        {\n\
    \            ++opening_brackets;\n        }\n        else if(c == '>')\n     \
    \   {\n            ++closing_brackets;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpttakgbcd.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpttakgbcd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n            case '<':\n                if(i+1 < len && brackets[i+1]\
    \ == '>') {\n                    i += 2;\n                } else {\n         \
    \           result = false;\n                    break;\n                }\n \
    \               break;\n            case '>':\n                if(i+1 < len &&\
    \ brackets[i+1] == '<') {\n                    i += 2;\n                } else\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n                break;\n            default:\n                result\
    \ = false;\n                break;\n        }\n        i += 1;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnrd7rbds.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnrd7rbds.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        if(c == '<') {\n            if(brackets[j] == '>') {\n              \
    \  i++;\n                j++;\n            } else {\n                result =\
    \ false;\n                break;\n            }\n        } else if(c == '>') {\n\
    \            if(brackets[j] == '<') {\n                i++;\n                j++;\n\
    \            } else {\n                result = false;\n                break;\n\
    \            }\n        } else {\n            i++;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8sfktsx5.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sfktsx5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '>')\n        {\n            if(brackets[i+1] != '<')\n            {\n  \
    \              result = false;\n                break;\n            }\n      \
    \      ++i;\n        }\n        else if(c == '<')\n        {\n            if(brackets[i-1]\
    \ != '>')\n            {\n                result = false;\n                break;\n\
    \            }\n            --i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwl6pswyj.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwl6pswyj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != '<')\n            return false;\n    }\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] != '>')\n            return false;\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpped2tgd4.d(19): Error: no property `length` for type `string`\n/tmp/tmpped2tgd4.d(24):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpped2tgd4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t opening_brackets_size = 0;\n   \
    \ size_t closing_brackets_size = 0;\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  size_t k = 0;\n    size_t l = 0;\n    size_t m = 0;\n    size_t n = 0;\n  \
    \  size_t o = 0;\n    size_t p = 0;\n    size_t q = 0;\n    size_t r = 0;\n  \
    \  size_t s = 0;\n    size_t t = 0;\n    size_t u = 0;\n    size_t v = 0;\n  \
    \  size_t w = 0;\n    size_t x = 0;\n    size_t y = 0;\n    size_t z = 0;\n  \
    \  size_t brackets_size_b = brackets.length();\n    size_t brackets_size_a = brackets.length();\n\
    \    bool result = true;\n    bool result_b = true;\n    bool result_a = true;\n\
    \    bool result_c = true;\n    bool result_d = true;\n    bool result_e = true;\n\
    \    bool result_f = true;\n    bool result_g = true;\n    bool result_h = true;\n\
    \    bool result_i = true;\n    bool result_j = true;\n    bool result_k = true;\n\
    \    bool result_l = true;\n    bool result_m = true;\n    bool result_n = true;\n\
    \    bool result_o = true;\n    bool result_p = true;\n    bool result_q = true;\n\
    \    bool result_r = true;\n    bool result_s = true;\n    bool result_t = true;\n\
    \    bool result_u = true;\n    bool result_v = true;\n    bool result_w = true;\n\
    \    bool result_x = true;\n    bool result_y = true;\n    bool result_z = true;\n\
    \    bool result_brackets = true;\n    bool result_brackets_b = true;\n    bool\
    \ result_brackets_a = true;\n    bool result_brackets_c = true;\n    bool result_brackets_d\
    \ = true;\n    bool result_brackets_e = true;\n    bool result_brackets_f = true;\n\
    \    bool result_brackets_g = true;\n    bool result_brackets_h = true;\n    bool\
    \ result_brackets_i = true;\n    bool result_brackets_j = true;\n    bool result_brackets_k\
    \ = true;\n    bool result_brackets_l = true;\n    bool result_brackets_m = true;\n\
    \    bool result_brackets_n = true;\n    bool result_brackets_o = true;\n    bool\
    \ result_brackets_p = true;\n    bool result_brackets_q = true;\n    bool result_brackets_r\
    \ = true;\n    bool result_brackets_s = true;\n    bool result_brackets_t = true;\n\
    \    bool result_brackets_u = true;\n    bool result_brackets_v = true;\n    bool\
    \ result_brackets_w = true;\n    bool result_brackets_x = true;\n\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8b86b68r.d(97): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8b86b68r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(!brackets.at(i).isdigit())\n\
    \        {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_agl1h0e.d(19): Error: no property `length` for type `string`\n/tmp/tmp_agl1h0e.d(24):
    Error: no property `at` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_agl1h0e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool ret = true;\n   \
    \ for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '>')\n        {\n\
    \            if(brackets[i+1] != '<')\n            {\n                ret = false;\n\
    \                break;\n            }\n        }\n        else if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] != '>')\n            {\n  \
    \              ret = false;\n                break;\n            }\n        }\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyv_3ig_y.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyv_3ig_y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while (i < len) {\n        if (brackets[i] == '<')\
    \ {\n            while (j < len && brackets[j] != '<') {\n                j++;\n\
    \            }\n            if (j == len) {\n                result = false;\n\
    \                break;\n            }\n            while (j < len && brackets[j]\
    \ == '>') {\n                j++;\n            }\n            if (j == len) {\n\
    \                result = false;\n                break;\n            }\n    \
    \        i++;\n        }\n        else if (brackets[i] == '>') {\n           \
    \ while (j < len && brackets[j] != '>') {\n                j++;\n            }\n\
    \            if (j == len) {\n                result = false;\n              \
    \  break;\n            }\n            while (j < len && brackets[j] == '<') {\n\
    \                j++;\n            }\n            if (j == len) {\n          \
    \      result = false;\n                break;\n            }\n            i++;\n\
    \        }\n        else {\n            i++;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nI like this solution,\
    \ although it would be more efficient to just check each character in the string\
    \ rather than the entire string. Also, you can use a `std::map<char, char>` to\
    \ avoid the nested loops.\n<|/ c |>\n<| c |>\n: Yes, I agree. My solution was\
    \ more of a proof of concept, since I didn't want to write out all the code for\
    \ the OP.\n<|/ c |>\n<| c |>\n: I added a solution using maps. I hope it helps.\n\
    <|/ c |>\n<| c |>\n: I added a solution using maps. I hope it helps.\n<|/ c |>\n\
    <| c |>\n: I added a solution using maps. I hope it helps.\n<|/ c |>\n<| a |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwmt71j6s.d(64): Error: declaration expected, not `<`\n/tmp/tmpwmt71j6s.d(70):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpwmt71j6s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n            case '<':\n                if(brackets[j] ==\
    \ '>') {\n                    j++;\n                } else {\n               \
    \     result = false;\n                    break;\n                }\n       \
    \         break;\n            case '>':\n                if(brackets[j] == '<')\
    \ {\n                    j++;\n                } else {\n                    result\
    \ = false;\n                    break;\n                }\n                break;\n\
    \            default:\n                result = false;\n                break;\n\
    \        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjnxt7d9p.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjnxt7d9p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i + 1] == '>')\n            {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv8_w9koh.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8_w9koh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '>')\n        {\n            if(i+1 < len && brackets[i+1] == '>')\n    \
    \        {\n                result = false;\n                break;\n        \
    \    }\n        }\n        else if(c == '<')\n        {\n            if(i+1 <\
    \ len && brackets[i+1] == '<')\n            {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsuvyigdg.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsuvyigdg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i + 1] == '>')\n            {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv8_w9koh.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8_w9koh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '>')\n        {\n            if(i+1 < len && brackets[i+1] == '>')\n    \
    \        {\n                ++i;\n            }\n            else\n          \
    \  {\n                result = false;\n                break;\n            }\n\
    \        }\n        else if(c == '<')\n        {\n            if(i+1 < len &&\
    \ brackets[i+1] == '<')\n            {\n                ++i;\n            }\n\
    \            else\n            {\n                result = false;\n          \
    \      break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0_35myko.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0_35myko.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len && j < len) {\n        char c = brackets[i];\n\
    \        char d = brackets[j];\n        if(c == '<') {\n            if(brackets[j+1]\
    \ != '=') {\n                result = false;\n                break;\n       \
    \     }\n            i += 2;\n            j += 2;\n        } else if(c != '>')\
    \ {\n            result = false;\n            break;\n        }\n        i +=\
    \ 1;\n        j += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp89p4mv06.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp89p4mv06.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    bool result = true;\n  \
    \  for(i = 0; i < brackets_size; ++i)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            ++opening_brackets;\n        }\n        else if(brackets[i]\
    \ == '>')\n        {\n            ++closing_brackets;\n        }\n        else\n\
    \        {\n            result = false;\n        }\n        if(opening_brackets\
    \ != closing_brackets)\n        {\n            result = false;\n        }\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c\
    \ |>\nI believe this fails for `<><>` - it returns `true` but should return `false`.\n\
    <|/ c |>\n<| c |>\n: Yes, you are right. I fixed the code accordingly.\n<|/ c\
    \ |>\n<| c |>\nThis fails for `<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplbr9_3im.d(45): Error: declaration expected, not `<`\n/tmp/tmplbr9_3im.d(54):
    Error: unterminated string constant starting at /tmp/tmplbr9_3im.d(54)\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplbr9_3im.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c++,algorithm,string |>\n<code>\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe_eo48ro.d(31): Error: declaration expected, not `<`\n/tmp/tmpe_eo48ro.d(39):
    Error: declaration expected, not `assert`\n/tmp/tmpe_eo48ro.d(40): Error: declaration
    expected, not `assert`\n/tmp/tmpe_eo48ro.d(41): Error: declaration expected, not
    `assert`\n/tmp/tmpe_eo48ro.d(42): Error: declaration expected, not `assert`\n/tmp/tmpe_eo48ro.d(43):
    Error: declaration expected, not `assert`\n/tmp/tmpe_eo48ro.d(44): Error: declaration
    expected, not `assert`\n/tmp/tmpe_eo48ro.d(45): Error: declaration expected, not
    `assert`\n/tmp/tmpe_eo48ro.d(46): Error: declaration expected, not `assert`\n/tmp/tmpe_eo48ro.d(47):
    Error: declaration expected, not `assert`\n/tmp/tmpe_eo48ro.d(48): Error: declaration
    expected, not `assert`\n/tmp/tmpe_eo48ro.d(49): Error: declaration expected, not
    `assert`\n/tmp/tmpe_eo48ro.d(50): Error: declaration expected, not `assert`\n/tmp/tmpe_eo48ro.d(51):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe_eo48ro.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    for(int i = 0; i < brackets.length(); i++) {\n  \
    \      char c = brackets[i];\n        if(c == '<') {\n            if(brackets[i+1]\
    \ == '>') {\n                result = false;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdjmcctfb.d(20): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdjmcctfb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while (i < len) {\n        char c = brackets[i];\n\
    \        if (c != '<') {\n            result = false;\n            break;\n  \
    \      }\n        i++;\n        while (i < len && brackets[i] != '<') {\n    \
    \        i++;\n        }\n        if (i == len) {\n            result = false;\n\
    \            break;\n        }\n        i++;\n        while (i < len && brackets[i]\
    \ != '>') {\n            i++;\n        }\n        if (i == len) {\n          \
    \  result = false;\n            break;\n        }\n        j++;\n        while\
    \ (j < len && brackets[j] != '>') {\n            j++;\n        }\n        if (j\
    \ == len) {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpij2ucd4z.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpij2ucd4z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i + 1] == '>')\n            {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv8_w9koh.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8_w9koh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    size_t brackets_size = brackets.size();\n\tsize_t i = 0;\n\tsize_t j = 0;\n\t\
    bool result = true;\n\twhile (i < brackets_size)\n\t{\n\t\tchar c = brackets[i];\n\
    \t\tif (c == '>')\n\t\t{\n\t\t\tif (j == brackets_size)\n\t\t\t{\n\t\t\t\tresult\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tchar next_c = brackets[j];\n\t\t\t\
    if (next_c == '<')\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\
    \tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if (c == '<')\n\t\t\
    {\n\t\t\tif (j == brackets_size)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\tchar next_c = brackets[j];\n\t\t\tif (next_c == '>')\n\t\t\t{\n\
    \t\t\t\tj++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\t\
    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxzhlbs62.d(19): Error: no property `size` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxzhlbs62.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while (i < len) {\n        char c = brackets[i];\n\
    \        switch (c) {\n        case '<':\n            i++;\n            break;\n\
    \        case '>':\n            i++;\n            break;\n        default:\n \
    \           result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nThis fails\
    \ for `<<><>>` - it returns `true` when it should be `false`\n<|/ c |>\n<| c |>\n\
    : Yes, I noticed that and fixed it.  Thanks.\n<|/ c |>\n<| c |>\nThis fails for\
    \ `<<><>>` - it returns `true` when it should be `false`\n<|/ c |>\n<| c |>\n\
    : Yes, I noticed that and fixed it.  Thanks.\n<|/ c |>\n<| c |>\nThis fails for\
    \ `<<><>>` - it returns `true` when it should be `false`\n<|/ c |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoxcg4mgi.d(39): Error: declaration expected, not `<`\n/tmp/tmpoxcg4mgi.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmpoxcg4mgi.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmpoxcg4mgi.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmpoxcg4mgi.d(65): Error: declaration expected, not `assert`\n/tmp/tmpoxcg4mgi.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmpoxcg4mgi.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmpoxcg4mgi.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmpoxcg4mgi.d(69): Error: declaration expected, not `assert`\n/tmp/tmpoxcg4mgi.d(70):
    Error: declaration expected, not `assert`\n/tmp/tmpoxcg4mgi.d(71): Error: declaration
    expected, not `assert`\n/tmp/tmpoxcg4mgi.d(72): Error: declaration expected, not
    `assert`\n/tmp/tmpoxcg4mgi.d(73): Error: declaration expected, not `assert`\n/tmp/tmpoxcg4mgi.d(74):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoxcg4mgi.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i + 1] == '>')\n            {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv8_w9koh.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8_w9koh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    for (auto c : brackets) {\n        if (c != \">\"\
    \ && c != \"<\") {\n            result = false;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc251tap8.d(20): Error: no identifier for declarator `c`\n/tmp/tmpc251tap8.d(20):
    Error: expression expected, not `:`\n/tmp/tmpc251tap8.d(20): Error: found `brackets`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpc251tap8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '>')\n        {\n            if(brackets[i+1] != '<')\n            {\n  \
    \              result = false;\n                break;\n            }\n      \
    \  }\n        else if(c == '<')\n        {\n            if(brackets[i+1] != '>')\n\
    \            {\n                result = false;\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4y3aqfyf.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y3aqfyf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    for(int i = 0; i < brackets.length(); i++) {\n  \
    \      if(brackets[i] == '<') {\n            if(brackets[i+1] == '>') {\n    \
    \            result = false;\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<|\
    \ c |>\nThis doesn't work. Try it with `\"<<><>>\"`.\n<|/ c |>\n<| c |>\nYes,\
    \ I see that now. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThis fails\
    \ for `<<><>>` but works with `<<<>>`\n<|/ c |>\n<| c |>\nIt fails for `<<<>>`\
    \ because `<<<>>` is actually `<<<>>` but `<<<>>` has two opening brackets. So\
    \ the algorithm is correct. `<<<>>` has three opening brackets so `<<<>>` is actually\
    \ `<<<>>` but `<<<>>` has two opening brackets. So the algorithm is correct.\n\
    <|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmlsnb8ag.d(30): Error: declaration expected, not `<`\n/tmp/tmpmlsnb8ag.d(33):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpmlsnb8ag.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n        case '<':\n            if(brackets[j] == '>') {\n\
    \                i++;\n                j++;\n            } else {\n          \
    \      result = false;\n                break;\n            }\n            break;\n\
    \        case '>':\n            if(brackets[j] == '<') {\n                i++;\n\
    \                j++;\n            } else {\n                result = false;\n\
    \                break;\n            }\n            break;\n        default:\n\
    \            i++;\n            j++;\n            break;\n        }\n    }\n  \
    \  return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nThis\
    \ fails for `<><>` - it returns `true` when it should be `false`.\n<|/ c |>\n\
    <| c |>\nYeah, I missed that case. Fixed now.\n<|/ c |>\n<| c |>\nThis fails for\
    \ `n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppr0jj77h.d(52): Error: declaration expected, not `<`\n/tmp/tmppr0jj77h.d(61):
    Error: unterminated string constant starting at /tmp/tmppr0jj77h.d(61)\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppr0jj77h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n   \
    \ {\n        if(brackets[i] == '>')\n        {\n            if(brackets[i+1] !=\
    \ '<')\n                return false;\n            i += 2;\n        }\n      \
    \  else if(brackets[i] == '<')\n        {\n            if(brackets[i+1] != '>')\n\
    \                return false;\n            i += 2;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5456tylo.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5456tylo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '>')\n        {\n            if(brackets[i+1] != '<')\n            {\n  \
    \              result = false;\n                break;\n            }\n      \
    \      ++i;\n        }\n        else if(c == '<')\n        {\n            if(brackets[i-1]\
    \ != '>')\n            {\n                result = false;\n                break;\n\
    \            }\n            --i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwl6pswyj.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwl6pswyj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != '<')\n        {\n            return false;\n        }\n    }\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] != '>')\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3k5clj2d.d(19): Error: no property `length` for type `string`\n/tmp/tmp3k5clj2d.d(26):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3k5clj2d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        if(c == '<') {\n            if(brackets[j] == '>') {\n              \
    \  i++;\n                j++;\n            } else {\n                result =\
    \ false;\n                break;\n            }\n        } else if(c == '>') {\n\
    \            if(brackets[j] == '<') {\n                i++;\n                j++;\n\
    \            } else {\n                result = false;\n                break;\n\
    \            }\n        } else {\n            i++;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8sfktsx5.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sfktsx5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    for (auto c : brackets)\n    {\n        if (c !=\
    \ '>' && c != '<')\n        {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnbaw_xtt.d(20): Error: no identifier for declarator `c`\n/tmp/tmpnbaw_xtt.d(20):
    Error: expression expected, not `:`\n/tmp/tmpnbaw_xtt.d(20): Error: found `brackets`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnbaw_xtt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    \n\
    \    while (i<brackets_size)\n    {\n        if (brackets[i] == '<')\n       \
    \ {\n            opening_brackets++;\n        }\n        else if (brackets[i]\
    \ == '>')\n        {\n            closing_brackets++;\n        }\n        i++;\n\
    \    }\n    \n    if (opening_brackets != closing_brackets)\n    {\n        return\
    \ false;\n    }\n    \n    i = opening_brackets;\n    j = closing_brackets;\n\
    \    \n    while (j<brackets_size)\n    {\n        if (brackets[j] == '<')\n \
    \       {\n            i++;\n        }\n        else if (brackets[j] == '>')\n\
    \        {\n            j++;\n        }\n    }\n    \n    if (i != j)\n    {\n\
    \        return false;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo_ri06zj.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_ri06zj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '>')\n        {\n            if(brackets[i+1] != '<')\n            {\n  \
    \              result = false;\n                break;\n            }\n      \
    \      ++i;\n        }\n        else if(c == '<')\n        {\n            if(brackets[i-1]\
    \ != '>')\n            {\n                result = false;\n                break;\n\
    \            }\n            --i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwl6pswyj.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwl6pswyj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != '<')\n            return false;\n    }\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] != '>')\n            return false;\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpped2tgd4.d(19): Error: no property `length` for type `string`\n/tmp/tmpped2tgd4.d(24):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpped2tgd4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        char c = brackets[i];\n        if(c == '>')\n        {\n            if(brackets[i+1]\
    \ != '<')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n        else if(c == '<')\n        {\n            if(brackets[i-1]\
    \ != '>')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9djth33d.d(20): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9djth33d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    bool\
    \ result = true;\n    \n    while (i<brackets_size)\n    {\n        if (brackets[i]\
    \ == '<')\n        {\n            opening_brackets++;\n        }\n        else\
    \ if (brackets[i] == '>')\n        {\n            closing_brackets++;\n      \
    \  }\n        i++;\n    }\n    \n    if (opening_brackets != closing_brackets)\n\
    \    {\n        result = false;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp382_ueyw.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp382_ueyw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while (i < len) {\n        if (brackets[i] == '<')\
    \ {\n            if (brackets[j] == '>') {\n                j++;\n           \
    \ } else {\n                j = 0;\n                i++;\n                result\
    \ = false;\n            }\n        } else {\n            if (brackets[j] == '>')\
    \ {\n                j++;\n            } else {\n                j = 0;\n    \
    \            i++;\n                result = false;\n            }\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis fails\
    \ for `<><>` - it returns `true` when it should be `false`.\n<|/ c |>\n<| c |>\n\
    : Yes, I noticed that and fixed it before you posted your comment. Thanks.\n<|/\
    \ c |>\n<| c |>\n: I added a version that doesn't require a nested loop. Thanks.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\nI believe this should work:\n<code>\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphfosawpm.d(44): Error: declaration expected, not `<`\n/tmp/tmphfosawpm.d(53):
    Error: unterminated character constant\n/tmp/tmphfosawpm.d(62): Error: declaration
    expected, not `assert`\n/tmp/tmphfosawpm.d(63): Error: declaration expected, not
    `assert`\n/tmp/tmphfosawpm.d(64): Error: declaration expected, not `assert`\n/tmp/tmphfosawpm.d(65):
    Error: declaration expected, not `assert`\n/tmp/tmphfosawpm.d(66): Error: declaration
    expected, not `assert`\n/tmp/tmphfosawpm.d(67): Error: declaration expected, not
    `assert`\n/tmp/tmphfosawpm.d(68): Error: declaration expected, not `assert`\n/tmp/tmphfosawpm.d(69):
    Error: declaration expected, not `assert`\n/tmp/tmphfosawpm.d(70): Error: declaration
    expected, not `assert`\n/tmp/tmphfosawpm.d(71): Error: declaration expected, not
    `assert`\n/tmp/tmphfosawpm.d(72): Error: declaration expected, not `assert`\n/tmp/tmphfosawpm.d(73):
    Error: declaration expected, not `assert`\n/tmp/tmphfosawpm.d(74): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphfosawpm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n                return\
    \ true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptiey3fdt.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptiey3fdt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] != '<')\n       \
    \ {\n            result = false;\n            break;\n        }\n    }\n    for(i\
    \ = len-1; i >= 0; --i)\n    {\n        if(brackets[i] != '>')\n        {\n  \
    \          result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe_yvro4d.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe_yvro4d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    auto brackets_iter = brackets.begin();\n\tauto brackets_end = brackets.end();\n\
    \twhile(brackets_iter != brackets_end)\n\t{\n\t\tauto opening_bracket = *brackets_iter;\n\
    \t\tauto closing_bracket = *(brackets_iter + 1);\n\t\tif(brackets_iter == brackets_end\
    \ || opening_bracket != closing_bracket)\n\t\t\treturn false;\n\t\tbrackets_iter++;\n\
    \t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6prpgeny.d(19): Error: no property `begin` for type `string`\n/tmp/tmp6prpgeny.d(20):
    Error: no property `end` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6prpgeny.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    bool result = true;\n    for(size_t i\
    \ = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c == '>')\n\
    \        {\n            if(i+1 == len)\n            {\n                result\
    \ = false;\n                break;\n            }\n            char next = brackets[i+1];\n\
    \            if(c == '<')\n            {\n                if(next == '>')\n  \
    \              {\n                    result = true;\n                    break;\n\
    \                }\n                else\n                {\n                \
    \    result = false;\n                    break;\n                }\n        \
    \    }\n            else\n            {\n                if(next == '<')\n   \
    \             {\n                    result = false;\n                    break;\n\
    \                }\n                else\n                {\n                \
    \    result = true;\n                    break;\n                }\n         \
    \   }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp85ybsqla.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp85ybsqla.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.size();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    \n\
    \    while (i < brackets_size)\n    {\n        if (brackets[i] == '<')\n     \
    \   {\n            opening_brackets++;\n        }\n        else if (brackets[i]\
    \ == '>')\n        {\n            closing_brackets++;\n        }\n        i++;\n\
    \    }\n    \n    if (opening_brackets != closing_brackets)\n    {\n        return\
    \ false;\n    }\n    \n    while (j < brackets_size)\n    {\n        if (brackets[j]\
    \ == '<')\n        {\n            opening_brackets--;\n        }\n        else\
    \ if (brackets[j] == '>')\n        {\n            closing_brackets--;\n      \
    \  }\n        j++;\n    }\n    \n    if (opening_brackets != 0)\n    {\n     \
    \   return false;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr1v2oo4k.d(19): Error: no property `size` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr1v2oo4k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while (i < len) {\n        char c = brackets[i];\n\
    \        switch (c) {\n        case '<':\n            if (j == i) {\n        \
    \        result = false;\n                break;\n            }\n            ++i;\n\
    \            break;\n        case '>':\n            if (j == i) {\n          \
    \      result = false;\n                break;\n            }\n            ++i;\n\
    \            ++j;\n            break;\n        default:\n            ++i;\n  \
    \          break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp10lzc48d.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp10lzc48d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    size_t len = brackets.length();\n\tsize_t i;\n\tbool result = true;\n\tfor(i =\
    \ 0; i < len; ++i)\n\t{\n\t\tchar c = brackets[i];\n\t\tif(c == '>')\n\t\t\tresult\
    \ = result && is_open_bracket(brackets, i);\n\t\telse if(c == '<')\n\t\t\tresult\
    \ = result && !is_open_bracket(brackets, i);\n\t}\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsmrz_44l.d(19): Error: no property `length` for type `string`\n/tmp/tmpsmrz_44l.d(26):
    Error: undefined identifier `is_open_bracket`\n/tmp/tmpsmrz_44l.d(28): Error:
    undefined identifier `is_open_bracket`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpsmrz_44l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != '<')\n            return false;\n    }\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] != '>')\n            return false;\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpped2tgd4.d(19): Error: no property `length` for type `string`\n/tmp/tmpped2tgd4.d(24):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpped2tgd4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    size_t len = brackets.length();\n\tsize_t i = 0;\n\tsize_t j = 0;\n\tbool result\
    \ = true;\n\twhile (i < len) {\n\t\tchar c = brackets[i];\n\t\tif (c == '<') {\n\
    \t\t\tif (j < i) {\n\t\t\t\tchar next = brackets[j];\n\t\t\t\tif (next == '>')\
    \ {\n\t\t\t\t\tj++;\n\t\t\t\t} else {\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t} else {\n\t\t\t\tj++;\n\t\t\t}\n\t\t} else if (c == '>') {\n\
    \t\t\tif (j > i) {\n\t\t\t\tchar next = brackets[j];\n\t\t\t\tif (next == '<')\
    \ {\n\t\t\t\t\tj--;\n\t\t\t\t} else {\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t} else {\n\t\t\t\tj--;\n\t\t\t}\n\t\t} else {\n\t\t\ti++;\n\t\
    \t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd0bonpq0.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd0bonpq0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len && j < len) {\n        char left = brackets[i];\n\
    \        char right = brackets[j];\n        switch(left) {\n        case '<':\n\
    \            if(brackets[j+1] != '=') {\n                result = false;\n   \
    \             break;\n            }\n            ++j;\n            break;\n  \
    \      case '>':\n            if(brackets[j+1] != '=') {\n                result\
    \ = false;\n                break;\n            }\n            ++j;\n        \
    \    break;\n        default:\n            if(brackets[j+1] != '=') {\n      \
    \          result = false;\n                break;\n            }\n          \
    \  ++j;\n        }\n        ++i;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nI like your solution, but I believe it can be simplified\
    \ a little bit more. For example, `correct_bracketing(\"<<><>>\")` can be simplified\
    \ to `correct_bracketing(\"<>=\")`.\n<|/ c |>\n<| c |>\n: Yes, I agree. I was\
    \ just trying to keep it simple and to the point. :)\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I believe it can be simplified a little bit more. For example,\
    \ `correct_bracketing(\"<<><>>\")` can be simplified to `correct_bracketing(\"\
    <>=\")`.\n<|/ c |>\n<| c |>\n: Yes, I agree. I was just trying to keep it simple\
    \ and to the point. :)\n<|/ c |>\n<| c |>\nI like your solution, but I believe\
    \ it can be simplified a little bit more. For example, `correct_bracketing(\"\
    <<><>>\")` can be simplified to `correct_bracketing(\"<>=\")`.\n<|/ c |>\n<| a\
    \ tags=c++,algorithm,string |>\n<code>\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbqocn39r.d(52): Error: declaration expected, not `<`\n/tmp/tmpbqocn39r.d(75):
    Error: declaration expected, not `assert`\n/tmp/tmpbqocn39r.d(76): Error: declaration
    expected, not `assert`\n/tmp/tmpbqocn39r.d(77): Error: declaration expected, not
    `assert`\n/tmp/tmpbqocn39r.d(78): Error: declaration expected, not `assert`\n/tmp/tmpbqocn39r.d(79):
    Error: declaration expected, not `assert`\n/tmp/tmpbqocn39r.d(80): Error: declaration
    expected, not `assert`\n/tmp/tmpbqocn39r.d(81): Error: declaration expected, not
    `assert`\n/tmp/tmpbqocn39r.d(82): Error: declaration expected, not `assert`\n/tmp/tmpbqocn39r.d(83):
    Error: declaration expected, not `assert`\n/tmp/tmpbqocn39r.d(84): Error: declaration
    expected, not `assert`\n/tmp/tmpbqocn39r.d(85): Error: declaration expected, not
    `assert`\n/tmp/tmpbqocn39r.d(86): Error: declaration expected, not `assert`\n/tmp/tmpbqocn39r.d(87):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqocn39r.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '>')\n        {\n            if(i+1 < len && brackets[i+1] == '>')\n    \
    \        {\n                ++i;\n            }\n            else\n          \
    \  {\n                result = false;\n            }\n        }\n        else\
    \ if(c == '<')\n        {\n            if(i+1 < len && brackets[i+1] == '<')\n\
    \            {\n                ++i;\n            }\n            else\n      \
    \      {\n                result = false;\n            }\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpybw50tvl.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybw50tvl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n   \
    \ {\n        char c = brackets[i];\n        if(c == '>')\n        {\n        \
    \    if(brackets[i+1] == '>')\n            {\n                brackets.replace(i+2,\
    \ i+2, \">\");\n                --i;\n            }\n            else\n      \
    \      {\n                brackets.replace(i+2, i+2, \"<\");\n               \
    \ --i;\n            }\n        }\n    }\n    return brackets.length() == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnra39a13.d(19): Error: no property `length` for type `string`\n/tmp/tmpnra39a13.d(27):
    Error: no property `replace` for type `string`\n/tmp/tmpnra39a13.d(32): Error:
    no property `replace` for type `string`\n/tmp/tmpnra39a13.d(37): Error: no property
    `length` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnra39a13.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n   \
    \ {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1] ==\
    \ '>')\n                return true;\n        }\n    }\n    return false;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgstt2qgd.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgstt2qgd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while (i < len) {\n        char c = brackets[i];\n\
    \        switch (c) {\n        case '<':\n            if (j < i) {\n         \
    \       result = false;\n            }\n            j++;\n            break;\n\
    \        case '>':\n            if (j > i) {\n                result = false;\n\
    \            }\n            j--;\n            break;\n        default:\n     \
    \       if (j > i) {\n                result = false;\n            }\n       \
    \ }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwly518m0.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwly518m0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n   \
    \ {\n        char c = brackets[i];\n        if(c == '<')\n        {\n        \
    \    if(brackets[i+1] == '>')\n                return true;\n        }\n    }\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2g2iaqg5.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2g2iaqg5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    bool result = true;\n    for (size_t\
    \ i = 0; i < len; ++i)\n    {\n        if (brackets[i] != '<')\n        {\n  \
    \          result = false;\n            break;\n        }\n    }\n    for (size_t\
    \ i = 0; i < len; ++i)\n    {\n        if (brackets[i] != '>')\n        {\n  \
    \          result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv24chkba.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv24chkba.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        if(brackets[i] != brackets[brackets.length() - 1 - i])\n        {\n \
    \           result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzkfvsepb.d(20): Error: no property `length` for type `string`\n/tmp/tmpzkfvsepb.d(22):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzkfvsepb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while (i < len) {\n        if (brackets[i] == '<')\
    \ {\n            if (brackets[j] == '>') {\n                i++;\n           \
    \     j++;\n            } else {\n                result = false;\n          \
    \  }\n        } else {\n            if (brackets[j] == '>') {\n              \
    \  result = false;\n            } else {\n                j++;\n            }\n\
    \        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppc_sa1v2.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppc_sa1v2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_count\
    \ = 0;\n    size_t closing_brackets_count = 0;\n    size_t opening_brackets_index2\
    \ = 0;\n    size_t closing_brackets_index2 = 0;\n    size_t opening_brackets_index3\
    \ = 0;\n    size_t closing_brackets_index3 = 0;\n    size_t opening_brackets_index4\
    \ = 0;\n    size_t closing_brackets_index4 = 0;\n    size_t opening_brackets_index5\
    \ = 0;\n    size_t closing_brackets_index5 = 0;\n    size_t opening_brackets_index6\
    \ = 0;\n    size_t closing_brackets_index6 = 0;\n    size_t opening_brackets_index7\
    \ = 0;\n    size_t closing_brackets_index7 = 0;\n    size_t opening_brackets_index8\
    \ = 0;\n    size_t closing_brackets_index8 = 0;\n    size_t opening_brackets_index9\
    \ = 0;\n    size_t closing_brackets_index9 = 0;\n    size_t opening_brackets_index10\
    \ = 0;\n    size_t closing_brackets_index10 = 0;\n    size_t opening_brackets_index11\
    \ = 0;\n    size_t closing_brackets_index11 = 0;\n    size_t opening_brackets_index12\
    \ = 0;\n    size_t closing_brackets_index12 = 0;\n    size_t opening_brackets_index13\
    \ = 0;\n    size_t closing_brackets_index13 = 0;\n    size_t opening_brackets_index14\
    \ = 0;\n    size_t closing_brackets_index14 = 0;\n    size_t opening_brackets_index15\
    \ = 0;\n    size_t closing_brackets_index15 = 0;\n    size_t opening_brackets_index16\
    \ = 0;\n    size_t closing_brackets_index16 = 0;\n    size_t opening_brackets_index17\
    \ = 0;\n    size_t closing_brackets_index17 = 0;\n    size_t opening_brackets_index18\
    \ = 0;\n    size_t closing_brackets_index18 = 0;\n    size_t opening_brackets_index19\
    \ = 0;\n    size_t closing_brackets_index19 = 0;\n    size_t opening_brackets_index20\
    \ = 0;\n    size_t closing_brackets_index20 = 0;\n    size_t opening_brackets_index21\
    \ = 0;\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiqpz_5pu.d(65): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqpz_5pu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '>')\n        {\n            if(i+1 < len && brackets[i+1] == '<')\n    \
    \        {\n                result = false;\n                break;\n        \
    \    }\n        }\n        else if(c == '<')\n        {\n            if(i+1 <\
    \ len && brackets[i+1] == '>')\n            {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt0t1rpzq.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt0t1rpzq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                result = true;\n            }\n            else\n\
    \            {\n                result = false;\n            }\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp09jibxsz.d(20): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp09jibxsz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '>')\n        {\n            if(i+1 < len && brackets[i+1] == '<')\n    \
    \        {\n                result = false;\n                break;\n        \
    \    }\n        }\n        else if(c == '<')\n        {\n            if(i+1 <\
    \ len && brackets[i+1] == '>')\n            {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt0t1rpzq.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt0t1rpzq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    bool result = true;\n    \n\
    \    for(size_t i = 0; i < brackets_size; ++i)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            opening_brackets_size++;\n            opening_brackets_index++;\n\
    \        }\n        else if(brackets[i] == '>')\n        {\n            closing_brackets_size++;\n\
    \            closing_brackets_index++;\n        }\n        else\n        {\n \
    \           assert(false);\n        }\n    }\n    \n    if(opening_brackets_size\
    \ != closing_brackets_size)\n    {\n        result = false;\n    }\n    \n   \
    \ if(opening_brackets_index != closing_brackets_index)\n    {\n        result\
    \ = false;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg90lnksk.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg90lnksk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    for(i = 0; i < len; ++i)\n\
    \    {\n        char c = brackets[i];\n        if(c == '>')\n        {\n     \
    \       if(brackets[i+1] != '<')\n            {\n                return false;\n\
    \            }\n            ++i;\n        }\n        else if(c == '<')\n     \
    \   {\n            if(brackets[i-1] != '>')\n            {\n                return\
    \ false;\n            }\n            --i;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdvnn9da7.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdvnn9da7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n                return\
    \ true;\n        }\n    }\n    return false;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work. Try it with `\"<>\"`.\n<|/ c |>\n<| c |>\nYes, it\
    \ does. I tested it before posting. It returns true for \"<>\" and false for \"\
    <>\".\n<|/ c |>\n<| c |>\nI tested it on `\"<>\"` and it returns `true`. `\"<>\"\
    ` returns `true` because `\"<\"` has one opening bracket and `\">\"` has one closing\
    \ bracket.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting. It returns\
    \ true for \"<>\" and false for \"<>\".\n<|/ c |>\n<| c |>\nI tested it on \"\
    <>\" and it returns true. <> returns true because < has one opening bracket and\
    \ > has one closing bracket.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn5_fthfj.d(29): Error: declaration expected, not `<`\n/tmp/tmpn5_fthfj.d(32):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpn5_fthfj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        string opening = brackets.substr(i,\
    \ 1);\n        string closing = brackets.substr(j, 1);\n        bool opening_closed\
    \ = (opening == closing);\n        bool opening_open = (opening == \"<\");\n \
    \       bool opening_closed_open = (closing == \"<\");\n        bool opening_closed_closed\
    \ = (closing == \">\");\n        bool opening_open_closed = (opening == \">\"\
    );\n        bool opening_closed_open_closed = (closing == \"<\");\n        bool\
    \ opening_closed_closed_open = (closing == \">\");\n        bool opening_closed_open_open_closed\
    \ = (closing == \"<\");\n        bool opening_closed_closed_closed_open = (closing\
    \ == \">\");\n        bool opening_open_open_closed_closed = (opening == \"<\"\
    );\n        bool opening_open_closed_open_closed = (opening == \">\");\n     \
    \   bool opening_closed_open_open_closed_open = (closing == \"<\");\n        bool\
    \ opening_closed_closed_open_open_closed = (closing == \">\");\n        bool opening_open_open_closed_closed_open\
    \ = (opening == \"<\");\n        bool opening_open_closed_closed_open_closed =\
    \ (opening == \">\");\n        bool opening_closed_open_open_closed_closed_open\
    \ = (closing == \"<\");\n        bool opening_closed_closed_open_open_closed_closed\
    \ = (closing == \">\");\n        bool opening_open_open_closed_closed_closed_open\
    \ = (opening == \"<\");\n        bool opening_open_closed_closed_open_closed_closed\
    \ = (opening == \">\");\n        bool opening_closed_open_open_closed_closed_open_closed\
    \ = (closing == \"<\");\n        bool opening_closed_closed_open_open_closed_closed_open\
    \ = (closing == \">\");\n        bool opening_open_open_closed_closed_closed_closed_open\
    \ = (opening == \"<\");\n        bool opening_open_closed_closed_open_closed_closed_closed\
    \ = (opening == \">\");\n        bool opening_closed_open_open_closed_closed_open_closed_open\
    \ = (closing == \"<\");\n        bool opening_closed_closed_open_open_closed_closed_closed_open\
    \ = (closing == \">\");\n        bool opening_open_open_closed_closed_closed_closed_open_closed_open\
    \ = (opening == \"<\");\n        bool open\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphf5mg3nu.d(53): Error: semicolon expected, not `unittest`\n/tmp/tmphf5mg3nu.d(53):
    Error: found `unittest` instead of statement\n/tmp/tmphf5mg3nu.d(70): Error: found
    `End of File` when expecting `}` following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphf5mg3nu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(!brackets.at(i).isalnum())\n\
    \        {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzt03vl8y.d(19): Error: no property `length` for type `string`\n/tmp/tmpzt03vl8y.d(24):
    Error: no property `at` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzt03vl8y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] != '<')\n       \
    \ {\n            result = false;\n            break;\n        }\n    }\n    for(i\
    \ = len - 1; i >= 0; --i)\n    {\n        if(brackets[i] != '>')\n        {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for the answer. Your code works\
    \ perfectly for me. I am still trying to understand how it works. Can you please\
    \ explain how it works?\n<|/ c |>\n<| c |>\nI added some comments to the code.\
    \ Hope that helps.\n<|/ c |>\n<| c |>\nThanks for the explanation. Now I understand\
    \ how it works.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <vector>\n#include <algorithm>\n#include <iterator>\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2kn26skx.d(40): Error: declaration expected, not `<`\n/tmp/tmp2kn26skx.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmp2kn26skx.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmp2kn26skx.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmp2kn26skx.d(65): Error: declaration expected, not `assert`\n/tmp/tmp2kn26skx.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmp2kn26skx.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmp2kn26skx.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmp2kn26skx.d(69): Error: declaration expected, not `assert`\n/tmp/tmp2kn26skx.d(70):
    Error: declaration expected, not `assert`\n/tmp/tmp2kn26skx.d(71): Error: declaration
    expected, not `assert`\n/tmp/tmp2kn26skx.d(72): Error: declaration expected, not
    `assert`\n/tmp/tmp2kn26skx.d(73): Error: declaration expected, not `assert`\n/tmp/tmp2kn26skx.d(74):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2kn26skx.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i)\n    {\n        char c = brackets[i];\n        if (c == '<')\n        \
    \    ++opening_brackets_size;\n        else if (c == '>')\n            ++closing_brackets_size;\n\
    \    }\n    return opening_brackets_size == closing_brackets_size;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplaw3k6c8.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplaw3k6c8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.size();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t opening_brackets_index = 0;\n  \
    \  size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_next\
    \ = 0;\n    size_t closing_brackets_index_next = 0;\n    size_t opening_brackets_index_end\
    \ = 0;\n    size_t closing_brackets_index_end = 0;\n    size_t opening_brackets_index_end2\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end2\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end3\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end3\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end4\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end4\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end5\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end5\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end6\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end6\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end7\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end7\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end8\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end8\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end9\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end9\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end10\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end10\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end11\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end11\
    \ = 0; // end index for next closing bracket\n    size_t opening_bra\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpylvckjkl.d(50): Error: found `opening_bra` when expecting `;`
    following statement\n/tmp/tmpylvckjkl.d(51): Error: found `unittest` instead of
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpylvckjkl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    bool\
    \ result = true;\n    \n    while (i<brackets_size) {\n        if (brackets[i]\
    \ == '<') {\n            opening_brackets++;\n        }\n        else if (brackets[i]\
    \ == '>') {\n            closing_brackets++;\n        }\n        i++;\n    }\n\
    \    \n    if (opening_brackets != closing_brackets) {\n        result = false;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqnrrrbp.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqnrrrbp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t opening_brackets_index = 0;\n  \
    \  size_t closing_brackets_index = 0;\n    size_t opening_brackets_end = 0;\n\
    \    size_t closing_brackets_end = 0;\n    \n    for(size_t i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if(brackets[i] == '<')\n        {\n            opening_brackets++;\n\
    \            opening_brackets_index = i;\n        }\n        else if(brackets[i]\
    \ == '>')\n        {\n            closing_brackets++;\n            closing_brackets_index\
    \ = i;\n        }\n    }\n    \n    opening_brackets_end = opening_brackets_index\
    \ + 1;\n    closing_brackets_end = closing_brackets_index + 1;\n    \n    for(size_t\
    \ i = opening_brackets_index; i < brackets_size; ++i)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            opening_brackets++;\n            opening_brackets_end\
    \ = i;\n        }\n        else if(brackets[i] == '>')\n        {\n          \
    \  closing_brackets++;\n            closing_brackets_end = i;\n        }\n   \
    \ }\n    \n    if(opening_brackets_end != brackets_size)\n    {\n        return\
    \ false;\n    }\n    \n    if(closing_brackets_end != brackets_size)\n    {\n\
    \        return false;\n    }\n    \n    if(opening_brackets != closing_brackets)\n\
    \    {\n        return false;\n    }\n    \n    return true;\n}\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1o506dsa.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1o506dsa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    for(i = 0; i < len; ++i)\n\
    \    {\n        if(brackets[i] == '>')\n        {\n            if(brackets[i+1]\
    \ != '<')\n            {\n                return false;\n            }\n     \
    \   }\n        else if(brackets[i] == '<')\n        {\n            if(brackets[i-1]\
    \ != '>')\n            {\n                return false;\n            }\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp165q4spm.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp165q4spm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nI believe this fails\
    \ for `<><>` which should return `true`.\n<|/ c |>\n<| c |>\n: Yes, it does. I\
    \ added a test case to my answer.\n<|/ c |>\n<| c |>\nI believe this fails for\
    \ `<<><>>` which should return `false`.\n<|/ c |>\n<| c |>\n: Yes, it does. I\
    \ added a test case to my answer.\n<|/ c |>\n<| c |>\nI believe this fails for\
    \ `<><>` which should return `true`.\n<|/ c |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpto421e1q.d(31): Error: declaration expected, not `<`\n/tmp/tmpto421e1q.d(54):
    Error: declaration expected, not `assert`\n/tmp/tmpto421e1q.d(55): Error: declaration
    expected, not `assert`\n/tmp/tmpto421e1q.d(56): Error: declaration expected, not
    `assert`\n/tmp/tmpto421e1q.d(57): Error: declaration expected, not `assert`\n/tmp/tmpto421e1q.d(58):
    Error: declaration expected, not `assert`\n/tmp/tmpto421e1q.d(59): Error: declaration
    expected, not `assert`\n/tmp/tmpto421e1q.d(60): Error: declaration expected, not
    `assert`\n/tmp/tmpto421e1q.d(61): Error: declaration expected, not `assert`\n/tmp/tmpto421e1q.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmpto421e1q.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmpto421e1q.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmpto421e1q.d(65): Error: declaration expected, not `assert`\n/tmp/tmpto421e1q.d(66):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpto421e1q.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n   \
    \ {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1] !=\
    \ '>')\n            {\n                return false;\n            }\n        }\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvj1fqae3.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvj1fqae3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    for(i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if(brackets[i] == '<')\n        {\n            ++opening_brackets;\n\
    \        }\n        else if(brackets[i] == '>')\n        {\n            ++closing_brackets;\n\
    \        }\n    }\n    return opening_brackets == closing_brackets;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptpzqrf9x.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptpzqrf9x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    auto bracket = brackets.front();\n\tauto brackets = brackets.back();\n\tauto opening_brackets\
    \ = brackets.find_first_of(bracket);\n\tauto closing_brackets = brackets.find_first_of(bracket);\n\
    \t\n\tbool result = true;\n\t\n\tfor (auto i = opening_brackets; i < closing_brackets;\
    \ ++i)\n\t{\n\t\tauto opening_bracket = brackets[i];\n\t\tauto closing_bracket\
    \ = brackets[++i];\n\t\t\n\t\tif (opening_bracket != closing_bracket)\n\t\t{\n\
    \t\t\tresult = false;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5fhtabl6.d(19): Error: no property `front` for type `string`\n/tmp/tmp5fhtabl6.d(20):
    Error: no property `back` for type `string`\n/tmp/tmp5fhtabl6.d(20): Error: variable
    `brackets` is shadowing variable `tmp5fhtabl6.correct_bracketing.brackets`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5fhtabl6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    bool result = true;\n    \n\
    \    for(size_t i = 0; i < brackets_size; ++i)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            opening_brackets_size++;\n            opening_brackets_index++;\n\
    \        }\n        else if(brackets[i] == '>')\n        {\n            closing_brackets_size++;\n\
    \            closing_brackets_index++;\n        }\n        else\n        {\n \
    \           opening_brackets_size = 0;\n            closing_brackets_size = 0;\n\
    \            opening_brackets_index = 0;\n            closing_brackets_index =\
    \ 0;\n            result = false;\n        }\n    }\n    \n    if(opening_brackets_size\
    \ != closing_brackets_size)\n    {\n        result = false;\n    }\n    \n   \
    \ if(opening_brackets_index != closing_brackets_index)\n    {\n        result\
    \ = false;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4mwtndv4.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4mwtndv4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i + 1] == '>')\n            {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv8_w9koh.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8_w9koh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '>')\n        {\n            if(i+1 < len && brackets[i+1] == '<')\n    \
    \        {\n                result = false;\n                break;\n        \
    \    }\n        }\n        else if(c == '<')\n        {\n            if(i+1 <\
    \ len && brackets[i+1] == '>')\n            {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt0t1rpzq.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt0t1rpzq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n                return\
    \ true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptiey3fdt.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptiey3fdt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n        case '<':\n            if(brackets[j] == '>') {\n\
    \                j++;\n            } else {\n                result = false;\n\
    \                break;\n            }\n            break;\n        case '>':\n\
    \            if(brackets[j] == '<') {\n                j++;\n            } else\
    \ {\n                result = false;\n                break;\n            }\n\
    \            break;\n        default:\n            result = false;\n         \
    \   break;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2or36tlf.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2or36tlf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    for(i = 0; i < len; ++i)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                ++i;\n            }\n            else\n\
    \            {\n                return false;\n            }\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4q0p40th.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4q0p40th.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    for (int i = 0; i < brackets.length(); i++) {\n\t\tchar c = brackets[i];\n\t\t\
    if (c == '<') {\n\t\t\tif (brackets[i+1] == '>') {\n\t\t\t\treturn true;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpupmca4gp.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpupmca4gp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_next\
    \ = 0;\n    size_t closing_brackets_index_next = 0;\n    size_t opening_brackets_index_prev\
    \ = 0;\n    size_t closing_brackets_index_prev = 0;\n    size_t opening_brackets_index_current\
    \ = 0;\n    size_t closing_brackets_index_current = 0;\n    size_t opening_brackets_index_end\
    \ = 0;\n    size_t closing_brackets_index_end = 0;\n    size_t opening_brackets_index_end_prev\
    \ = 0;\n    size_t closing_brackets_index_end_prev = 0;\n    size_t opening_brackets_index_end_current\
    \ = 0;\n    size_t closing_brackets_index_end_current = 0;\n    size_t opening_brackets_index_end_next\
    \ = 0;\n    size_t closing_brackets_index_end_next = 0;\n    size_t opening_brackets_index_end_prev\
    \ = 0;\n    size_t closing_brackets_index_end_prev = 0;\n    size_t opening_brackets_index_end_current\
    \ = 0;\n    size_t closing_brackets_index_end_current = 0;\n    size_t opening_brackets_index_end_next\
    \ = 0;\n    size_t closing_brackets_index_end_next = 0;\n    size_t opening_brackets_index_end_prev\
    \ = 0;\n    size_t closing_brackets_index_end_prev = 0;\n    size_t opening_brackets_index_end_current\
    \ = 0;\n    size_t closing_brackets_index_end_current = 0;\n    size_t opening_brackets_index_end_next\
    \ = 0;\n    size_t closing_brackets_index_end_next = 0;\n    size_t opening_brackets_index_end_prev\
    \ = 0;\n    size_t closing_brackets_index_end_prev = 0;\n    size_t opening_brackets_index_end_current\
    \ = 0;\n    size_t closing_brackets_index_end_current = 0;\n    size_t opening_brackets_index_end_next\
    \ = 0;\n    size_t closing_brackets_index_end_next = 0;\n    size_t opening_brackets_index_end_prev\
    \ = 0;\n    size_t closing_brackets_index_end_prev = 0;\n    size_t opening_brackets_index_end_current\
    \ = 0;\n    size_t closing_brackets_index_end_current = 0;\n    size_t opening_brackets_index_end_next\
    \ = 0;\n    size_t closing_b\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd5tmnd0w.d(61): Error: found `closing_b` when expecting `;`
    following statement\n/tmp/tmpd5tmnd0w.d(62): Error: found `unittest` instead of
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd5tmnd0w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != \"<\")\n            return false;\n    }\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] != \">\")\n            return false;\n \
    \   }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzsyv1o38.d(19): Error: no property `length` for type `string`\n/tmp/tmpzsyv1o38.d(21):
    Error: incompatible types for `(brackets[cast(ulong)i]) != ("<")`: `immutable(char)`
    and `string`\n/tmp/tmpzsyv1o38.d(24): Error: no property `length` for type `string`\n/tmp/tmpzsyv1o38.d(26):
    Error: incompatible types for `(brackets[cast(ulong)i]) != (">")`: `immutable(char)`
    and `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzsyv1o38.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if the brackets are in the wrong\
    \ order. For example, `\"<>\"` returns `true` when it should return `false`.\n\
    <|/ c |>\n<| c |>\n: Yes, you are right. I didn't think about that case. I'll\
    \ fix it.\n<|/ c |>\n<| c |>\n: I fixed the bug. Now it works.\n<|/ c |>\n<| c\
    \ |>\n: I fixed the bug. Now it works.\n<|/ c |>\n<| c |>\n: I fixed the bug.\
    \ Now it works.\n<|/ c |>\n<| a tags=c++,algorithm,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqw7u14s7.d(31): Error: declaration expected, not `<`\n/tmp/tmpqw7u14s7.d(34):
    Error: unterminated character constant\n/tmp/tmpqw7u14s7.d(37): Error: unterminated
    character constant\n/tmp/tmpqw7u14s7.d(37): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqw7u14s7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        if(brackets[i] != brackets[brackets.length() - 1 - i])\n        {\n \
    \           result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzkfvsepb.d(20): Error: no property `length` for type `string`\n/tmp/tmpzkfvsepb.d(22):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzkfvsepb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len && j < len) {\n        char c = brackets[i];\n\
    \        char d = brackets[j];\n        if (c == d) {\n            i++;\n    \
    \        j++;\n        } else if (c == '<') {\n            if (d == '>') {\n \
    \               i++;\n                j++;\n            } else {\n           \
    \     result = false;\n            }\n        } else {\n            result = false;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpovlnxned.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovlnxned.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        if(brackets[i] != brackets[brackets.length() - i])\n        {\n     \
    \       result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphbanmhjr.d(20): Error: no property `length` for type `string`\n/tmp/tmphbanmhjr.d(22):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphbanmhjr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] != '<')\n       \
    \ {\n            result = false;\n            break;\n        }\n    }\n    for(i\
    \ = len - 1; i >= 0; --i)\n    {\n        if(brackets[i] != '>')\n        {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpafyvt3af.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpafyvt3af.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    bool\
    \ result = true;\n    \n    while (i < brackets_size) {\n        char c = brackets[i];\n\
    \        \n        if (c == '<') {\n            opening_brackets++;\n        }\n\
    \        else if (c == '>') {\n            closing_brackets++;\n        }\n  \
    \      \n        i++;\n    }\n    \n    if (opening_brackets != closing_brackets)\
    \ {\n        result = false;\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkdd4hsnx.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdd4hsnx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '>')\n        {\n            if(i+1 < len && brackets[i+1] == '<')\n    \
    \        {\n                result = false;\n                break;\n        \
    \    }\n        }\n        else if(c == '<')\n        {\n            if(i+1 <\
    \ len && brackets[i+1] == '>')\n            {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt0t1rpzq.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt0t1rpzq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    for(i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if(brackets[i] == '<')\n        {\n            ++opening_brackets;\n\
    \        }\n        else if(brackets[i] == '>')\n        {\n            ++closing_brackets;\n\
    \        }\n    }\n    if(opening_brackets != closing_brackets)\n    {\n     \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpky3dvqf3.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpky3dvqf3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                result = true;\n            }\n            else\n\
    \            {\n                result = false;\n            }\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp09jibxsz.d(20): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp09jibxsz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_count\
    \ = 0;\n    size_t closing_brackets_count = 0;\n    size_t opening_brackets_count_max\
    \ = 0;\n    size_t closing_brackets_count_max = 0;\n    size_t opening_brackets_count_min\
    \ = 0;\n    size_t closing_brackets_count_min = 0;\n    size_t opening_brackets_count_min_index\
    \ = 0;\n    size_t closing_brackets_count_min_index = 0;\n    size_t opening_brackets_count_max_index\
    \ = 0;\n    size_t closing_brackets_count_max_index = 0;\n    size_t opening_brackets_count_min_index2\
    \ = 0;\n    size_t closing_brackets_count_min_index2 = 0;\n    size_t opening_brackets_count_max_index2\
    \ = 0;\n    size_t closing_brackets_count_max_index2 = 0;\n    size_t opening_brackets_count_min_index3\
    \ = 0;\n    size_t closing_brackets_count_min_index3 = 0;\n    size_t opening_brackets_count_max_index3\
    \ = 0;\n    size_t closing_brackets_count_max_index3 = 0;\n    size_t opening_brackets_count_min_index4\
    \ = 0;\n    size_t closing_brackets_count_min_index4 = 0;\n    size_t opening_brackets_count_max_index4\
    \ = 0;\n    size_t closing_brackets_count_max_index4 = 0;\n    size_t opening_brackets_count_min_index5\
    \ = 0;\n    size_t closing_brackets_count_min_index5 = 0;\n    size_t opening_brackets_count_max_index5\
    \ = 0;\n    size_t closing_brackets_count_max_index5 = 0;\n    size_t opening_brackets_count_min_index6\
    \ = 0;\n    size_t closing_brackets_count_min_index6 = 0;\n    size_t opening_brackets_count_max_index6\
    \ = 0;\n    size_t closing_brackets_count_max_index6 = 0;\n    size_t opening_brackets_count_min_index7\
    \ = 0;\n    size_t closing_brackets_count_min_index7 = 0;\n    size_t opening_brackets_count_max_index7\
    \ = 0;\n    size_t closing_brackets_count_max_index7 = 0;\n    size_t opening_brackets_count_min_index8\
    \ = 0;\n    size_t closing_brackets_count_min_index8 = 0;\n    size_t opening_brackets_count_\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwuap5ms6.d(60): Error: found `opening_brackets_count_` when
    expecting `;` following statement\n/tmp/tmpwuap5ms6.d(61): Error: found `unittest`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwuap5ms6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    \n\
    \    while (i<brackets_size) {\n        if (brackets[i] == '<') {\n          \
    \  opening_brackets++;\n        }\n        else if (brackets[i] == '>') {\n  \
    \          closing_brackets++;\n        }\n        i++;\n    }\n    \n    if (opening_brackets\
    \ != closing_brackets) {\n        return false;\n    }\n    \n    i = opening_brackets;\n\
    \    \n    while (i < brackets_size) {\n        if (brackets[i] == '<') {\n  \
    \          i++;\n        }\n        else if (brackets[i] == '>') {\n         \
    \   i++;\n        }\n        else {\n            return false;\n        }\n  \
    \  }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgbf9xkvf.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbf9xkvf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '>')\n       \
    \ {\n            if(brackets[i+1] == '>')\n            {\n                result\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but I wonder how\
    \ it compares to other solutions posted so far.\n<|/ c |>\n<| c |>\nI like it\
    \ too, but I wonder how it compares to other solutions posted so far.\n<|/ c |>\n\
    <| c |>\nI like it too, but I wonder how it compares to other solutions posted\
    \ so far.\n<|/ c |>\n<| c |>\nI like it too, but I wonder how it compares to other\
    \ solutions posted so far.\n<|/ c |>\n<| c |>\nI like it too, but I wonder how\
    \ it compares to other solutions posted so far.\n<|/ c |>\n<| a |>\n<code>\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpni26nmpc.d(35): Error: declaration expected, not `<`\n/tmp/tmpni26nmpc.d(58):
    Error: declaration expected, not `assert`\n/tmp/tmpni26nmpc.d(59): Error: declaration
    expected, not `assert`\n/tmp/tmpni26nmpc.d(60): Error: declaration expected, not
    `assert`\n/tmp/tmpni26nmpc.d(61): Error: declaration expected, not `assert`\n/tmp/tmpni26nmpc.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmpni26nmpc.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmpni26nmpc.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmpni26nmpc.d(65): Error: declaration expected, not `assert`\n/tmp/tmpni26nmpc.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmpni26nmpc.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmpni26nmpc.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmpni26nmpc.d(69): Error: declaration expected, not `assert`\n/tmp/tmpni26nmpc.d(70):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpni26nmpc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '>')\n        {\n            if(i+1 < len && brackets[i+1] == '>')\n    \
    \        {\n                ++i;\n            }\n            else\n          \
    \  {\n                result = false;\n            }\n        }\n        else\
    \ if(c == '<')\n        {\n            if(i+1 < len && brackets[i+1] == '<')\n\
    \            {\n                ++i;\n            }\n            else\n      \
    \      {\n                result = false;\n            }\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpybw50tvl.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybw50tvl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t opening_brackets_index = 0;\n  \
    \  size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_in_string\
    \ = 0;\n    size_t closing_brackets_index_in_string = 0;\n    size_t opening_brackets_index_in_brackets\
    \ = 0;\n    size_t closing_brackets_index_in_brackets = 0;\n    size_t opening_brackets_index_in_brackets_string\
    \ = 0;\n    size_t closing_brackets_index_in_brackets_string = 0;\n    size_t\
    \ opening_brackets_index_in_brackets_string = 0;\n    size_t closing_brackets_index_in_brackets_string\
    \ = 0;\n    size_t opening_brackets_index_in_brackets_string = 0;\n    size_t\
    \ closing_brackets_index_in_brackets_string = 0;\n    size_t opening_brackets_index_in_brackets_string\
    \ = 0;\n    size_t closing_brackets_index_in_brackets_string = 0;\n    size_t\
    \ opening_brackets_index_in_brackets_string = 0;\n    size_t closing_brackets_index_in_brackets_string\
    \ = 0;\n    size_t opening_brackets_index_in_brackets_string = 0;\n    size_t\
    \ closing_brackets_index_in_brackets_string = 0;\n    size_t opening_brackets_index_in_brackets_string\
    \ = 0;\n    size_t closing_brackets_index_in_brackets_string = 0;\n    size_t\
    \ opening_brackets_index_in_brackets_string = 0;\n    size_t closing_brackets_index_in_brackets_string\
    \ = 0;\n    size_t opening_brackets_index_in_brackets_string = 0;\n    size_t\
    \ closing_brackets_index_in_brackets_string = 0;\n    size_t opening_brackets_index_in_brackets_string\
    \ = 0;\n    size_t closing_brackets_index_in_brackets_string = 0;\n    size_t\
    \ opening_brackets_index_in_brackets_string = 0;\n    size_t closing_brackets_index_in_brackets_string\
    \ = 0;\n    size_t opening_brackets_index_in_brackets_string = 0;\n    size_t\
    \ closing_brackets_index_in_brackets_string = 0;\n    size_t opening_brackets_index_in_brackets_string\
    \ = 0;\n    size_t closing_brackets_index_in_brackets_string = 0;\n    size_t\
    \ opening_brackets_index_in_brackets_string = 0;\n    size_t closing_brackets_index_in_brackets_string\
    \ = 0;\n    size_t opening_bracket\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxcflbd8z.d(56): Error: found `opening_bracket` when expecting
    `;` following statement\n/tmp/tmpxcflbd8z.d(57): Error: found `unittest` instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxcflbd8z.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    auto bracket = brackets.front();\n\tauto brackets = brackets.back();\n\tfor (auto\
    \ &c : brackets)\n\t{\n\t\tif (c != bracket)\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmkqkheoy.d(21): Error: basic type expected, not `&`\n/tmp/tmpmkqkheoy.d(21):
    Error: no identifier for declarator `_error_`\n/tmp/tmpmkqkheoy.d(21): Error:
    found `:` when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmkqkheoy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n   \
    \ {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1] ==\
    \ '>')\n                return true;\n        }\n    }\n    return false;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgstt2qgd.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgstt2qgd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        if(brackets[i] != brackets[brackets.length() - 1 - i])\n        {\n \
    \           result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzkfvsepb.d(20): Error: no property `length` for type `string`\n/tmp/tmpzkfvsepb.d(22):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzkfvsepb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    bool result = true;\n    \n\
    \    for (size_t i = 0; i < brackets_size; ++i)\n    {\n        char c = brackets[i];\n\
    \        if (c == '<')\n        {\n            opening_brackets_size++;\n    \
    \        opening_brackets_index++;\n        }\n        else if (c == '>')\n  \
    \      {\n            closing_brackets_size++;\n            closing_brackets_index++;\n\
    \        }\n        else\n        {\n            if (opening_brackets_size !=\
    \ closing_brackets_size)\n            {\n                result = false;\n   \
    \             break;\n            }\n            opening_brackets_size = 0;\n\
    \            closing_brackets_size = 0;\n            opening_brackets_index =\
    \ 0;\n            closing_brackets_index = 0;\n        }\n    }\n    \n    if\
    \ (opening_brackets_size != closing_brackets_size)\n    {\n        result = false;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjpcj4mfp.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjpcj4mfp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    bool result = true;\n    \n\
    \    for (size_t i = 0; i < brackets_size; ++i)\n    {\n        char c = brackets[i];\n\
    \        if (c == '<')\n        {\n            opening_brackets_size++;\n    \
    \        opening_brackets_index++;\n        }\n        else if (c == '>')\n  \
    \      {\n            closing_brackets_size++;\n            closing_brackets_index++;\n\
    \        }\n        else\n        {\n            if (opening_brackets_size !=\
    \ closing_brackets_size)\n            {\n                result = false;\n   \
    \             break;\n            }\n            \n            if (opening_brackets_index\
    \ != closing_brackets_index)\n            {\n                result = false;\n\
    \                break;\n            }\n            \n            opening_brackets_size\
    \ = 0;\n            closing_brackets_size = 0;\n            opening_brackets_index\
    \ = 0;\n            closing_brackets_index = 0;\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsxit5l16.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsxit5l16.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool ret = true;\n   \
    \ for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '>')\n        {\n\
    \            if(brackets[i+1] == '>')\n            {\n                ret = false;\n\
    \                break;\n            }\n        }\n    }\n    return ret;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbwss9w_c.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbwss9w_c.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '>')\n        {\n            if(brackets[i+1] != '<')\n            {\n  \
    \              result = false;\n                break;\n            }\n      \
    \  }\n        else if(c == '<')\n        {\n            if(brackets[i-1] != '>')\n\
    \            {\n                result = false;\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpye1eoyhk.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpye1eoyhk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '>')\n        {\n            if(i+1 < len && brackets[i+1] == '>')\n    \
    \        {\n                result = false;\n                break;\n        \
    \    }\n        }\n        else if(c == '<')\n        {\n            if(i+1 <\
    \ len && brackets[i+1] == '<')\n            {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsuvyigdg.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsuvyigdg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        if(brackets[i] != brackets[brackets.length() - 1 - i])\n        {\n \
    \           result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzkfvsepb.d(20): Error: no property `length` for type `string`\n/tmp/tmpzkfvsepb.d(22):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzkfvsepb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    bool result = true;\n  \
    \  \n    for (i = 0; i < brackets_size; ++i)\n    {\n        if (brackets[i] ==\
    \ '<')\n        {\n            ++opening_brackets;\n        }\n        else if\
    \ (brackets[i] == '>')\n        {\n            ++closing_brackets;\n        }\n\
    \        else\n        {\n            result = false;\n        }\n    }\n    \n\
    \    if (opening_brackets != closing_brackets)\n    {\n        result = false;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpan9zrixo.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpan9zrixo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_next\
    \ = 0;\n    size_t closing_brackets_index_next = 0;\n    size_t opening_brackets_index_prev\
    \ = 0;\n    size_t closing_brackets_index_prev = 0;\n    size_t opening_brackets_index_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_prev = 0;\n    size_t opening_brackets_index_prev_prev\
    \ = 0;\n    size_t closing_brackets_index_prev_prev = 0;\n    size_t opening_brackets_index_next_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_next_prev = 0;\n    size_t opening_brackets_index_prev_next_prev\
    \ = 0;\n    size_t closing_brackets_index_prev_next_next_prev = 0;\n    size_t\
    \ opening_brackets_index_next_prev_prev = 0;\n    size_t closing_brackets_index_next_prev_next_prev\
    \ = 0;\n    size_t opening_brackets_index_prev_prev_prev = 0;\n    size_t closing_brackets_index_prev_prev_next_prev\
    \ = 0;\n    size_t opening_brackets_index_next_next_next_prev = 0;\n    size_t\
    \ closing_brackets_index_next_next_prev_prev = 0;\n    size_t opening_brackets_index_prev_next_next_prev\
    \ = 0;\n    size_t closing_brackets_index_prev_next_prev_prev = 0;\n    size_t\
    \ opening_brackets_index_next_prev_next_prev = 0;\n    size_t closing_brackets_index_next_prev_prev_prev\
    \ = 0;\n    size_t opening_brackets_index_prev_next_prev_prev = 0;\n    size_t\
    \ closing_brackets_index_prev_next_prev_next_prev = 0;\n    size_t opening_brackets_index_next_next_prev_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_prev_prev_prev_prev = 0;\n    size_t\
    \ opening_brackets_index_prev_next_prev_prev_prev = 0;\n    size_t closing_brackets_index_prev_next_prev_next_next_prev\
    \ = 0;\n    size_t opening_brackets_index_prev_prev_next_prev_prev = 0;\n    size_t\
    \ closing_brackets_index_prev_prev_next_prev_next_prev = 0;\n    size_t opening_brackets_index_next_next_prev_next_prev_prev\
    \ = 0;\n    size_t closing_brackets_index_next_prev_prev_prev_prev_prev = 0;\n\
    \    size_t opening_bracket\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj0slacab.d(56): Error: found `opening_bracket` when expecting
    `;` following statement\n/tmp/tmpj0slacab.d(57): Error: found `unittest` instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj0slacab.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    \n    for (i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if (brackets[i] == '<')\n        {\n            ++opening_brackets;\n\
    \        }\n        else if (brackets[i] == '>')\n        {\n            ++closing_brackets;\n\
    \        }\n    }\n    \n    return opening_brackets == closing_brackets;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu0r5fmag.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0r5fmag.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_next\
    \ = 0;\n    size_t closing_brackets_index_next = 0;\n    size_t opening_brackets_index_prev\
    \ = 0;\n    size_t closing_brackets_index_prev = 0;\n    size_t opening_brackets_index_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_prev = 0;\n    size_t opening_brackets_index_prev_next\
    \ = 0;\n    size_t closing_brackets_index_prev_next = 0;\n    size_t opening_brackets_index_next_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_next_prev = 0;\n    size_t opening_brackets_index_prev_next_next\
    \ = 0;\n    size_t closing_brackets_index_prev_next_next = 0;\n    size_t opening_brackets_index_next_next_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_next_next_prev = 0;\n    size_t\
    \ opening_brackets_index_prev_next_next_next = 0;\n    size_t closing_brackets_index_prev_next_next_next\
    \ = 0;\n    size_t opening_brackets_index_next_next_next_next_prev = 0;\n    size_t\
    \ closing_brackets_index_next_next_next_next_prev = 0;\n    size_t opening_brackets_index_prev_next_next_next_next\
    \ = 0;\n    size_t closing_brackets_index_prev_next_next_next_next = 0;\n    size_t\
    \ opening_brackets_index_next_next_next_next_prev = 0;\n    size_t closing_brackets_index_next_next_next_next_prev\
    \ = 0;\n    size_t opening_brackets_index_prev_next_next_next_next = 0;\n    size_t\
    \ closing_brackets_index_prev_next_next_next_next = 0;\n    size_t opening_brackets_index_next_next_next_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_next_next_next_prev = 0;\n    size_t\
    \ opening_brackets_index_prev_next_next_next_next = 0;\n    size_t closing_brackets_index_prev_next_next_next_next\
    \ = 0;\n    size_t opening_brackets_index_next_next_next_next_prev = 0;\n    size_t\
    \ closing_brackets_index_next_next_next_next_prev = 0;\n    size_t opening_brackets_index_prev_next_next_next_next\
    \ = 0;\n    size_t closing_brackets_index_prev_next_next_next_next = 0;\n    size_t\
    \ open\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm838kdag.d(56): Error: found `open` when expecting `;` following
    statement\n/tmp/tmpm838kdag.d(57): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm838kdag.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while (i < len) {\n        if (brackets[i] == '<')\
    \ {\n            i++;\n            if (j < len && brackets[j] == '>') {\n    \
    \            j++;\n            } else {\n                result = false;\n   \
    \         }\n        } else {\n            if (j < len && brackets[j] == '>')\
    \ {\n                j++;\n            } else {\n                result = false;\n\
    \            }\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyw1g1ua3.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyw1g1ua3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t opening_brackets_size = 0;\n   \
    \ size_t closing_brackets_size = 0;\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  size_t k = 0;\n    bool result = false;\n    \n    while (i < brackets_size)\n\
    \    {\n        if (brackets[i] == '<')\n        {\n            opening_brackets++;\n\
    \            opening_brackets_size++;\n        }\n        else if (brackets[i]\
    \ == '>')\n        {\n            closing_brackets++;\n            closing_brackets_size++;\n\
    \        }\n        i++;\n    }\n    \n    if (opening_brackets == closing_brackets)\n\
    \    {\n        result = true;\n    }\n    else\n    {\n        if (opening_brackets_size\
    \ == closing_brackets_size)\n        {\n            for (j = 0; j < opening_brackets;\
    \ j++)\n            {\n                if (brackets[j] != '>')\n             \
    \   {\n                    result = false;\n                    break;\n     \
    \           }\n            }\n        }\n        else\n        {\n           \
    \ for (j = 0; j < opening_brackets_size; j++)\n            {\n               \
    \ if (brackets[j] != '>')\n                {\n                    result = false;\n\
    \                    break;\n                }\n            }\n            for\
    \ (k = opening_brackets_size; k < closing_brackets_size; k++)\n            {\n\
    \                if (brackets[k] != '>')\n                {\n                \
    \    result = false;\n                    break;\n                }\n        \
    \    }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplkh1l2x0.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplkh1l2x0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        if(brackets[i] == '<') {\n\
    \            i++;\n            while(i < len && brackets[i] != '<') {\n      \
    \          i++;\n            }\n            j = i;\n            while(j < len\
    \ && brackets[j] != '>') {\n                j++;\n            }\n            if(j\
    \ == i) {\n                result = false;\n            }\n        }\n       \
    \ i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8jgn6q76.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8jgn6q76.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n        case '<':\n            if(brackets[j] == '>') {\n\
    \                i++;\n                j++;\n            } else {\n          \
    \      result = false;\n            }\n            break;\n        case '>':\n\
    \            if(brackets[j] == '<') {\n                i++;\n                j++;\n\
    \            } else {\n                result = false;\n            }\n      \
    \      break;\n        default:\n            i++;\n            j++;\n        \
    \    break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2xopfe0j.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2xopfe0j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    for (int i = 0; i < brackets.length(); i++)\n\t{\n\t\tchar c = brackets[i];\n\t\
    \tif (c != '<')\n\t\t\treturn false;\n\t\ti++;\n\t\twhile (i < brackets.length()\
    \ && brackets[i] != '>')\n\t\t\ti++;\n\t\tif (i >= brackets.length())\n\t\t\t\
    return false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg_0q35ho.d(19): Error: no property `length` for type `string`\n/tmp/tmpg_0q35ho.d(25):
    Error: no property `length` for type `string`\n/tmp/tmpg_0q35ho.d(27): Error:
    no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpg_0q35ho.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while (i < len) {\n        char c = brackets[i];\n\
    \        switch (c) {\n        case '<':\n            if (j < i) {\n         \
    \       char d = brackets[j];\n                if (d != '>') {\n             \
    \       result = false;\n                }\n            }\n            ++i;\n\
    \            break;\n        case '>':\n            if (j > i) {\n           \
    \     char d = brackets[j];\n                if (d != '<') {\n               \
    \     result = false;\n                }\n            }\n            ++i;\n  \
    \          break;\n        default:\n            ++i;\n            break;\n  \
    \      }\n        ++j;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppxozt54l.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppxozt54l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    for (int i = 0; i < brackets.length(); i++)\n\t{\n\t\tchar c = brackets[i];\n\t\
    \tint j = i + 1;\n\t\twhile (j < brackets.length() && brackets[j] == c)\n\t\t\t\
    j++;\n\t\tif (j == brackets.length())\n\t\t\treturn true;\n\t\tchar next = brackets[j];\n\
    \t\tif (next != c)\n\t\t\treturn false;\n\t\ti = j;\n\t}\n\treturn false;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbelzw_84.d(19): Error: no property `length` for type `string`\n/tmp/tmpbelzw_84.d(23):
    Error: no property `length` for type `string`\n/tmp/tmpbelzw_84.d(25): Error:
    no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpbelzw_84.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    bool result = true;\n\
    \    while(i < len) {\n        char c = brackets[i];\n        if(c == '<') {\n\
    \            if(brackets[i+1] == '>') {\n                i += 2;\n           \
    \ } else {\n                result = false;\n                break;\n        \
    \    }\n        } else if(c == '>') {\n            if(brackets[i+1] == '<') {\n\
    \                i += 2;\n            } else {\n                result = false;\n\
    \                break;\n            }\n        } else {\n            result =\
    \ false;\n            break;\n        }\n        i += 1;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nThis doesn't work. `correct_bracketing(\"\
    <<><>>\")` returns `true` but `correct_bracketing(\"<><<>\")` returns `false`.\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out!\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work. `correct_bracketing(\"<<><>>\")` returns `true` but\
    \ `correct_bracketing(\"<><<>\")` returns `false`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Thanks for pointing it out!\n<|/ c |>\n<| a dscore=1 |>\n<code>\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgci40vft.d(46): Error: declaration expected, not `<`\n/tmp/tmpgci40vft.d(49):
    Error: unterminated character constant\n/tmp/tmpgci40vft.d(55): Error: unterminated
    character constant\n/tmp/tmpgci40vft.d(66): Error: declaration expected, not `assert`\n/tmp/tmpgci40vft.d(67):
    Error: declaration expected, not `assert`\n/tmp/tmpgci40vft.d(68): Error: declaration
    expected, not `assert`\n/tmp/tmpgci40vft.d(69): Error: declaration expected, not
    `assert`\n/tmp/tmpgci40vft.d(70): Error: declaration expected, not `assert`\n/tmp/tmpgci40vft.d(71):
    Error: declaration expected, not `assert`\n/tmp/tmpgci40vft.d(72): Error: declaration
    expected, not `assert`\n/tmp/tmpgci40vft.d(73): Error: declaration expected, not
    `assert`\n/tmp/tmpgci40vft.d(74): Error: declaration expected, not `assert`\n/tmp/tmpgci40vft.d(75):
    Error: declaration expected, not `assert`\n/tmp/tmpgci40vft.d(76): Error: declaration
    expected, not `assert`\n/tmp/tmpgci40vft.d(77): Error: declaration expected, not
    `assert`\n/tmp/tmpgci40vft.d(78): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpgci40vft.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len && j < len) {\n        char c = brackets[i];\n\
    \        char d = brackets[j];\n        if(c == '<') {\n            if(brackets[j+1]\
    \ != '>') {\n                result = false;\n                break;\n       \
    \     }\n            i += 2;\n            j += 2;\n        } else if(c == '>')\
    \ {\n            if(brackets[j+1] != '<') {\n                result = false;\n\
    \                break;\n            }\n            i += 2;\n            j +=\
    \ 2;\n        } else {\n            if(brackets[j+1] != c) {\n               \
    \ result = false;\n                break;\n            }\n            i += 2;\n\
    \            j += 2;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6zl1u7xn.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zl1u7xn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        if(brackets[i] != '<')\n        {\n            result = false;\n    \
    \        break;\n        }\n    }\n    for(int i = brackets.length()-1; i >= 0;\
    \ i--)\n    {\n        if(brackets[i] != '>')\n        {\n            result =\
    \ false;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmbbk16f3.d(20): Error: no property `length` for type `string`\n/tmp/tmpmbbk16f3.d(28):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpmbbk16f3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    bool\
    \ result = true;\n    \n    while (i<brackets_size)\n    {\n        if (brackets[i]\
    \ == '<')\n        {\n            opening_brackets++;\n        }\n        else\
    \ if (brackets[i] == '>')\n        {\n            closing_brackets++;\n      \
    \  }\n        i++;\n    }\n    \n    if (opening_brackets != closing_brackets)\n\
    \    {\n        result = false;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp382_ueyw.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp382_ueyw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_88zeqi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_88zeqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    bool result = true;\n    for(size_t\
    \ i = 0; i < brackets_size; ++i)\n    {\n        char c = brackets[i];\n     \
    \   if(c == '<')\n        {\n            opening_brackets_size++;\n        }\n\
    \        else if(c == '>')\n        {\n            closing_brackets_size++;\n\
    \        }\n        else\n        {\n            result = false;\n           \
    \ break;\n        }\n    }\n    if(opening_brackets_size == closing_brackets_size)\n\
    \    {\n        result = true;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_k4a5fef.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_k4a5fef.d", "-I/tmp"]\n'''
  stdout: b''
