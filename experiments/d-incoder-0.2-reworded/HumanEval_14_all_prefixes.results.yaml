name: HumanEval_14_all_prefixes
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    int len = string.length();\n    \n    string[] result = new string[len];\n\
    \    \n    for (int i = 0; i < len; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpszaujd8m.d(11): Error: no property `length` for type `string`\\\
    n/tmp/tmpszaujd8m.d(13): Error: `string` is used as a type\\n/tmp/tmpszaujd8m.d(13):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpszaujd8m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int startIndex) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < string.length; ++i)\n    {\n        result[i]\
    \ = string.Substring(i);\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\n\
    string[] all_substrings(string string, int startIndex, int endIndex) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = startIndex; i\
    \ < endIndex; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n \
    \   return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = startIndex; i < endIndex; i += step)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0tkn69hq.d(93): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0tkn69hq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i++] = string.substr(0, i);\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxtut2bvp.d(11): Error: `string` is used as a type\\n/tmp/tmpxtut2bvp.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxtut2bvp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqrbhg46_.d(11): Error: `string` is used as a type\\n/tmp/tmpqrbhg46_.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpqrbhg46_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end, int step) \n{\n    string[] \nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv11unwly.d(102): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpv11unwly.d(110): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpv11unwly.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return array of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0uzdcqt_.d(112): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0uzdcqt_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, bool include_end) \n{\n    string[] result = new string\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4qm8b0_a.d(102): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmp4qm8b0_a.d(102): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4qm8b0_a.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw263hqqp.d(11): Error: `string` is used as a type\\n/tmp/tmpw263hqqp.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpw263hqqp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return array of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\"\
    , \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.Length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.Length];\n    int i = 0;\n    while(i <\
    \ string.Length)\n    {\n        result[i++] = string.Substring(i);\n    }\n \
    \   return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(start, i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(start, length);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ end) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ length, end);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substring\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_gpead6s.d(106): Error: semicolon expected, not `unittest`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_gpead6s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end, int step) \n{\n    string[] result = new string[string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaeo2t5gk.d(102): Error: found `unittest` when expecting `]`\\\
    n/tmp/tmpaeo2t5gk.d(103): Error: semicolon expected, not `{`\\n/tmp/tmpaeo2t5gk.d(110):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaeo2t5gk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length, step);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int step, int end) \n{\n    string\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp20d1h0ki.d(102): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmp20d1h0ki.d(110): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmp20d1h0ki.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0889lspp.d(11): Error: `string` is used as a type\\n/tmp/tmp0889lspp.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp0889lspp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n   \
    \ {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbh2_bpzw.d(101): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbh2_bpzw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzm30jt3v.d(11): Error: `string` is used as a type\\n/tmp/tmpzm30jt3v.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpzm30jt3v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end, int step) \n{\n    string\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv4x2ip0f.d(102): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpv4x2ip0f.d(110): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpv4x2ip0f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa4mqynbd.d(11): Error: `string` is used as a type\\n/tmp/tmpa4mqynbd.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpa4mqynbd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0sssr95u.d(102): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0sssr95u.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0, i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmnnoyr19.d(11): Error: `string` is used as a type\\n/tmp/tmpmnnoyr19.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpmnnoyr19.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end, int step) \n{\n    string[] \nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk1ff9cvk.d(102): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpk1ff9cvk.d(110): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpk1ff9cvk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpafh1rxfr.d(11): Error: `string` is used as a type\\n/tmp/tmpafh1rxfr.d(11):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpafh1rxfr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
