name: HumanEval_162_string_to_md5
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string 'text',\
  \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
  \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
  \n    \n*/\nNullable!(string) string_to_md5(string text) \n"
tests: "unittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
  \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
  \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
  \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
  A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
  );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
  \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
completions: ["{\n    if (text == \"\") return null;\n    \n    MD5 md5 = MD5();\n\
    \    md5.update(text.as_bytes);\n    return md5.digest();\n}", "{\n    string\
    \ md5 = null;\n    \n    if (text != \"\")\n    {\n        md5 = md5(text);\n\
    \    }\n    \n    return md5;\n}", "{\n    MD5 md5 = MD5();\n    md5.update(text.as_bytes);\n\
    \    return md5.digest();\n}", "{\n    MD5 md5 = MD5();\n    md5.update(text.as_bytes);\n\
    \    return md5.digest();\n}", "{\n    MD5 md5 = MD5();\n    md5.update(text.as_bytes);\n\
    \    return md5.digest();\n}", "{\n    Nullable!(string) hash = null;\n    \n\
    \    if (text != \"\")\n    {\n        hash = md5(text);\n    }\n    \n    return\
    \ hash;\n}", "{\n    if (text == \"\")\n        return null;\n    \n    MD5 md5\
    \ = MD5();\n    md5.update(text.as_bytes());\n    return md5.digest();\n}", "{\n\
    \    if (text == \"\")\n        return null;\n    \n    MD5 md5 = MD5.create();\n\
    \    md5.update(text);\n    md5.finalize();\n    \n    return md5.digest();\n}",
  "{\n    if (text.length == 0)\n        return null;\n    \n    MD5 md5 = MD5();\n\
    \    md5.update(text.toCharArray());\n    \n    return md5.digest();\n}", "{\n\
    \    if (text == \"\")\n        return null;\n    \n    MD5 md5 = MD5();\n   \
    \ md5.update(text.asBytes());\n    \n    return md5.digest();\n}", "{\n    if\
    \ (text == \"\")\n        return null;\n    \n    MD5 md5 = MD5();\n    md5.update(text.as_bytes());\n\
    \    return md5.digest();\n}", "{\n    if (text.empty())\n        return null;\n\
    \    \n    MD5 md5 = MD5();\n    md5.update(text.as_bytes());\n    return md5.digest();\n\
    }", "{\n    string md5 = null;\n    \n    if (text != \"\")\n        md5 = md5(text);\n\
    \    \n    return md5;\n}", "{\n    if (text == \"\")\n        return null;\n\
    \    \n    MD5 md5 = MD5();\n    md5.update(text.asBytes());\n    return md5.digest();\n\
    }", "{\n    Nullable!(string) hash = null;\n    if (text != \"\")\n    {\n   \
    \     hash = md5(text);\n    }\n    return hash;\n}", "{\n    if (text == \"\"\
    )\n        return null;\n    \n    MD5 md5 = MD5();\n    md5.update(text.as_bytes);\n\
    \    return md5.finish();\n}", "{\n    if (text.empty())\n        return null;\n\
    \    \n    MD5 md5 = MD5();\n    md5.update(text.as_bytes());\n    return md5.digest();\n\
    }", "{\n    MD5 md5 = MD5();\n    md5.update(text.as_bytes());\n    return md5.digest();\n\
    }", "{\n    MD5 md5 = MD5();\n    md5.update(text.asBytes());\n    return md5.digest();\n\
    }", "{\n    if (text.empty())\n        return null;\n    \n    MD5 md5 = MD5();\n\
    \    md5.update(text.as_bytes());\n    return md5.finish();\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
