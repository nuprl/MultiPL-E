name: HumanEval_65_circular_shift
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits of\
  \ the integer x, shift the digits right by shift\n    and return the result as a\
  \ string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L,\
  \ 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring\
  \ circular_shift(long x, long shift) \n"
tests: "unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
  \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
  \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
  \ 101L) == \"11\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    long remainder;\n    \n    if (shift\
    \ > __digits__) \n    {\n        shift = __digits__ - shift;\n    }\n    \n  \
    \  while (shift >= __digits__) \n    {\n        remainder = __digits__ - shift;\n\
    \        result += __digits__ - remainder;\n        shift -= __digits__;\n   \
    \ }\n    \n    while (shift >= 0) \n    {\n        remainder = x % __digits__;\n\
    \        result += __digits__ - remainder;\n        x /= __digits__;\n       \
    \ shift -= __digits__;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x > 0)\n   \
    \     {\n            remainder = x % 10;\n            x /= 10;\n            result\
    \ += to_string(remainder);\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x > 0)\n\
    \        {\n            remainder = x % 10;\n            x /= 10;\n          \
    \  result += to_string(remainder);\n        }\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    long m = 1;\n    long\
    \ tmp;\n    \n    while (shift > 0)\n    {\n        tmp = (n >> shift);\n    \
    \    m <<= shift;\n        m |= tmp;\n        shift -= (shift & 1);\n    }\n \
    \   \n    while (m != 0)\n    {\n        result += (char)(m % 10);\n        m\
    \ /= 10;\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long remainder;\n    \n    if (shift > digits(x))\n    {\n        shift =\
    \ digits(x);\n    }\n    \n    remainder = x % 10;\n    \n    while (shift > 0)\n\
    \    {\n        result += remainder;\n        x /= 10;\n        shift -= 1;\n\
    \        remainder = x % 10;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n\
    \        {\n            result += to_string(-x);\n            x /= 10;\n     \
    \   }\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long n = x;\n    long carry = 0;\n    \n    while(n > 0)\n    {\n        long\
    \ digit = n % 10;\n        result += digits[digit];\n        carry = digit * 10\
    \ + carry;\n        n /= 10;\n    }\n    \n    if(carry > 0)\n    {\n        result\
    \ += digits[carry];\n    }\n    \n    for(int i = 0; i < shift; i++)\n    {\n\
    \        result += \"0\";\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n\
    \        {\n            result += to_string(-x);\n            x /= 10;\n     \
    \   }\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long remainder;\n    \n    while (x) {\n        remainder = x % 10;\n     \
    \   x /= 10;\n        if (remainder >= shift) {\n            result += remainder;\n\
    \            x -= remainder;\n        }\n    }\n    \n    if (result != \"\")\
    \ {\n        result += remainder;\n    }\n    \n    return result;\n}", "{\n \
    \   string result = \"\";\n    long n = x;\n    long m = shift % n;\n    long\
    \ r = shift / n;\n    \n    while(m != 0)\n    {\n        result += n % 10;\n\
    \        n /= 10;\n        m /= 10;\n    }\n    \n    while(n > 0)\n    {\n  \
    \      result += n % 10;\n        n /= 10;\n    }\n    \n    while(m > 0)\n  \
    \  {\n        result += n % 10;\n        n /= 10;\n        m /= 10;\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long digit =\
    \ x;\n    long remainder;\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        result += char(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (shift < 0)\n    {\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        result += char(remainder);\n\
    \        shift += 1;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n    \
    \    remainder = x % 10;\n        x /= 10;\n        shift -= digits(x);\n    \
    \    result += remainder;\n    }\n    \n    while (shift > 0)\n    {\n       \
    \ remainder = x % 10;\n        x /= 10;\n        shift -= digits(x);\n       \
    \ result += remainder;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    while(x != 0)\n    {\n        remainder = x\
    \ % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while ((remainder = x % 10) != 0)\n    {\n        result = to_string(remainder)\
    \ + result;\n        x = x / 10;\n    }\n    \n    while (shift > 0)\n    {\n\
    \        if (shift > result.length())\n        {\n            result += to_string(x);\n\
    \        }\n        else\n        {\n            result += to_string(x % 10) +\
    \ result;\n            x /= 10;\n            shift -= 1;\n        }\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > __digits.length)\n    {\n        shift = __digits.length\
    \ - shift;\n    }\n    \n    remainder = __digits.length - shift;\n    \n    while\
    \ (remainder > 0)\n    {\n        result += __digits[__digits.length - remainder];\n\
    \        remainder--;\n    }\n    \n    result += __digits[shift];\n    \n   \
    \ return result;\n}", "{\n    string result = \"\";\n    long digit;\n    \n \
    \   while (shift > 0)\n    {\n        digit = x % 10;\n        x /= 10;\n    \
    \    result += digit;\n        shift -= 1;\n    }\n    \n    while (x > 0)\n \
    \   {\n        digit = x % 10;\n        x /= 10;\n        result += digit;\n \
    \   }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = 1;\n    long r = 1;\n    long temp;\n    \n    while (n > 0)\n \
    \   {\n        temp = r * m;\n        result += to_string(temp % 10);\n      \
    \  m += 1;\n        r /= 10;\n        n -= temp;\n    }\n    \n    if (shift >\
    \ result.length())\n    {\n        string reversed = \"\";\n        \n       \
    \ for (long i = result.length() - 1; i > shift; i--)\n        {\n            reversed\
    \ = reversed + result[i];\n        }\n        \n        return reversed;\n   \
    \ }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > digits(x))\n    {\n        remainder = x % 10;\n      \
    \  x /= 10;\n        shift -= digits(x);\n        result += remainder * pow(10,\
    \ shift);\n    }\n    \n    while (shift > 0)\n    {\n        remainder = x %\
    \ 10;\n        x /= 10;\n        shift -= digits(x);\n        result += remainder\
    \ * pow(10, shift);\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long digit = x;\n    long remainder;\n    \n    while (shift >\
    \ 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n  \
    \      result += string(remainder);\n        shift--;\n    }\n    \n    while\
    \ (shift < 0)\n    {\n        remainder = digit % 10;\n        digit = digit /\
    \ 10;\n        result += string(remainder);\n        shift++;\n    }\n    \n \
    \   return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
