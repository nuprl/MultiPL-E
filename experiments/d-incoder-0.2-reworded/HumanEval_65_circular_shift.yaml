name: HumanEval_65_circular_shift
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits of\
  \ the integer x, shift the digits right by shift\n    and return the result as a\
  \ string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L,\
  \ 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring\
  \ circular_shift(long x, long shift) \n"
tests: "unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
  \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
  \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
  \ 101L) == \"11\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    long remainder;\n    \n    if (shift\
    \ > __digits__) \n    {\n        shift = __digits__ - shift;\n    }\n    \n  \
    \  while (shift >= __digits__) \n    {\n        remainder = __digits__ - shift;\n\
    \        result += __digits__ - remainder;\n        shift -= __digits__;\n   \
    \ }\n    \n    while (shift >= 0) \n    {\n        remainder = x % __digits__;\n\
    \        result += __digits__ - remainder;\n        x /= __digits__;\n       \
    \ shift -= __digits__;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x > 0)\n   \
    \     {\n            remainder = x % 10;\n            x /= 10;\n            result\
    \ += to_string(remainder);\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x > 0)\n\
    \        {\n            remainder = x % 10;\n            x /= 10;\n          \
    \  result += to_string(remainder);\n        }\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    long m = 1;\n    long\
    \ tmp;\n    \n    while (shift > 0)\n    {\n        tmp = (n >> shift);\n    \
    \    m <<= shift;\n        m |= tmp;\n        shift -= (shift & 1);\n    }\n \
    \   \n    while (m != 0)\n    {\n        result += (char)(m % 10);\n        m\
    \ /= 10;\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long remainder;\n    \n    if (shift > digits(x))\n    {\n        shift =\
    \ digits(x);\n    }\n    \n    remainder = x % 10;\n    \n    while (shift > 0)\n\
    \    {\n        result += remainder;\n        x /= 10;\n        shift -= 1;\n\
    \        remainder = x % 10;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n\
    \        {\n            result += to_string(-x);\n            x /= 10;\n     \
    \   }\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long n = x;\n    long carry = 0;\n    \n    while(n > 0)\n    {\n        long\
    \ digit = n % 10;\n        result += digits[digit];\n        carry = digit * 10\
    \ + carry;\n        n /= 10;\n    }\n    \n    if(carry > 0)\n    {\n        result\
    \ += digits[carry];\n    }\n    \n    for(int i = 0; i < shift; i++)\n    {\n\
    \        result += \"0\";\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n\
    \        {\n            result += to_string(-x);\n            x /= 10;\n     \
    \   }\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long remainder;\n    \n    while (x) {\n        remainder = x % 10;\n     \
    \   x /= 10;\n        if (remainder >= shift) {\n            result += remainder;\n\
    \            x -= remainder;\n        }\n    }\n    \n    if (result != \"\")\
    \ {\n        result += remainder;\n    }\n    \n    return result;\n}", "{\n \
    \   string result = \"\";\n    long n = x;\n    long m = shift % n;\n    long\
    \ r = shift / n;\n    \n    while(m != 0)\n    {\n        result += n % 10;\n\
    \        n /= 10;\n        m /= 10;\n    }\n    \n    while(n > 0)\n    {\n  \
    \      result += n % 10;\n        n /= 10;\n    }\n    \n    while(m > 0)\n  \
    \  {\n        result += n % 10;\n        n /= 10;\n        m /= 10;\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long digit =\
    \ x;\n    long remainder;\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        result += char(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (shift < 0)\n    {\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        result += char(remainder);\n\
    \        shift += 1;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n    \
    \    remainder = x % 10;\n        x /= 10;\n        shift -= digits(x);\n    \
    \    result += remainder;\n    }\n    \n    while (shift > 0)\n    {\n       \
    \ remainder = x % 10;\n        x /= 10;\n        shift -= digits(x);\n       \
    \ result += remainder;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    while(x != 0)\n    {\n        remainder = x\
    \ % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while ((remainder = x % 10) != 0)\n    {\n        result = to_string(remainder)\
    \ + result;\n        x = x / 10;\n    }\n    \n    while (shift > 0)\n    {\n\
    \        if (shift > result.length())\n        {\n            result += to_string(x);\n\
    \        }\n        else\n        {\n            result += to_string(x % 10) +\
    \ result;\n            x /= 10;\n            shift -= 1;\n        }\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > __digits.length)\n    {\n        shift = __digits.length\
    \ - shift;\n    }\n    \n    remainder = __digits.length - shift;\n    \n    while\
    \ (remainder > 0)\n    {\n        result += __digits[__digits.length - remainder];\n\
    \        remainder--;\n    }\n    \n    result += __digits[shift];\n    \n   \
    \ return result;\n}", "{\n    string result = \"\";\n    long digit;\n    \n \
    \   while (shift > 0)\n    {\n        digit = x % 10;\n        x /= 10;\n    \
    \    result += digit;\n        shift -= 1;\n    }\n    \n    while (x > 0)\n \
    \   {\n        digit = x % 10;\n        x /= 10;\n        result += digit;\n \
    \   }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = 1;\n    long r = 1;\n    long temp;\n    \n    while (n > 0)\n \
    \   {\n        temp = r * m;\n        result += to_string(temp % 10);\n      \
    \  m += 1;\n        r /= 10;\n        n -= temp;\n    }\n    \n    if (shift >\
    \ result.length())\n    {\n        string reversed = \"\";\n        \n       \
    \ for (long i = result.length() - 1; i > shift; i--)\n        {\n            reversed\
    \ = reversed + result[i];\n        }\n        \n        return reversed;\n   \
    \ }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > digits(x))\n    {\n        remainder = x % 10;\n      \
    \  x /= 10;\n        shift -= digits(x);\n        result += remainder * pow(10,\
    \ shift);\n    }\n    \n    while (shift > 0)\n    {\n        remainder = x %\
    \ 10;\n        x /= 10;\n        shift -= digits(x);\n        result += remainder\
    \ * pow(10, shift);\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long digit = x;\n    long remainder;\n    \n    while (shift >\
    \ 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n  \
    \      result += string(remainder);\n        shift--;\n    }\n    \n    while\
    \ (shift < 0)\n    {\n        remainder = digit % 10;\n        digit = digit /\
    \ 10;\n        result += string(remainder);\n        shift++;\n    }\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    long remainder;\n \
    \   \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   if(x < 0)\n    {\n        while(x < 0)\n        {\n            remainder =\
    \ x % 10;\n            x /= 10;\n            result += to_string(remainder);\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n        remainder\
    \ = x;\n        x = remainder % 10;\n        shift = shift - digits(x);\n    }\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x =\
    \ x / 10;\n        result = remainder + result;\n        shift = shift - 1;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long m = shift % 10;\n    long r = shift / 10;\n    \n    while(n\
    \ > 0)\n    {\n        result += n % 10 + m;\n        n /= 10;\n        m += r;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    if (shift > numeric_limits<long>::digits)\n        shift\
    \ = numeric_limits<long>::digits;\n    \n    remainder = x % shift;\n    \n  \
    \  while (remainder != 0) {\n        result = to_string(remainder) + result;\n\
    \        remainder = x % shift;\n        x /= shift;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long m = 1;\n\
    \    while(m <= shift)\n    {\n        n += m;\n        m <<= 1;\n    }\n    while(n\
    \ >= 1)\n    {\n        result += char(n%10);\n        n /= 10;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long m = shift\
    \ % n;\n    long r = shift / n;\n    string digits = to_string(n);\n    string\
    \ reversed = \"\";\n    \n    while (m > 0) {\n        reversed = digits[r] +\
    \ reversed;\n        m--;\n        r--;\n    }\n    \n    if (shift > n) {\n \
    \       reversed = digits[r] + reversed;\n    }\n    \n    result = digits + reversed;\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long digits\
    \ = digits(x);\n    long remainder = x % 10;\n    long shift = shift % digits;\n\
    \    long shift2 = shift / digits;\n    long shift3 = shift / digits;\n    long\
    \ shift4 = shift / digits;\n    long shift5 = shift / digits;\n    long shift6\
    \ = shift / digits;\n    long shift7 = shift / digits;\n    long shift8 = shift\
    \ / digits;\n    long shift9 = shift / digits;\n    long shift10 = shift / digits;\n\
    \    long shift11 = shift / digits;\n    long shift12 = shift / digits;\n    long\
    \ shift13 = shift / digits;\n    long shift14 = shift / digits;\n    long shift15\
    \ = shift / digits;\n    long shift16 = shift / digits;\n    long shift17 = shift\
    \ / digits;\n    long shift18 = shift / digits;\n    long shift19 = shift / digits;\n\
    \    long shift20 = shift / digits;\n    long shift21 = shift / digits;\n    long\
    \ shift22 = shift / digits;\n    long shift23 = shift / digits;\n    long shift24\
    \ = shift / digits;\n    long shift25 = shift / digits;\n    long shift26 = shift\
    \ / digits;\n    long shift27 = shift / digits;\n    long shift28 = shift / digits;\n\
    \    long shift29 = shift / digits;\n    long shift30 = shift / digits;\n    long\
    \ shift31 = shift / digits;\n    long shift32 = shift / digits;\n    long shift33\
    \ = shift / digits;\n    long shift34 = shift / digits;\n    long shift35 = shift\
    \ / digits;\n    long shift36 = shift / digits;\n    long shift37 = shift / digits;\n\
    \    long shift38 = shift / digits;\n    long shift39 = shift / digits;\n    long\
    \ shift40 = shift / digits;\n    long shift41 = shift / digits;\n    long shift42\
    \ = shift / digits;\n    long shift43 = shift / digits;\n    long shift44 = shift\
    \ / digits;\n    long shift45 = shift / digits;\n    long shift46 = shift / digits;\n\
    \    long shift47 = shift / digits;\n    long shift48 = shift / digits;\n    long\
    \ shift49 = shift / digits;\n    long shift50 = shift / digits;\n    long ", "{\n\
    \    string result = \"\";\n    long n = x;\n    long m = n;\n    long temp;\n\
    \    \n    while(m > 0)\n    {\n        temp = m % 10;\n        m = m / 10;\n\
    \        result = temp + result;\n    }\n    \n    while(shift > 0)\n    {\n \
    \       temp = n % 10;\n        n = n / 10;\n        result = temp + result;\n\
    \        shift--;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long digit = x;\n    long remainder;\n    \n    while(shift > 0)\n\
    \    {\n        remainder = digit % 10;\n        digit = digit / 10;\n       \
    \ result += char(remainder);\n        shift -= 1;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += char(remainder);\n        shift -= 1;\n    }\n    \n    return\
    \ result;\n}\n/*\nReturn the number of digits in x\n*/\nlong digits(long x) \n\
    {\n    long digits = 0;\n    \n    while(x > 0)\n    {\n        x /= 10;\n   \
    \     digits += 1;\n    }\n    \n    return digits;\n}\n/*\nReturn the number\
    \ of digits in x\n*/\nlong digits(long x) \n{\n    long digits = 0;\n    \n  \
    \  while(x > 0)\n    {\n        x /= 10;\n        digits += 1;\n    }\n    \n\
    \    return digits;\n}\n/*\nReturn the number of digits in x\n*/\nlong digits(long\
    \ x) \n{\n    long digits = 0;\n    \n    while(x > 0)\n    {\n        x /= 10;\n\
    \        digits += 1;\n    }\n    \n    return digits;\n}\n/*\nReturn the number\
    \ of digits in x\n*/\nlong digits(long x) \n{\n    long digits = 0;\n    \n  \
    \  while(x > 0)\n    {\n        x /= 10;\n        digits += 1;\n    }\n    \n\
    \    return digits;\n}\n/*\nReturn the number of digits in x\n*/\nlong digits(long\
    \ x) \n{\n    long digits = 0;\n    \n    while(x > 0)\n    {\n        x /= 10;\n\
    \        digits += 1;\n    }\n    \n    return digits;\n}\n/*\nReturn the number\
    \ of digits in x\n*/\nlong digits(long x) \n{\n    long digits = 0;\n    \n  \
    \  while(x > 0)\n    {\n        x /= 10;\n        digits += 1;\n    }\n    \n\
    \    return digits;\n}\n/*\nReturn the number of digits in x\n*/\nlong digits(long\
    \ x) \n{\n    long digits = 0;\n    \n    while(x > 0)\n    {\n        x /= 10;\n\
    \        digits += 1;\n    }\n    \n    return digits;\n}\n/*\nReturn the number\
    \ of digits in x\n*/\nlong digits(long x) \n{\n    long digits = 0;\n    \n  \
    \  while(x > 0)\n    {\n        x /= 10;\n        digits += 1;\n    }\n    ",
  "{\n    string result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long carry = 0;\n    \n    for(long i = 0; i < shift; i++)\n    {\n     \
    \   long digit = n % 10;\n        result += digits[digit];\n        carry = n\
    \ / 10;\n        n = carry;\n    }\n    \n    if(carry > 0)\n        result +=\
    \ digits[carry];\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long remainder;\n    \n    while (shift > 0)\n    {\n        remainder =\
    \ x % 10;\n        x /= 10;\n        result += to_string(remainder);\n       \
    \ shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder = x %\
    \ 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > digits(x))\n    {\n        remainder = x;\n        \n \
    \       while (shift > digits(remainder))\n        {\n            remainder =\
    \ remainder % 10;\n            shift--;\n        }\n        \n        result =\
    \ to_string(remainder);\n    }\n    else\n    {\n        while (shift > 0)\n \
    \       {\n            remainder = x % 10;\n            x = x / 10;\n        \
    \    \n            if (shift > digits(x))\n            {\n                remainder\
    \ = x;\n                \n                while (shift > digits(remainder))\n\
    \                {\n                    remainder = remainder % 10;\n        \
    \            shift--;\n                }\n                \n                result\
    \ = to_string(remainder) + result;\n            }\n            else\n        \
    \    {\n                result = to_string(remainder) + result;\n            \
    \    shift--;\n            }\n        }\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long digit;\n\
    \    \n    while (shift > 0)\n    {\n        digit = x % 10;\n        x /= 10;\n\
    \        result += digit;\n        shift -= 1;\n    }\n    \n    while (x > 0)\n\
    \    {\n        digit = x % 10;\n        x /= 10;\n        result += digit;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ digit = x;\n    long remainder;\n    \n    while (shift > 0)\n    {\n      \
    \  remainder = digit % 10;\n        digit = digit / 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (shift < 0)\n    {\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        result += to_string(remainder);\n\
    \        shift += 1;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n    \
    \    shift = digits(x);\n    }\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift--;\n    }\n    \n    while (shift < digits(x))\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift++;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long remainder;\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder = x\
    \ % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = n;\n    long i = shift;\n    \n    while(m > 0)\n    {\n       \
    \ result += (char)(n % 10 + 10);\n        n /= 10;\n        m /= 10;\n       \
    \ i -= 1;\n    }\n    \n    while(i > 0)\n    {\n        result += (char)(n %\
    \ 10 + 10);\n        n /= 10;\n        i -= 1;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    long m = shift % n;\n\
    \    long d = n % m;\n    long r = m / d;\n    long s = shift / d;\n    \n   \
    \ for(long i = 0; i < s; i++)\n    {\n        result += to_string(r);\n      \
    \  r *= 10;\n    }\n    \n    for(long i = 0; i < d; i++)\n    {\n        result\
    \ += to_string(n);\n        n *= 10;\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift < 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift += 1;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n    long\
    \ s = n - m;\n    \n    for(long i = 0; i < s; i++)\n    {\n        result +=\
    \ char(r % 10);\n        r = r / 10;\n    }\n    \n    for(long i = 0; i < m;\
    \ i++)\n    {\n        result += char(r % 10);\n        r = r / 10;\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > digits(x))\n    {\n        shift = digits(x);\n    }\n\
    \    \n    for(long i = shift; i > 0; i--)\n    {\n        remainder = x % 10;\n\
    \        x /= 10;\n        result += remainder;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    while (x) {\n\
    \        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \    }\n    \n    if (shift > result.length()) {\n        shift = result.length();\n\
    \    }\n    \n    string reversed = \"\";\n    \n    for (long i = 0; i < shift;\
    \ i++) {\n        reversed += result[i];\n    }\n    \n    return reversed + result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n        shift -= 1;\n    }\n    \n    while (x != 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long m = shift % n;\n    long r = n % m;\n    long s = n - m;\n\
    \    \n    for(long i = m; i > 0; i--)\n    {\n        result += char(r % 10);\n\
    \        r = r / 10;\n    }\n    \n    for(long i = s; i > 0; i--)\n    {\n  \
    \      result += char(r % 10);\n        r = r / 10;\n    }\n    \n    result +=\
    \ char(r % 10);\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long digits = digits(x);\n    long shift = shift % digits;\n    long remainder\
    \ = x % digits;\n    long digit = x;\n    long carry = 0;\n    \n    while (shift\
    \ > 0) {\n        digit = digit * 10 + remainder;\n        remainder = digit %\
    \ 10;\n        digit = digit / 10;\n        carry = carry + remainder;\n     \
    \   shift = shift - 1;\n    }\n    \n    if (carry > 0) {\n        result = to_string(carry)\
    \ + result;\n    }\n    \n    while (shift < digits) {\n        digit = digit\
    \ / 10;\n        carry = carry + digit;\n        shift = shift + 1;\n    }\n \
    \   \n    if (carry > 0) {\n        result = to_string(carry) + result;\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    long remainder;\n \
    \   \n    if (shift > digits(x))\n    {\n        shift = digits(x);\n    }\n \
    \   \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long digit =\
    \ x;\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        result += to_string(remainder);\n\
    \        shift--;\n    }\n    \n    while(shift < 0)\n    {\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        result += to_string(remainder);\n\
    \        shift++;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n    \
    \    shift = digits(x);\n    }\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += char(remainder);\n        shift\
    \ -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder = x % 10;\n\
    \        x /= 10;\n        result += char(remainder);\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long d = 1;\n\
    \    long shift2 = shift;\n    \n    while (n > 0)\n    {\n        long r = n\
    \ % 10;\n        result += r + d;\n        n /= 10;\n        d *= 10;\n      \
    \  shift2--;\n    }\n    \n    while (shift2 > 0)\n    {\n        result += n\
    \ % 10;\n        n /= 10;\n        shift2--;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long digit = x;\n    long carry = 0;\n\
    \    \n    while (shift > 0)\n    {\n        digit = digit * 10 + carry;\n   \
    \     carry = digit / 10;\n        digit = digit % 10;\n        \n        result\
    \ += digit;\n        shift -= 1;\n    }\n    \n    if (carry > 0)\n        result\
    \ += carry;\n    \n    return result;\n}", "{\n    string result = \"\";\n   \
    \ long n = x;\n    long m = n;\n    long r = shift;\n    \n    while (r > 0)\n\
    \    {\n        long t = m;\n        m = n;\n        n = t;\n        r /= 10;\n\
    \    }\n    \n    while (m != 0)\n    {\n        result += (char) ('0' + m % 10);\n\
    \        m /= 10;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long remainder = 0;\n    \n    while (shift >\
    \ 0)\n    {\n        remainder = n % 10;\n        n /= 10;\n        result +=\
    \ char(remainder);\n        shift -= 1;\n    }\n    \n    while (n > 0)\n    {\n\
    \        remainder = n % 10;\n        n /= 10;\n        result += char(remainder);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while (x) {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n    }\n    \n    while (shift)\
    \ {\n        remainder = shift % 10;\n        shift /= 10;\n        result +=\
    \ to_string(remainder);\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    if (shift > numeric_limits<long>::digits)\
    \ {\n        shift = numeric_limits<long>::digits;\n    }\n    \n    while (shift\
    \ > 0) {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (shift < 0) {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift += 1;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long remainder;\n    \n    if (shift > numeric_digits(x))\n    {\n\
    \        remainder = x % 10;\n        x /= 10;\n        shift -= numeric_digits(x);\n\
    \        result += to_string(remainder);\n    }\n    \n    while (shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        shift -= numeric_digits(x);\n\
    \        result += to_string(remainder);\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long digits = digits(x);\n    long shift = shift\
    \ % digits;\n    long remainder = x % digits;\n    long digit = remainder;\n \
    \   \n    while (shift > 0)\n    {\n        digit = digit * 10L + remainder;\n\
    \        remainder = digit % digits;\n        shift = shift - 1;\n    }\n    \n\
    \    result += to_string(digit);\n    \n    if (shift > 0)\n    {\n        result\
    \ += to_string(digits);\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long m = 1;\n    long shift2 = shift;\n    long\
    \ carry = 0;\n    \n    while(n > 0)\n    {\n        long digit = n % 10;\n  \
    \      result += digits[digit];\n        n /= 10;\n        \n        long digit2\
    \ = n % 10;\n        result += digits[digit2];\n        n /= 10;\n        \n \
    \       long digit3 = n % 10;\n        result += digits[digit3];\n        n /=\
    \ 10;\n        \n        long digit4 = n % 10;\n        result += digits[digit4];\n\
    \        n /= 10;\n        \n        long digit5 = n % 10;\n        result +=\
    \ digits[digit5];\n        n /= 10;\n        \n        long digit6 = n % 10;\n\
    \        result += digits[digit6];\n        n /= 10;\n        \n        long digit7\
    \ = n % 10;\n        result += digits[digit7];\n        n /= 10;\n        \n \
    \       long digit8 = n % 10;\n        result += digits[digit8];\n        n /=\
    \ 10;\n        \n        long digit9 = n % 10;\n        result += digits[digit9];\n\
    \        n /= 10;\n        \n        long digit10 = n % 10;\n        result +=\
    \ digits[digit10];\n        n /= 10;\n        \n        long digit11 = n % 10;\n\
    \        result += digits[digit11];\n        n /= 10;\n        \n        long\
    \ digit12 = n % 10;\n        result += digits[digit12];\n        n /= 10;\n  \
    \      \n        long digit13 = n % 10;\n        result += digits[digit13];\n\
    \        n /= 10;\n        \n        long digit14 = n % 10;\n        result +=\
    \ digits[digit14];\n        n /= 10;\n        \n        long digit15 = n % 10;\n\
    \        result += digits[digit15];\n        n /= 10;\n        \n        long\
    \ digit16 = n % 10;\n        result += digits[digit16];\n        n /= 10;\n  \
    \      \n        long digit17 = n % 10;\n        result += digits[digit17];\n\
    \        n /= 10;\n        \n        long digit18 = n % 10;\n        result +=\
    \ digits[digit18];\n        n /= 10;\n        \n        long digit19 = n % 10;\n\
    \        result += digits[digit19];\n        n /= 10;\n        \n        long\
    \ digit20 = n % 10;\n        result += digits[digit20];\n        n /= 10;\n  \
    \      \n        long digit21 = n % 10;\n        result += digits[digit21];\n\
    \        n /= 10;\n        \n        long digit22 = ", "{\n    string result =\
    \ \"\";\n    long n = x;\n    long carry = 0;\n    long i = 0;\n    \n    while\
    \ (n != 0) {\n        long digit = n % 10;\n        result += char((digit + carry)\
    \ % 10);\n        carry = digit / 10;\n        n /= 10;\n        ++i;\n    }\n\
    \    \n    if (carry != 0) {\n        result += char(carry);\n    }\n    \n  \
    \  while (i < shift) {\n        result += \"0\";\n        ++i;\n    }\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    long digit = x;\n\
    \    long remainder;\n    \n    while (shift > 0)\n    {\n        remainder =\
    \ digit % 10;\n        digit = digit / 10;\n        result += to_string(remainder);\n\
    \        shift--;\n    }\n    \n    while (shift < 0)\n    {\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        result += to_string(remainder);\n\
    \        shift++;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder = x\
    \ % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    long digits = (int)x.digits;\n\
    \    long shift = shift % digits;\n    long remainder = x % digits;\n    \n  \
    \  if (shift > digits)\n    {\n        shift = digits;\n    }\n    \n    for(long\
    \ i = shift; i > 0; i--)\n    {\n        result += digits[remainder % digits];\n\
    \        remainder = remainder / digits;\n    }\n    \n    result += digits[remainder];\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long\
    \ carry = 0;\n    \n    while (shift > 0)\n    {\n        long digit = n % 10;\n\
    \        result += digits[digit];\n        n /= 10;\n        shift -= 1;\n   \
    \ }\n    \n    if (n != 0)\n    {\n        result += digits[n % 10];\n    }\n\
    \    \n    if (carry > 0)\n    {\n        result += digits[carry];\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while (x != 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long digit = x;\n    long remainder;\n    \n\
    \    while(shift > 0)\n    {\n        remainder = digit % 10;\n        digit =\
    \ digit / 10;\n        result += to_string(remainder);\n        shift -= 1;\n\
    \    }\n    \n    while(shift < 0)\n    {\n        remainder = digit % 10;\n \
    \       digit = digit / 10;\n        result += to_string(remainder);\n       \
    \ shift += 1;\n    }\n    \n    return result;\n}", "{\n    string result = \"\
    \";\n    long n = x;\n    long carry = 0;\n    long i = 0;\n    \n    while (i\
    \ < shift) {\n        long digit = n % 10;\n        result += digits[digit];\n\
    \        carry = digit + carry;\n        n /= 10;\n        ++i;\n    }\n    \n\
    \    if (carry != 0) {\n        result += digits[carry];\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long digit = x;\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = digit % 10;\n        digit\
    \ = digit / 10;\n        result += char(remainder);\n        shift -= 1;\n   \
    \ }\n    \n    while(shift < 0)\n    {\n        remainder = digit % 10;\n    \
    \    digit = digit / 10;\n        result += char(remainder);\n        shift +=\
    \ 1;\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n   \
    \ long remainder;\n    \n    while (x) {\n        remainder = x % 10;\n      \
    \  x /= 10;\n        result += to_string(remainder);\n    }\n    \n    if (shift\
    \ > result.length()) {\n        string reversed = result;\n        reversed.reverse();\n\
    \        result = reversed;\n    }\n    \n    result += to_string(shift);\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (x) {\n        remainder = x % 10;\n        x /= 10;\n      \
    \  result += to_string(remainder);\n    }\n    \n    if (shift > result.length())\
    \ {\n        shift %= result.length();\n    }\n    \n    result += to_string(shift);\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = shift % n;\n    long r = n % m;\n    long s = m / n;\n    long t\
    \ = m % n;\n    \n    while(s > 0)\n    {\n        result += to_string(r % 10);\n\
    \        r = r / 10;\n        s = s - 1;\n    }\n    \n    while(t > 0)\n    {\n\
    \        result += to_string(r % 10);\n        r = r / 10;\n        t = t - 1;\n\
    \    }\n    \n    result += to_string(r % 10);\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long n = x;\n    long d = 1;\n    long shift2\
    \ = shift;\n    \n    while (shift2 > 0)\n    {\n        n /= 10;\n        d *=\
    \ 10;\n        shift2 -= 1;\n    }\n    \n    while (n > 0)\n    {\n        result\
    \ += (char)(n % d);\n        n /= d;\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        shift -= digits(x);\n\
    \    }\n    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n    \
    \    x /= 10;\n        shift -= 1;\n        result += to_string(remainder);\n\
    \    }\n    \n    if (remainder > 0)\n        result += to_string(remainder);\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long digits\
    \ = digits(x);\n    long shift = shift % digits;\n    long remainder = x % digits;\n\
    \    long digit = remainder % 10;\n    long shift = shift % 10;\n    long digit2\
    \ = remainder / 10;\n    long digit3 = remainder / 100;\n    long digit4 = remainder\
    \ / 1000;\n    long digit5 = remainder / 100000;\n    long digit6 = remainder\
    \ / 1000000;\n    long digit7 = remainder / 10000000;\n    long digit8 = remainder\
    \ / 1000000000;\n    long digit9 = remainder / 10000000000;\n    long digit10\
    \ = remainder / 100000000000;\n    long digit11 = remainder / 100000000000000;\n\
    \    long digit12 = remainder / 1000000000000000;\n    long digit13 = remainder\
    \ / 100000000000000000;\n    long digit14 = remainder / 100000000000000000;\n\
    \    long digit15 = remainder / 100000000000000000;\n    long digit16 = remainder\
    \ / 100000000000000000;\n    long digit17 = remainder / 100000000000000000;\n\
    \    long digit18 = remainder / 100000000000000000;\n    long digit19 = remainder\
    \ / 100000000000000000;\n    long digit20 = remainder / 100000000000000000;\n\
    \    long digit21 = remainder / 100000000000000000;\n    long digit22 = remainder\
    \ / 100000000000000000;\n    long digit23 = remainder / 100000000000000000;\n\
    \    long digit24 = remainder / 100000000000000000;\n    long digit25 = remainder\
    \ / 100000000000000000;\n    long digit26 = remainder / 100000000000000000;\n\
    \    long digit27 = remainder / 100000000000000000;\n    long digit28 = remainder\
    \ / 100000000000000000;\n    long digit29 = remainder / 100000000000000000;\n\
    \    long digit30 = remainder / 100000000000000000;\n    long digit31 = remainder\
    \ / 100000000000000000;\n    long digit32 = remainder / 100000000000000000;\n\
    \    long digit33 = remainder / 100000000000000000;\n    long digit34 = remainder\
    \ / 100000000000000000;\n    long digit35 = remainder / 100000000000000000;\n\
    \    long digit36 = remainder / 100000000000000000;\n    long digit37 = remainder\
    \ / 100000000000000000;\n    long digit38 = remainder / 100000000000000000;\n\
    \    long digit39 = remainder / 10000000000000000", "{\n    string result = \"\
    \";\n    long remainder;\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = (x % 10);\n        x /= 10;\n        result += to_string(remainder);\n   \
    \     shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder =\
    \ (x % 10);\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long digit =\
    \ x;\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift < 0)\n    {\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        result += to_string(remainder);\n\
    \        shift += 1;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long m = 1;\n    long tmp = 0;\n    \n    while\
    \ (n > 0)\n    {\n        tmp = (n % 10);\n        result += tmp;\n        n =\
    \ n / 10;\n    }\n    \n    long shift2 = shift;\n    \n    while (shift2 > 0)\n\
    \    {\n        tmp = (n % 10);\n        result += tmp;\n        n = n / 10;\n\
    \        shift2--;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n >> m;\n  \
    \  long s = n - (r<<m);\n    string digits = to_string(r);\n    string digits_reversed\
    \ = to_string(s);\n    result += digits;\n    result += digits_reversed;\n   \
    \ return result;\n}\n/*\nReturn the number of digits in the integer x.\n    >>>\
    \ count_digits(12L)\n    2\n    >>> count_digits(12L)\n    2\n    \n*/\nlong count_digits(long\
    \ x) \n{\n    long n = 0;\n    while (x > 0) {\n        ++n;\n        x /= 10;\n\
    \    }\n    return n;\n}\n/*\nReturn the number of digits in the integer x, including\
    \ leading zeros.\n    >>> count_digits(12L)\n    2\n    >>> count_digits(12L)\n\
    \    2\n    \n*/\nlong count_digits(long x, long base) \n{\n    long n = 0;\n\
    \    while (x > 0) {\n        ++n;\n        x /= base;\n    }\n    return n;\n\
    }\n/*\nReturn the number of digits in the integer x, including leading zeros.\n\
    \    >>> count_digits(12L, 10)\n    2\n    >>> count_digits(12L, 10)\n    2\n\
    \    \n*/\nlong count_digits(long x, long base, long radix) \n{\n    long n =\
    \ 0;\n    while (x > 0) {\n        ++n;\n        x /= radix;\n    }\n    return\
    \ n;\n}\n/*\nReturn the number of digits in the integer x, including leading zeros.\n\
    \    >>> count_digits(12L, 10)\n    2\n    >>> count_digits(12L, 10)\n    2\n\
    \    \n*/\nlong count_digits(long x, long radix) \n{\n    return count_digits(x,\
    \ radix, 10);\n}\n/*\nReturn the number of digits in the integer x, including\
    \ leading zeros.\n    >>> count_digits(12L, 10)\n    2\n    >>> count_digits(12L,\
    \ 10)\n    2\n    \n*/\nlong count_digits(long x) \n{\n    return count_digits(x,\
    \ 10);\n}\n/*\nReturn the number of digits in the integer x, including leading\
    \ zeros.\n    >>> count_digits(12L)\n    2\n    >>> count_digits(12L)\n    2\n\
    \    \n*/\nlong count_digits(long x, long radix) \n{\n    return count_digits(x,\
    \ radix, 10);\n}\n/*\nReturn the number of digits in the integer x, including\
    \ leading zeros.\n    >>> count_digits(12L)\n    2\n    >>> count_digits(12L)\n\
    \    2\n    \n*/\nlong count_digits(long x) \n{\n    return count_digits(x, 10);\n\
    }\n/*\nReturn the number of digits in the ", "{\n    string result = \"\";\n \
    \   long n = x;\n    long m = n;\n    long r = 1;\n    long digit;\n    \n   \
    \ while(m > 0)\n    {\n        digit = m % 10;\n        result += digit;\n   \
    \     m /= 10;\n    }\n    \n    while(shift > 0)\n    {\n        digit = n %\
    \ 10;\n        result += digit;\n        n /= 10;\n        shift -= 1;\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    if(x < 0)\n    {\n        while(x < 0)\n        {\n            result\
    \ += to_string(-x % 10);\n            x /= 10;\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long m = 1;\n\
    \    long carry = 0;\n    \n    while (shift > 0)\n    {\n        long digit =\
    \ n % m;\n        result += (char) digit;\n        n /= m;\n        shift -= 1;\n\
    \        m /= 10;\n    }\n    \n    if (n != 0)\n    {\n        result += (char)\
    \ n;\n    }\n    \n    if (carry > 0)\n    {\n        result += (char) carry;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n\
    \        x /= 10;\n        result += to_string(remainder);\n        shift -= 1;\n\
    \    }\n    \n    if(x < 0)\n    {\n        while(shift > 0)\n        {\n    \
    \        remainder = x % 10;\n            x /= 10;\n            result += to_string(remainder);\n\
    \            shift -= 1;\n        }\n        \n        result += \"0\";\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = 1;\n    long carry = 0;\n    \n    while (n > 0)\n    {\n      \
    \  long digit = n % 10;\n        result += digits[digit];\n        n /= 10;\n\
    \        m += digit;\n        carry = m / 10;\n        m %= 10;\n    }\n    \n\
    \    if (shift > result.length())\n    {\n        shift = result.length();\n \
    \   }\n    \n    string reversed = \"\";\n    \n    for (long i = result.length()\
    \ - 1; i >= shift; i--)\n    {\n        reversed += digits[result[i]];\n    }\n\
    \    \n    if (carry)\n    {\n        reversed += digits[carry];\n    }\n    \n\
    \    return reversed;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long\
    \ d = shift;\n    \n    while (d > 0)\n    {\n        long r = n % 10;\n     \
    \   result += char(r);\n        n /= 10;\n        d -= 1;\n    }\n    \n    while\
    \ (n > 0)\n    {\n        result += char(n % 10);\n        n /= 10;\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = 1;\n    long shift2 = shift;\n    \n    while (n > 0)\n    {\n \
    \       long digit = n % 10;\n        result += digit;\n        n /= 10;\n   \
    \     m += shift2;\n        shift2 -= 1;\n    }\n    \n    while (m > 0)\n   \
    \ {\n        result += \"0\";\n        m -= 1;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    long m = shift % n;\n\
    \    long r = n % m;\n    long s = m / r;\n    long t = m % r;\n    \n    for(long\
    \ i = 0; i < s; i++)\n    {\n        result += x;\n    }\n    \n    for(long i\
    \ = 0; i < t; i++)\n    {\n        result -= x;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    long remainder;\n    \n\
    \    while(shift > 0)\n    {\n        remainder = n % 10;\n        n /= 10;\n\
    \        result += remainder;\n        shift--;\n    }\n    \n    if(n < 0)\n\
    \    {\n        result += n % 10;\n        n /= 10;\n        while(n > 0)\n  \
    \      {\n            result += n % 10;\n            n /= 10;\n        }\n   \
    \ }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long n =\
    \ x;\n    long m = shift % n;\n    long r = n % m;\n    long s = m / r;\n    long\
    \ t = m % r;\n    \n    for(long i = 0; i < s; i++)\n    {\n        result +=\
    \ to_string(t);\n        t += r;\n    }\n    \n    for(long i = 0; i < r; i++)\n\
    \    {\n        result += to_string(n);\n        n -= r;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long digits = (int)std::log10(x);\n\
    \    long shift = std::abs(shift);\n    long shift2 = shift / 2;\n    long shift3\
    \ = shift - shift2;\n    long shift4 = shift - shift3;\n    long shift5 = shift\
    \ - shift4;\n    long shift6 = shift - shift5;\n    long shift7 = shift - shift6;\n\
    \    long shift8 = shift - shift7;\n    long shift9 = shift - shift8;\n    long\
    \ shift10 = shift - shift9;\n    long shift11 = shift - shift10;\n    long shift12\
    \ = shift - shift11;\n    long shift13 = shift - shift12;\n    long shift14 =\
    \ shift - shift13;\n    long shift15 = shift - shift14;\n    long shift16 = shift\
    \ - shift15;\n    long shift17 = shift - shift16;\n    long shift18 = shift -\
    \ shift17;\n    long shift19 = shift - shift18;\n    long shift20 = shift - shift19;\n\
    \    long shift21 = shift - shift20;\n    long shift22 = shift - shift21;\n  \
    \  long shift23 = shift - shift22;\n    long shift24 = shift - shift23;\n    long\
    \ shift25 = shift - shift24;\n    long shift26 = shift - shift25;\n    long shift27\
    \ = shift - shift26;\n    long shift28 = shift - shift27;\n    long shift29 =\
    \ shift - shift28;\n    long shift30 = shift - shift29;\n    long shift31 = shift\
    \ - shift30;\n    long shift32 = shift - shift31;\n    long shift33 = shift -\
    \ shift32;\n    long shift34 = shift - shift33;\n    long shift35 = shift - shift34;\n\
    \    long shift36 = shift - shift35;\n    long shift37 = shift - shift36;\n  \
    \  long shift38 = shift - shift37;\n    long shift39 = shift - shift38;\n    long\
    \ shift40 = shift - shift39;\n    long shift41 = shift - shift40;\n    long shift42\
    \ = shift - shift41;\n    long shift43 = shift - shift42;\n    long shift44 =\
    \ shift - shift43;\n    long shift45 = shift - shift44;\n    long shift46 = shift\
    \ - shift45;\n    long shift47 = shift - shift46;\n    long shift48 = shift -\
    \ shift47;\n    long ", "{\n    string result = \"\";\n    long n = x;\n    long\
    \ remainder;\n    \n    while (shift > 0)\n    {\n        remainder = n % 10;\n\
    \        n /= 10;\n        result += remainder;\n        shift--;\n    }\n   \
    \ \n    while (n > 0)\n    {\n        remainder = n % 10;\n        n /= 10;\n\
    \        result += remainder;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > 64) \n    {\n   \
    \     shift = 64;\n    }\n    \n    remainder = (x % shift);\n    \n    while\
    \ (shift > 0)\n    {\n        result += (char)((remainder % 10) + '0');\n    \
    \    remainder = (remainder / 10);\n        shift--;\n    }\n    \n    if (remainder\
    \ > 0)\n    {\n        result += (char)((remainder % 10) + '0');\n    }\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > digits(x))\n    {\n        remainder = x;\n        x =\
    \ digits(x);\n        shift = digits(shift);\n    }\n    \n    while (shift >\
    \ 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        x <<= 1;\n\
    \        x |= remainder;\n        shift -= 1;\n    }\n    \n    while (x != 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += remainder;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long m = shift % n;\n    long r = n % m;\n    long s = m / r;\n\
    \    long t = m % r;\n    \n    for(long i = 0; i < s; ++i)\n    {\n        result\
    \ += char(x);\n        x /= 10;\n    }\n    \n    for(long i = 0; i < t; ++i)\n\
    \    {\n        result += (char)(x * 10);\n        x %= 10;\n    }\n    \n   \
    \ result += char(x);\n    \n    return result;\n}", "{\n    string result = \"\
    \";\n    long digit = x;\n    long digits = 1;\n    while(shift > digits) {\n\
    \        shift -= digits;\n        result += digit;\n        digit = x % 10;\n\
    \        digits++;\n    }\n    while(shift < digits) {\n        result += digit;\n\
    \        digit = x % 10;\n        digits--;\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n\
    \        {\n            result += to_string(-x);\n            x /= 10;\n     \
    \   }\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long remainder;\n    \n    while(shift > 0)\n    {\n        remainder = x %\
    \ 10;\n        x /= 10;\n        result += to_string(remainder);\n        shift\
    \ -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n        {\n\
    \            result += to_string(-x);\n            x /= 10;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long digits\
    \ = x;\n    long shift = shift % digits;\n    long remain = digits - shift;\n\
    \    \n    while (remain > 0) {\n        long temp = digits;\n        digits =\
    \ remain;\n        remain = temp;\n        result += to_string(digits);\n    }\n\
    \    \n    if (shift > digits) {\n        string reversed = reverse(result.c_str());\n\
    \        result += reversed.substr(shift, reversed.length() - shift);\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while (x > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long n = x;\n    long m = shift % n;\n    long\
    \ r = shift / n;\n    \n    for(long i = r; i > 0; i--)\n    {\n        result\
    \ += to_string(n);\n        n = m % n;\n        m = m / n;\n    }\n    \n    result\
    \ += to_string(n);\n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long n = x;\n    long carry = 0;\n    \n    while(shift > 0)\n    {\n     \
    \   carry = n % 10;\n        n /= 10;\n        result += to_string(carry);\n \
    \       shift -= 1;\n    }\n    \n    if(n == 0)\n    {\n        result += to_string(carry);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ digits = (int)std::log10(x);\n    long shiftDigits = (int)std::log10(shift);\n\
    \    long shiftRemainder = (shiftDigits - digits);\n    long remainder;\n    long\
    \ digit;\n    \n    if (shiftRemainder == 0)\n    {\n        digits = shiftDigits;\n\
    \        shiftRemainder = 1;\n    }\n    \n    for (long i = 0; i < digits; i++)\n\
    \    {\n        digit = (x % 10);\n        x /= 10;\n        result += char(digit);\n\
    \    }\n    \n    for (long i = 0; i < shiftRemainder; i++)\n    {\n        digit\
    \ = (x % 10);\n        x /= 10;\n        result += char(digit);\n    }\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while (x != 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = shift % n;\n    long r = shift / n;\n    \n    for(long i = 0; i\
    \ < r; ++i)\n    {\n        result += to_string(n);\n        n /= 10;\n    }\n\
    \    \n    for(long i = 0; i < m; ++i)\n    {\n        result += to_string(n);\n\
    \        n /= 10;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n    \
    \    shift = digits(x);\n    }\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift--;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long remainder;\n    \n    while (x) {\n        remainder = x % 10;\n \
    \       x /= 10;\n        result += to_string(remainder);\n    }\n    \n    if\
    \ (shift > result.length())\n        result = to_string(result.length() - shift)\
    \ + result;\n    \n    return result;\n}", "{\n    string result = \"\";\n   \
    \ long digit = x;\n    long carry = 0;\n    \n    while (shift > 0)\n    {\n \
    \       digit = digit*10 + carry;\n        carry = (digit/10) % 10;\n        digit\
    \ = digit%10;\n        shift = shift-1;\n    }\n    \n    if (carry)\n    {\n\
    \        result += (char)('0' + carry);\n    }\n    \n    while (shift > 0)\n\
    \    {\n        digit = digit*10 + carry;\n        carry = (digit/10) % 10;\n\
    \        digit = digit%10;\n        shift = shift-1;\n    }\n    \n    result\
    \ += digit;\n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long\
    \ m = 1;\n    while(m <= shift)\n    {\n        n += m;\n        m <<= 1;\n  \
    \  }\n    while(n >= 1)\n    {\n        result += n % 10;\n        n /= 10;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = shift % n;\n    long r = n % m;\n    long s = m / r;\n    long t\
    \ = x / r;\n    \n    while(s > 0)\n    {\n        result = to_string(s) + result;\n\
    \        s -= 1;\n    }\n    \n    while(t > 0)\n    {\n        result = to_string(t\
    \ - 1) + result;\n        t -= 1;\n    }\n    \n    if(result != \"\")\n    {\n\
    \        result = to_string(n - r) + result;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    if (shift >\
    \ digits(x))\n    {\n        shift = digits(x);\n    }\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n        shift--;\n    }\n    \n    while (shift < digits(x))\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift++;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder =\
    \ x % 10;\n        x /= 10;\n        result += to_string(remainder);\n       \
    \ shift -= 1;\n    }\n    \n    return result;\n}", "{\n    string result = \"\
    \";\n    long n = x;\n    long m = 1;\n    long i = 0;\n    \n    while (n !=\
    \ 0) {\n        long d = n % 10;\n        result += to_string(m);\n        m +=\
    \ d;\n        n /= 10;\n        i++;\n    }\n    \n    if (shift > i) {\n    \
    \    string reversed = \"\";\n        \n        while (i < shift) {\n        \
    \    reversed = to_string(reversed) + to_string(i);\n            i++;\n      \
    \  }\n        \n        return reversed;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long digits = x;\n    long remainder = x % 10;\n\
    \    \n    while(shift > digits) {\n        shift -= digits;\n        result +=\
    \ remainder;\n        digits = x / 10;\n        remainder = x % 10;\n    }\n \
    \   \n    while(shift > 0)\n    {\n        result += remainder;\n        shift\
    \ -= digits;\n        digits = x / 10;\n        remainder = x % 10;\n    }\n \
    \   \n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,c |>\n<| c |>\n\
    I like your solution. Very elegant. Thanks!\n<|/ c |>\n<| c |>\nI like your solution.\
    \ Very elegant. Thanks!\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        remainder = x;\n        shift = 0;\n    }\n    else\n    {\n        remainder\
    \ = x % 10;\n        shift = shift % digits(x);\n    }\n    \n    while (shift\
    \ > 0)\n    {\n        result += remainder;\n        remainder = remainder / 10;\n\
    \        shift = shift / 10;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long n = x;\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = n % 10;\n        n /= 10;\n        result +=\
    \ to_string(remainder);\n        shift -= 1;\n    }\n    \n    while(n > 0)\n\
    \    {\n        remainder = n % 10;\n        n /= 10;\n        result += to_string(remainder);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n\
    \        x /= 10;\n        result += to_string(remainder);\n        shift -= 1;\n\
    \    }\n    \n    while (x > 0)\n    {\n        remainder = x % 10;\n        x\
    \ /= 10;\n        result += to_string(remainder);\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n        shift -= 1;\n    }\n    \n    if(x < 0)\n   \
    \ {\n        while(x < 0)\n        {\n            result += to_string(-x);\n \
    \           x /= 10;\n        }\n    }\n    \n    return result;\n}", "{\n   \
    \ string result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r\
    \ = n % m;\n    long s = m / r;\n    long t = m % r;\n    \n    for(long i = 0;\
    \ i < s; ++i)\n    {\n        result += char(x);\n        x = x >> 1;\n    }\n\
    \    \n    for(long i = 0; i < t; ++i)\n    {\n        result += char(x);\n  \
    \      x = x << 1;\n    }\n    \n    result += char(x);\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n        shift -= 1;\n    }\n    \n    if(x < 0)\n   \
    \ {\n        while(x < 0)\n        {\n            result += to_string(-x % 10);\n\
    \            x /= 10;\n        }\n    }\n    \n    return result;\n}", "{\n  \
    \  string result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r\
    \ = n % m;\n    long s = n - m;\n    \n    for(long i = 0; i < s; ++i)\n     \
    \   result += char(r % 10);\n    \n    for(long i = 0; i < m; ++i)\n        result\
    \ += char(r / 10);\n    \n    for(long i = 0; i < shift; ++i)\n        result\
    \ += char(r % 10);\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long n = x;\n    long remainder;\n    \n    if (shift > LONG_MAX)\n   \
    \     shift = LONG_MAX;\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = n % 10;\n        n /= 10;\n        result += char(remainder);\n        shift--;\n\
    \    }\n    \n    while (n > 0)\n    {\n        remainder = n % 10;\n        n\
    \ /= 10;\n        result += char(remainder);\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = (x % 10);\n        x /= 10;\n        result\
    \ += to_string(remainder);\n        shift -= 1;\n    }\n    \n    while (x > 0)\n\
    \    {\n        remainder = (x % 10);\n        x /= 10;\n        result += to_string(remainder);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    if (shift > __digits__) \n    {\n        shift = __digits__\
    \ - shift;\n    }\n    \n    remainder = x % 10;\n    x /= 10;\n    \n    while\
    \ (x != 0)\n    {\n        result += __digits__[__digits__.find_first_of(remainder,\
    \ shift)];\n        shift -= __digits__.find_first_of(remainder, shift);\n   \
    \     remainder = x % 10;\n        x /= 10;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    long carry = 0;\n    \n\
    \    while (shift > 0)\n    {\n        long digit = n % 10;\n        result +=\
    \ digits[digit];\n        n /= 10;\n        shift -= 1;\n    }\n    \n    if (n\
    \ != 0)\n    {\n        long digit = n % 10;\n        result += digits[digit];\n\
    \    }\n    \n    if (carry > 0)\n    {\n        result += \"1\";\n    }\n   \
    \ \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while (x != 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long n = x;\n    long m = shift % 10;\n    long\
    \ r = shift / 10;\n    \n    for(long i = 0; i < r; i++)\n    {\n        result\
    \ += to_string(n%10);\n        n = n/10;\n    }\n    \n    result += to_string(n%10);\n\
    \    \n    for(long i = 0; i < m; i++)\n    {\n        result += to_string(n%10);\n\
    \        n = n/10;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long remainder;\n    \n    while (shift > 0)\n\
    \    {\n        remainder = n % 10;\n        n /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (n > 0)\n    {\n        remainder\
    \ = n % 10;\n        n /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (x) {\n        remainder = x%10;\n        result += to_string(remainder);\n\
    \        x /= 10;\n    }\n    \n    if (shift > result.length())\n        return\
    \ result + to_string(0);\n    \n    string reversed = result;\n    reversed.reverse();\n\
    \    \n    result += reversed.substr(0, shift);\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder\
    \ = x % 10;\n    long digit = x % 10;\n    long digits = 1;\n    long shifts =\
    \ 1;\n    \n    while (shift > digits) {\n        shift -= digits;\n        digits++;\n\
    \    }\n    \n    while (shift > 1) {\n        shift -= 1;\n        digits--;\n\
    \    }\n    \n    while (digits > 0) {\n        result += digit;\n        digit\
    \ = remainder % 10;\n        remainder = remainder / 10;\n        digits--;\n\
    \    }\n    \n    if (shift > 1) {\n        result += digit;\n    }\n    \n  \
    \  return result;\n}", "{\n    string result = \"\";\n    long remainder;\n  \
    \  \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   while (x > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n    \
    \    result += to_string(remainder);\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    if (shift > sizeof(long)*8)\
    \ {\n        shift = (sizeof(long)*8) - shift;\n    }\n    \n    remainder = x\
    \ % shift;\n    x /= shift;\n    \n    while (x != 0) {\n        result += (char)(x\
    \ % 10);\n        x /= 10;\n    }\n    \n    if (remainder != 0) {\n        result\
    \ += (char)(remainder);\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while (x) {\n        remainder = x %\
    \ 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n    \n\
    \    if (shift > result.length())\n        result = to_string(result.length()\
    \ - shift) + result;\n    \n    return result;\n}", "{\n    string result = \"\
    \";\n    long digits = (int)x.digits;\n    long shift = shift % digits;\n    if\
    \ (shift < 0)\n        shift += digits;\n    long mask = ((1L << shift) - 1);\n\
    \    long mask2 = ((1L << digits) - 1);\n    long mask3 = ((1L << digits) - 1);\n\
    \    long mask4 = ((1L << digits) - 1);\n    long mask5 = ((1L << digits) - 1);\n\
    \    long mask6 = ((1L << digits) - 1);\n    long mask7 = ((1L << digits) - 1);\n\
    \    long mask8 = ((1L << digits) - 1);\n    long mask9 = ((1L << digits) - 1);\n\
    \    long mask10 = ((1L << digits) - 1);\n    long mask11 = ((1L << digits) -\
    \ 1);\n    long mask12 = ((1L << digits) - 1);\n    long mask13 = ((1L << digits)\
    \ - 1);\n    long mask14 = ((1L << digits) - 1);\n    long mask15 = ((1L << digits)\
    \ - 1);\n    long mask16 = ((1L << digits) - 1);\n    long mask17 = ((1L << digits)\
    \ - 1);\n    long mask18 = ((1L << digits) - 1);\n    long mask19 = ((1L << digits)\
    \ - 1);\n    long mask20 = ((1L << digits) - 1);\n    long mask21 = ((1L << digits)\
    \ - 1);\n    long mask22 = ((1L << digits) - 1);\n    long mask23 = ((1L << digits)\
    \ - 1);\n    long mask24 = ((1L << digits) - 1);\n    long mask25 = ((1L << digits)\
    \ - 1);\n    long mask26 = ((1L << digits) - 1);\n    long mask27 = ((1L << digits)\
    \ - 1);\n    long mask28 = ((1L << digits) - 1);\n    long mask29 = ((1L << digits)\
    \ - 1);\n    long mask30 = ((1L << digits) - 1);\n    long mask31 = ((1L << digits)\
    \ - 1);\n    long mask32 = ((1L << digits) - 1);\n    long mask33 = ((1L << digits)\
    \ - 1);\n    long mask34 = ((1L << digits) - 1);\n    long mask35 = ((1L << digits)\
    \ - 1);\n    long mask36 = ((1L << digits) - 1);\n    long mask37 = ((1L << digits)\
    \ - 1);\n    long mask38 = ((1L << digits) - 1);\n    long mask39 = ((1L << digits)\
    \ - 1);\n    long mask40 = ((1L << ", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    if (shift > digits(x))\n    {\n        remainder = digits(x)\
    \ % shift;\n        shift -= remainder;\n        x /= shift;\n    }\n    \n  \
    \  while (shift > 0)\n    {\n        result += digit(x);\n        shift -= digits(x);\n\
    \        x /= 10;\n    }\n    \n    if (remainder > 0)\n        result += digit(x);\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while(x != 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long digit = x;\n    long remainder;\n    \n\
    \    while (shift > 0)\n    {\n        remainder = digit % 10;\n        digit\
    \ = digit / 10;\n        result += char(remainder);\n        shift--;\n    }\n\
    \    \n    while (shift < 0)\n    {\n        remainder = digit % 10;\n       \
    \ digit = digit / 10;\n        result += char(remainder);\n        shift++;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n\
    \        x /= 10;\n        result += to_string(remainder);\n        shift -= 1;\n\
    \    }\n    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n     \
    \   x /= 10;\n        result += to_string(remainder);\n        shift -= 1;\n \
    \   }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (x) {\n        remainder = x % 10;\n        x /= 10;\n      \
    \  result += to_string(remainder);\n    }\n    \n    while (shift) {\n       \
    \ remainder = shift % 10;\n        shift /= 10;\n        result += to_string(remainder);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ digits = digits(x);\n    long remainder = x % 10;\n    long shiftDigits = digits\
    \ - shift;\n    long shiftRemainder = remainder % 10;\n    \n    for(long i =\
    \ 0; i < shiftDigits; i++) {\n        result += to_string(remainder);\n      \
    \  remainder = remainder / 10;\n    }\n    \n    result += to_string(remainder);\n\
    \    \n    for(long i = 0; i < shiftRemainder; i++) {\n        result += to_string(remainder);\n\
    \        remainder = remainder / 10;\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long digits = (int)std::log10(x);\n    long shift\
    \ = std::abs(shift);\n    long shifts = shift > digits ? digits : shift;\n   \
    \ long remaining = digits - shifts;\n    long digit = x % 10;\n    long digits\
    \ = x % 10;\n    long digits_remaining = digits % 10;\n    \n    for(long i =\
    \ 0; i < shifts; i++)\n    {\n        result += digit;\n        digit = digits\
    \ / 10;\n        digits = digits % 10;\n    }\n    \n    for(long i = 0; i < remainding;\
    \ i++)\n    {\n        result += digits_remaining;\n        digits_remaining =\
    \ digits_remaining / 10;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder = x\
    \ % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = 1;\n    long r = 1;\n    long digit;\n    \n    while (n != 0) {\n\
    \        digit = n % 10;\n        n /= 10;\n        m <<= 1;\n        m |= digit;\n\
    \        r <<= 1;\n        r |= digit;\n    }\n    \n    while (shift > 0) {\n\
    \        digit = m >> shift;\n        m &= (m << shift) - 1;\n        m |= digit\
    \ << shift;\n        shift -= 1;\n        result += (char)digit;\n    }\n    \n\
    \    while (shift < 0) {\n        digit = r >> -shift;\n        r &= (r >> -shift)\
    \ - 1;\n        r |= digit >> -shift;\n        shift += 1;\n        result +=\
    \ (char)digit;\n    }\n    \n    return result;\n}", "{\n    string result = \"\
    \";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n        remainder\
    \ = x;\n        \n        while (shift > digits(remainder))\n        {\n     \
    \       remainder = remainder % 10;\n            shift--;\n        }\n       \
    \ \n        while (digits(remainder) > shift)\n        {\n            remainder\
    \ = remainder % 10;\n            shift--;\n        }\n        \n        result\
    \ = to_string(digits(remainder));\n    }\n    else\n    {\n        remainder =\
    \ x;\n        \n        while (shift > digits(remainder))\n        {\n       \
    \     remainder = remainder % 10;\n            shift--;\n        }\n        \n\
    \        while (digits(remainder) > shift)\n        {\n            remainder =\
    \ remainder % 10;\n            shift--;\n        }\n        \n        result =\
    \ to_string(digits(remainder));\n    }\n    \n    return result;\n}", "{\n   \
    \ string result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r\
    \ = shift / n;\n    \n    for(long i = 0; i < r; i++)\n    {\n        result +=\
    \ to_string(n);\n        n = m % n;\n        m = m / n;\n    }\n    result +=\
    \ to_string(n);\n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while (shift > 0)\n    {\n        remainder = (x % 10);\n\
    \        x /= 10;\n        result += to_string(remainder);\n        shift -= 1;\n\
    \    }\n    \n    while (x != 0)\n    {\n        remainder = (x % 10);\n     \
    \   x /= 10;\n        result += to_string(remainder);\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n        shift -= 1;\n    }\n    \n    while(shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long m = 1;\n    while(m <= shift)\n    {\n  \
    \      n <<= 1;\n        m <<= 1;\n    }\n    while(n != 0)\n    {\n        result\
    \ += (char)(n % 10);\n        n /= 10;\n    }\n    while(m != 0)\n    {\n    \
    \    result += (char)((n >> m) % 10);\n        n >>= m;\n        m >>= 1;\n  \
    \  }\n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while (shift < 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift += 1;\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > numeric_limits<long>::digits) {\n        shift = numeric_limits<long>::digits;\n\
    \    }\n    \n    while (shift > 0) {\n        remainder = x % 10;\n        x\
    \ /= 10;\n        result += to_string(remainder);\n        shift--;\n    }\n \
    \   \n    while (shift < 0) {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift++;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n    if\
    \ (shift > __digits__)\n    {\n        shift = __digits__ - shift;\n    }\n  \
    \  \n    remainder = __mod__(x,shift);\n    \n    while (remainder > 0)\n    {\n\
    \        result += __digits__[remainder];\n        remainder = __mod__(x-remainder,shift);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ digit = x;\n    long remainder;\n    \n    while(shift > 0)\n    {\n       \
    \ remainder = digit % 10;\n        digit = digit / 10;\n        result += string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        result += string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(shift < 0)\n\
    \        {\n            remainder = x % 10;\n            x /= 10;\n          \
    \  result += to_string(remainder);\n            shift += 1;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while (x > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long n = x;\n    long m = shift % n;\n    long\
    \ r = n % m;\n    long s = m / r;\n    long t = x / r;\n    \n    while(s > 0)\n\
    \    {\n        result += (char)('0' + t);\n        t /= 10;\n        s -= 1;\n\
    \    }\n    \n    while(t > 0)\n    {\n        result += (char)('0' + t);\n  \
    \      t /= 10;\n    }\n    \n    while(m > 0)\n    {\n        result += (char)('0'\
    \ + m);\n        m /= 10;\n    }\n    \n    while(n > 0)\n    {\n        result\
    \ += (char)('0' + n);\n        n /= 10;\n    }\n    \n    while(result != \"\"\
    )\n    {\n        result += (char)('0' + r);\n        r /= 10;\n    }\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += remainder;\n        shift -= 1;\n    }\n    \n    if(x\
    \ < 0)\n    {\n        while(x > 0)\n        {\n            remainder = x % 10;\n\
    \            x /= 10;\n            result += remainder;\n        }\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while (x != 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long n = x;\n    long m = shift % n;\n    long\
    \ r = n % m;\n    long s = m / r;\n    long t = m % r;\n    string digits = to_string(n);\n\
    \    string digits_reversed = to_string(m);\n    string digits_shifted = to_string(s);\n\
    \    string digits_shifted_reversed = to_string(s);\n    string digits_shifted_reversed_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted = to_string(s);\n\
    \    string digits_shifted_reversed_shifted_shifted_shifted = to_string(s);\n\
    \    string digits_shifted_reversed_shifted_shifted_shifted_shifted = to_string(s);\n\
    \    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted =\
    \ to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shif",
  "{\n    string result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n\
    \    {\n        shift = digits(x);\n    }\n    \n    remainder = x % shift;\n\
    \    \n    while (shift > 0)\n    {\n        result += digits[remainder];\n  \
    \      x /= shift;\n        shift -= digits(x);\n    }\n    \n    result += digits[remainder];\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    long remainder;\n \
    \   \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while (x > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(shift >\
    \ 0)\n        {\n            remainder = x % 10;\n            x /= 10;\n     \
    \       result += to_string(remainder);\n            shift -= 1;\n        }\n\
    \        \n        result += \"0\";\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long digit = x;\n    long digits = 1;\n    long\
    \ carry = 0;\n    \n    while (shift > digits) {\n        carry = digit % 10;\n\
    \        digit = digit / 10;\n        digits = digits + 1;\n    }\n    \n    while\
    \ (carry > 0) {\n        result = digits[carry] + result;\n        carry = carry\
    \ / 10;\n    }\n    \n    if (shift < digits) {\n        digits = digit;\n   \
    \ }\n    \n    while (digits > 0) {\n        result = digits[digits - 1] + result;\n\
    \        digits = digits - 1;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (shift < 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift += 1;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long n = x;\n    long m = n;\n    long temp;\n    \n    while(m >\
    \ 0)\n    {\n        temp = m % 10;\n        m /= 10;\n        result += temp;\n\
    \    }\n    \n    while(shift > 0)\n    {\n        result += (n % 10 + 10 - n\
    \ % shift) % 10;\n        shift -= 1;\n        n /= 10;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n        shift -= 1;\n    }\n    \n    while(shift < 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift += 1;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n    \
    \    remainder = x % 10;\n        x /= 10;\n        shift -= digits(x);\n    }\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        shift -= 1;\n        result += to_string(remainder);\n    }\n \
    \   \n    if (remainder > 0)\n        result += to_string(remainder);\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += remainder;\n        shift -= 1;\n    }\n    \n    while\
    \ (x != 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result\
    \ += remainder;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long n = x;\n    long m = n;\n    long temp;\n    \n    while (m\
    \ > 0)\n    {\n        temp = m % 10;\n        m /= 10;\n        if (shift > 0)\n\
    \        {\n            temp = temp * 10 + shift;\n            shift -= 1;\n \
    \       }\n        result = temp + result;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long n = x;\n    long m = shift % n;\n    long\
    \ r = n % m;\n    long s = m / r;\n    long t = m % r;\n    \n    for(int i =\
    \ 0; i < s; i++)\n    {\n        result += to_string(t);\n        t += r;\n  \
    \  }\n    \n    for(int i = 0; i < r; i++)\n    {\n        result += to_string(n);\n\
    \        n += m;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long remainder;\n    \n    while (x) {\n        remainder = x % 10;\n\
    \        x /= 10;\n        if (remainder >= shift) {\n            result += remainder;\n\
    \            x /= 10;\n        }\n        else {\n            result += remainder;\n\
    \            result += (remainder + 10 - shift);\n            x /= 10;\n     \
    \   }\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long digit = x;\n    long remainder;\n    \n    while (shift > 0)\n    {\n\
    \        remainder = digit % 10;\n        digit = digit / 10;\n        result\
    \ = remainder + result;\n        shift = shift - 1;\n    }\n    \n    while (result\
    \ != \"\")\n    {\n        result = digit + result;\n        digit = digit / 10;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder = x % 10;\n    long digit = x % 10;\n    long shiftDigit = shift %\
    \ 10;\n    long shiftRemainder = shift % 10;\n    \n    while ((shift -= 10) >=\
    \ 0)\n    {\n        result += digit;\n        digit = remainder % 10;\n     \
    \   remainder = remainder / 10;\n    }\n    \n    result += digit;\n    \n   \
    \ if (shift > 0)\n    {\n        result += shiftDigit;\n        result += shiftRemainder;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ digit = x;\n    long remainder;\n    \n    while (shift > 0)\n    {\n      \
    \  remainder = digit % 10;\n        digit = digit / 10;\n        result += char(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (digit > 0)\n    {\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        result += char(remainder);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long m = 1;\n    \n    while (m != 0) {\n        long r = n / m;\n\
    \        long t = n % m;\n        \n        if (shift > m) {\n            result\
    \ += to_string(t);\n            shift -= m;\n        } else {\n            result\
    \ += to_string(t);\n            result += to_string(m);\n            shift -=\
    \ m;\n        }\n        \n        n = r;\n        m *= 10;\n    }\n    \n   \
    \ return result;\n}", "{\n    string result = \"\";\n    long remainder;\n   \
    \ \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   while (x != 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n   \
    \     result += to_string(remainder);\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long digits = digits(x);\n    long shiftDigits\
    \ = digits(shift);\n    long shiftBits = bits(shift);\n    long shiftBitsLeft\
    \ = shiftBits - shiftDigits;\n    long shiftBitsRight = shiftBits - shiftDigits\
    \ - 1;\n    long shiftBitsMask = ~(1 << shiftBitsLeft);\n    long shiftBitsMaskRight\
    \ = ~(1 << shiftBitsRight);\n    long mask = (1 << shiftBitsRight) - 1;\n    long\
    \ maskRight = ~(1 << shiftBitsRight);\n    long maskLeft = ~(1 << shiftBitsLeft);\n\
    \    long maskLeftRight = ~(1 << shiftBitsLeft - 1);\n    long maskLeftRightRight\
    \ = ~(1 << shiftBitsLeft - 2);\n    long maskLeftRightLeftRight = ~(1 << shiftBitsLeft\
    \ - 3);\n    long maskLeftRightLeftLeft = ~(1 << shiftBitsLeft - 4);\n    long\
    \ maskLeftRightLeft = ~(1 << shiftBitsLeft - 5);\n    long maskLeftRight = ~(1\
    \ << shiftBitsLeft - 6);\n    long maskLeftLeft = ~(1 << shiftBitsLeft - 7);\n\
    \    long maskLeft = ~(1 << shiftBitsLeft);\n    long maskRight = ~(1 << shiftBitsRight);\n\
    \    long maskRightLeft = ~(1 << shiftBitsRight - 1);\n    long maskRightLeftRight\
    \ = ~(1 << shiftBitsRight - 2);\n    long maskRightLeftLeft = ~(1 << shiftBitsRight\
    \ - 3);\n    long maskRightLeft = ~(1 << shiftBitsRight - 4);\n    long maskRight\
    \ = ~(1 << shiftBitsRight - 5);\n    long maskLeft = ~(1 << shiftBitsRight - 6);\n\
    \    long maskLeftRight = ~(1 << shiftBitsRight - 7);\n    long maskLeftRightLeft\
    \ = ~(1 << shiftBitsRight - 8);\n    long maskLeftRightRight = ~(1 << shiftBitsRight\
    \ - 9);\n    long maskLeftRightLeftRight = ~(1 << shiftBitsRight - 10);\n    long\
    \ maskLeftRightLeftLeft = ~(1 << shiftBitsRight - 11);\n    long maskLeftRightLeft\
    \ = ~(1 << shiftBitsRight - 12);\n    long maskLeftRight = ~(1 << shiftBitsRight\
    \ - 13);\n    long maskLeft = ~(1 << shiftBitsRight - 14);\n    long maskRight\
    \ = ~(1 << shiftBitsRight - 15);\n", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    long remainder;\n \
    \   \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   while(shift < 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n \
    \       result += to_string(remainder);\n        shift += 1;\n    }\n    \n  \
    \  return result;\n}", "{\n    string result = \"\";\n    long digit = x;\n  \
    \  long carry = 0;\n    \n    while(shift > 0)\n    {\n        digit = digit*10\
    \ + carry;\n        carry = digit/10;\n        digit = digit%10;\n        shift\
    \ = shift-1;\n    }\n    \n    if(carry > 0)\n    {\n        result += digit;\n\
    \        result += carry;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long n = x;\n    long carry = 0;\n    \n    while (shift\
    \ > 0)\n    {\n        long digit = n % 10;\n        result += digit;\n      \
    \  n /= 10;\n        shift -= 1;\n    }\n    \n    if (n != 0)\n    {\n      \
    \  result += n % 10;\n        carry = 1;\n    }\n    \n    while (carry > 0)\n\
    \    {\n        result += digits[(n % 10) + 1];\n        n /= 10;\n        carry\
    \ -= 1;\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder = x\
    \ % 10;\n        x /= 10;\n        result += to_string(remainder);\n        shift\
    \ -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n\
    \        x /= 10;\n        result += to_string(remainder);\n        shift -= 1;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    if (shift > digits(x))\n    {\n        remainder = digits(x)\
    \ % shift;\n        shift -= remainder;\n        x /= shift;\n        \n     \
    \   for(long i = 0; i < shift; i++)\n        {\n            result += digit(x);\n\
    \            x /= 10;\n        }\n        \n        result += digit(x);\n    \
    \    \n        return result;\n    }\n    \n    for(long i = 0; i < shift; i++)\n\
    \    {\n        result += digit(x);\n        x /= 10;\n    }\n    \n    result\
    \ += digit(x);\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long digits = (int)std::log10(x);\n    long shift = std::abs(shift);\n  \
    \  long shift_digits = shift % digits;\n    long shift_digits_power = shift_digits\
    \ + digits;\n    long shift_digits_power_power = shift_digits_power * shift_digits_power;\n\
    \    long shift_digits_power_power_power = shift_digits_power_power * shift_digits_power;\n\
    \    long shift_digits_power_power_power_power = shift_digits_power_power_power\
    \ * shift_digits_power;\n    long shift_digits_power_power_power_power_power =\
    \ shift_digits_power_power_power_power * shift_digits_power;\n    long shift_digits_power_power_power_power_power_power\
    \ = shift_digits_power_power_power_power_power_power * shift_digits_power;\n \
    \   long shift_digits_power_power_power_power_power_power_power = shift_digits_power_power_power_power_power_power_power\
    \ * shift_digits_power;\n    long shift_digits_power_power_power_power_power_power_power_power\
    \ = shift_digits_power_power_power_power_power_power_power_power * shift_digits_power;\n\
    \    long shift_digits_power_power_power_power_power_power_power_power_power =\
    \ shift_digits_power_power_power_power_power_power_power_power_power_power * shift_digits_power;\n\
    \    long shift_digits_power_power_power_power_power_power_power_power_power_power\
    \ = shift_digits_power_power_power_power_power_power_power_power_power_power_power\
    \ * shift_digits_power;\n    long shift_digits_power_power_power_power_power_power_power_power_power_power_power\
    \ = shift_digits_power_power_power_power_power_power_power_power_power_power_power\
    \ * shift_digits_power;\n    long shift_digits_power_power_power_power_power_power_power_power_power_power_power\
    \ = shift_digits_power_power_power_power_power_power_power_power_power_power_power_power\
    \ * shift_digits_power;\n    long shift_digits_power_power_power_power_power_power_power_power_power_power_power_power\
    \ = shift_digits_power_power_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ * shift_digits_power;\n    long shift_digits_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ = shift_digits_power_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ * shift_digits_power;\n    long shift_digits_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ = shift_digits_power_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ * shift_digits_power;\n    long shift_digits_power_power_power_power_", "{\n\
    \    string result = \"\";\n    long n = x;\n    long m = 1;\n    long digit;\n\
    \    \n    while (n > 0)\n    {\n        digit = n % 10;\n        result += digit;\n\
    \        n /= 10;\n    }\n    \n    while (shift > 0)\n    {\n        digit =\
    \ m % 10;\n        result += digit;\n        m /= 10;\n        shift -= 1;\n \
    \   }\n    \n    return result;\n}\n/*\nReturn the number of digits in x\n*/\n\
    long digits(long x)\n{\n    long n = 0;\n    long digit;\n    \n    while (x >\
    \ 0)\n    {\n        digit = x % 10;\n        n += 1;\n        x /= 10;\n    }\n\
    \    \n    return n;\n}\n/*\nReturn the number of digits in x\n*/\nlong digits(string\
    \ x)\n{\n    long n = 0;\n    long digit;\n    \n    for (auto c : x)\n    {\n\
    \        digit = c - '0';\n        n += 1;\n    }\n    \n    return n;\n}\n/*\n\
    Return the number of digits in x\n*/\nlong digits(string x, int base)\n{\n   \
    \ long n = 0;\n    long digit;\n    \n    for (auto c : x)\n    {\n        digit\
    \ = c - '0';\n        n += digit * base;\n    }\n    \n    return n;\n}\n/*\n\
    Return the number of digits in x\n*/\nlong digits(string x, int base, int radix)\n\
    {\n    long n = 0;\n    long digit;\n    \n    for (auto c : x)\n    {\n     \
    \   digit = c - '0';\n        n += digit * radix;\n    }\n    \n    return n;\n\
    }\n/*\nReturn the number of digits in x\n*/\nlong digits(string x, int radix)\n\
    {\n    return digits(x, radix, 10);\n}\n/*\nReturn the number of digits in x\n\
    */\nlong digits(string x, int radix, int base)\n{\n    return digits(x, radix,\
    \ base);\n}\n/*\nReturn the number of digits in x\n*/\nlong digits(string x, int\
    \ radix, int base)\n{\n    long n = 0;\n    long digit;\n    \n    for (auto c\
    \ : x)\n    {\n        digit = c - '0';\n        n += digit * base;\n    }\n \
    \   \n    return n;\n}\n/*\nReturn the number of digits in x\n*/\nlong digits(string\
    \ x, int radix)\n{\n    return digits(x, radix, 10);\n}\n/*\nReturn the number\
    \ of digits in x\n*/", "{\n    string result = \"\";\n    long n = x;\n    long\
    \ m = 1;\n    long r = 1;\n    long digit;\n    \n    while(n > 0)\n    {\n  \
    \      digit = n % 10;\n        result += digit;\n        n = n / 10;\n    }\n\
    \    \n    while(shift > 0)\n    {\n        digit = result % 10;\n        result\
    \ = result / 10;\n        result = result + digit;\n        shift = shift / 10;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n\
    \        x /= 10;\n        result += to_string(remainder);\n        shift -= 1;\n\
    \    }\n    \n    while(shift < 0)\n    {\n        remainder = x % 10;\n     \
    \   x /= 10;\n        result += to_string(remainder);\n        shift += 1;\n \
    \   }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long n\
    \ = x;\n    long m = shift % 10;\n    long d = shift / 10;\n    \n    while (m\
    \ > 0) {\n        result += n % 10;\n        n = n / 10;\n        m--;\n    }\n\
    \    \n    while (d > 0) {\n        result += n % 10;\n        n = n / 10;\n \
    \       d--;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long remainder;\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder = x\
    \ % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    long remainder;\n \
    \   \n    while (x) {\n        remainder = x % 10;\n        x /= 10;\n       \
    \ result += to_string(remainder);\n    }\n    \n    result += (shift > result.size())\
    \ ? to_string(shift-result.size()) : \"\";\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long n = x;\n    long m = 1;\n    long digit;\n\
    \    \n    while (n != 0) {\n        digit = n % 10;\n        n /= 10;\n     \
    \   if (shift > m) {\n            result += digit;\n            m += 1;\n    \
    \    } else {\n            result += digit;\n            m += shift;\n       \
    \ }\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long m = 1;\n    long temp;\n    \n    while (n != 0) {\n      \
    \  temp = n % 10;\n        result += temp;\n        n = n / 10;\n    }\n    \n\
    \    long shiftRight = shift;\n    \n    while (shiftRight > 0) {\n        shiftRight--;\n\
    \        result += m;\n        m *= 10;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
