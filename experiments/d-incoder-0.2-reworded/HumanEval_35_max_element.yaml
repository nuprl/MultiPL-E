name: HumanEval_35_max_element
language: d
prompt: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
  \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
  \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n"
tests: "unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
  \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
  \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
completions: ["{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        if(l[i] > max) \n        {\n            max = l[i];\n     \
    \   }\n    }\n    return max;\n}", "{\n    long max = 0;\n    long i;\n    for(i\
    \ = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n        {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}", "{\n    long max =\
    \ l[0];\n    for (int i = 1; i < l.length; i++) \n        if (l[i] > max) \n \
    \           max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    for (int i = 1; i < l.length; i++) \n    \
    \    if (l[i] < min) \n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -123L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    for\
    \ (int i = 0; i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n\
    /*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -123L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    for (int i = 0; i < l.length; i++) \n        product\
    \ *= l[i];\n    return product;\n}\n/*\nReturn mean of all elements in the array.\n\
    \    >>> mean_elements([1L, 2L, 3L])\n    2.0\n    >>> mean_elements([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -2.5\n    \n*/\ndouble mean_elements(long[]\
    \ l) \n{\n    double sum = 0;\n    for (int i = 0; i < l.length; i++) \n     \
    \   sum += l[i];\n    return sum / l.length;\n}\n/*\nReturn median of all elements\
    \ in the array.\n    >>> median_elements([1L, 2L, 3L])\n    2.0\n    >>> median_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -2.5\n    \n*/\ndouble median_elements(long[]\
    \ l) \n{\n    long middle = l.length / 2;\n    long sum", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; ++i)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        product *= l[i];\n   \
    \ }\n    return product;\n}\n/*\nReturn sum of all elements in the array.\n  \
    \  >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[] l)\
    \ \n{\n    double product = 1;", "{\n    long max = 0;\n    long i;\n    for(i\
    \ = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n        {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        if(l[i] < min) \n        {\n            min = l[i];\n        }\n\
    \    }\n    return min;\n}\n/*\nReturn sum of all elements in the array.\n   \
    \ >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong sum_elements(long[]\
    \ l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the array.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n    long product = 1;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        product *= l[i];\n\
    \    }\n    return product;\n}\n/*\nReturn sum of all elements in the array.\n\
    \    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the array.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3", "{\n    long max = l[0];\n\
    \    for (int i = 1; i < l.length; i++) \n        if (l[i] > max) \n         \
    \   max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the array.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    for (int i = 1; i < l.length; i++) \n    \
    \    if (l[i] < min) \n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    for\
    \ (int i = 0; i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n\
    /*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    for (int i = 0; i < l.length; i++) \n        product\
    \ *= l[i];\n    return product;\n}\n/*\nReturn absolute value of all elements\
    \ in the array.\n    >>> abs_elements([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>>\
    \ abs_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L]\n    \n*/\nlong[] abs_elements(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n        result[i] = Math.abs(l[i]);\n    return result;\n}\n/*\nReturn\
    \ absolute value of all elements in the array.\n    >>> abs_elements([1L, 2L,\
    \ 3L])\n    [1L, 2L, 3L]\n    >>> abs_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10", "{\n    long max_value = l[0];\n    long max_pos = 0;\n\
    \    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i] > max_value)\n\
    \        {\n            max_value = l[i];\n            max_pos = i;\n        }\n\
    \    }\n    return max_pos;\n}\n/*\nReturn minimum element in the array.\n   \
    \ >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_value = l[0];\n    long min_pos = 0;\n    for(int i = 1;\
    \ i < l.length; i++)\n    {\n        if(l[i] < min_value)\n        {\n       \
    \     min_value = l[i];\n            min_pos = i;\n        }\n    }\n    return\
    \ min_pos;\n}\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n \
    \   }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; i++)\n    {\n\
    \        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all\
    \ elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, ", "{\n    long\
    \ max = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n    {\n        if\
    \ (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n    long\
    \ max_val = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n\
    \    {\n        if(l[i] > max_val)\n        {\n            max_val = l[i];\n \
    \           max_idx = i;\n        }\n    }\n    return max_val;\n}", "{\n    long\
    \ max = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n        if(l[i]\
    \ > max)\n            max = l[i];\n    return max;\n}\n/*\nReturn minimum element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n\
    \        if(l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n\
    }\n/*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\n     \
    \   product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements in\
    \ the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    double i;\n    for(i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the array.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product_elements(double[]\
    \ l) \n{", "{\n    long max_val = l[0];\n    for (long i = 1; i < l.length; ++i)\
    \ {\n        if (l[i] > max_val)\n            max_val = l[i];\n    }\n    return\
    \ max_val;\n}", "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length;\
    \ ++i) {\n        if (l[i] > max)\n            max = l[i];\n    }\n    return\
    \ max;\n}\n/*\nReturn minimum element in the array.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ < min)\n            min = l[i];\n    }\n    return min;\n}\n/*\nReturn sum of\
    \ all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n   \
    \ >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long i;\n \
    \   for (i = 1; i < l.length; ++i) {\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    long i;\n    for (i = 1; i < l.length; ++i) {\n  \
    \      product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all\
    \ elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n    double\
    \ i;\n    for (i = 1; i < l.length; ++i) {\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/", "{\n    long max = l[0];\n    long i;\n\
    \    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n            max\
    \ = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element in the array.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i)\
    \ {\n        if (l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i\
    \ = 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n  \
    \  \n*/\nlong product(long[] l) \n{\n    long prod = 1;\n    long i;\n    for\
    \ (i = 0; i < l.length; ++i)\n        prod *= l[i];\n    return prod;\n}\n/*\n\
    Return sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for\
    \ (i = 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n  \
    \  \n*/\ndouble product(double[] l) \n{\n    double prod = 1;\n    long i;\n \
    \   for (i = 0; i < l.length; ++i)\n        prod *= ", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max)\
    \ \n        {\n            max = l[i];\n        }\n    }\n    return max;\n}\n\
    /*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the array.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9", "{\n    long max = 0;\n    long i;\n    for(i = 0;\
    \ i < l.length; i++)\n    {\n        if(l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0;\
    \ i < l.length; ++i)\n    {\n        if(l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0;\
    \ i < l.length; i++)\n    {\n        if(l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn\
    \ max;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
