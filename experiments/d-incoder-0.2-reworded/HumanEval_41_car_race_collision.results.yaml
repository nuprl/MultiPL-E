language: d
name: HumanEval_41_car_race_collision
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_point;\n   \
    \ long collision_point_2;\n    long collision_point_3;\n    long collision_point_4;\n\
    \    long collision_point_5;\n    long collision_point_6;\n    long collision_point_7;\n\
    \    long collision_point_8;\n    long collision_point_9;\n    long collision_point_10;\n\
    \    long collision_point_11;\n    long collision_point_12;\n    long collision_point_13;\n\
    \    long collision_point_14;\n    long collision_point_15;\n    long collision_point_16;\n\
    \    long collision_point_17;\n    long collision_point_18;\n    long collision_point_19;\n\
    \    long collision_point_20;\n    long collision_point_21;\n    long collision_point_22;\n\
    \    long collision_point_23;\n    long collision_point_24;\n    long collision_point_25;\n\
    \    long collision_point_26;\n    long collision_point_27;\n    long collision_point_28;\n\
    \    long collision_point_29;\n    long collision_point_30;\n    long collision_point_31;\n\
    \    long collision_point_32;\n    long collision_point_33;\n    long collision_point_34;\n\
    \    long collision_point_35;\n    long collision_point_36;\n    long collision_point_37;\n\
    \    long collision_point_38;\n    long collision_point_39;\n    long collision_point_40;\n\
    \    long collision_point_41;\n    long collision_point_42;\n    long collision_point_43;\n\
    \    long collision_point_44;\n    long collision_point_45;\n    long collision_point_46;\n\
    \    long collision_point_47;\n    long collision_point_48;\n    long collision_point_49;\n\
    \    long collision_point_50;\n    long collision_point_51;\n    long collision_point_52;\n\
    \    long collision_point_53;\n    long collision_point_54;\n    long collision_point_55;\n\
    \    long collision_point_56;\n    long collision_point_57;\n    long collision_point_58;\n\
    \    long collision_point_59;\n    long collision_point_60;\n    long collision_point_61;\n\
    \    long collision_point_62;\n    long collision_point_63;\n    long collision_point_64;\n\
    \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppiqfuz9d.d(86): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppiqfuz9d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_left = 0;\n    long car_collisions_right_left = 0;\n   \
    \ long car_collisions_right_right = 0;\n    long car_collisions_left_left_right\
    \ = 0;\n    long car_collisions_left_left_left = 0;\n    long car_collisions_right_left_left\
    \ = 0;\n    long car_collisions_right_left_right = 0;\n    long car_collisions_left_right_left\
    \ = 0;\n    long car_collisions_left_right_right = 0;\n    long car_collisions_right_right_left\
    \ = 0;\n    long car_collisions_right_right_right = 0;\n    long car_collisions_left_left_left_right\
    \ = 0;\n    long car_collisions_left_left_left_left = 0;\n    long car_collisions_right_left_left_left\
    \ = 0;\n    long car_collisions_right_left_left_right = 0;\n    long car_collisions_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_right = 0;\n    long car_collisions_left_right_left_left\
    \ = 0;\n    long car_collisions_left_right_left_right = 0;\n    long car_collisions_left_right_right_left\
    \ = 0;\n    long car_collisions_left_right_right_right = 0;\n    long car_collisions_right_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left_right = 0;\n    long car_collisions_right_right_right_left\
    \ = 0;\n    long car_collisions_right_right_right_right = 0;\n    long car_collisions_left_left_left_left_right\
    \ = 0;\n    long car_collisions_left_left_left_left = 0;\n    long car_collisions_right_left_left_left\
    \ = 0;\n    long car_collisions_right_left_left_right = 0;\n    long car_collisions_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_right = 0;\n    long car_collisions_right_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left_right = 0;\n    long car_collisions_right_right_right_left\
    \ = 0;\n    long car_collisions_right_right_right_right = 0;\n    long car_collisions_left_left_left_left_right\
    \ = 0;\n    long car_collisions_left_left_left_left = 0;\n    long car_collisions_right_left_left_left\
    \ = 0;\n    long car_collisions_right_left_left_right = 0;\n    long car_collisions_right_left_right_left\
    \ = 0;\n    long \nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppoumk1sh.d(63): Error: no identifier for declarator `long`\n/tmp/tmppoumk1sh.d(63):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmppoumk1sh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k;\n\
    \    long collisions = 0;\n    long car_collisions = 0;\n    long car_collisions_left\
    \ = 0;\n    long car_collisions_right = 0;\n    long car_collisions_left_right\
    \ = 0;\n    long car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9aazqkjv.d(45): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9aazqkjv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2iklh4u2.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmp2iklh4u2.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2iklh4u2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collisions = 0;\n    long collision_distance;\n    long collision_distance_left,\
    \ collision_distance_right;\n    long collision_distance_left_right, collision_distance_right_left;\n\
    \    long collision_distance_left_left_right, collision_distance_left_right_left;\n\
    \    long collision_distance_left_left_left_right, collision_distance_left_right_left_left;\n\
    \    long collision_distance_left_left_left_right_left, collision_distance_left_right_left_left_left;\n\
    \    long collision_distance_left_left_left_right_left_left, collision_distance_left_right_left_left_left_left_left;\n\
    \    long collision_distance_left_left_left_right_left_left_left, collision_distance_left_right_left_left_left_left_left_left;\n\
    \    long collision_distance_left_left_left_right_left_left_left_left, collision_distance_left_right_left_left_left_left_left_left_left;\n\
    \    long collision_distance_left_left_left_right_left_left_left_left_left, collision_distance_left_right_left_left_left_left_left_left_left_left;\n\
    \    long collision_distance_left_left_right_left_left_left_left_left_left, collision_distance_left_right_left_left_left_left_left_left_left_left;\n\
    \    long collision_distance_left_left_right_left_left_left_left_left_left, collision_distance_left_right_left_left_left_left_left_left_left_left_left;\n\
    \    long collision_distance_left_left_right_left_left_left_left_left_left, collision_distance_left_right_left_left_left_left_left_left_left_left;\n\
    \    long collision_distance_left_left_right_left_left_left_left_left_left, collision_distance_left_right_left_left_left_left_left_left_left_left;\n\
    \    long collision_distance_left_left_right_left_left_left_left_left_left_left,\
    \ collision_distance_left_right_left_left_left_left_left_left_left_left_left;\n\
    \    long collision_distance_left_left_right_left_left_left_left_left_left_left,\
    \ collision_distance_left_right_left_left_left_left_left_left_left_left_left;\n\
    \    long collision_distance_left_left_right_left_left_left_left_left_left_left,\
    \ collision_distance_left_right_left_left_left_left_left_left_left_left_left;\n\
    \    long collision_distance_left_left_right_left_left_left_left_left_left_left,\
    \ collision_distance_left_right_left_left_left_left_left_left_left_left_left;\n\
    \    long collision_distance_left_left_right_left_left_left_left_left_left_left,\
    \ collision_distance_left_right_left_left_left_left_left_left_left_left_left;\n\
    \    long collision_distance_left_left_right_left_left_left_left_left_left_left_left,\
    \ collision_distance_left_right_left_left_left_left_left_left_left_left_left_left;\n\
    \    long collision_distance_left_left_right_left_left_left_left_left_left_left,\
    \ collision_distance_left_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplalj52zy.d(40): Error: semicolon expected, not `unittest`\n/tmp/tmplalj52zy.d(40):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmplalj52zy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_left = 0;\n    long car_collisions_right_left = 0;\n   \
    \ long car_collisions_right_right = 0;\n    long car_collisions_left_right_left\
    \ = 0;\n    long car_collisions_left_left_right = 0;\n    long car_collisions_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left = 0;\n    long car_collisions_left_right_right_left\
    \ = 0;\n    long car_collisions_left_left_left_right = 0;\n    long car_collisions_right_left_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left = 0;\n    long car_collisions_left_right_right_left_left\
    \ = 0;\n    long car_collisions_left_left_left_right_left = 0;\n    long car_collisions_right_left_left_left_right\
    \ = 0;\n    long car_collisions_right_right_left_left_left = 0;\n    long car_collisions_left_right_right_left_left_left\
    \ = 0;\n    long car_collisions_left_left_left_right_left_left = 0;\n    long\
    \ car_collisions_right_left_left_left_right_left = 0;\n    long car_collisions_right_right_left_left_left_left\
    \ = 0;\n    long car_collisions_left_right_right_left_left_left = 0;\n    long\
    \ car_collisions_left_left_left_right_left_left_left = 0;\n    long car_collisions_right_left_left_left_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_left_left_left = 0;\n  \
    \  long car_collisions_left_right_right_left_left_left_left = 0;\n    long car_collisions_right_left_left_left_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_left_left_left = 0;\n  \
    \  long car_collisions_left_right_right_left_left_left_left = 0;\n    long car_collisions_right_left_left_left_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_left_left_left = 0;\n  \
    \  long car_collisions_left_right_right_left_left_left_left = 0;\n    long car_collisions_right_left_left_left_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_left_left_left = 0;\n  \
    \  long car_collisions_left_right_right_left_left_left_left = 0;\n    long car_collisions_right_left_left_left_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_left_left_left = 0;\n  \
    \  \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_igeb9dn.d(58): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_igeb9dn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_num = n;\n    long car_speed = n;\n    long car_pos = 0;\n\
    \    long car_pos_temp = 0;\n    long car_pos_temp2 = 0;\n    long car_pos_temp3\
    \ = 0;\n    long car_pos_temp4 = 0;\n    long car_pos_temp5 = 0;\n    long car_pos_temp6\
    \ = 0;\n    long car_pos_temp7 = 0;\n    long car_pos_temp8 = 0;\n    long car_pos_temp9\
    \ = 0;\n    long car_pos_temp10 = 0;\n    long car_pos_temp11 = 0;\n    long car_pos_temp12\
    \ = 0;\n    long car_pos_temp13 = 0;\n    long car_pos_temp14 = 0;\n    long car_pos_temp15\
    \ = 0;\n    long car_pos_temp16 = 0;\n    long car_pos_temp17 = 0;\n    long car_pos_temp18\
    \ = 0;\n    long car_pos_temp19 = 0;\n    long car_pos_temp20 = 0;\n    long car_pos_temp21\
    \ = 0;\n    long car_pos_temp22 = 0;\n    long car_pos_temp23 = 0;\n    long car_pos_temp24\
    \ = 0;\n    long car_pos_temp25 = 0;\n    long car_pos_temp26 = 0;\n    long car_pos_temp27\
    \ = 0;\n    long car_pos_temp28 = 0;\n    long car_pos_temp29 = 0;\n    long car_pos_temp30\
    \ = 0;\n    long car_pos_temp31 = 0;\n    long car_pos_temp32 = 0;\n    long car_pos_temp33\
    \ = 0;\n    long car_pos_temp34 = 0;\n    long car_pos_temp35 = 0;\n    long car_pos_temp36\
    \ = 0;\n    long car_pos_temp37 = 0;\n    long car_pos_temp38 = 0;\n    long car_pos_temp39\
    \ = 0;\n    long car_pos_temp40 = 0;\n    long car_pos_temp41 = 0;\n    long car_pos_temp42\
    \ = 0;\n    long car_pos_temp43 = 0;\n    long car_pos_temp44 = 0;\n    long car_pos_temp45\
    \ = 0;\n    long car_pos_temp46 = 0;\n    long car_pos_temp47 = 0;\n    long car_pos_temp48\
    \ = 0;\n    long car_pos_temp49 = 0;\n    long car_pos_temp50 = 0;\n    long car_pos_temp51\
    \ = 0;\n    long car_pos_temp52 = 0;\n    long car_pos_temp53 = 0;\n    long car_pos_temp54\
    \ = 0;\n    long \nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp73zr5xdn.d(76): Error: no identifier for declarator `long`\n/tmp/tmp73zr5xdn.d(76):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp73zr5xdn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_width = std.sqrt(n);\n    long car_height = car_width;\n\
    \    long car_length = car_width * car_width;\n    long car_speed = car_width\
    \ * car_width;\n    long car_max_speed = car_width * car_width;\n    long car_max_acceleration\
    \ = car_width * car_width;\n    long car_max_deceleration = car_width * car_width;\n\
    \    long car_max_steering = car_width * car_width;\n    long car_max_braking\
    \ = car_width * car_width;\n    long car_max_steering_angle = car_width * car_width;\n\
    \    long car_max_braking_angle = car_width * car_width;\n    long car_max_steering_angle_velocity\
    \ = car_width * car_width;\n    long car_max_braking_angle_velocity = car_width\
    \ * car_width;\n    long car_max_acceleration_velocity = car_width * car_width;\n\
    \    long car_max_deceleration_velocity = car_width * car_width;\n    long car_max_acceleration_acceleration\
    \ = car_width * car_width;\n    long car_max_deceleration_acceleration = car_width\
    \ * car_width;\n    long car_max_acceleration_deceleration = car_width * car_width;\n\
    \    long car_max_deceleration_deceleration = car_width * car_width;\n    long\
    \ car_max_acceleration_acceleration_velocity = car_width * car_width;\n    long\
    \ car_max_deceleration_acceleration_velocity = car_width * car_width;\n    long\
    \ car_max_acceleration_deceleration_velocity = car_width * car_width;\n    long\
    \ car_max_acceleration_acceleration_acceleration = car_width * car_width;\n  \
    \  long car_max_deceleration_acceleration_acceleration = car_width * car_width;\n\
    \    long car_max_acceleration_deceleration_acceleration = car_width * car_width;\n\
    \    long car_max_acceleration_acceleration_deceleration = car_width * car_width;\n\
    \    long car_max_deceleration_acceleration_deceleration = car_width * car_width;\n\
    \    long car_max_acceleration_acceleration_acceleration_velocity = car_width\
    \ * car_width;\n    long car_max_deceleration_acceleration_acceleration_velocity\
    \ = car_width * car_width;\n    long car_max_acceleration_deceleration_acceleration_velocity\
    \ = car_width * car_width;\n    long car_max_acceler\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5sm1r40m.d(49): Error: semicolon expected, not `unittest`\n/tmp/tmp5sm1r40m.d(49):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5sm1r40m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp68b3e_9g.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmp68b3e_9g.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp68b3e_9g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_left;\n\
    \    long collision_right;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph6ty14hr.d(92): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph6ty14hr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyopw7ki0.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpyopw7ki0.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpyopw7ki0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp70pxcbp5.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmp70pxcbp5.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp70pxcbp5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_length;\n\
    \    long collision_length_2;\n    long collision_length_3;\n    long collision_length_4;\n\
    \    long collision_length_5;\n    long collision_length_6;\n    long collision_length_7;\n\
    \    long collision_length_8;\n    long collision_length_9;\n    long collision_length_10;\n\
    \    long collision_length_11;\n    long collision_length_12;\n    long collision_length_13;\n\
    \    long collision_length_14;\n    long collision_length_15;\n    long collision_length_16;\n\
    \    long collision_length_17;\n    long collision_length_18;\n    long collision_length_19;\n\
    \    long collision_length_20;\n    long collision_length_21;\n    long collision_length_22;\n\
    \    long collision_length_23;\n    long collision_length_24;\n    long collision_length_25;\n\
    \    long collision_length_26;\n    long collision_length_27;\n    long collision_length_28;\n\
    \    long collision_length_29;\n    long collision_length_30;\n    long collision_length_31;\n\
    \    long collision_length_32;\n    long collision_length_33;\n    long collision_length_34;\n\
    \    long collision_length_35;\n    long collision_length_36;\n    long collision_length_37;\n\
    \    long collision_length_38;\n    long collision_length_39;\n    long collision_length_40;\n\
    \    long collision_length_41;\n    long collision_length_42;\n    long collision_length_43;\n\
    \    long collision_length_44;\n    long collision_length_45;\n    long collision_length_46;\n\
    \    long collision_length_47;\n    long collision_length_48;\n    long collision_length_49;\n\
    \    long collision_length_50;\n    long collision_length_51;\n    long collision_length_52;\n\
    \    long collision_length_53;\n    long collision_length_54;\n    long collision_length_55;\n\
    \    long collision_length_56;\n    long collision_length_57;\n    long collision_length_58;\n\
    \    long collision_length_59;\n    long collision_length_60;\n    long collision_length_61;\n\
    \    long collision_length_62;\n    long collision_length_63;\n    long collision_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpumo1_6qc.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmpumo1_6qc.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpumo1_6qc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_length;\n\
    \    long collision_length_2;\n    long collision_length_3;\n    long collision_length_4;\n\
    \    long collision_length_5;\n    long collision_length_6;\n    long collision_length_7;\n\
    \    long collision_length_8;\n    long collision_length_9;\n    long collision_length_10;\n\
    \    long collision_length_11;\n    long collision_length_12;\n    long collision_length_13;\n\
    \    long collision_length_14;\n    long collision_length_15;\n    long collision_length_16;\n\
    \    long collision_length_17;\n    long collision_length_18;\n    long collision_length_19;\n\
    \    long collision_length_20;\n    long collision_length_21;\n    long collision_length_22;\n\
    \    long collision_length_23;\n    long collision_length_24;\n    long collision_length_25;\n\
    \    long collision_length_26;\n    long collision_length_27;\n    long collision_length_28;\n\
    \    long collision_length_29;\n    long collision_length_30;\n    long collision_length_31;\n\
    \    long collision_length_32;\n    long collision_length_33;\n    long collision_length_34;\n\
    \    long collision_length_35;\n    long collision_length_36;\n    long collision_length_37;\n\
    \    long collision_length_38;\n    long collision_length_39;\n    long collision_length_40;\n\
    \    long collision_length_41;\n    long collision_length_42;\n    long collision_length_43;\n\
    \    long collision_length_44;\n    long collision_length_45;\n    long collision_length_46;\n\
    \    long collision_length_47;\n    long collision_length_48;\n    long collision_length_49;\n\
    \    long collision_length_50;\n    long collision_length_51;\n    long collision_length_52;\n\
    \    long collision_length_53;\n    long collision_length_54;\n    long collision_length_55;\n\
    \    long collision_length_56;\n    long collision_length_57;\n    long collision_length_58;\n\
    \    long collision_length_59;\n    long collision_length_60;\n    long collision_length_61;\n\
    \    long collision_length_62;\n    long collision_length_63;\n    long collision_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjw47hp3d.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmpjw47hp3d.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjw47hp3d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_length;\n\
    \    long collision_length_2;\n    long collision_length_3;\n    long collision_length_4;\n\
    \    long collision_length_5;\n    long collision_length_6;\n    long collision_length_7;\n\
    \    long collision_length_8;\n    long collision_length_9;\n    long collision_length_10;\n\
    \    long collision_length_11;\n    long collision_length_12;\n    long collision_length_13;\n\
    \    long collision_length_14;\n    long collision_length_15;\n    long collision_length_16;\n\
    \    long collision_length_17;\n    long collision_length_18;\n    long collision_length_19;\n\
    \    long collision_length_20;\n    long collision_length_21;\n    long collision_length_22;\n\
    \    long collision_length_23;\n    long collision_length_24;\n    long collision_length_25;\n\
    \    long collision_length_26;\n    long collision_length_27;\n    long collision_length_28;\n\
    \    long collision_length_29;\n    long collision_length_30;\n    long collision_length_31;\n\
    \    long collision_length_32;\n    long collision_length_33;\n    long collision_length_34;\n\
    \    long collision_length_35;\n    long collision_length_36;\n    long collision_length_37;\n\
    \    long collision_length_38;\n    long collision_length_39;\n    long collision_length_40;\n\
    \    long collision_length_41;\n    long collision_length_42;\n    long collision_length_43;\n\
    \    long collision_length_44;\n    long collision_length_45;\n    long collision_length_46;\n\
    \    long collision_length_47;\n    long collision_length_48;\n    long collision_length_49;\n\
    \    long collision_length_50;\n    long collision_length_51;\n    long collision_length_52;\n\
    \    long collision_length_53;\n    long collision_length_54;\n    long collision_length_55;\n\
    \    long collision_length_56;\n    long collision_length_57;\n    long collision_length_58;\n\
    \    long collision_length_59;\n    long collision_length_60;\n    long collision_length_61;\n\
    \    long collision_length_62;\n    long collision_length_63;\n    long collision_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz30puls0.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmpz30puls0.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpz30puls0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    for(i = 0; i < n; i++)\n    {\n        long j;\n    \
    \    for(j = 0; j < n; j++)\n        {\n            if(i == j)\n             \
    \   continue;\n            if(car_race_collision_helper(i, j))\n            {\n\
    \                collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7ibd3rgv.d(26): Error: undefined identifier `car_race_collision_helper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ibd3rgv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision_distance64;\n\
    \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2y1wx832.d(86): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2y1wx832.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long collisions = 0;\n    long collision_distance;\n\
    \    long collision_distance_left;\n    long collision_distance_right;\n    long\
    \ collision_distance_left_right;\n    long collision_distance_left_left;\n   \
    \ long collision_distance_right_left;\n    long collision_distance_right_right;\n\
    \    long collision_distance_left_left_right;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpee__sboo.d(77): Error: semicolon expected, not `unittest`\n/tmp/tmpee__sboo.d(77):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpee__sboo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long collision_distance = 0;\n    long collision_speed\
    \ = 0;\n    long collision_speed_left = 0;\n    long collision_speed_right = 0;\n\
    \    long collision_speed_total = 0;\n    long collision_speed_total_left = 0;\n\
    \    long collision_speed_total_right = 0;\n    long collision_speed_total_left_right\
    \ = 0;\n    long collision_speed_total_left_right_total = 0;\n    long collision_speed_total_left_right_total_left\
    \ = 0;\n    long collision_speed_total_left_right_total_right = 0;\n    long collision_speed_total_left_right_total_left_right\
    \ = 0;\n    long collision_speed_total_left_right_total_left_right_total = 0;\n\
    \    long collision_speed_total_left_right_total_left_right_total_left = 0;\n\
    \    long collision_speed_total_left_right_total_left_right_total_right = 0;\n\
    \    long collision_speed_total_left_right_total_left_right_total_left_right =\
    \ 0;\n    long collision_speed_total_left_right_total_left_right_total_left_right_total\
    \ = 0;\n    long collision_speed_total_left_right_total_left_right_total_left_right_total_left\
    \ = 0;\n    long collision_speed_total_left_right_total_left_right_total_left_right_total_right\
    \ = 0;\n    long collision_speed_total_left_right_total_left_right_total_left_right_total_left_right\
    \ = 0;\n    long collision_speed_total_left_right_total_left_right_total_left_right_total_left_right_total\
    \ = 0;\n    long collision_speed_total_left_right_total_left_right_total_left_right_total_left_right_total_left\
    \ = 0;\n    long collision_speed_total_left_right_total_left_right_total_left_right_total_left_right_total_right\
    \ = 0;\n    long collision_speed_total_left_right_total_left_right_total_left_right_total_left_right_total_left_right\
    \ = 0;\n    long collision_speed_total_left_right_total_left_right_total_left_right_total_left_right_total_left_right_total\
    \ = 0;\n    long collision_speed_total_left_right_total_left_right_total_left_right_total_left_right_total_left_right_total_left\
    \ = 0;\n    long collision_speed_total_left_right_total_left_right_total_left_right_total_left_right_total_left_right_total_right\
    \ = 0;\n    long collision_speed_total_left_right_total_left_right_total_left_right_total_left_right_total_left_right_total_left_right\
    \ = 0;\n    long collision_speed_total_left_right_total_left_right_total_left_right_total_left_right_total_left_right_total_left_right_total\
    \ = 0;\n    long collision_speed_total_left_right_total_left_right_total_left_right_total_left_right_total_left_right_total_left_right_total_left\
    \ = 0;\n    long collision_speed_total_left_right_total_left_right_total_left_right_total_left_right_total_left_right_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7s_u_nyt.d(50): Error: semicolon expected, not `unittest`\n/tmp/tmp7s_u_nyt.d(50):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7s_u_nyt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy3w2azh_.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpy3w2azh_.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy3w2azh_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_counter = 0;\n\
    \    long collision_counter_total = 0;\n    long collision_counter_left = 0;\n\
    \    long collision_counter_right = 0;\n    long collision_counter_left_total\
    \ = 0;\n    long collision_counter_right_total = 0;\n    long collision_counter_left_left\
    \ = 0;\n    long collision_counter_left_right = 0;\n    long collision_counter_right_left\
    \ = 0;\n    long collision_counter_right_right = 0;\n    long collision_counter_left_left_total\
    \ = 0;\n    long collision_counter_left_right_total = 0;\n    long collision_counter_right_left_total\
    \ = 0;\n    long collision_counter_right_right_total = 0;\n    long collision_counter_left_left_left_total\
    \ = 0;\n    long collision_counter_left_left_right_total = 0;\n    long collision_counter_left_right_left_total\
    \ = 0;\n    long collision_counter_left_right_right_total = 0;\n    long collision_counter_right_left_left_total\
    \ = 0;\n    long collision_counter_right_left_right_total = 0;\n    long collision_counter_right_right_left_total\
    \ = 0;\n    long collision_counter_right_right_right_total = 0;\n    long collision_counter_left_left_left_left_total\
    \ = 0;\n    long collision_counter_left_left_left_right_total = 0;\n    long collision_counter_left_left_right_left_total\
    \ = 0;\n    long collision_counter_left_left_right_right_total = 0;\n    long\
    \ collision_counter_left_right_left_left_total = 0;\n    long collision_counter_left_right_left_right_total\
    \ = 0;\n    long collision_counter_left_right_right_left_total = 0;\n    long\
    \ collision_counter_left_right_right_right_total = 0;\n    long collision_counter_right_left_left_left_total\
    \ = 0;\n    long collision_counter_right_left_left_right_total = 0;\n    long\
    \ collision_counter_right_left_right_left_total = 0;\n    long collision_counter_right_left_right_right_total\
    \ = 0;\n    long collision_counter_right_right_left_left_total = 0;\n    long\
    \ collision_counter_right_right_left_right_total = 0;\n    long collision_counter_right_right_right_left_total\
    \ = 0;\n    long collision_counter_right_right_right_right_total = 0;\n    long\
    \ collision_counter_left_left_left_left_left_total = 0;\n    long collision_counter_left_left_left_right_total\
    \ = 0;\n    long collision_counter_left_left_right_left_total = 0;\n    long collision_counter_left_left_right_right_total\
    \ = 0;\n    long collision_counter_left_right_left_left_total = 0;\n    long collision_counter_left_right_left_right_total\
    \ = 0;\n    long collision_counter_left_right_right_left_total = 0;\n    long\
    \ \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3w7ij1c0.d(67): Error: no identifier for declarator `long`\n/tmp/tmp3w7ij1c0.d(67):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3w7ij1c0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_dist;\n\
    \    long collision_dist_i;\n    long collision_dist_j;\n    long collision_dist_k;\n\
    \    long collision_dist_i_minus_j;\n    long collision_dist_i_minus_k;\n    long\
    \ collision_dist_j_minus_k;\n    long collision_dist_i_minus_k_minus_j;\n    long\
    \ collision_dist_i_minus_k_minus_j;\n    long collision_dist_i_minus_k_minus_j;\n\
    \    long collision_dist_i_minus_k_minus_j;\n    long collision_dist_i_minus_k_minus_j;\n\
    \    long collision_dist_i_minus_k_minus_j;\n    long collision_dist_i_minus_k_minus_j;\n\
    \    long collision_dist_i_minus_k_minus_j;\n    long collision_dist_i_minus_k_minus_j;\n\
    \    long collision_dist_i_minus_k_minus_j;\n    long collision_dist_i_minus_k_minus_j;\n\
    \    long collision_dist_i_minus_k_minus_j;\n    long collision_dist_i_minus_k_minus_j;\n\
    \    long collision_dist_i_minus_k_minus_j;\n    long collision_dist_i_minus_k_minus_j;\n\
    \    long collision_dist_i_minus_k_minus_j;\n    long collision_dist_i_minus_k_minus_j;\n\
    \    long collision_dist_i_minus_k_minus_j;\n    long collision_dist_i_minus_k_minus_j;\n\
    \    long collision_dist_i_minus_k_minus_j;\n    long collision_dist_i_minus_k_minus_j;\n\
    \    long collision_dist_i_minus_k_minus_j;\n    long collision_dist_i_minus_k_minus_j;\n\
    \    long collision_dist_i_minus_k_minus_j;\n    long collision_dist_i_minus_k_minus_j;\n\
    \    long collision_dist_i_minus_k_minus_j;\n    long collision_dist_i_minus_k_minus_j;\n\
    \    long collision_dist_i_minus_k_minus_j;\n    long collision_dist_i_minus_k_minus_j;\n\
    \    long collision_dist_i_minus_k_minus_j;\n    long collision_dist_i_min\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn8fhspfr.d(60): Error: semicolon expected, not `unittest`\n/tmp/tmpn8fhspfr.d(60):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpn8fhspfr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k;\n\
    \    long collisions = 0;\n    for(i=0;i<n;i++) {\n        for(j=i+1;j<n;j++)\
    \ {\n            for(k=0;k<n;k++) {\n                if(std.abs(car_speed(i,k)-car_speed(j,k))\
    \ > std.abs(car_speed(i,j)-car_speed(j,k))) {\n                    collisions++;\n\
    \                }\n            }\n        }\n    }\n    return collisions;\n\
    }\n/*\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu5gdeffg.d(30): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpu5gdeffg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_left = 0;\n    long car_collisions_right_left = 0;\n   \
    \ long car_collisions_right_right = 0;\n    long car_collisions_left_left_right\
    \ = 0;\n    long car_collisions_left_right_left = 0;\n    long car_collisions_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left = 0;\n    long car_collisions_left_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_left = 0;\n    long car_collisions_right_left_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left = 0;\n    long car_collisions_left_left_right_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_left = 0;\n    long car_collisions_right_left_left_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_left = 0;\n    long car_collisions_left_left_right_left_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_left_left = 0;\n    long\
    \ car_collisions_right_left_left_left_left_left = 0;\n    long car_collisions_right_right_left_left_left_left\
    \ = 0;\n    long car_collisions_left_left_right_left_left_left_left = 0;\n   \
    \ long car_collisions_left_right_left_left_left_left_left = 0;\n    long car_collisions_right_left_left_left_left_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_left_left_left = 0;\n  \
    \  long car_collisions_left_left_right_left_left_left_left_left = 0;\n    long\
    \ car_collisions_left_right_left_left_left_left_left_left = 0;\n    long car_collisions_right_left_left_left_left_left_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_left_left_left_left = 0;\n\
    \    long car_collisions_left_left_right_left_left_left_left_left = 0;\n    long\
    \ car_collisions_left_right_left_left_left_left_left_left = 0;\n    long car_collisions_right_left_left_left_left_left_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_left_left_left_left = 0;\n\
    \    long car_collisions_left_left_right_left_left_left_left_left_left = 0;\n\
    \    long car_collisions_left_right_left_left_left_left_left_left = 0;\n    long\
    \ car_collisions_right_left_left_left_left_left_left_left = 0;\n    long car\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4npynnxk.d(57): Error: semicolon expected, not `unittest`\n/tmp/tmp4npynnxk.d(57):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4npynnxk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collisions = 0;\n    long collision_counter = 0;\n    long\
    \ collision_counter2 = 0;\n    long collision_counter3 = 0;\n    long collision_counter4\
    \ = 0;\n    long collision_counter5 = 0;\n    long collision_counter6 = 0;\n \
    \   long collision_counter7 = 0;\n    long collision_counter8 = 0;\n    long collision_counter9\
    \ = 0;\n    long collision_counter10 = 0;\n    long collision_counter11 = 0;\n\
    \    long collision_counter12 = 0;\n    long collision_counter13 = 0;\n    long\
    \ collision_counter14 = 0;\n    long collision_counter15 = 0;\n    long collision_counter16\
    \ = 0;\n    long collision_counter17 = 0;\n    long collision_counter18 = 0;\n\
    \    long collision_counter19 = 0;\n    long collision_counter20 = 0;\n    long\
    \ collision_counter21 = 0;\n    long collision_counter22 = 0;\n    long collision_counter23\
    \ = 0;\n    long collision_counter24 = 0;\n    long collision_counter25 = 0;\n\
    \    long collision_counter26 = 0;\n    long collision_counter27 = 0;\n    long\
    \ collision_counter28 = 0;\n    long collision_counter29 = 0;\n    long collision_counter30\
    \ = 0;\n    long collision_counter31 = 0;\n    long collision_counter32 = 0;\n\
    \    long collision_counter33 = 0;\n    long collision_counter34 = 0;\n    long\
    \ collision_counter35 = 0;\n    long collision_counter36 = 0;\n    long collision_counter37\
    \ = 0;\n    long collision_counter38 = 0;\n    long collision_counter39 = 0;\n\
    \    long collision_counter40 = 0;\n    long collision_counter41 = 0;\n    long\
    \ collision_counter42 = 0;\n    long collision_counter43 = 0;\n    long collision_counter44\
    \ = 0;\n    long collision_counter45 = 0;\n    long collision_counter46 = 0;\n\
    \    long collision_counter47 = 0;\n    long collision_counter48 = 0;\n    long\
    \ collision_counter49 = 0;\n    long collision_counter50 = 0;\n    long collision_counter51\
    \ = 0;\n    long collision_counter52 = 0;\n    long collision_counter53 = 0;\n\
    \    long collision_counter54 = 0;\n    long collision_counter55 = 0;\n    long\
    \ collision_counter56 = 0;\n    long collision_counter57 = 0;\n    long collision_counter58\
    \ = 0;\n    long collision_counter59 = 0;\n    long collision_counter60 = 0;\n\
    \    long collision_counter61 = 0;\n    long collision_counter62 = 0;\n    long\
    \ collision_counter\nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxrotks7j.d(82): Error: semicolon expected, not `unittest`\n/tmp/tmpxrotks7j.d(82):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpxrotks7j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    for(i = 0; i < n; ++i)\n    {\n        long j = i + 1;\n\
    \        while(j < n)\n        {\n            if(car_race_collision_helper(i,\
    \ j))\n            {\n                collisions++;\n            }\n         \
    \   j++;\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp62i8ajm7.d(24): Error: undefined identifier `car_race_collision_helper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp62i8ajm7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k;\n\
    \    long collisions = 0;\n    for(i = 1; i < n; i++)\n    {\n        for(j =\
    \ i+1; j < n; j++)\n        {\n            for(k = 0; k < n; k++)\n          \
    \  {\n                if(i == k && j == k) continue;\n                if(i ==\
    \ k || j == k) continue;\n                if(std.abs(car_distance(i,j,k)) < std.abs(car_distance(i,j,k)\
    \ + car_distance(k,j,i)))\n                {\n                    collisions++;\n\
    \                }\n            }\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgeu0pn0z.d(27): Error: undefined identifier `abs` in package
    `std`\n/tmp/tmpgeu0pn0z.d(27): Error: undefined identifier `abs` in package `std`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgeu0pn0z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long car_collisions = 0;\n    long car_collisions_left\
    \ = 0;\n    long car_collisions_right = 0;\n    long car_collisions_left_right\
    \ = 0;\n    long car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuso3lg3i.d(45): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuso3lg3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp68b3e_9g.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmp68b3e_9g.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp68b3e_9g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_sum;\n    long collision_distance_sum_i;\n    long\
    \ collision_distance_sum_j;\n    long collision_distance_sum_k;\n    long collision_distance_sum_sum;\n\
    \    long collision_distance_sum_sum_i;\n    long collision_distance_sum_sum_j;\n\
    \    long collision_distance_sum_sum_k;\n    long collision_distance_sum_sum_sum;\n\
    \    long collision_distance_sum_sum_sum_i;\n    long collision_distance_sum_sum_sum_j;\n\
    \    long collision_distance_sum_sum_sum_k;\n    long collision_distance_sum_sum_sum_sum;\n\
    \    long collision_distance_sum_sum_sum_sum_i;\n    long collision_distance_sum_sum_sum_sum_j;\n\
    \    long collision_distance_sum_sum_sum_sum_k;\n    long collision_distance_sum_sum_sum_sum_sum;\n\
    \    long collision_distance_sum_sum_sum_sum_sum_i;\n    long collision_distance_sum_sum_sum_sum_sum_j;\n\
    \    long collision_distance_sum_sum_sum_sum_sum_k;\n    long collision_distance_sum_sum_sum_sum_sum_sum;\n\
    \    long collision_distance_sum_sum_sum_sum_sum_sum_i;\n    long collision_distance_sum_sum_sum_sum_sum_sum_j;\n\
    \    long collision_distance_sum_sum_sum_sum_sum_sum_k;\n    long collision_distance_sum_sum_sum_sum_sum_sum_sum;\n\
    \    long collision_distance_sum_sum_sum_sum_sum_sum_sum_i;\n    long collision_distance_sum_sum_sum_sum_sum_sum_sum_j;\n\
    \    long collision_distance_sum_sum_sum_sum_sum_sum_sum_k;\n    long collision_distance_sum_sum_sum_sum_sum_sum_sum_sum;\n\
    \    long collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_i;\n    long collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_j;\n\
    \    long collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_k;\n    long collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum;\n\
    \    long collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_sum_i;\n    long\
    \ collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_sum_j;\n    long collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_sum_k;\n\
    \    long collision_distance_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum;\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvkg3q6v5.d(63): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkg3q6v5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collisions = 0;\n    long car_distance;\n    long car_distance_left;\n\
    \    long car_distance_right;\n    long car_distance_left_right;\n    long car_distance_left_left_right;\n\
    \    long car_distance_left_left_left_right;\n    long car_distance_left_left_left_left_right;\n\
    \    long car_distance_left_left_left_left_left_right;\n    long car_distance_left_left_left_left_left_left_right;\n\
    \    long car_distance_left_left_left_left_left_left_left_right;\n    long car_distance_left_left_left_left_left_left_left_left_right_right;\n\
    \    long car_distance_left_left_left_left_left_left_left_right_right_right;\n\
    \    long car_distance_left_left_left_left_left_left_right_right_right_right;\n\
    \    long car_distance_left_left_left_left_left_right_right_right_right_right;\n\
    \    long car_distance_left_left_left_left_right_right_right_right_right_right;\n\
    \    long car_distance_left_left_left_right_right_right_right_right_right_right;\n\
    \    long car_distance_left_left_left_right_right_right_right_right_right_right_right;\n\
    \    long car_distance_left_left_left_right_right_right_right_right_right_right_right_right;\n\
    \    long car_distance_left_left_left_right_right_right_right_right_right_right_right_right_right;\n\
    \    long car_distance_left_left_left_right_right_right_right_right_right_right_right_right_right;\n\
    \    long car_distance_left_left_left_right_right_right_right_right_right_right_right_right_right_right;\n\
    \    long car_distance_left_left_left_right_right_right_right_right_right_right_right_right_right_right_right_right;\n\
    \    long car_distance_left_left_left_right_right_right_right_right_right_right_right_right_right_right_right_right_right;\n\
    \    long car_distance_left_left_left_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right;\n\
    \    long car_distance_left_left_left_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right;\n\
    \    long car_distance_left_left_left_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right;\n\
    \    long car_distance_left_left_left_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8pi2r7gm.d(46): Error: semicolon expected, not `unittest`\n/tmp/tmp8pi2r7gm.d(46):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp8pi2r7gm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_left = 0;\n    long car_collisions_right_left = 0;\n   \
    \ long car_collisions_right_right = 0;\n    long car_collisions_left_right_left\
    \ = 0;\n    long car_collisions_left_left_right = 0;\n    long car_collisions_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_left_right_right = 0;\n    long car_collisions_right_left_left_right\
    \ = 0;\n    long car_collisions_right_right_left_right = 0;\n    long car_collisions_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_left_right_right_right = 0;\n    long car_collisions_right_left_left_right_right\
    \ = 0;\n    long car_collisions_right_right_left_right_right = 0;\n    long car_collisions_left_right_left_right_right_right\
    \ = 0;\n    long car_collisions_left_left_right_right_right_right = 0;\n    long\
    \ car_collisions_right_left_left_right_right_right = 0;\n    long car_collisions_right_right_left_right_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_right_right_right = 0;\n\
    \    long car_collisions_left_left_right_right_right_right_right = 0;\n    long\
    \ car_collisions_right_left_left_right_right_right_right_right = 0;\n    long\
    \ car_collisions_right_right_left_right_right_right_right_right = 0;\n    long\
    \ car_collisions_left_right_left_right_right_right_right_right_right = 0;\n  \
    \  long car_collisions_right_left_left_right_right_right_right_right_right = 0;\n\
    \    long car_collisions_right_right_left_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_left_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_right_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_left_left_right_right_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_right_left_right_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_right_right_right_right_right_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwyf_gxe.d(55): Error: semicolon expected, not `unittest`\n/tmp/tmpqwyf_gxe.d(55):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpqwyf_gxe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collisions = 0;\n    long collision_distance;\n    long collision_distance_sum;\n\
    \    long collision_distance_sum2;\n    long collision_distance_sum3;\n    long\
    \ collision_distance_sum4;\n    long collision_distance_sum5;\n    long collision_distance_sum6;\n\
    \    long collision_distance_sum7;\n    long collision_distance_sum8;\n    long\
    \ collision_distance_sum9;\n    long collision_distance_sum10;\n    long collision_distance_sum11;\n\
    \    long collision_distance_sum12;\n    long collision_distance_sum13;\n    long\
    \ collision_distance_sum14;\n    long collision_distance_sum15;\n    long collision_distance_sum16;\n\
    \    long collision_distance_sum17;\n    long collision_distance_sum18;\n    long\
    \ collision_distance_sum19;\n    long collision_distance_sum20;\n    long collision_distance_sum21;\n\
    \    long collision_distance_sum22;\n    long collision_distance_sum23;\n    long\
    \ collision_distance_sum24;\n    long collision_distance_sum25;\n    long collision_distance_sum26;\n\
    \    long collision_distance_sum27;\n    long collision_distance_sum28;\n    long\
    \ collision_distance_sum29;\n    long collision_distance_sum30;\n    long collision_distance_sum31;\n\
    \    long collision_distance_sum32;\n    long collision_distance_sum33;\n    long\
    \ collision_distance_sum34;\n    long collision_distance_sum35;\n    long collision_distance_sum36;\n\
    \    long collision_distance_sum37;\n    long collision_distance_sum38;\n    long\
    \ collision_distance_sum39;\n    long collision_distance_sum40;\n    long collision_distance_sum41;\n\
    \    long collision_distance_sum42;\n    long collision_distance_sum43;\n    long\
    \ collision_distance_sum44;\n    long collision_distance_sum45;\n    long collision_distance_sum46;\n\
    \    long collision_distance_sum47;\n    long collision_distance_sum48;\n    long\
    \ collision_distance_sum49;\n    long collision_distance_sum50;\n    long collision_distance_sum51;\n\
    \    long collision_distance_sum52;\n    long collision_distance_sum53;\n    long\
    \ collision_distance_sum54;\n    long collision_distance_sum55;\n    long collision_distance_sum56;\n\
    \    long collision_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgjw4joir.d(77): Error: semicolon expected, not `unittest`\n/tmp/tmpgjw4joir.d(77):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpgjw4joir.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp68b3e_9g.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmp68b3e_9g.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp68b3e_9g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    for(i = 0; i < n; i++) {\n        long j;\n        for(j\
    \ = i + 1; j < n; j++) {\n            if(car_race_collision_helper(i, j)) {\n\
    \                collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwbqfh2w0.d(22): Error: undefined identifier `car_race_collision_helper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwbqfh2w0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    for(i = 0; i < n; i++) {\n        long j = i;\n     \
    \   while(j > 0 && cars_collide(cars[i], cars[j-1])) {\n            collisions++;\n\
    \            j--;\n        }\n    }\n    return collisions;\n}\nunittest\n{\n\
    \    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnuld9jzb.d(21): Error: undefined identifier `cars_collide`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnuld9jzb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_distance;\n\
    \    long collision_distance_left;\n    long collision_distance_right;\n    long\
    \ collision_distance_left_right;\n    long collision_distance_left_left;\n   \
    \ long collision_distance_right_left;\n    long collision_distance_right_right;\n\
    \    long collision_distance_left_left_right;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_right_right;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_right;\n\
    \    long collision_distance_left_left_left_right;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_right_right;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_right;\n\
    \    long collision_distance_left_left_left_right;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_right_right;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_right;\n\
    \    long collision_distance_left_left_left_right;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_right_right;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_right;\n\
    \    long collision_distance_left_left_left_right;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_right_right;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_right;\n\
    \    long collision_distance_left_left_left_right;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_right_right;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_right;\n\
    \    long \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmhfekcgv.d(77): Error: no identifier for declarator `long`\n/tmp/tmpmhfekcgv.d(77):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpmhfekcgv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_length;\n\
    \    long collision_length_2;\n    long collision_length_3;\n    long collision_length_4;\n\
    \    long collision_length_5;\n    long collision_length_6;\n    long collision_length_7;\n\
    \    long collision_length_8;\n    long collision_length_9;\n    long collision_length_10;\n\
    \    long collision_length_11;\n    long collision_length_12;\n    long collision_length_13;\n\
    \    long collision_length_14;\n    long collision_length_15;\n    long collision_length_16;\n\
    \    long collision_length_17;\n    long collision_length_18;\n    long collision_length_19;\n\
    \    long collision_length_20;\n    long collision_length_21;\n    long collision_length_22;\n\
    \    long collision_length_23;\n    long collision_length_24;\n    long collision_length_25;\n\
    \    long collision_length_26;\n    long collision_length_27;\n    long collision_length_28;\n\
    \    long collision_length_29;\n    long collision_length_30;\n    long collision_length_31;\n\
    \    long collision_length_32;\n    long collision_length_33;\n    long collision_length_34;\n\
    \    long collision_length_35;\n    long collision_length_36;\n    long collision_length_37;\n\
    \    long collision_length_38;\n    long collision_length_39;\n    long collision_length_40;\n\
    \    long collision_length_41;\n    long collision_length_42;\n    long collision_length_43;\n\
    \    long collision_length_44;\n    long collision_length_45;\n    long collision_length_46;\n\
    \    long collision_length_47;\n    long collision_length_48;\n    long collision_length_49;\n\
    \    long collision_length_50;\n    long collision_length_51;\n    long collision_length_52;\n\
    \    long collision_length_53;\n    long collision_length_54;\n    long collision_length_55;\n\
    \    long collision_length_56;\n    long collision_length_57;\n    long collision_length_58;\n\
    \    long collision_length_59;\n    long collision_length_60;\n    long collision_length_61;\n\
    \    long collision_length_62;\n    long collision_length_63;\n    long collision_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz30puls0.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmpz30puls0.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpz30puls0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp68b3e_9g.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmp68b3e_9g.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp68b3e_9g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k,\
    \ l, \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1qgqi6se.d(18): Error: no identifier for declarator `long`\n/tmp/tmp1qgqi6se.d(18):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp1qgqi6se.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_distance;\n\
    \    long collision_speed;\n    long collision_direction;\n    long collision_speed2;\n\
    \    long collision_direction2;\n    long collision_speed3;\n    long collision_direction3;\n\
    \    long collision_speed4;\n    long collision_direction4;\n    long collision_speed5;\n\
    \    long collision_direction5;\n    long collision_speed6;\n    long collision_direction6;\n\
    \    long collision_speed7;\n    long collision_direction7;\n    long collision_speed8;\n\
    \    long collision_direction8;\n    long collision_speed9;\n    long collision_direction9;\n\
    \    long collision_speed10;\n    long collision_direction10;\n    long collision_speed11;\n\
    \    long collision_direction11;\n    long collision_speed12;\n    long collision_direction12;\n\
    \    long collision_speed13;\n    long collision_direction13;\n    long collision_speed14;\n\
    \    long collision_direction14;\n    long collision_speed15;\n    long collision_direction15;\n\
    \    long collision_speed16;\n    long collision_direction16;\n    long collision_speed17;\n\
    \    long collision_direction17;\n    long collision_speed18;\n    long collision_direction18;\n\
    \    long collision_speed19;\n    long collision_direction19;\n    long collision_speed20;\n\
    \    long collision_direction20;\n    long collision_speed21;\n    long collision_direction21;\n\
    \    long collision_speed22;\n    long collision_direction22;\n    long collision_speed23;\n\
    \    long collision_direction23;\n    long collision_speed24;\n    long collision_direction24;\n\
    \    long collision_speed25;\n    long collision_direction25;\n    long collision_speed26;\n\
    \    long collision_direction26;\n    long collision_speed27;\n    long collision_direction27;\n\
    \    long collision_speed28;\n    long collision_direction28;\n    long collision_speed29;\n\
    \    long collision_direction29;\n    long collision_speed30;\n    long collision_direction30;\n\
    \    long collision_speed31;\n    long collision_direction31;\n    long collision_speed32;\n\
    \    long collision_direction32;\n    long collision_speed33;\n    \nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp691uc41a.d(88): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp691uc41a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long collisions = 0;\n    long collision_sum = 0;\n\
    \    long collision_sum2 = 0;\n    long collision_sum3 = 0;\n    long collision_sum4\
    \ = 0;\n    long collision_sum5 = 0;\n    long collision_sum6 = 0;\n    long collision_sum7\
    \ = 0;\n    long collision_sum8 = 0;\n    long collision_sum9 = 0;\n    long collision_sum10\
    \ = 0;\n    long collision_sum11 = 0;\n    long collision_sum12 = 0;\n    long\
    \ collision_sum13 = 0;\n    long collision_sum14 = 0;\n    long collision_sum15\
    \ = 0;\n    long collision_sum16 = 0;\n    long collision_sum17 = 0;\n    long\
    \ collision_sum18 = 0;\n    long collision_sum19 = 0;\n    long collision_sum20\
    \ = 0;\n    long collision_sum21 = 0;\n    long collision_sum22 = 0;\n    long\
    \ collision_sum23 = 0;\n    long collision_sum24 = 0;\n    long collision_sum25\
    \ = 0;\n    long collision_sum26 = 0;\n    long collision_sum27 = 0;\n    long\
    \ collision_sum28 = 0;\n    long collision_sum29 = 0;\n    long collision_sum30\
    \ = 0;\n    long collision_sum31 = 0;\n    long collision_sum32 = 0;\n    long\
    \ collision_sum33 = 0;\n    long collision_sum34 = 0;\n    long collision_sum35\
    \ = 0;\n    long collision_sum36 = 0;\n    long collision_sum37 = 0;\n    long\
    \ collision_sum38 = 0;\n    long collision_sum39 = 0;\n    long collision_sum40\
    \ = 0;\n    long collision_sum41 = 0;\n    long collision_sum42 = 0;\n    long\
    \ collision_sum43 = 0;\n    long collision_sum44 = 0;\n    long collision_sum45\
    \ = 0;\n    long collision_sum46 = 0;\n    long collision_sum47 = 0;\n    long\
    \ collision_sum48 = 0;\n    long collision_sum49 = 0;\n    long collision_sum50\
    \ = 0;\n    long collision_sum51 = 0;\n    long collision_sum52 = 0;\n    long\
    \ collision_sum53 = 0;\n    long collision_sum54 = 0;\n    long collision_sum55\
    \ = 0;\n    long collision_sum56 = 0;\n    long collision_sum57 = 0;\n    long\
    \ collision_sum58 = 0;\n    long collision_sum59 = 0;\n    long collision_sum60\
    \ = 0;\n    long collision_sum61 = 0;\n    long collision_sum62 = 0;\n    \nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6pp7_4fj.d(84): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6pp7_4fj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_right_left = 0;\n    long car_collisions_left_left_right = 0;\n\
    \    long car_collisions_right_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left = 0;\n    long car_collisions_left_left_right_left_right\
    \ = 0;\n    long car_collisions_right_right_left_left_right = 0;\n    long car_collisions_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_left = 0;\n    long car_collisions_left_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_right_left_left_right_left = 0;\n    long\
    \ car_collisions_left_right_left_right_left_right = 0;\n    long car_collisions_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_left_right_left_right_left_right = 0;\n \
    \   long car_collisions_right_right_left_left_right_left_right = 0;\n    long\
    \ car_collisions_left_right_left_right_left_right_left = 0;\n    long car_collisions_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_right_right_left_left_right_left_right = 0;\n    long\
    \ car_collisions_left_right_left_right_left_right_left_right = 0;\n    long car_collisions_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right =\
    \ 0;\n    long car_collisions_right_right_left_right_left_right_left_right = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right = 0;\n  \
    \  long car_collisions_right_left_right_left_right_left_right_left = 0;\n    long\
    \ car_collisions_left_right_left_right_left_right_left_right = 0;\n    long car_collisions_right_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right =\
    \ 0;\n    long car_collisions_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right = 0;\n  \
    \  long car_collisions_right_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right = 0;\n    long\
    \ car_collisions_right_left_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyo2u_g79.d(55): Error: semicolon expected, not `unittest`\n/tmp/tmpyo2u_g79.d(55):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpyo2u_g79.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collision\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjn93zm12.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpjn93zm12.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjn93zm12.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_right_left = 0;\n    long car_collisions_left_left_right = 0;\n\
    \    long car_collisions_right_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left = 0;\n    long car_collisions_left_right_right_left_right\
    \ = 0;\n    long car_collisions_right_left_left_right_left_right = 0;\n    long\
    \ car_collisions_left_right_right_left_right_left = 0;\n    long car_collisions_right_left_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_right_left_right_left_right = 0;\n\
    \    long car_collisions_right_left_left_right_left_right_left_right = 0;\n  \
    \  long car_collisions_left_right_right_left_right_left_right_left = 0;\n    long\
    \ car_collisions_right_left_left_right_left_right_left_right_left = 0;\n    long\
    \ car_collisions_left_right_right_left_right_left_right_left_right = 0;\n    long\
    \ car_collisions_right_left_left_right_left_right_left_right_left_right = 0;\n\
    \    long car_collisions_left_right_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_right_left_right_left_right_left_right_left_right_left_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6kzmfv04.d(50): Error: semicolon expected, not `unittest`\n/tmp/tmp6kzmfv04.d(50):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6kzmfv04.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, collisions\
    \ = 0;\n    double speed;\n    double xi, yi;\n    double xj, yj;\n    double\
    \ xk, yk;\n    double xl, yl;\n    double xm, ym;\n    double xn, yn;\n    double\
    \ xo, yo;\n    double xp, yp;\n    double xq, yq;\n    double xr, yr;\n    double\
    \ xs, ys;\n    double xt, yt;\n    double xu, yu;\n    double xv, yv;\n    double\
    \ xw, yw;\n    double xx, yy;\n    double xy, yx;\n    double xz, yz;\n    double\
    \ xa, ya;\n    double xb, yb;\n    double xc, yc;\n    double xd, yd;\n    double\
    \ xe, ye;\n    double xf, yf;\n    double xg, yg;\n    double xh, yh;\n    double\
    \ xi, yi;\n    double xj, yj;\n    double xk, yk;\n    double xl, yl;\n    double\
    \ xm, ym;\n    double xn, yn;\n    double xo, yo;\n    double xp, yp;\n    double\
    \ xq, yq;\n    double xr, yr;\n    double xs, ys;\n    double xt, yt;\n    double\
    \ xu, yu;\n    double xv, yv;\n    double xw, yw;\n    double xx, yy;\n    double\
    \ xy, yx;\n    double xz, yz;\n    double xa, ya;\n    double xb, yb;\n    double\
    \ xc, yc;\n    double xd, yd;\n    double xe, ye;\n    double xf, yf;\n    double\
    \ xg, yg;\n    double xh, yh;\n    double xi, yi;\n    double xj, yj;\n    double\
    \ xk, yk;\n    double xl, yl;\n    double xm, ym;\n    double xn, yn;\n    double\
    \ xo, yo;\n    double xp, yp;\n    double xq, yq;\n    double xr, yr;\n    double\
    \ xs, ys;\n    double xt, yt;\n    double xu, yu;\n    double xv, yv;\n    double\
    \ xw, yw;\n    double xx, yy;\n    double xy, yx;\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph95twqhh.d(88): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph95twqhh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp68b3e_9g.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmp68b3e_9g.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp68b3e_9g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_ij;\n    long collision_distance_jk;\n    long collision_distance_kl;\n\
    \    long collision_distance_il;\n    long collision_distance_jl;\n    long collision_distance_ilj;\n\
    \    long collision_distance_jli;\n    long collision_distance_ijk;\n    long\
    \ collision_distance_ijkl;\n    long collision_distance_ijkl;\n    long collision_distance_ijkli;\n\
    \    long collision_distance_ijklj;\n    long collision_distance_ijklij;\n   \
    \ long collision_distance_ijklji;\n    long collision_distance_ijklijk;\n    long\
    \ collision_distance_ijkljk;\n    long collision_distance_ijklijkl;\n    long\
    \ collision_distance_ijkljkl;\n    long collision_distance_ijklijklm;\n    long\
    \ collision_distance_ijkljklmn;\n    long collision_distance_ijklijkln;\n    long\
    \ collision_distance_ijkljklnm;\n    long collision_distance_ijklijklnm;\n   \
    \ long collision_distance_ijkljklnmno;\n    long collision_distance_ijklijklnmnop;\n\
    \    long collision_distance_ijkljklnmnopq;\n    long collision_distance_ijklijklnmnopqrs;\n\
    \    long collision_distance_ijkljklnmnopqrsx;\n    long collision_distance_ijklijklnmnopqrsy;\n\
    \    long collision_distance_ijkljklnmnopqrsz;\n    long collision_distance_ijklijklnmnopqrszx;\n\
    \    long collision_distance_ijklijklnmnopqrszy;\n    long collision_distance_ijklijklnmnopqrszz;\n\
    \    long collision_distance_ijklijklnmnopqrszxz;\n    long collision_distance_ijklijklnmnopqrszyz;\n\
    \    long collision_distance_ijklijklnmnopqrszzz;\n    long collision_distance_ijklijklnmnopqrszxzy;\n\
    \    long collision_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3jekmxyp.d(64): Error: semicolon expected, not `unittest`\n/tmp/tmp3jekmxyp.d(64):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3jekmxyp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy3w2azh_.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpy3w2azh_.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy3w2azh_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp68b3e_9g.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmp68b3e_9g.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp68b3e_9g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp68b3e_9g.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmp68b3e_9g.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp68b3e_9g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_num = n;\n    long car_speed = car_num * car_speed;\n   \
    \ long car_speed_left = car_speed * car_speed_left;\n    long car_speed_right\
    \ = car_speed * car_speed_right;\n    long car_speed_left_to_right = car_speed_left\
    \ * car_speed_right;\n    long car_speed_right_to_left = car_speed_right * car_speed_left;\n\
    \    long car_speed_left_to_right_and_right_to_left = car_speed_left * car_speed_right\
    \ * car_speed_left;\n    long car_speed_right_to_left_and_left_to_right = car_speed_right\
    \ * car_speed_left * car_speed_right;\n    long car_speed_left_to_right_and_left_to_left\
    \ = car_speed_left * car_speed_right * car_speed_left;\n    long car_speed_left_to_right_and_left_to_left_and_right_to_left\
    \ = car_speed_left * car_speed_right * car_speed_left * car_speed_right;\n   \
    \ long car_speed_right_to_left_and_left_to_right_and_right_to_left = car_speed_right\
    \ * car_speed_left * car_speed_right * car_speed_left;\n    long car_speed_left_to_right_and_left_to_left_and_left_to_right_and_right_to_left\
    \ = car_speed_left * car_speed_right * car_speed_left * car_speed_right * car_speed_left;\n\
    \    long car_speed_left_to_right_and_left_to_left_and_left_to_right_and_left_to_right_and_right_to_left\
    \ = car_speed_left * car_speed_right * car_speed_left * car_speed_right * car_speed_left\
    \ * car_speed_right * car_speed_left;\n    long car_speed_left_to_right_and_left_to_left_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_and_left_to_right_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe3c39i6a.d(32): Error: semicolon expected, not `unittest`\n/tmp/tmpe3c39i6a.d(32):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpe3c39i6a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long collisions = 0;\n    long car_collisions = 0;\n    long car_collisions_left\
    \ = 0;\n    long car_collisions_right = 0;\n    long car_collisions_left_right\
    \ = 0;\n    long car_collisions_right_left = 0;\n    long car_collisions_left_left_right\
    \ = 0;\n    long car_collisions_right_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left = 0;\n    long car_collisions_left_left_right_left_right\
    \ = 0;\n    long car_collisions_right_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left = 0;\n    long\
    \ car_collisions_left_left_right_left_right_left_right = 0;\n    long car_collisions_right_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right =\
    \ 0;\n    long car_collisions_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_left_right_left_right_left_right_left_right = 0;\n\
    \    long car_collisions_right_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_right_left_right_left_right_left_right_left_right = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_right_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_right_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_right_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp2lpqrj4.d(53): Error: semicolon expected, not `unittest`\n/tmp/tmpp2lpqrj4.d(53):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpp2lpqrj4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp68b3e_9g.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmp68b3e_9g.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp68b3e_9g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_length;\n\
    \    long collision_length_temp;\n    long collision_length_temp2;\n    long collision_length_temp3;\n\
    \    long collision_length_temp4;\n    long collision_length_temp5;\n    long\
    \ collision_length_temp6;\n    long collision_length_temp7;\n    long collision_length_temp8;\n\
    \    long collision_length_temp9;\n    long collision_length_temp10;\n    long\
    \ collision_length_temp11;\n    long collision_length_temp12;\n    long collision_length_temp13;\n\
    \    long collision_length_temp14;\n    long collision_length_temp15;\n    long\
    \ collision_length_temp16;\n    long collision_length_temp17;\n    long collision_length_temp18;\n\
    \    long collision_length_temp19;\n    long collision_length_temp20;\n    long\
    \ collision_length_temp21;\n    long collision_length_temp22;\n    long collision_length_temp23;\n\
    \    long collision_length_temp24;\n    long collision_length_temp25;\n    long\
    \ collision_length_temp26;\n    long collision_length_temp27;\n    long collision_length_temp28;\n\
    \    long collision_length_temp29;\n    long collision_length_temp30;\n    long\
    \ collision_length_temp31;\n    long collision_length_temp32;\n    long collision_length_temp33;\n\
    \    long collision_length_temp34;\n    long collision_length_temp35;\n    long\
    \ collision_length_temp36;\n    long collision_length_temp37;\n    long collision_length_temp38;\n\
    \    long collision_length_temp39;\n    long collision_length_temp40;\n    long\
    \ collision_length_temp41;\n    long collision_length_temp42;\n    long collision_length_temp43;\n\
    \    long collision_length_temp44;\n    long collision_length_temp45;\n    long\
    \ collision_length_temp46;\n    long collision_length_temp47;\n    long collision_length_temp48;\n\
    \    long collision_length_temp49;\n    long collision_length_temp50;\n    long\
    \ collision_length_temp51;\n    long collision_length_temp52;\n    long collision_length_temp53;\n\
    \    long collision_length_temp54;\n    long collision_length_temp55;\n    long\
    \ collision_length_\nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4onac0hp.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmp4onac0hp.d(79):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4onac0hp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_left;\n\
    \    long collision_right;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph6ty14hr.d(92): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph6ty14hr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_total;\n    long collision_distance_total_i;\n  \
    \  long collision_distance_total_j;\n    long collision_distance_total_k;\n  \
    \  long collision_distance_total_total;\n    long collision_distance_total_total_i;\n\
    \    long collision_distance_total_total_j;\n    long collision_distance_total_total_k;\n\
    \    long collision_distance_total_total_total;\n    long collision_distance_total_total_total_i;\n\
    \    long collision_distance_total_total_total_j;\n    long collision_distance_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total;\n    long collision_distance_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_j;\n    long collision_distance_total_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total_total;\n    long collision_distance_total_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_total_j;\n    long collision_distance_total_total_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total_total_total;\n    long collision_distance_total_total_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_total_total_j;\n    long\
    \ collision_distance_total_total_total_total_total_total_k;\n    long collision_distance_total_total_total_total_total_total_total;\n\
    \    long collision_distance_total_total_total_total_total_total_total_i;\n  \
    \  long collision_distance_total_total_total_total_total_total_total_j;\n    long\
    \ collision_distance_total_total_total_total_total_total_total_k;\n    long collision_distance_total_total_total_total_total_total_total_total;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_j;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_total;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_total_j;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_total_total;\n\
    \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_j2fehhl.d(64): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_j2fehhl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    for(i = 0; i < n; i++) {\n        long j;\n        for(j\
    \ = i + 1; j < n; j++) {\n            long collision = car_race_collision_helper(i,\
    \ j, n, &collisions);\n            if(collision != 0) {\n                collisions++;\n\
    \            }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvv88h5zb.d(22): Error: undefined identifier `car_race_collision_helper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvv88h5zb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_i_plus_j;\n    long collision_distance_i_plus_k;\n\
    \    long collision_distance_j_plus_k;\n    long collision_distance_i_plus_j_plus_k;\n\
    \    long collision_distance_i_plus_k_plus_j;\n    long collision_distance_i_plus_k_plus_k;\n\
    \    long collision_distance_k_plus_j_plus_i;\n    long collision_distance_k_plus_j_plus_k;\n\
    \    long collision_distance_k_plus_k_plus_j;\n    long collision_distance_k_plus_k_plus_k;\n\
    \    long collision_distance_k_plus_i_plus_j;\n    long collision_distance_k_plus_i_plus_k;\n\
    \    long collision_distance_k_plus_j_plus_i;\n    long collision_distance_k_plus_j_plus_k;\n\
    \    long collision_distance_k_plus_k_plus_j;\n    long collision_distance_k_plus_k_plus_k;\n\
    \    long collision_distance_k_plus_i_plus_j_plus_k;\n    long collision_distance_k_plus_i_plus_k_plus_j;\n\
    \    long collision_distance_k_plus_i_plus_k_plus_k;\n    long collision_distance_k_plus_j_plus_i_plus_k;\n\
    \    long collision_distance_k_plus_j_plus_k_plus_i;\n    long collision_distance_k_plus_j_plus_k_plus_k;\n\
    \    long collision_distance_k_plus_k_plus_i_plus_j;\n    long collision_distance_k_plus_k_plus_i_plus_k;\n\
    \    long collision_distance_k_plus_k_plus_j_plus_i;\n    long collision_distance_k_plus_k_plus_j_plus_k;\n\
    \    long collision_distance_k_plus_k_plus_k_plus_i;\n    long collision_distance_k_plus_k_plus_k_plus_j;\n\
    \    long collision_distance_k_plus_k_plus_k_plus_k;\n    long collision_distance_k_plus_i_plus_j_plus_k_plus_k;\n\
    \    long collision_distance_k_plus_i_plus_k_plus_j_plus_k;\n    long collision_distance_k_plus_i_plus_k_plus_j_plus_k;\n\
    \    long collision_distance_k_plus_j_plus_i_plus_k_plus_k;\n    long collision_distance_k_plus_j_plus_k_plus_i_plus_k;\n\
    \    long collision_distance_k_plus_k_plus_i_plus_j_plus_k;\n    long collision_distance_k_plus_k_plus_i_plus_j_plus_k;\n\
    \    long collision_distance_k_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb6u08g7_.d(63): Error: semicolon expected, not `unittest`\n/tmp/tmpb6u08g7_.d(63):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpb6u08g7_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long car_collisions = 0;\n    long car_collisions_left\
    \ = 0;\n    long car_collisions_right = 0;\n    long car_collisions_left_right\
    \ = 0;\n    long car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuso3lg3i.d(45): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuso3lg3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_left;\n\
    \    long collision_right;\n    long collision_left_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_right_right;\n    long collision_left_left_right;\n\
    \    long collision_left_left_left;\n    long collision_right_left_left;\n   \
    \ long collision_right_left_right;\n    long collision_left_right_left;\n    long\
    \ collision_left_right_right;\n    long collision_right_right_left;\n    long\
    \ collision_right_right_right;\n    long collision_left_left_left_right;\n   \
    \ long collision_left_left_left_left;\n    long collision_right_left_left_left;\n\
    \    long collision_right_left_left_right;\n    long collision_left_right_left_left;\n\
    \    long collision_left_right_left_right;\n    long collision_right_right_left_left;\n\
    \    long collision_right_right_left_right;\n    long collision_left_right_right_left;\n\
    \    long collision_left_right_right_right;\n    long collision_right_right_right_left;\n\
    \    long collision_right_right_right_right;\n    long collision_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left;\n    long collision_right_left_left_left_left;\n\
    \    long collision_right_left_left_left_right;\n    long collision_left_right_left_left_left;\n\
    \    long collision_left_right_left_left_right;\n    long collision_right_right_left_left_left;\n\
    \    long collision_right_right_left_left_right;\n    long collision_left_right_right_left_left;\n\
    \    long collision_left_right_right_left_right;\n    long collision_right_right_right_left_left;\n\
    \    long collision_right_right_right_left_right;\n    long collision_left_right_right_right_left;\n\
    \    long collision_left_right_right_right_right;\n    long collision_right_right_right_right_left;\n\
    \    long collision_right_right_right_right_right;\n    long collision_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left;\n    long collision_right_left_left_left_left;\n\
    \    long collision_right_left_left_left_right;\n    long collision_left_right_left_left_left;\n\
    \    long collision_left_right_left_left_right;\n    long collision_right_right_left_left_left;\n\
    \    long collision_right_right_left_left_right;\n    long collision_left_right_right_left_left;\n\
    \    long collision_left_right_right_left_right;\n    long collision_right_right_right_left_left;\n\
    \    long collision_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhnkafpk.d(76): Error: semicolon expected, not `unittest`\n/tmp/tmpnhnkafpk.d(76):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnhnkafpk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k;\n\
    \    long collisions = 0;\n    long car_collisions = 0;\n    long car_collisions_left\
    \ = 0;\n    long car_collisions_right = 0;\n    long car_collisions_left_right\
    \ = 0;\n    long car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9aazqkjv.d(45): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9aazqkjv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long collisions = 0;\n    long car_collisions = 0;\n    long car_collisions_left\
    \ = 0;\n    long car_collisions_right = 0;\n    long car_collisions_left_right\
    \ = 0;\n    long car_collisions_right_left = 0;\n    long car_collisions_left_left_right\
    \ = 0;\n    long car_collisions_right_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left = 0;\n    long car_collisions_left_right_left_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left_left = 0;\n    long car_collisions_left_right_left_left_right_right\
    \ = 0;\n    long car_collisions_right_left_right_left_left_left = 0;\n    long\
    \ car_collisions_left_right_left_left_right_right_left = 0;\n    long car_collisions_right_left_right_left_left_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_left_right_right_left_right =\
    \ 0;\n    long car_collisions_right_left_right_left_left_right_left_left = 0;\n\
    \    long car_collisions_left_right_left_left_right_left_right_left = 0;\n   \
    \ long car_collisions_right_left_right_left_left_right_left_right = 0;\n    long\
    \ car_collisions_left_right_left_left_right_left_right_left = 0;\n    long car_collisions_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right =\
    \ 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj_o29a3u.d(54): Error: semicolon expected, not `unittest`\n/tmp/tmpj_o29a3u.d(54):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpj_o29a3u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    for(i = 0; i < n; i++)\n    {\n        long j;\n    \
    \    for(j = i + 1; j < n; j++)\n        {\n            long k;\n            for(k\
    \ = 0; k < n; k++)\n            {\n                if(i != k && j != k && i !=\
    \ j && j != i && i != k && j != k && i != j && j != i && i != k && j != k && i\
    \ != j && j != i && i != k && j != k)\n                {\n                   \
    \ if(std.abs(car_distance(i, j, k)) < std.abs(car_distance(i, j, i) + car_distance(j,\
    \ k, k)))\n                    {\n                        collisions++;\n    \
    \                }\n                }\n            }\n        }\n    }\n    return\
    \ collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n \
    \   assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyzphyr8k.d(29): Error: undefined identifier `abs` in package
    `std`\n/tmp/tmpyzphyr8k.d(29): Error: undefined identifier `abs` in package `std`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyzphyr8k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l,m,n;\n\
    \    long collisions=0;\n    long car_collisions=0;\n    long car_collisions_left=0;\n\
    \    long car_collisions_right=0;\n    long car_collisions_left_right=0;\n   \
    \ long car_collisions_left_right_left=0;\n    long car_collisions_left_right_right=0;\n\
    \    long car_collisions_left_right_left_right=0;\n    long car_collisions_left_right_left_left_right=0;\n\
    \    long car_collisions_left_right_left_left_left_right=0;\n    long car_collisions_left_right_left_left_left_left_right=0;\n\
    \    long car_collisions_left_right_left_left_left_left_right_left=0;\n    long\
    \ car_collisions_left_right_left_left_left_right_right_left=0;\n    long car_collisions_left_right_left_left_right_right_left_left=0;\n\
    \    long car_collisions_left_right_left_right_right_left_left_left=0;\n    long\
    \ car_collisions_left_right_left_right_right_left_left_left=0;\n    long car_collisions_left_right_left_right_right_left_left_left_left=0;\n\
    \    long car_collisions_left_right_left_right_right_left_left_left_left=0;\n\
    \    long car_collisions_left_right_left_right_right_left_left_left_left_left=0;\n\
    \    long car_collisions_left_right_left_right_right_left_left_left_left_left=0;\n\
    \    long car_collisions_left_right_left_right_right_left_left_left_left_left_left=0;\n\
    \    long car_collisions_left_right_left_right_right_left_left_left_left_left_left=0;\n\
    \    long car_collisions_left_right_left_right_right_left_left_left_left_left_left_left=0;\n\
    \    long car_collisions_left_right_left_right_right_left_left_left_left_left_left_left=0;\n\
    \    long car_collisions_left_right_left_right_right_left_left_left_left_left_left_left=0;\n\
    \    long car_collisions_left_right_left_right_right_left_left_left_left_left_left_left=0;\n\
    \    long car_collisions_left_right_left_right_right_left_left_left_left_left_left_left=0;\n\
    \    long car_collisions_left_right_left_right_right_left_left_left_left_left_left_left_left=0;\n\
    \    long car_collisions_left_right_left_right_right_left_left_left_left_left_left_left_left=0;\n\
    \    long car_collisions_left_right_left_right_right_left_left_left_left_left_left_left_left_left=0;\n\
    \    long car_collisions_left_right_left_right_right_left_left_left_left_left_left_left_left=0;\n\
    \    long car_collisions_left_right_left_right_\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxt1aam54.d(50): Error: semicolon expected, not `unittest`\n/tmp/tmpxt1aam54.d(50):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpxt1aam54.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_right_left = 0;\n    long car_collisions_left_left_right = 0;\n\
    \    long car_collisions_right_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left = 0;\n    long car_collisions_left_right_left_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left_left = 0;\n    long car_collisions_left_right_left_left_right_right\
    \ = 0;\n    long car_collisions_right_left_right_left_left_left = 0;\n    long\
    \ car_collisions_left_right_left_left_right_right_left = 0;\n    long car_collisions_right_left_right_left_left_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_left_right_right_left_left = 0;\n\
    \    long car_collisions_right_left_right_left_left_right_left_right = 0;\n  \
    \  long car_collisions_left_right_left_left_right_right_left_left_right = 0;\n\
    \    long car_collisions_right_left_right_left_right_left_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_left_right_right_left_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_right_left_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_right_left_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbkjl0uag.d(51): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbkjl0uag.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right = 0;\n    long car_collisions_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_right = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_right = 0;\n    long\
    \ car_collisions_left_right_left_right_left_right_left_right = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp9le5g_j.d(48): Error: semicolon expected, not `unittest`\n/tmp/tmpp9le5g_j.d(48):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpp9le5g_j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collisions = 0;\n    long collision_counter = 0;\n    long\
    \ collision_counter2 = 0;\n    long collision_counter3 = 0;\n    long collision_counter4\
    \ = 0;\n    long collision_counter5 = 0;\n    long collision_counter6 = 0;\n \
    \   long collision_counter7 = 0;\n    long collision_counter8 = 0;\n    long collision_counter9\
    \ = 0;\n    long collision_counter10 = 0;\n    long collision_counter11 = 0;\n\
    \    long collision_counter12 = 0;\n    long collision_counter13 = 0;\n    long\
    \ collision_counter14 = 0;\n    long collision_counter15 = 0;\n    long collision_counter16\
    \ = 0;\n    long collision_counter17 = 0;\n    long collision_counter18 = 0;\n\
    \    long collision_counter19 = 0;\n    long collision_counter20 = 0;\n    long\
    \ collision_counter21 = 0;\n    long collision_counter22 = 0;\n    long collision_counter23\
    \ = 0;\n    long collision_counter24 = 0;\n    long collision_counter25 = 0;\n\
    \    long collision_counter26 = 0;\n    long collision_counter27 = 0;\n    long\
    \ collision_counter28 = 0;\n    long collision_counter29 = 0;\n    long collision_counter30\
    \ = 0;\n    long collision_counter31 = 0;\n    long collision_counter32 = 0;\n\
    \    long collision_counter33 = 0;\n    long collision_counter34 = 0;\n    long\
    \ collision_counter35 = 0;\n    long collision_counter36 = 0;\n    long collision_counter37\
    \ = 0;\n    long collision_counter38 = 0;\n    long collision_counter39 = 0;\n\
    \    long collision_counter40 = 0;\n    long collision_counter41 = 0;\n    long\
    \ collision_counter42 = 0;\n    long collision_counter43 = 0;\n    long collision_counter44\
    \ = 0;\n    long collision_counter45 = 0;\n    long collision_counter46 = 0;\n\
    \    long collision_counter47 = 0;\n    long collision_counter48 = 0;\n    long\
    \ collision_counter49 = 0;\n    long collision_counter50 = 0;\n    long collision_counter51\
    \ = 0;\n    long collision_counter52 = 0;\n    long collision_counter53 = 0;\n\
    \    long collision_counter54 = 0;\n    long collision_counter55 = 0;\n    long\
    \ collision_counter56 = 0;\n    long collision_counter57 = 0;\n    long collision_counter58\
    \ = 0;\n    long collision_counter59 = 0;\n    long collision_counter60 = 0;\n\
    \    long collision_counter61 = 0;\n    long collision_counter62 = 0;\n    long\
    \ collision_counter\nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxrotks7j.d(82): Error: semicolon expected, not `unittest`\n/tmp/tmpxrotks7j.d(82):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpxrotks7j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_dist;\n\
    \    long collision_dist_left;\n    long collision_dist_right;\n    long collision_dist_left_right;\n\
    \    long collision_dist_left_left;\n    long collision_dist_right_left;\n   \
    \ long collision_dist_right_right;\n    long collision_dist_left_left_right;\n\
    \    long collision_dist_left_left_left;\n    long collision_dist_right_left_left;\n\
    \    long collision_dist_right_left_right;\n    long collision_dist_left_right_left;\n\
    \    long collision_dist_left_right_right;\n    long collision_dist_left_left_left_right;\n\
    \    long collision_dist_left_left_left_left;\n    long collision_dist_right_left_left_left;\n\
    \    long collision_dist_right_left_left_right;\n    long collision_dist_left_right_left_left;\n\
    \    long collision_dist_left_right_left_right;\n    long collision_dist_left_left_right_left;\n\
    \    long collision_dist_left_left_right_right;\n    long collision_dist_right_left_right_left;\n\
    \    long collision_dist_right_left_right_right;\n    long collision_dist_left_right_right_left;\n\
    \    long collision_dist_left_right_right_right;\n    long collision_dist_left_left_right_left_right;\n\
    \    long collision_dist_left_left_right_left_left;\n    long collision_dist_right_left_right_left_left;\n\
    \    long collision_dist_right_left_right_left_right;\n    long collision_dist_left_right_right_left_left;\n\
    \    long collision_dist_left_right_right_left_right;\n    long collision_dist_left_left_right_right_left;\n\
    \    long collision_dist_left_left_right_right_right;\n    long collision_dist_right_left_right_right_left;\n\
    \    long collision_dist_right_left_right_right_right;\n    long collision_dist_left_right_right_right_left;\n\
    \    long collision_dist_left_right_right_right_right;\n    long collision_dist_left_left_right_right_left_right;\n\
    \    long collision_dist_left_left_right_right_left_left;\n    long collision_dist_right_left_right_right_left_left;\n\
    \    long collision_dist_right_left_right_right_left_right;\n    long collision_dist_left_right_right_right_left_left;\n\
    \    long collision_dist_left_right_right_right_left_right;\n    long collision_dist_left_left_right_right_left_left_right;\n\
    \    long collision_dist_left_left_right_right_left_left_left;\n    long collision_dist_right_left_right_right_left_left_left;\n\
    \    long collision_dist_right_left_right_right_left_left_right;\n    long collision_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb25_9imu.d(70): Error: semicolon expected, not `unittest`\n/tmp/tmpb25_9imu.d(70):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpb25_9imu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long collisions = 0;\n    long car_collisions = 0;\n    long car_collisions_left\
    \ = 0;\n    long car_collisions_right = 0;\n    long car_collisions_left_right\
    \ = 0;\n    long car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_bi_0ktq.d(46): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_bi_0ktq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp68b3e_9g.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmp68b3e_9g.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp68b3e_9g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k;\n\
    \    long collisions = 0;\n    long collision_distance;\n    long collision_distance_left;\n\
    \    long collision_distance_right;\n    long collision_distance_left_right;\n\
    \    long collision_distance_left_left_right;\n    long collision_distance_left_left_left_right;\n\
    \    long collision_distance_left_left_left_left_right;\n    long collision_distance_left_left_left_left_left_right;\n\
    \    long collision_distance_left_left_left_left_left_right_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw3sda6z8.d(28): Error: semicolon expected, not `unittest`\n/tmp/tmpw3sda6z8.d(28):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpw3sda6z8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collisions = 0;\n    long collision_sum = 0;\n    long collision_sum2\
    \ = 0;\n    long collision_sum3 = 0;\n    long collision_sum4 = 0;\n    long collision_sum5\
    \ = 0;\n    long collision_sum6 = 0;\n    long collision_sum7 = 0;\n    long collision_sum8\
    \ = 0;\n    long collision_sum9 = 0;\n    long collision_sum10 = 0;\n    long\
    \ collision_sum11 = 0;\n    long collision_sum12 = 0;\n    long collision_sum13\
    \ = 0;\n    long collision_sum14 = 0;\n    long collision_sum15 = 0;\n    long\
    \ collision_sum16 = 0;\n    long collision_sum17 = 0;\n    long collision_sum18\
    \ = 0;\n    long collision_sum19 = 0;\n    long collision_sum20 = 0;\n    long\
    \ collision_sum21 = 0;\n    long collision_sum22 = 0;\n    long collision_sum23\
    \ = 0;\n    long collision_sum24 = 0;\n    long collision_sum25 = 0;\n    long\
    \ collision_sum26 = 0;\n    long collision_sum27 = 0;\n    long collision_sum28\
    \ = 0;\n    long collision_sum29 = 0;\n    long collision_sum30 = 0;\n    long\
    \ collision_sum31 = 0;\n    long collision_sum32 = 0;\n    long collision_sum33\
    \ = 0;\n    long collision_sum34 = 0;\n    long collision_sum35 = 0;\n    long\
    \ collision_sum36 = 0;\n    long collision_sum37 = 0;\n    long collision_sum38\
    \ = 0;\n    long collision_sum39 = 0;\n    long collision_sum40 = 0;\n    long\
    \ collision_sum41 = 0;\n    long collision_sum42 = 0;\n    long collision_sum43\
    \ = 0;\n    long collision_sum44 = 0;\n    long collision_sum45 = 0;\n    long\
    \ collision_sum46 = 0;\n    long collision_sum47 = 0;\n    long collision_sum48\
    \ = 0;\n    long collision_sum49 = 0;\n    long collision_sum50 = 0;\n    long\
    \ collision_sum51 = 0;\n    long collision_sum52 = 0;\n    long collision_sum53\
    \ = 0;\n    long collision_sum54 = 0;\n    long collision_sum55 = 0;\n    long\
    \ collision_sum56 = 0;\n    long collision_sum57 = 0;\n    long collision_sum58\
    \ = 0;\n    long collision_sum59 = 0;\n    long collision_sum60 = 0;\n    long\
    \ collision_sum61 = 0;\n    long collision_sum62 = 0;\n    long collision_sum\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxpz8gtr9.d(82): Error: semicolon expected, not `unittest`\n/tmp/tmpxpz8gtr9.d(82):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpxpz8gtr9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: -1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q;\n\
    \    long car_collisions;\n    \n    car_i = 1;\n    car_j = 1;\n    car_k = 1;\n\
    \    car_l = 1;\n    car_m = 1;\n    car_n = 1;\n    car_o = 1;\n    car_p = 1;\n\
    \    car_q = 1;\n    \n    car_collisions = 0;\n    \n    while(car_i < n) {\n\
    \        car_collisions = 0;\n        \n        while(car_j < n) {\n         \
    \   car_collisions = 0;\n            \n            while(car_k < n) {\n      \
    \          car_collisions = 0;\n                \n                while(car_l\
    \ < n) {\n                    car_collisions = 0;\n                    \n    \
    \                while(car_m < n) {\n                        car_collisions =\
    \ 0;\n                        \n                        while(car_n < n) {\n \
    \                           car_collisions = 0;\n                            \n\
    \                            while(car_o < n) {\n                            \
    \    car_collisions = 0;\n                                \n                 \
    \               while(car_p < n) {\n                                    car_collisions\
    \ = 0;\n                                    \n                               \
    \     while(car_q < n) {\n                                        car_collisions\
    \ = 0;\n                                        \n                           \
    \             if(car_collisions == 0) {\n                                    \
    \        collisions++;\n                                            break;\n \
    \                                       }\n                                  \
    \      car_q++;\n                                    }\n                     \
    \               car_p++;\n                                }\n                \
    \                car_n++;\n                            }\n                   \
    \         car_m++;\n                        }\n                        car_l++;\n\
    \                    }\n                    car_k++;\n                }\n    \
    \            car_j++;\n            }\n            car_k++;\n        }\n      \
    \  car_j++;\n    }\n    \n    return collisions;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_num = n;\n    long car_speed = n;\n    long car_speed_left\
    \ = car_speed;\n    long car_speed_right = car_speed;\n    long car_speed_left_to_right\
    \ = car_speed;\n    long car_speed_right_to_left = car_speed;\n    long car_speed_left_to_right_speed\
    \ = car_speed;\n    long car_speed_right_to_left_speed = car_speed;\n    long\
    \ car_speed_left_to_right_collisions = 0;\n    long car_speed_right_to_left_collisions\
    \ = 0;\n    long car_speed_left_to_right_collisions_speed = 0;\n    long car_speed_right_to_left_collisions_speed\
    \ = 0;\n    long car_speed_left_to_right_collisions_speed = 0;\n    long car_speed_right_to_left_collisions_speed\
    \ = 0;\n    long car_speed_left_to_right_collisions_speed = 0;\n    long car_speed_right_to_left_collisions_speed\
    \ = 0;\n    long car_speed_left_to_right_collisions_speed = 0;\n    long car_speed_right_to_left_collisions_speed\
    \ = 0;\n    long car_speed_left_to_right_collisions_speed = 0;\n    long car_speed_right_to_left_collisions_speed\
    \ = 0;\n    long car_speed_left_to_right_collisions_speed = 0;\n    long car_speed_right_to_left_collisions_speed\
    \ = 0;\n    long car_speed_left_to_right_collisions_speed = 0;\n    long car_speed_right_to_left_collisions_speed\
    \ = 0;\n    long car_speed_left_to_right_collisions_speed = 0;\n    long car_speed_right_to_left_collisions_speed\
    \ = 0;\n    long car_speed_left_to_right_collisions_speed = 0;\n    long car_speed_right_to_left_collisions_speed\
    \ = 0;\n    long car_speed_left_to_right_collisions_speed = 0;\n    long car_speed_right_to_left_collisions_speed\
    \ = 0;\n    long car_speed_left_to_right_collisions_speed = 0;\n    long car_speed_right_to_left_collisions_speed\
    \ = 0;\n    long car_speed_left_to_right_collisions_speed = 0;\n    long car_speed_right_to_left_collisions_speed\
    \ = 0;\n    long car_speed_left_to_right_collisions_speed = 0;\n    long car_speed_right_to_left_collisions_speed\
    \ = 0;\n    long car_speed_left_to_right_collisions_speed = 0;\n    long car_speed_right_to_left_collisions_speed\
    \ = 0;\n    long car_speed_left_to_right_collisions_speed = 0;\n    long car_speed_right_to_left_collisions_speed\
    \ = 0;\n\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbxhf_ui1.d(59): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbxhf_ui1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgiuos_km.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpgiuos_km.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpgiuos_km.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy3w2azh_.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpy3w2azh_.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy3w2azh_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_num = n;\n    long car_speed = car_num * car_speed;\n   \
    \ long car_speed_left = car_speed - car_speed_right;\n    long car_speed_right\
    \ = car_speed + car_speed_left;\n    long car_speed_left_to_right = car_speed_left\
    \ - car_speed_right;\n    long car_speed_right_to_left = car_speed_right - car_speed_left;\n\
    \    long car_speed_left_to_right_to_left = car_speed_left_to_right - car_speed_right_to_left;\n\
    \    long car_speed_right_to_left_to_right = car_speed_right_to_left - car_speed_left_to_right;\n\
    \    long car_speed_left_to_right_to_left_to_right = car_speed_left_to_right_to_left\
    \ - car_speed_right_to_left_to_right;\n    long car_speed_right_to_left_to_right_to_left\
    \ = car_speed_right_to_left_to_right - car_speed_left_to_right_to_left;\n    long\
    \ car_speed_left_to_right_to_left_to_right_to_left = car_speed_left_to_right_to_left_to_right_to_left\
    \ - car_speed_right_to_left_to_right_to_left;\n    long car_speed_right_to_left_to_right_to_left_to_right_to_left\
    \ = car_speed_right_to_left_to_right_to_left_to_right_to_left - car_speed_left_to_right_to_left_to_right_to_left;\n\
    \    long car_speed_right_to_left_to_right_to_left_to_right_to_left_to_right =\
    \ car_speed_right_to_left_to_right_to_left_to_right_to_left_to_right - car_speed_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    long car_speed_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = car_speed_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - car_speed_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right;\n\
    \    long car_speed_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = car_speed_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    long car_speed_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = car_speed_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5iqyb3v5.d(34): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5iqyb3v5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_collision;\n    long collision_distance_collision_i;\n\
    \    long collision_distance_collision_j;\n    long collision_distance_collision_k;\n\
    \    long collision_distance_collision_collision;\n    long collision_distance_collision_collision_i;\n\
    \    long collision_distance_collision_collision_j;\n    long collision_distance_collision_collision_k;\n\
    \    long collision_distance_collision_collision_collision;\n    long collision_distance_collision_collision_collision_i;\n\
    \    long collision_distance_collision_collision_collision_j;\n    long collision_distance_collision_collision_collision_k;\n\
    \    long collision_distance_collision_collision_collision_collision;\n    long\
    \ collision_distance_collision_collision_collision_collision_i;\n    long collision_distance_collision_collision_collision_collision_j;\n\
    \    long collision_distance_collision_collision_collision_collision_k;\n    long\
    \ collision_distance_collision_collision_collision_collision_collision;\n    long\
    \ collision_distance_collision_collision_collision_collision_i;\n    long collision_distance_collision_collision_collision_collision_j;\n\
    \    long collision_distance_collision_collision_collision_collision_k;\n    long\
    \ collision_distance_collision_collision_collision_collision_collision;\n    long\
    \ collision_distance_collision_collision_collision_collision_collision_i;\n  \
    \  long collision_distance_collision_collision_collision_collision_collision_j;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_k;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_collision;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_i;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_j;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_k;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_collision;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_collision_i;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_collision_j;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_collision_k\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdwz7osqr.d(58): Error: semicolon expected, not `unittest`\n/tmp/tmpdwz7osqr.d(58):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpdwz7osqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_left;\n\
    \    long collision_right;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left;\n    long collision_right_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_left_right;\n    long collision_right_left;\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph6ty14hr.d(92): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph6ty14hr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_point;\n   \
    \ long collision_point_count;\n    long collision_point_count_max;\n    long collision_point_count_min;\n\
    \    long collision_point_count_temp;\n    long collision_point_count_temp_max;\n\
    \    long collision_point_count_temp_min;\n    long collision_point_count_temp_temp;\n\
    \    long collision_point_count_temp_temp_max;\n    long collision_point_count_temp_temp_min;\n\
    \    long collision_point_count_temp_temp_temp;\n    long collision_point_count_temp_temp_temp_max;\n\
    \    long collision_point_count_temp_temp_temp_min;\n    long collision_point_count_temp_temp_temp_temp;\n\
    \    long collision_point_count_temp_temp_temp_temp_max;\n    long collision_point_count_temp_temp_temp_temp_min;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp;\n    long collision_point_count_temp_temp_temp_temp_temp_max;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_min;\n    long collision_point_count_temp_temp_temp_temp_temp_temp;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_temp_max;\n    long collision_point_count_temp_temp_temp_temp_temp_temp_min;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_temp_temp;\n    long\
    \ collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_max;\n    long\
    \ collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_min;\n    long\
    \ collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    long\
    \ collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_max;\n  \
    \  long collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_min;\n \
    \   long collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_max;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_min;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_max;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_min;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long collision_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvqavk98d.d(57): Error: semicolon expected, not `unittest`\n/tmp/tmpvqavk98d.d(57):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvqavk98d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q,\
    \ car_r, car_s, car_t, car_u, car_v;\n    long car_x, car_y, car_z, car_a, car_b;\n\
    \    long car_x_i, car_y_i, car_z_i, car_a_i, car_b_i;\n    long car_x_j, car_y_j,\
    \ car_z_j, car_a_j, car_b_j;\n    long car_x_k, car_y_k, car_z_k, car_a_k, car_b_k;\n\
    \    long car_x_l, car_y_l, car_z_l, car_a_l, car_b_l;\n    long car_x_m, car_y_m,\
    \ car_z_m, car_a_m, car_b_m;\n    long car_x_n, car_y_n, car_z_n, car_a_n, car_b_n;\n\
    \    long car_x_o, car_y_o, car_z_o, car_a_o, car_b_o;\n    long car_x_p, car_y_p,\
    \ car_z_p, car_a_p, car_b_p;\n    long car_x_q, car_y_q, car_z_q, car_a_q, car_b_q;\n\
    \    long car_x_r, car_y_r, car_z_r, car_a_r, car_b_r;\n    long car_x_s, car_y_s,\
    \ car_z_s, car_a_s, car_b_s;\n    long car_x_t, car_y_t, car_z_t, car_a_t, car_b_t;\n\
    \    long car_x_u, car_y_u, car_z_u, car_a_u, car_b_u;\n    long car_x_v, car_y_v,\
    \ car_z_v, car_a_v, car_b_v;\n    long car_x_x, car_y_x, car_z_x, car_a_x, car_b_x;\n\
    \    long car_x_y, car_y_y, car_z_y, car_a_y, car_b_y;\n    long car_x_z, car_y_z,\
    \ car_z_z, car_a_z, car_b_z;\n    long car_x_a, car_y_a, car_z_a, car_a_a, car_b_a;\n\
    \    long car_x_b, car_y_b, car_z_b, car_a_b, car_b_b;\n    long \nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg4gt_rgz.d(40): Error: no identifier for declarator `long`\n/tmp/tmpg4gt_rgz.d(40):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpg4gt_rgz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    for(i = 0; i < n; i++) {\n        long j;\n        for(j\
    \ = i + 1; j < n; j++) {\n            if(car_race_collision_helper(i, j)) {\n\
    \                collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwbqfh2w0.d(22): Error: undefined identifier `car_race_collision_helper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwbqfh2w0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_length;\n\
    \    long collision_length_1;\n    long collision_length_2;\n    long collision_length_3;\n\
    \    long collision_length_4;\n    long collision_length_5;\n    long collision_length_6;\n\
    \    long collision_length_7;\n    long collision_length_8;\n    long collision_length_9;\n\
    \    long collision_length_10;\n    long collision_length_11;\n    long collision_length_12;\n\
    \    long collision_length_13;\n    long collision_length_14;\n    long collision_length_15;\n\
    \    long collision_length_16;\n    long collision_length_17;\n    long collision_length_18;\n\
    \    long collision_length_19;\n    long collision_length_20;\n    long collision_length_21;\n\
    \    long collision_length_22;\n    long collision_length_23;\n    long collision_length_24;\n\
    \    long collision_length_25;\n    long collision_length_26;\n    long collision_length_27;\n\
    \    long collision_length_28;\n    long collision_length_29;\n    long collision_length_30;\n\
    \    long collision_length_31;\n    long collision_length_32;\n    long collision_length_33;\n\
    \    long collision_length_34;\n    long collision_length_35;\n    long collision_length_36;\n\
    \    long collision_length_37;\n    long collision_length_38;\n    long collision_length_39;\n\
    \    long collision_length_40;\n    long collision_length_41;\n    long collision_length_42;\n\
    \    long collision_length_43;\n    long collision_length_44;\n    long collision_length_45;\n\
    \    long collision_length_46;\n    long collision_length_47;\n    long collision_length_48;\n\
    \    long collision_length_49;\n    long collision_length_50;\n    long collision_length_51;\n\
    \    long collision_length_52;\n    long collision_length_53;\n    long collision_length_54;\n\
    \    long collision_length_55;\n    long collision_length_56;\n    long collision_length_57;\n\
    \    long collision_length_58;\n    long collision_length_59;\n    long collision_length_60;\n\
    \    long collision_length_61;\n    long collision_length_62;\n    long collision_length_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppxab873n.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmppxab873n.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmppxab873n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_left;\n\
    \    long collision_right;\n    long collision_left_right;\n    long collision_left_left;\n\
    \    long collision_left_left_right;\n    long collision_left_left_left_right;\n\
    \    long collision_left_left_left_left_right;\n    long collision_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_right;\n    long collision_left_left_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_right;\n    long collision_left_left_left_left_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_right_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_right_right_right;\n\
    \    long collision_left_left_left_left_left_left_left_right_right_right_right;\n\
    \    long collision_left_left_left_left_left_right_right_right_right_right;\n\
    \    long collision_left_left_left_left_right_right_right_right_right_right;\n\
    \    long collision_left_left_left_right_right_right_right_right_right_right;\n\
    \    long collision_left_left_right_right_right_right_right_right_right_right;\n\
    \    long collision_left_left_right_right_right_right_right_right_right_right_right;\n\
    \    long collision_left_right_right_right_right_right_right_right_right_right_right;\n\
    \    long collision_left_right_right_right_right_right_right_right_right_right_right_right;\n\
    \    long collision_left_right_right_right_right_right_right_right_right_right_right_right_right_right;\n\
    \    long collision_left_right_right_right_right_right_right_right_right_right_right_right_right_right_right;\n\
    \    long collision_left_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right;\n\
    \    long collision_left_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right;\n\
    \    long collision_left_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right;\n\
    \    long collision_left_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsomf8kzf.d(50): Error: semicolon expected, not `unittest`\n/tmp/tmpsomf8kzf.d(50):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpsomf8kzf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_collision;\n    long collision_distance_collision_i;\n\
    \    long collision_distance_collision_j;\n    long collision_distance_collision_k;\n\
    \    long collision_distance_collision_collision;\n    long collision_distance_collision_collision_i;\n\
    \    long collision_distance_collision_collision_j;\n    long collision_distance_collision_collision_k;\n\
    \    long collision_distance_collision_collision_collision;\n    long collision_distance_collision_collision_collision_i;\n\
    \    long collision_distance_collision_collision_collision_j;\n    long collision_distance_collision_collision_collision_k;\n\
    \    long collision_distance_collision_collision_collision_collision;\n    long\
    \ collision_distance_collision_collision_collision_collision_i;\n    long collision_distance_collision_collision_collision_collision_j;\n\
    \    long collision_distance_collision_collision_collision_collision_k;\n    long\
    \ collision_distance_collision_collision_collision_collision_collision;\n    long\
    \ collision_distance_collision_collision_collision_collision_i;\n    long collision_distance_collision_collision_collision_collision_j;\n\
    \    long collision_distance_collision_collision_collision_collision_k;\n    long\
    \ collision_distance_collision_collision_collision_collision_collision;\n    long\
    \ collision_distance_collision_collision_collision_collision_collision_i;\n  \
    \  long collision_distance_collision_collision_collision_collision_collision_j;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_k;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_collision;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_i;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_j;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_k;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_collision;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_collision_i;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_collision_j;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_collision_k\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdwz7osqr.d(58): Error: semicolon expected, not `unittest`\n/tmp/tmpdwz7osqr.d(58):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpdwz7osqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance_left;\n    long collision_distance_right;\n    long\
    \ collision_distance_left_right;\n    long collision_distance_left_left;\n   \
    \ long collision_distance_right_left;\n    long collision_distance_left_right_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_left_right_right_left;\n\
    \    long collision_distance_right_left_left_left;\n    long collision_distance_right_left_right_left;\n\
    \    long collision_distance_right_left_left_right;\n    long collision_distance_right_left_right_right;\n\
    \    long collision_distance_right_left_right_right_left;\n    long collision_distance_right_left_right_right_right;\n\
    \    long collision_distance_right_left_right_right_right_left;\n    long collision_distance_right_left_right_right_right_right;\n\
    \    long collision_distance_right_left_right_right_right_right_left;\n    long\
    \ collision_distance_right_left_right_right_right_right_right;\n    long collision_distance_right_left_right_right_right_right_right_left;\n\
    \    long collision_distance_right_left_right_right_right_right_right_right;\n\
    \    long collision_distance_right_left_right_right_right_right_right_right_left;\n\
    \    long collision_distance_right_left_right_right_right_right_right_right_right;\n\
    \    long collision_distance_right_left_right_right_right_right_right_right_right_left;\n\
    \    long collision_distance_right_left_right_right_right_right_right_right_right_right;\n\
    \    long collision_distance_right_left_right_right_right_right_right_right_right_right_left;\n\
    \    long collision_distance_right_left_right_right_right_right_right_right_right_right_right;\n\
    \    long collision_distance_right_left_right_right_right_right_right_right_right_right_left;\n\
    \    long collision_distance_right_left_right_right_right_right_right_right_right_right_right;\n\
    \    long collision_distance_right_left_right_right_right_right_right_right_right_right_left;\n\
    \    long collision_distance_right_left_right_right_right_right_right_right_right_right_right_right;\n\
    \    long collision_distance_right_left_right_right_right_right_right_right_right_right_right_left;\n\
    \    long collision_distance_right_left_right_right_right_right_right_right_right_right_right_right_right;\n\
    \    long collision_distance_right_left_right_right_right_right_right_right_right_right_right_right_left;\n\
    \    long collision_distance_right_left_right_right_right_right_right_right_right_right_right_right_right;\n\
    \    long collision_distance_right_left_right_right_right_right_right_right_right_right_right_right_left;\n\
    \    long collision_distance_right_left_right_right_right_right_right_right_right_right_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv0q6mmkl.d(59): Error: semicolon expected, not `unittest`\n/tmp/tmpv0q6mmkl.d(59):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpv0q6mmkl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_i, car_j, car_k, car_l, car_m, car_n;\n    long car_collisions;\n\
    \    long car_collisions_count;\n    long car_collisions_count_max;\n    long\
    \ car_collisions_count_min;\n    long car_collisions_count_temp;\n    long car_collisions_count_temp_max;\n\
    \    long car_collisions_count_temp_min;\n    long car_collisions_count_temp_max2;\n\
    \    long car_collisions_count_temp_min2;\n    long car_collisions_count_temp_max3;\n\
    \    long car_collisions_count_temp_min3;\n    long car_collisions_count_temp_max4;\n\
    \    long car_collisions_count_temp_min4;\n    long car_collisions_count_temp_max5;\n\
    \    long car_collisions_count_temp_min5;\n    long car_collisions_count_temp_max6;\n\
    \    long car_collisions_count_temp_min6;\n    long car_collisions_count_temp_max7;\n\
    \    long car_collisions_count_temp_min7;\n    long car_collisions_count_temp_max8;\n\
    \    long car_collisions_count_temp_min8;\n    long car_collisions_count_temp_max9;\n\
    \    long car_collisions_count_temp_min9;\n    long car_collisions_count_temp_max10;\n\
    \    long car_collisions_count_temp_min10;\n    long car_collisions_count_temp_max11;\n\
    \    long car_collisions_count_temp_min11;\n    long car_collisions_count_temp_max12;\n\
    \    long car_collisions_count_temp_min12;\n    long car_collisions_count_temp_max13;\n\
    \    long car_collisions_count_temp_min13;\n    long car_collisions_count_temp_max14;\n\
    \    long car_collisions_count_temp_min14;\n    long car_collisions_count_temp_max15;\n\
    \    long car_collisions_count_temp_min15;\n    long car_collisions_count_temp_max16;\n\
    \    long car_collisions_count_temp_min16;\n    long car_collisions_count_temp_max17;\n\
    \    long car_collisions_count_temp_min17;\n    long car_collisions_count_temp_max18;\n\
    \    long car_collisions_count_temp_min18;\n    long car_collisions_count_temp_max19;\n\
    \    long car_collisions_count_temp_min19;\n    long car_collisions_count_temp_max20;\n\
    \    long car_collision\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphath5wnm.d(64): Error: semicolon expected, not `unittest`\n/tmp/tmphath5wnm.d(64):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphath5wnm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_i, car_j, car_k, car_l, car_m, car_n;\n    long car_collisions;\n\
    \    long car_collisions_i;\n    long car_collisions_j;\n    long car_collisions_k;\n\
    \    long car_collisions_l;\n    long car_collisions_m;\n    long car_collisions_n;\n\
    \    long car_collisions_total;\n    long car_collisions_total_i;\n    long car_collisions_total_j;\n\
    \    long car_collisions_total_k;\n    long car_collisions_total_l;\n    long\
    \ car_collisions_total_m;\n    long car_collisions_total_n;\n    long car_collisions_total_total;\n\
    \    long car_collisions_total_total_i;\n    long car_collisions_total_total_j;\n\
    \    long car_collisions_total_total_k;\n    long car_collisions_total_total_l;\n\
    \    long car_collisions_total_total_m;\n    long car_collisions_total_total_n;\n\
    \    long car_collisions_total_total_total;\n    long car_collisions_total_total_total_i;\n\
    \    long car_collisions_total_total_total_j;\n    long car_collisions_total_total_total_k;\n\
    \    long car_collisions_total_total_total_l;\n    long car_collisions_total_total_total_m;\n\
    \    long car_collisions_total_total_total_n;\n    long car_collisions_total_total_total_total;\n\
    \    long car_collisions_total_total_total_total_i;\n    long car_collisions_total_total_total_total_j;\n\
    \    long car_collisions_total_total_total_total_k;\n    long car_collisions_total_total_total_total_l;\n\
    \    long car_collisions_total_total_total_total_m;\n    long car_collisions_total_total_total_total_n;\n\
    \    long car_collisions_total_total_total_total_total;\n    long car_collisions_total_total_total_total_total_i;\n\
    \    long car_collisions_total_total_total_total_total_j;\n    long car_collisions_total_total_total_total_total_k;\n\
    \    long car_collisions_total_total_total_total_total_l;\n    long car_collisions_total_total_total_total_total_m;\n\
    \    long car_collisions_total_total_total_total_total_n;\n    long car_collisions_total_total_total_total_total_total;\n\
    \    long car_collisions_total_total_total_total_total_total_i;\n    long car_collisions_total_total_total_total_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpikuyoj9v.d(64): Error: semicolon expected, not `unittest`\n/tmp/tmpikuyoj9v.d(64):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpikuyoj9v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q,\
    \ car_r, car_s, car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n    long car_i,\
    \ car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_r, car_s, car_t,\
    \ car_u, car_v, car_w, car_x, car_y, car_z;\n    long car_i, car_j, car_k, car_l,\
    \ car_m, car_n, car_o, car_p, car_q, car_r, car_s, car_t, car_u, car_v, car_w,\
    \ car_x, car_y, car_z;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o,\
    \ car_p, car_q, car_r, car_s, car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n\
    \    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_r,\
    \ car_s, car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n    long car_i, car_j,\
    \ car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_r, car_s, car_t, car_u,\
    \ car_v, car_w, car_x, car_y, car_z;\n    long car_i, car_j, car_k, car_l, car_m,\
    \ car_n, car_o, car_p, car_q, car_r, car_s, car_t, car_u, car_v, car_w, car_x,\
    \ car_y, car_z;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p,\
    \ car_q, car_r, car_s, car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n    long\
    \ car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_r, car_s,\
    \ car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n    \nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2hs79vis.d(28): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2hs79vis.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q,\
    \ car_r, car_s, car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n    long car_i,\
    \ car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_r, car_s, car_t,\
    \ car_u, car_v, car_w, car_x, car_y, car_z;\n    long car_i, car_j, car_k, car_l,\
    \ car_m, car_n, car_o, car_p, car_q, car_r, car_s, car_t, car_u, car_v, car_w,\
    \ car_x, car_y, car_z;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o,\
    \ car_p, car_q, car_r, car_s, car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n\
    \    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_r,\
    \ car_s, car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n    long car_i, car_j,\
    \ car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_r, car_s, car_t, car_u,\
    \ car_v, car_w, car_x, car_y, car_z;\n    long car_i, car_j, car_k, car_l, car_m,\
    \ car_n, car_o, car_p, car_q, car_r, car_s, car_t, car_u, car_v, car_w, car_x,\
    \ car_y, car_z;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p,\
    \ car_q, car_r, car_s, car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n    long\
    \ car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_r, car_s,\
    \ car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n    \nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2hs79vis.d(28): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2hs79vis.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy3w2azh_.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpy3w2azh_.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy3w2azh_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp68b3e_9g.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmp68b3e_9g.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp68b3e_9g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right = 0;\n    long car_collisions_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_right = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_right = 0;\n    long\
    \ car_collisions_left_right_left_right_left_right_left_right = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbn03cuok.d(48): Error: semicolon expected, not `unittest`\n/tmp/tmpbn03cuok.d(48):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpbn03cuok.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_left = 0;\n    long car_collisions_right_left = 0;\n   \
    \ long car_collisions_right_right = 0;\n    long car_collisions_left_right_left\
    \ = 0;\n    long car_collisions_left_left_right = 0;\n    long car_collisions_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left = 0;\n    long car_collisions_left_right_right_left\
    \ = 0;\n    long car_collisions_left_left_left_right = 0;\n    long car_collisions_right_left_left_right\
    \ = 0;\n    long car_collisions_right_right_left_right = 0;\n    long car_collisions_left_right_right_left_right\
    \ = 0;\n    long car_collisions_left_left_left_right_right = 0;\n    long car_collisions_right_left_left_right_right\
    \ = 0;\n    long car_collisions_right_right_left_right_right = 0;\n    long car_collisions_left_right_right_left_right_right\
    \ = 0;\n    long car_collisions_left_left_left_right_right_right = 0;\n    long\
    \ car_collisions_right_left_left_right_right_right = 0;\n    long car_collisions_right_right_left_right_right_right\
    \ = 0;\n    long car_collisions_left_right_right_left_right_right_right = 0;\n\
    \    long car_collisions_left_left_left_right_right_right_right = 0;\n    long\
    \ car_collisions_right_left_left_right_right_right_right = 0;\n    long car_collisions_right_right_left_right_right_right_right\
    \ = 0;\n    long car_collisions_left_right_right_left_right_right_right_right\
    \ = 0;\n    long car_collisions_left_left_left_right_right_right_right_right =\
    \ 0;\n    long car_collisions_right_left_left_right_right_right_right_right =\
    \ 0;\n    long car_collisions_right_right_left_right_right_right_right_right =\
    \ 0;\n    long car_collisions_left_right_right_left_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_left_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_left_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_right_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_right_right_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_left_left_right_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpei91w1bx.d(56): Error: semicolon expected, not `unittest`\n/tmp/tmpei91w1bx.d(56):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpei91w1bx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_right_left = 0;\n    long car_collisions_left_left_right = 0;\n\
    \    long car_collisions_right_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left = 0;\n    long car_collisions_left_left_right_left_right\
    \ = 0;\n    long car_collisions_right_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left = 0;\n    long\
    \ car_collisions_left_left_right_left_right_left_right = 0;\n    long car_collisions_right_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right =\
    \ 0;\n    long car_collisions_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_left_right_left_right_left_right_left_right = 0;\n\
    \    long car_collisions_right_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxy7glwz2.d(50): Error: semicolon expected, not `unittest`\n/tmp/tmpxy7glwz2.d(50):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpxy7glwz2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance_left;\n    long collision_distance_right;\n    long\
    \ collision_distance_left_right;\n    long collision_distance_left_left_right;\n\
    \    long collision_distance_left_left_left_right;\n    long collision_distance_left_left_left_left_right;\n\
    \    long collision_distance_left_left_left_left_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvln0r332.d(30): Error: semicolon expected, not `unittest`\n/tmp/tmpvln0r332.d(30):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvln0r332.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_distance;\n\
    \    long collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_i_minus_j;\n    long collision_distance_i_minus_k;\n\
    \    long collision_distance_j_minus_k;\n    long collision_distance_i_minus_k_minus_j;\n\
    \    long collision_distance_i_minus_k_minus_j;\n    long collision_distance_i_minus_k_minus_j_minus_k;\n\
    \    long collision_distance_i_minus_k_minus_j_minus_k;\n    long collision_distance_i_minus_k_minus_j_minus_k_minus_j;\n\
    \    long collision_distance_i_minus_k_minus_j_minus_k_minus_j;\n    long collision_distance_i_minus_k_minus_j_minus_k_minus_j_minus_k;\n\
    \    long collision_distance_i_minus_k_minus_j_minus_k_minus_j_minus_k;\n    long\
    \ collision_distance_i_minus_k_minus_j_minus_k_minus_j_minus_k_minus_j;\n    long\
    \ collision_distance_i_minus_k_minus_j_minus_k_minus_j_minus_k_minus_j;\n    long\
    \ collision_distance_i_minus_k_minus_j_minus_k_minus_j_minus_k_minus_j_minus_k;\n\
    \    long collision_distance_i_minus_k_minus_j_minus_k_minus_j_minus_k_minus_j_minus_k;\n\
    \    long collision_distance_i_minus_k_minus_j_minus_k_minus_j_minus_k_minus_j_minus_k_minus_j;\n\
    \    long collision_distance_i_minus_k_minus_j_minus_k_minus_j_minus_k_minus_j_minus_k_minus_j;\n\
    \    long collision_distance_i_minus_k_minus_j_minus_k_minus_j_minus_k_minus_j_minus_k_minus_j_minus_k;\n\
    \    long collision_distance_i_minus_k_minus_j_minus_k_minus_j_minus_k_minus_j_minus_k_minus_j_minus_k_minus_j;\n\
    \    long collision_distance_i_minus_k_minus_j_minus_k_minus_j_minus_k_minus_j_minus_k_minus_j_minus_k_minus_j_minus_k;\n\
    \    long collision_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptd6ltyi2.d(46): Error: semicolon expected, not `unittest`\n/tmp/tmptd6ltyi2.d(46):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmptd6ltyi2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right = 0;\n    long car_collisions_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_right = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_right = 0;\n    long\
    \ car_collisions_left_right_left_right_left_right_left_right = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpag9eh3qn.d(48): Error: semicolon expected, not `unittest`\n/tmp/tmpag9eh3qn.d(48):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpag9eh3qn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy3w2azh_.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpy3w2azh_.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy3w2azh_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q;\n\
    \    long car_collision_i, car_collision_j, car_collision_k, car_collision_l,\
    \ car_collision_m, car_collision_n, car_collision_o, car_collision_p, car_collision_q;\n\
    \    long car_collision_collision_i, car_collision_collision_j, car_collision_collision_k,\
    \ car_collision_collision_l, car_collision_collision_m, car_collision_collision_n,\
    \ car_collision_collision_o, car_collision_collision_p, car_collision_collision_q;\n\
    \    long car_collision_collision_collision_i, car_collision_collision_collision_j,\
    \ car_collision_collision_collision_k, car_collision_collision_collision_l, car_collision_collision_collision_m,\
    \ car_collision_collision_collision_n, car_collision_collision_collision_o, car_collision_collision_collision_p,\
    \ car_collision_collision_collision_q;\n    long car_collision_collision_collision_collision_i,\
    \ car_collision_collision_collision_collision_j, car_collision_collision_collision_collision_k,\
    \ car_collision_collision_collision_collision_l, car_collision_collision_collision_collision_m,\
    \ car_collision_collision_collision_collision_n, car_collision_collision_collision_collision_o,\
    \ car_collision_collision_collision_collision_p, car_collision_collision_collision_collision_q;\n\
    \    long car_collision_collision_collision_collision_collision_i, car_collision_collision_collision_collision_collision_collision_j,\
    \ car_collision_collision_collision_collision_collision_collision_k, car_collision_collision_collision_collision_collision_collision_l,\
    \ car_collision_collision_collision_collision_collision_collision_m, car_collision_collision_collision_collision_collision_collision_n,\
    \ car_collision_collision_collision_collision_collision_collision_o, car_collision_collision_collision_collision_collision_collision_p,\
    \ car_collision_collision_collision_collision_collision_collision_q;\n    long\
    \ car_collision_collision_collision_collision_collision_collision_i, car_collision_collision_collision_collision_collision_collision_collision_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwq58_gjl.d(25): Error: semicolon expected, not `unittest`\n/tmp/tmpwq58_gjl.d(25):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpwq58_gjl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy3w2azh_.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpy3w2azh_.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy3w2azh_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_total = 0;\n   \
    \ long car_collisions_total_total = 0;\n    long car_collisions_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total = 0;\n    long car_collisions_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total = 0;\n   \
    \ long car_collisions_total_total_total_total_total_total_total = 0;\n    long\
    \ car_collisions_total_total_total_total_total_total_total_total = 0;\n    long\
    \ car_collisions_total_total_total_total_total_total_total_total = 0;\n    long\
    \ car_collisions_total_total_total_total_total_total_total_total_total = 0;\n\
    \    long car_collisions_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpamtb0s_t.d(47): Error: semicolon expected, not `unittest`\n/tmp/tmpamtb0s_t.d(47):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpamtb0s_t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_total = 0;\n   \
    \ long car_collisions_total_total = 0;\n    long car_collisions_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total = 0;\n    long car_collisions_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total = 0;\n   \
    \ long car_collisions_total_total_total_total_total_total_total = 0;\n    long\
    \ car_collisions_total_total_total_total_total_total_total_total = 0;\n    long\
    \ car_collisions_total_total_total_total_total_total_total_total = 0;\n    long\
    \ car_collisions_total_total_total_total_total_total_total_total_total = 0;\n\
    \    long car_collisions_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_total_total_total_total_total_total_total_total_total_total\
    \ = 0;\n    long car_collisions_total_total_total_total_total_\nunittest\n{\n\
    \    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp14yxko79.d(47): Error: semicolon expected, not `unittest`\n/tmp/tmp14yxko79.d(47):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp14yxko79.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    for(i = 0; i < n; i++) {\n        long j;\n        for(j\
    \ = i + 1; j < n; j++) {\n            long collision = car_race_collision_helper(i,\
    \ j);\n            if(collision > 0) {\n                collisions++;\n      \
    \      }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf80tyzq2.d(22): Error: undefined identifier `car_race_collision_helper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf80tyzq2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_left;\n\
    \    long collision_right;\n    long collision_left_right;\n    long collision_right_left;\n\
    \    long collision_left_left_right;\n    long collision_right_right_left;\n \
    \   long collision_left_left_left_right;\n    long collision_right_right_left_left;\n\
    \    long collision_left_left_left_right_right;\n    long collision_right_right_left_left_right;\n\
    \    long collision_left_left_left_right_right_left;\n    long collision_right_right_left_left_right_left;\n\
    \    long collision_left_left_left_right_right_left_right;\n    long collision_right_right_left_left_right_left_right;\n\
    \    long collision_left_left_left_right_right_left_right_left;\n    long collision_right_right_left_left_right_left_right_left;\n\
    \    long collision_left_left_left_right_right_left_right_left_right;\n    long\
    \ collision_right_right_left_left_right_left_right_left_right;\n    long collision_left_left_right_right_left_right_left_right_left;\n\
    \    long collision_right_right_left_left_right_left_right_left_right;\n    long\
    \ collision_left_left_right_right_left_right_left_right_left;\n    long collision_right_right_left_left_right_left_right_left_right;\n\
    \    long collision_left_left_right_right_left_right_left_right_left;\n    long\
    \ collision_right_right_left_left_right_left_right_left_right;\n    long collision_left_left_right_right_left_right_left_right_left_right;\n\
    \    long collision_right_right_left_left_right_left_right_left_right_left;\n\
    \    long collision_left_left_right_right_left_right_left_right_left_right;\n\
    \    long collision_right_right_left_left_right_left_right_left_right_left;\n\
    \    long collision_left_left_right_right_left_right_left_right_left_right;\n\
    \    long collision_right_right_left_left_right_left_right_left_right_left;\n\
    \    long collision_left_left_right_right_left_right_left_right_left_right;\n\
    \    long collision_right_right_left_left_right_left_right_left_right_left;\n\
    \    long collision_left_left_right_right_left_right_left_right_left_right_left;\n\
    \    long collision_right_right_left_left_right_left_right_left_right_left_right;\n\
    \    long collision_left_left_right_right_left_right_left_right_left_right_left;\n\
    \    long collision_right_right_left_left_right_left_right_left_right_left_right;\n\
    \    long collision_left_left_right_right_left_right_left_right_left_right_left;\n\
    \    long collision_right_right_left_left_right_left_right_left_right_left_right;\n\
    \    long collision_left_left_right_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp439ot4s1.d(61): Error: semicolon expected, not `unittest`\n/tmp/tmp439ot4s1.d(61):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp439ot4s1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q;\n\
    \    long car_x, car_y, car_z, car_a, car_b;\n    long car_x_1, car_y_1, car_z_1,\
    \ car_a_1, car_b_1;\n    long car_x_2, car_y_2, car_z_2, car_a_2, car_b_2;\n \
    \   long car_x_3, car_y_3, car_z_3, car_a_3, car_b_3;\n    long car_x_4, car_y_4,\
    \ car_z_4, car_a_4, car_b_4;\n    long car_x_5, car_y_5, car_z_5, car_a_5, car_b_5;\n\
    \    long car_x_6, car_y_6, car_z_6, car_a_6, car_b_6;\n    long car_x_7, car_y_7,\
    \ car_z_7, car_a_7, car_b_7;\n    long car_x_8, car_y_8, car_z_8, car_a_8, car_b_8;\n\
    \    long car_x_9, car_y_9, car_z_9, car_a_9, car_b_9;\n    long car_x_10, car_y_10,\
    \ car_z_10, car_a_10, car_b_10;\n    long car_x_11, car_y_11, car_z_11, car_a_11,\
    \ car_b_11;\n    long car_x_12, car_y_12, car_z_12, car_a_12, car_b_12;\n    long\
    \ car_x_13, car_y_13, car_z_13, car_a_13, car_b_13;\n    long car_x_14, car_y_14,\
    \ car_z_14, car_a_14, car_b_14;\n    long car_x_15, car_y_15, car_z_15, car_a_15,\
    \ car_b_15;\n    long car_x_16, car_y_16, car_z_16, car_a_16, car_b_16;\n    long\
    \ car_x_17, car_y_17, car_z_17, car_a_17, car_b_17;\n    long car_x_18, car_y_18,\
    \ car_z_18, car_a_18, car_b_18;\n    long car_x_19, car_y_19, car_z_19, car_a_19,\
    \ car_b_19;\n    long car_x_20, car_y_20, car_z_20, car_a_\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkicubg0u.d(40): Error: semicolon expected, not `unittest`\n/tmp/tmpkicubg0u.d(40):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkicubg0u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_point;\n   \
    \ long collision_point_1;\n    long collision_point_2;\n    long collision_point_3;\n\
    \    long collision_point_4;\n    long collision_point_5;\n    long collision_point_6;\n\
    \    long collision_point_7;\n    long collision_point_8;\n    long collision_point_9;\n\
    \    long collision_point_10;\n    long collision_point_11;\n    long collision_point_12;\n\
    \    long collision_point_13;\n    long collision_point_14;\n    long collision_point_15;\n\
    \    long collision_point_16;\n    long collision_point_17;\n    long collision_point_18;\n\
    \    long collision_point_19;\n    long collision_point_20;\n    long collision_point_21;\n\
    \    long collision_point_22;\n    long collision_point_23;\n    long collision_point_24;\n\
    \    long collision_point_25;\n    long collision_point_26;\n    long collision_point_27;\n\
    \    long collision_point_28;\n    long collision_point_29;\n    long collision_point_30;\n\
    \    long collision_point_31;\n    long collision_point_32;\n    long collision_point_33;\n\
    \    long collision_point_34;\n    long collision_point_35;\n    long collision_point_36;\n\
    \    long collision_point_37;\n    long collision_point_38;\n    long collision_point_39;\n\
    \    long collision_point_40;\n    long collision_point_41;\n    long collision_point_42;\n\
    \    long collision_point_43;\n    long collision_point_44;\n    long collision_point_45;\n\
    \    long collision_point_46;\n    long collision_point_47;\n    long collision_point_48;\n\
    \    long collision_point_49;\n    long collision_point_50;\n    long collision_point_51;\n\
    \    long collision_point_52;\n    long collision_point_53;\n    long collision_point_54;\n\
    \    long collision_point_55;\n    long collision_point_56;\n    long collision_point_57;\n\
    \    long collision_point_58;\n    long collision_point_59;\n    long collision_point_60;\n\
    \    long collision_point_61;\n    long collision_point_62;\n    long collision_point_63;\n\
    \    \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppa0935o9.d(86): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppa0935o9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_left;\n\
    \    long collision_right;\n    long collision_left_right;\n    long collision_left_left;\n\
    \    long collision_left_left_right;\n    long collision_left_left_left;\n   \
    \ long collision_left_left_left_right;\n    long collision_left_left_left_left;\n\
    \    long collision_left_left_left_left_right;\n    long collision_left_left_left_left_left;\n\
    \    long collision_left_left_left_left_left_right;\n    long collision_left_left_left_left_left_left;\n\
    \    long collision_left_left_left_left_left_left_right;\n    long collision_left_left_left_left_left_left_left;\n\
    \    long collision_left_left_left_left_left_left_left_right;\n    long collision_left_left_left_left_left_left_left_left;\n\
    \    long collision_left_left_left_left_left_left_left_left_right;\n    long collision_left_left_left_left_left_left_left_left_left;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_right;\n    long\
    \ collision_left_left_left_left_left_left_left_left_left_left;\n    long collision_left_left_left_left_left_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_left;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_left;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_left_left;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_left_left;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_left_left;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_left_left;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_left_left;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_left;\n\
    \    long collision_left_left_left_left_left_left_\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2gvu9qd_.d(59): Error: semicolon expected, not `unittest`\n/tmp/tmp2gvu9qd_.d(59):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2gvu9qd_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k;\n\
    \    long collisions = 0;\n    for(i=0;i<n;i++) {\n        for(j=i+1;j<n;j++)\
    \ {\n            for(k=j+1;k<n;k++) {\n                if(std.hypot(car_position(i,j),car_position(i,k))<std.hypot(car_position(i,k),car_position(j,k)))\n\
    \                    collisions++;\n            }\n        }\n    }\n    return\
    \ collisions;\n}\n/*\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcqt41aox.d(29): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpcqt41aox.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy3w2azh_.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpy3w2azh_.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy3w2azh_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_i;\n    long collision_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj9vlhb34.d(89): Error: semicolon expected, not `unittest`\n/tmp/tmpj9vlhb34.d(89):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpj9vlhb34.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collisions = 0;\n    long car_collisions = 0;\n    long car_collisions_left\
    \ = 0;\n    long car_collisions_right = 0;\n    long car_collisions_left_right\
    \ = 0;\n    long car_collisions_left_left = 0;\n    long car_collisions_right_left\
    \ = 0;\n    long car_collisions_right_right = 0;\n    long car_collisions_left_right_left\
    \ = 0;\n    long car_collisions_left_left_right = 0;\n    long car_collisions_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_left_right_right = 0;\n    long car_collisions_right_left_left_right\
    \ = 0;\n    long car_collisions_right_right_left_right = 0;\n    long car_collisions_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_left_right_right_right = 0;\n    long car_collisions_right_left_left_right_right\
    \ = 0;\n    long car_collisions_right_right_left_right_right = 0;\n    long car_collisions_left_right_left_right_right_right\
    \ = 0;\n    long car_collisions_left_left_right_right_right_right = 0;\n    long\
    \ car_collisions_right_left_left_right_right_right = 0;\n    long car_collisions_right_right_left_right_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_right_right_right = 0;\n\
    \    long car_collisions_left_left_right_right_right_right_right = 0;\n    long\
    \ car_collisions_right_left_left_right_right_right_right = 0;\n    long car_collisions_right_right_left_right_right_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_left_left_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_right_left_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_left_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_right_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_left_left_right_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_right_left_right_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_right_right_right_right_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpza90ts3o.d(56): Error: semicolon expected, not `unittest`\n/tmp/tmpza90ts3o.d(56):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpza90ts3o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_left = 0;\n    long car_collisions_right_left = 0;\n   \
    \ long car_collisions_right_right = 0;\n    long car_collisions_left_left_right\
    \ = 0;\n    long car_collisions_left_right_left = 0;\n    long car_collisions_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left = 0;\n    long car_collisions_left_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_left = 0;\n    long car_collisions_right_left_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left = 0;\n    long car_collisions_left_left_right_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_left = 0;\n    long car_collisions_right_left_left_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_left = 0;\n    long car_collisions_left_left_right_left_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_left_left = 0;\n    long\
    \ car_collisions_right_left_left_left_left_left = 0;\n    long car_collisions_right_right_left_left_left_left\
    \ = 0;\n    long car_collisions_left_left_right_left_left_left_left = 0;\n   \
    \ long car_collisions_left_right_left_left_left_left_left = 0;\n    long car_collisions_right_left_left_left_left_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_left_left_left = 0;\n  \
    \  long car_collisions_left_left_right_left_left_left_left_left = 0;\n    long\
    \ car_collisions_left_right_left_left_left_left_left_left = 0;\n    long car_collisions_right_left_left_left_left_left_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_left_left_left_left = 0;\n\
    \    long car_collisions_left_left_right_left_left_left_left_left = 0;\n    long\
    \ car_collisions_left_right_left_left_left_left_left_left = 0;\n    long car_collisions_right_left_left_left_left_left_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_left_left_left_left = 0;\n\
    \    long car_collisions_left_left_right_left_left_left_left_left_left = 0;\n\
    \    long car_collisions_left_right_left_left_left_left_left_left = 0;\n    long\
    \ car_collisions_right_left_left_left_left_left_left_left = 0;\n    long car\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4npynnxk.d(57): Error: semicolon expected, not `unittest`\n/tmp/tmp4npynnxk.d(57):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4npynnxk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_total;\n    long collision_distance_total_i;\n  \
    \  long collision_distance_total_j;\n    long collision_distance_total_k;\n  \
    \  long collision_distance_total_total;\n    long collision_distance_total_total_i;\n\
    \    long collision_distance_total_total_j;\n    long collision_distance_total_total_k;\n\
    \    long collision_distance_total_total_total;\n    long collision_distance_total_total_total_i;\n\
    \    long collision_distance_total_total_total_j;\n    long collision_distance_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total;\n    long collision_distance_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_j;\n    long collision_distance_total_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total_total;\n    long collision_distance_total_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_total_j;\n    long collision_distance_total_total_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total_total_total;\n    long collision_distance_total_total_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_total_total_j;\n    long\
    \ collision_distance_total_total_total_total_total_total_k;\n    long collision_distance_total_total_total_total_total_total_total;\n\
    \    long collision_distance_total_total_total_total_total_total_total_i;\n  \
    \  long collision_distance_total_total_total_total_total_total_j;\n    long collision_distance_total_total_total_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total_total_total_total;\n    long\
    \ collision_distance_total_total_total_total_total_total_total_i;\n    long collision_distance_total_total_total_total_total_total_total_j;\n\
    \    long collision_distance_total_total_total_total_total_total_total_k;\n  \
    \  long collision_distance_total_total_total_total_total_total_total_total;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_j;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total;\n\
    \    long collision_distance_total_total_total_total_total_total_total_\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9ff564hv.d(64): Error: semicolon expected, not `unittest`\n/tmp/tmp9ff564hv.d(64):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp9ff564hv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_left;\n\
    \    long collision_right;\n    long collision_left_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_right_right;\n    long collision_left_left_right;\n\
    \    long collision_left_left_left;\n    long collision_right_left_left;\n   \
    \ long collision_right_left_right;\n    long collision_left_right_left;\n    long\
    \ collision_left_right_right;\n    long collision_right_right_left;\n    long\
    \ collision_right_right_right;\n    long collision_left_left_left_right;\n   \
    \ long collision_left_left_left_left;\n    long collision_right_left_left_left;\n\
    \    long collision_right_left_left_right;\n    long collision_left_right_left_left;\n\
    \    long collision_left_right_left_right;\n    long collision_right_right_left_left;\n\
    \    long collision_right_right_left_right;\n    long collision_left_right_right_left;\n\
    \    long collision_left_right_right_right;\n    long collision_right_right_right_left;\n\
    \    long collision_right_right_right_right;\n    long collision_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left;\n    long collision_right_left_left_left_left;\n\
    \    long collision_right_left_left_left_right;\n    long collision_left_right_left_left_left;\n\
    \    long collision_left_right_left_left_right;\n    long collision_right_right_left_left_left;\n\
    \    long collision_right_right_left_left_right;\n    long collision_left_right_right_left_left;\n\
    \    long collision_left_right_right_left_right;\n    long collision_right_right_right_left_left;\n\
    \    long collision_right_right_right_left_right;\n    long collision_left_right_right_right_left;\n\
    \    long collision_left_right_right_right_right;\n    long collision_right_right_right_right_left;\n\
    \    long collision_right_right_right_right_right;\n    long collision_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left;\n    long collision_right_left_left_left_left;\n\
    \    long collision_right_left_left_left_right;\n    long collision_left_right_left_left_left;\n\
    \    long collision_left_right_left_left_right;\n    long collision_right_right_left_left_left;\n\
    \    long collision_right_right_left_left_right;\n    long collision_left_right_right_left_left;\n\
    \    long collision_left_right_right_left_right;\n    long collision_right_right_right_left_left;\n\
    \    long collision_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhnkafpk.d(76): Error: semicolon expected, not `unittest`\n/tmp/tmpnhnkafpk.d(76):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnhnkafpk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long collisions = 0;\n    long collisions_left =\
    \ 0;\n    long collisions_right = 0;\n    long collisions_left_right = 0;\n  \
    \  long collisions_left_left = 0;\n    long collisions_right_left = 0;\n    long\
    \ collisions_right_right = 0;\n    long collisions_left_left_right = 0;\n    long\
    \ collisions_left_right_left = 0;\n    long collisions_right_left_left = 0;\n\
    \    long collisions_right_right_left = 0;\n    long collisions_left_left_right_left\
    \ = 0;\n    long collisions_left_right_left_left = 0;\n    long collisions_right_left_left_left\
    \ = 0;\n    long collisions_right_right_left_left = 0;\n    long collisions_left_left_right_left_left\
    \ = 0;\n    long collisions_left_right_left_left_left = 0;\n    long collisions_right_left_left_left_left\
    \ = 0;\n    long collisions_right_right_left_left_left = 0;\n    long collisions_left_left_right_left_left_left\
    \ = 0;\n    long collisions_left_right_left_left_left_left = 0;\n    long collisions_right_left_left_left_left_left\
    \ = 0;\n    long collisions_right_right_left_left_left_left = 0;\n    long collisions_left_left_right_left_left_left_left\
    \ = 0;\n    long collisions_left_right_left_left_left_left_left = 0;\n    long\
    \ collisions_right_left_left_left_left_left_left = 0;\n    long collisions_right_right_left_left_left_left_left\
    \ = 0;\n    long collisions_left_left_right_left_left_left_left_left = 0;\n  \
    \  long collisions_left_right_left_left_left_left_left_left = 0;\n    long collisions_right_left_left_left_left_left_left_left_left\
    \ = 0;\n    long collisions_right_right_left_left_left_left_left_left = 0;\n \
    \   long collisions_left_left_right_left_left_left_left_left_left = 0;\n    long\
    \ collisions_left_right_left_left_left_left_left_left_left = 0;\n    long collisions_right_left_left_left_left_left_left_left_left\
    \ = 0;\n    long collisions_right_right_left_left_left_left_left_left_left = 0;\n\
    \    long collisions_left_left_right_left_left_left_left_left_left = 0;\n    long\
    \ collisions_left_right_left_left_left_left_left_left_left = 0;\n    long collisions_right_left_left_left_left_left_left_left_left\
    \ = 0;\n    long collisions_right_right_left_left_left_left_left_left = 0;\n \
    \   long collisions_left_left_right_left_left_left_left_left_left = 0;\n    long\
    \ collisions_left_right_left_left_left_left_left_left = 0;\n    long collisions_right_left_left_left_left_left_left\
    \ = 0;\n    long collisions_right_right_left_left_\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi2eiodfl.d(63): Error: semicolon expected, not `unittest`\n/tmp/tmpi2eiodfl.d(63):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi2eiodfl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_total = 0;\n   \
    \ long car_collisions_total_max = 0;\n    long car_collisions_total_min = 0;\n\
    \    long car_collisions_total_max2 = 0;\n    long car_collisions_total_min2 =\
    \ 0;\n    long car_collisions_total_max3 = 0;\n    long car_collisions_total_min3\
    \ = 0;\n    long car_collisions_total_max4 = 0;\n    long car_collisions_total_min4\
    \ = 0;\n    long car_collisions_total_max5 = 0;\n    long car_collisions_total_min5\
    \ = 0;\n    long car_collisions_total_max6 = 0;\n    long car_collisions_total_min6\
    \ = 0;\n    long car_collisions_total_max7 = 0;\n    long car_collisions_total_min7\
    \ = 0;\n    long car_collisions_total_max8 = 0;\n    long car_collisions_total_min8\
    \ = 0;\n    long car_collisions_total_max9 = 0;\n    long car_collisions_total_min9\
    \ = 0;\n    long car_collisions_total_max10 = 0;\n    long car_collisions_total_min10\
    \ = 0;\n    long car_collisions_total_max11 = 0;\n    long car_collisions_total_min11\
    \ = 0;\n    long car_collisions_total_max12 = 0;\n    long car_collisions_total_min12\
    \ = 0;\n    long car_collisions_total_max13 = 0;\n    long car_collisions_total_min13\
    \ = 0;\n    long car_collisions_total_max14 = 0;\n    long car_collisions_total_min14\
    \ = 0;\n    long car_collisions_total_max15 = 0;\n    long car_collisions_total_min15\
    \ = 0;\n    long car_collisions_total_max16 = 0;\n    long car_collisions_total_min16\
    \ = 0;\n    long car_collisions_total_max17 = 0;\n    long car_collisions_total_min17\
    \ = 0;\n    long car_collisions_total_max18 = 0;\n    long car_collisions_total_min18\
    \ = 0;\n    long car_collisions_total_max19 = 0;\n    long car_collisions_total_min19\
    \ = 0;\n    long car_collisions_total_max20 = 0;\n    long car_collisions_total_min20\
    \ = 0;\n    long car_collisions_total_max21 = 0;\n    long car_collisions_total_min21\
    \ = 0;\n    long car_collisions_total_max22 = 0;\n    long car_collisions_total_min22\
    \ = 0;\n    long car_collisions_total_max23 = 0;\n    long car_\nunittest\n{\n\
    \    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt1fwpost.d(66): Error: semicolon expected, not `unittest`\n/tmp/tmpt1fwpost.d(66):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpt1fwpost.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long collisions = 0;\n    long car_collisions = 0;\n    long car_collisions_left\
    \ = 0;\n    long car_collisions_right = 0;\n    long car_collisions_left_right\
    \ = 0;\n    long car_collisions_right_left = 0;\n    long car_collisions_left_left_right\
    \ = 0;\n    long car_collisions_right_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left = 0;\n    long car_collisions_left_right_right_left_right\
    \ = 0;\n    long car_collisions_right_left_left_right_left_right = 0;\n    long\
    \ car_collisions_left_right_right_left_right_left = 0;\n    long car_collisions_right_left_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_right_left_right_left_right = 0;\n\
    \    long car_collisions_right_left_left_right_left_right_left_right = 0;\n  \
    \  long car_collisions_left_right_right_left_right_left_right_left = 0;\n    long\
    \ car_collisions_right_left_left_right_left_right_left_right_left = 0;\n    long\
    \ car_collisions_left_right_right_left_right_left_right_left_right = 0;\n    long\
    \ car_collisions_right_left_left_right_left_right_left_right_left_right = 0;\n\
    \    long car_collisions_left_right_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_right_left_right_left_right_left_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0_fnfir4.d(51): Error: semicolon expected, not `unittest`\n/tmp/tmp0_fnfir4.d(51):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0_fnfir4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy3w2azh_.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpy3w2azh_.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy3w2azh_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_total;\n    long collision_distance_total_i;\n  \
    \  long collision_distance_total_j;\n    long collision_distance_total_k;\n  \
    \  long collision_distance_total_total;\n    long collision_distance_total_total_i;\n\
    \    long collision_distance_total_total_j;\n    long collision_distance_total_total_k;\n\
    \    long collision_distance_total_total_total;\n    long collision_distance_total_total_total_i;\n\
    \    long collision_distance_total_total_total_j;\n    long collision_distance_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total;\n    long collision_distance_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_j;\n    long collision_distance_total_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total_total;\n    long collision_distance_total_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_total_j;\n    long collision_distance_total_total_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total_total_total;\n    long collision_distance_total_total_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_total_total_j;\n    long\
    \ collision_distance_total_total_total_total_total_total_k;\n    long collision_distance_total_total_total_total_total_total_total;\n\
    \    long collision_distance_total_total_total_total_total_total_total_i;\n  \
    \  long collision_distance_total_total_total_total_total_total_j;\n    long collision_distance_total_total_total_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total_total_total_total;\n    long\
    \ collision_distance_total_total_total_total_total_total_total_i;\n    long collision_distance_total_total_total_total_total_total_total_j;\n\
    \    long collision_distance_total_total_total_total_total_total_total_k;\n  \
    \  long collision_distance_total_total_total_total_total_total_total_total;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_j;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_total;\n\
    \    long collision_distance_total_total_total_total_total_total_\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwwxvkfow.d(64): Error: semicolon expected, not `unittest`\n/tmp/tmpwwxvkfow.d(64):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpwwxvkfow.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy3w2azh_.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpy3w2azh_.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy3w2azh_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    for(i = 0; i < n; i++) {\n        long j;\n        for(j\
    \ = i + 1; j < n; j++) {\n            if(car_race_collision_helper(i, j)) {\n\
    \                collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwbqfh2w0.d(22): Error: undefined identifier `car_race_collision_helper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwbqfh2w0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision_distance64;\n\
    \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2y1wx832.d(86): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2y1wx832.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy3w2azh_.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpy3w2azh_.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy3w2azh_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_collision;\n    long collision_distance_collision_i;\n\
    \    long collision_distance_collision_j;\n    long collision_distance_collision_k;\n\
    \    long collision_distance_collision_collision;\n    long collision_distance_collision_collision_i;\n\
    \    long collision_distance_collision_collision_j;\n    long collision_distance_collision_collision_k;\n\
    \    long collision_distance_collision_collision_collision;\n    long collision_distance_collision_collision_collision_i;\n\
    \    long collision_distance_collision_collision_collision_j;\n    long collision_distance_collision_collision_collision_k;\n\
    \    long collision_distance_collision_collision_collision_collision;\n    long\
    \ collision_distance_collision_collision_collision_collision_i;\n    long collision_distance_collision_collision_collision_collision_j;\n\
    \    long collision_distance_collision_collision_collision_collision_k;\n    long\
    \ collision_distance_collision_collision_collision_collision_collision;\n    long\
    \ collision_distance_collision_collision_collision_collision_i;\n    long collision_distance_collision_collision_collision_collision_j;\n\
    \    long collision_distance_collision_collision_collision_collision_k;\n    long\
    \ collision_distance_collision_collision_collision_collision_collision;\n    long\
    \ collision_distance_collision_collision_collision_collision_collision_i;\n  \
    \  long collision_distance_collision_collision_collision_collision_collision_j;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_k;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_collision;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_i;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_j;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_k;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_collision;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_collision_i;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_collision_j;\n\
    \    long collision_distance_collision_collision_collision_collision_collision_collision_k\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdwz7osqr.d(58): Error: semicolon expected, not `unittest`\n/tmp/tmpdwz7osqr.d(58):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpdwz7osqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collisions = 0;\n    long car_collisions = 0;\n    long car_collisions_total\
    \ = 0;\n    long car_collisions_total_2 = 0;\n    long car_collisions_total_3\
    \ = 0;\n    long car_collisions_total_4 = 0;\n    long car_collisions_total_5\
    \ = 0;\n    long car_collisions_total_6 = 0;\n    long car_collisions_total_7\
    \ = 0;\n    long car_collisions_total_8 = 0;\n    long car_collisions_total_9\
    \ = 0;\n    long car_collisions_total_10 = 0;\n    long car_collisions_total_11\
    \ = 0;\n    long car_collisions_total_12 = 0;\n    long car_collisions_total_13\
    \ = 0;\n    long car_collisions_total_14 = 0;\n    long car_collisions_total_15\
    \ = 0;\n    long car_collisions_total_16 = 0;\n    long car_collisions_total_17\
    \ = 0;\n    long car_collisions_total_18 = 0;\n    long car_collisions_total_19\
    \ = 0;\n    long car_collisions_total_20 = 0;\n    long car_collisions_total_21\
    \ = 0;\n    long car_collisions_total_22 = 0;\n    long car_collisions_total_23\
    \ = 0;\n    long car_collisions_total_24 = 0;\n    long car_collisions_total_25\
    \ = 0;\n    long car_collisions_total_26 = 0;\n    long car_collisions_total_27\
    \ = 0;\n    long car_collisions_total_28 = 0;\n    long car_collisions_total_29\
    \ = 0;\n    long car_collisions_total_30 = 0;\n    long car_collisions_total_31\
    \ = 0;\n    long car_collisions_total_32 = 0;\n    long car_collisions_total_33\
    \ = 0;\n    long car_collisions_total_34 = 0;\n    long car_collisions_total_35\
    \ = 0;\n    long car_collisions_total_36 = 0;\n    long car_collisions_total_37\
    \ = 0;\n    long car_collisions_total_38 = 0;\n    long car_collisions_total_39\
    \ = 0;\n    long car_collisions_total_40 = 0;\n    long car_collisions_total_41\
    \ = 0;\n    long car_collisions_total_42 = 0;\n    long car_collisions_total_43\
    \ = 0;\n    long car_collisions_total_44 = 0;\n    long car_collisions_total_45\
    \ = 0;\n    long car_collisions_total_46 = 0;\n    long car_collisions_total_47\
    \ = 0;\n    long car_collisions_total_48 = 0;\n    long car_collisions_total_49\
    \ = 0;\n    long car_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3i2_33y6.d(70): Error: semicolon expected, not `unittest`\n/tmp/tmp3i2_33y6.d(70):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3i2_33y6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q;\n\
    \    long car_x, car_y, car_z, car_a, car_b;\n    long car_x_i, car_y_i, car_z_i,\
    \ car_a_i, car_b_i;\n    long car_x_j, car_y_j, car_z_j, car_a_j, car_b_j;\n \
    \   long car_x_k, car_y_k, car_z_k, car_a_k, car_b_k;\n    long car_x_l, car_y_l,\
    \ car_z_l, car_a_l, car_b_l;\n    long car_x_m, car_y_m, car_z_m, car_a_m, car_b_m;\n\
    \    long car_x_n, car_y_n, car_z_n, car_a_n, car_b_n;\n    long car_x_o, car_y_o,\
    \ car_z_o, car_a_o, car_b_o;\n    long car_x_p, car_y_p, car_z_p, car_a_p, car_b_p;\n\
    \    long car_x_q, car_y_q, car_z_q, car_a_q, car_b_q;\n    long car_x_r, car_y_r,\
    \ car_z_r, car_a_r, car_b_r;\n    long car_x_s, car_y_s, car_z_s, car_a_s, car_b_s;\n\
    \    long car_x_t, car_y_t, car_z_t, car_a_t, car_b_t;\n    long car_x_u, car_y_u,\
    \ car_z_u, car_a_u, car_b_u;\n    long car_x_v, car_y_v, car_z_v, car_a_v, car_b_v;\n\
    \    long car_x_w, car_y_w, car_z_w, car_a_w, car_b_w;\n    long car_x_x, car_y_x,\
    \ car_z_x, car_a_x, car_b_x;\n    long car_x_y, car_y_y, car_z_y, car_a_y, car_b_y;\n\
    \    long car_x_z, car_y_z, car_z_z, car_a_z, car_b_z;\n    long car_x_a, car_y_a,\
    \ car_z_a, car_a_a, car_b_a;\n    long car_x_b, car_y_b, car_z_b, car_\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq84bg28w.d(40): Error: semicolon expected, not `unittest`\n/tmp/tmpq84bg28w.d(40):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpq84bg28w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_right_left = 0;\n    long car_collisions_left_left_right = 0;\n\
    \    long car_collisions_right_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left = 0;\n    long car_collisions_left_right_left_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left_left = 0;\n    long car_collisions_left_right_left_left_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left_left_left = 0;\n    long\
    \ car_collisions_left_right_left_left_left_right_right = 0;\n    long car_collisions_right_left_right_left_left_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_left_right_right_left = 0;\n\
    \    long car_collisions_right_left_right_left_left_left_left = 0;\n    long car_collisions_left_right_left_left_right_right_left_left\
    \ = 0;\n    long car_collisions_right_left_right_left_left_left_right_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_left_right_left_left_right\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_right_left_right_left_right_\nunittest\n{\n  \
    \  alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphvvl_odm.d(53): Error: semicolon expected, not `unittest`\n/tmp/tmphvvl_odm.d(53):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphvvl_odm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l,m,n;\n\
    \    long collisions = 0;\n    long car_collisions = 0;\n    long car_collisions_left\
    \ = 0;\n    long car_collisions_right = 0;\n    long car_collisions_left_right\
    \ = 0;\n    long car_collisions_left_left_right = 0;\n    long car_collisions_left_right_left\
    \ = 0;\n    long car_collisions_right_left = 0;\n    long car_collisions_right_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right = 0;\n    long car_collisions_left_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_left_right = 0;\n    long car_collisions_right_left_left\
    \ = 0;\n    long car_collisions_right_left_left_left = 0;\n    long car_collisions_right_left_left_left_right\
    \ = 0;\n    long car_collisions_right_right_left = 0;\n    long car_collisions_right_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_right = 0;\n    long car_collisions_left_right_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_right = 0;\n    long car_collisions_left_left_right_left\
    \ = 0;\n    long car_collisions_left_left_right_left_right = 0;\n    long car_collisions_left_right_left_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right = 0;\n \
    \   long car_collisions_right_left_left_left = 0;\n    long car_collisions_right_left_left_left\
    \ = 0;\n    long car_collisions_right_left_left_left_right = 0;\n    long car_collisions_right_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_right = 0;\n    long car_collisions_right_right_left_left_right_left\
    \ = 0;\n    long car_collisions_right_right_left_left_right_left_right = 0;\n\
    \    long car_collisions_left_right_left_left = 0;\n    long car_collisions_left_right_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_right = 0;\n    long car_collisions_left_right_left_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right = 0;\n \
    \   long car_collisions_right_left_left_left_right = 0;\n    long car_collisions_right_left_left_left_right\
    \ = 0;\n    long car_collisions_right_left_left_left_right_left = 0;\n    long\
    \ car_collisions_right_right_left_left_right = 0;\n    long car_collisions_right_right_left_left_right_left\
    \ = 0;\n    long car_collisions_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjwwtcp05.d(60): Error: semicolon expected, not `unittest`\n/tmp/tmpjwwtcp05.d(60):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjwwtcp05.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k;\n\
    \    long collisions = 0;\n    long car_collisions = 0;\n    long car_collisions_left\
    \ = 0;\n    long car_collisions_right = 0;\n    long car_collisions_left_right\
    \ = 0;\n    long car_collisions_left_right_left = 0;\n    long car_collisions_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right = 0;\n    long car_collisions_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_right = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_right = 0;\n    long\
    \ car_collisions_left_right_left_right_left_right_left_right = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8t3znlws.d(50): Error: semicolon expected, not `unittest`\n/tmp/tmp8t3znlws.d(50):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp8t3znlws.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_min;\n    long collision_distance_max;\n    long\
    \ collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_min;\n    long collision_distance_max;\n    long\
    \ collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_min;\n    long collision_distance_max;\n    long\
    \ collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_min;\n    long collision_distance_max;\n    long\
    \ collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_min;\n    long collision_distance_max;\n    long\
    \ collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_min;\n    long collision_distance_max;\n    long\
    \ collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_min;\n    long collision_distance_max;\n    long\
    \ collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_min;\n    long collision_distance_max;\n    long\
    \ collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_min;\n    long collision_distance_max;\n    long\
    \ collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_min;\n    long collision_distance_max;\n    long\
    \ collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_min;\n    long collision_distance_max;\n    long\
    \ collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_min;\n    long collision_distance_max;\n    long\
    \ collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpays9wtlm.d(87): Error: no identifier for declarator `long`\n/tmp/tmpays9wtlm.d(87):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpays9wtlm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    for(i = 0; i < n; i++) {\n        long j;\n        for(j\
    \ = i+1; j < n; j++) {\n            long collision = car_race_collision_helper(i,\
    \ j, n, &collisions);\n            if(collision != 0) {\n                return\
    \ collision;\n            }\n        }\n    }\n    return collisions;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmqfldqdh.d(22): Error: undefined identifier `car_race_collision_helper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmqfldqdh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long collisions = 0;\n    long car_distance;\n  \
    \  long car_speed;\n    long car_speed_left;\n    long car_speed_right;\n    long\
    \ car_speed_left_right;\n    long car_speed_left_left;\n    long car_speed_right_left;\n\
    \    long car_speed_right_right;\n    long car_speed_left_left_right;\n    long\
    \ car_speed_left_left_left;\n    long car_speed_right_left_left;\n    long car_speed_right_left_right;\n\
    \    long car_speed_left_right_left;\n    long car_speed_left_right_right;\n \
    \   long car_speed_left_left_left_right;\n    long car_speed_left_left_left_left;\n\
    \    long car_speed_right_left_left_left;\n    long car_speed_right_left_left_right;\n\
    \    long car_speed_left_right_left_left;\n    long car_speed_left_right_left_right;\n\
    \    long car_speed_left_left_right_left;\n    long car_speed_left_left_right_right;\n\
    \    long car_speed_left_right_right_left;\n    long car_speed_left_right_right_right;\n\
    \    long car_speed_right_left_right_left;\n    long car_speed_right_left_right_right;\n\
    \    long car_speed_right_right_left_left;\n    long car_speed_right_right_left_right;\n\
    \    long car_speed_right_right_right_left;\n    long car_speed_right_right_right_right;\n\
    \    long car_speed_left_left_left_left_right;\n    long car_speed_left_left_left_left_left;\n\
    \    long car_speed_right_left_left_left_left;\n    long car_speed_right_left_left_left_right;\n\
    \    long car_speed_right_left_left_right_left;\n    long car_speed_right_left_right_left_left;\n\
    \    long car_speed_right_left_right_left_right;\n    long car_speed_right_right_left_left_left;\n\
    \    long car_speed_right_right_left_left_left;\n    long car_speed_right_right_left_left_right;\n\
    \    long car_speed_right_right_left_right_left;\n    long car_speed_right_right_right_left_left;\n\
    \    long car_speed_right_right_right_left_right;\n    long car_speed_right_right_right_right_left;\n\
    \    long car_speed_right_right_right_right_right;\n    long car_speed_left_left_left_left_left_right;\n\
    \    long car_speed_left_left_left_left_left;\n    long car_speed_right_left_left_left_left;\n\
    \    long car_speed_right_left_left_left_right;\n    long car_speed_right_left_left_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw7783r5k.d(71): Error: semicolon expected, not `unittest`\n/tmp/tmpw7783r5k.d(71):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpw7783r5k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_left = 0;\n    long car_collisions_right_left = 0;\n   \
    \ long car_collisions_right_right = 0;\n    long car_collisions_left_left_right\
    \ = 0;\n    long car_collisions_left_right_left = 0;\n    long car_collisions_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left = 0;\n    long car_collisions_left_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_left = 0;\n    long car_collisions_right_left_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left = 0;\n    long car_collisions_left_left_right_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_left = 0;\n    long car_collisions_right_left_left_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_left = 0;\n    long car_collisions_left_left_right_left_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_left_left = 0;\n    long\
    \ car_collisions_right_left_left_left_left_left = 0;\n    long car_collisions_right_right_left_left_left_left\
    \ = 0;\n    long car_collisions_left_left_right_left_left_left_left = 0;\n   \
    \ long car_collisions_left_right_left_left_left_left_left = 0;\n    long car_collisions_right_left_left_left_left_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_left_left_left = 0;\n  \
    \  long car_collisions_left_left_right_left_left_left_left_left = 0;\n    long\
    \ car_collisions_left_right_left_left_left_left_left_left = 0;\n    long car_collisions_right_left_left_left_left_left_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_left_left_left_left = 0;\n\
    \    long car_collisions_left_left_right_left_left_left_left_left = 0;\n    long\
    \ car_collisions_left_right_left_left_left_left_left_left = 0;\n    long car_collisions_right_left_left_left_left_left_left_left\
    \ = 0;\n    long car_collisions_right_right_left_left_left_left_left_left = 0;\n\
    \    long car_collisions_left_left_right_left_left_left_left_left_left = 0;\n\
    \    long car_collisions_left_right_left_left_left_left_left_left = 0;\n    long\
    \ car_collisions_right_left_left_left_left_left_left_left = 0;\n    long car\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4npynnxk.d(57): Error: semicolon expected, not `unittest`\n/tmp/tmp4npynnxk.d(57):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4npynnxk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_left = 0;\n    long car_collisions_right_left = 0;\n   \
    \ long car_collisions_right_right = 0;\n    long car_collisions_left_right_left\
    \ = 0;\n    long car_collisions_left_left_right = 0;\n    long car_collisions_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left = 0;\n    long car_collisions_left_right_right_left\
    \ = 0;\n    long car_collisions_left_left_left_right = 0;\n    long car_collisions_right_left_left_right\
    \ = 0;\n    long car_collisions_right_right_left_right = 0;\n    long car_collisions_left_right_right_left_right\
    \ = 0;\n    long car_collisions_left_left_left_right_right = 0;\n    long car_collisions_right_left_left_right_right\
    \ = 0;\n    long car_collisions_right_right_left_right_right = 0;\n    long car_collisions_left_right_right_left_right_right\
    \ = 0;\n    long car_collisions_left_left_left_right_right_right = 0;\n    long\
    \ car_collisions_right_left_left_right_right_right = 0;\n    long car_collisions_right_right_left_right_right_right\
    \ = 0;\n    long car_collisions_left_right_right_left_right_right_right = 0;\n\
    \    long car_collisions_left_left_left_right_right_right_right = 0;\n    long\
    \ car_collisions_right_left_left_right_right_right_right = 0;\n    long car_collisions_right_right_left_right_right_right_right\
    \ = 0;\n    long car_collisions_left_right_right_left_right_right_right_right\
    \ = 0;\n    long car_collisions_left_left_left_right_right_right_right_right =\
    \ 0;\n    long car_collisions_right_left_left_right_right_right_right_right =\
    \ 0;\n    long car_collisions_right_right_left_right_right_right_right_right =\
    \ 0;\n    long car_collisions_left_right_right_left_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_left_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_left_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_right_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_right_right_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_left_left_right_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpei91w1bx.d(56): Error: semicolon expected, not `unittest`\n/tmp/tmpei91w1bx.d(56):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpei91w1bx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k;\n\
    \    long collisions = 0;\n    long car_collisions = 0;\n    long car_collisions_left\
    \ = 0;\n    long car_collisions_right = 0;\n    long car_collisions_left_right\
    \ = 0;\n    long car_collisions_left_left = 0;\n    long car_collisions_right_left\
    \ = 0;\n    long car_collisions_right_right = 0;\n    long car_collisions_left_right_left\
    \ = 0;\n    long car_collisions_left_left_right = 0;\n    long car_collisions_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_left_right_right = 0;\n    long car_collisions_right_left_left_right\
    \ = 0;\n    long car_collisions_right_right_left_right = 0;\n    long car_collisions_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_left_right_right_right = 0;\n    long car_collisions_right_left_left_right_right\
    \ = 0;\n    long car_collisions_right_right_left_right_right = 0;\n    long car_collisions_left_right_left_right_right_right\
    \ = 0;\n    long car_collisions_left_left_right_right_right_right = 0;\n    long\
    \ car_collisions_right_left_left_right_right_right = 0;\n    long car_collisions_right_right_left_right_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_right_right_right = 0;\n\
    \    long car_collisions_left_left_right_right_right_right_right = 0;\n    long\
    \ car_collisions_right_left_left_right_right_right_right = 0;\n    long car_collisions_right_right_left_right_right_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_left_left_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_right_left_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_left_left_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_right_left_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_left_left_right_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_right_left_right_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_right_right_right_right_right_right_right\
    \ = 0;\n\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5pmxn8rr.d(57): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5pmxn8rr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy3w2azh_.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpy3w2azh_.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy3w2azh_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collisions = 0;\n    long collision_sum = 0;\n    long collision_sum2\
    \ = 0;\n    long collision_sum3 = 0;\n    long collision_sum4 = 0;\n    long collision_sum5\
    \ = 0;\n    long collision_sum6 = 0;\n    long collision_sum7 = 0;\n    long collision_sum8\
    \ = 0;\n    long collision_sum9 = 0;\n    long collision_sum10 = 0;\n    long\
    \ collision_sum11 = 0;\n    long collision_sum12 = 0;\n    long collision_sum13\
    \ = 0;\n    long collision_sum14 = 0;\n    long collision_sum15 = 0;\n    long\
    \ collision_sum16 = 0;\n    long collision_sum17 = 0;\n    long collision_sum18\
    \ = 0;\n    long collision_sum19 = 0;\n    long collision_sum20 = 0;\n    long\
    \ collision_sum21 = 0;\n    long collision_sum22 = 0;\n    long collision_sum23\
    \ = 0;\n    long collision_sum24 = 0;\n    long collision_sum25 = 0;\n    long\
    \ collision_sum26 = 0;\n    long collision_sum27 = 0;\n    long collision_sum28\
    \ = 0;\n    long collision_sum29 = 0;\n    long collision_sum30 = 0;\n    long\
    \ collision_sum31 = 0;\n    long collision_sum32 = 0;\n    long collision_sum33\
    \ = 0;\n    long collision_sum34 = 0;\n    long collision_sum35 = 0;\n    long\
    \ collision_sum36 = 0;\n    long collision_sum37 = 0;\n    long collision_sum38\
    \ = 0;\n    long collision_sum39 = 0;\n    long collision_sum40 = 0;\n    long\
    \ collision_sum41 = 0;\n    long collision_sum42 = 0;\n    long collision_sum43\
    \ = 0;\n    long collision_sum44 = 0;\n    long collision_sum45 = 0;\n    long\
    \ collision_sum46 = 0;\n    long collision_sum47 = 0;\n    long collision_sum48\
    \ = 0;\n    long collision_sum49 = 0;\n    long collision_sum50 = 0;\n    long\
    \ collision_sum51 = 0;\n    long collision_sum52 = 0;\n    long collision_sum53\
    \ = 0;\n    long collision_sum54 = 0;\n    long collision_sum55 = 0;\n    long\
    \ collision_sum56 = 0;\n    long collision_sum57 = 0;\n    long collision_sum58\
    \ = 0;\n    long collision_sum59 = 0;\n    long collision_sum60 = 0;\n    long\
    \ collision_sum61 = 0;\n    long collision_sum62 = 0;\n    long collision_sum\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxpz8gtr9.d(82): Error: semicolon expected, not `unittest`\n/tmp/tmpxpz8gtr9.d(82):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpxpz8gtr9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collisions = 0;\n    long collision_counter = 0;\n    long\
    \ collision_counter2 = 0;\n    long collision_counter3 = 0;\n    long collision_counter4\
    \ = 0;\n    long collision_counter5 = 0;\n    long collision_counter6 = 0;\n \
    \   long collision_counter7 = 0;\n    long collision_counter8 = 0;\n    long collision_counter9\
    \ = 0;\n    long collision_counter10 = 0;\n    long collision_counter11 = 0;\n\
    \    long collision_counter12 = 0;\n    long collision_counter13 = 0;\n    long\
    \ collision_counter14 = 0;\n    long collision_counter15 = 0;\n    long collision_counter16\
    \ = 0;\n    long collision_counter17 = 0;\n    long collision_counter18 = 0;\n\
    \    long collision_counter19 = 0;\n    long collision_counter20 = 0;\n    long\
    \ collision_counter21 = 0;\n    long collision_counter22 = 0;\n    long collision_counter23\
    \ = 0;\n    long collision_counter24 = 0;\n    long collision_counter25 = 0;\n\
    \    long collision_counter26 = 0;\n    long collision_counter27 = 0;\n    long\
    \ collision_counter28 = 0;\n    long collision_counter29 = 0;\n    long collision_counter30\
    \ = 0;\n    long collision_counter31 = 0;\n    long collision_counter32 = 0;\n\
    \    long collision_counter33 = 0;\n    long collision_counter34 = 0;\n    long\
    \ collision_counter35 = 0;\n    long collision_counter36 = 0;\n    long collision_counter37\
    \ = 0;\n    long collision_counter38 = 0;\n    long collision_counter39 = 0;\n\
    \    long collision_counter40 = 0;\n    long collision_counter41 = 0;\n    long\
    \ collision_counter42 = 0;\n    long collision_counter43 = 0;\n    long collision_counter44\
    \ = 0;\n    long collision_counter45 = 0;\n    long collision_counter46 = 0;\n\
    \    long collision_counter47 = 0;\n    long collision_counter48 = 0;\n    long\
    \ collision_counter49 = 0;\n    long collision_counter50 = 0;\n    long collision_counter51\
    \ = 0;\n    long collision_counter52 = 0;\n    long collision_counter53 = 0;\n\
    \    long collision_counter54 = 0;\n    long collision_counter55 = 0;\n    long\
    \ collision_counter56 = 0;\n    long collision_counter57 = 0;\n    long collision_counter58\
    \ = 0;\n    long collision_counter59 = 0;\n    long collision_counter60 = 0;\n\
    \    long collision_counter61 = 0;\n    long collision_counter62 = 0;\n    long\
    \ collision_counter\nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxrotks7j.d(82): Error: semicolon expected, not `unittest`\n/tmp/tmpxrotks7j.d(82):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpxrotks7j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_left;\n\
    \    long collision_right;\n    long collision_left_right;\n    long collision_left_left;\n\
    \    long collision_left_left_right;\n    long collision_left_left_left_right;\n\
    \    long collision_left_left_left_left_right;\n    long collision_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_right;\n    long collision_left_left_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_right;\n    long collision_left_left_left_left_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_right_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_right_right_right;\n\
    \    long collision_left_left_left_left_left_left_left_right_right_right_right;\n\
    \    long collision_left_left_left_left_left_right_right_right_right_right;\n\
    \    long collision_left_left_left_right_right_right_right_right;\n    long collision_left_left_right_right_right_right_right;\n\
    \    long collision_left_right_right_right_right_right;\n    long collision_left_right_right_right_right_right_right;\n\
    \    long collision_left_right_right_right_right_right_right_right;\n    long\
    \ collision_left_right_right_right_right_right_right_right_right_right;\n    long\
    \ collision_left_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3l6phhne.d(46): Error: semicolon expected, not `unittest`\n/tmp/tmp3l6phhne.d(46):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3l6phhne.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_left;\n\
    \    long collision_right;\n    long collision_left_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_right_right;\n    long collision_left_left_right;\n\
    \    long collision_left_left_left;\n    long collision_right_left_left;\n   \
    \ long collision_right_left_right;\n    long collision_left_right_left;\n    long\
    \ collision_left_right_right;\n    long collision_right_right_left;\n    long\
    \ collision_right_right_right;\n    long collision_left_left_left_right;\n   \
    \ long collision_left_left_left_left;\n    long collision_right_left_left_left;\n\
    \    long collision_right_left_left_right;\n    long collision_left_right_left_left;\n\
    \    long collision_left_right_left_right;\n    long collision_right_right_left_left;\n\
    \    long collision_right_right_left_right;\n    long collision_left_right_right_left;\n\
    \    long collision_left_right_right_right;\n    long collision_right_right_right_left;\n\
    \    long collision_right_right_right_right;\n    long collision_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left;\n    long collision_right_left_left_left_left;\n\
    \    long collision_right_left_left_left_right;\n    long collision_left_right_left_left_left;\n\
    \    long collision_left_right_left_left_right;\n    long collision_right_right_left_left_left;\n\
    \    long collision_right_right_left_left_right;\n    long collision_left_right_right_left_left;\n\
    \    long collision_left_right_right_left_right;\n    long collision_right_right_right_left_left;\n\
    \    long collision_right_right_right_left_right;\n    long collision_left_right_right_right_left;\n\
    \    long collision_left_right_right_right_right;\n    long collision_right_right_right_right_left;\n\
    \    long collision_right_right_right_right_right;\n    long collision_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left;\n    long collision_right_left_left_left_left;\n\
    \    long collision_right_left_left_left_right;\n    long collision_left_right_left_left_left;\n\
    \    long collision_left_right_left_left_right;\n    long collision_right_right_left_left_left;\n\
    \    long collision_right_right_left_left_right;\n    long collision_left_right_right_left_left;\n\
    \    long collision_left_right_right_left_right;\n    long collision_right_right_right_left_left;\n\
    \    long collision_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhnkafpk.d(76): Error: semicolon expected, not `unittest`\n/tmp/tmpnhnkafpk.d(76):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnhnkafpk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision_distance64;\n\
    \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2y1wx832.d(86): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2y1wx832.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_left = 0;\n    long car_collisions_right_left = 0;\n   \
    \ long car_collisions_right_right = 0;\n    long car_collisions_left_right_left\
    \ = 0;\n    long car_collisions_left_left_right = 0;\n    long car_collisions_right_left_left\
    \ = 0;\n    long car_collisions_right_right_left = 0;\n    long car_collisions_left_right_right_left\
    \ = 0;\n    long car_collisions_left_left_left_right = 0;\n    long car_collisions_right_left_left_right\
    \ = 0;\n    long car_collisions_right_right_left_right = 0;\n    long car_collisions_left_right_right_left_right\
    \ = 0;\n    long car_collisions_left_left_left_right_right = 0;\n    long car_collisions_right_left_left_right_right\
    \ = 0;\n    long car_collisions_right_right_left_right_right = 0;\n    long car_collisions_left_right_right_left_right_right\
    \ = 0;\n    long car_collisions_left_left_left_right_right_right = 0;\n    long\
    \ car_collisions_right_left_left_right_right_right = 0;\n    long car_collisions_right_right_left_right_right_right\
    \ = 0;\n    long car_collisions_left_right_right_left_right_right_right = 0;\n\
    \    long car_collisions_left_left_left_right_right_right_right = 0;\n    long\
    \ car_collisions_right_left_left_right_right_right_right = 0;\n    long car_collisions_right_right_left_right_right_right_right\
    \ = 0;\n    long car_collisions_left_right_right_left_right_right_right_right\
    \ = 0;\n    long car_collisions_left_left_left_right_right_right_right_right =\
    \ 0;\n    long car_collisions_right_left_left_right_right_right_right_right =\
    \ 0;\n    long car_collisions_right_right_left_right_right_right_right_right =\
    \ 0;\n    long car_collisions_left_right_right_left_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_left_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_left_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_right_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_right_right_left_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_left_left_left_right_right_right_right_right_right_right_right\
    \ = 0;\n    long car_collisions_right_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpei91w1bx.d(56): Error: semicolon expected, not `unittest`\n/tmp/tmpei91w1bx.d(56):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpei91w1bx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collisions = 0;\n    long car_collisions = 0;\n    long car_collisions_left\
    \ = 0;\n    long car_collisions_right = 0;\n    long car_collisions_left_right\
    \ = 0;\n    long car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdr4r7gih.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpdr4r7gih.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpdr4r7gih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    for(i = 0; i < n; i++) {\n        long j;\n        for(j\
    \ = i + 1; j < n; j++) {\n            long collision = car_race_collision_helper(i,\
    \ j);\n            if(collision != 0) {\n                collisions++;\n     \
    \       }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa4i44wql.d(22): Error: undefined identifier `car_race_collision_helper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa4i44wql.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    for(i = 0; i < n; i++) {\n        long j;\n        for(j\
    \ = i + 1; j < n; j++) {\n            long collide = car_race_collision_helper(i,\
    \ j);\n            if(collide) {\n                collisions++;\n            }\n\
    \        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzop80y5t.d(22): Error: undefined identifier `car_race_collision_helper`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzop80y5t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q;\n\
    \    long car_x, car_y, car_z;\n    long car_x_i, car_y_i, car_z_i;\n    long\
    \ car_x_j, car_y_j, car_z_j;\n    long car_x_k, car_y_k, car_z_k;\n    long car_x_l,\
    \ car_y_l, car_z_l;\n    long car_x_m, car_y_m, car_z_m;\n    long car_x_n, car_y_n,\
    \ car_z_n;\n    long car_x_o, car_y_o, car_z_o;\n    long car_x_p, car_y_p, car_z_p;\n\
    \    long car_x_q, car_y_q, car_z_q;\n    long car_x_r, car_y_r, car_z_r;\n  \
    \  long car_x_s, car_y_s, car_z_s;\n    long car_x_t, car_y_t, car_z_t;\n    long\
    \ car_x_u, car_y_u, car_z_u;\n    long car_x_v, car_y_v, car_z_v;\n    long car_x_w,\
    \ car_y_w, car_z_w;\n    long car_x_x, car_y_x, car_z_x;\n    long car_x_y, car_y_y,\
    \ car_z_y;\n    long car_x_z, car_y_z, car_z_z;\n    long car_x_a, car_y_a, car_z_a;\n\
    \    long car_x_b, car_y_b, car_z_b;\n    long car_x_c, car_y_c, car_z_c;\n  \
    \  long car_x_d, car_y_d, car_z_d;\n    long car_x_e, car_y_e, car_z_e;\n    long\
    \ car_x_f, car_y_f, car_z_f;\n    long car_x_g, car_y_g, car_z_g;\n    long car_x_h,\
    \ car_y_h, car_z_h;\n    long car_x_i, car_y_i, car_z_i;\n    long car_x_j, car_y_j,\
    \ car_z_j;\n    long car_x_k, car_y_k, car_z_k;\n    long car_x_l, car_y_l, car_z_l;\n\
    \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp81ibynfw.d(51): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp81ibynfw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collisions = 0;\n    long collisions_left = 0;\n    long\
    \ collisions_right = 0;\n    long collisions_left_right = 0;\n    long collisions_left_left\
    \ = 0;\n    long collisions_right_left = 0;\n    long collisions_right_right =\
    \ 0;\n    long collisions_left_right_left = 0;\n    long collisions_left_left_right\
    \ = 0;\n    long collisions_right_left_left = 0;\n    long collisions_right_right_left\
    \ = 0;\n    long collisions_left_right_left_right = 0;\n    long collisions_left_left_right_left\
    \ = 0;\n    long collisions_right_left_left_right = 0;\n    long collisions_right_right_left_left\
    \ = 0;\n    long collisions_left_right_left_right_right = 0;\n    long collisions_left_left_right_left_right\
    \ = 0;\n    long collisions_right_left_left_right_left = 0;\n    long collisions_right_right_left_left_right\
    \ = 0;\n    long collisions_left_right_left_right_right_left = 0;\n    long collisions_right_left_left_right_right_left\
    \ = 0;\n    long collisions_right_right_left_right_left = 0;\n    long collisions_left_right_left_right_right_left_right\
    \ = 0;\n    long collisions_right_left_left_right_right_left_right = 0;\n    long\
    \ collisions_right_right_left_right_left_right = 0;\n    long collisions_left_right_left_right_right_left_right\
    \ = 0;\n    long collisions_right_left_left_right_right_left_right_right = 0;\n\
    \    long collisions_right_right_left_right_left_right_right_left = 0;\n    long\
    \ collisions_left_right_left_right_right_left_right_left = 0;\n    long collisions_right_left_left_right_right_left_right_left_right\
    \ = 0;\n    long collisions_right_right_left_right_left_right_left_right_left\
    \ = 0;\n    long collisions_left_right_left_right_right_left_right_left_right\
    \ = 0;\n    long collisions_right_left_left_right_right_left_right_left_right\
    \ = 0;\n    long collisions_right_right_left_right_left_right_left_right_left\
    \ = 0;\n    long collisions_left_right_left_right_right_left_right_left_right_left\
    \ = 0;\n    long collisions_right_left_left_right_right_left_right_left_right_left\
    \ = 0;\n    long collisions_right_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long collisions_left_right_left_right_right_left_right_left_right_left\
    \ = 0;\n    long collisions_right_left_left_right_right_left_right_left_right_left_right\
    \ = 0;\n    long collisions_right_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long collisions_left_right_left_right_right_left_right_left_right_left_right\
    \ = 0;\n    long collisions_right_left_left_right_right_left_right_left_\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4rneyj76.d(60): Error: semicolon expected, not `unittest`\n/tmp/tmp4rneyj76.d(60):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4rneyj76.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision_distance64;\n\
    \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2y1wx832.d(86): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2y1wx832.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_left;\n\
    \    long collision_right;\n    long collision_left_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_right_right;\n    long collision_left_left_right;\n\
    \    long collision_left_left_left;\n    long collision_right_left_left;\n   \
    \ long collision_right_right_left;\n    long collision_right_right_right;\n  \
    \  long collision_left_right_right_left;\n    long collision_left_right_right_right;\n\
    \    long collision_left_left_left_right;\n    long collision_left_left_left;\n\
    \    long collision_right_left_left;\n    long collision_right_right_left;\n \
    \   long collision_right_right_right;\n    long collision_left_right_right_left;\n\
    \    long collision_left_right_right_right;\n    long collision_left_left_left_right;\n\
    \    long collision_left_left_left;\n    long collision_right_left_left;\n   \
    \ long collision_right_right_left;\n    long collision_right_right_right;\n  \
    \  long collision_left_right_right_left;\n    long collision_left_right_right_right;\n\
    \    long collision_left_left_left_right;\n    long collision_left_left_left;\n\
    \    long collision_right_left_left;\n    long collision_right_right_left;\n \
    \   long collision_right_right_right;\n    long collision_left_right_right_left;\n\
    \    long collision_left_right_right_right;\n    long collision_left_left_left_right;\n\
    \    long collision_left_left_left;\n    long collision_right_left_left;\n   \
    \ long collision_right_right_left;\n    long collision_right_right_right;\n  \
    \  long collision_left_right_right_left;\n    long collision_left_right_right_right;\n\
    \    long collision_left_left_left_right;\n    long collision_left_left_left;\n\
    \    long collision_right_left_left;\n    long collision_right_right_left;\n \
    \   long collision_right_right_right;\n    long collision_left_right_right_left;\n\
    \    long collision_left_right_right_right;\n    long collision_left_left_left_right;\n\
    \    long collision_left_left_left;\n    long collision_right_left_left;\n   \
    \ long collision_right_right_left;\n    long collision_right_right_right;\n  \
    \  long collision_left_right_right_left;\n    long collision_left_right_right_right;\n\
    \    long collision_left_left_left_right;\n    long collision_left_left_left;\n\
    \    long collision_right_left_left;\n    long collision_right_right_left;\n \
    \   long \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbidii5uy.d(82): Error: no identifier for declarator `long`\n/tmp/tmpbidii5uy.d(82):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpbidii5uy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l,m,n;\n\
    \    long collisions = 0;\n    long car_collisions = 0;\n    long car_collisions_left\
    \ = 0;\n    long car_collisions_right = 0;\n    long car_collisions_left_right\
    \ = 0;\n    long car_collisions_left_right_left = 0;\n    long car_collisions_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right = 0;\n    long car_collisions_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_right = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_right = 0;\n    long\
    \ car_collisions_left_right_left_right_left_right_left_right = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppcilha66.d(50): Error: semicolon expected, not `unittest`\n/tmp/tmppcilha66.d(50):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmppcilha66.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp68b3e_9g.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmp68b3e_9g.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp68b3e_9g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long collisions = 0;\n    long collision_distance;\n\
    \    long collision_distance_left;\n    long collision_distance_right;\n    long\
    \ collision_distance_left_right;\n    long collision_distance_left_left;\n   \
    \ long collision_distance_right_left;\n    long collision_distance_right_right;\n\
    \    long collision_distance_left_left_right;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_left_right;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_right_right;\n\
    \    long collision_distance_left_left_left_right;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left_right;\n    long collision_distance_right_left_left;\n\
    \    long collision_distance_right_left_right_left;\n    long collision_distance_left_right_left_right;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_right_right_left_left;\n\
    \    long collision_distance_right_right_left;\n    long collision_distance_right_right_right_left;\n\
    \    long collision_distance_left_left_left_right;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left_right;\n    long collision_distance_right_left_left;\n\
    \    long collision_distance_right_left_right_left;\n    long collision_distance_left_right_left_right;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_right_right_left_left;\n\
    \    long collision_distance_right_right_left;\n    long collision_distance_right_right_right_left;\n\
    \    long collision_distance_left_left_left_right_left;\n    long collision_distance_left_left_left_right;\n\
    \    long collision_distance_left_left_left;\n    long collision_distance_right_left_left_right_left;\n\
    \    long collision_distance_right_left_left_right;\n    long collision_distance_right_left_left;\n\
    \    long collision_distance_right_left_right_left;\n    long collision_distance_left_right_left_right_left;\n\
    \    long collision_distance_left_right_left_right;\n    long collision_distance_left_right_left;\n\
    \    long collision_distance_right_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_right_right_right_left;\n    long collision_distance_left_left_left_right_left_left;\n\
    \    long collision_distance_left_left_left_right_left;\n    long collision_distance_left_left_left_right;\n\
    \    long collision_distance_left_left_left;\n    long collision_distance_right_left_left_right_left_left;\n\
    \    long collision_distance_right_left_left_right_left;\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsnhjvqmm.d(73): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsnhjvqmm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp68b3e_9g.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmp68b3e_9g.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp68b3e_9g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q,\
    \ car_s, car_w, car_x, car_y, car_z;\n    long car_x_i, car_x_j, car_x_k, car_x_l,\
    \ car_x_m, car_x_n, car_x_o, car_x_p, car_x_q, car_x_s, car_x_w, car_x_x, car_x_y,\
    \ car_x_z;\n    long car_y_i, car_y_j, car_y_k, car_y_l, car_y_m, car_y_n, car_y_o,\
    \ car_y_p, car_y_q, car_y_s, car_y_w, car_y_x, car_y_y, car_y_z;\n    long car_z_i,\
    \ car_z_j, car_z_k, car_z_l, car_z_m, car_z_n, car_z_o, car_z_p, car_z_q, car_z_s,\
    \ car_z_w, car_z_x, car_z_y, car_z_z;\n    long car_x_speed, car_y_speed, car_z_speed;\n\
    \    long car_x_speed, car_y_speed, car_z_speed;\n    long car_x_speed, car_y_speed,\
    \ car_z_speed;\n    long car_x_speed, car_y_speed, car_z_speed;\n    long car_x_speed,\
    \ car_y_speed, car_z_speed;\n    long car_x_speed, car_y_speed, car_z_speed;\n\
    \    long car_x_speed, car_y_speed, car_z_speed;\n    long car_x_speed, car_y_speed,\
    \ car_z_speed;\n    long car_x_speed, car_y_speed, car_z_speed;\n    long car_x_speed,\
    \ car_y_speed, car_z_speed;\n    long car_x_speed, car_y_speed, car_z_speed;\n\
    \    long car_x_speed, car_y_speed, car_z_speed;\n    long car_x_speed, car_y_speed,\
    \ car_z_speed;\n    long car_x_speed, car_y_speed, car_z_speed;\n    long car_x_speed,\
    \ car_y_speed, car_z_speed;\n    long car_x_speed, car_y_speed, car_z_speed;\n\
    \    long car_x_speed, car_y_speed, car_z_speed;\n    long car_x_speed, car_y_speed,\
    \ \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6oqcpc2m.d(40): Error: no identifier for declarator `long`\n/tmp/tmp6oqcpc2m.d(40):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6oqcpc2m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision_distance64;\n\
    \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2y1wx832.d(86): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2y1wx832.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_num = n;\n    long car_speed = car_num / 2;\n    long car_speed_left\
    \ = car_speed * -1;\n    long car_speed_right = car_speed;\n    long car_speed_left_to_right\
    \ = car_speed_left * -1;\n    long car_speed_right_to_left = car_speed_right;\n\
    \    long car_speed_left_to_right_to_left = car_speed_left_to_right * -1;\n  \
    \  long car_speed_right_to_left_to_right = car_speed_right_to_left;\n    long\
    \ car_speed_left_to_right_to_left_to_right = car_speed_left_to_right_to_left;\n\
    \    long car_speed_right_to_left_to_right_to_left = car_speed_right_to_left_to_right;\n\
    \    long car_speed_left_to_right_to_left_to_right_to_left = car_speed_left_to_right_to_left_to_right;\n\
    \    long car_speed_right_to_left_to_right_to_left_to_right = car_speed_right_to_left_to_right_to_left;\n\
    \    long car_speed_left_to_right_to_left_to_right_to_left_to_right = car_speed_left_to_right_to_left_to_right_to_left;\n\
    \    long car_speed_right_to_left_to_right_to_left_to_right_to_left_to_right =\
    \ car_speed_right_to_left_to_right_to_left_to_right_to_left;\n    long car_speed_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = car_speed_right_to_left_to_right_to_left_to_right_to_left_to_right;\n    long\
    \ car_speed_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left =\
    \ car_speed_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    long car_speed_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = car_speed_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    long car_speed_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = car_speed_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    long car_speed_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = car_speed_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    long car_speed_right_to_left_to_right_to_left_\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6u1921d3.d(38): Error: semicolon expected, not `unittest`\n/tmp/tmp6u1921d3.d(38):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6u1921d3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_distance;\n\
    \    long collision_speed;\n    long collision_speed2;\n    long collision_speed3;\n\
    \    long collision_speed4;\n    long collision_speed5;\n    long collision_speed6;\n\
    \    long collision_speed7;\n    long collision_speed8;\n    long collision_speed9;\n\
    \    long collision_speed10;\n    long collision_speed11;\n    long collision_speed12;\n\
    \    long collision_speed13;\n    long collision_speed14;\n    long collision_speed15;\n\
    \    long collision_speed16;\n    long collision_speed17;\n    long collision_speed18;\n\
    \    long collision_speed19;\n    long collision_speed20;\n    long collision_speed21;\n\
    \    long collision_speed22;\n    long collision_speed23;\n    long collision_speed24;\n\
    \    long collision_speed25;\n    long collision_speed26;\n    long collision_speed27;\n\
    \    long collision_speed28;\n    long collision_speed29;\n    long collision_speed30;\n\
    \    long collision_speed31;\n    long collision_speed32;\n    long collision_speed33;\n\
    \    long collision_speed34;\n    long collision_speed35;\n    long collision_speed36;\n\
    \    long collision_speed37;\n    long collision_speed38;\n    long collision_speed39;\n\
    \    long collision_speed40;\n    long collision_speed41;\n    long collision_speed42;\n\
    \    long collision_speed43;\n    long collision_speed44;\n    long collision_speed45;\n\
    \    long collision_speed46;\n    long collision_speed47;\n    long collision_speed48;\n\
    \    long collision_speed49;\n    long collision_speed50;\n    long collision_speed51;\n\
    \    long collision_speed52;\n    long collision_speed53;\n    long collision_speed54;\n\
    \    long collision_speed55;\n    long collision_speed56;\n    long collision_speed57;\n\
    \    long collision_speed58;\n    long collision_speed59;\n    long collision_speed60;\n\
    \    long collision_speed61;\n    long collision_speed62;\n    long collision_speed63;\n\
    \    \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp11hb60oq.d(86): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11hb60oq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_point;\n   \
    \ long collision_point_2;\n    long collision_point_3;\n    long collision_point_4;\n\
    \    long collision_point_5;\n    long collision_point_6;\n    long collision_point_7;\n\
    \    long collision_point_8;\n    long collision_point_9;\n    long collision_point_10;\n\
    \    long collision_point_11;\n    long collision_point_12;\n    long collision_point_13;\n\
    \    long collision_point_14;\n    long collision_point_15;\n    long collision_point_16;\n\
    \    long collision_point_17;\n    long collision_point_18;\n    long collision_point_19;\n\
    \    long collision_point_20;\n    long collision_point_21;\n    long collision_point_22;\n\
    \    long collision_point_23;\n    long collision_point_24;\n    long collision_point_25;\n\
    \    long collision_point_26;\n    long collision_point_27;\n    long collision_point_28;\n\
    \    long collision_point_29;\n    long collision_point_30;\n    long collision_point_31;\n\
    \    long collision_point_32;\n    long collision_point_33;\n    long collision_point_34;\n\
    \    long collision_point_35;\n    long collision_point_36;\n    long collision_point_37;\n\
    \    long collision_point_38;\n    long collision_point_39;\n    long collision_point_40;\n\
    \    long collision_point_41;\n    long collision_point_42;\n    long collision_point_43;\n\
    \    long collision_point_44;\n    long collision_point_45;\n    long collision_point_46;\n\
    \    long collision_point_47;\n    long collision_point_48;\n    long collision_point_49;\n\
    \    long collision_point_50;\n    long collision_point_51;\n    long collision_point_52;\n\
    \    long collision_point_53;\n    long collision_point_54;\n    long collision_point_55;\n\
    \    long collision_point_56;\n    long collision_point_57;\n    long collision_point_58;\n\
    \    long collision_point_59;\n    long collision_point_60;\n    long collision_point_61;\n\
    \    long collision_point_62;\n    long collision_point_63;\n    long collision_point_64;\n\
    \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppiqfuz9d.d(86): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppiqfuz9d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_distance;\n\
    \    long collision_distance_left;\n    long collision_distance_right;\n    long\
    \ collision_distance_left_right;\n    long collision_distance_left_left;\n   \
    \ long collision_distance_right_left;\n    long collision_distance_right_right;\n\
    \    long collision_distance_left_left_right;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_right_right_right;\n    long collision_distance_left_right_left_right;\n\
    \    long collision_distance_left_right_left_left;\n    long collision_distance_right_left_left_left;\n\
    \    long collision_distance_right_left_right_left;\n    long collision_distance_right_right_left_left;\n\
    \    long collision_distance_right_right_right_left;\n    long collision_distance_left_left_left_right;\n\
    \    long collision_distance_left_left_left_left;\n    long collision_distance_right_left_left_left;\n\
    \    long collision_distance_right_left_right_left;\n    long collision_distance_right_right_left_left;\n\
    \    long collision_distance_right_right_right_left;\n    long collision_distance_left_right_left_right;\n\
    \    long collision_distance_left_right_left_left;\n    long collision_distance_right_left_left_left;\n\
    \    long collision_distance_right_left_right_left;\n    long collision_distance_right_right_left_left;\n\
    \    long collision_distance_right_right_right_left;\n    long collision_distance_left_left_left_right;\n\
    \    long collision_distance_left_left_left_left;\n    long collision_distance_right_left_left_left;\n\
    \    long collision_distance_right_left_right_left;\n    long collision_distance_right_right_left_left;\n\
    \    long collision_distance_right_right_right_left;\n    long collision_distance_left_right_left_right;\n\
    \    long collision_distance_left_right_left_left;\n    long collision_distance_right_left_left_left;\n\
    \    long collision_distance_right_left_right_left;\n    long collision_distance_right_right_left_left;\n\
    \    long collision_distance_right_right_right_left;\n    long collision_distance_left_left_left_right;\n\
    \    long collision_distance_left_left_left_left;\n    long collision_distance_right_left_left_left;\n\
    \    long collision_distance_right_left_right_left;\n    long collision_distance_right_right_left_left;\n\
    \    long collision_distance_right_right_right_left;\n    long collision_distance_left_right_left_right;\n\
    \    long collision_distance_left_right_left_left;\n    long collision_distance_right_left_left_left;\n\
    \    long collision_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpar6ehd4h.d(73): Error: semicolon expected, not `unittest`\n/tmp/tmpar6ehd4h.d(73):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpar6ehd4h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collisions = 0;\n    long car_collisions = 0;\n    long car_collisions_left\
    \ = 0;\n    long car_collisions_right = 0;\n    long car_collisions_left_right\
    \ = 0;\n    long car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdr4r7gih.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpdr4r7gih.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpdr4r7gih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_point;\n   \
    \ long collision_point_count;\n    long collision_point_count_max;\n    long collision_point_count_min;\n\
    \    long collision_point_count_temp;\n    long collision_point_count_temp_max;\n\
    \    long collision_point_count_temp_min;\n    long collision_point_count_temp_temp;\n\
    \    long collision_point_count_temp_temp_max;\n    long collision_point_count_temp_temp_min;\n\
    \    long collision_point_count_temp_temp_temp;\n    long collision_point_count_temp_temp_temp_max;\n\
    \    long collision_point_count_temp_temp_temp_min;\n    long collision_point_count_temp_temp_temp_temp;\n\
    \    long collision_point_count_temp_temp_temp_temp_max;\n    long collision_point_count_temp_temp_temp_temp_min;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp;\n    long collision_point_count_temp_temp_temp_temp_temp_max;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_min;\n    long collision_point_count_temp_temp_temp_temp_temp_temp;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_temp_max;\n    long collision_point_count_temp_temp_temp_temp_temp_temp_min;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_temp_temp;\n    long\
    \ collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_max;\n    long\
    \ collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_min;\n    long\
    \ collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    long\
    \ collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_max;\n  \
    \  long collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_min;\n \
    \   long collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_max;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_min;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_max;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_min;\n\
    \    long collision_point_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long collision_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvqavk98d.d(57): Error: semicolon expected, not `unittest`\n/tmp/tmpvqavk98d.d(57):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvqavk98d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k;\n\
    \    long collisions = 0;\n    long collision_distance;\n    long collision_distance_sum\
    \ = 0;\n    long collision_distance_sum_sq = 0;\n    long collision_distance_sq_sum\
    \ = 0;\n    long collision_distance_sq_sum_sq = 0;\n    long collision_distance_sq_sum_sq_sum\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq = 0;\n    long\
    \ collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = 0;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdqmh81k8.d(47): Error: semicolon expected, not `unittest`\n/tmp/tmpdqmh81k8.d(47):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpdqmh81k8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collisions = 0;\n    long collision_point = 0;\n    long\
    \ collision_point_count = 0;\n    long collision_point_count_max = 0;\n    long\
    \ collision_point_count_min = 0;\n    long collision_point_count_avg = 0;\n  \
    \  long collision_point_count_sum = 0;\n    long collision_point_count_sum_max\
    \ = 0;\n    long collision_point_count_sum_min = 0;\n    long collision_point_count_sum_avg\
    \ = 0;\n    long collision_point_count_sum_sum_max = 0;\n    long collision_point_count_sum_sum_min\
    \ = 0;\n    long collision_point_count_sum_sum_avg = 0;\n    long collision_point_count_sum_sum_sum_max\
    \ = 0;\n    long collision_point_count_sum_sum_sum_min = 0;\n    long collision_point_count_sum_sum_sum_avg\
    \ = 0;\n    long collision_point_count_sum_sum_sum_sum_max = 0;\n    long collision_point_count_sum_sum_sum_sum_min\
    \ = 0;\n    long collision_point_count_sum_sum_sum_sum_avg = 0;\n    long collision_point_count_sum_sum_sum_sum_sum_max\
    \ = 0;\n    long collision_point_count_sum_sum_sum_sum_min = 0;\n    long collision_point_count_sum_sum_sum_sum_avg\
    \ = 0;\n    long collision_point_count_sum_sum_sum_sum_sum_max = 0;\n    long\
    \ collision_point_count_sum_sum_sum_sum_min = 0;\n    long collision_point_count_sum_sum_sum_sum_sum_avg\
    \ = 0;\n    long collision_point_count_sum_sum_sum_sum_sum_max = 0;\n    long\
    \ collision_point_count_sum_sum_sum_sum_min = 0;\n    long collision_point_count_sum_sum_sum_sum_sum_avg\
    \ = 0;\n    long collision_point_count_sum_sum_sum_sum_sum_max = 0;\n    long\
    \ collision_point_count_sum_sum_sum_sum_min = 0;\n    long collision_point_count_sum_sum_sum_sum_sum_avg\
    \ = 0;\n    long collision_point_count_sum_sum_sum_sum_sum_max = 0;\n    long\
    \ collision_point_count_sum_sum_sum_sum_min = 0;\n    long collision_point_count_sum_sum_sum_sum_sum_avg\
    \ = 0;\n    long collision_point_count_sum_sum_sum_sum_sum_max = 0;\n    long\
    \ collision_point_count_sum_sum_sum_sum_min = 0;\n    long collision_point_count_sum_sum_sum_sum_sum_avg\
    \ = 0;\n    long collision_point_count_sum_sum_sum_sum_sum_max = 0;\n    long\
    \ collision_point_count_sum_sum_sum_sum_min = 0;\n    long collision_point_count_sum_sum_sum_sum_sum_avg\
    \ = 0;\n    long collision_point_count_sum_sum_sum_sum_sum_max = 0;\n    long\
    \ collision_point_count_sum_sum_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc3cb76oq.d(60): Error: semicolon expected, not `unittest`\n/tmp/tmpc3cb76oq.d(60):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpc3cb76oq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance_sq;\n    long collision_distance_sq2;\n    long collision_distance_sq3;\n\
    \    long collision_distance_sq4;\n    long collision_distance_sq5;\n    long\
    \ collision_distance_sq6;\n    long collision_distance_sq7;\n    long collision_distance_sq8;\n\
    \    long collision_distance_sq9;\n    long collision_distance_sq10;\n    long\
    \ collision_distance_sq11;\n    long collision_distance_sq12;\n    long collision_distance_sq13;\n\
    \    long collision_distance_sq14;\n    long collision_distance_sq15;\n    long\
    \ collision_distance_sq16;\n    long collision_distance_sq17;\n    long collision_distance_sq18;\n\
    \    long collision_distance_sq19;\n    long collision_distance_sq20;\n    long\
    \ collision_distance_sq21;\n    long collision_distance_sq22;\n    long collision_distance_sq23;\n\
    \    long collision_distance_sq24;\n    long collision_distance_sq25;\n    long\
    \ collision_distance_sq26;\n    long collision_distance_sq27;\n    long collision_distance_sq28;\n\
    \    long collision_distance_sq29;\n    long collision_distance_sq30;\n    long\
    \ collision_distance_sq31;\n    long collision_distance_sq32;\n    long collision_distance_sq33;\n\
    \    long collision_distance_sq34;\n    long collision_distance_sq35;\n    long\
    \ collision_distance_sq36;\n    long collision_distance_sq37;\n    long collision_distance_sq38;\n\
    \    long collision_distance_sq39;\n    long collision_distance_sq40;\n    long\
    \ collision_distance_sq41;\n    long collision_distance_sq42;\n    long collision_distance_sq43;\n\
    \    long collision_distance_sq44;\n    long collision_distance_sq45;\n    long\
    \ collision_distance_sq46;\n    long collision_distance_sq47;\n    long collision_distance_sq48;\n\
    \    long collision_distance_sq49;\n    long collision_distance_sq50;\n    long\
    \ collision_distance_sq51;\n    long collision_distance_sq52;\n    long collision_distance_sq53;\n\
    \    long collision_distance_sq54;\n    long collision_distance_sq55;\n    long\
    \ collision_\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf74_pzbh.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmpf74_pzbh.d(79):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpf74_pzbh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collisions = 0;\n    long collision_distance = 0;\n    long\
    \ collision_distance2 = 0;\n    long collision_distance3 = 0;\n    long collision_distance4\
    \ = 0;\n    long collision_distance5 = 0;\n    long collision_distance6 = 0;\n\
    \    long collision_distance7 = 0;\n    long collision_distance8 = 0;\n    long\
    \ collision_distance9 = 0;\n    long collision_distance10 = 0;\n    long collision_distance11\
    \ = 0;\n    long collision_distance12 = 0;\n    long collision_distance13 = 0;\n\
    \    long collision_distance14 = 0;\n    long collision_distance15 = 0;\n    long\
    \ collision_distance16 = 0;\n    long collision_distance17 = 0;\n    long collision_distance18\
    \ = 0;\n    long collision_distance19 = 0;\n    long collision_distance20 = 0;\n\
    \    long collision_distance21 = 0;\n    long collision_distance22 = 0;\n    long\
    \ collision_distance23 = 0;\n    long collision_distance24 = 0;\n    long collision_distance25\
    \ = 0;\n    long collision_distance26 = 0;\n    long collision_distance27 = 0;\n\
    \    long collision_distance28 = 0;\n    long collision_distance29 = 0;\n    long\
    \ collision_distance30 = 0;\n    long collision_distance31 = 0;\n    long collision_distance32\
    \ = 0;\n    long collision_distance33 = 0;\n    long collision_distance34 = 0;\n\
    \    long collision_distance35 = 0;\n    long collision_distance36 = 0;\n    long\
    \ collision_distance37 = 0;\n    long collision_distance38 = 0;\n    long collision_distance39\
    \ = 0;\n    long collision_distance40 = 0;\n    long collision_distance41 = 0;\n\
    \    long collision_distance42 = 0;\n    long collision_distance43 = 0;\n    long\
    \ collision_distance44 = 0;\n    long collision_distance45 = 0;\n    long collision_distance46\
    \ = 0;\n    long collision_distance47 = 0;\n    long collision_distance48 = 0;\n\
    \    long collision_distance49 = 0;\n    long collision_distance50 = 0;\n    long\
    \ collision_distance51 = 0;\n    long collision_distance52 = 0;\n    long collision_distance53\
    \ = 0;\n    long collision_distance54 = 0;\n    long collision_distance55 = 0;\n\
    \    long collision_distance56 = 0;\n    long collision_distance57 = 0;\n    long\
    \ collision_distance58 = 0;\n    long collision_distance59 = 0;\n    long collision_distance60\
    \ = 0;\n    long collision_distance61 = 0;\n    long collision_distance62 = 0;\n\
    \    long collision_distance\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnktl07dc.d(82): Error: semicolon expected, not `unittest`\n/tmp/tmpnktl07dc.d(82):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnktl07dc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_left;\n\
    \    long collision_right;\n    long collision_left_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_right_right;\n    long collision_left_left_right;\n\
    \    long collision_left_left_left;\n    long collision_right_left_left;\n   \
    \ long collision_right_left_right;\n    long collision_left_right_left;\n    long\
    \ collision_left_right_right;\n    long collision_right_right_left;\n    long\
    \ collision_right_right_right;\n    long collision_left_left_left_right;\n   \
    \ long collision_left_left_left;\n    long collision_right_left_left;\n    long\
    \ collision_right_left_right;\n    long collision_left_right_left;\n    long collision_left_right_right;\n\
    \    long collision_right_right_left;\n    long collision_right_right_right;\n\
    \    long collision_left_left_left_right;\n    long collision_left_left_left;\n\
    \    long collision_right_left_left;\n    long collision_right_left_right;\n \
    \   long collision_left_right_left;\n    long collision_left_right_right;\n  \
    \  long collision_right_right_left;\n    long collision_right_right_right;\n \
    \   long collision_left_left_left_right;\n    long collision_left_left_left;\n\
    \    long collision_right_left_left;\n    long collision_right_left_right;\n \
    \   long collision_left_right_left;\n    long collision_left_right_right;\n  \
    \  long collision_right_right_left;\n    long collision_right_right_right;\n \
    \   long collision_left_left_left_right;\n    long collision_left_left_left;\n\
    \    long collision_right_left_left;\n    long collision_right_left_right;\n \
    \   long collision_left_right_left;\n    long collision_left_right_right;\n  \
    \  long collision_right_right_left;\n    long collision_right_right_right;\n \
    \   long collision_left_left_left_right;\n    long collision_left_left_left;\n\
    \    long collision_right_left_left;\n    long collision_right_left_right;\n \
    \   long collision_left_right_left;\n    long collision_left_right_right;\n  \
    \  long collision_right_right_left;\n    long collision_right_right_right;\n \
    \   long collision_left_left_left_right;\n    long collision_left_left_left;\n\
    \    long collision_right_left_left;\n    long collision_right_left_right;\n \
    \   long collision_left_right_left;\n    long collision_left_right_right;\n  \
    \  long collision_right_right_left;\n    \nunittest\n{\n    alias candidate =\
    \ car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_d04j726.d(84): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_d04j726.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long collisions = 0;\n    long collision;\n    long\
    \ collision_distance;\n    long collision_distance_i;\n    long collision_distance_j;\n\
    \    long collision_distance_k;\n    long collision_distance_total;\n    long\
    \ collision_distance_total_i;\n    long collision_distance_total_j;\n    long\
    \ collision_distance_total_k;\n    long collision_distance_total_total;\n    long\
    \ collision_distance_total_total_i;\n    long collision_distance_total_total_j;\n\
    \    long collision_distance_total_total_k;\n    long collision_distance_total_total_total;\n\
    \    long collision_distance_total_total_total_i;\n    long collision_distance_total_total_total_j;\n\
    \    long collision_distance_total_total_total_k;\n    long collision_distance_total_total_total_total;\n\
    \    long collision_distance_total_total_total_total_i;\n    long collision_distance_total_total_total_total_j;\n\
    \    long collision_distance_total_total_total_total_k;\n    long collision_distance_total_total_total_total_total;\n\
    \    long collision_distance_total_total_total_total_total_i;\n    long collision_distance_total_total_total_total_total_j;\n\
    \    long collision_distance_total_total_total_total_total_k;\n    long collision_distance_total_total_total_total_total_total;\n\
    \    long collision_distance_total_total_total_total_total_total_i;\n    long\
    \ collision_distance_total_total_total_total_total_total_j;\n    long collision_distance_total_total_total_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total_total_total_total;\n    long\
    \ collision_distance_total_total_total_total_total_total_total_i;\n    long collision_distance_total_total_total_total_total_total_j;\n\
    \    long collision_distance_total_total_total_total_total_total_k;\n    long\
    \ collision_distance_total_total_total_total_total_total_total;\n    long collision_distance_total_total_total_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_total_total_total_j;\n  \
    \  long collision_distance_total_total_total_total_total_total_total_k;\n    long\
    \ collision_distance_total_total_total_total_total_total_total_total;\n    long\
    \ collision_distance_total_total_total_total_total_total_total_total_i;\n    long\
    \ collision_distance_total_total_total_total_total_total_total_total_j;\n    long\
    \ collision_distance_total_total_total_total_total_total_total_total_k;\n    long\
    \ collision_distance_total_total_total_total_total_total_total_total_total;\n\
    \    long collision_distance_total_total_total_total_total_total_\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2auo8z01.d(64): Error: semicolon expected, not `unittest`\n/tmp/tmp2auo8z01.d(64):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2auo8z01.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q,\
    \ car_s, car_v, car_w, car_x, car_y, car_z;\n    long car_i, car_j, car_k, car_l,\
    \ car_m, car_n, car_o, car_p, car_q, car_s, car_v, car_w, car_x, car_y, car_z;\n\
    \    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_s,\
    \ car_v, car_w, car_x, car_y, car_z;\n    long car_i, car_j, car_k, car_l, car_m,\
    \ car_n, car_o, car_p, car_q, car_s, car_v, car_w, car_x, car_y, car_z;\n    long\
    \ car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_s, car_v,\
    \ car_w, car_x, car_y, car_z;\n    long car_i, car_j, car_k, car_l, car_m, car_n,\
    \ car_o, car_p, car_q, car_s, car_v, car_w, car_x, car_y, car_z;\n    long car_i,\
    \ car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_s, car_v, car_w,\
    \ car_x, car_y, car_z;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o,\
    \ car_p, car_q, car_s, car_v, car_w, car_x, car_y, car_z;\n    long car_i, car_j,\
    \ car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_s, car_v, car_w, car_x,\
    \ car_y, car_z;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p,\
    \ car_q, car_s, car_v, car_w, car_x, car_y, car_z;\n    long car_i, car_j, car_k,\
    \ car_l, car_m, car_n, car_o, car_p\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsog_aij9.d(29): Error: semicolon expected, not `unittest`\n/tmp/tmpsog_aij9.d(29):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpsog_aij9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right = 0;\n    long car_collisions_left_right_left_left_right\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left = 0;\n    long\
    \ car_collisions_left_right_left_left_right_right = 0;\n    long car_collisions_left_right_left_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_left_right_left_right_right = 0;\n  \
    \  long car_collisions_left_right_left_left_right_left_right_left_right = 0;\n\
    \    long car_collisions_left_right_left_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuzx13oxc.d(48): Error: semicolon expected, not `unittest`\n/tmp/tmpuzx13oxc.d(48):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpuzx13oxc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_i, car_j, car_k, car_l, car_m, car_n;\n    long car_x_i,\
    \ car_x_j, car_x_k, car_x_l, car_x_m, car_x_n;\n    long car_y_i, car_y_j, car_y_k,\
    \ car_y_l, car_y_m, car_y_n;\n    long car_z_i, car_z_j, car_z_k, car_z_l, car_z_m,\
    \ car_z_n;\n    long car_x_i_1, car_x_j_1, car_x_k_1, car_x_l_1, car_x_m_1, car_x_n_1;\n\
    \    long car_y_i_1, car_y_j_1, car_y_k_1, car_y_l_1, car_y_m_1, car_y_n_1;\n\
    \    long car_z_i_1, car_z_j_1, car_z_k_1, car_z_l_1, car_z_m_1, car_z_n_1;\n\
    \    long car_x_i_2, car_x_j_2, car_x_k_2, car_x_l_2, car_x_m_2, car_x_n_2;\n\
    \    long car_y_i_2, car_y_j_2, car_y_k_2, car_y_l_2, car_y_m_2, car_y_n_2;\n\
    \    long car_z_i_2, car_z_j_2, car_z_k_2, car_z_l_2, car_z_m_2, car_z_n_2;\n\
    \    long car_x_i_3, car_x_j_3, car_x_k_3, car_x_l_3, car_x_m_3, car_x_n_3;\n\
    \    long car_y_i_3, car_y_j_3, car_y_k_3, car_y_l_3, car_y_m_3, car_y_n_3;\n\
    \    long car_z_i_3, car_z_j_3, car_z_k_3, car_z_l_3, car_z_m_3, car_z_n_3;\n\
    \    long car_x_i_4, car_x_j_4, car_x_k_4, car_x_l_4, car_x_m_4, car_x_n_4;\n\
    \    long car_y_i_4, car_y_j_4, car_y_k_4, car_y_l_4, car_y_m_4, car_y_n_4;\n\
    \    long car_z_i_4, car_z_j_4, car_z_k_4, car_z_l_4, car_z_m_4, car_z_n_4;\n\
    \    long car_x_i_5, \nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp60rysems.d(35): Error: no identifier for declarator `long`\n/tmp/tmp60rysems.d(35):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp60rysems.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_sum;\n\
    \    long collision_sum_temp;\n    long collision_sum_temp2;\n    long collision_sum_temp3;\n\
    \    long collision_sum_temp4;\n    long collision_sum_temp5;\n    long collision_sum_temp6;\n\
    \    long collision_sum_temp7;\n    long collision_sum_temp8;\n    long collision_sum_temp9;\n\
    \    long collision_sum_temp10;\n    long collision_sum_temp11;\n    long collision_sum_temp12;\n\
    \    long collision_sum_temp13;\n    long collision_sum_temp14;\n    long collision_sum_temp15;\n\
    \    long collision_sum_temp16;\n    long collision_sum_temp17;\n    long collision_sum_temp18;\n\
    \    long collision_sum_temp19;\n    long collision_sum_temp20;\n    long collision_sum_temp21;\n\
    \    long collision_sum_temp22;\n    long collision_sum_temp23;\n    long collision_sum_temp24;\n\
    \    long collision_sum_temp25;\n    long collision_sum_temp26;\n    long collision_sum_temp27;\n\
    \    long collision_sum_temp28;\n    long collision_sum_temp29;\n    long collision_sum_temp30;\n\
    \    long collision_sum_temp31;\n    long collision_sum_temp32;\n    long collision_sum_temp33;\n\
    \    long collision_sum_temp34;\n    long collision_sum_temp35;\n    long collision_sum_temp36;\n\
    \    long collision_sum_temp37;\n    long collision_sum_temp38;\n    long collision_sum_temp39;\n\
    \    long collision_sum_temp40;\n    long collision_sum_temp41;\n    long collision_sum_temp42;\n\
    \    long collision_sum_temp43;\n    long collision_sum_temp44;\n    long collision_sum_temp45;\n\
    \    long collision_sum_temp46;\n    long collision_sum_temp47;\n    long collision_sum_temp48;\n\
    \    long collision_sum_temp49;\n    long collision_sum_temp50;\n    long collision_sum_temp51;\n\
    \    long collision_sum_temp52;\n    long collision_sum_temp53;\n    long collision_sum_temp54;\n\
    \    long collision_sum_temp55;\n    long collision_\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuxu0cqv_.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmpuxu0cqv_.d(79):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpuxu0cqv_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collisions = 0;\n    long collision_counter = 0;\n    long\
    \ collision_counter2 = 0;\n    long collision_counter3 = 0;\n    long collision_counter4\
    \ = 0;\n    long collision_counter5 = 0;\n    long collision_counter6 = 0;\n \
    \   long collision_counter7 = 0;\n    long collision_counter8 = 0;\n    long collision_counter9\
    \ = 0;\n    long collision_counter10 = 0;\n    long collision_counter11 = 0;\n\
    \    long collision_counter12 = 0;\n    long collision_counter13 = 0;\n    long\
    \ collision_counter14 = 0;\n    long collision_counter15 = 0;\n    long collision_counter16\
    \ = 0;\n    long collision_counter17 = 0;\n    long collision_counter18 = 0;\n\
    \    long collision_counter19 = 0;\n    long collision_counter20 = 0;\n    long\
    \ collision_counter21 = 0;\n    long collision_counter22 = 0;\n    long collision_counter23\
    \ = 0;\n    long collision_counter24 = 0;\n    long collision_counter25 = 0;\n\
    \    long collision_counter26 = 0;\n    long collision_counter27 = 0;\n    long\
    \ collision_counter28 = 0;\n    long collision_counter29 = 0;\n    long collision_counter30\
    \ = 0;\n    long collision_counter31 = 0;\n    long collision_counter32 = 0;\n\
    \    long collision_counter33 = 0;\n    long collision_counter34 = 0;\n    long\
    \ collision_counter35 = 0;\n    long collision_counter36 = 0;\n    long collision_counter37\
    \ = 0;\n    long collision_counter38 = 0;\n    long collision_counter39 = 0;\n\
    \    long collision_counter40 = 0;\n    long collision_counter41 = 0;\n    long\
    \ collision_counter42 = 0;\n    long collision_counter43 = 0;\n    long collision_counter44\
    \ = 0;\n    long collision_counter45 = 0;\n    long collision_counter46 = 0;\n\
    \    long collision_counter47 = 0;\n    long collision_counter48 = 0;\n    long\
    \ collision_counter49 = 0;\n    long collision_counter50 = 0;\n    long collision_counter51\
    \ = 0;\n    long collision_counter52 = 0;\n    long collision_counter53 = 0;\n\
    \    long collision_counter54 = 0;\n    long collision_counter55 = 0;\n    long\
    \ collision_counter56 = 0;\n    long collision_counter57 = 0;\n    long collision_counter58\
    \ = 0;\n    long collision_counter59 = 0;\n    long collision_counter60 = 0;\n\
    \    long collision_counter61 = 0;\n    long collision_counter62 = 0;\n    long\
    \ collision_counter\nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxrotks7j.d(82): Error: semicolon expected, not `unittest`\n/tmp/tmpxrotks7j.d(82):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpxrotks7j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q;\n\
    \    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long car_collisions_right\
    \ = 0;\n    long car_collisions_left_right = 0;\n    long car_collisions_left_right_left\
    \ = 0;\n    long car_collisions_left_right_right = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_left_left = 0;\n    long car_collisions_left_right_left_left_right\
    \ = 0;\n    long car_collisions_left_right_left_left_left_left = 0;\n    long\
    \ car_collisions_left_right_left_left_left_right = 0;\n    long car_collisions_left_right_left_left_left_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_left_left_right = 0;\n  \
    \  long car_collisions_left_right_left_left_left_left_left_left = 0;\n    long\
    \ car_collisions_left_right_left_left_left_left_left_right = 0;\n    long car_collisions_left_right_left_left_left_left_left_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_left_left_left_left_right\
    \ = 0;\n    long car_collisions_left_right_left_left_left_left_left_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_left_left_left_left_right\
    \ = 0;\n    long car_collisions_left_right_left_left_left_left_left_left_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_left_left_left_left_left_right\
    \ = 0;\n    long car_collisions_left_right_left_left_left_left_left_left_left_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_left_left_left_left_left_right\
    \ = 0;\n    long car_collisions_left_right_left_left_left_left_left_left_left_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_left_left_left_left_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_left_left_left_left_left_right_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_left_left_left_right_left_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_left_left_right_left_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_left_right_left_left_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_left_left_left\
    \ = 0;\n    long car_collisions_left_right_left_left_right_left_left_left = 0;\n\
    \    long car\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmperpkkquh.d(51): Error: semicolon expected, not `unittest`\n/tmp/tmperpkkquh.d(51):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmperpkkquh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_length;\n\
    \    long collision_length_i;\n    long collision_length_j;\n    long collision_length_k;\n\
    \    long collision_length_collision;\n    long collision_length_collision_i;\n\
    \    long collision_length_collision_j;\n    long collision_length_collision_k;\n\
    \    long collision_length_collision_collision;\n    long collision_length_collision_collision_i;\n\
    \    long collision_length_collision_collision_j;\n    long collision_length_collision_collision_k;\n\
    \    long collision_length_collision_collision_collision;\n    long collision_length_collision_collision_collision_i;\n\
    \    long collision_length_collision_collision_collision_j;\n    long collision_length_collision_collision_collision_k;\n\
    \    long collision_length_collision_collision_collision_collision;\n    long\
    \ collision_length_collision_collision_collision_collision_i;\n    long collision_length_collision_collision_collision_collision_j;\n\
    \    long collision_length_collision_collision_collision_collision_k;\n    long\
    \ collision_length_collision_collision_collision_collision_collision;\n    long\
    \ collision_length_collision_collision_collision_collision_i;\n    long collision_length_collision_collision_collision_collision_j;\n\
    \    long collision_length_collision_collision_collision_collision_k;\n    long\
    \ collision_length_collision_collision_collision_collision_collision;\n    long\
    \ collision_length_collision_collision_collision_collision_collision_i;\n    long\
    \ collision_length_collision_collision_collision_collision_collision_j;\n    long\
    \ collision_length_collision_collision_collision_collision_collision_k;\n    long\
    \ collision_length_collision_collision_collision_collision_collision_collision;\n\
    \    long collision_length_collision_collision_collision_collision_collision_i;\n\
    \    long collision_length_collision_collision_collision_collision_collision_j;\n\
    \    long collision_length_collision_collision_collision_collision_collision_k;\n\
    \    long collision_length_collision_collision_collision_collision_collision_collision;\n\
    \    long collision_length_collision_collision_collision_collision_collision_collision_i;\n\
    \    long collision_length_collision_collision_collision_collision_collision_collision_j;\n\
    \    long collision_length_collision_collision_collision_collision_collision_collision_k;\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt1kpfjjh.d(58): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt1kpfjjh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp68b3e_9g.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmp68b3e_9g.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp68b3e_9g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_distance;\n\
    \    long collision_distance2;\n    long collision_distance3;\n    long collision_distance4;\n\
    \    long collision_distance5;\n    long collision_distance6;\n    long collision_distance7;\n\
    \    long collision_distance8;\n    long collision_distance9;\n    long collision_distance10;\n\
    \    long collision_distance11;\n    long collision_distance12;\n    long collision_distance13;\n\
    \    long collision_distance14;\n    long collision_distance15;\n    long collision_distance16;\n\
    \    long collision_distance17;\n    long collision_distance18;\n    long collision_distance19;\n\
    \    long collision_distance20;\n    long collision_distance21;\n    long collision_distance22;\n\
    \    long collision_distance23;\n    long collision_distance24;\n    long collision_distance25;\n\
    \    long collision_distance26;\n    long collision_distance27;\n    long collision_distance28;\n\
    \    long collision_distance29;\n    long collision_distance30;\n    long collision_distance31;\n\
    \    long collision_distance32;\n    long collision_distance33;\n    long collision_distance34;\n\
    \    long collision_distance35;\n    long collision_distance36;\n    long collision_distance37;\n\
    \    long collision_distance38;\n    long collision_distance39;\n    long collision_distance40;\n\
    \    long collision_distance41;\n    long collision_distance42;\n    long collision_distance43;\n\
    \    long collision_distance44;\n    long collision_distance45;\n    long collision_distance46;\n\
    \    long collision_distance47;\n    long collision_distance48;\n    long collision_distance49;\n\
    \    long collision_distance50;\n    long collision_distance51;\n    long collision_distance52;\n\
    \    long collision_distance53;\n    long collision_distance54;\n    long collision_distance55;\n\
    \    long collision_distance56;\n    long collision_distance57;\n    long collision_distance58;\n\
    \    long collision_distance59;\n    long collision_distance60;\n    long collision_distance61;\n\
    \    long collision_distance62;\n    long collision_distance63;\n    long collision_distance64;\n\
    \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2y1wx832.d(86): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2y1wx832.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_i_minus_j;\n    long collision_distance_i_minus_k;\n\
    \    long collision_distance_j_minus_k;\n    long collision_distance_i_minus_j_minus_k;\n\
    \    long collision_distance_i_minus_j_minus_k_minus_l;\n    long collision_distance_i_minus_j_minus_k_minus_l_minus_m;\n\
    \    long collision_distance_i_minus_j_minus_k_minus_l_minus_m_minus_n;\n    long\
    \ collision_distance_i_minus_j_minus_k_minus_l_minus_m_minus_n_minus_o;\n    long\
    \ collision_distance_i_minus_j_minus_k_minus_l_minus_m_minus_n_minus_o_minus_p;\n\
    \    long collision_distance_i_minus_j_minus_k_minus_l_minus_m_minus_n_minus_o_minus_p_minus_q;\n\
    \    long collision_distance_i_minus_j_minus_k_minus_l_minus_m_minus_n_minus_o_minus_p_minus_q_minus_r;\n\
    \    long collision_distance_i_minus_j_minus_k_minus_l_minus_m_minus_n_minus_o_minus_p_minus_q_minus_r_minus_s;\n\
    \    long collision_distance_i_minus_j_minus_k_minus_l_minus_m_minus_n_minus_o_minus_p_minus_q_minus_r_minus_s_minus_t;\n\
    \    long collision_distance_i_minus_j_minus_k_minus_l_minus_m_minus_n_minus_o_minus_p_minus_q_minus_r_minus_s_minus_t_minus_u;\n\
    \    long collision_distance_i_minus_j_minus_k_minus_l_minus_m_minus_n_minus_o_minus_p_minus_q_minus_r_minus_s_minus_t_minus_u_minus_v;\n\
    \    long collision_distance_i_minus_j_minus_k_minus_l_minus_m_minus_n_minus_o_minus_p_minus_q_minus_r_minus_s_minus_t_minus_u_minus_v_minus_w;\n\
    \    long collision_distance_i_minus_j_minus_k_minus_l_minus_m_minus_n_\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9pvzgk8f.d(43): Error: semicolon expected, not `unittest`\n/tmp/tmp9pvzgk8f.d(43):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp9pvzgk8f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_distance;\n\
    \    long collision_distance_left;\n    long collision_distance_right;\n    long\
    \ collision_distance_left_right;\n    long collision_distance_left_left;\n   \
    \ long collision_distance_right_left;\n    long collision_distance_right_right;\n\
    \    long collision_distance_left_left_right;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_left_right;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_right_right;\n\
    \    long collision_distance_right_left_left;\n    long collision_distance_right_left_right;\n\
    \    long collision_distance_left_left_left_right;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left_right;\n    long collision_distance_right_left_left;\n\
    \    long collision_distance_right_left_left_right;\n    long collision_distance_left_right_left_right;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_right_left_right;\n\
    \    long collision_distance_right_right_left;\n    long collision_distance_right_right_left_right;\n\
    \    long collision_distance_right_right_left;\n    long collision_distance_right_right_left_right;\n\
    \    long collision_distance_left_left_left_right;\n    long collision_distance_left_left_left;\n\
    \    long collision_distance_right_left_left_right;\n    long collision_distance_right_left_left;\n\
    \    long collision_distance_right_left_left_right;\n    long collision_distance_left_right_left_right;\n\
    \    long collision_distance_left_right_left;\n    long collision_distance_left_right_left_right;\n\
    \    long collision_distance_right_right_left_right;\n    long collision_distance_right_right_left;\n\
    \    long collision_distance_right_right_left_right;\n    long collision_distance_left_left_left_right_right;\n\
    \    long collision_distance_left_left_left_right;\n    long collision_distance_right_left_left_right_right;\n\
    \    long collision_distance_right_left_left_right;\n    long collision_distance_right_left_left;\n\
    \    long collision_distance_right_left_left_right;\n    long collision_distance_left_right_left_right_right;\n\
    \    long collision_distance_left_right_left_right;\n    long collision_distance_right_right_left_right;\n\
    \    long collision_distance_right_right_left;\n    long collision_distance_right_right_left_right;\n\
    \    long collision_distance_left_left_left_right_right_right;\n    long collision_distance_left_left_left_right;\n\
    \    long collision_distance_right_left_left_right_right;\n    long \nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0axavex9.d(74): Error: no identifier for declarator `long`\n/tmp/tmp0axavex9.d(74):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0axavex9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right = 0;\n    long car_collisions_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_right = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_right = 0;\n    long\
    \ car_collisions_left_right_left_right_left_right_left_right = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2y0tzon8.d(48): Error: semicolon expected, not `unittest`\n/tmp/tmp2y0tzon8.d(48):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2y0tzon8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q,\
    \ car_r, car_s, car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n    long car_i,\
    \ car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_r, car_s, car_t,\
    \ car_u, car_v, car_w, car_x, car_y, car_z;\n    long car_i, car_j, car_k, car_l,\
    \ car_m, car_n, car_o, car_p, car_q, car_r, car_s, car_t, car_u, car_v, car_w,\
    \ car_x, car_y, car_z;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o,\
    \ car_p, car_q, car_r, car_s, car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n\
    \    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_r,\
    \ car_s, car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n    long car_i, car_j,\
    \ car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_r, car_s, car_t, car_u,\
    \ car_v, car_w, car_x, car_y, car_z;\n    long car_i, car_j, car_k, car_l, car_m,\
    \ car_n, car_o, car_p, car_q, car_r, car_s, car_t, car_u, car_v, car_w, car_x,\
    \ car_y, car_z;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p,\
    \ car_q, car_r, car_s, car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n    long\
    \ car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_r, car_s,\
    \ car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n    \nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2hs79vis.d(28): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2hs79vis.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_num = n;\n    long car_speed = car_num / (double)n;\n   \
    \ long car_width = car_num / 2;\n    long car_height = car_num / 2;\n    long\
    \ car_length = car_num / 2;\n    long car_max_speed = car_num / 4;\n    long car_max_width\
    \ = car_num / 4;\n    long car_max_height = car_num / 4;\n    long car_max_length\
    \ = car_num / 4;\n    long car_max_speed2 = car_num / 8;\n    long car_max_width2\
    \ = car_num / 8;\n    long car_max_height2 = car_num / 8;\n    long car_max_length2\
    \ = car_num / 8;\n    long car_max_speed3 = car_num / 16;\n    long car_max_width3\
    \ = car_num / 16;\n    long car_max_height3 = car_num / 16;\n    long car_max_length3\
    \ = car_num / 16;\n    long car_max_speed4 = car_num / 32;\n    long car_max_width4\
    \ = car_num / 32;\n    long car_max_height4 = car_num / 32;\n    long car_max_length4\
    \ = car_num / 32;\n    long car_max_speed5 = car_num / 64;\n    long car_max_width5\
    \ = car_num / 64;\n    long car_max_height5 = car_num / 64;\n    long car_max_length5\
    \ = car_num / 64;\n    long car_max_speed6 = car_num / 128;\n    long car_max_width6\
    \ = car_num / 128;\n    long car_max_height6 = car_num / 128;\n    long car_max_length6\
    \ = car_num / 128;\n    long car_max_speed7 = car_num / 256;\n    long car_max_width7\
    \ = car_num / 256;\n    long car_max_height7 = car_num / 256;\n    long car_max_length7\
    \ = car_num / 256;\n    long car_max_speed8 = car_num / 512;\n    long car_max_width8\
    \ = car_num / 512;\n    long car_max_height8 = car_num / 512;\n    long car_max_length8\
    \ = car_num / 512;\n    long car_max_speed9 = car_num / 1024;\n    long car_max_width9\
    \ = car_num / 1024;\n    long car_max_height9 = car_num / 1024;\n    long car_max_length9\
    \ = car_num / 1024;\n    long car_max_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxvcpflr_.d(19): Error: C style cast illegal, use `cast(double)n`\n/tmp/tmpxvcpflr_.d(60):
    Error: semicolon expected, not `unittest`\n/tmp/tmpxvcpflr_.d(60): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxvcpflr_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy3w2azh_.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpy3w2azh_.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy3w2azh_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_left;\n\
    \    long collision_right;\n    long collision_left_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_right_right;\n    long collision_left_left_right;\n\
    \    long collision_left_left_left;\n    long collision_right_left_left;\n   \
    \ long collision_right_left_right;\n    long collision_left_right_left;\n    long\
    \ collision_left_right_right;\n    long collision_right_right_left;\n    long\
    \ collision_right_right_right;\n    long collision_left_left_left_right;\n   \
    \ long collision_left_left_left_left;\n    long collision_right_left_left_left;\n\
    \    long collision_right_left_left_right;\n    long collision_left_right_left_left;\n\
    \    long collision_left_right_left_right;\n    long collision_right_right_left_left;\n\
    \    long collision_right_right_left_right;\n    long collision_left_right_right_left;\n\
    \    long collision_left_right_right_right;\n    long collision_right_right_right_left;\n\
    \    long collision_right_right_right_right;\n    long collision_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left;\n    long collision_right_left_left_left_left;\n\
    \    long collision_right_left_left_left_right;\n    long collision_left_right_left_left_left;\n\
    \    long collision_left_right_left_left_right;\n    long collision_right_right_left_left_left;\n\
    \    long collision_right_right_left_left_right;\n    long collision_left_right_right_left_left;\n\
    \    long collision_left_right_right_left_right;\n    long collision_right_right_right_left_left;\n\
    \    long collision_right_right_right_left_right;\n    long collision_left_right_right_right_left;\n\
    \    long collision_left_right_right_right_right;\n    long collision_right_right_right_right_left;\n\
    \    long collision_right_right_right_right_right;\n    long collision_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left;\n    long collision_right_left_left_left_left;\n\
    \    long collision_right_left_left_left_right;\n    long collision_left_right_left_left_left;\n\
    \    long collision_left_right_left_left_right;\n    long collision_right_right_left_left_left;\n\
    \    long collision_right_right_left_left_right;\n    long collision_left_right_right_left_left;\n\
    \    long collision_left_right_right_left_right;\n    long collision_right_right_right_left_left;\n\
    \    long collision_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhnkafpk.d(76): Error: semicolon expected, not `unittest`\n/tmp/tmpnhnkafpk.d(76):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnhnkafpk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance_sum;\n    long collision_distance_sum_sq;\n    long\
    \ collision_distance_sq_sum;\n    long collision_distance_sq_sum_sq;\n    long\
    \ collision_distance_sq_sum_sq_sum;\n    long collision_distance_sq_sum_sq_sum_sq;\n\
    \    long collision_distance_sq_sum_sq_sum_sq_sum;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq;\n\
    \    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq;\n\
    \    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq;\n\
    \    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum;\n    long\
    \ collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum;\n    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq;\n\
    \    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum;\n\
    \    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq;\n\
    \    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum;\n\
    \    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum;\n\
    \    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum;\n\
    \    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum;\n\
    \    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq;\n\
    \    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq;\n\
    \    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq;\n\
    \    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq;\n\
    \    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq;\n\
    \    long collision_distance_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_\nunittest\n{\n\
    \    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3grkjn8j.d(50): Error: semicolon expected, not `unittest`\n/tmp/tmp3grkjn8j.d(50):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3grkjn8j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collisions = 0;\n    long collision_counter = 0;\n    long\
    \ collision_counter2 = 0;\n    long collision_counter3 = 0;\n    long collision_counter4\
    \ = 0;\n    long collision_counter5 = 0;\n    long collision_counter6 = 0;\n \
    \   long collision_counter7 = 0;\n    long collision_counter8 = 0;\n    long collision_counter9\
    \ = 0;\n    long collision_counter10 = 0;\n    long collision_counter11 = 0;\n\
    \    long collision_counter12 = 0;\n    long collision_counter13 = 0;\n    long\
    \ collision_counter14 = 0;\n    long collision_counter15 = 0;\n    long collision_counter16\
    \ = 0;\n    long collision_counter17 = 0;\n    long collision_counter18 = 0;\n\
    \    long collision_counter19 = 0;\n    long collision_counter20 = 0;\n    long\
    \ collision_counter21 = 0;\n    long collision_counter22 = 0;\n    long collision_counter23\
    \ = 0;\n    long collision_counter24 = 0;\n    long collision_counter25 = 0;\n\
    \    long collision_counter26 = 0;\n    long collision_counter27 = 0;\n    long\
    \ collision_counter28 = 0;\n    long collision_counter29 = 0;\n    long collision_counter30\
    \ = 0;\n    long collision_counter31 = 0;\n    long collision_counter32 = 0;\n\
    \    long collision_counter33 = 0;\n    long collision_counter34 = 0;\n    long\
    \ collision_counter35 = 0;\n    long collision_counter36 = 0;\n    long collision_counter37\
    \ = 0;\n    long collision_counter38 = 0;\n    long collision_counter39 = 0;\n\
    \    long collision_counter40 = 0;\n    long collision_counter41 = 0;\n    long\
    \ collision_counter42 = 0;\n    long collision_counter43 = 0;\n    long collision_counter44\
    \ = 0;\n    long collision_counter45 = 0;\n    long collision_counter46 = 0;\n\
    \    long collision_counter47 = 0;\n    long collision_counter48 = 0;\n    long\
    \ collision_counter49 = 0;\n    long collision_counter50 = 0;\n    long collision_counter51\
    \ = 0;\n    long collision_counter52 = 0;\n    long collision_counter53 = 0;\n\
    \    long collision_counter54 = 0;\n    long collision_counter55 = 0;\n    long\
    \ collision_counter56 = 0;\n    long collision_counter57 = 0;\n    long collision_counter58\
    \ = 0;\n    long collision_counter59 = 0;\n    long collision_counter60 = 0;\n\
    \    long collision_counter61 = 0;\n    long collision_counter62 = 0;\n    long\
    \ collision_counter\nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxrotks7j.d(82): Error: semicolon expected, not `unittest`\n/tmp/tmpxrotks7j.d(82):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpxrotks7j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collision\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjn93zm12.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpjn93zm12.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjn93zm12.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_left;\n\
    \    long collision_right;\n    long collision_left_right;\n    long collision_left_left;\n\
    \    long collision_left_left_right;\n    long collision_left_left_left_right;\n\
    \    long collision_left_left_left_left_right;\n    long collision_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_right;\n    long collision_left_left_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_right;\n    long collision_left_left_left_left_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left_left_left_left_left_left_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_right_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4xcy042h.d(36): Error: semicolon expected, not `unittest`\n/tmp/tmp4xcy042h.d(36):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4xcy042h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_left;\n\
    \    long collision_right;\n    long collision_left_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_right_right;\n    long collision_left_left_right;\n\
    \    long collision_left_left_left;\n    long collision_right_left_left;\n   \
    \ long collision_right_left_right;\n    long collision_left_right_left;\n    long\
    \ collision_left_right_right;\n    long collision_right_right_left;\n    long\
    \ collision_right_right_right;\n    long collision_left_left_left_right;\n   \
    \ long collision_left_left_left_left;\n    long collision_right_left_left_left;\n\
    \    long collision_right_left_left_right;\n    long collision_left_right_left_left;\n\
    \    long collision_left_right_left_right;\n    long collision_right_right_left_left;\n\
    \    long collision_right_right_left_right;\n    long collision_left_right_right_left;\n\
    \    long collision_left_right_right_right;\n    long collision_right_right_right_left;\n\
    \    long collision_right_right_right_right;\n    long collision_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left;\n    long collision_right_left_left_left_left;\n\
    \    long collision_right_left_left_left_right;\n    long collision_left_right_left_left_left;\n\
    \    long collision_left_right_left_left_right;\n    long collision_right_right_left_left_left;\n\
    \    long collision_right_right_left_left_right;\n    long collision_left_right_right_left_left;\n\
    \    long collision_left_right_right_left_right;\n    long collision_right_right_right_left_left;\n\
    \    long collision_right_right_right_left_right;\n    long collision_left_right_right_right_left;\n\
    \    long collision_left_right_right_right_right;\n    long collision_right_right_right_right_left;\n\
    \    long collision_right_right_right_right_right;\n    long collision_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left;\n    long collision_right_left_left_left_left;\n\
    \    long collision_right_left_left_left_right;\n    long collision_left_right_left_left_left;\n\
    \    long collision_left_right_left_left_right;\n    long collision_right_right_left_left_left;\n\
    \    long collision_right_right_left_left_right;\n    long collision_left_right_right_left_left;\n\
    \    long collision_left_right_right_left_right;\n    long collision_right_right_right_left_left;\n\
    \    long collision_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhnkafpk.d(76): Error: semicolon expected, not `unittest`\n/tmp/tmpnhnkafpk.d(76):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnhnkafpk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_length;\n\
    \    long collision_length_2;\n    long collision_length_3;\n    long collision_length_4;\n\
    \    long collision_length_5;\n    long collision_length_6;\n    long collision_length_7;\n\
    \    long collision_length_8;\n    long collision_length_9;\n    long collision_length_10;\n\
    \    long collision_length_11;\n    long collision_length_12;\n    long collision_length_13;\n\
    \    long collision_length_14;\n    long collision_length_15;\n    long collision_length_16;\n\
    \    long collision_length_17;\n    long collision_length_18;\n    long collision_length_19;\n\
    \    long collision_length_20;\n    long collision_length_21;\n    long collision_length_22;\n\
    \    long collision_length_23;\n    long collision_length_24;\n    long collision_length_25;\n\
    \    long collision_length_26;\n    long collision_length_27;\n    long collision_length_28;\n\
    \    long collision_length_29;\n    long collision_length_30;\n    long collision_length_31;\n\
    \    long collision_length_32;\n    long collision_length_33;\n    long collision_length_34;\n\
    \    long collision_length_35;\n    long collision_length_36;\n    long collision_length_37;\n\
    \    long collision_length_38;\n    long collision_length_39;\n    long collision_length_40;\n\
    \    long collision_length_41;\n    long collision_length_42;\n    long collision_length_43;\n\
    \    long collision_length_44;\n    long collision_length_45;\n    long collision_length_46;\n\
    \    long collision_length_47;\n    long collision_length_48;\n    long collision_length_49;\n\
    \    long collision_length_50;\n    long collision_length_51;\n    long collision_length_52;\n\
    \    long collision_length_53;\n    long collision_length_54;\n    long collision_length_55;\n\
    \    long collision_length_56;\n    long collision_length_57;\n    long collision_length_58;\n\
    \    long collision_length_59;\n    long collision_length_60;\n    long collision_length_61;\n\
    \    long collision_length_62;\n    long collision_length_63;\n    long collision_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz30puls0.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmpz30puls0.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpz30puls0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_left;\n\
    \    long collision_right;\n    long collision_left_right;\n    long collision_left_left;\n\
    \    long collision_right_left;\n    long collision_right_right;\n    long collision_left_left_right;\n\
    \    long collision_left_left_left;\n    long collision_right_left_left;\n   \
    \ long collision_right_left_right;\n    long collision_left_right_left;\n    long\
    \ collision_left_right_right;\n    long collision_right_right_left;\n    long\
    \ collision_right_right_right;\n    long collision_left_left_left_right;\n   \
    \ long collision_left_left_left_left;\n    long collision_right_left_left_left;\n\
    \    long collision_right_left_left_right;\n    long collision_left_right_left_left;\n\
    \    long collision_left_right_left_right;\n    long collision_right_right_left_left;\n\
    \    long collision_right_right_left_right;\n    long collision_left_right_right_left;\n\
    \    long collision_left_right_right_right;\n    long collision_right_right_right_left;\n\
    \    long collision_right_right_right_right;\n    long collision_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left;\n    long collision_right_left_left_left_left;\n\
    \    long collision_right_left_left_left_right;\n    long collision_left_right_left_left_left;\n\
    \    long collision_left_right_left_left_right;\n    long collision_right_right_left_left_left;\n\
    \    long collision_right_right_left_left_right;\n    long collision_left_right_right_left_left;\n\
    \    long collision_left_right_right_left_right;\n    long collision_right_right_right_left_left;\n\
    \    long collision_right_right_right_left_right;\n    long collision_left_right_right_right_left;\n\
    \    long collision_left_right_right_right_right;\n    long collision_right_right_right_right_left;\n\
    \    long collision_right_right_right_right_right;\n    long collision_left_left_left_left_left_right;\n\
    \    long collision_left_left_left_left_left;\n    long collision_right_left_left_left_left;\n\
    \    long collision_right_left_left_left_right;\n    long collision_left_right_left_left_left;\n\
    \    long collision_left_right_left_left_right;\n    long collision_right_right_left_left_left;\n\
    \    long collision_right_right_left_left_right;\n    long collision_left_right_right_left_left;\n\
    \    long collision_left_right_right_left_right;\n    long collision_right_right_right_left_left;\n\
    \    long collision_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhnkafpk.d(76): Error: semicolon expected, not `unittest`\n/tmp/tmpnhnkafpk.d(76):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnhnkafpk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_sum;\n\
    \    long collision_sum2;\n    long collision_sum3;\n    long collision_sum4;\n\
    \    long collision_sum5;\n    long collision_sum6;\n    long collision_sum7;\n\
    \    long collision_sum8;\n    long collision_sum9;\n    long collision_sum10;\n\
    \    long collision_sum11;\n    long collision_sum12;\n    long collision_sum13;\n\
    \    long collision_sum14;\n    long collision_sum15;\n    long collision_sum16;\n\
    \    long collision_sum17;\n    long collision_sum18;\n    long collision_sum19;\n\
    \    long collision_sum20;\n    long collision_sum21;\n    long collision_sum22;\n\
    \    long collision_sum23;\n    long collision_sum24;\n    long collision_sum25;\n\
    \    long collision_sum26;\n    long collision_sum27;\n    long collision_sum28;\n\
    \    long collision_sum29;\n    long collision_sum30;\n    long collision_sum31;\n\
    \    long collision_sum32;\n    long collision_sum33;\n    long collision_sum34;\n\
    \    long collision_sum35;\n    long collision_sum36;\n    long collision_sum37;\n\
    \    long collision_sum38;\n    long collision_sum39;\n    long collision_sum40;\n\
    \    long collision_sum41;\n    long collision_sum42;\n    long collision_sum43;\n\
    \    long collision_sum44;\n    long collision_sum45;\n    long collision_sum46;\n\
    \    long collision_sum47;\n    long collision_sum48;\n    long collision_sum49;\n\
    \    long collision_sum50;\n    long collision_sum51;\n    long collision_sum52;\n\
    \    long collision_sum53;\n    long collision_sum54;\n    long collision_sum55;\n\
    \    long collision_sum56;\n    long collision_sum57;\n    long collision_sum58;\n\
    \    long collision_sum59;\n    long collision_sum60;\n    long collision_sum61;\n\
    \    long collision_sum62;\n    long collision_sum63;\n    long collision\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy8qgmjoh.d(86): Error: semicolon expected, not `unittest`\n/tmp/tmpy8qgmjoh.d(86):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy8qgmjoh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q,\
    \ car_r, car_s, car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n    long car_i,\
    \ car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_r, car_s, car_t,\
    \ car_u, car_v, car_w, car_x, car_y, car_z;\n    long car_i, car_j, car_k, car_l,\
    \ car_m, car_n, car_o, car_p, car_q, car_r, car_s, car_t, car_u, car_v, car_w,\
    \ car_x, car_y, car_z;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o,\
    \ car_p, car_q, car_r, car_s, car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n\
    \    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_r,\
    \ car_s, car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n    long car_i, car_j,\
    \ car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_r, car_s, car_t, car_u,\
    \ car_v, car_w, car_x, car_y, car_z;\n    long car_i, car_j, car_k, car_l, car_m,\
    \ car_n, car_o, car_p, car_q, car_r, car_s, car_t, car_u, car_v, car_w, car_x,\
    \ car_y, car_z;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p,\
    \ car_q, car_r, car_s, car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n    long\
    \ car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q, car_r, car_s,\
    \ car_t, car_u, car_v, car_w, car_x, car_y, car_z;\n    \nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2hs79vis.d(28): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2hs79vis.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision_point;\n   \
    \ long collision_point_2;\n    long collision_point_3;\n    long collision_point_4;\n\
    \    long collision_point_5;\n    long collision_point_6;\n    long collision_point_7;\n\
    \    long collision_point_8;\n    long collision_point_9;\n    long collision_point_10;\n\
    \    long collision_point_11;\n    long collision_point_12;\n    long collision_point_13;\n\
    \    long collision_point_14;\n    long collision_point_15;\n    long collision_point_16;\n\
    \    long collision_point_17;\n    long collision_point_18;\n    long collision_point_19;\n\
    \    long collision_point_20;\n    long collision_point_21;\n    long collision_point_22;\n\
    \    long collision_point_23;\n    long collision_point_24;\n    long collision_point_25;\n\
    \    long collision_point_26;\n    long collision_point_27;\n    long collision_point_28;\n\
    \    long collision_point_29;\n    long collision_point_30;\n    long collision_point_31;\n\
    \    long collision_point_32;\n    long collision_point_33;\n    long collision_point_34;\n\
    \    long collision_point_35;\n    long collision_point_36;\n    long collision_point_37;\n\
    \    long collision_point_38;\n    long collision_point_39;\n    long collision_point_40;\n\
    \    long collision_point_41;\n    long collision_point_42;\n    long collision_point_43;\n\
    \    long collision_point_44;\n    long collision_point_45;\n    long collision_point_46;\n\
    \    long collision_point_47;\n    long collision_point_48;\n    long collision_point_49;\n\
    \    long collision_point_50;\n    long collision_point_51;\n    long collision_point_52;\n\
    \    long collision_point_53;\n    long collision_point_54;\n    long collision_point_55;\n\
    \    long collision_point_56;\n    long collision_point_57;\n    long collision_point_58;\n\
    \    long collision_point_59;\n    long collision_point_60;\n    long collision_point_61;\n\
    \    long collision_point_62;\n    long collision_point_63;\n    long collision_point_64;\n\
    \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppiqfuz9d.d(86): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppiqfuz9d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy3w2azh_.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpy3w2azh_.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy3w2azh_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_collisions = 0;\n    long car_collisions_left = 0;\n    long\
    \ car_collisions_right = 0;\n    long car_collisions_left_right = 0;\n    long\
    \ car_collisions_left_right_left = 0;\n    long car_collisions_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left = 0;\n    long car_collisions_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left = 0;\n \
    \   long car_collisions_left_right_left_right_left_right_left_right = 0;\n   \
    \ long car_collisions_left_right_left_right_left_right_left_right_left = 0;\n\
    \    long car_collisions_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = 0;\n    long car_collisions_left_right_left_right_left_\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy3w2azh_.d(45): Error: semicolon expected, not `unittest`\n/tmp/tmpy3w2azh_.d(45):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy3w2azh_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long car_i, car_j, car_k, car_l, car_m, car_n, car_o, car_p, car_q,\
    \ car_r, car_s, car_t, car_u, car_v, car_w, car_x, car_y, car_z, car_a, car_b,\
    \ car_c, car_d, car_e, car_f, car_g;\n    long car_collisions;\n    long car_collisions_count;\n\
    \    long car_collisions_count_count;\n    long car_collisions_count_count_count;\n\
    \    long car_collisions_count_count_count_count;\n    long car_collisions_count_count_count_count_count;\n\
    \    long car_collisions_count_count_count_count_count_count_count;\n    long\
    \ car_collisions_count_count_count_count_count_count_count_count_count;\n    long\
    \ car_collisions_count_count_count_count_count_count_count_count_count_count_count;\n\
    \    long car_collisions_count_count_count_count_count_count_count_count_count_count_count_count;\n\
    \    long car_collisions_count_count_count_count_count_count_count_count_count_count_count_count_count;\n\
    \    long car_collisions_count_count_count_count_count_count_count_count_count_count_count_count_count;\n\
    \    long car_collisions_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n\
    \    long car_collisions_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n\
    \    long car_collisions_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n\
    \    long car_collisions_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n\
    \    long car_collisions_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n\
    \    long car_collisions_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n\
    \    long car_collisions_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n\
    \    long car_collisions_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n\
    \    long car_collisions_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n\
    \    long car_collisions_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n\
    \    long car_collisions_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count;\n\
    \    long car_collisions_count_count_count_count_\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp02eykeyh.d(43): Error: semicolon expected, not `unittest`\n/tmp/tmp02eykeyh.d(43):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp02eykeyh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long collision_distance;\n    long collision_distance_sum;\n\
    \    long collision_distance_sum2;\n    long collision_distance_sum3;\n    long\
    \ collision_distance_sum4;\n    long collision_distance_sum5;\n    long collision_distance_sum6;\n\
    \    long collision_distance_sum7;\n    long collision_distance_sum8;\n    long\
    \ collision_distance_sum9;\n    long collision_distance_sum10;\n    long collision_distance_sum11;\n\
    \    long collision_distance_sum12;\n    long collision_distance_sum13;\n    long\
    \ collision_distance_sum14;\n    long collision_distance_sum15;\n    long collision_distance_sum16;\n\
    \    long collision_distance_sum17;\n    long collision_distance_sum18;\n    long\
    \ collision_distance_sum19;\n    long collision_distance_sum20;\n    long collision_distance_sum21;\n\
    \    long collision_distance_sum22;\n    long collision_distance_sum23;\n    long\
    \ collision_distance_sum24;\n    long collision_distance_sum25;\n    long collision_distance_sum26;\n\
    \    long collision_distance_sum27;\n    long collision_distance_sum28;\n    long\
    \ collision_distance_sum29;\n    long collision_distance_sum30;\n    long collision_distance_sum31;\n\
    \    long collision_distance_sum32;\n    long collision_distance_sum33;\n    long\
    \ collision_distance_sum34;\n    long collision_distance_sum35;\n    long collision_distance_sum36;\n\
    \    long collision_distance_sum37;\n    long collision_distance_sum38;\n    long\
    \ collision_distance_sum39;\n    long collision_distance_sum40;\n    long collision_distance_sum41;\n\
    \    long collision_distance_sum42;\n    long collision_distance_sum43;\n    long\
    \ collision_distance_sum44;\n    long collision_distance_sum45;\n    long collision_distance_sum46;\n\
    \    long collision_distance_sum47;\n    long collision_distance_sum48;\n    long\
    \ collision_distance_sum49;\n    long collision_distance_sum50;\n    long collision_distance_sum51;\n\
    \    long collision_distance_sum52;\n    long collision_distance_sum53;\n    long\
    \ collision_distance_sum54;\n    long collision_distance_sum55;\n    long collision_distance_sum56;\n\
    \    long collision_distance_sum57\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqr1des3z.d(77): Error: semicolon expected, not `unittest`\n/tmp/tmpqr1des3z.d(77):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpqr1des3z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    long k;\n    long collision;\n    long collision_distance;\n\
    \    long collision_distance_i;\n    long collision_distance_j;\n    long collision_distance_k;\n\
    \    long collision_distance_total;\n    long collision_distance_total_i;\n  \
    \  long collision_distance_total_j;\n    long collision_distance_total_k;\n  \
    \  long collision_distance_total_total;\n    long collision_distance_total_total_i;\n\
    \    long collision_distance_total_total_j;\n    long collision_distance_total_total_k;\n\
    \    long collision_distance_total_total_total;\n    long collision_distance_total_total_total_i;\n\
    \    long collision_distance_total_total_total_j;\n    long collision_distance_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total;\n    long collision_distance_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_j;\n    long collision_distance_total_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total_total;\n    long collision_distance_total_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_total_j;\n    long collision_distance_total_total_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total_total_total;\n    long collision_distance_total_total_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_total_total_j;\n    long\
    \ collision_distance_total_total_total_total_total_total_k;\n    long collision_distance_total_total_total_total_total_total_total;\n\
    \    long collision_distance_total_total_total_total_total_total_total_i;\n  \
    \  long collision_distance_total_total_total_total_total_total_total_j;\n    long\
    \ collision_distance_total_total_total_total_total_total_total_k;\n    long collision_distance_total_total_total_total_total_total_total_total;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_j;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_total;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_total_i;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_total_j;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_total_k;\n\
    \    long collision_distance_total_total_total_total_total_total_total_total_total_total;\n\
    \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_j2fehhl.d(64): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_j2fehhl.d", "-I/tmp"]\n'''
  stdout: b''
