name: HumanEval_145_order_by_points
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function which\
  \ sorts the given array of integers\n    in ascending order according to the sum\
  \ of their digits.\n    Note: if there are several items with similar sum of their\
  \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
  \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
  \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
  \ nums) \n"
tests: "unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
  \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
  \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
  \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
  \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L,\
  \ -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
  \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L,\
  \ 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
  \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[nums.length];\n    long sum = 0;\n\
    \    int index = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not an answer\
    \ to the question. He wants to sort an array of integers based on their sum.\n\
    <|/ c |>\n<| c |>\nI agree with you. But the question was \"Write a function which\
    \ sorts the given array of integers in ascending order according to the sum of\
    \ their digits.\"\n<|/ c |>\n<| c |>\nI agree with you, but I believe that your\
    \ answer does not answer the question. He wants to sort the array in ascending\
    \ order based on the sum of the digits. Your answer sorts the array in descending\
    \ order based on the sum of the digits. He wants to sort the array in ascending\
    \ order based on the sum of the digits. He also wants to sort the array in descending\
    \ order based on the sum of the digits. He also wants to sort the array in ascending\
    \ order based on the sum of the digits. He also wants to sort the array in descending\
    \ order based on the sum of the digits. He also wants to sort the array in ascending\
    \ order based on the sum of the digits. He also wants to sort the array in descending\
    \ order based on the sum of the digits. He also wants to sort the array in ascending\
    \ order based on the sum of the digits. He also wants to sort the array in descending\
    \ order based on the sum of the digits. He also wants to sort the array in ascending\
    \ order based on the sum of the digits. He also wants to sort the array in descending\
    \ order based on the sum of the digits. He also wants to sort the array in ascending\
    \ order based on the sum of the digits. He also wants to sort the array in descending\
    \ order based on the sum of the digits. He also wants to sort the array in ascending\
    \ order based on the sum of the digits. He also wants to sort the array in descending\
    \ order based on the sum of the digits. He also wants to sort the array in ascending\
    \ order based on the sum of the digits. He also wants to sort the array in descending\
    \ order based on the sum of the digits. He also wants to sort the array in ascending\
    \ order based on the sum of the digits. He also wants to sort the array in descending\
    \ order based on the sum of the digits. He also wants to sort the array in ascending\
    \ order based on the sum of the digits. He also wants to sort the ", "{\n    long[]\
    \ result = new long[nums.length];\n    int sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,algorithm,sorting |>\n<| c\
    \ |>\nThe question asks for the sum of digits, not their absolute value\n<|/ c\
    \ |>\n<| c |>\nI missed that part in the question. Thanks for pointing it out.\
    \ I've updated the answer.\n<|/ c |>\n<| c |>\nThis is not the correct answer.\
    \ Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\n\
    I believe it is. I tested it and it works. Can you please elaborate on what is\
    \ not correct?\n<|/ c |>\n<| c |>\nThe question asks for the sum of digits, not\
    \ their absolute value\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static void\
    \ main(String[] args) {\n    int[] arr = {1, 11, -1, -11 ,-12};\n    Arrays.sort(arr);\n\
    \    System.out.println(Arrays.toString(arr));\n}\n</code>\n<|/ a tags=arrays,algorithm,sorting\
    \ |>\n<| c |>\nThis is not the correct answer. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nI believe it is. I tested it and\
    \ it works. Can you please elaborate on what is not correct?\n<|/ c |>\n<| c |>\n\
    The question asks for the sum of digits, not their absolute value\n<|/ c |>\n\
    <| a tags=arrays,algorithm,sorting |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = {1, 11, -1, -11 ,-12};\n    Arrays.sort(arr);\n   \
    \ System.out.println(Arrays.toString(arr));\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThis is not the correct answer. Try it with `order_by_points([1L, 11L,\
    \ -1L, -11L, -12L])`\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(; i < nums.length; ++i)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[nums.length];\n    int sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;", "{\n \
    \   long[] result = new long[nums.length];\n    int index = 0;\n    long sum =\
    \ 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| c |>\nThis doesn't\
    \ work if the array contains negative numbers. Try it with `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])`.\n<|/ c |>\n<| c |>\nYes, I forgot to mention that. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nI added a version that works with negative\
    \ numbers. I tested it and it works.\n<|/ c |>\n<| a tags=sorting,arrays,c# |>\n\
    <code>", "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n \
    \   int i = 0;\n    for(; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there are two or\
    \ more items with the same sum.\n<|/ c |>\n<| c |>\nYes, you are right. I didn't\
    \ think about that case. Thanks for pointing it out. I've updated my answer.\n\
    <|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = { 1, 11, -1, -11 };\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if there are two or\
    \ more items with the same sum.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n  \
    \  {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result,\
    \ (a, b) -> {\n        return a.compareTo(b);\n    });\n    return result;\n}\n\
    </code>\n<|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java |>\n\
    <code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++){\n\
    \        sum += nums[i];\n        result[index++] = sum;\n    }\n    for(int i\
    \ = 0; i < nums.length; i++){\n        sum -= nums[i];\n        result[index++]\
    \ = sum;\n    }\n    for(int i = 0; i < nums.length; i++){\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis is not an answer to the question. He asked for a\
    \ solution in O(n) time and O(1) space.\n<|/ c |>\n<| c |>\nThis is not an answer\
    \ to the question. He asked for a solution in O(n) time and O(1) space.\n<|/ c\
    \ |>\n<| c |>\nThis is not an answer to the question. He asked for a solution\
    \ in O(n) time and O(1) space.\n<|/ c |>\n<| c |>\nThis is not an answer to the\
    \ question. He asked for a solution in O(n) time and O(1) space.\n<|/ c |>\n<|\
    \ c |>\nThis is not an answer to the question. He asked for a solution in O(n)\
    \ time and O(1) space.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(; i < nums.length;\
    \ ++i)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n\
    <| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    long sum = 0;\n\
    \    for(long num : nums)\n    {\n        sum += num;\n        result[i] = sum;\n\
    \        i++;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,sorting,java |>\n<| c |>\nThis solution doesn't work if there\
    \ are two or more numbers with the same sum.\n<|/ c |>\n<| c |>\nThis solution\
    \ doesn't work if there are two or more numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nThis solution doesn't work if there are two or more numbers with the\
    \ same sum.\n<|/ c |>\n<| c |>\nThis solution doesn't work if there are two or\
    \ more numbers with the same sum.\n<|/ c |>\n<| c |>\nThis solution doesn't work\
    \ if there are two or more numbers with the same sum.\n<|/ c |>\n<| a tags=arrays,sorting,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int n = nums.length;\n    int sum = 0;\n    for(int i = 0; i < n; ++i)\n\
    \    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++){\n        sum +=\
    \ nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    int i = 0;\n    for(; i < nums.length; ++i)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis\
    \ is not the correct solution. `Arrays.sort` sorts the array in place. Hence the\
    \ return type should be `void`.\n<|/ c |>\n<| c |>\nThe return type is void because\
    \ Arrays.sort sorts the array in place. Hence the return type should be void.\n\
    <|/ c |>\n<| c |>\nThe return type is void because Arrays.sort sorts the array\
    \ in place. Hence the return type should be void.\n<|/ c |>\n<| c |>\nThe return\
    \ type is void because Arrays.sort sorts the array in place. Hence the return\
    \ type should be void.\n<|/ c |>\n<| c |>\nThe return type is void because Arrays.sort\
    \ sorts the array in place. Hence the return type should be void.\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    int i = 0;\n    \n    for(int j=0;\
    \ j<nums.length; j++)\n    {\n        sum += nums[j];\n        result[i] = sum;\n\
    \        i++;\n    }\n    \n    for(int j=0; j<nums.length; j++)\n    {\n    \
    \    long temp = result[j];\n        result[j] = result[i];\n        result[i]\
    \ = temp;\n        i++;\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=arrays,sorting,java |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while (i < nums.length)\n    {\n        sum += nums[i];\n\
    \        while (i < nums.length && sum > 0)\n        {\n            sum += nums[i];\n\
    \            i++;\n        }\n        result[j] = sum;\n        j++;\n       \
    \ sum = 0;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,c#,arrays\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    int i = 0;\n    for(; i < nums.length; ++i)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int i = 0;\n    \n    while (i < nums.length)\n    {\n\
    \        sum += nums[i];\n        result[i] = sum;\n        i++;\n    }\n    \n\
    \    Arrays.sort(result);\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java\
    \ |>\n<| c |>\nThis doesn't answer the question of how to sort an array of integers\
    \ based on the sum of their digits.\n<|/ c |>\n<| c |>\nI guess I misunderstood\
    \ the question. I'll edit my answer.\n<|/ c |>\n<| c |>\nI edited my answer to\
    \ include a solution that sorts based on sum of digits. I hope it helps.\n<|/\
    \ c |>\n<| c |>\nThis answer doesn't work if there are two or more numbers with\
    \ the same sum.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that\
    \ sorts based on sum of digits. I hope it helps.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    int i = 0;\n    for(long num : nums)\n    {\n        sum += num;\n\
    \        result[i] = sum;\n        i++;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a |>\n<| a tags=sorting,arrays,java |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  int i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i < nums.length)\n\
    \    {\n        sum += nums[i];\n        result[j++] = sum;\n        i++;\n  \
    \  }\n    while(j < result.length)\n    {\n        result[j--] = nums[i];\n  \
    \      i++;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    I appreciate your efforts, but this doesn't answer the question. Your code doesn't\
    \ even compile.\n<|/ c |>\n<| c |>\nIt compiles fine for me in DartPad. Can you\
    \ please elaborate on what doesn't work?\n<|/ c |>\n<| c |>\nThe question was\
    \ about sorting an array of integers in ascending order according to the sum of\
    \ their digits. Your code doesn't do that. It sorts them in descending order according\
    \ to the sum of their digits.\n<|/ c |>\n<| c |>\nOh I see. Thanks for clarifying.\n\
    <|/ c |>\n<| a tags=arrays,sorting,dart |>\n<code>", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(; i < nums.length;\
    \ ++i)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    int index = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++){\n        sum += nums[i];\n \
    \       result[index++] = sum;\n    }\n    for(int i = 0; i < nums.length; i++){\n\
    \        sum -= nums[i];\n        result[index++] = sum;\n    }\n    for(int i\
    \ = 0; i < nums.length; i++){\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    for(int i = 0; i < nums.length; i++){\n        sum -= nums[i];\n\
    \        result[index++] = sum;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=sorting,algorithm,arrays,java |>\n<| a tags=sorting,algorithm,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int i = 0;\n    for(; i < nums.length; ++i)\n    {\n \
    \       sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    This doesn't work if there are two or more numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nIt does work if there are two or more numbers with the same sum. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\nI tested it and it does work. Try it yourself.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are two or more numbers with the same\
    \ sum. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it and it does work. Try\
    \ it yourself.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis\
    \ doesn't work if there are two or more numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if there are two or more numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are two or more numbers with the\
    \ same sum.\n<|/ c |>\n<| c |>\nThis doesn't work if there are two or more numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\nThis doesn't work if there are two or\
    \ more numbers with the same sum.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++){\n \
    \       sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| a tags=java,arrays,sorting\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int index = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| c |>\n\
    The question was about sorting an array of integers, not longs.\n<|/ c |>\n<|\
    \ c |>\nThe question was about sorting an array of integers, not longs.\n<|/ c\
    \ |>\n<| c |>\nThe question was about sorting an array of integers, not longs.\n\
    <|/ c |>\n<| c |>\nThe question was about sorting an array of integers, not longs.\n\
    <|/ c |>\n<| c |>\nThe question was about sorting an array of integers, not longs.\n\
    <|/ c |>\n<| a tags=arrays,sorting,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while(i < nums.length)\n    {\n        sum += nums[i];\n\
    \        result[j++] = sum;\n        i++;\n    }\n    while(j < result.length)\n\
    \    {\n        result[j--] = nums[i];\n        i++;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThe second while loop\
    \ should be `while(j < result.length)` instead of `while(j > 0)`\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| a tags=java,arrays,sorting\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work\
    \ if the array contains negative numbers. `order_by_points([1L, 11L, -1L, -11L,\
    \ -12L])` returns `[-11L, -1L, 1L, -12L, 11L]`\n<|/ c |>\n<| c |>\nYes, I didn't\
    \ see that case. Thanks for pointing it out. I've updated the answer.\n<|/ c |>\n\
    <| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;", "{\n    long[]\
    \ result = new long[nums.length];\n    int j = 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[j]\
    \ = sum;\n        j++;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,algorithm,java |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport\
    \ java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis\
    \ solution does not work for negative numbers. For example: order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L]) returns [-1L, -11L, 1L, -12L, 11L]\n<|/ c |>\n<| c |>\n\
    This solution does not work for negative numbers. For example: order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L]) returns [-1L, -11L, 1L, -12L, 11L]\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis\
    \ doesn't work if there are two or more numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nYes, you are right. I've updated the answer to include a solution for\
    \ that case.\n<|/ c |>\n<| c |>\nThis solution doesn't work if there are two or\
    \ more numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, you are right. I've\
    \ updated the answer to include a solution for that case.\n<|/ c |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = {1, 11,\
    \ -1, -11, -12};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work if there are two or\
    \ more numbers with the same sum.\n<|/ c |>\n<| c |>\nThis doesn't work if there\
    \ are two or more numbers with the same sum.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  long sum = 0;\n    int i = 0;\n    for(; i < nums.length; ++i)\n    {\n   \
    \     sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI do not understand\
    \ why you used the Arrays.sort() method. Can you explain why you used it?\n<|/\
    \ c |>\n<| c |>\nThe Arrays.sort() method sorts the given array in ascending order.\
    \ Since you want the sum of the digits to be in ascending order, you need to sort\
    \ the array in ascending order according to the sum of the digits. To do this,\
    \ I used the Arrays.sort() method. Hope this helps.\n<|/ c |>\n<| c |>\nI understand\
    \ now. Thank you for your help!\n<|/ c |>\n<| a tags=java,arrays |>\n<code>\n\
    public class Solution {", "{\n    long[] result = new long[nums.length];\n   \
    \ int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,sorting,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;", "{\n    long[] result = new long[nums.length];\n   \
    \ long sum = 0;\n    int i = 0;\n    for(long n : nums)\n    {\n        sum +=\
    \ n;\n        result[i] = sum;\n        i++;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    I believe this solution will fail if there are two or more numbers with the same\
    \ sum. For example, `order_by_points([1L, 11L, -1L, -11L, -12L])` will result\
    \ in `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L, -11L, -11L, 1L, -12L]`.\n\
    <|/ c |>\n<| c |>\nYes, you are right. I just added a note about this in the answer.\
    \ Thanks.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(; i < nums.length; ++i)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=java,arrays,sorting |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;", "{\n    long[] result\
    \ = new long[nums.length];\n    int i = 0;\n    long sum = 0;\n    while(i < nums.length)\n\
    \    {\n        sum += nums[i];\n        result[i] = sum;\n        i++;\n    }\n\
    \    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work. Try it with `order_by_points([1L, 11L, -1L,\
    \ -11L, -12L])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while(i < nums.length)\n    {\n        sum += nums[i];\n\
    \        result[j] = sum;\n        i++;\n        j++;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting it. I just added the test case to the\
    \ answer. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThe test case is wrong.\
    \ Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| c |>\n\
    Yes, I tested it before posting it. I just added the test case to the answer.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI tested it before posting it.\
    \ I just added the test case to the answer. Thanks for pointing it out.\n<|/ c\
    \ |>\n<| a tags=sorting,algorithm,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    \n    while(i\
    \ < nums.length)\n    {\n        sum += nums[i];\n        result[i] = sum;\n \
    \       i++;\n    }\n    \n    for(int j = 0; j < result.length; j++)\n    {\n\
    \        for(int k = 0; k < nums.length; k++)\n        {\n            if(result[j]\
    \ == nums[k])\n            {\n                long temp = nums[k];\n         \
    \       nums[k] = result[j];\n                result[j] = temp;\n            }\n\
    \        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;", "{\n    long[] result =\
    \ new long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ -= nums[i];\n        result[index++] = sum;\n    }\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        sum -= nums[i];\n  \
    \      result[index++] = sum;\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays\
    \ |>\n<| c |>\nThis solution does not work for negative numbers. I believe it\
    \ can be fixed by adding `if (nums[i] < 0) return nums;` as the first line of\
    \ the `for` loops.\n<|/ c |>\n<| c |>\nThis solution does not work for negative\
    \ numbers. I believe it can be fixed by adding `if (nums[i] < 0) return nums;`\
    \ as the first line of the `for` loops.\n<|/ c |>\n<| c |>\nThis solution does\
    \ not work for negative numbers. I believe it can be fixed by adding `if (nums[i]\
    \ < 0) return nums;` as the first line of the `for` loops.\n<|/ c |>\n<| a |>\n\
    <code>\n#include <iostream>\n#include <vector>\n#include <algorithm>", "{\n  \
    \  long[] result = new long[nums.length];\n    long sum = 0;\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while(i < nums.length)\n    {\n        sum = nums[i] -\
    \ '0';\n        if(sum < 0)\n        {\n            sum = (sum * -1) + 10;\n \
    \       }\n        while(j < nums.length)\n        {\n            if(sum == nums[j]\
    \ - '0')\n            {\n                sum = (sum * -1) + 10;\n            \
    \    j++;\n            }\n            else\n            {\n                break;\n\
    \            }\n        }\n        if(j == nums.length)\n        {\n         \
    \   result[i] = sum;\n            i++;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,algorithm,c# |>\n<code>\nusing\
    \ System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(; i < nums.length; ++i)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nThe question was about sorting\
    \ an array of integers, not an array of longs.\n<|/ c |>\n<| c |>\nThe question\
    \ was about sorting an array of integers, not an array of longs.\n<|/ c |>\n<|\
    \ c |>\nThe question was about sorting an array of integers, not an array of longs.\n\
    <|/ c |>\n<| c |>\nThe question was about sorting an array of integers, not an\
    \ array of longs.\n<|/ c |>\n<| c |>\nThe question was about sorting an array\
    \ of integers, not an array of longs.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n  \
    \  {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,java |>\n\
    <| c |>\nI believe this solution does not work if there are two or more numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\nYes, you are right. I've added a note\
    \ to my answer.\n<|/ c |>\n<| c |>\nThe question states that \"the sum of their\
    \ digits\" is to be used.\n<|/ c |>\n<| c |>\nThe question states that \"the sum\
    \ of their digits\" is to be used.\n<|/ c |>\n<| c |>\nThe question states that\
    \ \"the sum of their digits\" is to be used.\n<|/ c |>\n<| a tags=arrays,sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    int\
    \ i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i < nums.length)\n    {\n\
    \        sum = sum + nums[i];\n        if(sum > 0)\n        {\n            result[j]\
    \ = sum;\n            i++;\n            j++;\n        }\n        else\n      \
    \  {\n            sum -= nums[i];\n        }\n    }\n    while(j < result.length)\n\
    \    {\n        result[j] = sum;\n        j++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=c#,algorithm,sorting |>\n<| c |>\nThis doesn't work. Try it\
    \ with `order_by_points([1L, 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nIt works.\
    \ I tested it before posting it. What is the problem you are facing?\n<|/ c |>\n\
    <| c |>\nIt doesn't work for `order_by_points([1L, 11L, -1L, -11L, -12L])`\n<|/\
    \ c |>\n<| c |>\nI tested it before posting it. What is the problem you are facing?\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `order_by_points([1L, 11L, -1L, -11L, -12L])`\n\
    <|/ c |>\n<| a tags=c#,algorithm,sorting |>\n<code>\npublic static void Main(string[]\
    \ args)\n{\n    int[] arr = new int[] { 1, 11, -1, -11, -12, 12 };\n    Array.Sort(arr);\n\
    \    foreach (int i in arr)\n    {\n        Console.WriteLine(i);\n    }\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nIt works. I tested it before posting\
    \ it. What is the problem you are facing?\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for `order_by_points([1L, 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nIt works.\
    \ I tested it before posting it. What is the problem you are facing?\n<|/ c |>\n\
    <| c |>\nIt doesn't work for `order_by_points([1L, 11L, -1L, -11L, -12L])`\n<|/\
    \ c |>\n<| a tags=c#,algorithm,sorting |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.", "{\n    long[] result = new long[nums.length];\n    int j = 0;\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n        result[j] = sum;\n        j++;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i < nums.length)\n\
    \    {\n        sum = nums[i] - '0';\n        if(sum > 0)\n        {\n       \
    \     result[j] = nums[i];\n            j++;\n        }\n        i++;\n    }\n\
    \    while(j < result.length)\n    {\n        result[j] = result[j-1];\n     \
    \   j++;\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting\
    \ |>\n<| a tags=java,arrays,sorting |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = new int[]{1, 11, -1, -11, -12};\n    Arrays.sort(arr);\n\
    \    System.out.println(Arrays.toString(arr));\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new\
    \ long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport\
    \ java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int i = 0;\n    for(; i < nums.length; ++i)\n    {\n \
    \       sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not the correct\
    \ answer. Your code returns `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L, -11L,\
    \ 1L, -12L, 11L]`.\n<|/ c |>\n<| c |>\nI tested it and it works. I believe it\
    \ does because of the way I sort the array. Did you try it?\n<|/ c |>\n<| c |>\n\
    Yes, I tested it. I believe it does because of the way I sort the array. Did you\
    \ try it?\n<|/ c |>\n<| c |>\nI tested it and it works. I believe it does because\
    \ of the way I sort the array. Did you try it?\n<|/ c |>\n<| c |>\nYes, I tested\
    \ it. I believe it does because of the way I sort the array. Did you try it?\n\
    <|/ c |>\n<| a tags=java,arrays,sorting |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,algorithm,java |>\n<| c |>\nThis doesn't work if\
    \ there are two numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ I've updated the answer to take that into account.\n<|/ c |>\n<| a tags=sorting,algorithm,java\
    \ |>\nI wrote this in C#, hope it helps.\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n \
    \   int sum = 0;\n    while(i < nums.length)\n    {\n        sum = nums[i++] +\
    \ nums[j++];\n        if(sum < 0)\n        {\n            sum *= -1;\n       \
    \     i++;\n        }\n        if(sum > 0)\n        {\n            result[j++]\
    \ = sum;\n        }\n    }\n    for(int k = 0; k < j; k++)\n    {\n        result[k]\
    \ = nums[k];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nThis is not the correct answer.\
    \ Your code will sort `[1L, 11L, -1L, -11L, -12L]` into `[-1L, -11L, 1L, -12L,\
    \ 11L]` but OP wants `[-1L, -11L, 1L, -12L, 11L]`\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine. Maybe I misunderstood the question. Anyway, I added a\
    \ comment to the question asking for clarification.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine. Maybe I misunderstood the question. Anyway, I added a\
    \ comment to the question asking for clarification.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine. Maybe I misunderstood the question. Anyway, I added a\
    \ comment to the question asking for clarification.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine. Maybe I misunderstood the question. Anyway, I added a\
    \ comment to the question asking for clarification.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int j = 0;\n    int sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[j] = sum;\n        j++;\n    }\n\
    \    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,java\
    \ |>\n<| c |>\nThis doesn't work if there are two or more items with the same\
    \ sum.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting.\n<|/ c |>\n\
    <| c |>\nIt doesn't work if there are two or more items with the same sum.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work if there are two or more items with the same\
    \ sum.\n<|/ c |>\n<| c |>\nIt doesn't work if there are two or more items with\
    \ the same sum.\n<|/ c |>\n<| a tags=arrays,sorting,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work.\
    \ `order_by_points([1L, 11L, -1L, -11L, -12L])` returns `[-1L, -11L, 1L, -12L,\
    \ 11L]` instead of `[-1L, -11L, -12L, 1L, 11L]`.\n<|/ c |>\n<| c |>\nI didn't\
    \ test the code but I think it works. I tested it on `order_by_points([1L, 11L,\
    \ -1L, -11L, -12L])` which returns `[-1L, -11L, -12L, 1L, 11L]`.\n<|/ c |>\n<|\
    \ c |>\nI tested it on `order_by_points([1L, 11L, -1L, -11L, -12L])` which returns\
    \ `[-1L, -11L, -12L, 1L, 11L]`. Please test it on your machine.\n<|/ c |>\n<|\
    \ c |>\nI tested it on `order_by_points([1L, 11L, -1L, -11L, -12L])` which returns\
    \ `[-1L, -11L, -12L, 1L, 11L]`. Please test it on your machine.\n<|/ c |>\n<|\
    \ c |>\nI tested it on `order_by_points([1L, 11L, -1L, -11L, -12L])` which returns\
    \ `[-1L, -11L, -12L, 1L, 11L]`. Please test it on your machine.\n<|/ c |>\n<|\
    \ a tags=algorithm,sorting,java,arrays |>\nI wrote a solution in Python that works\
    \ in O(n) time complexity and O(n) space complexity. \n<code>\ndef order_by_points(nums):\n\
    \    sums = [0] * len(nums)\n    sums[0] = nums[0]\n    for i in range(1, len(nums)):\n\
    \        sums[i] += nums[i]\n    sums = sorted(sums)\n    sums = [sums[i] - sums[i\
    \ - 1] for i in range(1, len(sums))]\n    return sums\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=algorithm,sorting,java,arrays |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while(i < nums.length)\n    {\n        sum += nums[i];\n\
    \        if(sum > 0)\n        {\n            result[j] = sum;\n            j++;\n\
    \        }\n        sum -= nums[i];\n        i++;\n    }\n    while(j < result.length)\n\
    \    {\n        result[j] = sum;\n        j++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=sorting,arrays,c# |>\n<| a tags=sorting,arrays,c# |>\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result, 0, index);\n \
    \   return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n\
    <| a |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    long sum = 0;\n    for(int j=0; j<nums.length; j++)\n   \
    \ {\n        sum += nums[j];\n        result[i] = sum;\n        i++;\n    }\n\
    \    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=java,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])` returns `[-11L, -1L, -11L, 1L, -12L, 11L]`\n<|/ c |>\n\
    <| c |>\nThis doesn't work for negative numbers. `order_by_points([-1L, -11L,\
    \ 1L, -12L, 11L])` returns `[-11L, -1L, -11L, 1L, -12L, 11L]`\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work for negative numbers. `order_by_points([-1L, -11L, 1L,\
    \ -12L, 11L])` returns `[-11L, -1L, -11L, 1L, -12L, 11L]`\n<|/ c |>\n<| c |>\n\
    This doesn't work for negative numbers. `order_by_points([-1L, -11L, 1L, -12L,\
    \ 11L])` returns `[-11L, -1L, -11L, 1L, -12L, 11L]`\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `order_by_points([-1L, -11L, 1L, -12L, 11L])` returns\
    \ `[-11L, -1L, -11L, 1L, -12L, 11L]`\n<|/ c |>\n<| a tags=java,sorting,arrays\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++){\n\
    \        sum += nums[i];\n        result[index] = sum;\n        index++;\n   \
    \ }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,java\
    \ |>\n<| a tags=sorting,algorithm,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    int sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result, (a, b) -> {\n\
    \        int c = a.longValue() - b.longValue();\n        if(c != 0)\n        \
    \    return c;\n        return a.intValue() - b.intValue();\n    });\n    return\
    \ result;\n}\n</code>\n<|/ a tags=java,sorting,arrays |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    long sum = 0;\n    for(long num : nums)\n    {\n        sum\
    \ += num;\n        result[i++] = sum;\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with\
    \ `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine. Can you give me an example where it doesn't work?\n<|/\
    \ c |>\n<| c |>\nI tested it and it works fine. Can you give me an example where\
    \ it doesn't work?\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you\
    \ give me an example where it doesn't work?\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works fine. Can you give me an example where it doesn't work?\n<|/ c |>\n\
    <| a tags=arrays,sorting,java |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;", "{\n    long[] result =\
    \ new long[nums.length];\n    int[] digits = new int[nums.length];\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        digits[i] = nums[i]\
    \ % 10;\n        sum += digits[i];\n    }\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = digits[i];\n        result[i] += sum;\n   \
    \ }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=java,arrays\
    \ |>\n<| c |>\nI believe this solution does not work if there are two or more\
    \ numbers with the same sum.\n<|/ c |>\n<| c |>\nIt does work. Try it out with\
    \ [1L, 11L, -1L, -11L, -12L]\n<|/ c |>\n<| c |>\nI tested it and it works. I guess\
    \ I misunderstood the question. Sorry.\n<|/ c |>\n<| c |>\nI tested it and it\
    \ works. I guess I misunderstood the question. Sorry.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I guess I misunderstood the question. Sorry.\n<|/ c |>\n<|\
    \ a tags=java,arrays |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result\
    \ = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,sorting,java |>\n<| c |>\nThis is not the best solution, since\
    \ it sorts the array in place, which is not the best solution in terms of performance.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I didn't want to change OP's code too\
    \ much. I'll add some comments to my answer.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, but I didn't want to change OP's code too much. I'll add some comments\
    \ to my answer.\n<|/ c |>\n<| c |>\nI agree with you, but I didn't want to change\
    \ OP's code too much. I'll add some comments to my answer.\n<|/ c |>\n<| c |>\n\
    I agree with you, but I didn't want to change OP's code too much. I'll add some\
    \ comments to my answer.\n<|/ c |>\n<| a tags=arrays,sorting,java |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    int\
    \ j = 0;\n    int k = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[j++] = sum;\n    }\n  \
    \  for (int i = 0; i < nums.length; i++)\n    {\n        sum -= nums[i];\n   \
    \     result[k++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport\
    \ java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if there are\
    \ two or more numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, I noticed that\
    \ after I posted my answer. Thanks for pointing that out. I've updated my answer\
    \ accordingly.\n<|/ c |>\n<| c |>\nThis doesn't work if there are two or more\
    \ numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, I noticed that after I posted\
    \ my answer. Thanks for pointing that out. I've updated my answer accordingly.\n\
    <|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=java,sorting,arrays |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\nYes, I know. That's why I wrote \"Note\"\
    . Anyway, I added a solution for that case too.\n<|/ c |>\n<| c |>\nI added a\
    \ solution for that case too.\n<|/ c |>\n<| c |>\nI added a solution for that\
    \ case too.\n<|/ c |>\n<| c |>\nI added a solution for that case too.\n<|/ c |>\n\
    <| a |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    long sum = 0;\n    for(long num : nums)\n    {\n        sum\
    \ += num;\n        result[i++] = sum;\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\n\
    This solution doesn't work for negative numbers. I tested it on [-10, -5, -4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4, 5] and got [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4, 5] instead of [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3,\
    \ -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4, 5] [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4, 5] [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4, 5] [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4, 5] [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4, 5] [-10, -5, -4, -3, -2, -1, ", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| c |>\n\
    This doesn't work if you have negative numbers. For example, `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])` returns `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L,\
    \ -11L, -11L, 1L, -12L]`.\n<|/ c |>\n<| c |>\nI believe that this is because of\
    \ the way the array is sorted. For example, `order_by_points([-1L, -11L, 1L, -12L,\
    \ 11L])` returns `[-1L, -11L, -11L, 1L, -12L]` instead of `[-1L, -11L, 1L, -12L,\
    \ 11L]`.\n<|/ c |>\n<| c |>\nYes, I believe that this is because of the way the\
    \ array is sorted. For example, `order_by_points([-1L, -11L, 1L, -12L, 11L])`\
    \ returns `[-1L, -11L, -11L, 1L, -12L]` instead of `[-1L, -11L, 1L, -12L, 11L]`.\n\
    <|/ c |>\n<| c |>\nI believe that this is because of the way the array is sorted.\
    \ For example, `order_by_points([-1L, -11L, 1L, -12L, 11L])` returns `[-1L, -11L,\
    \ -11L, 1L, -12L]` instead of `[-1L, -11L, 1L, -12L, 11L]`.\n<|/ c |>\n<| c |>\n\
    I believe that this is because of the way the array is sorted. For example, `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])` returns `[-1L, -11L, -11L, 1L, -12L]` instead of `[-1L,\
    \ -11L, 1L, -12L, 11L]`.\n<|/ c |>\n<| a tags=java,arrays,sorting |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=arrays,algorithm,sorting,java |>\n<|\
    \ c |>\nThis is not the correct answer. Your code will sort `[-1L, -11L, 1L, -12L,\
    \ 11L]` into `[-1L, -11L, -12L, 1L, 11L]` instead of `[-1L, -11L, 1L, -12L, 11L]`.\n\
    <|/ c |>\n<| c |>\nI agree with you. I've updated my answer to reflect this fact.\n\
    <|/ c |>\n<| c |>\nThis is not the correct answer. Your code will sort `[-1L,\
    \ -11L, 1L, -12L, 11L]` into `[-1L, -11L, -12L, 1L, 11L]` instead of `[-1L, -11L,\
    \ 1L, -12L, 11L]`.\n<|/ c |>\n<| c |>\nI agree with you. I've updated my answer\
    \ to reflect this fact.\n<|/ c |>\n<| a tags=arrays,algorithm,sorting,java |>\n\
    <code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i < nums.length)\n\
    \    {\n        sum += nums[i];\n        if(sum > 0)\n        {\n            result[j]\
    \ = sum;\n            j++;\n        }\n        i++;\n    }\n    while(j < result.length)\n\
    \    {\n        result[j] = result[j-1];\n        j++;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| c |>\nThis doesn't work if there\
    \ are multiple items with the same sum.\n<|/ c |>\n<| c |>\nYes, I noticed that\
    \ and fixed it before you commented on it. Thanks for pointing that out.\n<|/\
    \ c |>\n<| c |>\nI fixed it now. Thanks for pointing that out.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if there are multiple items with the same sum.\n<|/ c\
    \ |>\n<| c |>\nI fixed it now. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "{\n    long[] result = new long[nums.length];\n    long sum =\
    \ 0;\n    int i = 0;\n    for(; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| c |>\nThis doesn't answer the\
    \ question. OP wants to sort by sum of digits, not by their absolute value.\n\
    <|/ c |>\n<| c |>\nYes, I missed that part. Thanks for pointing out. I'll edit\
    \ my answer.\n<|/ c |>\n<| c |>\nThis doesn't answer the question. OP wants to\
    \ sort by sum of digits, not by their absolute value.\n<|/ c |>\n<| c |>\nI see\
    \ your point. I've edited my answer accordingly.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to sort by sum of digits, not by their absolute\
    \ value.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        long tmp = nums[i];\n        for(int j = i; j < nums.length; j++)\n\
    \        {\n            if(tmp + nums[j] < sum)\n            {\n             \
    \   tmp = nums[j];\n            }\n        }\n        result[i] = tmp;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    int\
    \ n = nums.length;\n    long[] sum = new long[n];\n    for(int i = 0; i < n; ++i)\n\
    \    {\n        sum[i] = nums[i]%10;\n    }\n    Arrays.sort(sum);\n    for(int\
    \ i = 0; i < n; ++i)\n    {\n        result[i] = nums[sum[i]];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int index\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nThis is not\
    \ the best solution. Sorting algorithms usually have O(n log n) complexity, while\
    \ this solution has O(n^2) complexity. Also, this solution does not take into\
    \ account the fact that there may be multiple items with the same sum.\n<|/ c\
    \ |>\n<| c |>\nI agree with you, but I thought the question was about sorting\
    \ an array of integers according to their sum. Anyway, I added a solution that\
    \ takes account of the multiple items with the same sum.\n<|/ c |>\n<| c |>\n\
    I agree with you, but I thought the question was about sorting an array of integers\
    \ according to their sum. Anyway, I added a solution that takes account of the\
    \ multiple items with the same sum.\n<|/ c |>\n<| c |>\nThe question was about\
    \ sorting an array of integers according to their sum. Anyway, I added a solution\
    \ that takes account of the multiple items with the same sum.\n<|/ c |>\n<| c\
    \ |>\nI agree with you, but I thought the question was about sorting an array\
    \ of integers according to their sum. Anyway, I added a solution that takes account\
    \ of the multiple items with the same sum.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| c |>\nThis\
    \ doesn't work if there are two or more numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nYes, it does. I tested it before posting. Try it yourself and see.\n\
    <|/ c |>\n<| c |>\nI tested it myself and found that it doesn't work. Try it yourself\
    \ and see.\n<|/ c |>\n<| c |>\nI tested it myself and found that it doesn't work.\
    \ Try it yourself and see.\n<|/ c |>\n<| c |>\nI tested it myself and found that\
    \ it doesn't work. Try it yourself and see.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  int i = 0;\n    long sum = 0;\n    while(i < nums.length)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n        i++;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    This solution doesn't work for negative numbers. Try it with `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])`.\n<|/ c |>\n<| c |>\nYes, it does. Try it with `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])`.\n<|/ c |>\n<| c |>\nYes, it does. Try it with `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])`.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work if there are two or more numbers with\
    \ the same sum.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it.\
    \ I will edit the post to make it more clear.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it doesn't work. Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n\
    <|/ c |>\n<| c |>\nI tested it and it does work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| c |>\nI tested it and it does work. Try\
    \ it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;", "{\n    long[] result = new long[nums.length];\n   \
    \ int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    This is not an answer to the question. He wants to know how to sort an array in\
    \ ascending order according to sum of its digits.\n<|/ c |>\n<| c |>\nI agree\
    \ with you. But the question was how to sort an array in ascending order according\
    \ to sum of its digits. I believe this answer solves the problem of how to sort\
    \ an array in ascending order according to sum of its digits.\n<|/ c |>\n<| c\
    \ |>\nThe question was how to sort an array in ascending order according to sum\
    \ of its digits. I believe this answer solves the problem of how to sort an array\
    \ in ascending order according to sum of its digits.\n<|/ c |>\n<| c |>\nThis\
    \ is not an answer to the question. He wants to know how to sort an array in ascending\
    \ order according to sum of its digits.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ But the question was how to sort an array in ascending order according to sum\
    \ of its digits. I believe this answer solves the problem of how to sort an array\
    \ in ascending order according to sum of its digits.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result, 0, index);\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,java |>\n<| c |>\nThis is not the correct solution.\
    \ Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added the test case to the answer.\n<|/ c |>\n<| c\
    \ |>\nThe test case is wrong. `order_by_points([1L, 11L, -1L, -11L, -12L])` should\
    \ return `[-1L, -11L, 1L, -12L, 11L]` but returns `[-1L, -11L, 1L, -12L, 11L]`\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case to the answer.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;", "{\n    long[]\
    \ result = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n   \
    \ for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n     \
    \   result[index++] = sum;\n    }\n    Arrays.sort(result, 0, index);\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there\
    \ are multiple items with the same sum.\n<|/ c |>\n<| c |>\nYes, it does. I tested\
    \ it before posting it.\n<|/ c |>\n<| c |>\nIt doesn't work if there are multiple\
    \ items with the same sum.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself.\
    \ It sorts the array in ascending order according to the sum of their digits.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it yourself. It sorts the array in ascending\
    \ order according to the sum of their digits.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    int i = 0;\n    for(; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;", "{\n    long[] result = new long[nums.length];\n   \
    \ long sum = 0;\n    int i = 0;\n    for(; i < nums.length; i++)\n    {\n    \
    \    sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    This doesn't work if there are two or more numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nYes, I know. That's why I wrote \"Note\". Anyway, I added a solution\
    \ that sorts them by their index in original array.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that sorts them by their index in original array.\n<|/ c |>\n<| c\
    \ |>\nI added a solution that sorts them by their index in original array.\n<|/\
    \ c |>\n<| c |>\nI added a solution that sorts them by their index in original\
    \ array.\n<|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;", "{\n    long[] result =\
    \ new long[nums.length];\n    int sum = 0;\n    int pos = 0;\n    for(int i =\
    \ 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[pos++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=arrays,sorting,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| c |>\nThis doesn't work if there\
    \ are two numbers with the same sum. For example, `order_by_points([1L, 11L, -1L,\
    \ -11L, -12L])` returns `[-1L, -11L, 1L, -12L, 11L]`, which is not the correct\
    \ ordering.\n<|/ c |>\n<| c |>\nYes, you are right. I've fixed my answer. Thank\
    \ you for pointing out.\n<|/ c |>\n<| a tags=java,arrays,sorting |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question asks for an algorithm that\
    \ sorts integers based on their digits, not their sum.\n<|/ c |>\n<| c |>\nI thought\
    \ the question was about sorting integers based on their sum.\n<|/ c |>\n<| c\
    \ |>\nThe question asks for an algorithm that sorts integers based on their digits,\
    \ not their sum.\n<|/ c |>\n<| c |>\nI thought the question was about sorting\
    \ integers based on their sum.\n<|/ c |>\n<| c |>\nI thought the question was\
    \ about sorting integers based on their sum.\n<|/ c |>\n<| a tags=sorting,algorithm,java\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = {1, 11,\
    \ -11, -12, 12};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question asks for an algorithm that\
    \ sorts integers based on their digits, not their sum.\n<|/ c |>\n<| c |>\nThe\
    \ question asks for an algorithm that sorts integers based on their digits, not\
    \ their sum.\n<|/ c |>\n<| c |>\nI thought the question was about sorting integers\
    \ based on their sum.\n<|/ c |>\n<| c |>\nI thought the question was about sorting\
    \ integers based on their sum.\n<|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;", "{\n    long[] result\
    \ = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,sorting,java |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not an answer to the question.\
    \ He wants to sort an array of integers in ascending order according to the sum\
    \ of their digits. Your solution sorts the array in descending order according\
    \ to the sum of their digits.\n<|/ c |>\n<| c |>\nI thought the question was about\
    \ sorting an array of integers in ascending order according to the sum of their\
    \ digits. I edited my answer to include a solution for that.\n<|/ c |>\n<| c |>\n\
    The question was about sorting an array of integers in ascending order according\
    \ to the sum of their digits. Your solution sorts the array in descending order\
    \ according to the sum of their digits.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a solution for that.\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a solution for that.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++){\n        sum += nums[i];\n \
    \       result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/18007888)\n<|/ c\
    \ |>\n<| c |>\nI believe it does answer the question. He asked how to sort an\
    \ array of integers based on the sum of their digits. I provided a solution that\
    \ does exactly that. He also asked how to do it without using any built-in functions.\
    \ I provided a solution that does exactly that. He also asked how to do it without\
    \ using any built-in functions. I provided a solution that does exactly that.\
    \ He also asked how to do it without using any built-in functions. I provided\
    \ a solution that does exactly that. He also asked how to do it without using\
    \ any built-in functions. I provided a solution that does exactly that. He also\
    \ asked how to do it without using any built-in functions. I provided a solution\
    \ that does exactly that. He also asked how to do it without using any built-in\
    \ functions. I provided a solution that does exactly that. He also asked how to\
    \ do it without using any built-in functions. I provided a solution that does\
    \ exactly that. He also asked how to do it without using any built-in functions.\
    \ I provided a solution that does exactly that. He also asked how to do it without\
    \ using any built-in functions. I provided a solution that does exactly that.\
    \ He also asked how to do it without using any built-in functions. I provided\
    \ a solution that does exactly that. He also asked how to do it without using\
    \ any built-in functions. I provided a solution that does exactly that. He also\
    \ asked how to do it without using any built-in functions. I provided a solution\
    \ that does exactly that. He also asked how to do it without using any built-in\
    \ functions. I provided a solution that does exactly that. He also asked how to\
    \ do it without using any built-in functions. I provided a solution that does\
    \ exactly that. He also asked how to do it without using any built-in functions.\
    \ I provided a solution that does exactly that. He also asked how to do it without\
    \ using any built-in functions. I provided a solution that does exactly that.\
    \ He also asked ", "{\n    long[] result = new long[nums.length];\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if there are two or\
    \ more numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, it does. I tested it\
    \ before posting it. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it before posting\
    \ it. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it before posting it. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\nI tested it before posting it. Try it yourself.\n\
    <|/ c |>\n<| a tags=algorithm,sorting,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int index\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis doesn't work if there\
    \ are two numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, you are right. I've\
    \ updated the answer with another solution that doesn't require the array to be\
    \ sorted.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't work if there are two or more numbers with the same\
    \ sum.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. The OP\
    \ didn't specify that he wants to sort by sum or by index. He just said he wants\
    \ to sort by sum.\n<|/ c |>\n<| c |>\nI didn't say it didn't work, I said it didn't\
    \ do what the OP asked for. Your code doesn't sort by sum, it sorts by index.\
    \ Your code doesn't sort by sum, it sorts by index. Your code doesn't sort by\
    \ sum, it sorts by index. Your code doesn't sort by sum, it sorts by index. Your\
    \ code doesn't sort by sum, it sorts by index. Your code doesn't sort by sum,\
    \ it sorts by index. Your code doesn't sort by sum, it sorts by index. Your code\
    \ doesn't sort by sum, it sorts by index. Your code doesn't sort by sum, it sorts\
    \ by index. Your code doesn't sort by sum, it sorts by index. Your code doesn't\
    \ sort by sum, it sorts by index. Your code doesn't sort by sum, it sorts by index.\
    \ Your code doesn't sort by sum, it sorts by index. Your code doesn't sort by\
    \ sum, it sorts by index. Your code doesn't sort by sum, it sorts by index. Your\
    \ code doesn't sort by sum, it sorts by index. Your code doesn't sort by sum,\
    \ it sorts by index. Your code doesn't sort by sum, it sorts by index. Your code\
    \ doesn't sort by sum, it sorts by index. Your code doesn't sort by sum, it sorts\
    \ by index. Your code doesn't sort by sum, it sorts by index. Your code doesn't\
    \ sort by sum, it sorts by index. Your code doesn't sort by sum, it sorts by index.\
    \ Your code doesn't sort by sum, it sorts by index. Your code doesn't sort by\
    \ sum, it sorts by index. Your code doesn't sort by sum, it sorts by index. Your\
    \ code doesn't sort by sum, it sorts by index. Your code doesn't sort by sum,\
    \ it sorts by index. Your code doesn't sort by sum, it sorts by index. Your code\
    \ doesn't sort by sum, it sorts by index. Your code doesn't sort by sum, it sorts\
    \ by index. Your code doesn't sort by sum, it sorts by index. Your code doesn't\
    \ sort by sum, it sorts by ", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int i = 0;\n    \n    while(i < nums.length)\n    {\n\
    \        sum += nums[i];\n        result[i] = sum;\n        i++;\n    }\n    \n\
    \    Arrays.sort(result);\n    \n    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,java\
    \ |>\n<| a tags=arrays,sorting,java |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(; i < nums.length; ++i)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;", "{\n    long[] result\
    \ = new long[nums.length];\n    int i = 0;\n    long sum = 0;\n    \n    for(;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n\
    \    }\n    \n    Arrays.sort(result);\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,java |>\n<| c |>\nThis doesn't seem to work. `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])` returns `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L,\
    \ -11L, -12L, 1L, 11L]`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ the test case in the answer. Can you please check again?\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added the test case in the answer. Can you please\
    \ check again?\n<|/ c |>\n<| c |>\nI tested it and it works. I added the test\
    \ case in the answer. Can you please check again?\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the test case in the answer. Can you please check again?\n\
    <|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,sorting,java |>\n<| a tags=arrays,sorting,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n  \
    \  {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while(i < nums.length)\n    {\n        sum += nums[i];\n\
    \        result[j] = sum;\n        i++;\n        j++;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| c |>\n\
    This doesn't work if you have negative numbers. Try `order_by_points([-1L, -11L,\
    \ 1L, -12L, 11L])`\n<|/ c |>\n<| c |>\nYes, I forgot about negative numbers. I\
    \ edited my answer. Thanks!\n<|/ c |>\n<| c |>\nThis doesn't work if you have\
    \ negative numbers. Try `order_by_points([-1L, -11L, 1L, -12L, 11L])`\n<|/ c |>\n\
    <| c |>\nI edited my answer. Thanks!\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ you have negative numbers. Try `order_by_points([-1L, -11L, 1L, -12L, 11L])`\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\nimport java.util.Arrays;", "{\n    long[]\
    \ result = new long[nums.length];\n    long sum = 0;\n    int index = 0;\n   \
    \ for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n     \
    \   result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    int\
    \ i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i < nums.length)\n    {\n\
    \        sum += nums[i];\n        result[j] = sum;\n        i++;\n        j++;\n\
    \    }\n    while(j < result.length)\n    {\n        result[j] = 0;\n        j++;\n\
    \    }\n    for(int k = 0; k < result.length; k++)\n    {\n        for(int l =\
    \ 0; l < nums.length; l++)\n        {\n            if(result[k] == nums[l])\n\
    \            {\n                nums[l] = -1;\n            }\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n\
    <| c |>\nThis is not an answer to the question. He asked for a Java solution,\
    \ not a C++ solution. He also asked for sorting algorithms, not just sorting numbers.\n\
    <|/ c |>\n<| c |>\nThe question was about sorting algorithms, not just sorting\
    \ numbers. I provided a solution that sorts numbers. I provided a solution that\
    \ sorts numbers. I provided a solution that sorts numbers. I provided a solution\
    \ that sorts numbers. I provided a solution that sorts numbers. I provided a solution\
    \ that sorts numbers. I provided a solution that sorts numbers. I provided a solution\
    \ that sorts numbers. I provided a solution that sorts numbers. I provided a solution\
    \ that sorts numbers. I provided a solution that sorts numbers. I provided a solution\
    \ that sorts numbers. I provided a solution that sorts numbers. I provided a solution\
    \ that sorts numbers. I provided a solution that sorts numbers. I provided a solution\
    \ that sorts numbers. I provided a solution that sorts numbers. I provided a solution\
    \ that sorts numbers. I provided a solution that sorts numbers. I provided a solution\
    \ that sorts numbers. I provided a solution that sorts numbers. I provided a solution\
    \ that sorts numbers. I provided a solution that sorts numbers. I provided a solution\
    \ that sorts numbers. I provided a solution that sorts numbers. I provided a solution\
    \ that sorts numbers. I provided a solution that sorts numbers. I provided a solution\
    \ that sorts numbers. I provided a solution that sorts numbers. I provided a solution\
    \ that sorts numbers. I provided a solution that sorts numbers. I provided a solution\
    \ that sorts numbers. I provided a solution that sorts numbers. I provided a solution\
    \ that sorts numbers. I provided a solution that sorts ", "{\n    long[] result\
    \ = new long[nums.length];\n    int[] sums = new int[nums.length];\n    \n   \
    \ for(int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i]%10;\n\
    \    }\n    \n    for(int i = 0; i < nums.length; i++)\n    {\n        for(int\
    \ j = 0; j < sums.length; j++)\n        {\n            if(sums[j] == sums[i])\n\
    \            {\n                for(int k = i; k < nums.length; k++)\n       \
    \         {\n                    if(nums[k] == sums[j])\n                    {\n\
    \                        result[k] = nums[k];\n                    }\n       \
    \         }\n            }\n        }\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,algorithm,arrays |>\n<| c |>\nThis solution is O(n^2) in time\
    \ and O(n) in space. Sorting algorithms usually have O(n log n) time complexity\
    \ and O(n) space complexity.\n<|/ c |>\n<| c |>\nThe time complexity is O(n^2)\
    \ because of the nested loops. If you sort the array in place you can do it in\
    \ O(n).\n<|/ c |>\n<| c |>\nThe time complexity is O(n^2) because of the nested\
    \ loops. If you sort the array in place you can do it in O(n).\n<|/ c |>\n<| c\
    \ |>\nThe time complexity is O(n^2) because of the nested loops. If you sort the\
    \ array in place you can do it in O(n).\n<|/ c |>\n<| c |>\nThe time complexity\
    \ is O(n^2) because of the nested loops. If you sort the array in place you can\
    \ do it in O(n).\n<|/ c |>\n<| a dscore=5 |>\nHere's a solution in O(n) time and\
    \ O(1) space:\n<code>\ndef sort(nums):\n    sums = [0] * len(nums)\n    for n\
    \ in nums:\n        sums[n] += 1\n    i = 0\n    while i < len(sums):\n      \
    \  if sums[i] > 0:\n            j = i\n            while sums[j] > 0:\n      \
    \          sums[j] -= 1\n                j += 1\n            sums[j] += 1\n  \
    \      i += 1\n    return nums[:i]\n</code>\n<|/ a tags=sorting,algorithm,arrays\
    \ |>\n<| c |>\nThis solution is O(n^2) in time and O(n) in space. Sorting algorithms\
    \ usually have O(n log n) time complexity and O(n) space complexity.\n<|/ c |>\n\
    <| c |>\nThe time complexity is O(n^2) because of the nested loops. If you sort\
    \ the array in place you can ", "{\n    long[] result = new long[nums.length];\n\
    \    int sum = 0;\n    for (int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a |>\n<| a tags=sorting,arrays,java |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| c |>\n\
    This is not an answer, but a comment. Try to explain why you think this solves\
    \ the problem.\n<|/ c |>\n<| c |>\nI believe this solves the problem because it\
    \ is an answer to the question asked. He asked how to sort an array of integers\
    \ in ascending order according to the sum of their digits. He also asked how to\
    \ do it without using any libraries. He also asked how to do it without using\
    \ any loops. He also asked how to do it without using any libraries. He also asked\
    \ how to do it without using any libraries. He also asked how to do it without\
    \ using any libraries. He also asked how to do it without using any libraries.\
    \ He also asked how to do it without using any libraries. He also asked how to\
    \ do it without using any libraries. He also asked how to do it without using\
    \ any libraries. He also asked how to do it without using any libraries. He also\
    \ asked how to do it without using any libraries. He also asked how to do it without\
    \ using any libraries. He also asked how to do it without using any libraries.\
    \ He also asked how to do it without using any libraries. He also asked how to\
    \ do it without using any libraries. He also asked how to do it without using\
    \ any libraries. He also asked how to do it without using any libraries. He also\
    \ asked how to do it without using any libraries. He also asked how to do it without\
    \ using any libraries. He also asked how to do it without using any libraries.\
    \ He also asked how to do it without using any libraries. He also asked how to\
    \ do it without using any libraries. He also asked how to do it without using\
    \ any libraries. He also asked how to do it without using any libraries. He also\
    \ asked how to do it without using any libraries. He also asked how to do it without\
    \ using any libraries. He also asked how to do it without using any libraries.\
    \ He also asked how to do it without using any libraries. He also asked how to\
    \ do it without using any libraries. He also asked how to do it without using\
    \ any libraries. He also asked how to do it without using any libraries. He also\
    \ asked how to do it without using any libraries. ", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like this solution, but\
    \ I wonder if it will perform better than the one I posted.\n<|/ c |>\n<| c |>\n\
    I guess it depends on the size of the array. Your solution will probably be faster\
    \ if the array is big.\n<|/ c |>\n<| c |>\nI tested it on a small array (10 elements)\
    \ and your solution was faster. Thanks!\n<|/ c |>\n<| c |>\nI tested it on a large\
    \ array (10000 elements) and your solution was faster. Thanks!\n<|/ c |>\n<| a\
    \ tags=sorting,java,arrays |>\n<code>\nimport java.util.Arrays;", "{\n    long[]\
    \ result = new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    int i = 0;\n    long sum = 0;\n    for(long num : nums)\n\
    \    {\n        sum += num;\n        result[i++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  int[] digits = new int[nums.length];\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        digits[i] = nums[i] % 10;\n        nums[i] = nums[i] / 10;\n \
    \   }\n    Arrays.sort(digits);\n    for(int i = 0; i < nums.length; i++)\n  \
    \  {\n        result[i] = digits[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,algorithm,java |>\n<| c |>\nThis doesn't work if there are\
    \ two numbers with the same sum of digits. For example, `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])` returns `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L,\
    \ -11L, -12L, 1L, 11L]`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can\
    \ you give me an example where it doesn't work?\n<|/ c |>\n<| c |>\n`order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])` returns `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L,\
    \ -11L, -12L, 1L, 11L]`.\n<|/ c |>\n<| c |>\nI tested it again and it works fine.\
    \ Can you give me an example where it doesn't work?\n<|/ c |>\n<| c |>\n`order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])` returns `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L,\
    \ -11L, -12L, 1L, 11L]`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    int sum = 0;\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,c# |>\n<| c |>\nThis code does not work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nIt works fine for me. `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])` returns `[-1L, -11L, 1L, -12L, 11L]`\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work for me. Try it with `order_by_points([1L, 11L, -1L, -11L,\
    \ -12L])`\n<|/ c |>\n<| c |>\nIt works fine for me too. `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])` returns `[-1L, -11L, 1L, -12L, 11L]`\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work for me. Try it with `order_by_points([1L, 11L, -1L, -11L,\
    \ -12L])`\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   long[] result = new long[nums.length];\n    int n = nums.length;\n    long\
    \ sum = 0;\n    for(int i = 0; i < n; i++)\n    {\n        sum += nums[i];\n \
    \       result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=java,arrays |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    long sum = 0;\n    \n    while(i < nums.length)\n    {\n\
    \        sum += nums[i];\n        result[i] = sum;\n        i++;\n    }\n    \n\
    \    Arrays.sort(result);\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java\
    \ |>\n<| c |>\nI believe this solution is O(n^2) because of the sorting step.\
    \ It would be better to sort the array in O(nlogn) time and then iterate over\
    \ the sorted array to find the sum of the digits. That would give a complexity\
    \ of O(nlogn).\n<|/ c |>\n<| c |>\nYes, you are right. Sorting can be done in\
    \ O(nlogn) time but summing digits can be done in O(n) time. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i]%10;\n\
    \    }\n    Arrays.sort(sums);\n    for(int i = 0; i < nums.length; i++)\n   \
    \ {\n        result[i] = nums[i]/10;\n        result[i] += sums[i];\n    }\n \
    \   return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis\
    \ doesn't work if there are two numbers with the same sum.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it and it works. I added a test case to the answer.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I added a test case to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to the answer.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| c |>\n\
    This doesn't work for negative numbers. Try it with `order_by_points([-1L, -11L,\
    \ 1L, -12L, 11L])`\n<|/ c |>\n<| c |>\nYes, I forgot about negative numbers. I\
    \ edited my answer to include a solution for negative numbers. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| a tags=arrays,sorting,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.length; i++) \n    {\n      \
    \  sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    This doesn't work if there are two or more numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nYes, I agree with you. My answer was just to give an idea of how to solve\
    \ the problem and to show that there are many ways to solve the problem. Of course\
    \ the best way is to implement the solution by yourself.\n<|/ c |>\n<| c |>\n\
    I agree with you. But the OP asked for \"the most efficient way\". I think this\
    \ answer is the best one for this question.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ But the OP asked for \"the most efficient way\". I think this answer is the\
    \ best one for this question.\n<|/ c |>\n<| c |>\nI agree with you. But the OP\
    \ asked for \"the most efficient way\". I think this answer is the best one for\
    \ this question.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=java,arrays |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int i = 0;\n    for(; i < nums.length; i++)\n    {\n \
    \       sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    long sum = 0;\n    for(long n : nums)\n    {\n        sum\
    \ += n;\n        result[i++] = sum;\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\nYes, you are right. I just realized that\
    \ and fixed it.\n<|/ c |>\n<| c |>\nI added a version that doesn't require a sort\
    \ and doesn't require a temporary array.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    function sortBySum(arr) {\n    var sum = 0;\n    var result = [];\n    for (var\
    \ i = 0; i < arr.length; i++) {\n        sum += arr[i];\n        result.push(sum);\n\
    \    }\n    result.sort(function(a, b) {\n        return a - b;\n    });\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;", "{\n    long[] result = new long[nums.length];\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nThis doesn't work if there are\
    \ two or more numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, I know. That's\
    \ why I wrote \"Note: if there are several items with similar sum of their digits,\
    \ order them based on their index in original array.\"\n<|/ c |>\n<| c |>\nYes,\
    \ but your answer doesn't do that. Try it with `order_by_points([1L, 11L, -1L,\
    \ -11L, -12L])`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ my answer. Try it yourself.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting my answer. Try it yourself.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nI believe this solution\
    \ will fail if there are two or more numbers with the same sum. For example, `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])` will result in `[-1L, -11L, 1L, -12L, 11L]` instead\
    \ of `[-1L, -11L, -11L, 1L, -12L]`.\n<|/ c |>\n<| c |>\nYes, you are right. Thanks\
    \ for pointing it out. I've updated the answer.\n<|/ c |>\n<| c |>\nI believe\
    \ this solution will fail if there are two or more numbers with the same sum.\
    \ For example, `order_by_points([1L, 11L, -1L, -11L, -12L])` will result in `[-1L,\
    \ -11L, 1L, -12L, 11L]` instead of `[-1L, -11L, -11L, 1L, -12L]`.\n<|/ c |>\n\
    <| c |>\nYes, you are right. Thanks for pointing it out. I've updated the answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n    long[]\
    \ result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(;\
    \ i < nums.length; ++i)\n    {\n        sum += nums[i];\n        result[i] = sum;\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java\
    \ |>\n<| c |>\nThe question was about sorting an array of integers, not longs.\n\
    <|/ c |>\n<| c |>\nI thought the question was about sorting an array of integers.\
    \ I edited my answer to include a solution for sorting an array of integers.\n\
    <|/ c |>\n<| c |>\nI thought the question was about sorting an array of integers.\
    \ I edited my answer to include a solution for sorting an array of integers.\n\
    <|/ c |>\n<| c |>\nI thought the question was about sorting an array of integers.\
    \ I edited my answer to include a solution for sorting an array of integers.\n\
    <|/ c |>\n<| c |>\nI thought the question was about sorting an array of integers.\
    \ I edited my answer to include a solution for sorting an array of integers.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while(i < nums.length)\n    {\n        sum += nums[i];\n\
    \        if(sum > 0)\n        {\n            result[j] = sum;\n            j++;\n\
    \            sum = 0;\n        }\n        i++;\n    }\n    while(j < result.length)\n\
    \    {\n        result[j] = sum;\n        j++;\n        sum = 0;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| a tags=sorting,arrays,c#\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;", "{\n    long[] result\
    \ = new long[nums.length];\n    int i = 0;\n    int j = 0;\n    int sum = 0;\n\
    \    while(i < nums.length)\n    {\n        sum = sum + nums[i];\n        while(sum\
    \ > 0)\n        {\n            result[j] = sum % 10;\n            sum = (sum -\
    \ result[j]) / 10;\n            j++;\n        }\n        i++;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,java |>\n<| a dscore=0\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = {1, 11,\
    \ -1, -11, -12};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a tags=arrays,sorting,algorithm,java |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to sort by sum of digits, not by their absolute\
    \ value.\n<|/ c |>\n<| c |>\nThis doesn't answer the question. OP wants to sort\
    \ by sum of digits, not by their absolute value.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int i = 0;\n    while (i < nums.length)\n    {\n     \
    \   sum += nums[i];\n        result[i] = sum;\n        i++;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI believe this answer is not\
    \ correct. `order_by_points([1L, 11L, -1L, -11L, -12L])` returns `[-1L, -11L,\
    \ 1L, -12L, 11L]` but `order_by_points([])` returns `[]`\n<|/ c |>\n<| c |>\n\
    I believe this answer is correct. `order_by_points([1L, 11L, -1L, -11L, -12L])`\
    \ returns `[-1L, -11L, 1L, -12L, 11L]` but `order_by_points([])` returns `[]`\n\
    <|/ c |>\n<| c |>\nI believe this answer is correct. `order_by_points([1L, 11L,\
    \ -1L, -11L, -12L])` returns `[-1L, -11L, 1L, -12L, 11L]` but `order_by_points([])`\
    \ returns `[]`\n<|/ c |>\n<| c |>\nI believe this answer is correct. `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])` returns `[-1L, -11L, 1L, -12L, 11L]` but `order_by_points([])`\
    \ returns `[]`\n<|/ c |>\n<| c |>\nI believe this answer is correct. `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])` returns `[-1L, -11L, 1L, -12L, 11L]` but `order_by_points([])`\
    \ returns `[]`\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays |>\n<| c |>\n\
    This doesn't work. Try it with `order_by_points([-1L, -11L, 1L, -12L, 11L])`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine. Try it with `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])`\n<|/ c |>\n<| c |>\nI tested it and it works fine. Try\
    \ it with `order_by_points([-1L, -11L, 1L, -12L, 11L])`\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works fine. Try it with `order_by_points([-1L, -11L, 1L, -12L,\
    \ 11L])`\n<|/ c |>\n<| c |>\nI tested it and it works fine. Try it with `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])`\n<|/ c |>\n<| a tags=algorithm,sorting,arrays |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;",
  "{\n    long[] result = new long[nums.length];\n    int n = nums.length;\n    long\
    \ sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += nums[i];\n     \
    \   result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;", "{\n    long[] result\
    \ = new long[nums.length];\n    int i = 0;\n    int j = 0;\n    int sum = 0;\n\
    \    while (i < nums.length)\n    {\n        sum = nums[i++];\n        while (i\
    \ < nums.length && nums[i] > 0)\n        {\n            sum += nums[i++];\n  \
    \      }\n        result[j++] = sum;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis code works fine for small arrays but for large\
    \ arrays it takes too much time for execution.\n<|/ c |>\n<| c |>\nThe code works\
    \ fine for small arrays but for large arrays it takes too much time for execution.\n\
    <|/ c |>\n<| c |>\nI tested it on large arrays and it works fine. Can you post\
    \ the code you tried and how long it took?\n<|/ c |>\n<| c |>\nI tested it on\
    \ large arrays and it works fine. Can you post the code you tried and how long\
    \ it took?\n<|/ c |>\n<| c |>\nI tested it on large arrays and it works fine.\
    \ Can you post the code you tried and how long it took?\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport\
    \ java.util.List;\nimport java.util.Random;", "{\n    long[] result = new long[nums.length];\n\
    \    int[] digits = new int[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        digits[i] = nums[i] % 10;\n        nums[i] /= 10;\n   \
    \ }\n    Arrays.sort(digits);\n    for(int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = digits[i];\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis doesn't seem to work. `order_by_points([1L, 11L,\
    \ -1L, -11L, -12L])` returns `[-11L, -11L, 1L, -12L, 11L]` instead of `[-1L, -11L,\
    \ 1L, -12L, 11L]`.\n<|/ c |>\n<| c |>\nI tested it and it works fine for me. Can\
    \ you please give me the exact input you used?\n<|/ c |>\n<| c |>\nI used `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])` as input. My IDE says `error: no matching function for\
    \ call to 'order_by_points'`.\n<|/ c |>\n<| c |>\nI used the exact code I posted\
    \ above. Did you copy and paste it?\n<|/ c |>\n<| c |>\nYes, I copied it exactly.\
    \ I'm using Eclipse IDE.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not an answer,\
    \ but a comment.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/11889397)\n<|/ c |>\n<| c |>\n\
    This does provide an answer. He asked how to sort an array of integers in ascending\
    \ order according to the sum of their digits. He also provided a code snippet\
    \ that does exactly that. He also asked if there is a better way to do it, and\
    \ provided a code snippet that does exactly that. He also asked if there is a\
    \ better way to do it using std.algorithm.\n<|/ c |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/11889397)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/11889397)\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>", "{\n    long[] result = new long[nums.length];\n    int index = 0;\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=java,sorting,arrays |>\n<| a tags=java,sorting,arrays\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[nums.length];\n    int i = 0;\n    int j = 0;\n    int sum = 0;\n\
    \    while(i < nums.length)\n    {\n        sum += nums[i];\n        result[j]\
    \ = sum;\n        i++;\n        j++;\n    }\n    for(int k = 0; k < nums.length;\
    \ k++)\n    {\n        long temp = result[k];\n        result[k] = nums[k];\n\
    \        nums[k] = temp;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| c |>\nThis code doesn't work\
    \ if there are two or more numbers with the same sum.\n<|/ c |>\n<| c |>\nYes,\
    \ I know. That's why I wrote \"Note\". I just wanted to show that if there are\
    \ several items with similar sum of their digits, order them based on their index\
    \ in original array.\n<|/ c |>\n<| c |>\nI didn't downvote you, but I suspect\
    \ it's because you didn't explain what it does and how it does it.\n<|/ c |>\n\
    <| c |>\nI added some explanation.\n<|/ c |>\n<| c |>\nI didn't downvote you,\
    \ but I suspect it's because you didn't explain what it does and how it does it.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;", "{\n    long[]\
    \ result = new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    This is not the correct solution. Your solution will sort `[1L, 11L, -1L, -11L,\
    \ -12L]` as `[-1L, -11L, 1L, -12L, 11L]`\n<|/ c |>\n<| c |>\nI believe this solution\
    \ is correct. OP wants to sort by sum of digits, not by their absolute value.\n\
    <|/ c |>\n<| c |>\nYes, but OP wants to sort by sum of digits, not by their absolute\
    \ value.\n<|/ c |>\n<| c |>\nThis solution sorts by the absolute value of the\
    \ sum of the digits, not the sum of the absolute value of the digits.\n<|/ c |>\n\
    <| c |>\nThis solution sorts by the absolute value of the sum of the digits, not\
    \ the sum of the absolute value of the digits.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  int j = 0;\n    for(int i = 0; i < nums.length; i++){\n        long sum = 0;\n\
    \        for(int k = 0; k < nums[i].length; k++){\n            sum += nums[i][k];\n\
    \        }\n        if(sum > 0){\n            result[j] = sum;\n            j++;\n\
    \        }\n    }\n    for(int i = 0; i < nums.length; i++){\n        result[i]\
    \ = nums[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| c |>\n\
    It does work. Try it yourself. I tested it before posting.\n<|/ c |>\n<| c |>\n\
    It doesn't work. Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it yourself. I tested it before posting.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points([1L, 11L, -1L,\
    \ -11L, -12L])`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    int sum = 0;\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| c |>\nThis code will sort `[1L, 11L, -1L,\
    \ -11L, -12L]` as `[-1L, -11L, 1L, -12L, 11L]`, but it will not sort `[1L, 11L,\
    \ -1L, -11L, -12L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L,\
    \ 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L,\
    \ 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L,\
    \ 55L, 56L, 57L, 58L, 59L, 60L, 61L, 62L, 63L, 64L, 65L, 66L, 67L, 68L, 69L, 70L,\
    \ 71L, 72L, 73L, 74L, 75L, 76L, 77L, 78L, 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L,\
    \ 87L, 88L, 89L, 90L, 91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L, 100L, 101L,\
    \ 102L, 103L, 104L, 105L, 106L, 107L, 108L, 109L, 110L, 111L, 112L, 113L, 114L,\
    \ 115L, 116L, 117L, 118L, 119L, 120L, 121L, 122L, 123L, 124L, 125L, 126L, 127L,\
    \ 128L, 129L, 130L, 131L, 132L, 133L, 134L, 135L, 136L, 137L, 138L, 139L, 140L,\
    \ 141L, 142L, 143L, 144L, 145L, 146L, 147L, 148L, 149L, 150L, 151L, 152L, 153L,\
    \ 154L, 155L, 156L, 157L, 158L, 159L, 160L, 161L, 162L, 163L, 164L, 165L, 166L,\
    \ 167L, 168L, 169L, 170L, 171L, 172L, 173L, 174L, 175L, 176L, 177L, 178L, 179L,\
    \ 180L, 181L, 182L, 183L, 184L, 185L, 186L, 187L, 188L, 189L, 190L, 191L, 192L,\
    \ 193L, 194L, 195L, 196L, 197L, 198L, 199L, 200L, ", "{\n    long[] result = new\
    \ long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        long\
    \ temp = result[i];\n        for(int j = 0; j < index; j++)\n        {\n     \
    \       if(temp > result[j])\n            {\n                result[j] = temp;\n\
    \            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,java\
    \ |>\n<| c |>\nThis is not an answer, but a comment. Try to add some explanation\
    \ about your solution.\n<|/ c |>\n<| c |>\nThis is not an answer, but a comment.\
    \ Try to add some explanation about your solution.\n<|/ c |>\n<| c |>\nThis is\
    \ not an answer, but a comment. Try to add some explanation about your solution.\n\
    <|/ c |>\n<| c |>\nThis is not an answer, but a comment. Try to add some explanation\
    \ about your solution.\n<|/ c |>\n<| c |>\nThis is not an answer, but a comment.\
    \ Try to add some explanation about your solution.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++){\n\
    \        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = {1, 11,\
    \ -1, -11 ,-12};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to sort by sum of digits, not by absolute value.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result, 0, index);\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,java |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    int sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| c |>\nI like your solution. Very elegant.\
    \ Thank you.\n<|/ c |>\n<| c |>\nI like your solution. Very elegant. Thank you.\n\
    <|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while(i < nums.length)\n    {\n        sum = nums[i] -\
    \ '0';\n        if(sum > 0)\n        {\n            result[j] = nums[i];\n   \
    \         j++;\n        }\n        i++;\n    }\n    while(j < result.length)\n\
    \    {\n        result[j] = result[j-1];\n        j++;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis doesn't work if the\
    \ array contains negative numbers. Try it with `order_by_points([-1L, -11L, 1L,\
    \ -12L, 11L])`.\n<|/ c |>\n<| c |>\nIt works. I tested it before posting. What\
    \ is the problem?\n<|/ c |>\n<| c |>\nIt doesn't work if there are negative numbers\
    \ in the array. Try it with `order_by_points([-1L, -11L, 1L, -12L, 11L])`.\n<|/\
    \ c |>\n<| c |>\nI tested it before posting. What is the problem?\n<|/ c |>\n\
    <| c |>\nIt doesn't work if there are negative numbers in the array. Try it with\
    \ `order_by_points([-1L, -11L, 1L, -12L, 11L])`.\n<|/ c |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++){\n        sum += nums[i];\n        result[i] = sum;\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting\
    \ |>\n<| a tags=java,arrays,sorting |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    \n    while(i < nums.length)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n        i++;\n    }\n    \n    Arrays.sort(result);\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\n\
    The question asks for an algorithm to sort the array. Your answer doesn't do that.\n\
    <|/ c |>\n<| c |>\nThe question asks for an algorithm to sort the array. Your\
    \ answer doesn't do that.\n<|/ c |>\n<| c |>\nThe question asks for an algorithm\
    \ to sort the array. Your answer doesn't do that.\n<|/ c |>\n<| c |>\nThe question\
    \ asks for an algorithm to sort the array. Your answer doesn't do that.\n<|/ c\
    \ |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = new int[]{1, 11, -1, -11, -12};\n    Arrays.sort(arr);\n\
    \    System.out.println(Arrays.toString(arr));\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThe question asks for an algorithm to sort the array. Your answer doesn't\
    \ do that.\n<|/ c |>\n<| c |>\nThe question asks for an algorithm to sort the\
    \ array. Your answer doesn't do that.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    int\
    \ n = nums.length;\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n   \
    \     sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    This is not the best solution. Sorting is not the best solution for sorting an\
    \ array of numbers. Sorting is a O(n log n) operation. Your solution is O(n^2).\
    \ Sorting is not the best solution for sorting an array of numbers. Sorting is\
    \ a O(n log n) operation. Your solution is O(n^2). Sorting is not the best solution\
    \ for sorting an array of numbers. Sorting is a O(n log n) operation. Your solution\
    \ is O(n^2).\n<|/ c |>\n<| c |>\nSorting is not the best solution for sorting\
    \ an array of numbers. Sorting is a O(n log n) operation. Your solution is O(n^2).\
    \ Sorting is not the best solution for sorting an array of numbers. Sorting is\
    \ a O(n log n) operation. Your solution is O(n^2).\n<|/ c |>\n<| c |>\nSorting\
    \ is not the best solution for sorting an array of numbers. Sorting is a O(n log\
    \ n) operation. Your solution is O(n^2). Sorting is not the best solution for\
    \ sorting an array of numbers. Sorting is a O(n log n) operation. Your solution\
    \ is O(n^2).\n<|/ c |>\n<| c |>\nSorting is not the best solution for sorting\
    \ an array of numbers. Sorting is a O(n log n) operation. Your solution is O(n^2).\
    \ Sorting is not the best solution for sorting an array of numbers. Sorting is\
    \ a O(n log n) operation. Your solution is O(n^2).\n<|/ c |>\n<| c |>\nSorting\
    \ is not the best solution for sorting an array of numbers. Sorting is a O(n log\
    \ n) operation. Your solution is O(n^2). Sorting is not the best solution for\
    \ sorting an array of numbers. Sorting is a O(n log n) operation. Your solution\
    \ is O(n^2).\n<|/ c |>\n<| a dscore=5 |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long[] result = new long[nums.length];\n    long sum = 0;\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=java,arrays,sorting |>\n<| a tags=java,arrays,sorting |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    int i = 0;\n    for(; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try\
    \ it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added the test case to the answer.\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work. Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case to the answer.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points([1L, 11L, -1L,\
    \ -11L, -12L])`.\n<|/ c |>\n<| a tags=arrays,algorithm,sorting |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    int\
    \ n = nums.length;\n    long sum = 0;\n    for(int i = 0; i < n; i++)\n    {\n\
    \        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| c |>\n\
    This doesn't work if there are two or more numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nYes, it does. I tested it before posting it. I added a comment to the\
    \ question to clarify this.\n<|/ c |>\n<| c |>\nI tested it again and you're right.\
    \ It does work. Sorry about that. My bad.\n<|/ c |>\n<| c |>\nI tested it again\
    \ and you're right. It does work. Sorry about that. My bad.\n<|/ c |>\n<| c |>\n\
    I tested it again and you're right. It does work. Sorry about that. My bad.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;", "{\n    long[]\
    \ result = new long[nums.length];\n    int i = 0;\n    long sum = 0;\n    for(long\
    \ n : nums)\n    {\n        sum += n;\n        result[i++] = sum;\n    }\n   \
    \ Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work if the array contains negative numbers. Try it with\
    \ `order_by_points([-1L, -11L, 1L, -12L, 11L])`.\n<|/ c |>\n<| c |>\nI didn't\
    \ know that negative numbers would cause problems. I thought they would just be\
    \ ignored. I'll edit my answer to include a solution for negative numbers.\n<|/\
    \ c |>\n<| c |>\nThe question says \"sort them in ascending order\", so negative\
    \ numbers should come before positive numbers.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I misread the question. I'll edit my answer accordingly.\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a solution for negative numbers. I tested\
    \ it and it works.\n<|/ c |>\n<| a tags=sorting,java,arrays |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| c |>\nThanks for the answer.\
    \ Can you please explain me the code you wrote?\n<|/ c |>\n<| c |>\nI added some\
    \ comments to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for the answer.\
    \ Can you please explain me the code you wrote?\n<|/ c |>\n<| c |>\nI added some\
    \ comments to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for the answer.\
    \ Can you please explain me the code you wrote?\n<|/ c |>\n<| a tags=arrays,sorting,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    int index = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,sorting,java |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    long sum = 0;\n\
    \    for(; i < nums.length; ++i)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    int index = 0;\n    for(int i = 0; i < nums.length; i++)\n   \
    \ {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a |>\n<| a tags=sorting,algorithm,java |>\n\
    <code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int index = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| a tags=java,arrays,sorting\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;", "{\n    long[] result = new long[nums.length];\n    int index\
    \ = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n \
    \       sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| c |>\n\
    This is not an answer. Just a comment. Why do you think this is not a good answer?\n\
    <|/ c |>\n<| c |>\nThis is not an answer. Just a comment. Why do you think this\
    \ is not a good answer?\n<|/ c |>\n<| c |>\nThis is not an answer. Just a comment.\
    \ Why do you think this is not a good answer?\n<|/ c |>\n<| c |>\nThis is not\
    \ an answer. Just a comment. Why do you think this is not a good answer?\n<|/\
    \ c |>\n<| c |>\nThis is not an answer. Just a comment. Why do you think this\
    \ is not a good answer?\n<|/ c |>\n<| a dscore=5 tags=arrays,sorting,java |>\n\
    <code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int index = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result,\
    \ (a, b) -> {\n        return Long.compare(sum, sumOfDigits(b));\n    });\n  \
    \  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    long sum = 0;\n    while(i < nums.length)\n    {\n        sum += nums[i];\n\
    \        if(sum > 0)\n        {\n            result[j] = sum;\n            j++;\n\
    \            sum = 0;\n        }\n        i++;\n    }\n    while(j < result.length)\n\
    \    {\n        result[j] = sum;\n        j++;\n        sum = 0;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  int i = 0;\n    long sum = 0;\n    \n    for(long num : nums)\n    {\n    \
    \    sum += num;\n        result[i++] = sum;\n    }\n    \n    Arrays.sort(result);\n\
    \    \n    for(int j = 0; j < result.length; j++)\n    {\n        result[j] /=\
    \ 10;\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java\
    \ |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long[] result = new long[nums.length];\n    int index = 0;\n    int sum =\
    \ 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum -= nums[i];\n        result[index++] = sum;\n    }\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum = 0;\n        for(int j = 0;\
    \ j < nums.length; j++)\n        {\n            sum += nums[j];\n            if(sum\
    \ > 0)\n            {\n                sum -= nums[j];\n                result[index++]\
    \ = sum;\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| c |>\nThis code doesn't\
    \ work. Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`\n<|/ c |>\n\
    <| c |>\nThanks for pointing that out. I've updated the code accordingly.\n<|/\
    \ c |>\n<| c |>\nThis code doesn't work. Try it with `order_by_points([1L, 11L,\
    \ -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated\
    \ the code accordingly.\n<|/ c |>\n<| a tags=sorting,arrays,c# |>\n<code>\nusing\
    \ System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Threading.Tasks;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int i = 0;\n    for(; i < nums.length; ++i)\n    {\n \
    \       sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,java |>\n<| c |>\n\
    This code doesn't work. Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `order_by_points([1L, 11L, -1L, -11L,\
    \ -12L])`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nIt does work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++){\n        sum += nums[i];\n \
    \       result[index++] = sum;\n    }\n    Arrays.sort(result, (a, b) -> {\n \
    \       return a.compareTo(b);\n    });\n    return result;\n}\n</code>\n<|/ a\
    \ tags=java,arrays,sorting |>\n<| a tags=java,arrays,sorting |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java |>\n\
    <code>\npublic static void main(String[] args) {\n    int[] nums = {1, 11, -1,\
    \ -11 ,-12};\n    int[] nums2 = {1, 11, -1, -11 ,-12};\n    int[] nums3 = {1,\
    \ 11, -1, -11 ,-12};\n    int[] nums4 = {1, 11, -1, -11 ,-12};\n    int[] nums5\
    \ = {1, 11, -1, -11 ,-12};\n    int[] nums6 = {1, 11, -1, -11 ,-12};\n    int[]\
    \ nums7 = {1, 11, -1, -11 ,-12};\n    int[] nums8 = {1, 11, -1, -11 ,-12};\n \
    \   int[] nums9 = {1, 11, -1, -11 ,-12};\n    int[] nums10 = {1, 11, -1, -11 ,-12};\n\
    \    int[] nums11 = {1, 11, -1, -11 ,-12};\n    int[] nums12 = {1, 11, -1, -11\
    \ ,-12};\n    int[] nums13 = {1, 11, -1, -11 ,-12};\n    int[] nums14 = {1, 11,\
    \ -1, -11 ,-12};\n    int[] nums15 = {1, 11, -1, -11 ,-12};\n    int[] nums16\
    \ = {1, 11, -1, -11 ,-12};\n    int[] nums17 = {1, 11, -1, -11 ,-12};\n    int[]\
    \ nums18 = {1, 11, -1, -11 ,-12};\n    int[] nums19 = {1, 11, -1, -11 ,-12};\n\
    \    int[] nums20 = {1, 11, -1, -11 ,-12};\n    int[] nums21 = {1, 11, -1, -11\
    \ ,-12};\n    int[] nums22 = {1, 11, -1, -11 ,-12};\n    int[] nums23 = {1, 11,\
    \ -1, -11 ,-12};\n    int[] nums24 = {1, 11, -1, -11 ,-12};\n    int[] nums25\
    \ = {1, 11, -1, -11 ,-12};\n    int[] nums26 = {1, 11, -1, -11 ,-12};\n    int[]\
    \ nums27 = {1, 11, -1, -11 ,-12};\n    ", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    long sum = 0;\n    for(long num : nums)\n    {\n        sum\
    \ += num;\n        result[i++] = sum;\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nI like the\
    \ idea of using Arrays.sort but this doesn't work if there are two numbers with\
    \ the same sum. For example, if `nums` is `[1L, 11L, -1L, -11L, -12L]`, then `order_by_points(nums)`\
    \ returns `[-11L, -11L, 1L, -12L, 11L]` instead of `[-1L, -11L, 1L, -12L, 11L]`.\n\
    <|/ c |>\n<| c |>\nI agree, that's why I added a note at the beginning. I'll update\
    \ my answer accordingly.\n<|/ c |>\n<| c |>\nI updated my answer accordingly.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n\
    <code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nThanks for your\
    \ answer. Can you please explain me the code you wrote? I am not able to understand\
    \ it.\n<|/ c |>\n<| c |>\nI added some comments to my answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks a lot for your help. I understood it now.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=java,sorting,arrays |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI believe this would\
    \ not work if there are two numbers with the same sum. For example: order_by_points([1L,\
    \ 11L, -1L, -11L, -12L]) would return [-1L, -11L, 1L, -12L, 11L]\n<|/ c |>\n<|\
    \ c |>\nYes, you are right. I've edited my answer to fix this issue.\n<|/ c |>\n\
    <| a tags=algorithm,sorting,java |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if\
    \ there are two or more numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, I\
    \ know. I just wanted to give the OP an idea of how to solve the problem and I\
    \ didn't want to give the full solution. Anyway, I edited my answer to include\
    \ a solution that works with multiple numbers with the same sum.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work if there are two or more numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that works with multiple\
    \ numbers with the same sum.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    long sum = 0;\n\
    \    for(int j=0; j<nums.length; j++)\n    {\n        sum += nums[j];\n      \
    \  result[i] = sum;\n        i++;\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| c |>\nThis is not\
    \ an answer to the question. He wants to sort an array of integers based on the\
    \ sum of their digits. Your solution sorts them in descending order.\n<|/ c |>\n\
    <| c |>\nThis is not an answer to the question. He wants to sort an array of integers\
    \ based on the sum of their digits. Your solution sorts them in descending order.\n\
    <|/ c |>\n<| c |>\nThis is not an answer to the question. He wants to sort an\
    \ array of integers based on the sum of their digits. Your solution sorts them\
    \ in descending order.\n<|/ c |>\n<| c |>\nThis is not an answer to the question.\
    \ He wants to sort an array of integers based on the sum of their digits. Your\
    \ solution sorts them in descending order.\n<|/ c |>\n<| c |>\nThis is not an\
    \ answer to the question. He wants to sort an array of integers based on the sum\
    \ of their digits. Your solution sorts them in descending order.\n<|/ c |>\n<|\
    \ a tags=java,arrays,sorting |>\n<code>\nimport java.util.Arrays;", "{\n    long[]\
    \ result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,java\
    \ |>\n<| a tags=arrays,sorting,java |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| c |>\nThis solution does not work\
    \ for negative numbers. Try with order_by_points([-1L, -11L, 1L, -12L, 11L])\n\
    <|/ c |>\n<| c |>\nThe question was about sorting an array of integers, not about\
    \ sorting an array of longs.\n<|/ c |>\n<| c |>\nI believe this solution will\
    \ fail for negative numbers. Try with order_by_points([-1L, -11L, 1L, -12L, 11L])\n\
    <|/ c |>\n<| c |>\nThe question was about sorting an array of integers, not about\
    \ sorting an array of longs.\n<|/ c |>\n<| c |>\nThe question was about sorting\
    \ an array of integers, not about sorting an array of longs.\n<|/ c |>\n<| a tags=sorting,arrays,c#\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;", "{\n    long[] result = new\
    \ long[nums.length];\n    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while\
    \ (i < nums.length)\n    {\n        sum += nums[i];\n        while (j < nums.length\
    \ && sum > 0)\n        {\n            sum += nums[j];\n            j++;\n    \
    \    }\n        result[i] = sum;\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=sorting,algorithm,arrays,c# |>\n<| c |>\nThis doesn't work\
    \ if there are two or more items with the same sum.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it out. `order_by_points([1L, 11L, -1L, -11L, -12L])` returns `[-1L,\
    \ -11L, 1L, -12L, 11L]`.\n<|/ c |>\n<| c |>\nIt doesn't work if there are two\
    \ or more items with the same sum.\n<|/ c |>\n<| c |>\nIt does work. Try it out.\
    \ `order_by_points([1L, 11L, -1L, -11L, -12L])` returns `[-1L, -11L, 1L, -12L,\
    \ 11L]`.\n<|/ c |>\n<| c |>\nIt doesn't work if there are two or more items with\
    \ the same sum.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static void Main(string[]\
    \ args)\n{\n    int[] arr = new int[] { 1, 11, -1, -11, -12 };\n    Array.Sort(arr);\n\
    \    Console.WriteLine(string.Join(\",\", arr));\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays,c#\
    \ |>\n<| c |>\nThis doesn't work if there are two or more items with the same\
    \ sum.\n<|/ c |>\n<| c |>\nIt does work. Try it out. `order_by_points([1L, 11L,\
    \ -1L, -11L, -12L])` returns `[-1L, -11L, 1L, -12L, 11L]`.\n<|/ c |>\n<| c |>\n\
    It doesn't work if there are two or more items with the same sum.\n<|/ c |>\n\
    <| c |>\nIt does work. Try it out. `order_by_points([1L, 11L, -1L, -11L, -12L])`\
    \ returns `[-1L, -11L, 1L, -12L, 11L]`.\n<|/ c |>\n<| c |>\nIt doesn't work if\
    \ there are two or more items with the same sum.\n<|/ c |>\n<| a dscore=2 ", "{\n\
    \    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/18770777)\n\
    <|/ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n<| c |>\n\
    I added a code snippet that does what the OP asked for. Hope it helps.\n<|/ c\
    \ |>\n<| c |>\nI added a code snippet that does what the OP asked for. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nI added a code snippet that does what the OP asked\
    \ for. Hope it helps.\n<|/ c |>\n<| a tags=java,arrays |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while(i < nums.length)\n    {\n        sum += nums[i];\n\
    \        while(sum >= 10)\n        {\n            result[j] = sum - 10;\n    \
    \        sum += nums[i++];\n            j++;\n        }\n        while(sum < 10)\n\
    \        {\n            result[j] = sum;\n            sum += nums[i++];\n    \
    \        j++;\n        }\n    }\n    while(j < result.length)\n    {\n       \
    \ result[j] = nums[i];\n        j++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,sorting,java |>\n<| a tags=arrays,sorting,java |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;", "{\n    long[] result =\
    \ new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(; i < nums.length;\
    \ ++i)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n\
    <| c |>\nThis solution does not work for negative numbers. For example, `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])` returns `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L,\
    \ -11L, -11L, -12L, 11L]`.\n<|/ c |>\n<| c |>\nI added a solution that works for\
    \ negative numbers. I tested it and it works.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works. I added a solution that works for negative numbers. I tested it\
    \ and it works.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a solution\
    \ that works for negative numbers. I tested it and it works.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added a solution that works for negative numbers.\
    \ I tested it and it works.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = new int[]{1,\
    \ 11, -1, -12, 11};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis solution does not work for negative\
    \ numbers. For example, `order_by_points([-1L, -11L, 1L, -12L, 11L])` returns\
    \ `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L, -11L, -11L, -12L, 11L]`.\n<|/\
    \ c |>\n<| c |>\nI added a solution that works for negative numbers. I tested\
    \ it and it works.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\n\
    public static void main(String[] args) {\n    int[] arr = new int[]{1, 11, -1,\
    \ -12, 11};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis solution does not work for negative\
    \ numbers. For example, `order_by_points([-1L, -11L, 1L, -12L, 11L])` returns\
    \ `[-1L, -11", "{\n    long[] result = new long[nums.length];\n    long sum =\
    \ 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| a |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result, (a, b) -> {\n\
    \        return a - b;\n    });\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java\
    \ |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(; i < nums.length; ++i)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    This solution does not work for negative numbers. Please see my answer for a solution\
    \ that does.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    \n    while (i < nums.length)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n        i++;\n    }\n    \n    Arrays.sort(result);\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nI appreciate\
    \ your efforts, but this doesn't really answer the question. Your code sorts the\
    \ array in descending order. OP wants ascending order.\n<|/ c |>\n<| c |>\nI didn't\
    \ realize that OP wanted ascending order. I've updated my answer to reflect that.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n    long[]\
    \ result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n    int sum\
    \ = 0;\n    while(i < nums.length)\n    {\n        sum += nums[i];\n        result[j]\
    \ = sum;\n        i++;\n        j++;\n    }\n    while(j < result.length)\n  \
    \  {\n        sum -= result[j];\n        result[j] = sum;\n        j++;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n\
    <| c |>\nI guess you meant `while(j < result.length)` instead of `while(j < nums.length)`\n\
    <|/ c |>\n<| c |>\nYes, thank you, I've fixed it.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int index\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| a tags=java,arrays |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n  \
    \  {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n\
    <| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| c |>\nThis doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nIt does work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nIt does work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
