name: HumanEval_13_greatest_common_divisor
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor\
  \ of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n   \
  \ >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
  \ a, long b) \n"
tests: "unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
  \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
  \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
completions: ["{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n\
    \    gcd = __gcd(a, b);\n    \n    if (gcd == 0)\n        return b;\n    \n  \
    \  return gcd;\n}", "{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n\
    \    \n    gcd = __gcd(a, b);\n    \n    if (gcd == 0)\n        return b;\n  \
    \  \n    return gcd;\n}", "{\n\tlong gcd = 1;\n\twhile (b > 0) {\n\t\tlong r =\
    \ a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\treturn gcd;\n}", "{\n\tlong gcd;\n\t\n\
    \tgcd = 1;\n\twhile (b != 0) {\n\t\tlong temp = b;\n\t\tb = a % b;\n\t\ta = temp;\n\
    \t\tgcd = (gcd > a) ? gcd : a;\n\t}\n\treturn gcd;\n}", "{\n\tlong gcd;\n\t\n\t\
    gcd = a;\n\twhile (gcd > b) {\n\t\tgcd = (gcd % b);\n\t}\n\treturn gcd;\n}", "{\n\
    \tlong gcd;\n\tif(b == 0)\n\t\treturn a;\n\tif(b == 1)\n\t\treturn a;\n\tif(b\
    \ % 2 == 0)\n\t\treturn greatest_common_divisor(b / 2, a);\n\tgcd = greatest_common_divisor(b\
    \ / 2, a);\n\twhile(a % gcd == 0)\n\t{\n\t\tgcd = gcd * 2;\n\t}\n\treturn gcd;\n\
    }\n/*\n Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    3L\n    >>> least_common_multiple(25L, 15L)\n    15L\n    \n*/\nlong\
    \ least_common_multiple(long a, long b) \n{\n\tlong lcm;\n\tif(b == 0)\n\t\treturn\
    \ a;\n\tif(b == 1)\n\t\treturn a;\n\tif(b % 2 == 0)\n\t\treturn least_common_multiple(b\
    \ / 2, a);\n\tlcm = least_common_multiple(b / 2, a);\n\twhile(a % lcm == 0)\n\t\
    {\n\t\tlcm = lcm / 2;\n\t}\n\treturn lcm;\n}\n/*\n Return the least common multiple\
    \ of a and b\n    >>> least_common_multiple(3L, 5L)\n    3L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    15L\n    \n*/\nlong lcm_of_lists(long a, long b)\n{\n\tlong lcm;\n\
    \tif(b == 0)\n\t\treturn a;\n\tif(b == 1)\n\t\treturn a;\n\tif(b % 2 == 0)\n\t\
    \treturn least_common_multiple(b / 2, a);\n\tlcm = least_common_multiple(b / 2,\
    \ a);\n\twhile(a % lcm == 0)\n\t{\n\t\tlcm = lcm / 2;\n\t}\n\treturn lcm;\n}\n\
    /*\n Return the least common multiple of a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    3L\n    >>> least_common_multiple(25L, 15L)\n    15L\n    \n*/\nlong\
    \ lcm_of_lists(long a, long b)\n{\n\tlong lcm;\n\tif(b == 0)\n\t\treturn a;\n\t\
    if(b == 1)\n\t\treturn a;\n\tif(b % 2 == 0)\n\t\treturn least_common_multiple(b\
    \ / 2, a);\n\tlcm = least_common_multiple(b / 2, a);\n\twhile(a % lcm == 0)\n\t\
    {\n\t\tlcm = lcm / 2;\n\t}\n\treturn lcm;\n}\n/*\n Return the least common multiple\
    \ of a and b\n    >>> least_common_multiple(3L, 5L)", "{\n\tlong gcd = 1;\n\t\
    while (b != 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\treturn gcd;\n\
    }", "{\n\tlong gcd;\n\t\n\tgcd = std.math.gcd(a, b);\n\t\n\treturn gcd;\n}", "{\n\
    \    long gcd;\n    \n    if (a < b) {\n        long tmp = a;\n        a = b;\n\
    \        b = tmp;\n    }\n    \n    for (;;) {\n        gcd = a % b;\n       \
    \ if (gcd == 0) break;\n        a = b;\n        b = gcd;\n    }\n    return gcd;\n\
    }", "{\n    long gcd;\n    \n    if (a == 0)\n        return b;\n    if (b ==\
    \ 0)\n        return a;\n    \n    gcd = __gcd(a, b);\n    if (gcd == 0)\n   \
    \     return a;\n    \n    return greatest_common_divisor(b % gcd, a);\n}", "{\n\
    \tlong gcd;\n\t\n\tgcd = __gcd(a, b);\n\tif (gcd == 0) \n\t\treturn a;\n\telse\n\
    \t\treturn gcd;\n}", "{\n    long r;\n    \n    if (a == 0)\n        return b;\n\
    \    if (b == 0)\n        return a;\n    \n    r = a % b;\n    if (r > 0)\n  \
    \      return greatest_common_divisor(b, r);\n    else\n        return greatest_common_divisor(a,\
    \ r + 1);\n}", "{\n\tlong gcd;\n\t\n\tgcd = 1;\n\twhile (a != 0) {\n\t\tlong r\
    \ = a % b;\n\t\ta = b;\n\t\tb = r;\n\t\tgcd = (gcd > b) ? gcd : b;\n\t}\n\treturn\
    \ gcd;\n}", "{\n    long gcd;\n    \n    if (a < b) {\n        long tmp = a;\n\
    \        a = b;\n        b = tmp;\n    }\n    \n    gcd = 1;\n    \n    while\
    \ (a != 0) {\n        if (a > b) {\n            a %= b;\n        }\n        gcd\
    \ = (gcd * a) % b;\n    }\n    \n    return gcd;\n}", "{\n\tlong gcd;\n\t\n\t\
    for (;;) {\n\t\tgcd = a % b;\n\t\tif (gcd == 0) break;\n\t\ta = b;\n\t\tb = gcd;\n\
    \t}\n\treturn gcd;\n}", "{\n\tlong gcd;\n\t\n\tgcd = __gcd(a, b);\n\t\n\treturn\
    \ gcd;\n}", "{\n    long gcd;\n    \n    if (b == 0)\n        return a;\n    \n\
    \    gcd = __gcd(a, b);\n    if (gcd == 0)\n        return a;\n    \n    return\
    \ greatest_common_divisor(b, gcd);\n}", "{\n    long gcd = 1;\n    while (a !=\
    \ 0) {\n        if (a > b) {\n            a %= b;\n        }\n        else {\n\
    \            b %= a;\n        }\n        gcd = (gcd > a) ? gcd : a;\n    }\n \
    \   return gcd;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis code does\
    \ not work for negative numbers. Try with a = -2 and b = -3 or a = -2 and b =\
    \ -1\n<|/ c |>\n<| c |>\nIt works for negative numbers. Try it yourself. It returns\
    \ `1` for `a = -2` and `b = -3`.\n<|/ c |>\n<| c |>\nI tested it on ideone and\
    \ it works fine. Try it yourself. It returns 1 for `a = -2` and `b = -3`.\n<|/\
    \ c |>\n<| c |>\nI tested it on ideone and it works fine. Try it yourself. It\
    \ returns 1 for `a = -2` and `b = -3`.\n<|/ c |>\n<| c |>\nI tested it on ideone\
    \ and it works fine. Try it yourself. It returns 1 for `a = -2` and `b = -3`.\n\
    <|/ c |>\n<| a |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n  \
    \  long gcd;\n    \n    if (a == 0)\n        return b;\n    if (b == 0)\n    \
    \    return a;\n    \n    gcd = __gcd(a, b);\n    \n    if (gcd == 0)\n      \
    \  return a;\n    \n    return gcd;\n}", "{\n\tlong c;\n\tc = a % b;\n\twhile\
    \ (c != 0) {\n\t\ta = b;\n\t\tb = c;\n\t\tc = a % b;\n\t}\n\treturn b;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
