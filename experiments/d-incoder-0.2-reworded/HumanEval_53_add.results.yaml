language: d
name: HumanEval_53_add
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of x\n    >>> abs(-1L)\n    1L\n    >>> abs(1L)\n    1L\n\
    \    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the floor\
    \ of x\n    >>> floor(-1L)\n    -1L\n    >>> floor(-2L)\n    0L\n    >>> floor(1L)\n\
    \    1L\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\n\
    Get the ceiling of x\n    >>> ceil(-1L)\n    0L\n    >>> ceil(-2L)\n    1L\n \
    \   >>> ceil(1L)\n    1L\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ?\
    \ -x : x;\n}\n/*\nGet the remainder of x divided by y\n    >>> remainder(2L, 3L)\n\
    \    1L\n    >>> remainder(5L, 7L)\n    2L\n    \n*/\nlong remainder(long x, long\
    \ y) \n{\n    return x % y;\n}\n/*\nGet the remainder of x divided by y with rounding\n\
    \    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L, 7L)\n    2L\n    \n\
    */\nlong remainderRound(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the\
    \ floor of x with rounding\n    >>> floorRound(-1L)\n    0L\n    >>> floorRound(-2L)\n\
    \    0L\n    >>> floorRound(1L)\n    1L\n    \n*/\nlong floorRound(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling of x with rounding\n   \
    \ >>> ceilRound(-1L)\n    1L\n    >>> ceilRound(-2L)\n    1\nunittest\n{\n   \
    \ alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm9hvtuup.d(129): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm9hvtuup.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the square root of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(4L)\n    2.0\n    \n*/\nfloat sqrt(float x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\n\
    long sqrt(long x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\nulong sqrt(ulong x) \n{\n\
    \    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(4L)\n    2.0\n    \n*/\nuint sqrt(uint x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\n\
    uint sqrt(uint x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\nulong sqrt(ulong x) \n{\n\
    \    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(4L)\n    2.0\n    \n*/\nuint sqrt(uint x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\n\
    ulong sqrt(ulong x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\nuint sqrt(uint x) \n{\n  \
    \  return std.math.sqrt(\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk3vpp_93.d(150): Error: expression expected, not `unittest`\n/tmp/tmpk3vpp_93.d(151):
    Error: found `{` when expecting `,`\n/tmp/tmpk3vpp_93.d(152): Error: expression
    expected, not `alias`\n/tmp/tmpk3vpp_93.d(152): Error: found `candidate` when
    expecting `,`\n/tmp/tmpk3vpp_93.d(152): Error: expression expected, not `=`\n/tmp/tmpk3vpp_93.d(152):
    Error: found `add` when expecting `,`\n/tmp/tmpk3vpp_93.d(152): Error: expression
    expected, not `;`\n/tmp/tmpk3vpp_93.d(154): Error: found `assert` when expecting
    `,`\n/tmp/tmpk3vpp_93.d(154): Error: found `;` when expecting `,`\n/tmp/tmpk3vpp_93.d(155):
    Error: found `;` when expecting `,`\n/tmp/tmpk3vpp_93.d(156): Error: found `;`
    when expecting `,`\n/tmp/tmpk3vpp_93.d(157): Error: found `;` when expecting `,`\n/tmp/tmpk3vpp_93.d(158):
    Error: found `;` when expecting `,`\n/tmp/tmpk3vpp_93.d(159): Error: expression
    expected, not `}`\n/tmp/tmpk3vpp_93.d(160): Error: found `void` when expecting
    `,`\n/tmp/tmpk3vpp_93.d(160): Error: found `{` when expecting `,`\n/tmp/tmpk3vpp_93.d(160):
    Error: expression expected, not `}`\n/tmp/tmpk3vpp_93.d(160): Error: found `End
    of File` when expecting `,`\n/tmp/tmpk3vpp_93.d(160): Error: found `End of File`
    when expecting `)`\n/tmp/tmpk3vpp_93.d(160): Error: found `End of File` when expecting
    `;` following `return` statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk3vpp_93.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n    \n*/\n\
    long multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    3L\n  \
    \  \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\nGet the remainder\
    \ of dividing x by y\n    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L,\
    \ 7L)\n    2L\n    \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the absolute value of x\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n\
    \    5L\n    \n*/\nlong abs(long x) \n{\n    return x > 0 ? x : -x;\n}\n/*\nGet\
    \ the sign of x\n    >>> sign(-2L)\n    -1L\n    >>> sign(-5L)\n    1L\n    \n\
    */\nlong sign(long x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the absolute\
    \ value of x\n    >>> abs(-2L)\n    -2L\n    >>> abs(-5L)\n    5L\n    \n*/\n\
    long abs(long x) \n{\n    return x > 0 ? x : -x;\n}\n/*\nGet the sign of x\n \
    \   >>> sign(-2L)\n    -1L\n    >>> sign(-5L)\n    1L\n    \n*/\nlong sign(long\
    \ x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the absolute value of x\n   \
    \ >>> abs(-2L)\n    -2L\n    >>> abs(-5L)\n    5L\n    \n*/\nlong abs(long x)\
    \ \n{\n    return x > 0 ? x : -x;\n}\n/*\nGet the sign of x\n    >>> sign(-2L)\n\
    \    -1L\n    >>> sign(-5L)\n    1L\n    \n*/\nlong sign(long x) \n{\n    return\
    \ x < 0 ? -1 : 1;\n}\n/*\nGet the absolute value of x\n    >>> abs(-2L)\n    -2L\n\
    \    >>> abs(-5L)\n    5L\n    \n*/\nlong abs(long x) \n{\n    return x > 0 ?\
    \ x : -x;\n}\n/*\nGet the sign of x\n    >>> sign(-2L)\n    -1L\n    >>> sign(-5L)\n\
    \    1L\n    \n*/\nlong sign(long x) \n{\n\nunittest\n{\n    alias candidate =\
    \ add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) ==\
    \ 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) ==\
    \ 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3uw5klq_.d(146): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3uw5klq_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\n/*\nSubtract two numbers x and y\n    >>>\
    \ subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n\treturn x - y;\n}\n/*\nMultiply two numbers x and y\n    >>>\
    \ multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n    \n*/\nlong\
    \ multiply(long x, long y) \n{\n\treturn x * y;\n}\n/*\nDivide two numbers x and\
    \ y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    3L\n    \n*/\n\
    long divide(long x, long y) \n{\n\treturn x / y;\n}\n/*\nGet the absolute value\
    \ of a number\n    >>> abs(2L)\n    2L\n    >>> abs(-2L)\n    2L\n    \n*/\nlong\
    \ abs(long x) \n{\n\treturn x < 0 ? -x : x;\n}\n/*\nGet the modulus of a number\n\
    \    >>> mod(2L, 3L)\n    1L\n    >>> mod(5L, 7L)\n    3L\n    \n*/\nlong mod(long\
    \ x, long y) \n{\n\treturn x % y;\n}\n/*\nGet the remainder of a number divided\
    \ by another\n    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L, 7L)\n \
    \   2L\n    \n*/\nlong remainder(long x, long y) \n{\n\treturn x % y;\n}\n/*\n\
    Get the floor of a number\n    >>> floor(2L)\n    2L\n    >>> floor(5L)\n    5L\n\
    \    \n*/\nlong floor(long x) \n{\n\treturn x < 0 ? -x : x;\n}\n/*\nGet the ceiling\
    \ of a number\n    >>> ceil(2L)\n    3L\n    >>> ceil(5L)\n    5L\n    \n*/\n\
    long ceil(long x) \n{\n\treturn x < 0 ? -x : x;\n}\n/*\nGet the floor of a number\n\
    \    >>> floor(2L)\n    2L\n    >>> floor(5L)\n    5L\n    \n*/\nlong floor(long\
    \ x) \n{\n\treturn x < 0 ? -x : x;\n}\n/*\nGet the ceiling of a number\n    >>>\
    \ ceil(2L)\n    3L\n    >>> ceil(5L)\n    5L\n    \n*/\nlong ceil(long x) \n{\n\
    \treturn x < 0 ? -x : x;\n}\n/*\nGet the square root of a number\n    >>> sqrt(2L)\n\
    \    1L\n    >>> sqrt(5L)\n    3L\n    \n\nunittest\n{\n    alias candidate =\
    \ add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) ==\
    \ 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) ==\
    \ 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzjrcw_lh.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzjrcw_lh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long add(long long\
    \ x, long long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n\
    \    >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n    \n*/\n\
    long subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nSubtract two numbers\
    \ x and y\n    >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n\
    \    \n*/\nlong long subtract(long long x, long long y) \n{\n    return x - y;\n\
    }\n/*\nMultiply two numbers x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>>\
    \ multiply(5L, 7L)\n    42L\n    \n*/\nlong multiply(long x, long y) \n{\n   \
    \ return x * y;\n}\n/*\nMultiply two numbers x and y\n    >>> multiply(2L, 3L)\n\
    \    6L\n    >>> multiply(5L, 7L)\n    42L\n    \n*/\nlong long multiply(long\
    \ long x, long long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and\
    \ y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    2L\n    \n*/\n\
    long divide(long x, long y) \n{\n    return x / y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    2L\n  \
    \  \n*/\nlong long divide(long long x, long long y) \n{\n    return x / y;\n}\n\
    /*\nModulus operator returns the remainder of x divided by y\n    >>> modulus(2L,\
    \ 3L)\n    1L\n    >>> modulus(5L, 7L)\n    2L\n    \n*/\nlong modulus(long x,\
    \ long y) \n{\n    return x % y;\n}\n/*\nModulus operator returns the remainder\
    \ of x divided by y\n    >>> modulus(2L, 3L)\n    1L\n    >>> modulus(5L, 7L)\n\
    \    2L\n    \n*/\nlong long modulus(long long x, long long y) \n{\n    return\
    \ x % y;\n}\n/*\nBitwise AND operator\n    >>> bitwise_and(2L, 3L)\n    \nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq8b_j2xt.d(23): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmpq8b_j2xt.d(23): Error: use `long` for a 64 bit integer
    instead of `long long`\n/tmp/tmpq8b_j2xt.d(23): Error: use `long` for a 64 bit
    integer instead of `long long`\n/tmp/tmpq8b_j2xt.d(47): Error: use `long` for
    a 64 bit integer instead of `long long`\n/tmp/tmpq8b_j2xt.d(47): Error: use `long`
    for a 64 bit integer instead of `long long`\n/tmp/tmpq8b_j2xt.d(47): Error: use
    `long` for a 64 bit integer instead of `long long`\n/tmp/tmpq8b_j2xt.d(71): Error:
    use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpq8b_j2xt.d(71):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpq8b_j2xt.d(71):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpq8b_j2xt.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpq8b_j2xt.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpq8b_j2xt.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpq8b_j2xt.d(119):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpq8b_j2xt.d(119):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpq8b_j2xt.d(119):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpq8b_j2xt.d(123):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq8b_j2xt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2L, 3L)\n    1L\n    >>> sub(5L, 7L)\n    3L\n    \n*/\nlong sub(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> mul(3L, 2L)\n    6L\n    >>> mul(4L, 7L)\n    42L\n    \n*/\nlong mul(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ div(2L, 3L)\n    1L\n    >>> div(5L, 7L)\n    2L\n    \n*/\nlong div(long x,\
    \ long y) \n{\n    return x / y;\n}\n/*\nGet the modulus of two numbers x and\
    \ y\n    >>> mod(2L, 3L)\n    1L\n    >>> mod(5L, 7L)\n    2L\n    \n*/\nlong\
    \ mod(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the remainder of x divided\
    \ by y\n    >>> rem(2L, 3L)\n    1L\n    >>> rem(5L, 7L)\n    2L\n    \n*/\nlong\
    \ rem(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the sign of x\n    >>>\
    \ sign(-2L)\n    1L\n    >>> sign(-5L)\n    -1L\n    \n*/\nlong sign(long x) \n\
    {\n    return x < 0 ? -1 : (x > 0 ? 1 : 0);\n}\n/*\nGet the absolute value of\
    \ x\n    >>> abs(-2L)\n    2L\n    >>> abs(-5L)\n    5L\n    \n*/\nlong abs(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the square root of x\n    >>>\
    \ sqrt(2L)\n    1L\n    >>> sqrt(5L)\n    1.41421356237\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of x\n    >>>\
    \ sqrt(2L)\n    1L\n    >>> sqrt(5L)\n    1.41421356237\n    \n*/\nfloat sqrt(float\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of x\n    >>>\
    \ sqrt(2L)\n    1L\n    >>> sqrt(5L)\n    1.41421356237\n    \n*/\nlong sqrt(long\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of x\n    >>>\
    \ sqrt(2L)\n    1L\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppllspsw6.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppllspsw6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2L, 3L)\n    1L\n    >>> sub(5L, 7L)\n    3L\n    \n*/\nlong sub(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> mul(3L, 4L)\n    12L\n    >>> mul(5L, 7L)\n    21L\n    \n*/\nlong mul(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ div(3L, 4L)\n    1L\n    >>> div(5L, 7L)\n    3L\n    \n*/\nlong div(long x,\
    \ long y) \n{\n    return x / y;\n}\n/*\nReturn x to the power of y\n    >>> pow(3L,\
    \ 4L)\n    12L\n    >>> pow(5L, 7L)\n    21L\n    \n*/\nlong pow(long x, long\
    \ y) \n{\n    return pow(x, y);\n}\n/*\nReturn the square root of x\n    >>> sqrt(3L)\n\
    \    1.7320508075688772\n    \n*/\ndouble sqrt(double x) \n{\n    return sqrt(x);\n\
    }\n/*\nReturn the absolute value of x\n    >>> abs(3L)\n    3L\n    \n*/\nlong\
    \ abs(long x) \n{\n    return abs(x);\n}\n/*\nReturn the floor of x\n    >>> floor(3L)\n\
    \    1L\n    \n*/\nlong floor(long x) \n{\n    return floor(x);\n}\n/*\nReturn\
    \ the ceiling of x\n    >>> ceil(3L)\n    2L\n    \n*/\nlong ceil(long x) \n{\n\
    \    return ceil(x);\n}\n/*\nReturn the nearest integer to x\n    >>> round(3L)\n\
    \    1L\n    \n*/\nlong round(long x) \n{\n    return round(x);\n}\n/*\nReturn\
    \ the floor of x rounded down\n    >>> floor(3.5)\n    3L\n    \n*/\nlong floorDown(long\
    \ x) \n{\n    return floor(x);\n}\n/*\nReturn the ceiling of x rounded up\n  \
    \  >>> ceil(3.5)\n    4L\n    \n*/\nlong ceilDown(long x) \n{\n    return ceil(x);\n\
    }\n/*\nReturn the nearest integer to x rounded down\n    >>> round(3.5)\n    3L\n\
    \    \n*/\nlong roundDown(long x) \n{\n    return round(x);\n}\n/*\nReturn the\
    \ floor of x rounded up\n    >>> floor(3.5)\n    4L\n\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwg5n3bgf.d(143): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwg5n3bgf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\n/*\nSubtract two numbers x and y\n    >>>\
    \ subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    6L\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n\treturn x - y;\n}\n/*\nMultiply two numbers x and y\n    >>>\
    \ multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n    \n*/\nlong\
    \ multiply(long x, long y) \n{\n\treturn x * y;\n}\n/*\nDivide two numbers x and\
    \ y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    3L\n    \n*/\n\
    long divide(long x, long y) \n{\n\treturn x / y;\n}\n/*\nReturn whether x is even\n\
    \    >>> is_even(2L)\n    True\n    >>> is_even(5L)\n    False\n    \n*/\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Return x raised to the power of y\n    >>> power(2L, 3L)\n    8L\n    >>> power(5L,\
    \ 7L)\n    121L\n    \n*/\nlong power(long x, long y) \n{\n    return pow(x, y);\n\
    }\n/*\nReturn x to the power of y\n    >>> power(2L, 3L)\n    8L\n    >>> power(5L,\
    \ 7L)\n    121L\n    \n*/\nlong pow2(long x, long y) \n{\n    return pow(x, y);\n\
    }\n/*\nReturn the square root of x\n    >>> sqrt(2L)\n    1L\n    >>> sqrt(5L)\n\
    \    1.41421356237\n    \n*/\ndouble sqrt(double x) \n{\n    return sqrt(x);\n\
    }\n/*\nReturn the square root of x\n    >>> sqrt(2L)\n    1L\n    >>> sqrt(5L)\n\
    \    1.41421356237\n    \n*/\ndouble sqrt(long x) \n{\n    return sqrt(x);\n}\n\
    /*\nReturn the square root of x\n    >>> sqrt(2L)\n    1L\n    >>> sqrt(5L)\n\
    \    1.41421356237\n    \n*/\ndouble sqrt(int x) \n{\n    return sqrt(x);\n}\n\
    /*\nReturn the square root of x\n    >>> sqrt(2L)\n    1L\n    >>> sqrt(5L)\n\
    \    1.41421356237\n    \n*/\ndouble sqrt(uint x) \n{\n    return sqrt(x);\n}\n\
    /*\nReturn the square root of x\n    >>> sqrt(2L)\n    1L\n    >>> sqrt(5L)\n\
    \    1.41421356237\n    \n*/\ndouble sqrt(uint x) \n{\n    return sqrt(x);\n}\n\
    /*\nReturn the square root of x\n    >>> sqrt(2L)\n    1L\n    >>> sqrt(5L)\n\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n\
    \    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n\
    \    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7lpghvpf.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7lpghvpf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n    \n*/\n\
    long multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    3L\n  \
    \  \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\nGet the remainder\
    \ of x divided by y\n    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L,\
    \ 7L)\n    2L\n    \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the absolute value of x\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n\
    \    5L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the modulus of x divided by y\n    >>> modulus(2L, 3L)\n    1L\n    >>> modulus(5L,\
    \ 7L)\n    2L\n    \n*/\nlong modulus(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the sign of x\n    >>> sign(-2L)\n    -1L\n    >>> sign(-5L)\n    1L\n\
    \    \n*/\nlong sign(long x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the absolute\
    \ value of x raised to the power y\n    >>> abs(2L, 3L)\n    6L\n    >>> abs(5L,\
    \ 7L)\n    42L\n    \n*/\nlong pow(long x, long y) \n{\n    return pow(x, y);\n\
    }\n/*\nGet the square root of x\n    >>> sqrt(2L)\n    1L\n    >>> sqrt(5L)\n\
    \    3L\n    \n*/\nlong sqrt(long x) \n{\n    return sqrt(x);\n}\n/*\nGet the\
    \ reciprocal of x\n    >>> reciprocal(2L)\n    1L\n    >>> reciprocal(5L)\n  \
    \  1/3L\n    \n*/\nlong reciprocal(long x) \n{\n    return 1 / x;\n}\n/*\nGet\
    \ the floor of x\n    >>> floor(2L)\n    2L\n    >>> floor(5L)\n    3L\n    \n\
    */\nlong floor(long x) \n{\n    return x < 0 ? -floor(-x) : floor(x);\n}\n/*\n\
    Get the ceiling of x\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8yul0n__.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8yul0n__.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    6L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of a number\n    >>> abs(-5)\n    5\n    >>> abs(5)\n \
    \   5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the floor value of a number\n    >>> floor(5)\n    5\n    >>> floor(5.5)\n \
    \   5\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the ceiling value of a number\n    >>> ceil(5)\n    6\n    >>> ceil(5.5)\n \
    \   6\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the natural logarithm of a number\n    >>> log(5)\n    1.6094379124341\n   \
    \ >>> log(5.5)\n    1.6094379124341\n    \n*/\ndouble log(double x) \n{\n    return\
    \ log(x);\n}\n/*\nGet the square root of a number\n    >>> sqrt(5)\n    2.6457513110646\n\
    \    >>> sqrt(5.5)\n    2.8597770243852\n    \n*/\ndouble sqrt(double x) \n{\n\
    \    return sqrt(x);\n}\n/*\nGet the reciprocal of a number\n    >>> reciprocal(5)\n\
    \    0.5\n    >>> reciprocal(5.5)\n    0.5\n    \n*/\ndouble reciprocal(double\
    \ x) \n{\n    return 1 / x;\n}\n/*\nGet the sine of a number\n    >>> sin(5)\n\
    \    0.841470984807897\n    >>> sin(5.5)\n    0.909297426825681\n    \n*/\ndouble\
    \ sin(double x) \n{\n    return sin(x);\n}\n/*\nGet the cosine of a number\n \
    \   >>> cos(5)\n    0.54030230586\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0td6gfpn.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0td6gfpn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long add(long long\
    \ x, long long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n   \
    \ >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\ndouble add(double\
    \ x, double y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>>\
    \ add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\ndouble long add(double\
    \ long x, double long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and\
    \ y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nfloat\
    \ add(float x, float y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nfloat long\
    \ add(float long x, float long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n\
    \    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n\
    \    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpemtumbmz.d(23): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmpemtumbmz.d(23): Error: use `long` for a 64 bit integer
    instead of `long long`\n/tmp/tmpemtumbmz.d(23): Error: use `long` for a 64 bit
    integer instead of `long long`\n/tmp/tmpemtumbmz.d(47): Error: no identifier for
    declarator `double`\n/tmp/tmpemtumbmz.d(47): Error: found `long` when expecting
    `)`\n/tmp/tmpemtumbmz.d(47): Error: semicolon expected following function declaration\n/tmp/tmpemtumbmz.d(47):
    Error: no identifier for declarator `x`\n/tmp/tmpemtumbmz.d(47): Error: declaration
    expected, not `,`\n/tmp/tmpemtumbmz.d(50): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemtumbmz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    2L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of a number\n    >>> abs(2L)\n    2L\n    >>> abs(-2L)\n\
    \    2L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the floor value of a number\n    >>> floor(2L)\n    2L\n    >>> floor(-2L)\n\
    -2L\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ? x + 1 : x;\n}\n/*\n\
    Get the ceiling value of a number\n    >>> ceil(2L)\n    2L\n    >>> ceil(-2L)\n\
    -1L\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? x - 1 : x;\n}\n/*\nGet\
    \ the remainder of a number divided by another\n    >>> remainder(2L, 3L)\n  \
    \  1L\n    >>> remainder(5L, 7L)\n    2L\n    \n*/\nlong remainder(long x, long\
    \ y) \n{\n    return x % y;\n}\n/*\nGet the remainder of x divided by y rounded\
    \ towards zero\n    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L, 7L)\n\
    \    2L\n    \n*/\nlong remainderr(long x, long y) \n{\n    return x % y;\n}\n\
    /*\nGet the sign of a number\n    >>> sign(-2L)\n-1L\n    >>> sign(0)\n0L\n  \
    \  >>> sign(-0)\n0L\n    >>> sign(-2L)\n-1L\n    \n*/\nlong sign(long x) \n{\n\
    \    return x < 0 ? -1 : 1;\n}\n/*\nGet the absolute value of a number\n    >>>\
    \ abs(2L)\n    2L\n    >>> abs(-2L)\n    2L\n    \n*/\nlong abs(long x) \n{\n\
    \    return x < 0 ? -x : x;\n}\n/*\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkz3k7tnb.d(139): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkz3k7tnb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of a number\n    >>> abs(-1L)\n    1L\n    \n*/\nlong abs(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the modulus of a number\n   \
    \ >>> modulus(-1L, 2L)\n    1L\n    \n*/\nlong modulus(long x, long y) \n{\n \
    \   return x % y;\n}\n/*\nGet the remainder of a number\n    >>> remainder(-1L,\
    \ 2L)\n    0L\n    \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the floor of a number\n    >>> floor(-1L)\n    -1L\n    \n*/\nlong\
    \ floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling of a number\n\
    \    >>> ceil(-1L)\n    0L\n    \n*/\nlong ceil(long x) \n{\n    return x < 0\
    \ ? -x : x;\n}\n/*\nGet the round of a number\n    >>> round(-1L)\n    0L\n  \
    \  \n*/\nlong round(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the floor\
    \ of a number\n    >>> floor(-1L)\n    -1L\n    \n*/\nlong floor(long x) \n{\n\
    \    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(-1L)\n\
    \    0L\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\n\
    Get the round of a number\n    >>> round(-1L)\n    0L\n    \n*/\nlong round(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the floor of a number\n    >>>\
    \ floor(-1L)\n    -1L\n    \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwiry2832.d(141): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwiry2832.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Raise a number to a power\n    >>> power(2L, 3L)\n    8L\n    >>> power(5L, 7L)\n\
    \    21L\n    \n*/\nlong power(long x, long y) \n{\n    return pow(x, y);\n}\n\
    /*\nGet the absolute value of a number\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n\
    \    5L\n    \n*/\nlong abs(long x) \n{\n    return x;\n}\n/*\nGet the sign of\
    \ a number\n    >>> sign(-2L)\n    -1L\n    >>> sign(-5L)\n    1L\n    \n*/\n\
    long sign(long x) \n{\n    if (x < 0) return -1L;\n    if (x == 0) return 0L;\n\
    \    return 1L;\n}\n/*\nGet the floor of a number\n    >>> floor(2L)\n    2L\n\
    \    >>> floor(5L)\n    2L\n    \n*/\nlong floor(long x) \n{\n    return x;\n\
    }\n/*\nGet the ceiling of a number\n    >>> ceil(2L)\n    3L\n    >>> ceil(5L)\n\
    \    5L\n    \n*/\nlong ceil(long x) \n{\n    return x;\n}\n/*\nGet the remainder\
    \ of a number divided by another\n    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L,\
    \ 7L)\n    3L\n    \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the floor division of two numbers x and y\n    >>> floordiv(2L, 3L)\n\
    \    1L\n    >>> floordiv(5L, 7L)\n    2L\n    \n*/\nlong floordiv(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nGet the modulus of two numbers x and \nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4rs26rgd.d(137): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rs26rgd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n    \n*/\n\
    long subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of a number\n    >>> abs(-1L)\n    1L\n    >>> abs(1L)\n\
    \    1L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the floor value of a number\n    >>> floor(-1L)\n    -1L\n    >>> floor(-2L)\n\
    \    0L\n    >>> floor(1L)\n    1L\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? x + 1 : x;\n}\n/*\nGet the ceiling value of a number\n    >>> ceil(-1L)\n\
    \    0L\n    >>> ceil(-2L)\n    1L\n    >>> ceil(1L)\n    1L\n    \n*/\nlong ceil(long\
    \ x) \n{\n    return x < 0 ? x - 1 : x;\n}\n/*\nGet the remainder of a number\
    \ divided by another\n    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L,\
    \ 7L)\n    2L\n    \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the modulus of a number divided by another\n    >>> modulus(2L, 3L)\n\
    \    1L\n    >>> modulus(5L, 7L)\n    2L\n    \n*/\nlong modulus(long x, long\
    \ y) \n{\n    return x % y;\n}\n/*\nGet the sign of a number\n    >>> sign(-1)\n\
    \    1L\n    >>> sign(0)\n    0L\n    >>> sign(1)\n    1L\n    \n*/\nlong sign(long\
    \ x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-1L)\n    1L\n    >>> abs(1L)\n    1L\n    \n*/\nlong abs(long x)\
    \ \n{\n    return x < 0 ? -x : x;\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf1xhf0am.d(140): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf1xhf0am.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    6L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    2L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the remainder of dividing x by y\n    >>> remainder(2L, 3L)\n    1L\n    >>>\
    \ remainder(5L, 7L)\n    2L\n    \n*/\nlong remainder(long x, long y) \n{\n  \
    \  return x % y;\n}\n/*\nGet the absolute value of x\n    >>> abs(2L)\n    2L\n\
    \    >>> abs(-5L)\n    5L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ?\
    \ -x : x;\n}\n/*\nGet the sign of x\n    >>> sign(-2L)\n    1L\n    >>> sign(-5L)\n\
    \    -1L\n    \n*/\nlong sign(long x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\n\
    Get the floor of x\n    >>> floor(2L)\n    2L\n    >>> floor(-5L)\n    -5L\n \
    \   \n*/\nlong floor(long x) \n{\n    return x < 0 ? x + 1 : x;\n}\n/*\nGet the\
    \ ceiling of x\n    >>> ceil(2L)\n    3L\n    >>> ceil(-5L)\n    -5L\n    \n*/\n\
    long ceil(long x) \n{\n    return x < 0 ? x - 1 : x;\n}\n/*\nGet the absolute\
    \ value of x\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n    5L\n    \n*/\nlong\
    \ abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the sign of x\n    >>>\
    \ sign(-2L)\n    1L\n    >>> sign(-5L)\n    -1L\n    \n*/\nlong sign(long x) \n\
    {\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the floor of x\n    >>> floor(2L)\n\
    \    2L\n    >>> floor(-5L)\n    -5L\n    \n*/\n\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n    \n*/\n\
    long subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the square root of a number\n    >>> sqrt(3L)\n    1.7320508075688772\n  \
    \  \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the\
    \ square root of a number\n    >>> sqrt(3L)\n    1.7320508075688772\n    \n*/\n\
    float sqrt(float x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(3L)\n    1.7320508075688772\n    \n*/\nlong double\
    \ sqrt(long double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square\
    \ root of a number\n    >>> sqrt(3L)\n    1.7320508075688772\n    \n*/\ndouble\
    \ sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(3L)\n    1.7320508075688772\n    \n*/\nfloat sqrt(float\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(3L)\n    1.7320508075688772\n    \n*/\nlong double sqrt(long double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(3L)\n    1.7320508075688772\n    \n*/\ndouble sqrt(double x) \n\
    {\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(3L)\n    1.7320508075688772\n    \n*/\nfloat sqrt(float x) \n{\n    return\
    \ std.math.sqrt(x);\n}\n/*\nGet the square \nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9_6uxlob.d(77): Error: use `real` instead of `long double`\n/tmp/tmp9_6uxlob.d(77):
    Error: use `real` instead of `long double`\n/tmp/tmp9_6uxlob.d(107): Error: use
    `real` instead of `long double`\n/tmp/tmp9_6uxlob.d(107): Error: use `real` instead
    of `long double`\n/tmp/tmp9_6uxlob.d(131): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9_6uxlob.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of a number\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n\
    \    5L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the modulus of a number\n    >>> modulus(2L, 3L)\n    1L\n    >>> modulus(5L,\
    \ 7L)\n    3L\n    \n*/\nlong modulus(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the remainder of a number\n    >>> remainder(2L, 3L)\n    1L\n    >>>\
    \ remainder(5L, 7L)\n    2L\n    \n*/\nlong remainder(long x, long y) \n{\n  \
    \  return x % y;\n}\n/*\nGet the floor of a number\n    >>> floor(2L)\n    2L\n\
    \    >>> floor(5L)\n    5L\n    \n*/\nlong floor(long x) \n{\n    return x < 0\
    \ ? -x : x;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(2L)\n    3L\n  \
    \  >>> ceil(5L)\n    5L\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the round of a number\n    >>> round(2L)\n    2L\n    >>> round(5L)\n\
    \    5L\n    \n*/\nlong round(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\n\
    Get the floor of x to the nearest integer\n    >>> floor_to_int(2L)\n    2L\n\
    \    >>> floor_to_int(5L)\n    5L\n    \n*/\nlong floor_to_int(long x) \n{\n \
    \   return x < 0 ? -x : x;\n}\n/*\nGet the ceiling of x to the nearest integer\n\
    \    >>> ceil_to_int(2L)\n\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp06o63ky1.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp06o63ky1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n    \n*/\n\
    long multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    3L\n  \
    \  \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\nGet the remainder\
    \ of x divided by y\n    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L,\
    \ 7L)\n    2L\n    \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the absolute value of x\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n\
    \    5L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the sign of x\n    >>> sign(-2L)\n    1L\n    >>> sign(-5L)\n    -1L\n    \n\
    */\nlong sign(long x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the absolute\
    \ value of x\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n    5L\n    \n*/\nlong\
    \ abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the sign of x\n    >>>\
    \ sign(-2L)\n    1L\n    >>> sign(-5L)\n    -1L\n    \n*/\nlong sign(long x) \n\
    {\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the absolute value of x\n    >>> abs(2L)\n\
    \    2L\n    >>> abs(-5L)\n    5L\n    \n*/\nlong abs(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the sign of x\n    >>> sign(-2L)\n    1L\n    >>>\
    \ sign(-5L)\n    -1L\n    \n*/\nlong sign(long x) \n{\n    return x < 0 ? -1 :\
    \ 1;\n}\n/*\nGet the absolute value of x\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n\
    \    5L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the sign of x\n    >>> sign(-2L)\n    1L\n    >>> sign(-5L)\n    -1L\n    \n\
    */\nlong sign(long x) \n{\n    return x < 0 ? -1 : \nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr3x1l_25.d(146): Error: expression expected, not `unittest`\n/tmp/tmpr3x1l_25.d(147):
    Error: found `{` when expecting `;` following `return` statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpr3x1l_25.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long add(long long\
    \ x, long long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n\
    \    >>> sub(2L, 3L)\n    1L\n    >>> sub(5L, 7L)\n    -1L\n    \n*/\nlong sub(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2L, 3L)\n    1L\n    >>> sub(5L, 7L)\n    -1L\n    \n*/\nlong long sub(long\
    \ long x, long long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and\
    \ y\n    >>> mul(4L, 3L)\n    12L\n    >>> mul(2L, 7L)\n    42L\n    \n*/\nlong\
    \ mul(long x, long y) \n{\n    return x * y;\n}\n/*\nMultiply two numbers x and\
    \ y\n    >>> mul(4L, 3L)\n    12L\n    >>> mul(2L, 7L)\n    42L\n    \n*/\nlong\
    \ long mul(long long x, long long y) \n{\n    return x * y;\n}\n/*\nDivide two\
    \ numbers x and y\n    >>> div(2L, 3L)\n    1L\n    >>> div(5L, 7L)\n    3L\n\
    \    \n*/\nlong div(long x, long y) \n{\n    return x / y;\n}\n/*\nDivide two\
    \ numbers x and y\n    >>> div(2L, 3L)\n    1L\n    >>> div(5L, 7L)\n    3L\n\
    \    \n*/\nlong long div(long long x, long long y) \n{\n    return x / y;\n}\n\
    /*\nCompare two numbers x and y\n    >>> cmp(2L, 3L)\n    1\n    >>> cmp(5L, 7L)\n\
    \    1\n    \n*/\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2_e6ljp5.d(23): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmp2_e6ljp5.d(23): Error: use `long` for a 64 bit integer
    instead of `long long`\n/tmp/tmp2_e6ljp5.d(23): Error: use `long` for a 64 bit
    integer instead of `long long`\n/tmp/tmp2_e6ljp5.d(47): Error: use `long` for
    a 64 bit integer instead of `long long`\n/tmp/tmp2_e6ljp5.d(47): Error: use `long`
    for a 64 bit integer instead of `long long`\n/tmp/tmp2_e6ljp5.d(47): Error: use
    `long` for a 64 bit integer instead of `long long`\n/tmp/tmp2_e6ljp5.d(71): Error:
    use `long` for a 64 bit integer instead of `long long`\n/tmp/tmp2_e6ljp5.d(71):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmp2_e6ljp5.d(71):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmp2_e6ljp5.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmp2_e6ljp5.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmp2_e6ljp5.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp2_e6ljp5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long add(long long\
    \ x, long long y) \n{\n\treturn x + y;\n}\n/*\nSubtract two numbers x and y\n\
    \    >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\n\
    long subtract(long x, long y) \n{\n\treturn x - y;\n}\n/*\nSubtract two numbers\
    \ x and y\n    >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n\
    \    \n*/\nlong long subtract(long long x, long long y) \n{\n\treturn x - y;\n\
    }\n/*\nMultiply two numbers x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>>\
    \ multiply(5L, 7L)\n    42L\n    \n*/\nlong multiply(long x, long y) \n{\n\treturn\
    \ x * y;\n}\n/*\nMultiply two numbers x and y\n    >>> multiply(2L, 3L)\n    6L\n\
    \    >>> multiply(5L, 7L)\n    42L\n    \n*/\nlong long multiply(long long x,\
    \ long long y) \n{\n\treturn x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    2L\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n\treturn x / y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    2L\n    \n*/\nlong long\
    \ divide(long long x, long long y) \n{\n\treturn x / y;\n}\n/*\nGet the remainder\
    \ of dividing x by y\n    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L,\
    \ 7L)\n    2L\n    \n*/\nlong remainder(long x, long y) \n{\n\treturn x % y;\n\
    }\n/*\nGet the remainder of dividing x by y\n    >>> remainder(2L, 3L)\n    1L\n\
    \    >>> remainder(5L, 7L)\n    2L\n    \n*/\nlong long remainder(long long x,\
    \ long long y) \n{\n\treturn x % y;\n}\n/*\nGet the absolute value of x\n    >>>\
    \ abs(2L)\n    2L\n    >>> abs(-5L)\n    5L\n    \n*/\nlong abs(\nunittest\n{\n\
    \    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp25zvnec3.d(23): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmp25zvnec3.d(23): Error: use `long` for a 64 bit integer
    instead of `long long`\n/tmp/tmp25zvnec3.d(23): Error: use `long` for a 64 bit
    integer instead of `long long`\n/tmp/tmp25zvnec3.d(47): Error: use `long` for
    a 64 bit integer instead of `long long`\n/tmp/tmp25zvnec3.d(47): Error: use `long`
    for a 64 bit integer instead of `long long`\n/tmp/tmp25zvnec3.d(47): Error: use
    `long` for a 64 bit integer instead of `long long`\n/tmp/tmp25zvnec3.d(71): Error:
    use `long` for a 64 bit integer instead of `long long`\n/tmp/tmp25zvnec3.d(71):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmp25zvnec3.d(71):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmp25zvnec3.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmp25zvnec3.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmp25zvnec3.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmp25zvnec3.d(119):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmp25zvnec3.d(119):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmp25zvnec3.d(119):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmp25zvnec3.d(132):
    Error: basic type expected, not `unittest`\n/tmp/tmp25zvnec3.d(132): Error: found
    `unittest` when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp25zvnec3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n    \n*/\n\
    long multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    3L\n  \
    \  \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\nGet the remainder\
    \ of dividing x by y\n    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L,\
    \ 7L)\n    2L\n    \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the absolute value of x\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n\
    \    5L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the modulus of x by y\n    >>> modulus(2L, 3L)\n    1L\n    >>> modulus(5L,\
    \ 7L)\n    2L\n    \n*/\nlong modulus(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the sign of x\n    >>> sign(2L)\n    1L\n    >>> sign(-5L)\n    -1L\n\
    \    \n*/\nlong sign(long x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the absolute\
    \ value of x raised to the power of y\n    >>> power(2L, 3L)\n    8L\n    >>>\
    \ power(5L, 7L)\n    15L\n    \n*/\nlong power(long x, long y) \n{\n    return\
    \ x * y;\n}\n/*\nGet the square root of x\n    >>> sqrt(2L)\n    1L\n    >>> sqrt(-5L)\n\
    \    -1L\n    \n*/\nlong sqrt(long x) \n{\n    return x < 0 ? -sqrt(-x) : sqrt(x);\n\
    }\n/*\nGet the reciprocal of x\n    >>> reciprocal(2L)\n    1L\n    >>> reciprocal(-5L)\n\
    \    -1L\n    \n*/\nlong reciprocal(long x) \n{\n    return 1 / x;\n}\n/*\nGet\
    \ the square root of x raised to the power of y\n    >>> power(2L, 3L)\n    8L\n\
    \    >>> power(5L, 7L)\n    15L\n    \n*/\nlong power(long x, long y) \n{\n  \
    \  return x * y;\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf0xgbwz6.d(134): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf0xgbwz6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\n/*\nSubtract two numbers x and y\n    >>>\
    \ subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n\treturn x - y;\n}\n/*\nMultiply two numbers x\
    \ and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n\treturn x * y;\n}\n/*\nDivide two\
    \ numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n  \
    \  3L\n    \n*/\nlong divide(long x, long y) \n{\n\treturn x / y;\n}\n/*\nGet\
    \ the absolute value of a number\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n\
    \    5L\n    \n*/\nlong abs(long x) \n{\n\treturn x < 0 ? -x : x;\n}\n/*\nGet\
    \ the sign of a number\n    >>> sign(-2L)\n    -1L\n    >>> sign(-5L)\n    1L\n\
    \    \n*/\nlong sign(long x) \n{\n\treturn x < 0 ? -1 : 1;\n}\n/*\nGet the floor\
    \ of a number\n    >>> floor(2L)\n    2L\n    >>> floor(5L)\n    5L\n    \n*/\n\
    long floor(long x) \n{\n\treturn x < 0 ? -floor(-x) : floor(x);\n}\n/*\nGet the\
    \ ceiling of a number\n    >>> ceil(2L)\n    3L\n    >>> ceil(5L)\n    6L\n  \
    \  \n*/\nlong ceil(long x) \n{\n\treturn x < 0 ? -ceil(-x) : ceil(x);\n}\n/*\n\
    Get the rounded value of a number to a given precision\n    >>> round(2L, 1L)\n\
    \    2L\n    >>> round(5L, 1L)\n    6L\n    \n*/\nlong round(long x, int y) \n\
    {\n\treturn x < 0 ? -round(-x, y) : round(x, y);\n}\n/*\nGet the remainder of\
    \ a number when divided by another number\n    >>> remainder(2L, 3L)\n    1L\n\
    \    >>> remainder(5L, 7L)\n    3L\n    \n*/\nlong remainder(long x, long y) \n\
    {\n\treturn x < 0 ? -remainder(-x, y) : remainder(x, y);\n}\n/*\nGet the modulus\
    \ of a number\n    >>> modulus(2L, 3L)\n    1L\n    >>> modulus(5L, 7L)\n    3L\n\
    \    \n*/\nlong modul\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2tyoiwfa.d(132): Error: semicolon expected, not `unittest`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2tyoiwfa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of x\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n    5L\n\
    \    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the floor\
    \ of x\n    >>> floor(2L)\n    2L\n    >>> floor(-5L)\n    4L\n    \n*/\nlong\
    \ floor(long x) \n{\n    return x < 0 ? x + 1 : x;\n}\n/*\nGet the ceiling of\
    \ x\n    >>> ceil(2L)\n    3L\n    >>> ceil(-5L)\n    4L\n    \n*/\nlong ceil(long\
    \ x) \n{\n    return x < 0 ? x - 1 : x;\n}\n/*\nGet the remainder of x / y\n \
    \   >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L, 7L)\n    3L\n    \n*/\n\
    long remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the sign of\
    \ x\n    >>> sign(-2L)\n    1L\n    >>> sign(-5L)\n    1L\n    \n*/\nlong sign(long\
    \ x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the absolute value of x raised\
    \ to the power of y\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n    5L\n    \n\
    */\nlong pow(long x, long y) \n{\n    return x * pow(y, x);\n}\n/*\nGet the floor\
    \ of x raised to the power of y\n    >>> floor(2L)\n    2L\n    >>> floor(-5L)\n\
    \    4L\n    \n*/\nlong pow(long x, long y) \n{\n    return x * pow(y, x);\n}\n\
    /*\nGet the ceiling of x raised to the power of y\n    >>> ceil(2L)\n    3L\n\
    \    >>> \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqq_59d1k.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqq_59d1k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    6L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    2L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of a number\n    >>> abs(-1L)\n    1L\n    >>> abs(1L)\n\
    \    1L\n    \n*/\nlong abs(long x) \n{\n    return x > 0 ? x : -x;\n}\n/*\nGet\
    \ the sign of a number\n    >>> sign(-1)\n    1L\n    >>> sign(1)\n    1L\n  \
    \  \n*/\nlong sign(long x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the floor\
    \ of a number\n    >>> floor(-1L)\n    -1L\n    >>> floor(-2L)\n    0L\n    >>>\
    \ floor(1L)\n    1L\n    >>> floor(-3L)\n    -1L\n    \n*/\nlong floor(long x)\
    \ \n{\n    return x < 0 ? x + 1 : x;\n}\n/*\nGet the ceiling of a number\n   \
    \ >>> ceil(-1L)\n    0L\n    >>> ceil(-2L)\n    1L\n    >>> ceil(1)\n    1L\n\
    \    >>> ceil(-3L)\n    -1L\n    \n*/\nlong ceil(long x) \n{\n    return x < 0\
    \ ? x - 1 : x;\n}\n/*\nGet the rounded value of a number\n    >>> round(-1L)\n\
    \    0L\n    >>> round(-2L)\n    0L\n    >>> round(1)\n    1L\n    >>> round(-3L)\n\
    \    -1L\n    \n*/\nlong round(long x) \n{\n    return x < 0 ? x + 0.5 : x;\n\
    }\n/*\nGet the remainder of a number\n    >>> remainder(-1L, 2L)\n    1L\n   \
    \ >>> remainder(1L, 2L)\n    1L\n    \n*/\nlong remainder(long x, long y) \n{\n\
    \    return x % y;\n}\n/*\nGet the absolute value of a number\n    >>> abs(-1L)\n\
    \    1L\n    >>> abs(1L)\n    1L\n    \n*/\nlong \nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp89yelbi_.d(144): Error: no identifier for declarator `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp89yelbi_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2L, 3L)\n    1L\n    >>> sub(5L, 7L)\n    -1L\n    \n*/\nlong sub(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> mul(3L, 4L)\n    12L\n    >>> mul(4L, 3L)\n    12L\n    \n*/\nlong mul(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ div(2L, 3L)\n    1L\n    >>> div(5L, 7L)\n    1L\n    \n*/\nlong div(long x,\
    \ long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of a number\n\
    \    >>> abs(-1L)\n    1L\n    >>> abs(1L)\n    1L\n    \n*/\nlong abs(long x)\
    \ \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the square root of a number\n  \
    \  >>> sqrt(4L)\n    2.0\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\n\
    float sqrt(float x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\nlong sqrt(long x) \n{\n  \
    \  return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>> sqrt(4L)\n\
    \    2.0\n    \n*/\nulong sqrt(ulong x) \n{\n    return std.math.sqrt(x);\n}\n\
    /*\nGet the square root of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\nuint\
    \ sqrt(uint x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of\
    \ a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\nuint sqrt(uint x) \n{\n    return\
    \ std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>> sqrt(4L)\n\
    \    2.0\n    \n*/\nulong sqrt(ulong x) \n{\n    return std.math.sqrt(x);\n}\n\
    /*\nGet the square root of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\nuint\
    \ sqrt(uint x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of\
    \ a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\nulong sqrt(ulong \nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf4_nfwhc.d(150): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf4_nfwhc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of a number\n    >>> abs(2L)\n    2L\n    >>> abs(-2L)\n\
    \    2L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the sign of a number\n    >>> sign(-2L)\n    -1L\n    >>> sign(0)\n    0L\n\
    \    \n*/\nlong sign(long x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the floor\
    \ of a number\n    >>> floor(2L)\n    2L\n    >>> floor(-1L)\n    -1L\n    \n\
    */\nlong floor(long x) \n{\n    return x < 0 ? x + 1 : x;\n}\n/*\nGet the ceil\
    \ of a number\n    >>> ceil(2L)\n    1L\n    >>> ceil(-1L)\n    0L\n    \n*/\n\
    long ceil(long x) \n{\n    return x < 0 ? x - 1 : x;\n}\n/*\nGet the remainder\
    \ of a number divided by another\n    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L,\
    \ 7L)\n    3L\n    \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the modulo of a number divided by another\n    >>> modulo(2L, 3L)\n\
    \    2L\n    >>> modulo(5L, 7L)\n    1L\n    \n*/\nlong modulo(long x, long y)\
    \ \n{\n    return x % y;\n}\n/*\nGet the floor division of two numbers\n    >>>\
    \ floordiv(2L, 3L)\n    1L\n    >>> floordiv(5L, 7L)\n    3L\n    \n*/\nlong floordiv(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nGet the ceil division of two numbers\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n\
    \    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n\
    \    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp89z9m0kt.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp89z9m0kt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    2L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the modulus of two numbers x and y\n    >>> modulus(2L, 3L)\n    1L\n    >>>\
    \ modulus(5L, 7L)\n    2L\n    \n*/\nlong modulus(long x, long y) \n{\n    return\
    \ x % y;\n}\n/*\nGet the absolute value of number x\n    >>> abs(2L)\n    2L\n\
    \    >>> abs(-5L)\n    5L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ?\
    \ -x : x;\n}\n/*\nGet the square root of number x\n    >>> sqrt(2L)\n    1L\n\
    \    >>> sqrt(-5L)\n    -1L\n    \n*/\nlong sqrt(long x) \n{\n    return x < 0\
    \ ? -sqrt(-x) : sqrt(x);\n}\n/*\nGet the reciprocal of number x\n    >>> reciprocal(2L)\n\
    \    1L\n    >>> reciprocal(-5L)\n    -1L\n    \n*/\nlong reciprocal(long x) \n\
    {\n    return 1 / x;\n}\n/*\nGet the floor of number x\n    >>> floor(2L)\n  \
    \  2L\n    >>> floor(-5L)\n    -5L\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? floor(-x) : floor(x);\n}\n/*\nGet the ceiling of number x\n    >>> ceil(2L)\n\
    \    2L\n    >>> ceil(-5L)\n    -5L\n    \n*/\nlong ceil(long x) \n{\n    return\
    \ x < 0 ? ceil(-x) : ceil(x);\n}\n/*\nGet the absolute value of number x\n   \
    \ >>> abs(2L)\n    2L\n    >>> abs(-5L)\n    5L\n    \n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the square root of number \nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcfysm8j1.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcfysm8j1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n    \n*/\n\
    long subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the square root of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(4L)\n    2.0\n    \n*/\nfloat sqrt(float x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\n\
    long sqrt(long x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeudsrhf9.d(79): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeudsrhf9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\n/*\nSubtract two numbers x and y\n    >>>\
    \ sub(2L, 3L)\n    1L\n    >>> sub(5L, 7L)\n    3L\n    \n*/\nlong sub(long x,\
    \ long y) \n{\n\treturn x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(4L,\
    \ 3L)\n    12L\n    >>> mul(4L, 7L)\n    42L\n    \n*/\nlong mul(long x, long\
    \ y) \n{\n\treturn x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(4L,\
    \ 3L)\n    2L\n    >>> div(4L, 7L)\n    3L\n    \n*/\nlong div(long x, long y)\
    \ \n{\n\treturn x / y;\n}\n/*\nGet the modulus of two numbers x and y\n    >>>\
    \ mod(4L, 3L)\n    2L\n    >>> mod(4L, 7L)\n    1L\n    \n*/\nlong mod(long x,\
    \ long y) \n{\n\treturn x % y;\n}\n/*\nGet the remainder of x divided by y\n \
    \   >>> rem(4L, 3L)\n    2L\n    >>> rem(4L, 7L)\n    1L\n    \n*/\nlong rem(long\
    \ x, long y) \n{\n\treturn x % y;\n}\n/*\nGet the sign of x\n    >>> sign(4L)\n\
    \    1L\n    >>> sign(-4L)\n    -1L\n    \n*/\nlong sign(long x) \n{\n\treturn\
    \ x < 0 ? -1L : 1L;\n}\n/*\nGet the absolute value of x\n    >>> abs(4L)\n   \
    \ 4L\n    >>> abs(-4L)\n    4L\n    \n*/\nlong abs(long x) \n{\n\treturn x < 0\
    \ ? x : -x;\n}\n/*\nGet the absolute value of x\n    >>> abs(4L)\n    4L\n   \
    \ >>> abs(-4L)\n    4L\n    \n*/\nlong abs(long x) \n{\n\treturn x < 0 ? x : -x;\n\
    }\n/*\nGet the absolute value of x\n    >>> abs(4L)\n    4L\n    >>> abs(-4L)\n\
    \    4L\n    \n*/\nlong abs(long x) \n{\n\treturn x < 0 ? x : -x;\n}\n/*\nGet\
    \ the absolute value of x\n    >>> abs(4L)\n    4L\n    >>> abs(-4L)\n    4L\n\
    \    \n*/\nlong abs(long x) \n{\n\treturn x < 0 ? x : -x;\n}\n/*\nGet the absolute\
    \ value of x\n    >>> abs(4L)\n    4L\n    >>> abs(-4L)\n    4L\n    \n*/\nlong\
    \ abs(long \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwcyl3zzt.d(144): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwcyl3zzt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long add(long long\
    \ x, long long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n\
    \    >>> sub(2L, 3L)\n    1L\n    >>> sub(5L, 7L)\n    3L\n    \n*/\nlong sub(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2L, 3L)\n    1L\n    >>> sub(5L, 7L)\n    3L\n    \n*/\nlong long sub(long\
    \ long x, long long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and\
    \ y\n    >>> mul(3L, 5L)\n    15L\n    >>> mul(4L, 7L)\n    42L\n    \n*/\nlong\
    \ mul(long x, long y) \n{\n    return x * y;\n}\n/*\nMultiply two numbers x and\
    \ y\n    >>> mul(3L, 5L)\n    15L\n    >>> mul(4L, 7L)\n    42L\n    \n*/\nlong\
    \ long mul(long long x, long long y) \n{\n    return x * y;\n}\n/*\nDivide two\
    \ numbers x and y\n    >>> div(3L, 5L)\n    2L\n    >>> div(4L, 7L)\n    3L\n\
    \    \n*/\nlong div(long x, long y) \n{\n    return x / y;\n}\n/*\nDivide two\
    \ numbers x and y\n    >>> div(3L, 5L)\n    2L\n    >>> div(4L, 7L)\n    3L\n\
    \    \n*/\nlong long div(long long x, long long y) \n{\n    return x / y;\n}\n\
    /*\nModulo two numbers x and y\n    >>> mod(3L, 5L)\n    1L\n    >>> mod(4L, 7L)\n\
    \    2L\n    \n*/\nlong mod(long x, long y) \n{\n    return x % y;\n}\n/*\nModulo\
    \ two numbers x and y\n    >>> mod(3L, 5L)\n    1L\n    >>> mod(4L, 7L)\n    2L\n\
    \    \n*/\nlong long mod(long long x, long long y) \n{\n    return x % y;\n}\n\
    /*\nCompare two numbers x and y\n    >>> cmp(3L, 5L)\n    1\n    >>> cmp(4L, 7L)\n\
    \    1\n    \n*/\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwu93hy1s.d(23): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmpwu93hy1s.d(23): Error: use `long` for a 64 bit integer
    instead of `long long`\n/tmp/tmpwu93hy1s.d(23): Error: use `long` for a 64 bit
    integer instead of `long long`\n/tmp/tmpwu93hy1s.d(47): Error: use `long` for
    a 64 bit integer instead of `long long`\n/tmp/tmpwu93hy1s.d(47): Error: use `long`
    for a 64 bit integer instead of `long long`\n/tmp/tmpwu93hy1s.d(47): Error: use
    `long` for a 64 bit integer instead of `long long`\n/tmp/tmpwu93hy1s.d(71): Error:
    use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpwu93hy1s.d(71):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpwu93hy1s.d(71):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpwu93hy1s.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpwu93hy1s.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpwu93hy1s.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpwu93hy1s.d(119):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpwu93hy1s.d(119):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpwu93hy1s.d(119):
    Error: use `long` for a 64 bit integer instead of `long long`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpwu93hy1s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of x\n    >>> abs(-1L)\n    1L\n    \n*/\nlong abs(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the remainder of x divided by\
    \ y\n    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L, 7L)\n    3L\n  \
    \  \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the\
    \ floor of x\n    >>> floor(2L)\n    2L\n    \n*/\nlong floor(long x) \n{\n  \
    \  return x < 0 ? -x : x;\n}\n/*\nGet the ceiling of x\n    >>> ceil(2L)\n   \
    \ 2L\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the floor of x\n    >>> floor(2L)\n    2L\n    \n*/\nlong floor(long x) \n{\n\
    \    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling of x\n    >>> ceil(2L)\n \
    \   2L\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the absolute value of x\n    >>> abs(-1L)\n    1L\n    \n*/\nlong abs(long x)\
    \ \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the remainder of x divided by y\n\
    \    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L, 7L)\n    3L\n    \n\
    */\nlong remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the floor\
    \ of x\n    >>> floor(2L)\n    2L\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_43lraox.d(144): Error: expression expected, not `unittest`\n/tmp/tmp_43lraox.d(145):
    Error: found `{` when expecting `:`\n/tmp/tmp_43lraox.d(146): Error: expression
    expected, not `alias`\n/tmp/tmp_43lraox.d(146): Error: found `candidate` when
    expecting `;` following `return` statement\n/tmp/tmp_43lraox.d(146): Error: found
    `=` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_43lraox.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long add(long long\
    \ x, long long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n\
    \    >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\n\
    long subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nSubtract two numbers\
    \ x and y\n    >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n\
    \    \n*/\nlong long subtract(long long x, long long y) \n{\n    return x - y;\n\
    }\n/*\nMultiply two numbers x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>>\
    \ multiply(5L, 7L)\n    42L\n    \n*/\nlong multiply(long x, long y) \n{\n   \
    \ return x * y;\n}\n/*\nMultiply two numbers x and y\n    >>> multiply(2L, 3L)\n\
    \    6L\n    >>> multiply(5L, 7L)\n    42L\n    \n*/\nlong long multiply(long\
    \ long x, long long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and\
    \ y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    3L\n    \n*/\n\
    long divide(long x, long y) \n{\n    return x / y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    3L\n  \
    \  \n*/\nlong long divide(long long x, long long y) \n{\n    return x / y;\n}\n\
    /*\nCompare two numbers x and y\n    >>> compare(2L, 3L)\n    1\n    >>> compare(5L,\
    \ 7L)\n    1\n    \n*/\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppodh6ywq.d(23): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmppodh6ywq.d(23): Error: use `long` for a 64 bit integer
    instead of `long long`\n/tmp/tmppodh6ywq.d(23): Error: use `long` for a 64 bit
    integer instead of `long long`\n/tmp/tmppodh6ywq.d(47): Error: use `long` for
    a 64 bit integer instead of `long long`\n/tmp/tmppodh6ywq.d(47): Error: use `long`
    for a 64 bit integer instead of `long long`\n/tmp/tmppodh6ywq.d(47): Error: use
    `long` for a 64 bit integer instead of `long long`\n/tmp/tmppodh6ywq.d(71): Error:
    use `long` for a 64 bit integer instead of `long long`\n/tmp/tmppodh6ywq.d(71):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmppodh6ywq.d(71):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmppodh6ywq.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmppodh6ywq.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmppodh6ywq.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmppodh6ywq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the remainder of dividing x by y\n    >>> remainder(2L, 3L)\n    1L\n    >>>\
    \ remainder(5L, 7L)\n    2L\n    \n*/\nlong remainder(long x, long y) \n{\n  \
    \  return x % y;\n}\n/*\nGet the sign of x\n    >>> sign(1L)\n    1L\n    >>>\
    \ sign(-2L)\n    -1L\n    \n*/\nlong sign(long x) \n{\n    return x < 0 ? -1L\
    \ : 1;\n}\n/*\nGet the absolute value of x\n    >>> abs(1L)\n    1L\n    >>> abs(-2L)\n\
    \    2L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the floor of x\n    >>> floor(1L)\n    1L\n    >>> floor(-2L)\n    0L\n    \n\
    */\nlong floor(long x) \n{\n    return x < 0 ? 0 : x;\n}\n/*\nGet the ceiling\
    \ of x\n    >>> ceil(1L)\n    1L\n    >>> ceil(-2L)\n    1L\n    \n*/\nlong ceil(long\
    \ x) \n{\n    return x < 0 ? x : x + 1;\n}\n/*\nGet the absolute value of the\
    \ floor of x\n    >>> absFloor(1L)\n    1L\n    >>> absFloor(-2L)\n    0L\n  \
    \  \n*/\nlong absFloor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the\
    \ absolute value of the ceiling of x\n    >>> absCeil(1L)\n    1L\n    >>> absCeil(-2L)\n\
    \    1L\n    \n*/\nlong absCeil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\n\
    Get the sign of x\n    >>> signBit(-1L)\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjpas5h8s.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjpas5h8s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n    \n*/\n\
    long subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    2L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of a number\n    >>> abs(-1L)\n    1L\n    >>> abs(1L)\n\
    \    1L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the floor value of a number\n    >>> floor(-1L)\n    -1L\n    >>> floor(1L)\n\
    \    0L\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\n\
    Get the ceiling value of a number\n    >>> ceil(-1L)\n    0L\n    >>> ceil(0L)\n\
    \    0L\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\n\
    Get the remainder of a number divided by another\n    >>> remainder(2L, 3L)\n\
    \    1L\n    >>> remainder(5L, 7L)\n    2L\n    \n*/\nlong remainder(long x, long\
    \ y) \n{\n    return x % y;\n}\n/*\nGet the modulo of a number divided by another\n\
    \    >>> modulo(2L, 3L)\n    1L\n    >>> modulo(5L, 7L)\n    2L\n    \n*/\nlong\
    \ modulo(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the sign of a number\n\
    \    >>> sign(-1L)\n    1L\n    >>> sign(0L)\n    0L\n    >>> sign(1L)\n    1L\n\
    \    \n*/\nlong sign(long x) \n{\n    return x < 0 ? -1 : 0;\n}\n/*\nGet the absolute\
    \ value of a number\n    >>> abs(-1L)\n    1L\n    >>> abs(1L)\n    1L\n    \n\
    */\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the floor value\
    \ of a number\n    >>> floor(-1L)\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6w_fx7x.d(137): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6w_fx7x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    6L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of a number\n    >>> abs(-5)\n    5\n    >>> abs(5)\n \
    \   5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the modulus of a number\n    >>> modulus(-5, 3)\n    3\n    >>> modulus(5, 3)\n\
    \    0\n    \n*/\nlong modulus(long x, long y) \n{\n    return x % y;\n}\n/*\n\
    Get the remainder of a number\n    >>> remainder(-5, 3)\n    -2\n    >>> remainder(5,\
    \ 3)\n    3\n    \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the floor of a number\n    >>> floor(3.5)\n    3\n    \n*/\nlong floor(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling of a number\n   \
    \ >>> ceil(3.5)\n    4\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the round of a number\n    >>> round(3.5)\n    4\n    \n*/\n\
    long round(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the floor of a\
    \ number\n    >>> floor(3.5)\n    3\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(3.5)\n   \
    \ 4\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the\
    \ round of a number\n    >>> round(3.5)\n    4\n    \n*/\nlong round(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the \nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5etjy01b.d(147): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5etjy01b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add2(long x, long\
    \ y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L, 3L)\n\
    \    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add3(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L, 3L)\n  \
    \  5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add4(long x, long y) \n{\n\
    \    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L, 3L)\n    5L\n\
    \    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add5(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L, 3L)\n    5L\n    >>>\
    \ add(5L, 7L)\n    12L\n    \n*/\nlong add6(long x, long y) \n{\n    return x\
    \ + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L,\
    \ 7L)\n    12L\n    \n*/\nlong add7(long x, long y) \n{\n    return x + y;\n}\n\
    /*\nAdd two numbers x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n\
    \    12L\n    \n*/\nlong add8(long x, long y) \n{\n    return x + y;\n}\n/*\n\
    Add two numbers x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n  \
    \  12L\n    \n*/\nlong add9(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd\
    \ two numbers x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n\
    \    \n*/\nlong add10(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\n\
    long add11(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and\
    \ y\n    >>> \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiyuc98b1.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiyuc98b1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long add(long long\
    \ x, long long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n   \
    \ >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\ndouble add(double\
    \ x, double y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>>\
    \ add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\ndouble long add(double\
    \ long x, double long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and\
    \ y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nfloat\
    \ add(float x, float y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nfloat long\
    \ add(float long x, float long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n\
    \    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n\
    \    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpemtumbmz.d(23): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmpemtumbmz.d(23): Error: use `long` for a 64 bit integer
    instead of `long long`\n/tmp/tmpemtumbmz.d(23): Error: use `long` for a 64 bit
    integer instead of `long long`\n/tmp/tmpemtumbmz.d(47): Error: no identifier for
    declarator `double`\n/tmp/tmpemtumbmz.d(47): Error: found `long` when expecting
    `)`\n/tmp/tmpemtumbmz.d(47): Error: semicolon expected following function declaration\n/tmp/tmpemtumbmz.d(47):
    Error: no identifier for declarator `x`\n/tmp/tmpemtumbmz.d(47): Error: declaration
    expected, not `,`\n/tmp/tmpemtumbmz.d(50): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemtumbmz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    6L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of a number\n    >>> abs(-1L)\n    1L\n    >>> abs(1L)\n\
    \    1L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the modulus of a number\n    >>> modulus(-1L, 2L)\n    1L\n    >>> modulus(1L,\
    \ 2L)\n    1L\n    \n*/\nlong modulus(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the remainder of a number\n    >>> remainder(-1L, 2L)\n    0L\n   \
    \ >>> remainder(1L, 2L)\n    1L\n    \n*/\nlong remainder(long x, long y) \n{\n\
    \    return x % y;\n}\n/*\nGet the sign of a number\n    >>> sign(-1)\n    1\n\
    \    >>> sign(0)\n    0\n    >>> sign(1)\n    1\n    \n*/\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of a number\n    >>> abs(2L)\n    2L\n    >>> abs(-2L)\n\
    \    2L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the modulus of a number\n    >>> modulus(2L, 3L)\n    1L\n    >>> modulus(5L,\
    \ 7L)\n    3L\n    \n*/\nlong modulus(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the remainder of a number\n    >>> remainder(2L, 3L)\n    2L\n    >>>\
    \ remainder(5L, 7L)\n    3L\n    \n*/\nlong remainder(long x, long y) \n{\n  \
    \  return x % y;\n}\n/*\nGet the floor of a number\n    >>> floor(2L)\n    2L\n\
    \    >>> floor(5L)\n    5L\n    \n*/\nlong floor(long x) \n{\n    return x < 0\
    \ ? -x : x;\n}\n/*\nGet the ceiling of a number\n    >>> ceil(2L)\n    3L\n  \
    \  >>> ceil(5L)\n    6L\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the square root of a number\n    >>> sqrt(2L)\n    1L\n   \
    \ >>> sqrt(5L)\n    3L\n    \n*/\nlong sqrt(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the absolute value of a number\n    >>> abs(2L)\n    2L\n \
    \   >>> abs(-2L)\n    2L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nGet the modulus of a number\n    >>> modulus(2L, 3L)\n    1L\n\
    \    >>> modul\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl_xtl7im.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl_xtl7im.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2L, 3L)\n    1L\n    >>> sub(5L, 7L)\n    3L\n    \n*/\nlong sub(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> mul(3L, 4L)\n    12L\n    >>> mul(4L, 3L)\n    12L\n    \n*/\nlong mul(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ div(2L, 3L)\n    1L\n    >>> div(5L, 7L)\n    3L\n    \n*/\nlong div(long x,\
    \ long y) \n{\n    return x / y;\n}\n/*\nGet the modulus of two numbers x and\
    \ y\n    >>> mod(2L, 3L)\n    1L\n    >>> mod(5L, 7L)\n    3L\n    \n*/\nlong\
    \ mod(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the absolute value of\
    \ number x\n    >>> abs(2L)\n    2L\n    >>> abs(-2L)\n    2L\n    \n*/\nlong\
    \ abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the sign of number x\n\
    \    >>> sign(-2L)\n    -1L\n    >>> sign(2L)\n    1L\n    \n*/\nlong sign(long\
    \ x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the floor of number x\n    >>>\
    \ floor(2L)\n    2L\n    >>> floor(-2L)\n-2L\n    \n*/\nlong floor(long x) \n\
    {\n    return x < 0 ? -floor(-x) : floor(x);\n}\n/*\nGet the ceiling of number\
    \ x\n    >>> ceil(2L)\n    2L\n    >>> ceil(-2L)\n-2L\n    \n*/\nlong ceil(long\
    \ x) \n{\n    return x < 0 ? -ceil(-x) : ceil(x);\n}\n/*\nGet the absolute value\
    \ of number x\n    >>> abs(2L)\n    2L\n    >>> abs(-2L)\n    2L\n    \n*/\nlong\
    \ abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the sign of number x\n\
    \    >>> sign(-2L)\n    -1L\n    >>> sign(2L)\n    1L\n    \n*/\nlong sign(long\
    \ x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the floor of number x\n    >>>\
    \ floor(2L)\n    2L\n    >>> floor(-2L)\n\nunittest\n{\n    alias candidate =\
    \ add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) ==\
    \ 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) ==\
    \ 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxwzjxyoo.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxwzjxyoo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\n/*\nSubtract two numbers x and y\n    >>>\
    \ subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n\treturn x - y;\n}\n/*\nMultiply two numbers x and y\n    >>>\
    \ multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n    \n*/\nlong\
    \ multiply(long x, long y) \n{\n\treturn x * y;\n}\n/*\nDivide two numbers x and\
    \ y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    3L\n    \n*/\n\
    long divide(long x, long y) \n{\n\treturn x / y;\n}\n/*\nGet the absolute value\
    \ of a number\n    >>> abs(-1L)\n    1L\n    >>> abs(1L)\n    1L\n    \n*/\nlong\
    \ abs(long x) \n{\n\treturn x < 0 ? -x : x;\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(-1L)\n    0.0\n    >>> sqrt(1L)\n    1.0\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n\treturn std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(-1L)\n    0.0\n    >>> sqrt(1L)\n    1.0\n    \n*/\nfloat sqrt(float\
    \ x) \n{\n\treturn std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(-1L)\n    0.0\n    >>> sqrt(1L)\n    1.0\n    \n*/\nlong double\
    \ sqrt(long double x) \n{\n\treturn std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(-1L)\n    0.0\n    >>> sqrt(1L)\n    1.0\n    \n*/\n\
    double sqrt(double x) \n{\n\treturn std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(-1L)\n    0.0\n    >>> sqrt(1L)\n    1.0\n    \n*/\n\
    float sqrt(float x) \n{\n\treturn std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(-1L)\n    0.0\n    >>> sqrt(1L)\n    1.0\n    \n*/\n\
    long double sqrt(long double x) \n{\n\treturn std.math.sqrt(x);\n}\n/*\nGet the\
    \ square root of a number\n    >>> sqrt(-1L)\n    0.0\n    >>> sqrt(1L)\n    1.0\n\
    \    \n*/\ndouble sqrt(double x) \n{\n\treturn std.math.sqrt(x);\n}\n/*\nGet the\
    \ \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) ==\
    \ 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) ==\
    \ 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) ==\
    \ 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpouod4rzo.d(95): Error: use `real` instead of `long double`\n/tmp/tmpouod4rzo.d(95):
    Error: use `real` instead of `long double`\n/tmp/tmpouod4rzo.d(131): Error: use
    `real` instead of `long double`\n/tmp/tmpouod4rzo.d(131): Error: use `real` instead
    of `long double`\n/tmp/tmpouod4rzo.d(147): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpouod4rzo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long add(long long\
    \ x, long long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n   \
    \ >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong double\
    \ add(long double x, long double y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\n\
    float add(float x, float y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and\
    \ y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\ndouble\
    \ add(double x, double y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and\
    \ y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong\
    \ long int add(long long int x, long long int y) \n{\n    return x + y;\n}\n/*\n\
    Add two numbers x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n  \
    \  12L\n    \n*/\nlong long int add(long long int x, long long int y) \n{\n  \
    \  return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L, 3L)\n    5L\n\
    \    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long int add(long long int x, long\
    \ long int y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>>\
    \ add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long int add(long\
    \ long int x, long long int y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\n\
    long long int add(long long int x, long long int y) \n{\n    return x + y;\n}\n\
    /*\nAdd two numbers x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n\
    \    12L\n    \n*/\nlong long int \nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy50k2z2p.d(23): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmpy50k2z2p.d(23): Error: use `long` for a 64 bit integer
    instead of `long long`\n/tmp/tmpy50k2z2p.d(23): Error: use `long` for a 64 bit
    integer instead of `long long`\n/tmp/tmpy50k2z2p.d(35): Error: use `real` instead
    of `long double`\n/tmp/tmpy50k2z2p.d(35): Error: use `real` instead of `long double`\n/tmp/tmpy50k2z2p.d(35):
    Error: use `real` instead of `long double`\n/tmp/tmpy50k2z2p.d(71): Error: use
    `long` for a 64 bit integer instead of `long long`\n/tmp/tmpy50k2z2p.d(71): Error:
    no identifier for declarator `long`\n/tmp/tmpy50k2z2p.d(71): Error: use `long`
    for a 64 bit integer instead of `long long`\n/tmp/tmpy50k2z2p.d(71): Error: found
    `int` when expecting `)`\n/tmp/tmpy50k2z2p.d(71): Error: semicolon expected following
    function declaration\n/tmp/tmpy50k2z2p.d(71): Error: no identifier for declarator
    `x`\n/tmp/tmpy50k2z2p.d(71): Error: declaration expected, not `,`\n/tmp/tmpy50k2z2p.d(74):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy50k2z2p.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n    \n*/\n\
    long subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the square root of x\n    >>> sqrt(2L)\n    2.0\n    >>> sqrt(5L)\n    2.0\n\
    \    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet\
    \ the square root of x\n    >>> sqrt(2L)\n    2.0\n    >>> sqrt(5L)\n    2.0\n\
    \    \n*/\nfloat sqrt(float x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the\
    \ square root of x\n    >>> sqrt(2L)\n    2.0\n    >>> sqrt(5L)\n    2.0\n   \
    \ \n*/\nlong long sqrt(long long x) \n{\n    return std.math.sqrt(x);\n}\n/*\n\
    Get the square root of x\n    >>> sqrt(2L)\n    2.0\n    >>> sqrt(5L)\n    2.0\n\
    \    \n*/\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpigx48buh.d(83): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmpigx48buh.d(83): Error: use `long` for a 64 bit integer
    instead of `long long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpigx48buh.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    6L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    2L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of a number\n    >>> abs(-5)\n    5\n    >>> abs(5)\n \
    \   5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the floor value of a number\n    >>> floor(5)\n    5\n    >>> floor(5.5)\n \
    \   6\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the ceiling value of a number\n    >>> ceil(5)\n    6\n    >>> ceil(5.5)\n \
    \   6\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the natural logarithm of a number\n    >>> log(5)\n    1.6094379124341\n   \
    \ >>> log(5.5)\n    1.6094379124341\n    \n*/\ndouble log(double x) \n{\n    return\
    \ log(x);\n}\n/*\nGet the square root of a number\n    >>> sqrt(5)\n    2.64575131106459\n\
    \    >>> sqrt(5.5)\n    2.4492935982947064\n    \n*/\ndouble sqrt(double x) \n\
    {\n    return sqrt(x);\n}\n/*\nGet the reciprocal of a number\n    >>> reciprocal(5)\n\
    \    0.5\n    >>> reciprocal(5.5)\n    0.49999999999999996\n    \n*/\ndouble reciprocal(double\
    \ x) \n{\n    return 1.0 / x;\n}\n/*\nGet the round value of a number\n    >>>\
    \ round(5.5)\n    6\n    >>> round(5.6)\n    6\n    \n*/\nlong round(double x)\
    \ \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the floor value of a number\n  \
    \  >>> floor(5.5)\n    5\n    >>> floor(5.6)\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3m9v8rh5.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3m9v8rh5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    6L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the modulus of two numbers x and y\n    >>> modulus(2L, 3L)\n    1L\n    >>>\
    \ modulus(5L, 7L)\n    3L\n    \n*/\nlong modulus(long x, long y) \n{\n    return\
    \ x % y;\n}\n/*\nGet the absolute value of number x\n    >>> abs(2L)\n    2L\n\
    \    >>> abs(-5L)\n    5L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ?\
    \ -x : x;\n}\n/*\nGet the sign of number x\n    >>> sign(-2L)\n    -1L\n    >>>\
    \ sign(-5L)\n    1L\n    \n*/\nlong sign(long x) \n{\n    return x < 0 ? -1 :\
    \ 1;\n}\n/*\nGet the floor of number x\n    >>> floor(2L)\n    2L\n    >>> floor(-5L)\n\
    \    -5L\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\n\
    Get the ceiling of number x\n    >>> ceil(2L)\n    2L\n    >>> ceil(-5L)\n   \
    \ -5L\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the floor of number x\n    >>> floor(2L)\n    2L\n    >>> floor(-5L)\n    -5L\n\
    \    \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the\
    \ ceiling of number x\n    >>> ceil(2L)\n    2L\n    >>> ceil(-5L)\n    -5L\n\
    \    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the floor\
    \ of number x\n    >>> floor(2L)\n    2L\n    >>> \nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph44b9csf.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph44b9csf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n    \n*/\n\
    long subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    2L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of a number\n    >>> abs(-1L)\n    1L\n    >>> abs(1L)\n\
    \    1L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the square root of a number\n    >>> sqrt(-1L)\n    0.0\n    >>> sqrt(1L)\n\
    \    1.0\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the floor of a number\n    >>> floor(-1L)\n    -1L\n    >>> floor(1L)\n\
    \    0L\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\n\
    Get the ceil of a number\n    >>> ceil(-1L)\n    0L\n    >>> ceil(0L)\n    0L\n\
    \    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the round\
    \ of a number\n    >>> round(-1L)\n    -1L\n    >>> round(1L)\n    1L\n    \n\
    */\nlong round(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the floor of\
    \ a number\n    >>> floor(-1L)\n    -1L\n    >>> floor(1L)\n    0L\n    \n*/\n\
    long floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the ceil of a number\n\
    \    >>> ceil(-1L)\n    0L\n    >>> ceil(0L)\n    0L\n    \n*/\nlong ceil(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the round of a number\n    >>>\
    \ round(-1L)\n    -1L\n    >>> round(1L)\n    1L\n    \n*/\nlong round(long x)\
    \ \n{\n    return x < 0 ? -x : x;\n}\n/*\n\nunittest\n{\n    alias candidate =\
    \ add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) ==\
    \ 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) ==\
    \ 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqe9m46cy.d(147): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqe9m46cy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long add(long long\
    \ x, long long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n   \
    \ >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong double\
    \ add(long double x, long double y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\n\
    float add(float x, float y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and\
    \ y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\ndouble\
    \ add(double x, double y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and\
    \ y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong\
    \ double add(long double x, long double y) \n{\n    return x + y;\n}\n/*\nAdd\
    \ two numbers x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n\
    \    \n*/\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpin6oc_jp.d(23): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmpin6oc_jp.d(23): Error: use `long` for a 64 bit integer
    instead of `long long`\n/tmp/tmpin6oc_jp.d(23): Error: use `long` for a 64 bit
    integer instead of `long long`\n/tmp/tmpin6oc_jp.d(35): Error: use `real` instead
    of `long double`\n/tmp/tmpin6oc_jp.d(35): Error: use `real` instead of `long double`\n/tmp/tmpin6oc_jp.d(35):
    Error: use `real` instead of `long double`\n/tmp/tmpin6oc_jp.d(71): Error: use
    `real` instead of `long double`\n/tmp/tmpin6oc_jp.d(71): Error: use `real` instead
    of `long double`\n/tmp/tmpin6oc_jp.d(71): Error: use `real` instead of `long double`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpin6oc_jp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n    \n*/\n\
    long subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    2L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the square root of x\n    >>> sqrt(3L)\n    1.7320508075688772\n    \n*/\n\
    double sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square\
    \ root of x\n    >>> sqrt(3L)\n    1.7320508075688772\n    \n*/\nfloat sqrt(float\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of x\n    >>>\
    \ sqrt(3L)\n    1.7320508075688772\n    \n*/\nlong double sqrt(long double x)\
    \ \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of x\n    >>>\
    \ sqrt(3L)\n    1.7320508075688772\n    \n*/\ndouble sqrt(double x) \n{\n    return\
    \ std.math.sqrt(x);\n}\n/*\nGet the square root of x\n    >>> sqrt(3L)\n    1.7320508075688772\n\
    \    \n*/\nfloat sqrt(float x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the\
    \ square root of x\n    >>> sqrt(3L)\n    1.7320508075688772\n    \n*/\nlong double\
    \ sqrt(long double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square\
    \ root of x\n    >>> sqrt(3L)\n    1.7320508075688772\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of x\n    >>>\
    \ sqrt(3L)\n    1.7320508075688772\n    \n*/\nfloat sqrt(float x) \n{\n    return\
    \ std.math.sqrt(x);\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxfhxlt0y.d(77): Error: use `real` instead of `long double`\n/tmp/tmpxfhxlt0y.d(77):
    Error: use `real` instead of `long double`\n/tmp/tmpxfhxlt0y.d(107): Error: use
    `real` instead of `long double`\n/tmp/tmpxfhxlt0y.d(107): Error: use `real` instead
    of `long double`\n/tmp/tmpxfhxlt0y.d(130): Error: found `unittest` instead of
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxfhxlt0y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long add(long long\
    \ x, long long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n\
    \    >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n    \n*/\n\
    long subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nSubtract two numbers\
    \ x and y\n    >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n\
    \    \n*/\nlong long subtract(long long x, long long y) \n{\n    return x - y;\n\
    }\n/*\nMultiply two numbers x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>>\
    \ multiply(5L, 7L)\n    42L\n    \n*/\nlong multiply(long x, long y) \n{\n   \
    \ return x * y;\n}\n/*\nMultiply two numbers x and y\n    >>> multiply(2L, 3L)\n\
    \    6L\n    >>> multiply(5L, 7L)\n    42L\n    \n*/\nlong long multiply(long\
    \ long x, long long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and\
    \ y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    2L\n    \n*/\n\
    long divide(long x, long y) \n{\n    return x / y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    2L\n  \
    \  \n*/\nlong long divide(long long x, long long y) \n{\n    return x / y;\n}\n\
    /*\nModulus two numbers x and y\n    >>> modulus(2L, 3L)\n    1L\n    >>> modulus(5L,\
    \ 7L)\n    2L\n    \n*/\nlong modulus(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nModulus two numbers x and y\n    >>> modulus(2L, 3L)\n    1L\n    >>> modulus(5L,\
    \ 7L)\n    2L\n    \n*/\nlong long modulus(long long x, long long y) \n{\n   \
    \ return x % y;\n}\n/*\nCompare two numbers x and y\n    >>> compare(2L, 3L)\n\
    \    1\n    >>> compare(5L, 7L)\n    1\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkf8p48ei.d(23): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmpkf8p48ei.d(23): Error: use `long` for a 64 bit integer
    instead of `long long`\n/tmp/tmpkf8p48ei.d(23): Error: use `long` for a 64 bit
    integer instead of `long long`\n/tmp/tmpkf8p48ei.d(47): Error: use `long` for
    a 64 bit integer instead of `long long`\n/tmp/tmpkf8p48ei.d(47): Error: use `long`
    for a 64 bit integer instead of `long long`\n/tmp/tmpkf8p48ei.d(47): Error: use
    `long` for a 64 bit integer instead of `long long`\n/tmp/tmpkf8p48ei.d(71): Error:
    use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpkf8p48ei.d(71):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpkf8p48ei.d(71):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpkf8p48ei.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpkf8p48ei.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpkf8p48ei.d(95):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpkf8p48ei.d(119):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpkf8p48ei.d(119):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpkf8p48ei.d(119):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpkf8p48ei.d(123):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkf8p48ei.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n    \n*/\n\
    long multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    3L\n  \
    \  \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\nGet the remainder\
    \ of x divided by y\n    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L,\
    \ 7L)\n    2L\n    \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the absolute value of x\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n\
    \    5L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the sign of x\n    >>> sign(-2L)\n    -1L\n    >>> sign(-5L)\n    1L\n    \n\
    */\nlong sign(long x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the absolute\
    \ value of x\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n    5L\n    \n*/\nlong\
    \ abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the sign of x\n    >>>\
    \ sign(-2L)\n    -1L\n    >>> sign(-5L)\n    1L\n    \n*/\nlong sign(long x) \n\
    {\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the absolute value of x\n    >>> abs(2L)\n\
    \    2L\n    >>> abs(-5L)\n    5L\n    \n*/\nlong abs(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the sign of x\n    >>> sign(-2L)\n    -1L\n    >>>\
    \ sign(-5L)\n    1L\n    \n*/\nlong sign(long x) \n{\n    return x < 0 ? -1 :\
    \ 1;\n}\n/*\nGet the absolute value of x\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n\
    \    5L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the sign of x\n    >>> sign(-2L)\n    -1L\n    >>> sign(-5L)\n    1L\n    \n\
    */\nlong sign(long x) \n{\n    return x < 0 ? -1 : \nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp552_sa1t.d(146): Error: expression expected, not `unittest`\n/tmp/tmp552_sa1t.d(147):
    Error: found `{` when expecting `;` following `return` statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp552_sa1t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the remainder of x divided by y\n    >>> remainder(2L, 3L)\n    1L\n    >>>\
    \ remainder(5L, 7L)\n    3L\n    \n*/\nlong remainder(long x, long y) \n{\n  \
    \  return x % y;\n}\n/*\nGet the sign of x\n    >>> sign(1L)\n    1L\n    >>>\
    \ sign(-1L)\n    1L\n    \n*/\nlong sign(long x) \n{\n    return x < 0 ? -1 :\
    \ 1;\n}\n/*\nGet the absolute value of x\n    >>> abs(1L)\n    1L\n    >>> abs(-1L)\n\
    \    1L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the floor of x\n    >>> floor(1L)\n    1L\n    >>> floor(-1L)\n    -1L\n   \
    \ \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling\
    \ of x\n    >>> ceil(1L)\n    1L\n    >>> ceil(-1L)\n    0L\n    \n*/\nlong ceil(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the floor of x\n    >>> trunc(1L)\n\
    \    1L\n    >>> trunc(-1L)\n    -1L\n    \n*/\nlong trunc(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the ceiling of x\n    >>> round(1L)\n    1L\n  \
    \  >>> round(-1L)\n    0L\n    \n*/\nlong round(long x) \n{\n    return x < 0\
    \ ? -x : x;\n}\n/*\nGet the absolute value of x\n    >>> abs(1L)\n    1L\n   \
    \ >>> abs(-1L)\n    1L\n    \n*/\nlong abs(long x) \n{\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnri9bk1k.d(145): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnri9bk1k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n    \n*/\n\
    long subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of x\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n    5L\n\
    \    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the sign\
    \ of x\n    >>> sign(-2L)\n    -1L\n    >>> sign(-5L)\n    1L\n    \n*/\nlong\
    \ sign(long x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the floor of x\n  \
    \  >>> floor(2L)\n    2L\n    >>> floor(-5L)\n    -5L\n    \n*/\nlong floor(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling of x\n    >>> ceil(2L)\n\
    \    3L\n    >>> ceil(-5L)\n    -5L\n    \n*/\nlong ceil(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the remainder of x divided by y\n    >>> remainder(2L,\
    \ 3L)\n    1L\n    >>> remainder(5L, 7L)\n    3L\n    \n*/\nlong remainder(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nGet the modulo of x divided by y\n\
    \    >>> modulo(2L, 3L)\n    2L\n    >>> modulo(5L, 7L)\n    3L\n    \n*/\nlong\
    \ modulo(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the floor division\
    \ of x divided by y\n    >>> floordiv(2L, 3L)\n    2L\n    >>> floordiv(5L, 7L)\n\
    \    3L\n    \n*/\nlong floordiv(long x, long y) \n{\n    return x % y;\n}\n\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n\
    \    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n\
    \    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    2L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of a number\n    >>> abs(-5)\n    5\n    >>> abs(5)\n \
    \   5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the floor value of a number\n    >>> floor(5)\n    5\n    >>> floor(5.5)\n \
    \   6\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the ceiling value of a number\n    >>> ceil(5)\n    6\n    >>> ceil(5.5)\n \
    \   6\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the remainder of a number divided by another\n    >>> remainder(5, 2)\n    1\n\
    \    >>> remainder(5, 3)\n    0\n    \n*/\nlong remainder(long x, long y) \n{\n\
    \    return x % y;\n}\n/*\nGet the modulus of a number divided by another\n  \
    \  >>> modulus(5, 2)\n    1\n    >>> modulus(5, 3)\n    2\n    \n*/\nlong modulus(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(5)\n    1.41421356237\n    \n*/\ndouble sqrt(double x) \n{\n   \
    \ return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>> sqrt(5)\n\
    \    1.41421356237\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(5)\n    1.41421356237\n \
    \   \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet\
    \ the square root of a number\n    >>> \nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprc0rhgrb.d(141): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprc0rhgrb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n    \n*/\n\
    long subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    2L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the modulus of two numbers x and y\n    >>> modulus(2L, 3L)\n    1L\n    >>>\
    \ modulus(5L, 7L)\n    2L\n    \n*/\nlong modulus(long x, long y) \n{\n    return\
    \ x % y;\n}\n/*\nGet the absolute value of number x\n    >>> abs(1L)\n    1L\n\
    \    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the square\
    \ root of number x\n    >>> sqrt(1L)\n    1L\n    \n*/\nlong sqrt(long x) \n{\n\
    \    return x < 0 ? -x : sqrt(x);\n}\n/*\nGet the floor of number x\n    >>> floor(1L)\n\
    \    1L\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x : floor(x);\n\
    }\n/*\nGet the ceiling of number x\n    >>> ceil(1L)\n    1L\n    \n*/\nlong ceil(long\
    \ x) \n{\n    return x < 0 ? -x : ceil(x);\n}\n/*\nGet the natural logarithm of\
    \ number x\n    >>> log(1L)\n    0L\n    \n*/\nlong log(long x) \n{\n    return\
    \ x < 0 ? -x : log(x);\n}\n/*\nGet the natural logarithm of number x\n    >>>\
    \ log10(2L)\n    2.0\n    \n*/\ndouble log10(double x) \n{\n    return x < 0 ?\
    \ -x : log10(x);\n}\n/*\nGet the square root of number x\n    >>> sqrt(1L)\n \
    \   1L\n    \n*/\ndouble sqrt(double x) \n{\n    return x < 0 ? -x : sqrt(x);\n\
    }\n/*\nGet the floor of number x\n    >>> floor(1L)\n    1L\n    \n*/\ndouble\
    \ floor(double x) \n{\n    return \nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnwyltu0e.d(142): Error: expression expected, not `unittest`\n/tmp/tmpnwyltu0e.d(143):
    Error: found `{` when expecting `;` following `return` statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnwyltu0e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long add(long long\
    \ x, long long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n   \
    \ >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\ndouble add(double\
    \ x, double y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>>\
    \ add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\ndouble long add(double\
    \ long x, double long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and\
    \ y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nfloat\
    \ add(float x, float y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nfloat long\
    \ add(float long x, float long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n\
    \    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n\
    \    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpemtumbmz.d(23): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmpemtumbmz.d(23): Error: use `long` for a 64 bit integer
    instead of `long long`\n/tmp/tmpemtumbmz.d(23): Error: use `long` for a 64 bit
    integer instead of `long long`\n/tmp/tmpemtumbmz.d(47): Error: no identifier for
    declarator `double`\n/tmp/tmpemtumbmz.d(47): Error: found `long` when expecting
    `)`\n/tmp/tmpemtumbmz.d(47): Error: semicolon expected following function declaration\n/tmp/tmpemtumbmz.d(47):
    Error: no identifier for declarator `x`\n/tmp/tmpemtumbmz.d(47): Error: declaration
    expected, not `,`\n/tmp/tmpemtumbmz.d(50): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemtumbmz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2L, 3L)\n    1L\n    >>> sub(5L, 7L)\n    3L\n    \n*/\nlong sub(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> mul(3L, 5L)\n    15L\n    >>> mul(5L, 7L)\n    21L\n    \n*/\nlong mul(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ div(5L, 7L)\n    3L\n    >>> div(7L, 5L)\n    1L\n    \n*/\nlong div(long x,\
    \ long y) \n{\n    return x / y;\n}\n/*\nModulo of two numbers x and y\n    >>>\
    \ mod(5L, 7L)\n    2L\n    >>> mod(7L, 5L)\n    1L\n    \n*/\nlong mod(long x,\
    \ long y) \n{\n    return x % y;\n}\n/*\nGet the absolute value of x\n    >>>\
    \ abs(-1L)\n    1L\n    >>> abs(1L)\n    1L\n    \n*/\nlong abs(long x) \n{\n\
    \    return x < 0 ? -x : x;\n}\n/*\nGet the sign of x\n    >>> sign(-1)\n    1L\n\
    \    >>> sign(1)\n    1L\n    \n*/\nlong sign(long x) \n{\n    return x < 0 ?\
    \ -1 : 1;\n}\n/*\nGet the floor of x\n    >>> floor(-1L)\n    -1L\n    >>> floor(-2L)\n\
    \    0L\n    >>> floor(-3L)\n    -1L\n    >>> floor(-4L)\n    -2L\n    >>> floor(-1L)\n\
    \    -1L\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\n\
    Get the ceiling of x\n    >>> ceil(-1L)\n    0L\n    >>> ceil(-2L)\n    1L\n \
    \   >>> ceil(-3L)\n    1L\n    >>> ceil(-4L)\n    2L\n    >>> ceil(-1L)\n    0L\n\
    \    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the nearest\
    \ integer to x\n    >>> round(-1L)\n    0L\n    >>> round(-2L)\n    0L\n    >>>\
    \ round(-3L)\n    1L\n    >>> round(-4L)\n    1L\n    >>> round(-1L)\n    0L\n\
    \    \n*/\nlong round(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\n\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_jhdga9u.d(141): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_jhdga9u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long add(long long\
    \ x, long long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n   \
    \ >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz0ka7lww.d(23): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmpz0ka7lww.d(23): Error: use `long` for a 64 bit integer
    instead of `long long`\n/tmp/tmpz0ka7lww.d(23): Error: use `long` for a 64 bit
    integer instead of `long long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0ka7lww.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of a number\n    >>> abs(-1L)\n    1L\n    >>> abs(1L)\n\
    \    1L\n    \n*/\nlong abs(long x) \n{\n    return x > 0 ? x : -x;\n}\n/*\nGet\
    \ the sign of a number\n    >>> sign(-1)\n    -1\n    >>> sign(1)\n    1\n   \
    \ \n*/\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L)\
    \ == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L)\
    \ == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L)\
    \ == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\n/*\nSubtract two numbers x and y\n    >>>\
    \ sub(2L, 3L)\n    1L\n    >>> sub(5L, 7L)\n    3L\n    \n*/\nlong sub(long x,\
    \ long y) \n{\n\treturn x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(3L,\
    \ 2L)\n    6L\n    >>> mul(4L, 3L)\n    12L\n    \n*/\nlong mul(long x, long y)\
    \ \n{\n\treturn x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2L, 3L)\n\
    \    1L\n    >>> div(5L, 7L)\n    3L\n    \n*/\nlong div(long x, long y) \n{\n\
    \treturn x / y;\n}\n/*\nGet the modulus of two numbers x and y\n    >>> mod(2L,\
    \ 3L)\n    1L\n    >>> mod(5L, 7L)\n    3L\n    \n*/\nlong mod(long x, long y)\
    \ \n{\n\treturn x % y;\n}\n/*\nGet the absolute value of number x\n    >>> abs(2L)\n\
    \    2L\n    >>> abs(-5L)\n    5L\n    \n*/\nlong abs(long x) \n{\n\treturn x\
    \ < 0 ? -x : x;\n}\n/*\nGet the square root of number x\n    >>> sqrt(2L)\n  \
    \  1L\n    >>> sqrt(-5L)\n    -1L\n    \n*/\nlong sqrt(long x) \n{\n\treturn x\
    \ < 0 ? -x : sqrt(x);\n}\n/*\nGet the reciprocal of number x\n    >>> recip(2L)\n\
    \    1L\n    >>> recip(-5L)\n    -1L\n    \n*/\nlong recip(long x) \n{\n\treturn\
    \ 1 / x;\n}\n/*\nGet the floor of number x\n    >>> floor(2L)\n    2L\n    >>>\
    \ floor(-5L)\n    -5L\n    \n*/\nlong floor(long x) \n{\n\treturn x < 0 ? -x :\
    \ floor(x);\n}\n/*\nGet the ceiling of number x\n    >>> ceil(2L)\n    2L\n  \
    \  >>> ceil(-5L)\n    -5L\n    \n*/\nlong ceil(long x) \n{\n\treturn x < 0 ? -x\
    \ : ceil(x);\n}\n/*\nGet the natural logarithm of number x\n    >>> log(2L)\n\
    \    0.0\n    >>> log(5L)\n    1.6094379124341\n    \n*/\ndouble log(double x)\
    \ \n{\n\treturn log(x);\n}\n/*\nGet the natural logarithm of number x\n    >>>\
    \ log(2L)\n    0.0\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvsd9e9gv.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvsd9e9gv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n    \n*/\n\
    long multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    3L\n  \
    \  \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\nGet the square\
    \ root of a number\n    >>> sqrt(3L)\n    1.7320508075688772\n    \n*/\ndouble\
    \ sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(3L)\n    1.7320508075688772\n    \n*/\nfloat sqrt(float\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(3L)\n    1.7320508075688772\n    \n*/\nlong double sqrt(long double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(3L)\n    1.7320508075688772\n    \n*/\ndouble sqrt(double x) \n\
    {\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(3L)\n    1.7320508075688772\n    \n*/\nfloat sqrt(float x) \n{\n    return\
    \ std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>> sqrt(3L)\n\
    \    1.7320508075688772\n    \n*/\nlong double sqrt(long double x) \n{\n    return\
    \ std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>> sqrt(3L)\n\
    \    1.7320508075688772\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(3L)\n    1.7320508075688772\n\
    \    \n*/\nfloat sqrt(float x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the\
    \ square root of a number\n    >>> sqrt(3L)\n    1.7320508075688772\n    \n*/\n\
    long double sqrt(long double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet\
    \ the square root of a number\n    >>> \nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5sui9913.d(65): Error: use `real` instead of `long double`\n/tmp/tmp5sui9913.d(65):
    Error: use `real` instead of `long double`\n/tmp/tmp5sui9913.d(95): Error: use
    `real` instead of `long double`\n/tmp/tmp5sui9913.d(95): Error: use `real` instead
    of `long double`\n/tmp/tmp5sui9913.d(125): Error: use `real` instead of `long
    double`\n/tmp/tmp5sui9913.d(125): Error: use `real` instead of `long double`\n/tmp/tmp5sui9913.d(129):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5sui9913.d",
    "-I/tmp"]\n'''
  stdout: b''
