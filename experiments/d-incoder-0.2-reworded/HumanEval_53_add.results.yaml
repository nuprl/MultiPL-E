name: HumanEval_53_add
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of x\n    >>> abs(-1L)\n    1L\n    >>> abs(1L)\n    1L\n\
    \    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the floor\
    \ of x\n    >>> floor(-1L)\n    -1L\n    >>> floor(-2L)\n    0L\n    >>> floor(1L)\n\
    \    1L\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\n\
    Get the ceiling of x\n    >>> ceil(-1L)\n    0L\n    >>> ceil(-2L)\n    1L\n \
    \   >>> ceil(1L)\n    1L\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ?\
    \ -x : x;\n}\n/*\nGet the remainder of x divided by y\n    >>> remainder(2L, 3L)\n\
    \    1L\n    >>> remainder(5L, 7L)\n    2L\n    \n*/\nlong remainder(long x, long\
    \ y) \n{\n    return x % y;\n}\n/*\nGet the remainder of x divided by y with rounding\n\
    \    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L, 7L)\n    2L\n    \n\
    */\nlong remainderRound(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the\
    \ floor of x with rounding\n    >>> floorRound(-1L)\n    0L\n    >>> floorRound(-2L)\n\
    \    0L\n    >>> floorRound(1L)\n    1L\n    \n*/\nlong floorRound(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling of x with rounding\n   \
    \ >>> ceilRound(-1L)\n    1L\n    >>> ceilRound(-2L)\n    1\nunittest\n{\n   \
    \ alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm9hvtuup.d(129): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9hvtuup.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the square root of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(4L)\n    2.0\n    \n*/\nfloat sqrt(float x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\n\
    long sqrt(long x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\nulong sqrt(ulong x) \n{\n\
    \    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(4L)\n    2.0\n    \n*/\nuint sqrt(uint x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\n\
    uint sqrt(uint x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\nulong sqrt(ulong x) \n{\n\
    \    return std.math.sqrt(x);\n}\n/*\nGet the square root of a number\n    >>>\
    \ sqrt(4L)\n    2.0\n    \n*/\nuint sqrt(uint x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\n\
    ulong sqrt(ulong x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(4L)\n    2.0\n    \n*/\nuint sqrt(uint x) \n{\n  \
    \  return std.math.sqrt(\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk3vpp_93.d(150): Error: expression expected, not `unittest`\\\
    n/tmp/tmpk3vpp_93.d(151): Error: found `{` when expecting `,`\\n/tmp/tmpk3vpp_93.d(152):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpk3vpp_93.d(152): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpk3vpp_93.d(152): Error: expression\
    \ expected, not `=`\\n/tmp/tmpk3vpp_93.d(152): Error: found `add` when expecting\
    \ `,`\\n/tmp/tmpk3vpp_93.d(152): Error: expression expected, not `;`\\n/tmp/tmpk3vpp_93.d(154):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmpk3vpp_93.d(154): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpk3vpp_93.d(155): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpk3vpp_93.d(156): Error: found `;` when expecting `,`\\n/tmp/tmpk3vpp_93.d(157):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmpk3vpp_93.d(158): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpk3vpp_93.d(159): Error: expression expected,\
    \ not `}`\\n/tmp/tmpk3vpp_93.d(160): Error: found `void` when expecting `,`\\\
    n/tmp/tmpk3vpp_93.d(160): Error: found `{` when expecting `,`\\n/tmp/tmpk3vpp_93.d(160):\
    \ Error: expression expected, not `}`\\n/tmp/tmpk3vpp_93.d(160): Error: found\
    \ `End of File` when expecting `,`\\n/tmp/tmpk3vpp_93.d(160): Error: found `End\
    \ of File` when expecting `)`\\n/tmp/tmpk3vpp_93.d(160): Error: found `End of\
    \ File` when expecting `;` following `return` statement\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpk3vpp_93.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n    \n*/\n\
    long multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    3L\n  \
    \  \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\nGet the remainder\
    \ of dividing x by y\n    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L,\
    \ 7L)\n    2L\n    \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the absolute value of x\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n\
    \    5L\n    \n*/\nlong abs(long x) \n{\n    return x > 0 ? x : -x;\n}\n/*\nGet\
    \ the sign of x\n    >>> sign(-2L)\n    -1L\n    >>> sign(-5L)\n    1L\n    \n\
    */\nlong sign(long x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the absolute\
    \ value of x\n    >>> abs(-2L)\n    -2L\n    >>> abs(-5L)\n    5L\n    \n*/\n\
    long abs(long x) \n{\n    return x > 0 ? x : -x;\n}\n/*\nGet the sign of x\n \
    \   >>> sign(-2L)\n    -1L\n    >>> sign(-5L)\n    1L\n    \n*/\nlong sign(long\
    \ x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the absolute value of x\n   \
    \ >>> abs(-2L)\n    -2L\n    >>> abs(-5L)\n    5L\n    \n*/\nlong abs(long x)\
    \ \n{\n    return x > 0 ? x : -x;\n}\n/*\nGet the sign of x\n    >>> sign(-2L)\n\
    \    -1L\n    >>> sign(-5L)\n    1L\n    \n*/\nlong sign(long x) \n{\n    return\
    \ x < 0 ? -1 : 1;\n}\n/*\nGet the absolute value of x\n    >>> abs(-2L)\n    -2L\n\
    \    >>> abs(-5L)\n    5L\n    \n*/\nlong abs(long x) \n{\n    return x > 0 ?\
    \ x : -x;\n}\n/*\nGet the sign of x\n    >>> sign(-2L)\n    -1L\n    >>> sign(-5L)\n\
    \    1L\n    \n*/\nlong sign(long x) \n{\n\nunittest\n{\n    alias candidate =\
    \ add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) ==\
    \ 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) ==\
    \ 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3uw5klq_.d(146): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3uw5klq_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\n/*\nSubtract two numbers x and y\n    >>>\
    \ subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n\treturn x - y;\n}\n/*\nMultiply two numbers x and y\n    >>>\
    \ multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n    \n*/\nlong\
    \ multiply(long x, long y) \n{\n\treturn x * y;\n}\n/*\nDivide two numbers x and\
    \ y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    3L\n    \n*/\n\
    long divide(long x, long y) \n{\n\treturn x / y;\n}\n/*\nGet the absolute value\
    \ of a number\n    >>> abs(2L)\n    2L\n    >>> abs(-2L)\n    2L\n    \n*/\nlong\
    \ abs(long x) \n{\n\treturn x < 0 ? -x : x;\n}\n/*\nGet the modulus of a number\n\
    \    >>> mod(2L, 3L)\n    1L\n    >>> mod(5L, 7L)\n    3L\n    \n*/\nlong mod(long\
    \ x, long y) \n{\n\treturn x % y;\n}\n/*\nGet the remainder of a number divided\
    \ by another\n    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L, 7L)\n \
    \   2L\n    \n*/\nlong remainder(long x, long y) \n{\n\treturn x % y;\n}\n/*\n\
    Get the floor of a number\n    >>> floor(2L)\n    2L\n    >>> floor(5L)\n    5L\n\
    \    \n*/\nlong floor(long x) \n{\n\treturn x < 0 ? -x : x;\n}\n/*\nGet the ceiling\
    \ of a number\n    >>> ceil(2L)\n    3L\n    >>> ceil(5L)\n    5L\n    \n*/\n\
    long ceil(long x) \n{\n\treturn x < 0 ? -x : x;\n}\n/*\nGet the floor of a number\n\
    \    >>> floor(2L)\n    2L\n    >>> floor(5L)\n    5L\n    \n*/\nlong floor(long\
    \ x) \n{\n\treturn x < 0 ? -x : x;\n}\n/*\nGet the ceiling of a number\n    >>>\
    \ ceil(2L)\n    3L\n    >>> ceil(5L)\n    5L\n    \n*/\nlong ceil(long x) \n{\n\
    \treturn x < 0 ? -x : x;\n}\n/*\nGet the square root of a number\n    >>> sqrt(2L)\n\
    \    1L\n    >>> sqrt(5L)\n    3L\n    \n\nunittest\n{\n    alias candidate =\
    \ add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) ==\
    \ 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) ==\
    \ 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzjrcw_lh.d(135): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzjrcw_lh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long add(long long\
    \ x, long long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n\
    \    >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n    \n*/\n\
    long subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nSubtract two numbers\
    \ x and y\n    >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n\
    \    \n*/\nlong long subtract(long long x, long long y) \n{\n    return x - y;\n\
    }\n/*\nMultiply two numbers x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>>\
    \ multiply(5L, 7L)\n    42L\n    \n*/\nlong multiply(long x, long y) \n{\n   \
    \ return x * y;\n}\n/*\nMultiply two numbers x and y\n    >>> multiply(2L, 3L)\n\
    \    6L\n    >>> multiply(5L, 7L)\n    42L\n    \n*/\nlong long multiply(long\
    \ long x, long long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and\
    \ y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    2L\n    \n*/\n\
    long divide(long x, long y) \n{\n    return x / y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    2L\n  \
    \  \n*/\nlong long divide(long long x, long long y) \n{\n    return x / y;\n}\n\
    /*\nModulus operator returns the remainder of x divided by y\n    >>> modulus(2L,\
    \ 3L)\n    1L\n    >>> modulus(5L, 7L)\n    2L\n    \n*/\nlong modulus(long x,\
    \ long y) \n{\n    return x % y;\n}\n/*\nModulus operator returns the remainder\
    \ of x divided by y\n    >>> modulus(2L, 3L)\n    1L\n    >>> modulus(5L, 7L)\n\
    \    2L\n    \n*/\nlong long modulus(long long x, long long y) \n{\n    return\
    \ x % y;\n}\n/*\nBitwise AND operator\n    >>> bitwise_and(2L, 3L)\n    \nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq8b_j2xt.d(23): Error: use `long` for a 64 bit integer instead\
    \ of `long long`\\n/tmp/tmpq8b_j2xt.d(23): Error: use `long` for a 64 bit integer\
    \ instead of `long long`\\n/tmp/tmpq8b_j2xt.d(23): Error: use `long` for a 64\
    \ bit integer instead of `long long`\\n/tmp/tmpq8b_j2xt.d(47): Error: use `long`\
    \ for a 64 bit integer instead of `long long`\\n/tmp/tmpq8b_j2xt.d(47): Error:\
    \ use `long` for a 64 bit integer instead of `long long`\\n/tmp/tmpq8b_j2xt.d(47):\
    \ Error: use `long` for a 64 bit integer instead of `long long`\\n/tmp/tmpq8b_j2xt.d(71):\
    \ Error: use `long` for a 64 bit integer instead of `long long`\\n/tmp/tmpq8b_j2xt.d(71):\
    \ Error: use `long` for a 64 bit integer instead of `long long`\\n/tmp/tmpq8b_j2xt.d(71):\
    \ Error: use `long` for a 64 bit integer instead of `long long`\\n/tmp/tmpq8b_j2xt.d(95):\
    \ Error: use `long` for a 64 bit integer instead of `long long`\\n/tmp/tmpq8b_j2xt.d(95):\
    \ Error: use `long` for a 64 bit integer instead of `long long`\\n/tmp/tmpq8b_j2xt.d(95):\
    \ Error: use `long` for a 64 bit integer instead of `long long`\\n/tmp/tmpq8b_j2xt.d(119):\
    \ Error: use `long` for a 64 bit integer instead of `long long`\\n/tmp/tmpq8b_j2xt.d(119):\
    \ Error: use `long` for a 64 bit integer instead of `long long`\\n/tmp/tmpq8b_j2xt.d(119):\
    \ Error: use `long` for a 64 bit integer instead of `long long`\\n/tmp/tmpq8b_j2xt.d(123):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpq8b_j2xt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2L, 3L)\n    1L\n    >>> sub(5L, 7L)\n    3L\n    \n*/\nlong sub(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> mul(3L, 2L)\n    6L\n    >>> mul(4L, 7L)\n    42L\n    \n*/\nlong mul(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ div(2L, 3L)\n    1L\n    >>> div(5L, 7L)\n    2L\n    \n*/\nlong div(long x,\
    \ long y) \n{\n    return x / y;\n}\n/*\nGet the modulus of two numbers x and\
    \ y\n    >>> mod(2L, 3L)\n    1L\n    >>> mod(5L, 7L)\n    2L\n    \n*/\nlong\
    \ mod(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the remainder of x divided\
    \ by y\n    >>> rem(2L, 3L)\n    1L\n    >>> rem(5L, 7L)\n    2L\n    \n*/\nlong\
    \ rem(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the sign of x\n    >>>\
    \ sign(-2L)\n    1L\n    >>> sign(-5L)\n    -1L\n    \n*/\nlong sign(long x) \n\
    {\n    return x < 0 ? -1 : (x > 0 ? 1 : 0);\n}\n/*\nGet the absolute value of\
    \ x\n    >>> abs(-2L)\n    2L\n    >>> abs(-5L)\n    5L\n    \n*/\nlong abs(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the square root of x\n    >>>\
    \ sqrt(2L)\n    1L\n    >>> sqrt(5L)\n    1.41421356237\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of x\n    >>>\
    \ sqrt(2L)\n    1L\n    >>> sqrt(5L)\n    1.41421356237\n    \n*/\nfloat sqrt(float\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of x\n    >>>\
    \ sqrt(2L)\n    1L\n    >>> sqrt(5L)\n    1.41421356237\n    \n*/\nlong sqrt(long\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of x\n    >>>\
    \ sqrt(2L)\n    1L\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppllspsw6.d(135): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppllspsw6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
