name: HumanEval_67_fruit_distribution
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    In this task, you will\
  \ be given a string that represents a number of apples and oranges \n    that are\
  \ distributed in a basket of fruit this basket contains \n    apples, oranges, and\
  \ mango fruits. Given the string that represents the total number of \n    the oranges\
  \ and apples and an integer that represent the total number of the fruits \n   \
  \ in the basket return the number of the mango fruits in the basket.\n    for examble:\n\
  \    >>> fruit_distribution(\"5 apples and 6 oranges\", 19L)\n    8L\n    >>> fruit_distribution(\"\
  0 apples and 1 oranges\", 3L)\n    2L\n    >>> fruit_distribution(\"2 apples and\
  \ 3 oranges\", 100L)\n    95L\n    >>> fruit_distribution(\"100 apples and 1 oranges\"\
  , 120L)\n    19L\n    \n*/\nlong fruit_distribution(string s, long n) \n"
tests: "unittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"\
  5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\"\
  , 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n\
  \    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"\
  2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3\
  \ oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L)\
  \ == 19L);\n}\nvoid main(){}"
completions: ["{\n    long apples = 0, oranges = 0, mangos = 0;\n    long apples_count\
    \ = 0, oranges_count = 0, mangos_count = 0;\n    \n    foreach(char c in s)\n\
    \    {\n        switch(c)\n        {\n            case 'a':\n                apples++;\n\
    \                apples_count++;\n                break;\n            case 'o':\n\
    \                oranges++;\n                oranges_count++;\n              \
    \  break;\n            case 'm':\n                mangos++;\n                mangos_count++;\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    \n    return mangos - apples_count - oranges_count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks so much for your help. I really appreciate\
    \ it. I was able to solve the problem using your suggestions. I appreciate your\
    \ help.\n<|/ c |>\n<| c |>\nIf this answer solved your problem, please mark it\
    \ as accepted so others know that your question has been answered.\n<|/ c |>\n\
    <| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    long apples, oranges, mango;\n    \n    apples = std.string.toLong(s.split(\"\
    \ \")[0]);\n    oranges = std.string.toLong(s.split(\" \")[1]);\n    mango = std.string.toLong(s.split(\"\
    \ \")[2]);\n    \n    long total;\n    \n    total = apples + oranges + mango;\n\
    \    \n    long apples_count = apples / total;\n    long oranges_count = oranges\
    \ / total;\n    long mango_count = mango / total;\n    \n    long total_count\
    \ = apples_count + oranges_count + mango_count;\n    \n    long mango_count =\
    \ total_count - mango_count;\n    \n    return mango_count;\n}\n</code>\n<|/ a\
    \ tags=c++,string |>\n<| c |>\nThanks so much! I really appreciate it!\n<|/ c\
    \ |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    long apples\
    \ = 0, oranges = 0, mangos = 0;\n    long apples_count = 0, oranges_count = 0,\
    \ mangos_count = 0;\n    \n    foreach(char c in s)\n    {\n        if(c == 'a')\n\
    \            apples++;\n        else if(c == 'o')\n            oranges++;\n  \
    \      else if(c == 'm')\n            mangos++;\n    }\n    \n    apples_count\
    \ = apples;\n    oranges_count = oranges;\n    mangos_count = mangos;\n    \n\
    \    apples = apples - apples_count;\n    oranges = oranges - oranges_count;\n\
    \    mangos = mangos - mangos_count;\n    \n    apples = apples - apples_count;\n\
    \    oranges = oranges - oranges_count;\n    mangos = mangos - mangos_count;\n\
    \    \n    apples = apples - apples_count;\n    oranges = oranges - oranges_count;\n\
    \    mangos = mangos - mangos_count;\n    \n    apples = apples - apples_count;\n\
    \    oranges = oranges - oranges_count;\n    mangos = mangos - mangos_count;\n\
    \    \n    apples = apples - apples_count;\n    oranges = oranges - oranges_count;\n\
    \    mangos = mangos - mangos_count;\n    \n    apples = apples - apples_count;\n\
    \    oranges = oranges - oranges_count;\n    mangos = mangos - mangos_count;\n\
    \    \n    apples = apples - apples_count;\n    oranges = oranges - oranges_count;\n\
    \    mangos = mangos - mangos_count;\n    \n    apples = apples - apples_count;\n\
    \    oranges = oranges - oranges_count;\n    mangos = mangos - mangos_count;\n\
    \    \n    apples = apples - apples_count;\n    oranges = oranges - oranges_count;\n\
    \    mangos = mangos - mangos_count;\n    \n    apples = apples - apples_count;\n\
    \    oranges = oranges - oranges_count;\n    mangos = mangos - mangos_count;\n\
    \    \n    apples = apples - apples_count;\n    oranges = oranges - oranges_count;\n\
    \    mangos = mangos - mangos_count;\n    \n    apples = apples - apples_count;\n\
    \    oranges = oranges - oranges_count;\n    mangos = mangos - mangos_count;\n\
    \    \n    apples = apples - apples_count;\n    oranges = oranges - oranges_count;\n\
    \    mangos = mangos - mangos_count;\n    \n    apples = apples - apples_count;",
  "{\n    long apples, oranges, mango;\n    long apples_count, oranges_count, mangoes_count;\n\
    \    \n    apples = oranges = mango = 0;\n    apples_count = oranges_count = mangoes_count\
    \ = 0;\n    \n    foreach(char c in s)\n    {\n        switch(c)\n        {\n\
    \            case 'a':\n                apples++;\n                break;\n  \
    \          case 'o':\n                oranges++;\n                break;\n   \
    \         case 'm':\n                mango++;\n                break;\n      \
    \  }\n    }\n    \n    apples_count = apples - oranges - mango;\n    oranges_count\
    \ = oranges - apples;\n    mangoes_count = mango;\n    \n    return mangoes_count\
    \ + apples_count + oranges_count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    import java.util.*;\nimport java.lang.*;\nimport java.io.*;", "{\n    long apples\
    \ = 0;\n    long oranges = 0;\n    long mango = 0;\n    long total = 0;\n    long\
    \ count = 0;\n    \n    foreach(char c in s)\n    {\n        switch(c)\n     \
    \   {\n            case 'a':\n                apples++;\n                break;\n\
    \            case 'o':\n                oranges++;\n                break;\n \
    \           case 'm':\n                mango++;\n                break;\n    \
    \        default:\n                break;\n        }\n    }\n    \n    foreach(char\
    \ c in s)\n    {\n        switch(c)\n        {\n            case 'a':\n      \
    \          apples--;\n                break;\n            case 'o':\n        \
    \        oranges--;\n                break;\n            case 'm':\n         \
    \       mango--;\n                break;\n            default:\n             \
    \   break;\n        }\n    }\n    \n    foreach(char c in s)\n    {\n        switch(c)\n\
    \        {\n            case 'a':\n                apples++;\n               \
    \ break;\n            case 'o':\n                oranges++;\n                break;\n\
    \            case 'm':\n                mango++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    \n    foreach(char\
    \ c in s)\n    {\n        switch(c)\n        {\n            case 'a':\n      \
    \          apples--;\n                break;\n            case 'o':\n        \
    \        oranges--;\n                break;\n            case 'm':\n         \
    \       mango--;\n                break;\n            default:\n             \
    \   break;\n        }\n    }\n    \n    foreach(char c in s)\n    {\n        switch(c)\n\
    \        {\n            case 'a':\n                apples++;\n               \
    \ break;\n            case 'o':\n                oranges++;\n                break;\n\
    \            case 'm':\n                mango++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    \n    foreach(char\
    \ c in s)\n    {\n        switch(c)\n        {\n            case 'a':\n      \
    \          apples--;\n                break;\n            case 'o':\n        \
    \        oranges--;\n                break;\n            case 'm':\n         \
    \       mango--;\n                break;\n            default:\n             \
    \   break;\n        }\n    }\n    \n    foreach(char c in s)\n    {\n        switch(c)\n\
    \        {\n            case 'a':\n                apples++;\n               \
    \ break;\n            case 'o':\n                oranges++;\n                break;\n\
    \            case 'm':\n                mango++;\n                break;\n   \
    \         default:\n                break;\n        }\n    }\n    \n    foreach(char\
    \ c in s)\n    {\n        switch(c)\n        {\n            case 'a':\n      \
    \          apples--;\n                break;\n            case 'o':\n        \
    \        oranges--;\n                break;\n            case 'm':\n         \
    \       mango--;\n                break;\n            default:\n             \
    \   break;\n        }\n    }\n    \n    foreach(char c in s)\n    {\n        switch",
  "{\n    long apples = 0, oranges = 0, mangos = 0;\n    long apples_count = 0, oranges_count\
    \ = 0, mangos_count = 0;\n    long apples_sum = 0, oranges_sum = 0, mangos_sum\
    \ = 0;\n    long apples_avg = 0, oranges_avg = 0, mangos_avg = 0;\n    long apples_min\
    \ = 0, oranges_min = 0, mangos_min = 0;\n    long apples_max = 0, oranges_max\
    \ = 0, mangos_max = 0;\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        if(s[i] == 'a' || s[i] == 'A')\n        {\n            apples++;\n  \
    \          apples_count++;\n            apples_sum += std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(std.math.abs(std.math.pow(st",
  "{\n    long apples = 0, oranges = 0, mangos = 0;\n    \n    foreach(char c in s)\n\
    \    {\n        switch(c)\n        {\n            case 'a':\n                apples++;\n\
    \                break;\n            case 'o':\n                oranges++;\n \
    \               break;\n            case 'm':\n                mangos++;\n   \
    \             break;\n            default:\n                break;\n        }\n\
    \    }\n    \n    return mangos + oranges + apples - n;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nI like your solution. Very elegant. Thank you!\n<|/ c |>\n<| c\
    \ |>\nI like your solution as well. Very elegant. Thank you!\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\nThis problem can be solved using dynamic programming.\nLet dp[i][j] be the\
    \ number of ways to distribute the fruits in the basket such that there are j\
    \ apples and i oranges. \ndp[i][j] = dp[i-1][j-1] + dp[i-1][j] if there are j\
    \ apples and i oranges. \nIf there are i apples and j oranges then dp[i][j] =\
    \ dp[i-1][j-1] + dp[i-1][j-i]\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long apples = 0, oranges = 0, mangos = 0;\n    long\
    \ apples_count = 0, oranges_count = 0, mangos_count = 0;\n    \n    foreach(char\
    \ c in s)\n    {\n        if(c == 'a')\n        {\n            apples_count +=\
    \ 1;\n        }\n        else if(c == 'o')\n        {\n            oranges_count\
    \ += 1;\n        }\n        else if(c == 'm')\n        {\n            mangos_count\
    \ += 1;\n        }\n    }\n    \n    apples = apples_count;\n    oranges = oranges_count;\n\
    \    mangos = mangos_count;\n    \n    apples_count = apples_count * n;\n    oranges_count\
    \ = oranges_count * n;\n    mangos_count = mangos_count * n;\n    \n    apples\
    \ += apples_count;\n    oranges += oranges_count;\n    mangos += mangos_count;\n\
    \    \n    return mangos;\n}", "{\n    long apples, oranges, mangos = 0;\n   \
    \ long apples_count, oranges_count, mangos_count = 0;\n    \n    foreach(char\
    \ c in s)\n    {\n        if(c == 'a' || c == 'A')\n            apples_count +=\
    \ 1;\n        else if(c == 'o' || c == 'O')\n            oranges_count += 1;\n\
    \        else if(c == 'm' || c == 'M')\n            mangos_count += 1;\n    }\n\
    \    \n    apples = apples_count;\n    oranges = oranges_count;\n    mangos =\
    \ mangos_count;\n    \n    apples_count = apples_count * n;\n    oranges_count\
    \ = oranges_count * n;\n    mangos_count = mangos_count * n;\n    \n    return\
    \ mangos_count + oranges_count + apples_count;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c\
    \ |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    long apples = 0, oranges = 0, mangos\
    \ = 0;\n    long total = 0;\n    \n    foreach(char c in s)\n    {\n        switch(c)\n\
    \        {\n            case 'a':\n                apples++;\n               \
    \ break;\n            case 'o':\n                oranges++;\n                break;\n\
    \            case 'm':\n                mangos++;\n                break;\n  \
    \          default:\n                break;\n        }\n    }\n    \n    total\
    \ = apples + oranges + mangos;\n    \n    return mangos / total;\n}", "{\n   \
    \ long apples, oranges, mango;\n    long apples_sum, oranges_sum, mango_sum;\n\
    \    long apples_count, oranges_count, mango_cnt;\n    \n    apples_sum = oranges_sum\
    \ = mango_sum = 0;\n    apples_count = oranges_count = mango_cnt = 0;\n    \n\
    \    foreach(char c, s)\n    {\n        if(isdigit(c))\n        {\n          \
    \  apples_sum += c - '0';\n            apples_count++;\n        }\n        else\
    \ if(isalpha(c))\n        {\n            oranges_sum += c - 'a';\n           \
    \ oranges_count++;\n        }\n        else\n        {\n            mango_sum\
    \ += c - 'm';\n            mango_cnt++;\n        }\n    }\n    \n    apples =\
    \ apples_sum / apples_count;\n    oranges = oranges_sum / oranges_count;\n   \
    \ mango = mango_sum / mango_cnt;\n    \n    return mango * n;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThank you for your answer, but i need to use only std\
    \ library, i can't use any additional libraries.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution using only std library\n<|/ c |>\n<| c |>\n\
    Thank you for your answer, but i need to use only std library, i can't use any\
    \ additional libraries.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution\
    \ using only std library\n<|/ c |>\n<| c |>\nThank you for your answer, but i\
    \ need to use only std library, i can't use any additional libraries.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <sstream>\n\
    #include <vector>\n#include <algorithm>\n#include <iterator>\n#include <cctype>",
  "{\n    long apples, oranges, mango;\n    long apples_count, oranges_count, mangoes_count;\n\
    \    \n    apples = oranges = mango = 0;\n    apples_count = oranges_count = mangoes_count\
    \ = 0;\n    \n    foreach(char c, s)\n    {\n        if(c == 'a' || c == 'A')\n\
    \            apples++;\n        else if(c == 'o' || c == 'O')\n            oranges++;\n\
    \        else if(c == 'm' || c == 'M')\n            mango++;\n    }\n    \n  \
    \  apples_count = apples;\n    oranges_count = oranges;\n    mangoes_count = mango;\n\
    \    \n    apples -= mango;\n    oranges -= mango;\n    mango -= apples;\n   \
    \ \n    apples -= oranges;\n    oranges -= apples;\n    mango -= oranges;\n  \
    \  \n    apples -= apples;\n    oranges -= oranges;\n    mango -= apples;\n  \
    \  \n    apples -= oranges;\n    oranges -= oranges;\n    mango -= oranges;\n\
    \    \n    apples -= apples;\n    oranges -= apples;\n    mango -= apples;\n \
    \   \n    apples -= oranges;\n    oranges -= oranges;\n    mango -= oranges;\n\
    \    \n    apples -= apples;\n    oranges -= apples;\n    mango -= apples;\n \
    \   \n    apples -= oranges;\n    oranges -= oranges;\n    mango -= oranges;\n\
    \    \n    apples -= apples;\n    oranges -= apples;\n    mango -= apples;\n \
    \   \n    apples -= oranges;\n    oranges -= oranges;\n    mango -= oranges;\n\
    \    \n    apples -= apples;\n    oranges -= apples;\n    mango -= apples;\n \
    \   \n    apples -= oranges;\n    oranges -= oranges;\n    mango -= oranges;\n\
    \    \n    apples -= apples;\n    oranges -= apples;\n    mango -= apples;\n \
    \   \n    apples -= oranges;\n    oranges -= oranges;\n    mango -= oranges;\n\
    \    \n    apples -= apples;\n    oranges -= apples;\n    mango -= apples;\n \
    \   \n    apples -= oranges;\n    oranges -= oranges;\n    mango -= oranges;\n\
    \    \n    apples -= apples;\n    oranges -= ", "{\n    long apples = 0, oranges\
    \ = 0, mangos = 0;\n    long apples_count, oranges_count, mangos_count;\n    \n\
    \    foreach(char c in s)\n    {\n        switch(c)\n        {\n            case\
    \ 'a':\n                apples++;\n                break;\n            case 'o':\n\
    \                oranges++;\n                break;\n            case 'm':\n \
    \               mangos++;\n                break;\n            default:\n    \
    \            break;\n        }\n    }\n    apples_count = apples;\n    oranges_count\
    \ = oranges;\n    mangos_count = mangos;\n    \n    long apples_sum = apples_count\
    \ * apples;\n    long oranges_sum = oranges_count * oranges;\n    long mangos_sum\
    \ = mangos_count * mangos;\n    \n    long apples_percentage = apples_sum / n;\n\
    \    long oranges_percentage = oranges_sum / n;\n    long mangos_percentage =\
    \ mangos_sum / n;\n    \n    long apples_percentage_2 = apples_percentage * apples_percentage;\n\
    \    long oranges_percentage_2 = oranges_percentage * oranges_percentage;\n  \
    \  long mangos_percentage_2 = mangos_percentage * mangos_percentage;\n    \n \
    \   long apples_percentage_3 = apples_percentage_2 * apples_percentage;\n    long\
    \ oranges_percentage_3 = oranges_percentage_2 * oranges_percentage;\n    long\
    \ mangos_percentage_3 = mangos_percentage_2 * mangos_percentage;\n    \n    long\
    \ apples_percentage_4 = apples_percentage_3 * apples_percentage;\n    long oranges_percentage_4\
    \ = oranges_percentage_3 * oranges_percentage;\n    long mangos_percentage_4 =\
    \ mangos_percentage_3 * mangos_percentage;\n    \n    long apples_percentage_5\
    \ = apples_percentage_4 * apples_percentage;\n    long oranges_percentage_5 =\
    \ oranges_percentage_4 * oranges_percentage;\n    long mangos_percentage_5 = mangos_percentage_4\
    \ * mangos_percentage;\n    \n    long apples_percentage_6 = apples_percentage_5\
    \ * apples_percentage;\n    long oranges_percentage_6 = oranges_percentage_5 *\
    \ oranges_percentage;\n    long mangos_percentage_6 = mangos_percentage_5 * mangos_percentage;\n\
    \    \n    long apples_percentage_7 = apples_percentage_6 * apples_percentage;\n\
    \    long oranges_percentage_7 = oranges_percentage_6 * oranges_percentage;\n\
    \    long mangos_percentage_7 = mangos_percentage_6 * mangos_percentage;\n   \
    \ \n    long apples_percentage_8 = apples_percentage", "{\n    long apples, oranges,\
    \ mango;\n    long apples_count, oranges_count, mangoes_count;\n    \n    apples\
    \ = oranges = mango = 0;\n    apples_count = oranges_count = mangoes_count = 0;\n\
    \    \n    foreach(char c, s)\n    {\n        switch(c)\n        {\n         \
    \   case 'a':\n                apples++;\n                break;\n           \
    \ case 'o':\n                oranges++;\n                break;\n            case\
    \ 'm':\n                mango++;\n                break;\n        }\n    }\n \
    \   \n    apples_count = apples - oranges;\n    oranges_count = oranges - apples;\n\
    \    mangoes_count = mango - apples;\n    \n    return mangoes_count + apples_count\
    \ + oranges_count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your\
    \ answer. I am not allowed to use any library functions. I only have to use std.string\
    \ and std.math\n<|/ c |>\n<| c |>\nI added a solution that uses std.string and\
    \ std.math\n<|/ c |>\n<| c |>\nThank you for your answer. I tried your solution\
    \ and it works perfectly. Thank you for your help.\n<|/ c |>\n<| c |>\nYou're\
    \ welcome. Feel free to accept the answer if it solved your problem.\n<|/ c |>\n\
    <| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long apples,\
    \ oranges, mangos = 0;\n    long apples_count, oranges_count, mangos_count = 0;\n\
    \    \n    foreach(char c in s)\n    {\n        switch(c)\n        {\n       \
    \     case 'a':\n                apples++;\n                apples_count++;\n\
    \                break;\n            case 'o':\n                oranges++;\n \
    \               oranges_count++;\n                break;\n            case 'm':\n\
    \                mangos++;\n                mangos_count++;\n                break;\n\
    \        }\n    }\n    \n    return mangos - apples_count - oranges_count;\n}",
  "{\n    long apples, oranges, mango;\n    \n    apples = std.string.toLong(s.split(\"\
    \ \")[0]);\n    oranges = std.string.toLong(s.split(\" \")[1]);\n    mango = apples\
    \ + oranges;\n    \n    return mango - n;\n}\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a\
    \ tags=string,c++,algorithm |>\nThis can be solved using recursion.\n<code>\n\
    long fruit_distribution(string s, long n)\n{\n    long apples = 0, oranges = 0,\
    \ mango = 0;\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i]\
    \ == 'a')\n            apples++;\n        else if(s[i] == 'o')\n            oranges++;\n\
    \        else\n            mango++;\n    }\n    \n    return mango - n;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,c++,algorithm |>\n<code>\nlong fruit_distribution(string\
    \ s, long n) \n{\n    long apples = 0, oranges = 0, mango = 0;\n    \n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(s[i] == 'a')\n            apples++;\n\
    \        else if(s[i] == 'o')\n            oranges++;\n        else\n        \
    \    mango++;\n    }\n    \n    return mango - n;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nlong fruit_distribution(string s, long n) \n{\n\
    \    long apples = 0, oranges = 0, mango = 0;\n    \n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(s[i] == 'a')\n            apples++;\n        else if(s[i]\
    \ == 'o')\n            oranges++;\n        else\n            mango++;\n    }\n\
    \    \n    return mango - n;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n\
    <| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    long apples = 0, oranges = 0, mangos = 0;\n   \
    \ \n    foreach(char c in s)\n    {\n        switch(c)\n        {\n          \
    \  case 'a':\n                apples++;\n                break;\n            case\
    \ 'o':\n                oranges++;\n                break;\n            case 'm':\n\
    \                mangos++;\n                break;\n            default:\n   \
    \             throw runtime_error(\"Invalid input\");\n        }\n    }\n    \n\
    \    return mangos + oranges - apples;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thank you very much for your help!\n<|/ c |>\n<| c |>\nYou're welcome. Feel free\
    \ to accept the answer if it helped you.\n<|/ c |>\n<| c |>\nI did it but my reputation\
    \ is too low to accept it :(\n<|/ c |>\n<| c |>\nOh okay, no worries. Glad I could\
    \ help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long apples,\
    \ oranges, mango;\n    \n    apples = std.parseLong(s.substr(0, s.find_first_of(\"\
    apples and \")));\n    oranges = std.parseLong(s.substr(s.find_first_of(\"apples\
    \ and \") + 6, s.find_first_of(\"oranges and \")));\n    mango = std.parseLong(s.substr(s.find_first_of(\"\
    oranges and \") + 6, s.find_first_of(\"mango fruits\")));\n    \n    return mango\
    \ - apples - oranges;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you very\
    \ much for your help! I really appreciate it!\n<|/ c |>\n<| c |>\nYou're welcome.\
    \ I'm glad I could help. If this answer solved your problem, please consider accepting\
    \ it by clicking the checkmark next to it.\n<|/ c |>\n<| c |>\nI did but since\
    \ I'm new it says I have to wait 5 minutes before I can accept it\n<|/ c |>\n\
    <| c |>\nNo worries. Thanks for accepting my answer. :)\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Scanner;", "{\n    long apples, oranges, mango;\n\
    \    \n    apples = std.atoi(string.replaceAll(\"apples\", \"L\"));\n    oranges\
    \ = std.atoi(string.replaceAll(\"oranges\", \"L\"));\n    mango = std.atoi(string.replaceAll(\"\
    mango\", \"L\"));\n    \n    long apples_total = apples + oranges;\n    long oranges_total\
    \ = apples - mango;\n    long mango_total = oranges - apples;\n    \n    long\
    \ apples_count = apples_total / n;\n    long oranges_count = oranges_total / n;\n\
    \    long mango_count = mango_total / n;\n    \n    return mango_count;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work. Try it with `fruit_distribution(\"\
    5 apples and 6 oranges\", 19L)`.\n<|/ c |>\n<| c |>\nIt does work. Try it with\
    \ `fruit_distribution(\"5 apples and 6 oranges\", 19L)`.\n<|/ c |>\n<| c |>\n\
    It doesn't work. Try it with `fruit_distribution(\"5 apples and 6 oranges\", 19L)`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19L)`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `fruit_distribution(\"\
    5 apples and 6 oranges\", 19L)`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include\
    \ <numeric>\n#include <cmath>\n#include <cstdlib>\nusing namespace std;", "{\n\
    \    long apples = 0, oranges = 0, mangos = 0;\n    long total = 0;\n    \n  \
    \  foreach(char c in s)\n    {\n        if(c == 'a' || c == 'A')\n           \
    \ apples++;\n        else if(c == 'o' || c == 'O')\n            oranges++;\n \
    \       else if(c == 'm' || c == 'M')\n            mangos++;\n        else\n \
    \           total += 1;\n    }\n    \n    apples /= total;\n    oranges /= total;\n\
    \    mangos /= total;\n    \n    return mangos * n;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nI like your solution, however I believe that `mangos * n` should\
    \ be `mangos * apples * oranges`. Otherwise you get `mangos` apples and `oranges`\
    \ oranges.\n<|/ c |>\n<| c |>\nYou are right, I missed that. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a tags=c++,algorithm |>\nI believe that you can solve\
    \ this problem with just one loop. \n<code>\nlong fruit_distribution(string s,\
    \ long n) \n{\n    long apples = 0, oranges = 0, mangos = 0;\n    long total =\
    \ 0;\n    long apples_oranges = 0;\n    long oranges_apples = 0;\n    long mangos_apples\
    \ = 0;\n    long mangos_oranges = 0;\n    long apples_mangos = 0;\n    long oranges_mangos\
    \ = 0;\n    long apples_oranges_mangos = 0;\n    long oranges_apples_mangos =\
    \ 0;\n    long apples_oranges_apples = 0;\n    long oranges_apples_oranges = 0;\n\
    \    long apples_oranges_apples_mangos = 0;\n    long oranges_apples_oranges_mangos\
    \ = 0;\n    long apples_oranges_apples_oranges = 0;\n    long apples_oranges_apples_oranges_mangos\
    \ = 0;\n    long apples_oranges_apples_oranges_apples = 0;\n    long apples_oranges_apples_oranges_apples_mangos\
    \ = 0;\n    long apples_oranges_apples_oranges_apples_oranges = 0;\n    long apples_oranges_apples_oranges_apples_oranges_mangos\
    \ = 0;\n    long apples_oranges_apples_oranges_apples_oranges_apples = 0;\n  \
    \  long apples_oranges_apples_oranges_apples_oranges_apples_mangos = 0;\n    long\
    \ apples_oranges_apples_oranges_apples_oranges_apples_oranges_mangos = 0;\n"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
