name: HumanEval_90_next_smallest
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
  \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
  \ element of the array.\n    Return null if there is no such element.\n    >>> next_smallest([1L,\
  \ 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L, 4L, 3L, 2L])\n    2L\n\
  \    >>> next_smallest([])\n    None\n    >>> next_smallest([1L, 1L])\n    None\n\
  \    \n*/\nNullable!(long) next_smallest(long[] lst) \n"
tests: "unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
  \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
  \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n    \
  \    assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result =\
  \ candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result =\
  \ candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
  \ = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get\
  \ == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
  }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
  \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
completions: ["{\n    int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n\
    \    int: n;\n    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n\
    \    int: t;\n    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n\
    \    int: z;\n    int: aa;\n    int: ab;\n    int: ac;\n    int: ad;\n    int:\
    \ ae;\n    int: af;\n    int: ag;\n    int: ah;\n    int: ai;\n    int: aj;\n\
    \    int: ak;\n    int: al;\n    int: am;\n    int: an;\n    int: ao;\n    int:\
    \ ap;\n    int: aq;\n    int: ar;\n    int: as;\n    int: at;\n    int: au;\n\
    \    int: av;\n    int: aw;\n    int: ax;\n    int: ay;\n    int: az;\n    int:\
    \ ba;\n    int: bb;\n    int: bc;\n    int: bd;\n    int: be;\n    int: bf;\n\
    \    int: bg;\n    int: bh;\n    int: bi;\n    int: bj;\n    int: bk;\n    int:\
    \ bl;\n    int: bm;\n    int: bn;\n    int: bo;\n    int: bp;\n    int: bq;\n\
    \    int: br;\n    int: bs;\n    int: bt;\n    int: bu;\n    int: bv;\n    int:\
    \ bw;\n    int: bx;\n    int: by;\n    int: bz;\n    int: ca;\n    int: cb;\n\
    \    int: cc;\n    int: cd;\n    int: ce;\n    int: cf;\n    int: cg;\n    int:\
    \ ch;\n    int: ci;\n    int: cj;\n    int: ck;\n    int: cl;\n    int: cm;\n\
    \    int: cn;\n    int: co;\n    int: cp;\n    int: cq;", "{\n    int[] arr =\
    \ toArray(lst);\n    int n = arr.length;\n    if (n < 2)\n        return null;\n\
    \    int min1 = arr[0];\n    int min2 = arr[1];\n    for (int i = 2; i < n; i++)\n\
    \    {\n        if (arr[i] < min1)\n        {\n            min2 = min1;\n    \
    \        min1 = arr[i];\n        }\n        else if (arr[i] < min2)\n        {\n\
    \            min2 = arr[i];\n        }\n    }\n    return min2;\n}", "{\n    var\
    \ smallest = lst[0];\n    var smallest_index = 0;\n    var smallest_value = lst[0];\n\
    \    \n    for (var i = 1; i < lst.size(); i++) {\n        if (lst[i] < smallest)\
    \ {\n            smallest = lst[i];\n            smallest_index = i;\n       \
    \     smallest_value = lst[i];\n        }\n    }\n    \n    if (smallest_index\
    \ == lst.size() - 1) {\n        return null;\n    }\n    \n    return smallest;\n\
    }", "{\n    long? smallest = lst[0];\n    long? smallest_next = lst[1];\n    \n\
    \    for (int i = 2; i < lst.lenght; i++) {\n        if (smallest_next < lst[i])\
    \ {\n            smallest_next = lst[i];\n            smallest = smallest_next;\n\
    \        }\n    }\n    return smallest;\n}\n/*", "{\n    var smallest = lst[0];\n\
    \    var smallest_index = 0;\n    for(var i = 1; i < lst.lenght; i++)\n    {\n\
    \        if(smallest>lst[i])\n        {\n            smallest = lst[i];\n    \
    \        smallest_index = i;\n        }\n    }\n    return smallest_index>0?lst[smallest_index]:null;\n\
    }\n/*", "{\n    int[] arr = toArray(lst);\n    int len = arr.length;\n    int\
    \ min = 0;\n    int max = len - 1;\n    int mid = 0;\n    while(min < max) {\n\
    \        mid = (min + max) / 2;\n        if(arr[mid] < arr[min]) {\n         \
    \   min = mid + 1;\n        } else if(arr[mid] > arr[max]) {\n            max\
    \ = mid - 1;\n        } else {\n            return arr[mid];\n        }\n    }\n\
    \    return null;\n}", "{\n    int: i;\n    int: j;\n    int: k;\n    int: l;\n\
    \    int: m;\n    int: n;\n    int: o;\n    int: p;\n    int: q;\n    int: r;\n\
    \    int: s;\n    int: t;\n    int: u;\n    int: v;\n    int: w;\n    int: x;\n\
    \    int: y;\n    int: z;\n    int: A;\n    int: B;\n    int: C;\n    int: D;\n\
    \    int: E;\n    int: F;\n    int: G;\n    int: H;\n    int: I;\n    int: J;\n\
    \    int: K;\n    int: L;\n    int: M;\n    int: N;\n    int: O;\n    int: P;\n\
    \    int: Q;\n    int: R;\n    int: S;\n    int: T;\n    int: U;\n    int: V;\n\
    \    int: W;\n    int: X;\n    int: Y;\n    int: Z;\n    int: a1;\n    int: a2;\n\
    \    int: a3;\n    int: a4;\n    int: a5;\n    int: a6;\n    int: a7;\n    int:\
    \ a8;\n    int: a9;\n    int: a10;\n    int: a11;\n    int: a12;\n    int: a13;\n\
    \    int: a14;\n    int: a15;\n    int: a16;\n    int: a17;\n    int: a18;\n \
    \   int: a19;\n    int: a20;\n    int: a21;\n    int: a22;\n    int: a23;\n  \
    \  int: a24;\n    int: a25;\n    int: a26;\n    int: a27;\n    int: a28;\n   \
    \ int: a29;\n    int: a30;\n    int: a31;\n    int: a32;\n    int: a33;\n    int:\
    \ a34;\n    int: a35;\n    int: a36;\n    int: a37;\n    int: a38;\n    int: a39;\n\
    \    int: a40;\n    int: a41;\n    int", "{\n    if (lst.length == 0)\n      \
    \  return null;\n    var min: long = lst[0];\n    var min_index = 0;\n    for\
    \ (var i = 1; i < lst.length; ++i)\n    {\n        if (lst[i] < min)\n       \
    \ {\n            min = lst[i];\n            min_index = i;\n        }\n    }\n\
    \    return lst[min_index + 1];\n}", "{\n    long smallest = lst[0];\n    long\
    \ secondSmallest = lst[1];\n    \n    for(long i = 2; i < lst.size(); ++i)\n \
    \   {\n        if(lst[i] < smallest)\n        {\n            secondSmallest =\
    \ smallest;\n            smallest = lst[i];\n        }\n        else\n       \
    \ {\n            if(lst[i] < secondSmallest)\n            {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n    }\n    return secondSmallest;\n}\n\
    /*", "{\n    int[] arr = toArray(lst);\n    int[] sorted = toArray(sort(arr));\n\
    \    int index = sorted.length - 1;\n    while (index >= 0 && sorted[index] ==\
    \ arr[index]) {\n        index--;\n    }\n    if (index < 0) {\n        return\
    \ null;\n    }\n    return sorted[index + 1];\n}", "{\n    int[] arr = toArray(lst);\n\
    \    if (arr.length == 0)\n        return null;\n    long min1 = arr[0];\n   \
    \ long min2 = arr[0];\n    for (int i = 1; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] < min1)\n        {\n            min2 = min1;\n            min1\
    \ = arr[i];\n        }\n        else if (arr[i] < min2)\n        {\n         \
    \   min2 = arr[i];\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length\
    \ == 0)\n        return null;\n    \n    long smallest = lst[0];\n    long second\
    \ = lst[1];\n    \n    for (int i = 2; i < lst.length; ++i)\n    {\n        if\
    \ (lst[i] < smallest)\n        {\n            smallest = lst[i];\n        }\n\
    \        else if (lst[i] > smallest && lst[i] < second)\n        {\n         \
    \   second = lst[i];\n        }\n    }\n    \n    return second;\n}", "{\n   \
    \ int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n \
    \   int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: A;\n    int: B;\n    int: C;\n    int: D;\n    int: E;\n    int: F;\n\
    \    int: G;\n    int: H;\n    int: I;\n    int: J;\n    int: K;\n    int: L;\n\
    \    int: M;\n    int: N;\n    int: O;\n    int: P;\n    int: Q;\n    int: R;\n\
    \    int: S;\n    int: T;\n    int: U;\n    int: V;\n    int: W;\n    int: X;\n\
    \    int: Y;\n    int: Z;\n    int: a1;\n    int: a2;\n    int: a3;\n    int:\
    \ a4;\n    int: a5;\n    int: a6;\n    int: a7;\n    int: a8;\n    int: a9;\n\
    \    int: a10;\n    int: a11;\n    int: a12;\n    int: a13;\n    int: a14;\n \
    \   int: a15;\n    int: a16;\n    int: a17;\n    int: a18;\n    int: a19;\n  \
    \  int: a20;\n    int: a21;\n    int: a22;\n    int: a23;\n    int: a24;\n   \
    \ int: a25;\n    int: a26;\n    int: a27;\n    int: a28;\n    int: a29;\n    int:\
    \ a30;\n    int: a31;\n    int: a32;\n    int: a33;\n    int: a34;\n    int: a35;\n\
    \    int: a36;\n    int: a37;\n    int: a38;\n    int: a39;\n    int: a40;\n \
    \   int: a41;\n    int", "{\n    var smallest = lst[0];\n    var smallest_index\
    \ = -1;\n    var i;\n    for (i = 1; i < lst.Length; i++) {\n        if (lst[i]\
    \ < smallest) {\n            smallest = lst[i];\n            smallest_index =\
    \ i;\n        }\n    }\n    if (smallest_index != -1) {\n        return smallest;\n\
    \    }\n    return null;\n}\n/*", "{\n    int: i;\n    int: j;\n    int: k;\n\
    \    int: l;\n    \n    for(i = 0, j = 1, k = 0, l = lst.length; i < l; i++, j++,\
    \ k++){\n        if(lst[i] < lst[j]){\n            k = j;\n        }\n    }\n\
    \    return lst[k];\n}", "{\n    var smallest:long;\n    var i:int;\n    var j:int;\n\
    \    var k:int;\n    \n    smallest = lst[0];\n    i = 1;\n    \n    while (i\
    \ < lst.len) {\n        smallest = lst[i];\n        \n        for (j = i; j <\
    \ lst.len; j++) {\n            if (lst[j] < smallest) {\n                smallest\
    \ = lst[j];\n                k = j;\n            }\n        }\n        \n    \
    \    if (smallest != lst[k]) {\n            lst[k] = smallest;\n        }\n  \
    \      \n        i++;\n    }\n    \n    return smallest;\n}", "{\n    int[] arr\
    \ = lst.asArray!int[];\n    \n    int min = 0;\n    int max = arr.length - 1;\n\
    \    \n    while (min < max) {\n        int mid = min + ((max - min) >> 1);\n\
    \        \n        if (arr[mid] < arr[min])\n            min = mid + 1;\n    \
    \    else if (arr[mid] < arr[max])\n            max = mid - 1;\n        else\n\
    \            return arr[mid];\n    }\n    \n    return null;\n}", "{\n    int[]\
    \ arr = new int[lst.length];\n    for(int i = 0; i < lst.length; ++i)\n      \
    \  arr[i] = lst[i];\n    \n    int min = arr[0];\n    int minIndex = 0;\n    for(int\
    \ i = 1; i < arr.length; ++i)\n    {\n        if(arr[i] < min)\n        {\n  \
    \          min = arr[i];\n            minIndex = i;\n        }\n    }\n    \n\
    \    if(minIndex == arr.length - 1)\n        return null;\n    else\n        return\
    \ arr[minIndex + 1];\n}", "{\n    int: i, j, k;\n    \n    for(i=0, j=lst.len()-1;\
    \ i<j; i++, j--)\n    {\n        k = lst[i];\n        if(k < lst[j])\n       \
    \ {\n            lst[i] = lst[j];\n            lst[j] = k;\n        }\n    }\n\
    \    return lst[j];\n}", "{\n    int[] arr = lst;\n    int len = arr.length;\n\
    \    if (len == 0)\n        return null;\n    int min = 0;\n    int max = len\
    \ - 1;\n    while (min < max) {\n        int mid = min + ((max - min) / 2);\n\
    \        if (arr[mid] > arr[min])\n            max = mid - 1;\n        else\n\
    \            min = mid + 1;\n    }\n    return arr[min];\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
