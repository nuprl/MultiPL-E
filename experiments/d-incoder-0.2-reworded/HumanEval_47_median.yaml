name: HumanEval_47_median
language: d
prompt: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
  \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
  \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n"
tests: "unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
  \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) ==\
  \ 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
  \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
completions: ["{\n    long mid = l.length / 2;\n    float median;\n    if (l.length\
    \ % 2 == 0)\n    {\n        median = (l[mid] + l[mid-1]) / 2;\n    }\n    else\n\
    \    {\n        median = l[mid];\n    }\n    return median;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n    long mid = l.length / 2;\n    float median;\n    if (l.length\
    \ % 2 == 0)\n    {\n        median = (l[mid] + l[mid-1]) / 2;\n    }\n    else\n\
    \    {\n        median = l[mid];\n    }\n    return median;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n    long mid = l.length / 2;\n    float median;\n    if (l.length\
    \ % 2 == 0)\n    {\n        median = (l[mid] + l[mid-1]) / 2;\n    }\n    else\n\
    \    {\n        median = l[mid];\n    }\n    return median;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double\
    \ l[]) \n{\n    long mid = l.length / 2;\n    float median;\n    if (l.length\
    \ % 2 == 0)\n    {\n        median = (l[mid] + l[mid-1]) / 2;\n    }\n    else\n\
    \    {\n        median = l[mid];\n    }\n    return median;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ long l[]) \n{\n    long mid = l.length / 2;\n    float median;\n    if (l.length ",
  "{\n    int n = l.length;\n    if (n < 1) \n        throw new IllegalArgumentException(\"\
    List must have at least one element\");\n    float m = l[0];\n    for (int i =\
    \ 1; i < n; i++) \n    {\n        if (l[i] < m) \n            m = l[i];\n    }\n\
    \    return m;\n}", "{\n    float m = l[0];\n    for (int i = 1; i < l.length;\
    \ ++i)\n    {\n        if (l[i] < m)\n        {\n            m = l[i];\n     \
    \   }\n    }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    float m = l[0];\n\
    \    for (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < m)\n      \
    \  {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n    float m = l[0];\n    for (int i = 1; i < l.length; ++i)\n    {\n\
    \        if (l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    float m = l[0];\n    for\
    \ (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < m)\n        {\n  \
    \          m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of\
    \ elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n   \
    \ >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ long l[]) \n{\n    float m = l[0];\n    for (int i = 1; i < l.length; ++i)\n\
    \    {\n        if (l[i] < m)\n        {\n            m = l[i];\n        }\n \
    \   }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(ulong l[]) \n", "{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1)\n        return std.math.mid(l, mid);\n   \
    \ else \n        return std.math.mid(l, mid, l.length);\n}", "{\n    long mid\
    \ = l.length / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length;\
    \ i++)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n      \
    \  }\n    }\n    return m;\n}", "{\n\tlong mid = l.length / 2;\n\tfloat m = (float)l[mid];\n\
    \tfor (int i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < m) \n\t\t{\n\t\t\t\
    m = l[i];\n\t\t}\n\t}\n\treturn m;\n}", "{\n\tfloat m = (float)l.length/2;\n\t\
    float temp;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] < m[temp])\n\
    \t\t{\n\t\t\ttemp = i;\n\t\t}\n\t}\n\treturn l[temp];\n}", "{\n    long mid =\
    \ l.length / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l,\
    \ mid);\n    }\n    else \n    {\n        return std.math.mid(l, mid, l.length);\n\
    \    }\n}", "{\n    float m = l[0];\n    for(int i = 1; i < l.length; i++) \n\
    \    {\n        if(l[i] < m) \n        {\n            m = l[i];\n        }\n \
    \   }\n    return m;\n}", "{\n    long mid = l.length / 2;\n    if (l.length %\
    \ 2 == 0)\n        return std.math.toFloat(l[mid]);\n    else \n        return\
    \ std.math.toFloat(l[mid]) + std.math.toFloat(l[mid+1]);\n}", "{\n    long mid\
    \ = l.length / 2;\n    if (l.length % 2 == 1) \n        return std.math.mid(l,\
    \ mid);\n    else \n        return std.math.mid(l, mid + 1, l.length - mid);\n\
    }", "{\n    long l = length(l);\n    if (l % 2 == 0) \n        return std.math::mid(l,\
    \ l / 2);\n    else \n        return std.math::mid(l / 2, l);\n}", "{\n    long\
    \ i, mid;\n    float m = 0;\n    \n    mid = l.length / 2;\n    \n    for (i =\
    \ 0; i < mid; i++)\n    {\n        if (l[i] < l[mid])\n        {\n           \
    \ m = l[i];\n        }\n    }\n    \n    for (i = mid; i < l.length; i++)\n  \
    \  {\n        if (l[i] < m)\n        {\n            m = l[i];\n        }\n   \
    \ }\n    \n    return m;\n}", "{\n    long mid = l.length / 2;\n    float m =\
    \ l[mid];\n    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n    float m4 =\
    \ l[mid-3];\n    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n    float m7\
    \ = l[mid-6];\n    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n    float m10\
    \ = l[mid-9];\n    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n    float\
    \ m13 = l[mid-12];\n    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n \
    \   float m16 = l[mid-15];\n    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n\
    \    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n\
    \    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n\
    \    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n\
    \    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n\
    \    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n\
    \    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n\
    \    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n\
    \    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n\
    \    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n\
    \    ", "{\n    long l = length(l);\n    if (l % 2 == 0)\n    {\n        return\
    \ std.math::mid(l, l / 2);\n    }\n    else\n    {\n        long mid = l / 2;\n\
    \        long a = l[mid];\n        long b = l[mid-1];\n        return std.math::mid(std.math::min(a,\
    \ b), std.math::max(a, b));\n    }\n}", "{\n    long mid = l.length / 2;\n   \
    \ if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n    }\n\
    \    else \n    {\n        return std.math.mid(l, mid - 1, mid);\n    }\n}", "{\n\
    \    long i, mid;\n    float med;\n    \n    med = l[0];\n    \n    for (i = 1;\
    \ i < l.length; ++i)\n    {\n        if (l[i] < med)\n        {\n            med\
    \ = l[i];\n        }\n    }\n    \n    mid = l.length / 2;\n    \n    if (l.length\
    \ % 2 == 0)\n    {\n        if (l[mid] < med)\n        {\n            return l[mid];\n\
    \        }\n        else\n        {\n            return l[mid-1];\n        }\n\
    \    }\n    else\n    {\n        if (l[mid] < med)\n        {\n            return\
    \ l[mid];\n        }\n        else\n        {\n            return l[mid+1];\n\
    \        }\n    }\n}", "{\n    long n = l.length;\n    if (n < 2) return 0;\n\
    \    float m = l[0];\n    for (int i = 1; i < n; i++) {\n        if (l[i] < m)\
    \ m = l[i];\n    }\n    return m;\n}", "{\n    long mid = l.length / 2;\n    float\
    \ a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n    float d =\
    \ (a + b + c + d) / 4;\n    return d;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    long mid = l.length / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n\
    \    float c = l[mid+1];\n    float d = (a + b + c + d) / 4;\n    return d;\n\
    }\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L,\
    \ 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(float l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n    float d =\
    \ (a + b + c + d) / 4;\n    return d;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    long mid = l.length / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n\
    \    float c = l[mid+1];\n    float d = (a + b + c + d) / 4;\n    return d;\n\
    }\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L,\
    \ 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(char l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n    float d =\
    \ (a + b + c + d) / 4;", "{\n    float m = l[0];\n    float n = l[0];\n    for(int\
    \ i = 1; i < l.length; i++)\n    {\n        if(l[i] < m)\n        {\n        \
    \    m = l[i];\n        }\n        if(l[i] > n)\n        {\n            n = l[i];\n\
    \        }\n    }\n    return (n + m) / 2;\n}\n/*\nReturn median of elements in\
    \ the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    float m = l[0];\n    float n = l[0];\n    for(int i = 1; i < l.length; i++)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \      if(l[i] > n)\n        {\n            n = l[i];\n        }\n    }\n    return\
    \ (n + m) / 2;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\ndouble median(double l[]) \n{\n    double m = l[0];\n   \
    \ double n = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ < m)\n        {\n            m = l[i];\n        }\n        if(l[i] > n)\n  \
    \      {\n            n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nlong median(long l[]) \n{\n    long m = l[0];\n    long n = l[0];\n \
    \   for(int i = 1; i < l.length; i++)\n    {\n        if(l[i] < m)\n        {\n\
    \            m = l[i];\n        }\n        if(l[i] > n)\n        {\n         \
    \   n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\ndouble median(double\
    \ l[]) \n{\n    double "]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
