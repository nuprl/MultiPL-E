name: HumanEval_47_median
language: d
prompt: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
  \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
  \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n"
tests: "unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
  \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) ==\
  \ 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
  \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
completions: ["{\n    long mid = l.length / 2;\n    float median;\n    if (l.length\
    \ % 2 == 0)\n    {\n        median = (l[mid] + l[mid-1]) / 2;\n    }\n    else\n\
    \    {\n        median = l[mid];\n    }\n    return median;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n    long mid = l.length / 2;\n    float median;\n    if (l.length\
    \ % 2 == 0)\n    {\n        median = (l[mid] + l[mid-1]) / 2;\n    }\n    else\n\
    \    {\n        median = l[mid];\n    }\n    return median;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n    long mid = l.length / 2;\n    float median;\n    if (l.length\
    \ % 2 == 0)\n    {\n        median = (l[mid] + l[mid-1]) / 2;\n    }\n    else\n\
    \    {\n        median = l[mid];\n    }\n    return median;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double\
    \ l[]) \n{\n    long mid = l.length / 2;\n    float median;\n    if (l.length\
    \ % 2 == 0)\n    {\n        median = (l[mid] + l[mid-1]) / 2;\n    }\n    else\n\
    \    {\n        median = l[mid];\n    }\n    return median;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ long l[]) \n{\n    long mid = l.length / 2;\n    float median;\n    if (l.length ",
  "{\n    int n = l.length;\n    if (n < 1) \n        throw new IllegalArgumentException(\"\
    List must have at least one element\");\n    float m = l[0];\n    for (int i =\
    \ 1; i < n; i++) \n    {\n        if (l[i] < m) \n            m = l[i];\n    }\n\
    \    return m;\n}", "{\n    float m = l[0];\n    for (int i = 1; i < l.length;\
    \ ++i)\n    {\n        if (l[i] < m)\n        {\n            m = l[i];\n     \
    \   }\n    }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    float m = l[0];\n\
    \    for (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < m)\n      \
    \  {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n    float m = l[0];\n    for (int i = 1; i < l.length; ++i)\n    {\n\
    \        if (l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    float m = l[0];\n    for\
    \ (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < m)\n        {\n  \
    \          m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of\
    \ elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n   \
    \ >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ long l[]) \n{\n    float m = l[0];\n    for (int i = 1; i < l.length; ++i)\n\
    \    {\n        if (l[i] < m)\n        {\n            m = l[i];\n        }\n \
    \   }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(ulong l[]) \n", "{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1)\n        return std.math.mid(l, mid);\n   \
    \ else \n        return std.math.mid(l, mid, l.length);\n}", "{\n    long mid\
    \ = l.length / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length;\
    \ i++)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n      \
    \  }\n    }\n    return m;\n}", "{\n\tlong mid = l.length / 2;\n\tfloat m = (float)l[mid];\n\
    \tfor (int i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < m) \n\t\t{\n\t\t\t\
    m = l[i];\n\t\t}\n\t}\n\treturn m;\n}", "{\n\tfloat m = (float)l.length/2;\n\t\
    float temp;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] < m[temp])\n\
    \t\t{\n\t\t\ttemp = i;\n\t\t}\n\t}\n\treturn l[temp];\n}", "{\n    long mid =\
    \ l.length / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l,\
    \ mid);\n    }\n    else \n    {\n        return std.math.mid(l, mid, l.length);\n\
    \    }\n}", "{\n    float m = l[0];\n    for(int i = 1; i < l.length; i++) \n\
    \    {\n        if(l[i] < m) \n        {\n            m = l[i];\n        }\n \
    \   }\n    return m;\n}", "{\n    long mid = l.length / 2;\n    if (l.length %\
    \ 2 == 0)\n        return std.math.toFloat(l[mid]);\n    else \n        return\
    \ std.math.toFloat(l[mid]) + std.math.toFloat(l[mid+1]);\n}", "{\n    long mid\
    \ = l.length / 2;\n    if (l.length % 2 == 1) \n        return std.math.mid(l,\
    \ mid);\n    else \n        return std.math.mid(l, mid + 1, l.length - mid);\n\
    }", "{\n    long l = length(l);\n    if (l % 2 == 0) \n        return std.math::mid(l,\
    \ l / 2);\n    else \n        return std.math::mid(l / 2, l);\n}", "{\n    long\
    \ i, mid;\n    float m = 0;\n    \n    mid = l.length / 2;\n    \n    for (i =\
    \ 0; i < mid; i++)\n    {\n        if (l[i] < l[mid])\n        {\n           \
    \ m = l[i];\n        }\n    }\n    \n    for (i = mid; i < l.length; i++)\n  \
    \  {\n        if (l[i] < m)\n        {\n            m = l[i];\n        }\n   \
    \ }\n    \n    return m;\n}", "{\n    long mid = l.length / 2;\n    float m =\
    \ l[mid];\n    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n    float m4 =\
    \ l[mid-3];\n    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n    float m7\
    \ = l[mid-6];\n    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n    float m10\
    \ = l[mid-9];\n    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n    float\
    \ m13 = l[mid-12];\n    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n \
    \   float m16 = l[mid-15];\n    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n\
    \    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n\
    \    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n\
    \    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n\
    \    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n\
    \    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n\
    \    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n\
    \    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n\
    \    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n\
    \    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n\
    \    ", "{\n    long l = length(l);\n    if (l % 2 == 0)\n    {\n        return\
    \ std.math::mid(l, l / 2);\n    }\n    else\n    {\n        long mid = l / 2;\n\
    \        long a = l[mid];\n        long b = l[mid-1];\n        return std.math::mid(std.math::min(a,\
    \ b), std.math::max(a, b));\n    }\n}", "{\n    long mid = l.length / 2;\n   \
    \ if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n    }\n\
    \    else \n    {\n        return std.math.mid(l, mid - 1, mid);\n    }\n}", "{\n\
    \    long i, mid;\n    float med;\n    \n    med = l[0];\n    \n    for (i = 1;\
    \ i < l.length; ++i)\n    {\n        if (l[i] < med)\n        {\n            med\
    \ = l[i];\n        }\n    }\n    \n    mid = l.length / 2;\n    \n    if (l.length\
    \ % 2 == 0)\n    {\n        if (l[mid] < med)\n        {\n            return l[mid];\n\
    \        }\n        else\n        {\n            return l[mid-1];\n        }\n\
    \    }\n    else\n    {\n        if (l[mid] < med)\n        {\n            return\
    \ l[mid];\n        }\n        else\n        {\n            return l[mid+1];\n\
    \        }\n    }\n}", "{\n    long n = l.length;\n    if (n < 2) return 0;\n\
    \    float m = l[0];\n    for (int i = 1; i < n; i++) {\n        if (l[i] < m)\
    \ m = l[i];\n    }\n    return m;\n}", "{\n    long mid = l.length / 2;\n    float\
    \ a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n    float d =\
    \ (a + b + c + d) / 4;\n    return d;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    long mid = l.length / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n\
    \    float c = l[mid+1];\n    float d = (a + b + c + d) / 4;\n    return d;\n\
    }\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L,\
    \ 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(float l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n    float d =\
    \ (a + b + c + d) / 4;\n    return d;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    long mid = l.length / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n\
    \    float c = l[mid+1];\n    float d = (a + b + c + d) / 4;\n    return d;\n\
    }\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L,\
    \ 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(char l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n    float d =\
    \ (a + b + c + d) / 4;", "{\n    float m = l[0];\n    float n = l[0];\n    for(int\
    \ i = 1; i < l.length; i++)\n    {\n        if(l[i] < m)\n        {\n        \
    \    m = l[i];\n        }\n        if(l[i] > n)\n        {\n            n = l[i];\n\
    \        }\n    }\n    return (n + m) / 2;\n}\n/*\nReturn median of elements in\
    \ the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    float m = l[0];\n    float n = l[0];\n    for(int i = 1; i < l.length; i++)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \      if(l[i] > n)\n        {\n            n = l[i];\n        }\n    }\n    return\
    \ (n + m) / 2;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\ndouble median(double l[]) \n{\n    double m = l[0];\n   \
    \ double n = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ < m)\n        {\n            m = l[i];\n        }\n        if(l[i] > n)\n  \
    \      {\n            n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nlong median(long l[]) \n{\n    long m = l[0];\n    long n = l[0];\n \
    \   for(int i = 1; i < l.length; i++)\n    {\n        if(l[i] < m)\n        {\n\
    \            m = l[i];\n        }\n        if(l[i] > n)\n        {\n         \
    \   n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\ndouble median(double\
    \ l[]) \n{\n    double ", "{\n    long mid = l.length / 2;\n    float midVal =\
    \ l[mid];\n    float leftMedian = median(l, 0, mid);\n    float rightMedian =\
    \ median(l, mid+1, l.length);\n    return (midVal + rightMedian) / 2.0f;\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(long[] l, int start, int end) \n{\n    float leftMedian\
    \ = median(l, start, start+end-1);\n    float rightMedian = median(l, start+1,\
    \ end);\n    return (l[start] + rightMedian) / 2.0f;\n}\n/*\nReturn median of\
    \ elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n   \
    \ >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end) \n{\n    float leftMedian = median(l, start, start+end-1);\n\
    \    float rightMedian = median(l, start+1, end);\n    return (l[start] + rightMedian)\
    \ / 2.0f;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long[] l, int start, int end) \n{\n    float\
    \ leftMedian = median(l, start, start+end-1);\n    float rightMedian = median(l,\
    \ start+1, end);\n    return (l[start] + rightMedian) / 2.0f;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end) \n{\n    float leftMedian = median(l, start, start+end-1);\n\
    \    float rightMedian = median(l, start+1, end);\n    return (l[start] + rightMedian)\
    \ / 2.0f;\n}\n/*\nReturn median of elements in the array l.\n    >>> ", "{\n \
    \   long i, mid;\n    float sum;\n    \n    sum = 0;\n    mid = l.length / 2;\n\
    \    \n    for (i = 0; i < mid; i++)\n        sum += l[i];\n    \n    return sum\
    \ / mid;\n}", "{\n\tfloat med = 0.0;\n\t\n\tfor (int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tmed = (med + l[i]) / 2;\n\t}\n\t\n\treturn med;\n}", "{\n    long\
    \ mid = l.length / 2;\n    float m1 = l[mid];\n    float m2 = l[mid-1];\n    float\
    \ m3 = l[mid-2];\n    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float\
    \ m6 = l[mid-5];\n    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float\
    \ m9 = l[mid-8];\n    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float\
    \ m12 = l[mid-11];\n    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n \
    \   float m15 = l[mid-14];\n    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n\
    \    float m18 = l[mid-17];\n    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n\
    \    float m21 = l[mid-20];\n    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n\
    \    float m24 = l[mid-23];\n    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n\
    \    float m27 = l[mid-26];\n    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n\
    \    float m30 = l[mid-29];\n    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n\
    \    float m33 = l[mid-32];\n    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n\
    \    float m36 = l[mid-35];\n    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n\
    \    float m39 = l[mid-38];\n    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n\
    \    float m42 = l[mid-41];\n    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n\
    \    float m45 = l[mid-44];\n", "{\n    long mid = l.length / 2;\n    if (l.length\
    \ % 2 == 0) \n        return std.math.mid(l, mid);\n    else \n        return\
    \ std.math.mid(l, mid + 1, l.length - mid);\n}", "{\n    int n = l.length;\n \
    \   if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; ++i) {\n        if (l[i] < m) m = l[i];\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    int n = l.length;\n   \
    \ if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of\
    \ elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n   \
    \ >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; ++i) {\n        if (l[i] < m) m = l[i];\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of\
    \ elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n   \
    \ >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0", "{\n\tlong n = l.length;\n\
    \tif (n < 1) return 0;\n\tlong mid = n / 2;\n\tlong left = l[mid];\n\tlong right\
    \ = l[n - 1];\n\tif (left > right) swap(left, right);\n\treturn left;\n}", "{\n\
    \    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n    return\
    \ m;\n}", "{\n    long mid = l.length / 2;\n    if (l.length % 2 == 0) \n    {\n\
    \        return std.math.mid(l, mid);\n    }\n    else \n    {\n        long mid1\
    \ = mid - 1;\n        long mid2 = mid + 1;\n        return std.math.mid(l, mid1)\
    \ + std.math.mid(l, mid2);\n    }\n}", "{\n    long mid = l.length / 2;\n    if\
    \ (l.length % 2 == 1) \n        return std.math.mid(l, mid);\n    else \n    \
    \    return std.math.mid(l, mid, l.length);\n}", "{\n    long med = std.math.median(l);\n\
    \    return med;\n}", "{\n    long mid = l.length / 2;\n    if (l.length % 2 ==\
    \ 1) \n    {\n        return std.math.mid(l, mid);\n    }\n    else \n    {\n\
    \        return std.math.mid(l, mid, l.length - mid);\n    }\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n    long mid = l.length / 2;\n    if (l.length % 2 == 1) \n    {\n\
    \        return std.math.mid(l, mid);\n    }\n    else \n    {\n        return\
    \ std.math.mid(l, mid, l.length - mid);\n    }\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    long mid = l.length / 2;\n    if (l.length % 2 == 1) \n    {\n        return\
    \ std.math.mid(l, mid);\n    }\n    else \n    {\n        return std.math.mid(l,\
    \ mid, l.length - mid);\n    }\n}\n/*\nReturn median of elements in the array\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long\
    \ mid = l.length / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l,\
    \ mid);\n    }\n    else \n    {\n        return std.math.mid(l, mid, l.length\
    \ - mid);\n    }\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long mid = l.length / 2;\n\
    \    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n  \
    \  }\n    else \n    {\n        return std.math.mid(l, ", "{\n\tfloat med = std.math.median(l);\n\
    \treturn med;\n}", "{\n    long mid = l.length / 2;\n    float leftMedian = median(l);\n\
    \    float rightMedian = median(l.subarray(0, mid));\n    return std.fdiv(leftMedian,\
    \ rightMedian);\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(short[] l) \n{\n    short mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l.subarray(0,\
    \ mid));\n    return std.fdiv(leftMedian, rightMedian);\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(int[]\
    \ l) \n{\n    int mid = l.length / 2;\n    float leftMedian = median(l);\n   \
    \ float rightMedian = median(l.subarray(0, mid));\n    return std.fdiv(leftMedian,\
    \ rightMedian);\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(float[] l) \n{\n    float mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l.subarray(0,\
    \ mid));\n    return std.fdiv(leftMedian, rightMedian);\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double[]\
    \ l) \n{\n    double mid = l.length / 2;\n    double leftMedian = median(l);\n\
    \    double rightMedian = median(l.subarray(0, mid));\n    return std.fdiv(leftMedian,\
    \ rightMedian);\n}\n/*\nReturn ", "{\n\tlong mid = l.length / 2;\n\tif (l.length\
    \ % 2 == 0)\n\t\treturn std.math.mid(l, mid);\n\telse\n\t\treturn std.math.mid(l,\
    \ mid, l.length - mid);\n}", "{\n    float med = 0.0;\n    long i;\n    \n   \
    \ for (i = 0; i < l.length; i++) \n    {\n        med = (med + l[i]) / 2;\n  \
    \  }\n    return med;\n}", "{\n    long mid = l.length / 2;\n    if (l.length\
    \ % 2 == 0)\n        return std.math.mid(l, mid);\n    else\n        return std.math.mid(l,\
    \ mid + 1, l.length - mid);\n}\n/*\nReturn median of elements in the array l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start, int end) \n\
    {\n    if (start == end)\n        return l[start];\n    \n    long mid = start\
    \ + (end - start) / 2;\n    if (end % 2 == 0)\n        return std.math.mid(l,\
    \ start, mid);\n    else\n        return std.math.mid(l, mid + 1, end);\n}\n/*\n\
    Return median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(long[] l, int start, int end, int step) \n{\n    if (start == end)\n\
    \        return l[start];\n    \n    long mid = start + (end - start) / 2;\n \
    \   if (end % 2 == 0)\n        return std.math.mid(l, start, mid, step);\n   \
    \ else\n        return std.math.mid(l, mid + 1, end, step);\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end, int step, float stepSize) \n{\n    if (start == end)\n\
    \        return l[start];\n    \n    long mid = start + (end - start) / 2;\n \
    \   if (end % 2 == 0)\n        return std.math.mid(l, start, mid, stepSize, step);\n\
    \    else\n        return std.math.mid(l, mid + 1, end, stepSize, step);\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(long[] l, int start, int end, int step, float stepSize,\
    \ float stepSize2) \n", "{\n    long mid = l.length / 2;\n    float leftMedian\
    \ = median(l);\n    float rightMedian = median(l, mid);\n    return leftMedian\
    \ + (rightMedian - leftMedian) * (mid) / 2;\n}\n</code>\n<|/ a tags=algorithm,c++,median\
    \ |>\n<| c |>\nThe median of [1,2,3,4,5] is 3, not 4.\n<|/ c |>\n<| c |>\n: I\
    \ believe that is the definition of the median.\n<|/ c |>\n<| c |>\n: I believe\
    \ that is the definition of the median.\n<|/ c |>\n<| c |>\n: I believe that is\
    \ the definition of the median.\n<|/ c |>\n<| c |>\n: I believe that is the definition\
    \ of the median.\n<|/ c |>\n<| a tags=algorithm,c++,median |>\nThe median is the\
    \ middle number of the sorted array.\nThe median is the number that divides the\
    \ array into two halves such that the difference between the two medians is as\
    \ small as possible.\nThe median is defined as the middle number of the sorted\
    \ array.\nThe median is defined as the number that divides the array into two\
    \ halves such that the difference between the two medians is as small as possible.\n\
    The median is defined as the middle number of the sorted array.\nThe median is\
    \ defined as the number that divides the array into two halves such that the difference\
    \ between the two medians is as small as possible.\nThe median is defined as the\
    \ middle number of the sorted array.\nThe median is defined as the number that\
    \ divides the array into two halves such that the difference between the two medians\
    \ is as small as possible.\nThe median is defined as the middle number of the\
    \ sorted array.\nThe median is defined as the number that divides the array into\
    \ two halves such that the difference between the two medians is as small as possible.\n\
    The median is defined as the middle number of the sorted array.\nThe median is\
    \ defined as the number that divides the array into two halves such that the difference\
    \ between the two medians is as small as possible.\nThe median is defined as the\
    \ middle number of the sorted array.\nThe median is defined as the number that\
    \ divides the array into two halves such that the difference between the two medians\
    \ is as small as possible.\nThe median is defined as the middle number of the\
    \ sorted array.\nThe median is defined as the number that divides the array into\
    \ two halves such that the difference between the two medians is as small as possible.\n\
    The median is defined as the middle number of the sorted array.\nThe median is\
    \ defined as the number that divides the array into two halves such that the difference\
    \ between the two median", "{\n    long mid = l.length / 2;\n    if (l.length\
    \ % 2 == 1) \n        return std.math.mid(l, mid);\n    else \n        return\
    \ std.math.mid(l, mid, l.length);\n}\n/*\nReturn median of elements in the array\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start,\
    \ int end) \n{\n    if (start == end) \n        return l[start];\n    else \n\
    \        return std.math.mid(l, start, end);\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start,\
    \ int end, int step) \n{\n    if (start == end) \n        return l[start];\n \
    \   else \n        return std.math.mid(l, start, end, step);\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end, int step, float stepSize) \n{\n    if (start == end)\
    \ \n        return l[start];\n    else \n        return std.math.mid(l, start,\
    \ end, step, stepSize);\n}\n/*\nReturn median of elements in the array l.\n  \
    \  >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start, int end, int\
    \ step, float stepSize, float stepSize2) \n{\n    if (start == end) \n       \
    \ return l[start];\n    else \n        return std.math.mid(l, start, end, step,\
    \ stepSize, stepSize2);\n}\n/*\nReturn median of elements in the array l.\n  \
    \  >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start, int end, int\
    \ step, float stepSize, ", "{\n    long mid = l.length / 2;\n    float median;\n\
    \    if (l.length%2 == 0)\n    {\n        median = std.math.mid(l, 0, mid);\n\
    \    }\n    else\n    {\n        median = std.math.mid(l, mid, l.length);\n  \
    \  }\n    return median;\n}", "{\n    long mid = l.length / 2;\n    float a =\
    \ l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n    float d = (a\
    \ + b + c + d) / 4;\n    return d;\n}", "{\n\tlong mid = l.length / 2;\n\tif (l.length\
    \ % 2 == 0) \n\t\treturn std.math.mid(l, mid);\n\telse \n\t\treturn std.math.mid(l,\
    \ mid + 1, l.length - mid);\n}", "{\n\tfloat m = std.math.median(l);\n\treturn\
    \ m;\n}", "{\n    long i, mid;\n    float sum;\n    \n    sum = 0;\n    mid =\
    \ l.length / 2;\n    \n    for (i = 0; i < mid; i++)\n        sum += l[i];\n \
    \   \n    return sum / mid;\n}", "{\n    long i, mid;\n    float median;\n   \
    \ \n    mid = l.length / 2;\n    \n    if (l.length % 2 == 1)\n    {\n       \
    \ median = l[mid];\n    }\n    else\n    {\n        median = (l[mid] + l[mid-1])\
    \ / 2;\n    }\n    \n    return median;\n}", "{\n    long mid = l.length / 2;\n\
    \    if (l.length % 2 == 0)\n        return std.math.mid(l, mid);\n    else \n\
    \        return std.math.mid(l, mid + 1, l.length - mid);\n}", "{\n    long mid\
    \ = l.length / 2;\n    if (l.length % 2 == 0)\n        return std.math.mid(l,\
    \ mid);\n    else\n        return std.math.mid(l, mid + 1, l.length - mid);\n}",
  "{\n    long mid = l.length / 2;\n    float m = 0;\n    float s = 0.0;\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        s += l[i];\n        if(s > m)\n  \
    \      {\n            m = s;\n        }\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n    long mid = l.length / 2;\n    float m = 0;\n    float s = 0.0;\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        s += l[i];\n        if(s\
    \ > m)\n        {\n            m = s;\n        }\n    }\n    return m;\n}\n/*\n\
    Return median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(float l[]) \n{\n    long mid = l.length / 2;\n    float m = 0;\n\
    \    float s = 0.0;\n    for(int i = 0; i < l.length; i++)\n    {\n        s +=\
    \ l[i];\n        if(s > m)\n        {\n            m = s;\n        }\n    }\n\
    \    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long mid = l.length / 2;\n\
    \    float m = 0;\n    float s = 0.0;\n    for(int i = 0; i < l.length; i++)\n\
    \    {\n        s += l[i];\n        if(s > m)\n        {\n            m = s;\n\
    \        }\n    }\n    return m;\n}\n/*\nReturn median of elements in the array\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[], int n) \n\
    {\n    long mid = l.length / 2;\n    float m = 0;\n    float s = 0.0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        s += l[i];\n        if(s > m)\n        {\n\
    \            m = s;\n        }\n", "{\n    long mid = l.length / 2;\n    float\
    \ m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n    {\n       \
    \ if(l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}", "{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n   \
    \ for(int i = mid; i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n\
    \            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int\
    \ i = mid; i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n      \
    \      m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    long mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int i = mid;\
    \ i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n            m =\
    \ l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements in\
    \ the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    long mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int i = mid;\
    \ i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n            m =\
    \ l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements in\
    \ the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[], int n)\
    \ \n{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int\
    \ i = mid; i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n      \
    \      m = l[i];\n        }", "{\n    long mid = l.length / 2;\n    float a =\
    \ l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n    float d = (a\
    \ + b + c + l[mid]) / 4;\n    return d;\n}", "{\n    float m = 0;\n    int n =\
    \ l.length;\n    float sum = 0;\n    for(int i = 0; i < n; i++)\n    {\n     \
    \   sum += l[i];\n    }\n    float avg = sum / n;\n    for(int i = 0; i < n; i++)\n\
    \    {\n        if(l[i] < avg)\n        {\n            m = l[i];\n        }\n\
    \    }\n    return m;\n}", "{\n    long mid = l.length / 2;\n    float m = (float)\
    \ l[mid];\n    for(int i = mid; i < l.length; ++i)\n    {\n        if(l[i] < m)\n\
    \        {\n            m = l[i];\n        }\n    }\n    return m;\n}", "{\n \
    \   long i, mid;\n    float sum, x;\n    \n    sum = 0;\n    mid = l.length /\
    \ 2;\n    for (i = 0; i < mid; i++)\n        sum += l[i];\n    x = sum / mid;\n\
    \    \n    for (i = 0; i < mid; i++)\n        if (l[i] < x)\n            return\
    \ l[i];\n    return x;\n}", "{\n    long mid = l.length / 2;\n    if (l.length\
    \ % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n    }\n    else \n\
    \    {\n        return std.math.mid(l, mid, l.length);\n    }\n}", "{\n\tlong\
    \ mid = l.length / 2;\n\tif (l.length % 2 == 0)\n\t\treturn std.math.mid(l, mid);\n\
    \telse\n\t\treturn std.math.mid(l, mid, l.length - mid);\n}", "{\n    long mid\
    \ = l.length / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n      \
    \  }\n    }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long l[], int len) \n{\n    long mid\
    \ = len / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < len; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }", "{\n    long mid = l.length / 2;\n    if (l.length % 2 == 1) \n    {\n\
    \        return std.math.mid(l, 0, mid);\n    }\n    else \n    {\n        return\
    \ std.math.mid(l, mid, l.length);\n    }\n}", "{\n    long mid = l.length / 2;\n\
    \    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n    {\n\
    \        if(l[i] < m)\n        {\n            mid = i;\n            m = (float)l[mid];\n\
    \        }\n    }\n    return m;\n}", "{\n    float m = l[0];\n    float n = l[0];\n\
    \    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i] < m)\n        {\n\
    \            m = l[i];\n        }\n        else if(l[i] > n)\n        {\n    \
    \        n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double[]\
    \ l) \n{\n    float m = l[0];\n    float n = l[0];\n    for(int i = 1; i < l.length;\
    \ i++)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n      \
    \  }\n        else if(l[i] > n)\n        {\n            n = l[i];\n        }\n\
    \    }\n    return (n + m) / 2;\n}\n/*\nReturn median of elements in the array\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float[] l) \n{\n   \
    \ float m = l[0];\n    float n = l[0];\n    for(int i = 1; i < l.length; i++)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \      else if(l[i] > n)\n        {\n            n = l[i];\n        }\n    }\n\
    \    return (n + m) / 2;\n}\n/*\nReturn median of elements in the array l.\n \
    \   >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(short[] l) \n{\n    float m = l[0];\n\
    \    float n = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ < m)\n        {\n            m = l[i];\n        }\n        else if(l[i] > n)\n\
    \        {\n            n = l[i];\n        }\n    }\n    return (n + m) / 2;\n\
    }\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L,\
    \ 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(int[] l) \n{\n    ", "{\n\tlong med = std.math.median(l);\n\
    \treturn med;\n}", "{\n    long i, mid;\n    float sum = 0;\n    \n    mid = l.length\
    \ / 2;\n    \n    for (i = 0; i < mid; i++)\n        sum += l[i];\n    \n    return\
    \ sum / mid;\n}", "{\n    long mid = l.length / 2;\n    float m1 = l[mid];\n \
    \   float m2 = l[mid-1];\n    float m3 = l[mid-2];\n    float m4 = l[mid-3];\n\
    \    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n    float m7 = l[mid-6];\n\
    \    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n    float m10 = l[mid-9];\n\
    \    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n    float m13 = l[mid-12];\n\
    \    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n    float m16 = l[mid-15];\n\
    \    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n    float m19 = l[mid-18];\n\
    \    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n    float m22 = l[mid-21];\n\
    \    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n    float m25 = l[mid-24];\n\
    \    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n    float m28 = l[mid-27];\n\
    \    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n    float m31 = l[mid-30];\n\
    \    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n    float m34 = l[mid-33];\n\
    \    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n    float m37 = l[mid-36];\n\
    \    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n    float m40 = l[mid-39];\n\
    \    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n    float m43 = l[mid-42];\n\
    \    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n", "{\n    long mid =\
    \ l.length / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length;\
    \ i++) \n    {\n        if(l[i] < m) \n        {\n            m = l[i];\n    \
    \    }\n    }\n    return m;\n}", "{\n    long mid = l.length / 2;\n    float\
    \ m = (float)l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n      \
    \  if(l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}", "{\n    long mid = l.length / 2;\n    float midVal = l[mid];\n    float\
    \ leftMedian = median(l, 0, mid);\n    float rightMedian = median(l, mid+1, l.length);\n\
    \    return midVal + (leftMedian + rightMedian)/2;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work if there are any negative numbers in the array.\
    \ For example, median([-10, 4, 6, 1000]) returns -10.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I used the median function from here: http://stackoverflow.com/questions/2477495/finding-median-of-array-in-java\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the median function from here:\
    \ http://stackoverflow.com/questions/2477495/finding-median-of-array-in-java\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the median function from here:\
    \ http://stackoverflow.com/questions/2477495/finding-median-of-array-in-java\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the median function from here:\
    \ http://stackoverflow.com/questions/2477495/finding-median-of-array-in-java\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\npublic class Median{\n    public static void\
    \ main(String[] args){\n        int[] arr = {1,2,3,4,5,6,7,8,9,10};\n        System.out.println(median(arr));\n\
    \    }\n    public static int median(int[] arr){\n        int mid = arr.length/2;\n\
    \        int left = arr[mid];\n        int right = arr[mid+1];\n        if(left>right){\n\
    \            return left;\n        }\n        return right;\n    }\n}\n</code>\n\
    <|/ a tags=median,java,arrays |>\n<| a tags=median,java,arrays |>\n<code>\npublic\
    \ int median(int[] arr) {\n    int mid = arr.length/2;\n    int left = arr[mid];\n\
    \    int right = arr[mid+1];\n    if(left>right){\n        return left;\n    }\n\
    \    return right;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=median,java,arrays\
    \ |>\n<code>\npublic int median(int[] arr) {\n    int mid = arr.length/2;\n  \
    \  int left = arr[mid];\n    int right = arr[mid+1];\n    if(left>right){\n  \
    \      return left;\n    }\n    return right;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nPlease add some explanation to your answer such that ", "{\n    long\
    \ mid = l.length / 2;\n    float m = l[mid];\n    for(int i = mid; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n      \
    \  }\n    }\n    return m;\n}", "{\n    long med = std.math.median(l);\n    return\
    \ med;\n}", "{\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n\
    \    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m =\
    \ l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float\
    \ m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n \
    \   float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n\
    \    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n =\
    \ l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float\
    \ n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n \
    \   float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n\
    \    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m =\
    \ l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float\
    \ m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n \
    \   float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n\
    \    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n =\
    \ l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float\
    \ n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n \
    \   float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n\
    \    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m =\
    \ l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float\
    \ m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n \
    \   float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n\
    \    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n =\
    \ l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n", "{\n\
    \tfloat sum = 0;\n\tfloat n = l.length;\n\tfor (int i = 0; i < n; i++) {\n\t\t\
    sum += l[i];\n\t}\n\treturn sum / n;\n}", "{\n\tlong med = std.math.median(l);\n\
    \treturn med;\n}", "{\n    float m = l[0];\n    for (int i = 1; i < l.length;\
    \ i++) \n    {\n        if (l[i] < m) \n        {\n            m = l[i];\n   \
    \     }\n    }\n    return m;\n}", "{\n    float m = l[0];\n    for(int i = 1;\
    \ i < l.length; i++) \n    {\n        if(l[i] < m) \n        {\n            m\
    \ = l[i];\n        }\n    }\n    return m;\n}", "{\n    float m = l[0];\n    for(int\
    \ i = 1; i < l.length; i++) \n    {\n        if(l[i] < m) \n        {\n      \
    \      m = l[i];\n        }\n    }\n    return m;\n}", "{\n    long i, mid;\n\
    \    float sum;\n    \n    sum = 0;\n    mid = l.length / 2;\n    \n    for (i\
    \ = 0; i < mid; i++)\n        sum += l[i];\n    \n    return sum / mid;\n}\n/*\n\
    Return median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(long l[]) \n{\n    long i, mid;\n    float sum;\n    \n    sum =\
    \ 0;\n    mid = l.length / 2;\n    \n    for (i = 0; i < mid; i++)\n        sum\
    \ += l[i];\n    \n    return sum / mid;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    long i, mid;\n    float sum;\n    \n    sum = 0;\n    mid = l.length / 2;\n\
    \    \n    for (i = 0; i < mid; i++)\n        sum += l[i];\n    \n    return sum\
    \ / mid;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long i, mid;\n    float\
    \ sum;\n    \n    sum = 0;\n    mid = l.length / 2;\n    \n    for (i = 0; i <\
    \ mid; i++)\n        sum += l[i];\n    \n    return sum / mid;\n}\n/*\nReturn\
    \ median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n \
    \   3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(char l[]) \n{\n    long i, mid;\n    float sum;\n    \n    sum =\
    \ 0;\n    mid = l.length / 2;\n    \n    for (i = 0; i < mid; i++)\n        sum\
    \ += l[i];\n    \n    return sum / mid;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, ", "{\n    int n = l.length;\n    if (n\
    \ < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n     \
    \   if (l[i] < m) m = l[i];\n    return m;\n}", "{\n    int n = l.length;\n  \
    \  if (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}", "{\n    long\
    \ mid = l.length / 2;\n    float m = (float)l[mid];\n    float a = 0;\n    float\
    \ b = l.length - 1;\n    float c = l[0];\n    float d = l[l.length - 1];\n   \
    \ while (a <= b) {\n        float mid = (a + b) / 2;\n        if (mid > c) {\n\
    \            b = mid - 1;\n        } else if (mid < d) {\n            a = mid\
    \ + 1;\n        } else {\n            return mid;\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(short[] l) \n{\n    short mid = l.length / 2;\n    float\
    \ m = (float)l[mid];\n    float a = 0;\n    float b = l.length - 1;\n    float\
    \ c = l[0];\n    float d = l[l.length - 1];\n    while (a <= b) {\n        float\
    \ mid = (a + b) / 2;\n        if (mid > c) {\n            b = mid - 1;\n     \
    \   } else if (mid < d) {\n            a = mid + 1;\n        } else {\n      \
    \      return mid;\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(int[] l) \n{\n \
    \   int mid = l.length / 2;\n    float m = (float)l[mid];\n    float a = 0;\n\
    \    float b = l.length - 1;\n    float c = l[0];\n    float d = l[l.length -\
    \ 1];\n    while (a <= b) {\n        float mid = (a + b) / 2;\n        if (mid\
    \ > c) {\n            b = mid - 1;\n        } else if (mid < d) {\n          \
    \  a = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n\
    \    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(float[] l) \n{\n    float mid = l.length / 2;\n\
    \    float m = (float)l[mid];\n    float a = 0;\n    float b = ", "{\n\tlong i,\
    \ mid;\n\tfloat sum;\n\t\n\tmid = l.length / 2;\n\t\n\tfor (i = 0; i < mid; i++)\
    \ \n\t{\n\t\tsum += l[i];\n\t}\n\t\n\treturn sum / mid;\n}", "{\n    long mid\
    \ = l.length / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n    float c\
    \ = l[mid+1];\n    float d = (a + b + c + d) / 4;\n    return d;\n}", "{\n   \
    \ long mid = l.length / 2;\n    if (l.length % 2 == 1) \n        return std.math.mid(l,\
    \ mid);\n    else \n        return std.math.mid(l, mid, l.length - mid);\n}",
  "{\n\tlong mid = l.length / 2;\n\tif (l.length % 2 == 0)\n\t\treturn std.math.mid(l,\
    \ 0, mid);\n\telse\n\t\treturn std.math.mid(l, mid, l.length);\n}", "{\n    long\
    \ mid = l.length / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l);\n\
    \    float rightMedian = median(l.subarray(1, mid));\n    return midVal + ((leftMedian\
    \ + rightMedian) / 2);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=algorithm,java,sorting\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport\
    \ java.util.List;", "{\n    long mid = l.length / 2;\n    float f = l[mid];\n\
    \    for(int i = 1; i < l.length; i++){\n        if(l[i] < f){\n            f\
    \ = l[i];\n        }\n    }\n    return f;\n}\n/*\nReturn median of elements in\
    \ the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    long mid = l.length / 2;\n    float f = l[mid];\n    for(int i = 1; i < l.length;\
    \ i++){\n        if(l[i] < f){\n            f = l[i];\n        }\n    }\n    return\
    \ f;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(float l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ f = l[mid];\n    for(int i = 1; i < l.length; i++){\n        if(l[i] < f){\n\
    \            f = l[i];\n        }\n    }\n    return f;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double\
    \ l[]) \n{\n    long mid = l.length / 2;\n    float f = l[mid];\n    for(int i\
    \ = 1; i < l.length; i++){\n        if(l[i] < f){\n            f = l[i];\n   \
    \     }\n    }\n    return f;\n}\n/*\nReturn median of elements in the array l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(char l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float f = l[mid];\n    for(int i = 1; i < l.length; i++){\n      \
    \  if(l[i] < f){\n            f = l[i];\n        }\n    }\n    return f;\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, ",
  "{\n    long mid = l.length / 2;\n    float leftMedian = median(l);\n    float rightMedian\
    \ = median(l.subarray(mid));\n    return std.fdiv(leftMedian, rightMedian);\n}",
  "{\n    long mid = l.length / 2;\n    float a = (float)l.length / 2;\n    float\
    \ b = l.length;\n    float c = l.length;\n    float d = l.length;\n    float e\
    \ = (float)l.length;\n    float f = l.length;\n    float g = l.length;\n    float\
    \ h = l.length;\n    float i = l.length;\n    float j = l.length;\n    float k\
    \ = l.length;\n    float l = l.length;\n    float m = l.length;\n    float n =\
    \ l.length;\n    float o = l.length;\n    float p = l.length;\n    float q = l.length;\n\
    \    float r = l.length;\n    float s = l.length;\n    float t = l.length;\n \
    \   float u = l.length;\n    float v = l.length;\n    float w = l.length;\n  \
    \  float x = l.length;\n    float y = l.length;\n    float z = l.length;\n   \
    \ float aa = l.length;\n    float ab = l.length;\n    float ac = l.length;\n \
    \   float ad = l.length;\n    float ae = l.length;\n    float af = l.length;\n\
    \    float ag = l.length;\n    float ah = l.length;\n    float ai = l.length;\n\
    \    float aj = l.length;\n    float ak = l.length;\n    float al = l.length;\n\
    \    float am = l.length;\n    float an = l.length;\n    float ao = l.length;\n\
    \    float ap = l.length;\n    float aq = l.length;\n    float ar = l.length;\n\
    \    float as = l.length;\n    float at = l.length;\n    float au = l.length;\n\
    \    float av = l.length;\n    float aw = l.length;\n    float ax = l.length;\n\
    \    float ay = l.length;\n    float az = l.length;\n    float aa += l.length;\n\
    \    float ab += l.length;\n    float ac += l.length;\n    float ad += l.length;\n\
    \    float ae += l.length;\n    float af += l.length;\n    float ag += l.length;\n\
    \    float ah += l.length;\n    float ai += l.length;\n    float aj += l.length;\n\
    \    float ak += l.length;\n    float al += l.length;\n    float am += l.length;\n\
    \    float an += l.length;\n    float ao += l.length;\n    float ap += l.length;\n\
    \    float aq += l.length;\n    float ar += l.length;\n    float as += l.length;\n\
    \    float at += l.length;\n    float au += l.length;\n    float av += l.length;\n\
    \    ", "{\n    long mid = l.length / 2;\n    float a = (float)(l[mid]);\n   \
    \ float b = (float)(l[mid-1]);\n    return ((a + b) / 2.0);\n}", "{\n    long\
    \ n = l.length;\n    if (n < 1) return 0;\n    long mid = n / 2;\n    long left\
    \ = l[mid];\n    long right = l[n - 1];\n    if (right < left) swap(l, mid);\n\
    \    long mid2 = mid / 2;\n    long left2 = l[mid2];\n    long right2 = l[n -\
    \ 2];\n    if (right2 < left2) swap(l, mid2);\n    long mid3 = mid / 3;\n    long\
    \ left3 = l[mid3];\n    long right3 = l[n - 3];\n    if (right3 < left3) swap(l,\
    \ mid3);\n    long mid4 = mid / 4;\n    long left4 = l[mid4];\n    long right4\
    \ = l[n - 4];\n    if (right4 < left4) swap(l, mid4);\n    long mid5 = mid / 5;\n\
    \    long left5 = l[mid5];\n    long right5 = l[n - 5];\n    if (right5 < left5)\
    \ swap(l, mid5);\n    long mid6 = mid / 6;\n    long left6 = l[mid6];\n    long\
    \ right6 = l[n - 6];\n    if (right6 < left6) swap(l, mid6);\n    long mid7 =\
    \ mid / 7;\n    long left7 = l[mid7];\n    long right7 = l[n - 7];\n    if (right7\
    \ < left7) swap(l, mid7);\n    long mid8 = mid / 8;\n    long left8 = l[mid8];\n\
    \    long right8 = l[n - 8];\n    if (right8 < left8) swap(l, mid8);\n    long\
    \ mid9 = mid / 9;\n    long left9 = l[mid9];\n    long right9 = l[n - 9];\n  \
    \  if (right9 < left9) swap(l, mid9);\n    long mid10 = mid / 10;\n    long left10\
    \ = l[mid10];\n    long right10 = l[n - 10];\n    if (right10 < left10) swap(l,\
    \ mid10);\n    long mid11 = mid / 11;\n    long left11 = l[mid11];\n    long right11\
    \ = l[n - 11];\n    if (right11 < left11) swap(l, mid11);\n    long mid12 = mid\
    \ / 12;\n    long left12 = l[mid12];\n    long right12 = l[n - 12];\n    if (right12\
    \ < left12) swap(l, mid12);\n    long mid13 = mid / 13;\n    long left13", "{\n\
    \tfloat median;\n\t\n\tmedian = std.math.median(l);\n\t\n\treturn median;\n}",
  "{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n    float sum =\
    \ 0;\n    for(int i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n  \
    \      if(sum > m) \n        {\n            m = sum;\n        }\n    }\n    return\
    \ m;\n}", "{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n   \
    \ for(int i = mid; i < l.length; i++) \n    {\n        if(l[i] < m) \n       \
    \ {\n            m = l[i];\n        }\n    }\n    return m;\n}", "{\n    int n\
    \ = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for (int i =\
    \ 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}",
  "{\n    long mid = l.length / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n\
    \    float c = l[mid+1];\n    float d = (a + b + c) / 3;\n    return d;\n}", "{\n\
    \    long mid = l.length / 2;\n    float m = 0;\n    for(int i = 0; i < mid; i++)\n\
    \    {\n        m += l[i];\n    }\n    m /= mid;\n    return m;\n}", "{\n    int\
    \ n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for (int i\
    \ = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}",
  "{\n\tlong mid = l.length / 2;\n\tif (l.length % 2 == 0)\n\t\treturn std.math.mid(l,\
    \ 0, mid);\n\telse\n\t\treturn std.math.mid(l, mid, l.length);\n}", "{\n    long\
    \ mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i <\
    \ l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n\
    \        }\n    }\n    return m;\n}\n/*\nReturn median of elements in the array\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long\
    \ mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i <\
    \ l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n\
    \        }\n    }\n    return m;\n}\n/*\nReturn median of elements in the array\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n   \
    \ long mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int i = mid;\
    \ i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n            m =\
    \ l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements in\
    \ the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    long mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int i = mid;\
    \ i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n            m =\
    \ l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements in\
    \ the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[], int n)\
    \ \n{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int\
    \ i = mid; i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n      \
    \      m = l[i];\n        }", "{\n    long mid = l.length / 2;\n    float median;\n\
    \    if (l.length == 0) return 0;\n    if (l.length % 2 == 1) return l[mid];\n\
    \    else \n    {\n        median = (l[mid] + l[mid-1]) / 2;\n        return median;\n\
    \    }\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long mid = l.length / 2;\n\
    \    float median;\n    if (l.length == 0) return 0;\n    if (l.length % 2 ==\
    \ 1) return l[mid];\n    else \n    {\n        median = (l[mid] + l[mid-1]) /\
    \ 2;\n        return median;\n    }\n}\n/*\nReturn median of elements in the array\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n   \
    \ long mid = l.length / 2;\n    float median;\n    if (l.length == 0) return 0;\n\
    \    if (l.length % 2 == 1) return l[mid];\n    else \n    {\n        median =\
    \ (l[mid] + l[mid-1]) / 2;\n        return median;\n    }\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double\
    \ l[]) \n{\n    long mid = l.length / 2;\n    float median;\n    if (l.length\
    \ == 0) return 0;\n    if (l.length % 2 == 1) return l[mid];\n    else \n    {\n\
    \        median = (l[mid] + l[mid-1]) / 2;\n        return median;\n    }\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(long long l[]) \n{\n    long mid = l.length / 2;\n", "{\n\
    \    long n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; ++i)\n        if (l[i] < m) m = l[i];\n    return m;\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(short[] l) \n{\n    short n = l.length;\n    if (n < 2)\
    \ return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n        if\
    \ (l[i] < m) m = l[i];\n    return m;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(int[] l) \n{\n \
    \   int n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; ++i)\n        if (l[i] < m) m = l[i];\n    return m;\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(float[] l) \n{\n    float n = l.length;\n    if (n < 2)\
    \ return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n        if\
    \ (l[i] < m) m = l[i];\n    return m;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double[] l) \n{\n\
    \    double n = l.length;\n    if (n < 2) return 0;\n    double m = l[0];\n  \
    \  for (int i = 1; i < n; ++i)\n        if (l[i] < m) m = l[i];\n    return m;\n\
    }\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L,\
    \ 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/", "{\n    long i, mid;\n    float sum = 0;\n    \n    mid = l.length\
    \ / 2;\n    \n    for (i = 0; i < mid; i++)\n        sum += l[i];\n    \n    return\
    \ sum / mid;\n}", "{\n    long mid = l.length / 2;\n    float m = (float) l[mid];\n\
    \    for(int i = mid; i < l.length; ++i)\n    {\n        if(l[i] < m)\n      \
    \  {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n    long mid = l.length / 2;\n    float m = (float) l[mid];\n    for(int\
    \ i = mid; i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n      \
    \      m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    long mid = l.length / 2;\n    float m = (float) l[mid];\n    for(int i =\
    \ mid; i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n          \
    \  m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    long mid = l.length / 2;\n    float m = (float) l[mid];\n    for(int i =\
    \ mid; i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n          \
    \  m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[], int n)\
    \ \n{\n    long mid = l.length / 2;\n    float m = (float) l[mid];\n    for(int\
    \ i = mid; i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n", "{\n\
    \tlong mid = l.length / 2;\n\tfloat f = l[mid];\n\tfor (int i = 0; i < mid; i++)\n\
    \t\tf = std.min(std.min(l, mid + i), f);\n\treturn f;\n}", "{\n\tlong mid = l.length\
    \ / 2;\n\tif (l.length % 2 == 1) \n\t{\n\t\tmid++;\n\t}\n\tfloat m1 = l[mid];\n\
    \tfloat m2 = l[mid-1];\n\treturn std.math.min(m1, m2);\n}", "{\n    long l = length(l);\n\
    \    if (l % 2 == 0)\n    {\n        return std.math.toFloat(l/2);\n    }\n  \
    \  else\n    {\n        return std.math.toFloat((l+1)/2);\n    }\n}", "{\n   \
    \ long mid = l.length / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.subarray(0, mid));\n    float rightMedian = median(l.subarray(mid,\
    \ l.length));\n    return midVal + ((leftMedian + rightMedian) / 2);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis code does not work. `median([3L, 1L, 2L, 4L,\
    \ 5L])` returns `3L` instead of `3`.\n<|/ c |>\n<| c |>\nIt does work. `median([3L,\
    \ 1L, 2L, 4L, 5L])` returns `3L` instead of `3`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ `median([3L, 1L, 2L, 4L, 5L])` returns `3L` instead of `3`.\n<|/ c |>\n<| c\
    \ |>\nIt does work. `median([3L, 1L, 2L, 4L, 5L])` returns `3L` instead of `3`.\n\
    <|/ c |>\n<| c |>\nIt does work. `median([3L, 1L, 2L, 4L, 5L])` returns `3L` instead\
    \ of `3`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic double median(List<Integer>\
    \ list) {\n    Collections.sort(list);\n    return list.get(list.size()/2);\n\
    }\n</code>\n<|/ a tags=java,median,arrays |>\n<| c |>\nThis code does not work.\
    \ `median([3L, 1L, 2L, 4L, 5L])` returns `3L` instead of `3`.\n<|/ c |>\n<| c\
    \ |>\nIt does work. `median([3L, 1L, 2L, 4L, 5L])` returns `3L` instead of `3`.\n\
    <|/ c |>\n<| c |>\nIt does work. `median([3L, 1L, 2L, 4L, 5L])` returns `3L` instead\
    \ of `3`.\n<|/ c |>\n<| c |>\nIt does work. `median([3L, 1L, 2L, 4L, 5L])` returns\
    \ `3L` instead of `3`.\n<|/ c |>\n<| a tags=java,median,arrays |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;", "{\n\
    \    long mid = l.length / 2;\n    float f = l[mid];\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < f)\n        {\n            mid = i;\n       \
    \     f = l[mid];\n        }\n    }\n    return f;\n}", "{\n    int n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \        if (l[i] < m) m = l[i];\n    return m;\n}", "{\n\tlong i, mid;\n\tfloat\
    \ sum = 0;\n\t\n\tmid = l.length / 2;\n\tfor (i = 0; i < mid; i++)\n\t\tsum +=\
    \ l[i];\n\t\n\tif (l.length % 2 == 0)\n\t\treturn sum / 2;\n\telse\n\t\treturn\
    \ sum / 2;\n}", "{\n    long mid = l.length / 2;\n    float m1 = l[mid];\n   \
    \ float m2 = l[mid-1];\n    float m3 = l[mid-2];\n    float m4 = l[mid-3];\n \
    \   float m5 = l[mid-4];\n    float m6 = l[mid-5];\n    float m7 = l[mid-6];\n\
    \    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n    float m10 = l[mid-9];\n\
    \    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n    float m13 = l[mid-12];\n\
    \    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n    float m16 = l[mid-15];\n\
    \    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n    float m19 = l[mid-18];\n\
    \    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n    float m22 = l[mid-21];\n\
    \    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n    float m25 = l[mid-24];\n\
    \    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n    float m28 = l[mid-27];\n\
    \    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n    float m31 = l[mid-30];\n\
    \    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n    float m34 = l[mid-33];\n\
    \    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n    float m37 = l[mid-36];\n\
    \    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n    float m40 = l[mid-39];\n\
    \    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n    float m43 = l[mid-42];\n\
    \    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n", "{\n    long n = l.length;\n\
    \    if (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \        if (l[i] < m) m = l[i];\n    return m;\n}", "{\n    long mid = l.length\
    \ / 2;\n    float leftMedian = median(l);\n    float rightMedian = median(l, mid);\n\
    \    return std.math.min(leftMedian, rightMedian);\n}", "{\n\tlong mid = l.length\
    \ / 2;\n\tif (l.length % 2 == 0)\n\t\treturn std.math.toFloat(l[mid]);\n\telse\n\
    \t\treturn std.math.toFloat(l[mid-1]) + std.math.toFloat(l[mid]);\n}", "{\n  \
    \  long mid = l.length / 2;\n    float m = (float)l[mid];\n    float a = (float)l.length;\n\
    \    float b = (float)l.length;\n    float c = 0.0;\n    float d = 0.0;\n    float\
    \ e = 0.0;\n    float f = 0.0;\n    float g = 0.0;\n    float h = 0.0;\n    float\
    \ i = 0.0;\n    float j = 0.0;\n    float k = 0.0;\n    float l = 0.0;\n    float\
    \ m = 0.0;\n    float n = 0.0;\n    float o = 0.0;\n    float p = 0.0;\n    float\
    \ q = 0.0;\n    float r = 0.0;\n    float s = 0.0;\n    float t = 0.0;\n    float\
    \ u = 0.0;\n    float v = 0.0;\n    float w = 0.0;\n    float x = 0.0;\n    float\
    \ y = 0.0;\n    float z = 0.0;\n    float a = 0.0;\n    float b = 0.0;\n    float\
    \ c = 0.0;\n    float d = 0.0;\n    float e = 0.0;\n    float f = 0.0;\n    float\
    \ g = 0.0;\n    float h = 0.0;\n    float i = 0.0;\n    float j = 0.0;\n    float\
    \ k = 0.0;\n    float l = 0.0;\n    float m = 0.0;\n    float n = 0.0;\n    float\
    \ o = 0.0;\n    float p = 0.0;\n    float q = 0.0;\n    float r = 0.0;\n    float\
    \ s = 0.0;\n    float t = 0.0;\n    float u = 0.0;\n    float v = 0.0;\n    float\
    \ w = 0.0;\n    float x = 0.0;\n    float y = 0.0;\n    float z = 0.0;\n    float\
    \ a = 0.0;\n    float b = 0.0;\n    float c = 0.0;\n    float d = 0.0;\n    float\
    \ e = 0.0;\n    float f = 0.0;\n    float g = 0.0;\n    float h = 0.0;\n    float\
    \ i = 0.0;\n    float j = 0.0;\n    float k = 0.0;\n    float l = 0.0;\n    float\
    \ m = 0.0;\n    float n = 0.0;\n    float o = 0.0;\n    float p = 0.0;\n    float\
    \ q = 0.0;\n    float r = 0.0;\n    float s = 0.0;\n    float t = 0.0;\n    float\
    \ u = 0.0;\n    float v = 0.0;\n    float w = 0.0;\n    float x = 0.0;\n    float\
    \ y = 0.0;\n    float z = 0.0;\n    float a = 0.0;\n    float b = 0.0;\n    float\
    \ c = 0.0;\n    ", "{\n    long mid = l.length / 2;\n    if (l.length % 2 == 0)\
    \ \n    {\n        return std.math.mid(l, 0, mid);\n    }\n    else \n    {\n\
    \        return std.math.mid(l, mid, l.length);\n    }\n}", "{\n\tlong mid = l.length\
    \ / 2;\n\tfloat m = l[mid];\n\tfor (int i = 0; i < mid; i++)\n\t\tm = max(m, l[i]);\n\
    \tfor (int i = mid; i < l.length; i++)\n\t\tm = min(m, l[i]);\n\treturn m;\n}",
  "{\n    long med = std.math.median(l);\n    return med;\n}", "{\n    float m = l[0];\n\
    \    float n = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ < m)\n        {\n            m = l[i];\n        }\n        if(l[i] > n)\n  \
    \      {\n            n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(short[] l) \n{\n    float m = l[0];\n    float n = l[0];\n\
    \    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n\
    \            m = l[i];\n        }\n        if(l[i] > n)\n        {\n         \
    \   n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(int[]\
    \ l) \n{\n    float m = l[0];\n    float n = l[0];\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n      \
    \  }\n        if(l[i] > n)\n        {\n            n = l[i];\n        }\n    }\n\
    \    return (n + m) / 2;\n}\n/*\nReturn median of elements in the array l.\n \
    \   >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(float[] l) \n{\n    float m = l[0];\n\
    \    float n = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ < m)\n        {\n            m = l[i];\n        }\n        if(l[i] > n)\n  \
    \      {\n            n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(double[] l) \n{\n    ", "{\n    float m = std.math.median(l);\n\
    \    return m;\n}", "{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n\
    \    for(int i = mid; i < l.length; i++) \n    {\n        if(l[i] < m) \n    \
    \    {\n            m = l[i];\n        }\n    }\n    return m;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=c++,median,algorithm |>\nI wrote this in Java. \n<code>\n\
    import java.util.Arrays;", "{\n    long mid = l.length / 2;\n    float f = l[mid];\n\
    \    for(int i = mid; i < l.length; i++)\n    {\n        if(l[i] < f)\n      \
    \  {\n            f = l[i];\n        }\n    }\n    return f;\n}", "{\n\tlong mid\
    \ = l.length / 2;\n\tif (l.length % 2 == 1) \n\t\treturn std.math.mid(l, mid);\n\
    \telse \n\t\treturn std.math.mid(l, mid, l.length);\n}", "{\n\tlong mid = l.length\
    \ / 2;\n\tif (l.length % 2 == 0) \n\t{\n\t\tint i = (int)mid;\n\t\treturn l[i];\n\
    \t}\n\telse \n\t{\n\t\tint i = (int)mid;\n\t\tint j = (int)mid - 1;\n\t\treturn\
    \ std.min(l[i], l[j]);\n\t}\n}", "{\n    int n = l.length;\n    if (n < 1) return\
    \ 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < m) m = l[i];\n    }\n    return m;\n}", "{\n    long i, mid;\n    float midVal;\n\
    \    \n    mid = l.length / 2;\n    midVal = l[mid];\n    \n    for (i = 0; i\
    \ < l.length; i++)\n    {\n        if (l[i] < midVal)\n        {\n           \
    \ midVal = l[i];\n        }\n    }\n    return midVal;\n}", "{\n    long mid =\
    \ l.length / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.toFloat(l[mid]);\n\
    \    }\n    else \n    {\n        float a = std.math.toFloat(l[mid]);\n      \
    \  float b = std.math.toFloat(l[mid-1]);\n        return std.math.fma(b, a, 0.5);\n\
    \    }\n}", "{\n    long l = std.math._median(l);\n    return l;\n}", "{\n\tlong\
    \ mid = l.length / 2;\n\tif (l.length % 2 == 0) \n\t{\n\t\tint i = (int) mid;\n\
    \t\treturn std.math.toFloat(l[i]);\n\t}\n\telse \n\t{\n\t\tint i = (int) mid;\n\
    \t\tint j = (int) (mid + 1);\n\t\treturn std.math.toFloat(l[i]) + std.math.toFloat(l[j]);\n\
    \t}\n}", "{\n    long mid = l.length / 2;\n    if (l.length % 2 == 0)\n      \
    \  return std.math.mid(l, 0, mid);\n    else\n        return std.math.mid(l, mid,\
    \ l.length);\n}", "{\n    long l = length(l);\n    if (l % 2 == 0) return std.math.mid(l,\
    \ l / 2);\n    else return std.math.mid(l / 2, l);\n}", "{\n\tlong mid = l.length\
    \ / 2;\n\tfloat m = l[mid];\n\tfor (int i = 0; i < mid; ++i)\n\t\tm = std.max(m,\
    \ l[i]);\n\treturn m;\n}", "{\n    long mid = l.length / 2;\n    float m1 = l[mid];\n\
    \    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n    float m4 = l[mid-3];\n\
    \    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n    float m7 = l[mid-6];\n\
    \    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n    float m10 = l[mid-9];\n\
    \    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n    float m13 = l[mid-12];\n\
    \    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n    float m16 = l[mid-15];\n\
    \    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n    float m19 = l[mid-18];\n\
    \    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n    float m22 = l[mid-21];\n\
    \    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n    float m25 = l[mid-24];\n\
    \    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n    float m28 = l[mid-27];\n\
    \    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n    float m31 = l[mid-30];\n\
    \    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n    float m34 = l[mid-33];\n\
    \    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n    float m37 = l[mid-36];\n\
    \    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n    float m40 = l[mid-39];\n\
    \    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n    float m43 = l[mid-42];\n\
    \    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n", "{\n\tlong l = length(l);\n\
    \tfloat med = 0.0;\n\t\n\tfor (int i = 0; i < l; i++)\n\t{\n\t\tmed += l[i];\n\
    \t}\n\t\n\tmed /= l;\n\t\n\treturn med;\n}", "{\n    long mid = l.length / 2;\n\
    \    float f = l[mid];\n    int i;\n    for (i = mid; i < l.length; i++)\n   \
    \ {\n        if (l[i] < f)\n        {\n            f = l[i];\n        }\n    }\n\
    \    return f;\n}", "{\n    long i, mid;\n    float midVal;\n    \n    mid = l.length\
    \ / 2;\n    midVal = l[mid];\n    \n    for (i = mid; i < l.length; i++) \n  \
    \  {\n        if (l[i] < midVal) \n        {\n            midVal = l[i];\n   \
    \     }\n    }\n    \n    return midVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThis doesn't answer the question, which is about median of medians.\n<|/\
    \ c |>\n<| c |>\nI believe it does. I posted a solution that does median of medians\
    \ which is what he was asking for. He didn't ask for median of medians though.\n\
    <|/ c |>\n<| c |>\nThe question was about median of medians, not median of median.\n\
    <|/ c |>\n<| c |>\nI posted a solution that does median of medians which is what\
    \ he was asking for. He didn't ask for median of medians though.\n<|/ c |>\n<|\
    \ c |>\nI posted a solution that does median of medians which is what he was asking\
    \ for. He didn't ask for median of medians though.\n<|/ c |>\n<| a |>\n<code>\n\
    def medianOfMedians(nums):\n    length = len(nums)\n    if length % 2 == 0:\n\
    \        median = (nums[length/2] + nums[length/2-1])/2\n    else:\n        median\
    \ = nums[length/2]\n    return median\n</code>\n<|/ a tags=median,algorithm dscore=0\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding how and/or why it solves the problem would improve\
    \ the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef medianOfMedians(nums):\n\
    \    length = len(nums)\n    if length % 2 == 0:\n        median = (nums[length/2]\
    \ + nums[length/2-1])/2\n    else:\n        median = nums[length/2]\n    return\
    \ median\n</code>\n<|/ a tags=median,algorithm |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding how and/or why it\
    \ solves the problem would improve the ", "{\n    long n = l.length;\n    if (n\
    \ < 1) return 0;\n    long mid = n / 2;\n    long med = l[mid];\n    long left\
    \ = 0;\n    long right = mid;\n    while (left < right) {\n        long mid2 =\
    \ left + right >> 1;\n        long mid = mid2;\n        if (l[mid] <= med) mid++;\n\
    \        if (mid == n) break;\n        if (l[mid] >= med) mid--;\n        left\
    \ = mid + 1;\n        right = mid;\n    }\n    return med;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n    long n = l.length;\n    if (n < 1) return 0;\n    long mid = n\
    \ / 2;\n    long med = l[mid];\n    long left = 0;\n    long right = mid;\n  \
    \  while (left < right) {\n        long mid2 = left + right >> 1;\n        long\
    \ mid = mid2;\n        if (l[mid] <= med) mid++;\n        if (mid == n) break;\n\
    \        if (l[mid] >= med) mid--;\n        left = mid + 1;\n        right = mid;\n\
    \    }\n    return med;\n}\n/*\nReturn median of elements in the array l.\n  \
    \  >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long n = l.length;\n\
    \    if (n < 1) return 0;\n    long mid = n / 2;\n    long med = l[mid];\n   \
    \ long left = 0;\n    long right = mid;\n    while (left < right) {\n        long\
    \ mid2 = left + right >> 1;\n        long mid = mid2;\n        if (l[mid] <= med)\
    \ mid++;\n        if (mid == n) break;\n        if (l[mid] >= med) mid--;\n  \
    \      left = mid + 1;\n        right = mid;\n    }\n    return med;\n}\n/*\n\
    Return median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n", "{\n\
    \tlong i, mid, count = l.length;\n\tif (count < 2) return l[0];\n\tmid = count\
    \ / 2;\n\tfor (i = mid; i < count; i++) \n\t\tif (l[i] < l[mid]) \n\t\t\tswap(l[i],\
    \ l[mid]);\n\tswap(l[mid], l[count - 1]);\n\treturn l[mid];\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n\tlong i, mid, count = l.length;\n\tif (count < 2) return l[0];\n\t\
    mid = count / 2;\n\tfor (i = mid; i < count; i++) \n\t\tif (l[i] < l[mid]) \n\t\
    \t\tswap(l[i], l[mid]);\n\tswap(l[mid], l[count - 1]);\n\treturn l[mid];\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(float l[]) \n{\n\tlong i, mid, count = l.length;\n\tif (count\
    \ < 2) return l[0];\n\tmid = count / 2;\n\tfor (i = mid; i < count; i++) \n\t\t\
    if (l[i] < l[mid]) \n\t\t\tswap(l[i], l[mid]);\n\tswap(l[mid], l[count - 1]);\n\
    \treturn l[mid];\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n\tlong i, mid, count = l.length;\n\
    \tif (count < 2) return l[0];\n\tmid = count / 2;\n\tfor (i = mid; i < count;\
    \ i++) \n\t\tif (l[i] < l[mid]) \n\t\t\tswap(l[i], l[mid]);\n\tswap(l[mid], l[count\
    \ - 1]);\n\treturn l[mid];\n}\n/*\nReturn median of elements in the array l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> ", "{\n    long l = std.math.max(l);\n\
    \    long r = std.math.min(l);\n    return std.math.midpoint(r,l);\n}", "{\n \
    \   float m = l[0];\n    for(int i = 1; i < l.length; ++i)\n        if(l[i] <\
    \ m)\n            m = l[i];\n    return m;\n}", "{\n\tlong mid = l.length/2;\n\
    \tif (l.length%2 == 0)\n\t\treturn std.math.mid(l, mid);\n\telse\n\t\treturn std.math.mid(l,\
    \ mid, l.length-1);\n}", "{\n    long n = l.length;\n    if (n < 1) return 0;\n\
    \    float m = l[0];\n    for (int i = 1; i < n; ++i)\n    {\n        if (l[i]\
    \ < m)\n        {\n            m = l[i];\n        }\n    }\n    return m;\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(long l[]) \n{\n    long n = l.length;\n    if (n < 1) return\
    \ 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n    {\n        if\
    \ (l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n    return m;\n\
    }\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L,\
    \ 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(float l[]) \n{\n    long n = l.length;\n    if (n < 1)\
    \ return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n    {\n   \
    \     if (l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(double l[]) \n{\n    long n = l.length;\n    if (n < 1)\
    \ return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n    {\n   \
    \     if (l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(long long l[]) \n{\n    long n = l.length;\n    if (n\
    \ < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n    {\n\
    \        if (l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the array ", "{\n    int n\
    \ = l.length;\n    if (n < 1) \n        throw new IllegalArgumentException(\"\
    Median of empty list\");\n    sort(l);\n    return l[n / 2];\n}\n</code>\n<|/\
    \ a tags=java,arrays,sorting |>\n<| c |>\nThis doesn't answer the question. OP\
    \ asked for median of medians, not median of averages.\n<|/ c |>\n<| c |>\nI believe\
    \ this answer is correct for median of medians. I believe it is the correct answer\
    \ to the question asked.\n<|/ c |>\n<| c |>\nThe question asked for median of\
    \ medians, not median of averages.\n<|/ c |>\n<| c |>\nThis answer is not correct.\
    \ Median of medians is a different thing than median of averages. Median of averages\
    \ is the average of the medians, not the median.\n<|/ c |>\n<| c |>\nThe question\
    \ asked for median of medians, not median of averages.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\npublic static double median(double[] arr) {\n    Arrays.sort(arr);\n\
    \    int mid = arr.length / 2;\n    if (arr.length % 2 == 1) {\n        return\
    \ arr[mid];\n    } else {\n        return (arr[mid] + arr[mid-1]) / 2.0;\n   \
    \ }\n}\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| c |>\nThis doesn't answer\
    \ the question. OP asked for median of medians, not median of averages.\n<|/ c\
    \ |>\n<| c |>\nThis answer is correct for median of medians. I believe it is the\
    \ correct answer to the question asked.\n<|/ c |>\n<| c |>\nThis answer is incorrect\
    \ for median of averages. Median of averages is the average of the medians, not\
    \ the median.\n<|/ c |>\n<| c |>\nThis answer is incorrect for median of averages.\
    \ Median of averages is the average of the medians, not the median.\n<|/ c |>\n\
    <| c |>\nThis answer is incorrect for median of averages. Median of averages is\
    \ the average of the medians, not the median.\n<|/ c |>\n<| a |>\n<code>\npublic\
    \ static double median(double[] arr) {\n    Arrays.sort(arr);\n    int mid = arr.length\
    \ / 2;\n    if (arr.length % 2 == 1) {\n        return arr[mid];\n    } else {\n\
    \        return (arr[mid] + arr[mid-1]) / 2.0;\n    }\n}\n</code>\n<|/ a dscore=5\
    \ tags=java,arrays,", "{\n    long mid = l.length / 2;\n    float m1 = l[mid];\n\
    \    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n    float m4 = l[mid-3];\n\
    \    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n    float m7 = l[mid-6];\n\
    \    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n    float m10 = l[mid-9];\n\
    \    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n    float m13 = l[mid-12];\n\
    \    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n    float m16 = l[mid-15];\n\
    \    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n    float m19 = l[mid-18];\n\
    \    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n    float m22 = l[mid-21];\n\
    \    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n    float m25 = l[mid-24];\n\
    \    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n    float m28 = l[mid-27];\n\
    \    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n    float m31 = l[mid-30];\n\
    \    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n    float m34 = l[mid-33];\n\
    \    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n    float m37 = l[mid-36];\n\
    \    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n    float m40 = l[mid-39];\n\
    \    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n    float m43 = l[mid-42];\n\
    \    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n", "{\n\tfloat med =\
    \ std.math._median(l);\n\treturn med;\n}", "{\n\tlong mid = l.length/2;\n\tif\
    \ (l.length % 2 == 0)\n\t\treturn std.math.toFloat(l[mid]);\n\telse\n\t\treturn\
    \ std.math.toFloat(l[mid-1] + l[mid]);\n}", "{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l, mid);\n\
    \    return std.fdiv(leftMedian, rightMedian);\n}", "{\n    long mid = l.length\
    \ / 2;\n    float m = (float) l[mid];\n    for(int i = mid; i < l.length; i++)\
    \ \n    {\n        if(l[i] < m) \n        {\n            m = l[i];\n        }\n\
    \    }\n    return m;\n}", "{\n    long i, mid;\n    float m = 0;\n    \n    mid\
    \ = l.length / 2;\n    \n    for (i = 0; i < mid; i++) \n    {\n        if (l[i]\
    \ < l[mid]) \n        {\n            m = l[i];\n        }\n    }\n    \n    return\
    \ m;\n}", "{\n    long mid = l.length / 2;\n    float midVal = l[mid];\n    float\
    \ leftMedian = median(l, 0, mid);\n    float rightMedian = median(l, mid+1, l.length);\n\
    \    return (midVal + rightMedian) / 2;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start,\
    \ int end) \n{\n    float leftMedian = median(l, start, start+end-1);\n    float\
    \ rightMedian = median(l, start+1, end);\n    return (l[start] + rightMedian)\
    \ / 2;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long[] l, int start, int end) \n{\n    float\
    \ leftMedian = median(l, start, start+end-1);\n    float rightMedian = median(l,\
    \ start+1, end);\n    return (l[start] + rightMedian) / 2;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end) \n{\n    float leftMedian = median(l, start, start+end-1);\n\
    \    float rightMedian = median(l, start+1, end);\n    return (l[start] + rightMedian)\
    \ / 2;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long[] l, int start, int end) \n{\n    float\
    \ leftMedian = median(l, start, start+end-1);\n    float rightMedian = median(l,\
    \ start+1, end);\n    return (l[start] + rightMedian) / 2;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1", "{\n    long mid = l.length\
    \ / 2;\n    float m1 = l[mid];\n    float m2 = l[mid-1];\n    if (m1 < m2)\n \
    \       return m1;\n    return m2;\n}\n</code>\n<|/ a tags=c#,median,arrays |>\n\
    <| c |>\nThis doesn't work. `median([3L, 1L, 2L, 4L, 5L])` returns `3L` instead\
    \ of `3`.\n<|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting it. I\
    \ just added the missing `return` statement. Thanks for pointing it out.\n<|/\
    \ c |>\n<| c |>\n: I added a version that doesn't require the array to be sorted.\n\
    <|/ c |>\n<| c |>\n: I added a version that doesn't require the array to be sorted.\n\
    <|/ c |>\n<| c |>\n: I added a version that doesn't require the array to be sorted.\n\
    <|/ c |>\n<| a tags=c#,median,arrays |>\n<code>\npublic double Median(List<int>\
    \ list)\n{\n    double median = 0;\n    double temp = 0;\n    int count = 0;\n\
    \    foreach (int i in list)\n    {\n        count++;\n        if (count % 2 ==\
    \ 0)\n        {\n            temp = i;\n        }\n        else\n        {\n \
    \           if (temp > i)\n            {\n                temp = i;\n        \
    \    }\n        }\n    }\n    median = temp;\n    return median;\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nThis doesn't work. `median([3L, 1L, 2L, 4L, 5L])`\
    \ returns `3L` instead of `3`.\n<|/ c |>\n<| c |>\nThis doesn't work. median([3L,\
    \ 1L, 2L, 4L, 5L]) returns 3L instead of 3.\n<|/ c |>\n<| c |>\nThis doesn't work.\
    \ median([3L, 1L, 2L, 4L, 5L]) returns 3L instead of 3.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>\npublic double Median(List<int> list)\n{\n    double median = 0;\n\
    \    double temp = 0;\n    int count = 0;\n    foreach (int i in list)\n    {\n\
    \        count++;\n        if (count % 2 == 0)\n        {\n            temp =\
    \ i;\n        }\n        else\n        {\n            if (temp > i)\n        \
    \    {\n                temp = i;\n            }\n        }\n    }\n    median\
    \ = temp;\n    return median", "{\n\tlong mid = l.length / 2;\n\tfloat m = (float)l[mid];\n\
    \tfor (int i = mid; i < l.length; ++i)\n\t{\n\t\tm = m > l[i] ? m : l[i];\n\t\
    }\n\treturn m;\n}", "{\n    long mid = l.length / 2;\n    float m = (float) l[mid];\n\
    \    for(int i = 1; i < l.length; i++) \n    {\n        if(l[i] < m) \n      \
    \  {\n            m = l[i];\n        }\n    }\n    return m;\n}", "{\n    long\
    \ mid = l.length / 2;\n    float m1 = l[mid];\n    float m2 = l[mid-1];\n    float\
    \ m3 = l[mid-2];\n    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float\
    \ m6 = l[mid-5];\n    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float\
    \ m9 = l[mid-8];\n    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float\
    \ m12 = l[mid-11];\n    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n \
    \   float m15 = l[mid-14];\n    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n\
    \    float m18 = l[mid-17];\n    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n\
    \    float m21 = l[mid-20];\n    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n\
    \    float m24 = l[mid-23];\n    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n\
    \    float m27 = l[mid-26];\n    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n\
    \    float m30 = l[mid-29];\n    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n\
    \    float m33 = l[mid-32];\n    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n\
    \    float m36 = l[mid-35];\n    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n\
    \    float m39 = l[mid-38];\n    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n\
    \    float m42 = l[mid-41];\n    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n\
    \    float m45 = l[mid-44];\n", "{\n    int n = l.length;\n    if (n < 1) return\
    \ 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < m) m = l[i];\n    }\n    return m;\n}", "{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m) \n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}", "{\n    long length = l.length;\n    if (length == 0)\
    \ return 0;\n    float median = l[length / 2];\n    for (int i = 1; i < length;\
    \ i++) \n    {\n        if (l[i] < median) \n        {\n            median = l[i];\n\
    \        }\n    }\n    return median;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    long length = l.length;\n    if (length == 0) return 0;\n    float median\
    \ = l[length / 2];\n    for (int i = 1; i < length; i++) \n    {\n        if (l[i]\
    \ < median) \n        {\n            median = l[i];\n        }\n    }\n    return\
    \ median;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long length = l.length;\n\
    \    if (length == 0) return 0;\n    float median = l[length / 2];\n    for (int\
    \ i = 1; i < length; i++) \n    {\n        if (l[i] < median) \n        {\n  \
    \          median = l[i];\n        }\n    }\n    return median;\n}\n/*\nReturn\
    \ median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n \
    \   3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(double l[]) \n{\n    long length = l.length;\n    if (length == 0)\
    \ return 0;\n    float median = l[length / 2];\n    for (int i = 1; i < length;\
    \ i++) \n    {\n        if (l[i] < median) \n        {\n            median = l[i];\n\
    \        }\n    }\n    return median;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long long l[]) \n\
    {\n    long length = l.length;\n    if (length == 0) return 0;\n    float median\
    \ = l[length / ", "{\n    long mid = l.length / 2;\n    float midVal = l[mid];\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l);\n    float\
    \ median;\n    if (leftMedian > rightMedian) {\n        median = leftMedian;\n\
    \    } else {\n        median = rightMedian;\n    }\n    return midVal;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThe median of a set of numbers is defined as the middle\
    \ number in the set. Your code returns the median of the numbers in the array\
    \ in ascending order. Your code also returns the median of the numbers in the\
    \ array in descending order. Your code also returns the median of the numbers\
    \ in the array in ascending order. Your code also returns the median of the numbers\
    \ in the array in descending order. Your code also returns the median of the numbers\
    \ in the array in ascending order. Your code also returns the median of the numbers\
    \ in the array in descending order. Your code also returns the median of the numbers\
    \ in the array in ascending order. Your code also returns the median of the numbers\
    \ in the array in descending order. Your code also returns the median of the numbers\
    \ in the array in ascending order. Your code also returns the median of the numbers\
    \ in the array in descending order. Your code also returns the median of the numbers\
    \ in the array in ascending order. Your code also returns the median of the numbers\
    \ in the array in descending order. Your code also returns the median of the numbers\
    \ in the array in ascending order. Your code also returns the median of the numbers\
    \ in the array in descending order. Your code also returns the median of the numbers\
    \ in the array in ascending order. Your code also returns the median of the numbers\
    \ in the array in descending order. Your code also returns the median of the numbers\
    \ in the array in ascending order. Your code also returns the median of the numbers\
    \ in the array in descending order. Your code also returns the median of the numbers\
    \ in the array in ascending order. Your code also returns the median of the numbers\
    \ in the array in descending order. Your code also returns the median of the numbers\
    \ in the array in ascending order. Your code also returns the median of the numbers\
    \ in the array in descending order. Your code also returns the median of the numbers\
    \ in the array in ascending order. Your code also returns the median of the numbers\
    \ in the array in descending order. Your code also returns the median of the numbers\
    \ in the array in ascending order. Your code also returns the median of the numbers\
    \ in the array in descending order. Your code also returns the median of the numbers\
    \ in the array in ascending order. Your code also returns the median of the numbers\
    \ in the array in descending order. Your code also returns the median of the numbers\
    \ in the array in ", "{\n    long mid = l.length / 2;\n    float f = l[mid];\n\
    \    for(int i = mid; i < l.length; i++) \n    {\n        f = std.max(std.min(l[i],\
    \ f), l[i - 1]);\n    }\n    return f;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(short[] l) \n{\n\
    \    short mid = l.length / 2;\n    float f = l[mid];\n    for(int i = mid; i\
    \ < l.length; i++) \n    {\n        f = std.max(std.min(l[i], f), l[i - 1]);\n\
    \    }\n    return f;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(int[] l) \n{\n    int mid = l.length\
    \ / 2;\n    float f = l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n\
    \        f = std.max(std.min(l[i], f), l[i - 1]);\n    }\n    return f;\n}\n/*\n\
    Return median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(float[] l) \n{\n    float mid = l.length / 2;\n    float f = l[mid];\n\
    \    for(int i = mid; i < l.length; i++) \n    {\n        f = std.max(std.min(l[i],\
    \ f), l[i - 1]);\n    }\n    return f;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double[] l) \n{\n\
    \    double mid = l.length / 2;\n    double f = l[mid];\n    for(int i = mid;\
    \ i < l.length; i++) \n    {\n        f = std.max(std.min(l[i], f), l[i - 1]);\n\
    \    }\n    return f;\n", "{\n    long l = length(l);\n    if (l % 2 == 0)\n \
    \       return std.math.mid(l);\n    \n    long mid = l / 2;\n    \n    float\
    \ a = l[mid];\n    float b = l[mid-1];\n    \n    return std.math.mid((a + b)\
    \ / 2);\n}", "{\n    long mid = l.length / 2;\n    float m1 = l[mid];\n    float\
    \ m2 = l[mid-1];\n    float m3 = l[mid-2];\n    float m4 = l[mid-3];\n    float\
    \ m5 = l[mid-4];\n    float m6 = l[mid-5];\n    float m7 = l[mid-6];\n    float\
    \ m8 = l[mid-7];\n    float m9 = l[mid-8];\n    float m10 = l[mid-9];\n    float\
    \ m11 = l[mid-10];\n    float m12 = l[mid-11];\n    float m13 = l[mid-12];\n \
    \   float m14 = l[mid-13];\n    float m15 = l[mid-14];\n    float m16 = l[mid-15];\n\
    \    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n    float m19 = l[mid-18];\n\
    \    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n    float m22 = l[mid-21];\n\
    \    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n    float m25 = l[mid-24];\n\
    \    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n    float m28 = l[mid-27];\n\
    \    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n    float m31 = l[mid-30];\n\
    \    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n    float m34 = l[mid-33];\n\
    \    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n    float m37 = l[mid-36];\n\
    \    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n    float m40 = l[mid-39];\n\
    \    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n    float m43 = l[mid-42];\n\
    \    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n", "{\n    long mid =\
    \ l.length / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.subarray(0,\
    \ mid));\n    float rightMedian = median(l.subarray(mid+1, l.length));\n    return\
    \ midVal + ((leftMedian + rightMedian) / 2);\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI believe this answer should be accepted as the correct one. Thank you\
    \ for sharing your knowledge.\n<|/ c |>\n<| a dscore=2 |>\nThe median of a set\
    \ of numbers is defined as the value that is the middle value of a set of numbers.\
    \ \nThe median of a set of numbers is defined as the value that is the middle\
    \ value of a set of numbers. \nThe median of a set of numbers is defined as the\
    \ value that is the middle value of a set of numbers. \nThe median of a set of\
    \ numbers is defined as the value that is the middle value of a set of numbers.\
    \ \nThe median of a set of numbers is defined as the value that is the middle\
    \ value of a set of numbers. \nThe median of a set of numbers is defined as the\
    \ value that is the middle value of a set of numbers. \nThe median of a set of\
    \ numbers is defined as the value that is the middle value of a set of numbers.\
    \ \nThe median of a set of numbers is defined as the value that is the middle\
    \ value of a set of numbers. \nThe median of a set of numbers is defined as the\
    \ value that is the middle value of a set of numbers. \nThe median of a set of\
    \ numbers is defined as the value that is the middle value of a set of numbers.\
    \ \nThe median of a set of numbers is defined as the value that is the middle\
    \ value of a set of numbers. \nThe median of a set of numbers is defined as the\
    \ value that is the middle value of a set of numbers. \nThe median of a set of\
    \ numbers is defined as the value that is the middle value of a set of numbers.\
    \ \nThe median of a set of numbers is defined as the value that is the middle\
    \ value of a set of numbers. \nThe median of a set of numbers is defined as the\
    \ value that is the middle value of a set of numbers. \nThe median of a set of\
    \ numbers is defined as the value that is the middle value of a set of numbers.\
    \ \nThe median of a set of numbers is defined as the value that is the middle\
    \ value of a set of numbers. \nThe median of a set of numbers is defined as the\
    \ value that is the middle value of a set of numbers. \nThe median of a set of\
    \ numbers is defined as the value that is the middle value of a set of numbers.\
    \ \nThe median of a set of numbers is defined as the value that is the middle\
    \ value of a set of numbers. \nThe median of a set of numbers is defined as the\
    \ value that is the middle value of a set of numbers. \nThe median of a set of\
    \ numbers is defined as the value that is the middle value of a set of number",
  "{\n    long mid = l.length / 2;\n    if (l.length % 2 == 1) \n    {\n        return\
    \ std.math.mid(l, mid);\n    }\n    else \n    {\n        return std.math.mid(l,\
    \ mid, l.length - mid);\n    }\n}", "{\n    long mid = l.length / 2;\n    float\
    \ midVal = l[mid];\n    float leftMedian = median(l.subarray(0, mid));\n    float\
    \ rightMedian = median(l.subarray(mid, l.length));\n    return midVal + ((leftMedian\
    \ + rightMedian) / 2);\n}\n</code>\n<|/ a tags=median,java,arrays |>\n<| c |>\n\
    This code doesn't work if you have a list of negative numbers. I fixed it by changing\
    \ `float midVal = l[mid];` to `float midVal = -l[mid];`\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\npublic double median(int[] arr) {\n    int mid = arr.length / 2;\n\
    \    if (arr.length % 2 == 0) {\n        return arr[mid];\n    } else {\n    \
    \    return (arr[mid-1] + arr[mid]) / 2;\n    }\n}\n</code>\n<|/ a tags=median,java,arrays\
    \ |>\n<| c |>\nThis code doesn't work if you have a list of negative numbers.\
    \ I fixed it by changing `int mid = arr.length / 2;` to `int mid = arr.length\
    \ / 2 - 1;`\n<|/ c |>\n<| a tags=median,java,arrays |>\n<code>\npublic double\
    \ median(int[] arr) {\n    int mid = arr.length / 2;\n    if (arr.length % 2 ==\
    \ 0) {\n        return arr[mid];\n    } else {\n        return (arr[mid-1] + arr[mid])\
    \ / 2;\n    }\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=median,java,arrays |>\n\
    <code>\npublic double median(int[] arr) {\n    int mid = arr.length / 2;\n   \
    \ if (arr.length % 2 == 0) {\n        return arr[mid];\n    } else {\n       \
    \ return (arr[mid-1] + arr[mid]) / 2;\n    }\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\npublic double median(int[] arr) {\n    int mid = arr.length\
    \ / 2;\n    if (arr.length % 2 == 0) {\n        return arr[mid];\n    } else {\n\
    \        return (arr[mid-1] + arr[mid]) / 2;\n    }\n}\n</code>\n<|/ a tags=median,java,arrays\
    \ |>\n<| a tags=median,java,arrays |>\n<code>\npublic double median(int[] arr)\
    \ {\n    int mid = arr.length / 2;\n    if (arr.length % 2 == 0) {\n        return\
    \ arr[mid];\n    } else {\n        return (arr[mid-1] + arr[mid]) / 2;\n    }\n\
    }\n</code>\n<|/ a dscore", "{\n    long mid = l.length / 2;\n    float m = 0;\n\
    \    float sum = 0;\n    float count = 0;\n    for(int i = 0; i < l.length; i++)\n\
    \    {\n        sum += l[i];\n        if(sum >= mid)\n        {\n            m\
    \ = sum / mid;\n            count++;\n        }\n    }\n    if(count > 0)\n  \
    \  {\n        return m;\n    }\n    else\n    {\n        return l[l.length-1];\n\
    \    }\n}", "{\n    long mid = l.length / 2;\n    float f = l[mid];\n    for(int\
    \ i = 0; i < mid; i++) \n    {\n        if(l[i] < f) \n            f = l[i];\n\
    \    }\n    return f;\n}\n</code>\n<|/ a tags=c++,algorithm,sorting |>\n<| c |>\n\
    The median of a set of N numbers is defined as the value that appears in the middle\
    \ of the set of N numbers. So the median of a set of N numbers is defined as the\
    \ value that appears in the middle of the set of N numbers. So the median of a\
    \ set of N numbers is defined as the value that appears in the middle of the set\
    \ of N numbers. So the median of a set of N numbers is defined as the value that\
    \ appears in the middle of the set of N numbers. So the median of a set of N numbers\
    \ is defined as the value that appears in the middle of the set of N numbers.\
    \ So the median of a set of N numbers is defined as the value that appears in\
    \ the middle of the set of N numbers. So the median of a set of N numbers is defined\
    \ as the value that appears in the middle of the set of N numbers. So the median\
    \ of a set of N numbers is defined as the value that appears in the middle of\
    \ the set of N numbers. So the median of a set of N numbers is defined as the\
    \ value that appears in the middle of the set of N numbers. So the median of a\
    \ set of N numbers is defined as the value that appears in the middle of the set\
    \ of N numbers.\n<|/ c |>\n<| c |>\nThe median of a set of N numbers is defined\
    \ as the value that appears in the middle of the set of N numbers. So the median\
    \ of a set of N numbers is defined as the value that appears in the middle of\
    \ the set of N numbers. So the median of a set of N numbers is defined as the\
    \ value that appears in the middle of the set of N numbers. So the median of a\
    \ set of N numbers is defined as the value that appears in the middle of the set\
    \ of N numbers. So the median of a set of N numbers is defined as the value that\
    \ appears in the middle of the set of N numbers. So the median of a set of N numbers\
    \ is defined as the value that appears in the middle of the set of N numbers.\
    \ So the median of a set of N numbers is defined as the value that appears in\
    \ the middle of the set of N numbers. So the median of a set of N numbers is defined\
    \ as the value that appears in the middle of the set of N numbers. So the median\
    \ of a set of N numbers is defined as the value that appears in the middle of\
    \ the set of N numbers.\n<|/ c |>\n<| c |>\nThe median of a set of N numbers is\
    \ defined as the value that appears in the middle of the set of N numbers. So\
    \ the median of a set of N numbers is defined as the value that appears in the\
    \ middle of the set of N numbers. So the median of a set of N numbers is defined\
    \ as the ", "{\n\tlong med = std.math.median(l);\n\treturn med;\n}", "{\n    long\
    \ mid = l.length / 2;\n    if (l.length % 2 == 1)\n        return std.math.toFloat(l[mid]);\n\
    \    else \n        return std.math.toFloat(l[mid]) + std.math.toFloat(l[mid+1]);\n\
    }\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L,\
    \ 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(short[] l) \n{\n    short mid = l.length / 2;\n    if\
    \ (l.length % 2 == 1)\n        return std.math.toFloat(l[mid]);\n    else \n \
    \       return std.math.toFloat(l[mid]) + std.math.toFloat(l[mid+1]);\n}\n/*\n\
    Return median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(float[] l) \n{\n    float mid = l.length / 2;\n    if (l.length %\
    \ 2 == 1)\n        return std.math.toFloat(l[mid]);\n    else \n        return\
    \ std.math.toFloat(l[mid]) + std.math.toFloat(l[mid+1]);\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double[]\
    \ l) \n{\n    double mid = l.length / 2;\n    if (l.length % 2 == 1)\n       \
    \ return std.math.toFloat(l[mid]);\n    else \n        return std.math.toFloat(l[mid])\
    \ + std.math.toFloat(l[mid+1]);\n}\n/*\nReturn median of elements in the array\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(byte[] l) \n{\n    byte\
    \ mid = l.length / 2;\n    if (l.length % 2 == 1)\n        return std.math.toFloat(l[mid]);\n\
    \    else \n        return std.math.toFloat(l[mid]", "{\n    long n = l.length;\n\
    \    if (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}", "{\n    int n\
    \ = l.length;\n    if (n < 1) return 0;\n    sort(l);\n    return l[n / 2];\n}",
  "{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int i =\
    \ 1; i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n            m\
    \ = l[i];\n        }\n    }\n    return m;\n}", "{\n\tlong mid = l.length / 2;\n\
    \tif (l.length % 2 == 1) \n\t\treturn std.math::median(l);\n\telse \n\t\treturn\
    \ std.math::median(l, 0, mid);\n}", "{\n    long l = length(l);\n    if (l % 2\
    \ == 1) return std.math.mid(l);\n    else return std.math.mid(l, l / 2);\n}",
  "{\n    long mid = l.length / 2;\n    float median;\n    if (l.length%2 == 0) \n\
    \    {\n        median = std.math.mid(l, 0, mid);\n    }\n    else \n    {\n \
    \       median = std.math.mid(l, mid, l.length);\n    }\n    return median;\n}",
  "{\n    long mid = l.length / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n\
    \    float c = l[mid+1];\n    float d = l[mid];\n    float e = (a + b + c + d)\
    \ / 4;\n    return e;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float mid = l.length\
    \ / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n\
    \    float d = l[mid];\n    float e = (a + b + c + d) / 4;\n    return e;\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(double l[]) \n{\n    double mid = l.length / 2;\n    double\
    \ a = l[mid];\n    double b = l[mid-1];\n    double c = l[mid+1];\n    double\
    \ d = l[mid];\n    double e = (a + b + c + d) / 4;\n    return e;\n}\n/*\nReturn\
    \ median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n \
    \   3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(long l[]) \n{\n    long mid = l.length / 2;\n    long a = l[mid];\n\
    \    long b = l[mid-1];\n    long c = l[mid+1];\n    long d = l[mid];\n    long\
    \ e = (a + b + c + d) / 4;\n    return e;\n}\n/*\nReturn median of elements in\
    \ the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    float mid = l.length / 2;\n    float a = l[", "{\n\tfloat m = l[0];\n\tfor\
    \ (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] < m)\n\t\t\tm = l[i];\n\t\
    }\n\treturn m;\n}", "{\n    long mid = l.length / 2;\n    float leftMedian = median(l);\n\
    \    float rightMedian = median(l.subarray(0, mid));\n    return std.math.min(leftMedian,\
    \ rightMedian);\n}", "{\n    int n = l.length;\n    if (n < 1) return 0;\n   \
    \ float m = l[0];\n    for (int i = 1; i < n; ++i) {\n        if (l[i] < m) m\
    \ = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements in the array\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    int\
    \ n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for (int i\
    \ = 1; i < n; ++i) {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n\
    }\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L,\
    \ 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(float l[]) \n{\n    int n = l.length;\n    if (n < 1)\
    \ return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i) {\n        if\
    \ (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; ++i) {\n        if (l[i] < m) m = l[i];\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(char l[]) \n{\n    int n = l.length;\n    if (n < 1) return\
    \ 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0", "{\n    long mid = l.length / 2;\n   \
    \ float f = l[mid];\n    float f1 = l[mid-1];\n    float f2 = l[mid+1];\n    float\
    \ f3 = l[mid+2];\n    float f4 = l[mid+3];\n    float f5 = l[mid+4];\n    float\
    \ f6 = l[mid+5];\n    float f7 = l[mid+6];\n    float f8 = l[mid+7];\n    float\
    \ f9 = l[mid+8];\n    float f10 = l[mid+9];\n    float f11 = l[mid+10];\n    float\
    \ f12 = l[mid+11];\n    float f13 = l[mid+12];\n    float f14 = l[mid+13];\n \
    \   float f15 = l[mid+14];\n    float f16 = l[mid+15];\n    float f17 = l[mid+16];\n\
    \    float f18 = l[mid+17];\n    float f19 = l[mid+18];\n    float f20 = l[mid+19];\n\
    \    float f21 = l[mid+20];\n    float f22 = l[mid+21];\n    float f23 = l[mid+22];\n\
    \    float f24 = l[mid+23];\n    float f25 = l[mid+24];\n    float f26 = l[mid+25];\n\
    \    float f27 = l[mid+26];\n    float f28 = l[mid+27];\n    float f29 = l[mid+28];\n\
    \    float f30 = l[mid+29];\n    float f31 = l[mid+30];\n    float f32 = l[mid+31];\n\
    \    float f33 = l[mid+32];\n    float f34 = l[mid+33];\n    float f35 = l[mid+34];\n\
    \    float f36 = l[mid+35];\n    float f37 = l[mid+36];\n    float f38 = l[mid+37];\n\
    \    float f39 = l[mid+38];\n    float f40 = l[mid+39];\n    float f41 = l[mid+40];\n\
    \    float f42 = l[mid+41];\n    float f43 = l[", "{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n\
    \    }\n    else \n    {\n        return std.math.mid(l, mid, l.length - mid);\n\
    \    }\n}", "{\n    long mid = l.length / 2;\n    float median;\n    if (l.length%2\
    \ == 0)\n        median = std.math.mid(l, 0, mid);\n    else\n        median =\
    \ std.math.mid(l, mid, l.length);\n    return median;\n}", "{\n    long mid =\
    \ l.length / 2;\n    float m = (float)l[mid];\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n      \
    \  }\n    }\n    return m;\n}", "{\n    long mid = l.length / 2;\n    float a\
    \ = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n    float d = (a\
    \ + b + c + d) / 4;\n    return d;\n}", "{\n    long mid = l.length / 2;\n   \
    \ float a = (float) l.length;\n    float b = (float) mid;\n    float c = a + b;\n\
    \    float d = (float) l.length;\n    float e = (float) l.length;\n    float f\
    \ = d / 2;\n    float g = e / 2;\n    float h = (float) l.length;\n    float i\
    \ = h / 2;\n    float j = (float) l.length;\n    float k = (float) l.length;\n\
    \    float l = (float) l.length;\n    float m = (float) l.length;\n    float n\
    \ = (float) l.length;\n    float o = (float) l.length;\n    float p = (float)\
    \ l.length;\n    float q = (float) l.length;\n    float r = (float) l.length;\n\
    \    float s = (float) l.length;\n    float t = (float) l.length;\n    float u\
    \ = (float) l.length;\n    float v = (float) l.length;\n    float w = (float)\
    \ l.length;\n    float x = (float) l.length;\n    float y = (float) l.length;\n\
    \    float z = (float) l.length;\n    float aa = (float) l.length;\n    float\
    \ ab = (float) l.length;\n    float ac = (float) l.length;\n    float ad = (float)\
    \ l.length;\n    float ae = (float) l.length;\n    float af = (float) l.length;\n\
    \    float ag = (float) l.length;\n    float ah = (float) l.length;\n    float\
    \ ai = (float) l.length;\n    float aj = (float) l.length;\n    float ak = (float)\
    \ l.length;\n    float al = (float) l.length;\n    float am = (float) l.length;\n\
    \    float an = (float) l.length;\n    float ao = (float) l.length;\n    float\
    \ ap = (float) l.length;\n    float aq = (float) l.length;\n    float ar = (float)\
    \ l.length;\n    float as = (float) l.length;\n    float at = (float) l.length;\n\
    \    float au = (float) l.length;\n    float av = (float) l.length;\n    float\
    \ aw = (float) l.length;\n    float ax = (float) l.length;\n    float ay = (float)\
    \ l.length;\n    float az = (float) l.length;\n    float ba = (float) l.length;\n\
    \    float bb = (float) l.length;\n    float bc = (float) l.length;\n    float\
    \ bd = (float) l.length;\n    float be = (float) l.length;\n    ", "{\n    long\
    \ mid = l.length / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l,\
    \ mid);\n    }\n    else \n    {\n        float m1 = median(l);\n        float\
    \ m2 = median(l);\n        return std.math.mid(l, mid, mid, std.math.mid(m1, m2));\n\
    \    }\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long[] l, int start, int end) \n{\n    if (start\
    \ > end) \n    {\n        throw new Exception(\"Median of empty array\");\n  \
    \  }\n    if (start == end) \n    {\n        return l[start];\n    }\n    float\
    \ m1 = median(l, start, start+1);\n    float m2 = median(l, start+1, end);\n \
    \   return std.math.mid(l, start, end, std.math.mid(m1, m2));\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end, int step) \n{\n    if (start > end) \n    {\n       \
    \ throw new Exception(\"Median of empty array\");\n    }\n    if (start == end)\
    \ \n    {\n        return l[start];\n    }\n    float m1 = median(l, start, start+step);\n\
    \    float m2 = median(l, start+step, end);\n    return std.math.mid(l, start,\
    \ end, std.math.mid(m1, m2));\n}\n/*\nReturn median of elements in the array l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start, int end, int\
    \ step, float stepsize) \n{\n    if (start > end) \n    {\n        throw new Exception(\"\
    Median of empty array\");\n    }\n    if (start == end) \n    {\n        return\
    \ l[start];\n    }\n    float m1 = median(l, start, start+step);\n    float m2\
    \ = median(l, start+step, end);\n    return std.math.mid", "{\n    long mid =\
    \ l.length / 2;\n    float m = 0;\n    \n    for (int i = 0; i < mid; i++)\n \
    \   {\n        m += l[i];\n    }\n    \n    for (int i = mid; i < l.length; i++)\n\
    \    {\n        m += l[i];\n    }\n    \n    return m / mid;\n}", "{\n    long\
    \ mid = l.length / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.subarray(0,\
    \ mid));\n    float rightMedian = median(l.subarray(mid+1, l.length));\n    return\
    \ midVal + (leftMedian + rightMedian) / 2;\n}\n</code>\n<|/ a tags=java,arrays\
    \ |>\n<| c |>\nThis code is not working when there are negative numbers in the\
    \ array\n<|/ c |>\n<| c |>\nI tested it and it works fine for me. Can you give\
    \ an example where it doesn't work?\n<|/ c |>\n<| c |>\nIt works fine for me too.\
    \ Can you give an example where it doesn't work?\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine for me. Can you give an example where it doesn't work?\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine for me. Can you give an example\
    \ where it doesn't work?\n<|/ c |>\n<| a dscore=5 |>\n<code>\npublic static int\
    \ median(int[] arr) {\n    if (arr.length == 0) return 0;\n    Arrays.sort(arr);\n\
    \    int mid = arr.length / 2;\n    if (arr.length % 2 == 0) {\n        return\
    \ arr[mid];\n    } else {\n        return (arr[mid-1] + arr[mid]) / 2;\n    }\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nThis code is not working when\
    \ there are negative numbers in the array\n<|/ c |>\n<| c |>\nThis code is not\
    \ working when there are negative numbers in the array\n<|/ c |>\n<| c |>\nThis\
    \ code is not working when there are negative numbers in the array\n<|/ c |>\n\
    <| c |>\nThis code is not working when there are negative numbers in the array\n\
    <|/ c |>\n<| c |>\nThis code is not working when there are negative numbers in\
    \ the array\n<|/ c |>\n<| a tags=java,arrays |>\n<code>\npublic static int median(int[]\
    \ arr) {\n    if (arr.length == 0) return 0;\n    Arrays.sort(arr);\n    int mid\
    \ = arr.length / 2;\n    if (arr.length % 2 == 0) {\n        return arr[mid];\n\
    \    } else {\n        return (arr[mid-1] + arr[mid]) / 2;\n    }\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis code is not working when there are negative numbers\
    \ in the array\n<|/ c |>\n<| c |>\nThis code is not working when there are ",
  "{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int i =\
    \ mid; i < l.length; i++) \n    {\n        if(l[i] < m) \n        {\n        \
    \    m = l[i];\n        }\n    }\n    return m;\n}", "{\n    long i, mid;\n  \
    \  float sum = 0;\n    \n    mid = l.length / 2;\n    \n    for (i = 0; i < mid;\
    \ i++)\n        sum += l[i];\n    \n    for (i = mid; i < l.length; i++)\n   \
    \     sum += l[i];\n    \n    return sum / mid;\n}", "{\n\tfloat m = l[0];\n\t\
    for (int i = 1; i < l.length; ++i)\n\t\tm = std.max(m, l[i]);\n\treturn m;\n}",
  "{\n    long mid = l.length / 2;\n    float m = l[mid];\n    for(int i = mid; i\
    \ < l.length; i++) \n    {\n        if(l[i] < m) \n        {\n            m =\
    \ l[i];\n        }\n    }\n    return m;\n}", "{\n    long mid = l.length / 2;\n\
    \    float m = (float)l[mid];\n    for(int i = mid; i < l.length; i++)\n    {\n\
    \        if(l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n  \
    \  return m;\n}", "{\n    long mid = l.length / 2;\n    float median = l[mid];\n\
    \    for(int i = mid; i < l.length; i++)\n    {\n        if(l[i] < median)\n \
    \           median = l[i];\n    }\n    return median;\n}", "{\n\tlong med = std.math.median(l);\n\
    \treturn med;\n}", "{\n    int n = l.length;\n    if (n < 1) return 0;\n    float\
    \ m = l[0];\n    for (int i = 1; i < n; ++i)\n        if (l[i] < m) m = l[i];\n\
    \    return m;\n}", "{\n    long mid = l.length / 2;\n    float midVal = l[mid];\n\
    \    float leftMedian = median(l, 0, mid);\n    float rightMedian = median(l,\
    \ mid+1, l.length);\n    return midVal + ((leftMedian + rightMedian) / 2);\n}\n\
    </code>\n<|/ a tags=java,algorithm,median,arrays |>\n<| c |>\nThis algorithm is\
    \ O(n^2) in worst case and O(n) in best case. Which is worse than O(nlogn).\n\
    <|/ c |>\n<| c |>\nYes, you are right. But the question was about median of medians.\
    \ And this algorithm is O(n) in worst case and O(n) in best case.\n<|/ c |>\n\
    <| c |>\nYes, you are right. But the question was about median of medians. And\
    \ this algorithm is O(n) in worst case and O(n) in best case.\n<|/ c |>\n<| c\
    \ |>\nThe question was about median of medians. And this algorithm is O(n) in\
    \ worst case and O(n) in best case.\n<|/ c |>\n<| c |>\nThe question was about\
    \ median of medians. And this algorithm is O(n) in worst case and O(n) in best\
    \ case.\n<|/ c |>\n<| a dscore=5 |>\n<code>\npublic int median(int[] arr) {\n\
    \    int mid = arr.length / 2;\n    if (arr.length % 2 == 1) {\n        return\
    \ arr[mid];\n    } else {\n        return (arr[mid] + arr[mid-1]) / 2;\n    }\n\
    }\n</code>\n<|/ a tags=java,algorithm,median,arrays |>\n<| c |>\nThis algorithm\
    \ is O(n) in worst case and O(n) in best case.\n<|/ c |>\n<| c |>\nThe question\
    \ was about median of medians. And this algorithm is O(n) in worst case and O(n)\
    \ in best case.\n<|/ c |>\n<| c |>\nThe question was about median of medians.\
    \ And this algorithm is O(n) in worst case and O(n) in best case.\n<|/ c |>\n\
    <| c |>\nThe question was about median of medians. And this algorithm is O(n)\
    \ in worst case and O(n) in best case.\n<|/ c |>\n<| c |>\nThe question was about\
    \ median of medians. And this algorithm is O(n) in worst case and O(n) in best\
    \ case.\n<|/ c |>\n<| a dscore=5 ", "{\n    long n = l.length;\n    if (n < 1)\
    \ return 0;\n    long mid = n / 2;\n    long midValue = l[mid];\n    float leftMedian\
    \ = median(l);\n    float rightMedian = median(l.subarray(mid+1, n));\n    return\
    \ midValue + ((leftMedian + rightMedian) / 2);\n}", "{\n    long l = std.math.toInt(l);\n\
    \    if (l % 2 == 0) return (l+l)/2;\n    else return l;\n}", "{\n    long mid\
    \ = l.length / 2;\n    if (l.length % 2 == 0)\n        return std.math.mid(l,\
    \ mid);\n    else \n        return std.math.mid(l, mid + 1, l.length);\n}", "{\n\
    \    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; ++i)\n    {\n        if (l[i] < m) \n        {\n        \
    \    m = l[i];\n        }\n    }\n    return m;\n}", "{\n    long n = l.length;\n\
    \    if (n < 2) return 0;\n    float a = (float)n;\n    float b = (float)l.length\
    \ / 2;\n    float c = a + b;\n    float d = (float)l.length / 2;\n    float e\
    \ = d / 2;\n    float f = (float)l.length / 2;\n    float g = f / 2;\n    float\
    \ h = (float)l.length / 2;\n    float i = h / 2;\n    float j = (float)l.length\
    \ / 2;\n    float k = j / 2;\n    float l = k / 2;\n    float m = l / 2;\n   \
    \ float n = m / 2;\n    float o = n / 2;\n    float p = o / 2;\n    float q =\
    \ p / 2;\n    float r = q / 2;\n    float s = r / 2;\n    float t = s / 2;\n \
    \   float u = t / 2;\n    float v = u / 2;\n    float w = v / 2;\n    float x\
    \ = w / 2;\n    float y = x / 2;\n    float z = y / 2;\n    float aa = z / 2;\n\
    \    float ab = z / 2;\n    float ac = z / 2;\n    float ad = z / 2;\n    float\
    \ ae = z / 2;\n    float af = z / 2;\n    float ag = z / 2;\n    float ah = z\
    \ / 2;\n    float ai = z / 2;\n    float aj = z / 2;\n    float ak = z / 2;\n\
    \    float al = z / 2;\n    float am = z / 2;\n    float an = z / 2;\n    float\
    \ ao = z / 2;\n    float ap = z / 2;\n    float aq = z / 2;\n    float ar = z\
    \ / 2;\n    float as = z / 2;\n    float at = z / 2;\n    float au = z / 2;\n\
    \    float av = z / 2;\n    float aw = z / 2;\n    float ax = z / 2;\n    float\
    \ ay = z / 2;\n    float az = z / 2;\n    float a0 = z / 2;\n    float a1 = z\
    \ / 2;\n    float a2 = z / 2;\n    float a3 = z / 2;\n    float a4 = z / 2;\n\
    \    float a5 = z / 2;\n    float a6 = z / 2;\n    float a7 = z / 2;\n    float\
    \ a8 = z / 2;\n    float a9 = z / 2;\n    float a10 = z / 2;\n    float a11 =\
    \ z / 2;\n    float ", "{\n    long mid = l.length / 2;\n    float m1 = l[mid];\n\
    \    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n    float m4 = l[mid-3];\n\
    \    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n    float m7 = l[mid-6];\n\
    \    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n    float m10 = l[mid-9];\n\
    \    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n    float m13 = l[mid-12];\n\
    \    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n    float m16 = l[mid-15];\n\
    \    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n    float m19 = l[mid-18];\n\
    \    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n    float m22 = l[mid-21];\n\
    \    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n    float m25 = l[mid-24];\n\
    \    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n    float m28 = l[mid-27];\n\
    \    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n    float m31 = l[mid-30];\n\
    \    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n    float m34 = l[mid-33];\n\
    \    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n    float m37 = l[mid-36];\n\
    \    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n    float m40 = l[mid-39];\n\
    \    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n    float m43 = l[mid-42];\n\
    \    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
