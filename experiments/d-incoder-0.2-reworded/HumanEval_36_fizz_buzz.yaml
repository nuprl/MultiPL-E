name: HumanEval_36_fizz_buzz
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times the\
  \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n   \
  \ >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
  \    3L\n    \n*/\nlong fizz_buzz(long n) \n"
tests: "unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
  \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
  \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
  \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
  \ == 8026L);\n}\nvoid main(){}"
completions: ["{\n    long count = 0;\n    long i;\n    for(i = 1; i <= n; i++) {\n\
    \        if((i % 11) == 0 || (i % 13) == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long x = n;\n    \n    while (x>0)\n    {\n        if ((x % 11) == 0)\n\
    \        {\n            count++;\n        }\n        if ((x % 13) == 0)\n    \
    \    {\n            count++;\n        }\n        x/=11;\n        x/=13;\n    }\n\
    \    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the answer.\
    \ I am not allowed to use any libraries. I guess I should use bitwise operators\
    \ to do this.\n<|/ c |>\n<| c |>\nI added a solution that uses bitwise operators.\n\
    <|/ c |>\n<| c |>\nThanks for the answer. I am not allowed to use any libraries.\
    \ I guess I should use bitwise operators to do this.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that uses bitwise operators.\n<|/ c |>\n<| c |>\nThanks for the answer.\
    \ I am not allowed to use any libraries. I guess I should use bitwise operators\
    \ to do this.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long count = 0;\n\
    \    long i;\n    for(i = 1; i <= n; i++) {\n        if((i % 11) == 0 || (i %\
    \ 13) == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n\tlong count = 0;\n\twhile (n >= 100) {\n\t\tn /= 10;\n\
    \t\tcount++;\n\t}\n\twhile (n >= 10) {\n\t\tif (n % 10 == 7) {\n\t\t\tcount++;\n\
    \t\t}\n\t\tn /= 10;\n\t}\n\treturn count;\n}", "{\n    long count = 0;\n    long\
    \ x = n;\n    long y = n;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    ", "{\n    long count = 0;\n    long temp;\n  \
    \  temp = n;\n    while(temp > 0) {\n        if(temp % 11 == 0 || temp % 13 ==\
    \ 0) {\n            count++;\n        }\n        temp /= 10;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++ |>\n<| c |>\nThis code does not\
    \ work. Try it with 50 and you will see that it will return 0 instead of 2.\n\
    <|/ c |>\n<| c |>\nI tested it with 50 and it returned 2. I will edit my answer\
    \ to include a test case.\n<|/ c |>\n<| c |>\nI tested it with 50 and it returned\
    \ 2. I will edit my answer to include a test case.\n<|/ c |>\n<| c |>\nI tested\
    \ it with 50 and it returned 2. I will edit my answer to include a test case.\n\
    <|/ c |>\n<| c |>\nI tested it with 50 and it returned 2. I will edit my answer\
    \ to include a test case.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long x = n;\n    long y =\
    \ n;\n    long z = 0;\n    long w = 0;\n    \n    while(x != 0)\n    {\n     \
    \   z = x % 11;\n        w = x % 13;\n        \n        if(z == 0 && w == 0)\n\
    \        {\n            count++;\n        }\n        \n        x = x / 10;\n \
    \   }\n    \n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=fizzbuzz,c++\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long remainder = n % 11;\n    long remainder2 = n % 13;\n    long remainder3\
    \ = n % 17;\n    long remainder4 = n % 19;\n    long remainder5 = n % 23;\n  \
    \  long remainder6 = n % 29;\n    long remainder7 = n % 37;\n    long remainder8\
    \ = n % 47;\n    long remainder9 = n % 55;\n    long remainder10 = n % 63;\n \
    \   long remainder11 = n % 79;\n    long remainder12 = n % 87;\n    long remainder13\
    \ = n % 97;\n    long remainder14 = n % 103;\n    long remainder15 = n % 111;\n\
    \    long remainder16 = n % 121;\n    long remainder17 = n % 131;\n    long remainder18\
    \ = n % 141;\n    long remainder19 = n % 151;\n    long remainder20 = n % 161;\n\
    \    long remainder21 = n % 171;\n    long remainder22 = n % 181;\n    long remainder23\
    \ = n % 191;\n    long remainder24 = n % 201;\n    long remainder25 = n % 211;\n\
    \    long remainder26 = n % 221;\n    long remainder27 = n % 231;\n    long remainder28\
    \ = n % 241;\n    long remainder29 = n % 251;\n    long remainder30 = n % 261;\n\
    \    long remainder31 = n % 271;\n    long remainder32 = n % 281;\n    long remainder33\
    \ = n % 291;\n    long remainder34 = n % 301;\n    long remainder35 = n % 311;\n\
    \    long remainder36 = n % 321;\n    long remainder37 = n % 331;\n    long remainder38\
    \ = n % 341;\n    long remainder39 = n % 351;\n    long remainder40 = n % 361;\n\
    \    long remainder41 = n % 371;\n    long remainder42 = n % 381;\n    long remainder43\
    \ = n % 391;\n    long remainder44 = n % 401;\n    long remainder45 = n % 411;\n\
    \    long remainder46 = n % 421;\n    long remainder47 = n % 431;\n    long remainder48\
    \ = n % 441;\n    long remainder49 = n % 451;\n    long remainder50 = n % 461;\n\
    \    long remainder51 = n % 471;\n    long remainder52 = n % 481;\n    long ",
  "{\n    long count = 0;\n    long d = n % 11;\n    long e = (n - d) / 11;\n    long\
    \ f = n % 13;\n    long g = (n - f) / 13;\n    long h = (n - g) / 13;\n    long\
    \ i = (n - h) / 13;\n    long j = (n - i) / 13;\n    long k = (n - j) / 13;\n\
    \    long l = (n - k) / 13;\n    long m = (n - l) / 13;\n    long n = (n - m)\
    \ / 13;\n    long o = (n - n) / 13;\n    long p = (n - o) / 13;\n    long q =\
    \ (n - p) / 13;\n    long r = (n - q) / 13;\n    long s = (n - r) / 13;\n    long\
    \ t = (n - s) / 13;\n    long u = (n - t) / 13;\n    long v = (n - u) / 13;\n\
    \    long w = (n - v) / 13;\n    long x = (n - w) / 13;\n    long y = (n - x)\
    \ / 13;\n    long z = (n - y) / 13;\n    long a = (n - z) / 13;\n    long b =\
    \ (n - a) / 13;\n    long c = (n - b) / 13;\n    long d = (n - c) / 13;\n    long\
    \ e = (n - d) / 13;\n    long f = (n - e) / 13;\n    long g = (n - f) / 13;\n\
    \    long h = (n - g) / 13;\n    long i = (n - h) / 13;\n    long j = (n - i)\
    \ / 13;\n    long k = (n - j) / 13;\n    long l = (n - k) / 13;\n    long m =\
    \ (n - l) / 13;\n    long n = (n - m) / 13;\n    long o = (n - n) / 13;\n    long\
    \ p = (n - o) / 13;\n    long q = (n - p) / 13;\n    long r = (n - q) / 13;\n\
    \    long s = (n - r) / 13;\n    long t = (n - s) / 13;\n    long u = (n - t)\
    \ / 13;\n    long v = (n - u) / 13;\n    long w = (n - v) / 13;\n    long x =\
    \ (n - w) / 13;\n    long y = (n - x) / 13;\n    long z = (n - y) / 13;\n    long\
    \ a = (n - z) / 13;\n    long b = (n - a) / 13;\n    long c = (n - b) / 13;\n\
    \    long d = (n - c) / 13;\n    long e = (n - d) / 13;\n    long f = (n - e)\
    \ / 13;\n    long g = (n - f) / 13;\n    long h = (n - g) / 13;\n    long i =\
    \ (n - ", "{\n    long count = 0;\n    long remainder;\n    \n    while (n>0)\
    \ {\n        remainder = n % 10;\n        if (remainder == 7) {\n            count++;\n\
    \        }\n        n = n / 10;\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    for(long i = n; i > 0; i /= 11L) \n    {\n        if((i % 11L) ==\
    \ 7L) \n        {\n            count += 1;\n        }\n    }\n    for(long i =\
    \ n; i > 0; i /= 13L) \n    {\n        if((i % 13L) == 7L) \n        {\n     \
    \       count += 1;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nI like your solution, but I believe it can be optimized a bit.\
    \ Since you only need to check divisibility by 11 and 13, you can just check them\
    \ separately and add them up. Also, you don't need to check divisibility by 3\
    \ since you already checked divisibility by 11 and 13. Also, you don't need to\
    \ check divisibility by 5 since you already checked divisibility by 11 and 13.\
    \ Also, you don't need to check divisibility by 7 since you already checked divisibility\
    \ by 11 and 13. Also, you don't need to check divisibility by 11 since you already\
    \ checked divisibility by 13. Also, you don't need to check divisibility by 13\
    \ since you already checked divisibility by 11.\n<|/ c |>\n<| c |>\nI agree with\
    \ you that your solution is more elegant and more efficient. Thanks for your suggestions.\n\
    <|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    long temp;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        temp = i;\n        \n        while(temp\
    \ % 11 == 0)\n        {\n            temp /= 11;\n            count++;\n     \
    \   }\n        \n        while(temp % 13 == 0)\n        {\n            temp /=\
    \ 13;\n            count++;\n        }\n    }\n    \n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++ |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long remainder;\n    \n  \
    \  for(long i = n; i > 0; i /= 10) {\n        remainder = i % 10;\n        if(remainder\
    \ == 7) {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>",
  "{\n    long count = 0;\n    long remainder;\n    \n    while(n > 0)\n    {\n  \
    \      remainder = n % 11;\n        \n        if (remainder == 0 || remainder\
    \ == 7)\n        {\n            count++;\n        }\n        \n        n = n /\
    \ 11;\n    }\n    \n    return count;\n}", "{\n    long count = 0;\n    long temp;\n\
    \    \n    temp = n;\n    \n    while (temp > 0) {\n        if (temp % 11 == 0\
    \ || temp % 13 == 0) {\n            count++;\n        }\n        temp /= 10;\n\
    \    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    long div = 11L;\n    long remainder;\n\
    \    \n    while(n > div) {\n        remainder = n % div;\n        if (remainder\
    \ == 7L) {\n            count++;\n        }\n        div = div * 10L;\n    }\n\
    \    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\n\
    This doesn't work. `fizz_buzz(78L)` returns `3L`, not `2L`.\n<|/ c |>\n<| c |>\n\
    Thanks for pointing that out. I fixed it now.\n<|/ c |>\n<| a |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long div = 11L;\n\
    \    long mod;\n    \n    while (n >= div) {\n        mod = n % div;\n       \
    \ if (mod == 7L) {\n            count++;\n        }\n        div = div * 10L;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution,\
    \ but I wonder if there is a way to avoid the multiplication by 10L. Maybe by\
    \ using a loop to find the next power of 10?\n<|/ c |>\n<| c |>\n: Yes, you can\
    \ use a loop to find the next power of 10. I'll post an answer in a minute.\n\
    <|/ c |>\n<| c |>\n: I added a version that avoids the multiplication by 10L.\
    \ I'm sure it can be optimized further, but this should get you started.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nlong fizz_buzz(long n) {\n    long count = 0;\n\
    \    long div = 11L;\n    long mod;\n    \n    while (n >= div) {\n        mod\
    \ = n % div;\n        if (mod == 7L) {\n            count++;\n        }\n    \
    \    div = div * 10L;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\
    \    long count = 0;\n    long div = 11L;\n    long mod = 13L;\n    long d = n\
    \ % div;\n    long m = n % mod;\n    long x = n;\n    \n    while (x != 0) {\n\
    \        if (x % div == d) {\n            count++;\n        }\n        if (x %\
    \ mod == m) {\n            count++;\n        }\n        x /= div;\n        x /=\
    \ mod;\n        d /= div;\n        d /= mod;\n        m /= mod;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a |>\n<| c |>\nThis code doesn't work for `fizz_buzz(78L)`\
    \ because `78 % 11 != 0`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've\
    \ updated the code accordingly.\n<|/ c |>\n<| c |>\nThanks for the code. Can you\
    \ please explain the logic behind it? I understand the first two lines, but what\
    \ is the purpose of the third line? What does it do?\n<|/ c |>\n<| c |>\nThe third\
    \ line divides n by 11 and 13 until it reaches 1. Then it divides the result by\
    \ 11 and 13 until it reaches 1. Then it divides the result by 11 and 13 until\
    \ it reaches 1. Then it divides the result by 11 and 13 until it reaches 1. Then\
    \ it divides the result by 11 and 13 until it reaches 1. Then it divides the result\
    \ by 11 and 13 until it reaches 1. Then it divides the result by 11 and 13 until\
    \ it reaches 1. Then it divides the result by 11 and 13 until it reaches 1. Then\
    \ it divides the result by 11 and 13 until it reaches 1. Then it divides the result\
    \ by 11 and 13 until it reaches 1. Then it divides the result by 11 and 13 until\
    \ it reaches 1. Then it divides the result by 11 and 13 until it reaches 1. Then\
    \ it divides the result by 11 and 13 until it reaches 1. Then it divides the result\
    \ by 11 and 13 until it reaches 1. Then it divides the result by 11 and 13 until\
    \ it reaches 1. Then it divides the result by 11 and 13 until it reaches 1. Then\
    \ it divides the result by 11 and 13 until it reaches 1. Then it divides the result\
    \ by 11 and 13 until it reaches 1. Then it divides the result by 11 and 13 until\
    \ it reaches 1. Then it divides the result by 11 and 13 until it reaches 1. Then\
    \ it divides the result by 11 and 13 until ", "{\n\tlong count = 0;\n\twhile (n\
    \ >= 100) {\n\t\tcount += n % 10;\n\t\tn /= 10;\n\t}\n\twhile (n >= 10) {\n\t\t\
    count += n % 10;\n\t\tn /= 10;\n\t}\n\twhile (n >= 1) {\n\t\tcount += n % 10;\n\
    \t\tn /= 10;\n\t}\n\treturn count;\n}", "{\n    long count = 0;\n    long div\
    \ = 11L;\n    long remainder;\n    \n    while (n) {\n        remainder = n %\
    \ div;\n        if (remainder == 7L) {\n            count++;\n        }\n    \
    \    div = div * 10L;\n        n = n / div;\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++ |>\n<| c |>\nI like your solution, but I wonder how it\
    \ compares to other solutions posted here?\n<|/ c |>\n<| c |>\nI like your solution\
    \ as well, but I wonder how it compares to other solutions posted here?\n<|/ c\
    \ |>\n<| c |>\nI like your solution as well, but I wonder how it compares to other\
    \ solutions posted here?\n<|/ c |>\n<| c |>\nI like your solution as well, but\
    \ I wonder how it compares to other solutions posted here?\n<|/ c |>\n<| c |>\n\
    I like your solution as well, but I wonder how it compares to other solutions\
    \ posted here?\n<|/ c |>\n<| a dscore=5 |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    long x = n;\n    long y = n;\n\
    \    long z = 0;\n    long w = 0;\n    \n    while(x > 0)\n    {\n        z =\
    \ x % 11;\n        w = x % 13;\n        \n        if(z == 0 && w == 0)\n     \
    \   {\n            count++;\n        }\n        \n        x = x / 11;\n      \
    \  y = x / 13;\n    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nI like the idea of using modulo division to find out if it's a\
    \ multiple of 11 or 13. Very clever. +1\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long\
    \ div = 11L;\n    while (n > div) {\n        if (n % div == 0)\n            count\
    \ += 1;\n        div *= 11L;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++\
    \ |>\n<| c |>\nThis is not an answer to the question. Also, the question is about\
    \ fizzbuzz, not fizz buzz.\n<|/ c |>\n<| c |>\nThe question was about fizzbuzz,\
    \ not fizz buzz. Also, the question was about how to implement the algorithm,\
    \ not how to implement the algorithm.\n<|/ c |>\n<| c |>\nThe question was about\
    \ how to implement the algorithm, not how to implement the algorithm. Also, the\
    \ question was about how to implement the algorithm, not how to implement the\
    \ algorithm. Also, the question was about how to implement the algorithm, not\
    \ how to implement the algorithm. Also, the question was about how to implement\
    \ the algorithm, not how to implement the algorithm. Also, the question was about\
    \ how to implement the algorithm, not how to implement the algorithm. Also, the\
    \ question was about how to implement the algorithm, not how to implement the\
    \ algorithm. Also, the question was about how to implement the algorithm, not\
    \ how to implement the algorithm. Also, the question was about how to implement\
    \ the algorithm, not how to implement the algorithm. Also, the question was about\
    \ how to implement the algorithm, not how to implement the algorithm. Also, the\
    \ question was about how to implement the algorithm, not how to implement the\
    \ algorithm.\n<|/ c |>\n<| c |>\nThe question was about how to implement the algorithm,\
    \ not how to implement the algorithm. Also, the question was about how to implement\
    \ the algorithm, not how to implement the algorithm. Also, the question was about\
    \ how to implement the algorithm, not how to implement the algorithm. Also, the\
    \ question was about how to implement the algorithm, not how to implement the\
    \ algorithm. Also, the question was about how to implement the algorithm, not\
    \ how to implement the algorithm. Also, the question was about how to implement\
    \ the algorithm, not how to implement the algorithm. Also, the question was about\
    \ how to implement the algorithm, not how to implement the algorithm. Also, the\
    \ question was about how to implement the algorithm, not how to implement the\
    \ algorithm. Also, the question was about how to implement the algorithm, not\
    \ how to implement the algorithm. Also, the question was about how to implement\
    \ the algorithm, not how to implement the algorithm. Also, the question was about\
    \ how to implement the algorithm, not how to implement the algorithm. Also, the\
    \ question was about how to implement the algorithm, not how to implement the\
    \ algorithm. Also, the question was about how to implement the algorithm, not\
    \ how to implement the ", "{\n    long count = 0;\n    long x = n;\n    long y\
    \ = n;\n    long z = 0;\n    long w = 0;\n    \n    while(x > 0)\n    {\n    \
    \    z = x % 11;\n        w = x % 13;\n        \n        if(z == 0 && w == 0)\n\
    \        {\n            count++;\n        }\n        \n        x = x / 10;\n \
    \   }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,fizzlers |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n   \
    \ long count = 0;\n    long i;\n    for(i = 0; i <= n; i++)\n    {\n        if((i\
    \ % 11) == 0)\n        {\n            if((i % 13) == 0)\n            {\n     \
    \           count++;\n            }\n        }\n    }\n    return count;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis is not the most efficient solution, since it\
    \ uses `%` operator for both checks. You could use `%` only once and compare the\
    \ result to `0` and `1`.\n<|/ c |>\n<| c |>\nI agree, however I wanted to keep\
    \ it simple for OP to understand.\n<|/ c |>\n<| c |>\nI agree with you that it's\
    \ simple, but I believe that it's also not efficient. `%` operator is very slow\
    \ for big numbers. You also need to check `i` against `0` and `1` instead of `1`\
    \ and `2`.\n<|/ c |>\n<| c |>\nI agree with you that it's simple, but I believe\
    \ that it's also not efficient. `%` operator is very slow for big numbers. You\
    \ also need to check `i` against `0` and `1` instead of `1` and `2`.\n<|/ c |>\n\
    <| c |>\nI agree with you that it's simple, but I believe that it's also not efficient.\
    \ `%` operator is very slow for big numbers. You also need to check `i` against\
    \ `0` and `1` instead of `1` and `2`.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n\
    \    long count = 0;\n    long remainder;\n    long digit;\n    \n    while (n)\
    \ {\n        remainder = n % 10;\n        digit = remainder % 11;\n        if\
    \ (digit == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n \
    \   return count;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer.\
    \ I am not able to understand your code. Can you please explain it a bit?\n<|/\
    \ c |>\n<| c |>\nThe code I posted is pretty straightforward.  It just counts\
    \ the number of times 7 appears in integers less than n which are divisible by\
    \ 11 or 13.  I added comments to explain what each line does.\n<|/ c |>\n<| c\
    \ |>\nThanks for your answer. I am not able to understand your code. Can you please\
    \ explain it a bit?\n<|/ c |>\n<| c |>\nI added some comments to the code.  Hopefully\
    \ that helps.\n<|/ c |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\n\
    #include <cmath>\nusing namespace std;", "{\n    long count = 0;\n    long i;\n\
    \    for(i = 1; i <= n; i++) {\n        if(i % 11 == 0 || i % 13 == 0) {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis is not the right solution. Try with n = 78.\n<|/ c |>\n<|\
    \ c |>\nI believe you meant `if(i % 11 == 0 || i % 13 == 0)` instead of `if(i\
    \ % 11 == 0 && i % 13 == 0)`\n<|/ c |>\n<| c |>\n: Yes, I meant that. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| c |>\n: I believe you meant `if(i % 11 == 0 ||\
    \ i % 13 == 0)` instead of `if(i % 11 == 0 && i % 13 == 0)`\n<|/ c |>\n<| c |>\n\
    : Yes, I meant that. Thanks for pointing it out.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\tlong count = 0;\n\
    \tlong remainder;\n\t\n\twhile (n>0) {\n\t\tremainder = n%11;\n\t\tif (remainder\
    \ == 7 || remainder == 13) count++;\n\t\tn = n/11;\n\t}\n\treturn count;\n}",
  "{\n    long count = 0;\n    for(long i = 0; i <= n; i+=11)\n    {\n        if((i\
    \ % 11) == 0)\n        {\n            if((i % 13) == 0)\n            {\n     \
    \           count++;\n            }\n        }\n    }\n    return count;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    for(long i = n; i > 0; i /=\
    \ 11L) {\n        if((i % 11L) == 7L) {\n            count += 1;\n        }\n\
    \    }\n    for(long i = n; i > 0; i /= 13L) {\n        if((i % 13L) == 7L) {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n</code>\n<|/\
    \ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis doesn't work. Try it with `fizz_buzz(78L)`.\
    \ It returns `3` instead of `2`.\n<|/ c |>\n<| c |>\n: It returns `2` for `fizz_buzz(78L)`\
    \ as well.\n<|/ c |>\n<| c |>\n: It returns `2` for `fizz_buzz(78L)` as well.\n\
    <|/ c |>\n<| c |>\n: It returns `2` for `fizz_buzz(78L)` as well.\n<|/ c |>\n\
    <| c |>\n: It returns `2` for `fizz_buzz(78L)` as well.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long i;\n    for(i = 1; i <= n; i++){\n        if((i % 11) == 0 || (i\
    \ % 13) == 0){\n            count++;\n        }\n    }\n    return count;\n}\n\
    </code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis doesn't work. Try\
    \ it with `fizz_buzz(78L)`.\n<|/ c |>\n<| c |>\nIt works. I tested it before posting.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\nI tested it myself and it doesn't work.\
    \ Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<| c |>\nIt works. I tested it before\
    \ posting. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it myself and it doesn't\
    \ work. Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long x = n;\n    \n    while (x != 0) {\n        if (x % 11 == 0 ||\
    \ x % 13 == 0) {\n            count++;\n        }\n        x /= 10;\n    }\n \
    \   return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\n\
    I like your solution, but I wonder if it would be more efficient to just use an\
    \ `int` instead of a `long`.  I suspect that `long` would require more memory\
    \ than `int` would require.\n<|/ c |>\n<| c |>\nI agree with you, `int` would\
    \ be more efficient, but I wanted to keep it simple and clear.\n<|/ c |>\n<| c\
    \ |>\nI agree with you on that.  I thought about that and I decided that `long`\
    \ would be more efficient than `int`.  I guess I should have been more clear about\
    \ that.\n<|/ c |>\n<| c |>\nI agree with you on that.  I thought about that and\
    \ I decided that `long` would be more efficient than `int`.  I guess I should\
    \ have been more clear about that.\n<|/ c |>\n<| c |>\nI agree with you on that.\
    \  I thought about that and I decided that `long` would be more efficient than\
    \ `int`.  I guess I should have been more clear about that.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long temp;\n    long remainder;\n    \n    temp = n;\n    \n    while\
    \ (temp > 0) {\n        remainder = temp % 11;\n        if (remainder == 7 ||\
    \ remainder == 13) {\n            count++;\n        }\n        temp /= 11;\n \
    \   }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++ |>\n<| c |>\nThis\
    \ doesn't answer the question, which is about how to implement the algorithm,\
    \ not how to implement the algorithm.\n<|/ c |>\n<| c |>\nI agree with you, my\
    \ answer was more of a \"how to\" rather than \"how to\" answer, but I'll leave\
    \ it here in case someone else finds it useful.\n<|/ c |>\n<| c |>\nI agree with\
    \ you that this is more of a \"how to\" answer, but this answer doesn't actually\
    \ answer the question.  It just shows how to implement the algorithm.  It doesn't\
    \ actually answer the question of how to implement the algorithm.\n<|/ c |>\n\
    <| c |>\nI agree with you, my answer was more of a \"how to\" rather than \"how\
    \ to\" answer, but I'll leave it here in case someone else finds it useful.\n\
    <|/ c |>\n<| c |>\nI agree with you, my answer was more of a \"how to\" rather\
    \ than \"how to\" answer, but I'll leave it here in case someone else finds it\
    \ useful.\n<|/ c |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long div = 11L;\n    long\
    \ mod = 13L;\n    long div2 = div;\n    long mod2 = mod;\n    long div3 = div2;\n\
    \    long mod3 = mod2;\n    long div4 = div3;\n    long mod4 = mod3;\n    long\
    \ div5 = div4;\n    long mod5 = mod4;\n    long div6 = div5;\n    long mod6 =\
    \ mod5;\n    long div7 = div6;\n    long mod7 = mod6;\n    long div8 = div7;\n\
    \    long mod8 = mod7;\n    long div9 = div8;\n    long mod9 = mod8;\n    long\
    \ div10 = div9;\n    long mod10 = mod9;\n    long div11 = div10;\n    long mod11\
    \ = mod10;\n    long div12 = div11;\n    long mod12 = mod11;\n    long div13 =\
    \ div12;\n    long mod13 = mod12;\n    long div14 = div13;\n    long mod14 = mod13;\n\
    \    long div15 = div14;\n    long mod15 = mod14;\n    long div16 = div15;\n \
    \   long mod16 = mod15;\n    long div17 = div16;\n    long mod17 = mod16;\n  \
    \  long div18 = div17;\n    long mod18 = mod17;\n    long div19 = div18;\n   \
    \ long mod19 = mod18;\n    long div20 = div19;\n    long mod20 = mod19;\n    long\
    \ div21 = div20;\n    long mod21 = mod20;\n    long div22 = div21;\n    long mod22\
    \ = mod21;\n    long div23 = div22;\n    long mod23 = mod22;\n    long div24 =\
    \ div23;\n    long mod24 = mod23;\n    long div25 = div24;\n    long mod25 = mod24;\n\
    \    long div26 = div25;\n    long mod26 = mod25;\n    long div27 = div26;\n \
    \   long mod27 = mod26;\n    long div28 = div27;\n    long mod28 = mod27;\n  \
    \  long div29 = div28;\n    long mod29 = mod28;\n    long div30 = div29;\n   \
    \ long mod30 = mod29;\n    long div31 = div30;\n    long mod31 = mod30;\n    long\
    \ div32 = div3", "{\n    long count = 0;\n    long div = 11L;\n    long mod;\n\
    \    \n    while (n >= div) {\n        mod = n % div;\n        if (mod != 0L)\
    \ {\n            count++;\n        }\n        div = div * 2L;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic long fizzBuzz(int\
    \ n) {\n    long count = 0;\n    long div = 11L;\n    long mod;\n    \n    while\
    \ (n >= div) {\n        mod = n % div;\n        if (mod != 0L) {\n           \
    \ count++;\n        }\n        div = div * 2L;\n    }\n    return count;\n}\n\
    </code>\n<|/ a tags=fizzbuzz,java dscore=0 |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.*;\npublic class FizzBuzz {\n    public static void main(String[]\
    \ args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"\
    Enter a number\");\n        int n = sc.nextInt();\n        int count = 0;\n  \
    \      int div = 11L;\n        int mod;\n        while (n >= div) {\n        \
    \    mod = n % div;\n            if (mod != 0L) {\n                count++;\n\
    \            }\n            div = div * 2L;\n        }\n        System.out.println(count);\n\
    \    }\n}\n</code>\n<|/ a tags=fizzbuzz,java |>\n<| a tags=fizzbuzz,java |>\n\
    <code>\nimport java.util.*;\npublic class FizzBuzz {\n    public static void main(String[]\
    \ args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"\
    Enter a number\");\n        int n = sc.nextInt();\n        int count = 0;\n  \
    \      int div = 11L;\n        int mod;\n        while (n >= div) {\n        \
    \    mod = n % div;\n            if (mod != 0L) {\n                count++;\n\
    \            }\n            div = div * 2L;\n        }\n        System.out.println(count);\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\n\
    public class FizzBuzz {\n    public static void main(String[] args) {\n      \
    \  Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter a\
    \ number\");\n        int n = sc.nextInt();\n        int count = 0;\n        int\
    \ div = 11L;\n        int mod;\n        while (n >= div) {\n", "{\n    long count\
    \ = 0;\n    long remainder;\n    \n    while (n) {\n        remainder = n % 10;\n\
    \        if (remainder == 7 || remainder == 11 || remainder == 13) {\n       \
    \     count++;\n        }\n        n = n / 10;\n    }\n    return count;\n}",
  "{\n\tlong count = 0;\n\twhile (n > 0)\n\t{\n\t\tlong remainder = n % 11;\n\t\t\
    if (remainder == 0 || remainder == 7)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tn = n\
    \ / 11;\n\t}\n\treturn count;\n}", "{\n    long count = 0;\n    for(long i = 0;\
    \ i <= n; i+=11)\n    {\n        if((i % 11) == 0)\n            count += 1;\n\
    \        if((i % 13) == 0)\n            count += 1;\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThe `count` variable\
    \ is redundant. Just `return (n % 11) == 0 && (n % 13) == 0;` will do.\n<|/ c\
    \ |>\n<| c |>\nYes, but that would require a lot of code changes. I wanted to\
    \ keep it simple and easy to understand.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ but I thought it would be better to keep it simple and easy to understand.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I thought it would be better to keep\
    \ it simple and easy to understand.\n<|/ c |>\n<| c |>\nI agree with you, but\
    \ I thought it would be better to keep it simple and easy to understand.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long count = 0;\n    long div = 11L;\n    long remainder;\n    \n    while\
    \ (n) {\n        remainder = n % div;\n        if (remainder == 7L) {\n      \
    \      count++;\n        }\n        div *= 11L;\n        n /= div;\n    }\n  \
    \  return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long count = 0;\n    long i;\n    for(i = 1; i <= n; i++)\n    {\n      \
    \  if((i % 11) == 0 || i % 13 == 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n\
    <| c |>\nThe question was about fizzbuzz, not fizz buzz.\n<|/ c |>\n<| c |>\n\
    I guess I misunderstood the question. Thanks for pointing it out.\n<|/ c |>\n\
    <| c |>\nI guess I misunderstood the question. Thanks for pointing it out.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long count = 0;\n    while (n >= 100) {\n        if (n % 11 == 0) count++;\n\
    \        if (n % 13 == 0) count++;\n        n /= 100;\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis doesn't work.\
    \ Try `fizz_buzz(78)`. It returns `3` instead of `2`.\n<|/ c |>\n<| c |>\n: I\
    \ tested it and it returns `2` as expected.\n<|/ c |>\n<| c |>\n: I tested it\
    \ and it returns `2` as expected.\n<|/ c |>\n<| c |>\n: I tested it and it returns\
    \ `2` as expected.\n<|/ c |>\n<| c |>\n: I tested it and it returns `2` as expected.\n\
    <|/ c |>\n<| a |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n  \
    \  long count = 0;\n    long remainder;\n    long temp;\n    \n    temp = n;\n\
    \    \n    while ((temp % 11) == 0 || temp % 13 == 0) {\n        remainder = temp\
    \ % 11;\n        temp = temp / 11;\n        \n        if (remainder == 7) {\n\
    \            count++;\n        }\n    }\n    \n    return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis code does not work. Try it for n = 78.\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works. I used the number 78 as an example. Did\
    \ you try it yourself?\n<|/ c |>\n<| c |>\nYes, I did. Your code does not work.\
    \ Try it for n = 78.\n<|/ c |>\n<| c |>\nI tested it and it works. I used the\
    \ number 78 as an example. Did you try it yourself?\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I used the number 78 as an example. Did you try it yourself?\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <stdio.h>\n#include <math.h>\n#include\
    \ <string.h>\n#include <stdlib.h>\n#include <stdbool.h>", "{\n    long count =\
    \ 0;\n    long remainder;\n    \n    while(n > 0)\n    {\n        remainder =\
    \ n % 11;\n        if (remainder == 0 || remainder == 7)\n        {\n        \
    \    count++;\n        }\n        n = n / 11;\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis code doesn't work. `fizz_buzz(78L)`\
    \ returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\n: It does work. `78L` is divisible\
    \ by 11 and 13, so `n % 11 == 0` and `remainder == 7`. `n % 11 == 1` and `remainder\
    \ == 0`. `n % 11 == 2` and `remainder == 0`. `n % 11 == 3` and `remainder == 0`.\
    \ `n % 11 == 4` and `remainder == 7`. `n % 11 == 5` and `remainder == 7`. `n %\
    \ 11 == 6` and `remainder == 7`. `n % 11 == 7` and `remainder == 7`. `n % 11 ==\
    \ 8` and `remainder == 7`. `n % 11 == 9` and `remainder == 7`. `n % 11 == 10`\
    \ and `remainder == 7`. `n % 11 == 11` and `remainder == 7`. `n % 11 == 12` and\
    \ `remainder == 7`. `n % 11 == 13` and `remainder == 7`.\n<|/ c |>\n<| c |>\n\
    : I see what you mean. `n % 11 == 0` should be `n % 11 == 1 && remainder == 0`.\
    \ `n % 11 == 1` should be `n % 11 == 2 && remainder == 0`. `n % 11 == 2` should\
    \ be `n % 11 == 3 && remainder == 0`. `n % 11 == 3` should be `n % 11 == 4 &&\
    \ remainder == 0`. `n % 11 == 4` should be `n % 11 == 5 && remainder == 0`. `n\
    \ % 11 == 5` should be `n % 11 == 6 && remainder == 0`. `n % 11 == 6` should be\
    \ `n % 11 == 7 && remainder == 0`. `n % 11 == 7` should be `n % 11 == 8 && remainder\
    \ == 0`. `n % 11 == 8` should be `n % 11 == 9 && remainder == 0`. `n % 11 == 9`\
    \ should be `n % 11 == 10 && remainder == 0`. `n % 11 == 10` should be `n % 11\
    \ == 11 && remainder == 0`. `n % 11 == 11` should be `n % 11 == 12 && remainder\
    \ == 0`. `n % 11 == 12` should be `n % 11 == 13 && remainder == 0`. `n % 11 ==\
    \ 13` should be `n % 11 == 14 && remain", "{\n    long count = 0;\n    long remainder;\n\
    \    \n    while (n>0) {\n        remainder = n%11;\n        if (remainder ==\
    \ 7 || remainder == 13) count++;\n        n = n/11;\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "{\n    long count =\
    \ 0;\n    long remainder;\n    \n    while (n>0) {\n        remainder = n%11;\n\
    \        if (remainder == 7) {\n            count++;\n        }\n        n = n/11;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a |>\n<| c |>\nThis code doesn't work\
    \ if n is negative.\n<|/ c |>\n<| c |>\nI fixed the code so it works with negative\
    \ numbers. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThe code doesn't\
    \ work for negative numbers. Try it with `fizz_buzz(-50L)`.\n<|/ c |>\n<| c |>\n\
    I fixed the code so it works with negative numbers. Thanks for pointing that out.\n\
    <|/ c |>\n<| c |>\nThe code doesn't work for negative numbers. Try it with `fizz_buzz(-50L)`.\n\
    <|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    long i;\n    for(i = 1; i <= n;\
    \ ++i)\n    {\n        if(i % 11 == 0 || i % 13 == 0)\n        {\n           \
    \ ++count;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/15709290)\n\
    <|/ c |>\n<| c |>\nIt does provide an answer to the question. He asked \"How many\
    \ times does 7 appear in numbers less than n which are divisible by 11 or 13?\"\
    \ The answer he got is \"0\", which means \"no number divisible by 11 or 13 appears\
    \ more than once.\"\n<|/ c |>\n<| c |>\nThe question was \"How many times does\
    \ 7 appear in numbers less than n which are divisible by 11 or 13?\" The answer\
    \ was \"0\", which means \"no number divisible by 11 or 13 appears more than once.\"\
    \n<|/ c |>\n<| c |>\nThe question was \"How many times does 7 appear in numbers\
    \ less than n which are divisible by 11 or 13?\" The answer was \"0\", which means\
    \ \"no number divisible by 11 or 13 appears more than once.\"\n<|/ c |>\n<| c\
    \ |>\nThe question was \"How many times does 7 appear in numbers less than n which\
    \ are divisible by 11 or 13?\" The answer was \"0\", which means \"no number divisible\
    \ by 11 or 13 appears more than once.\"\n<|/ c |>\n<| a tags=fizzbuzz,c++ |>\n\
    <code>\n#include <iostream>\nusing namespace std;", "{\n    long count = 0;\n\
    \    long remainder;\n    \n    while(n > 0)\n    {\n        remainder = n % 10;\n\
    \        if(remainder == 7)\n        {\n            count++;\n        }\n    \
    \    n = n / 10;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++\
    \ |>\n<| c |>\n`return count` should be `return count+1`\n<|/ c |>\n<| c |>\n\
    Thanks for pointing that out. I've edited the answer.\n<|/ c |>\n<| c |>\n`return\
    \ count` should be `return count+1`\n<|/ c |>\n<| c |>\n`return count` should\
    \ be `return count+1`\n<|/ c |>\n<| a dscore=4 tags=fizzbuzz,c++ |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n\tlong count = 0;\n\tlong d =\
    \ n % 10;\n\tlong x = n / 10;\n\tlong y = x % 10;\n\tlong z = x / 10;\n\t\n\t\n\
    \tif((d == 7 && y == 11) || (d == 7 && y == 13))\n\t\tcount++;\n\t\n\t\n\tif((x\
    \ == 7 && y == 11) || (x == 7 && y == 13))\n\t\tcount++;\n\t\n\t\n\tif((y == 7\
    \ && z == 11) || (y == 7 && z == 13))\n\t\tcount++;\n\t\n\t\n\tif((z == 7 && x\
    \ == 11) || (z == 7 && x == 13))\n\t\tcount++;\n\t\n\t\n\tif((x == 7 && z == 11)\
    \ || (x == 7 && z == 13))\n\t\tcount++;\n\t\n\t\n\tif((y == 7 && x == 11) || (y\
    \ == 7 && x == 13))\n\t\tcount++;\n\t\n\t\n\tif((z == 7 && y == 11) || (z == 7\
    \ && y == 13))\n\t\tcount++;\n\t\n\t\n\tif((x == 7 && y == 11) || (x == 7 && y\
    \ == 13))\n\t\tcount++;\n\t\n\t\n\tif((z == 7 && x == 11) || (z == 7 && x == 13))\n\
    \t\tcount++;\n\t\n\t\n\tif((y == 7 && z == 11) || (y == 7 && z == 13))\n\t\tcount++;\n\
    \t\n\t\n\tif((x == 7 && z == 11) || (x == 7 && z == 13))\n\t\tcount++;\n\t\n\t\
    \n\tif((z == 7 && y == 11) || (z == 7 && y == 13))\n\t\tcount++;\n\t\n\t\n\tif((x\
    \ == 7 && y == 11) || (x == 7 && y == 13))\n\t\tcount++;\n\t\n\t\n\tif((z == 7\
    \ && x == 11) || (z == 7 && x == 13))\n\t\tcount++;\n\t\n\t\n\tif((y == 7 && z\
    \ == 11) || (y == 7 && z == 13))\n\t\tcount++;\n\t\n\t\n\tif((x == 7 && z == 11)\
    \ || (x == 7 && z == 13))\n\t\tcount++;\n\t\n\t\n\tif((z == 7 && y == 11) || (z\
    \ == 7 && y == 13))\n\t\tcount++;\n\t\n\t\n\tif((x == 7 && y == 11) || (x == 7\
    \ && y == 13))\n\t\tcount++;\n\t\n\t\n\tif((z == 7 && x == 11) || (z == 7 && x\
    \ == 13))\n\t\tcount++;\n\t\n\t\n", "{\n    long count = 0;\n    long i;\n   \
    \ for(i = 1; i <= n; ++i)\n    {\n        if((i % 11) == 0 || i % 13 == 0)\n \
    \       {\n            ++count;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like your solution, but I still don't understand\
    \ why my code doesn't work. Could you please explain why my code doesn't work?\n\
    <|/ c |>\n<| c |>\nI added some explanation to the answer. Hope it helps.\n<|/\
    \ c |>\n<| c |>\nThanks for your explanation. Now I understand why my code doesn't\
    \ work. Your solution is very elegant and concise. Thanks again.\n<|/ c |>\n<|\
    \ a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long div = 11L;\n    long mod = 13L;\n \
    \   \n    while (n > div && n >= mod)\n    {\n        if (n % div == 0)\n    \
    \        count++;\n        div += 11L;\n        mod += 13L;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThe `mod`\
    \ variable is unnecessary. `div` can be initialized to `11L` and `mod` to `13L`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the code accordingly.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long count = 0;\n    long remainder;\n    \n    while(n > 0)\n    {\n  \
    \      remainder = n % 10;\n        if(remainder == 7)\n        {\n          \
    \  count++;\n        }\n        n = n / 10;\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThe `while` loop can be replaced\
    \ by a `for` loop: `for(long n = n; n > 0; n = n / 10)`\n<|/ c |>\n<| c |>\nYes,\
    \ that would work as well. I just find it more readable this way.\n<|/ c |>\n\
    <| c |>\nI agree, it's more readable, but I find it more confusing to read `for(long\
    \ n = n; n > 0; n = n / 10)` than `while(n > 0)`\n<|/ c |>\n<| c |>\nI agree with\
    \ you on that. But the `while` loop can be replaced by a `for` loop: `for(long\
    \ n = n; n > 0; n = n / 10)`\n<|/ c |>\n<| c |>\nI agree, it's more readable,\
    \ but I find it more confusing to read `for(long n = n; n > 0; n = n / 10)` than\
    \ `while(n > 0)`\n<|/ c |>\n<| a dscore=4 |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    long i;\n    for(i = 1; i <= n;\
    \ i++) {\n        if((i % 11) == 0 || (i % 13) == 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Thanks for your answer. Your code is working but i want to know why my code is\
    \ not working ?\n<|/ c |>\n<| c |>\nI added some explanation to the answer. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code is working but\
    \ i want to know why my code is not working ?\n<|/ c |>\n<| c |>\nI added some\
    \ explanation to the answer. Hope it helps.\n<|/ c |>\n<| a dscore=2 |>\nThe problem\
    \ is that the function fizz_buzz returns long but you are trying to assign the\
    \ result to a variable of type int. \nThe compiler will complain about this because\
    \ you are trying to assign a long value to a variable of type int and it will\
    \ try to convert the long value to an int and will fail.\nTo fix this problem\
    \ you can change the return type of fizz_buzz to long.\n<|/ a tags=c++,fizzbuzz\
    \ |>\n<| a tags=c++,fizzbuzz |>\nThe problem is that the function fizz_buzz returns\
    \ long but you are trying to assign the result to a variable of type int. \nThe\
    \ compiler will complain about this because you are trying to assign a long value\
    \ to a variable of type int and it will try to convert the long value to an int\
    \ and will fail.\nTo fix this problem you can change the return type of fizz_buzz\
    \ to long.\n<|/ a dscore=1 |>\n<| a |>\n<code>", "{\n    long count = 0;\n   \
    \ long remainder;\n    long i;\n    for(i = n; (remainder = n % 10) != 7; n /=\
    \ 10);\n    for(i = n; (remainder = n % 10) != 7; n /= 10);\n    for(i = n; (remainder\
    \ = n % 10) != 7; n /= 10);\n    for(i = n; (remainder = n % 10) != 7; n /= 10);\n\
    \    for(i = n; (remainder = n % 10) != 7; n /= 10);\n    for(i = n; (remainder\
    \ = n % 10) != 7; n /= 10);\n    for(i = n; (remainder = n % 10) != 7; n /= 10);\n\
    \    for(i = n; (remainder = n % 10) != 7; n /= 10);\n    for(i = n; (remainder\
    \ = n % 10) != 7; n /= 10);\n    for(i = n; (remainder = n % 10) != 7; n /= 10);\n\
    \    for(i = n; (remainder = n % 10) != 7; n /= 10);\n    for(i = n; (remainder\
    \ = n % 10) != 7; n /= 10);\n    for(i = n; (remainder = n % 10) != 7; n /= 10);\n\
    \    for(i = n; (remainder = n % 10) != 7; n /= 10);\n    for(i = n; (remainder\
    \ = n % 10) != 7; n /= 10);\n    for(i = n; (remainder = n % 10) != 7; n /= 10);\n\
    \    for(i = n; (remainder = n % 10) != 7; n /= 10);\n    for(i = n; (remainder\
    \ = n % 10) != 7; n /= 10);\n    for(i = n; (remainder = n % 10) != 7; n /= 10);\n\
    \    for(i = n; (remainder = n % 10) != 7; n /= 10);\n    for(i = n; (remainder\
    \ = n % 10) != 7; n /= 10);\n    for(i = n; (remainder = n % 10) != 7; n /= 10);\n\
    \    for(i = n; (remainder = n % 10) != 7; n /= 10);\n    for(i = n; (remainder\
    \ = n % 10) != 7; n /= 10);\n    for(i = n; (remainder = n % 10) != 7; n /= 10);\n\
    \    for(i = n; (remainder = n % 10) != 7; n /= 10);\n    for(i = n; (remainder\
    \ = n % 10) != 7; n /= 10);\n    for(i = n; (remainder = n % 10) != 7; n /= 10);\n\
    \    for(i = n; (remainder = n % 10) != 7; n /= 10);\n    for(i", "{\n    long\
    \ count = 0;\n    long remainder;\n    \n    while(n > 0)\n    {\n        remainder\
    \ = n % 11;\n        \n        if(remainder == 7)\n        {\n            count++;\n\
    \        }\n        \n        n = n / 11;\n    }\n    \n    return count;\n}",
  "{\n    long count = 0;\n    long remainder;\n    \n    while (n>0) {\n        remainder\
    \ = n%11;\n        if (remainder == 7 || remainder == 13) count++;\n        n\
    \ = n/11;\n    }\n    return count;\n}", "{\n    long count = 0;\n    long remainder;\n\
    \    \n    while (n) {\n        remainder = n % 10;\n        if (remainder ==\
    \ 7 || remainder == 11 || remainder == 13) {\n            count++;\n        }\n\
    \        n = n / 10;\n    }\n    return count;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work. `fizz_buzz(78L)` returns `2L` instead of `3L`.\n<|/ c |>\n\
    <| c |>\n: Thanks for pointing that out. I've corrected the code accordingly.\n\
    <|/ c |>\n<| c |>\n: Thanks for pointing that out. I've corrected the code accordingly.\n\
    <|/ c |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long remainder;\n    long i;\n    \n   \
    \ for(i = n; (remainder = n % 10) != 7; n /= 10);\n    \n    for(i = n; (remainder\
    \ = n % 10) != 7; n /= 10);\n    \n    for(i = n; (remainder = n % 10) != 7; n\
    \ /= 10);\n    \n    for(i = n; (remainder = n % 10) != 7; n /= 10);\n    \n \
    \   for(i = n; (remainder = n % 10) != 7; n /= 10);\n    \n    for(i = n; (remainder\
    \ = n % 10) != 7; n /= 10);\n    \n    for(i = n; (remainder = n % 10) != 7; n\
    \ /= 10);\n    \n    for(i = n; (remainder = n % 10) != 7; n /= 10);\n    \n \
    \   for(i = n; (remainder = n % 10) != 7; n /= 10);\n    \n    for(i = n; (remainder\
    \ = n % 10) != 7; n /= 10);\n    \n    for(i = n; (remainder = n % 10) != 7; n\
    \ /= 10);\n    \n    for(i = n; (remainder = n % 10) != 7; n /= 10);\n    \n \
    \   for(i = n; (remainder = n % 10) != 7; n /= 10);\n    \n    for(i = n; (remainder\
    \ = n % 10) != 7; n /= 10);\n    \n    for(i = n; (remainder = n % 10) != 7; n\
    \ /= 10);\n    \n    for(i = n; (remainder = n % 10) != 7; n /= 10);\n    \n \
    \   for(i = n; (remainder = n % 10) != 7; n /= 10);\n    \n    for(i = n; (remainder\
    \ = n % 10) != 7; n /= 10);\n    \n    for(i = n; (remainder = n % 10) != 7; n\
    \ /= 10);\n    \n    for(i = n; (remainder = n % 10) != 7; n /= 10);\n    \n \
    \   for(i = n; (remainder = n % 10) != 7; n /= 10);\n    \n    for(i = n; (remainder\
    \ = n % 10) != 7; n /= 10);\n    \n    for(i = n; (remainder = n % 10) != 7; n\
    \ /= 10);\n    \n    for(i = n; (remainder = n % 10) != 7; n /= 10);\n    \n \
    \   for(i = n; (remainder = n % 10) != 7; n /= 10);\n    \n    for(i = n; (remainder\
    \ = n % 10) != 7; n /= 10);\n    \n", "{\n    long count = 0;\n    long i;\n \
    \   for(i = 1; i <= n; i++)\n    {\n        if(i % 11 == 0 || i % 13 == 0)\n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    for(long i = n; i > 0; i /= 10) {\n        if((i % 11)\
    \ == 0) count += 1;\n        if((i % 13) == 0) count += 1;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "{\n    long count\
    \ = 0;\n    long remainder;\n    long temp;\n    \n    while(n > 0)\n    {\n \
    \       remainder = n % 10;\n        if (remainder == 7)\n        {\n        \
    \    count++;\n        }\n        n = n / 10;\n    }\n    \n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++ |>\n<| c |>\nThanks for your answer. Your\
    \ code is very clear and easy to understand.\n<|/ c |>\n<| c |>\nI added a version\
    \ that uses `std::to_string` instead of `std::to_string(int)`.\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long div = 11L;\n    long mod = 13L;\n \
    \   \n    while(n > div)\n    {\n        count += n % div == mod ? 1 : 0;\n  \
    \      div *= 10L;\n        mod *= 10L;\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nI like your solution, but I wonder\
    \ if there is a way to do it without using any loops. I guess it would be a recursive\
    \ function but I am not very familiar with that.\n<|/ c |>\n<| c |>\nI added a\
    \ recursive solution that doesn't use any loops.\n<|/ c |>\n<| c |>\nI added a\
    \ recursive solution that doesn't use any loops.\n<|/ c |>\n<| c |>\nI added a\
    \ recursive solution that doesn't use any loops.\n<|/ c |>\n<| c |>\nI added a\
    \ recursive solution that doesn't use any loops.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    for(long i = 1L; i <= n; i *= 10L) \n    {\n        if((n % i) == 0)\
    \ \n        {\n            if((i / 11L) == (i / 13L)) \n            {\n      \
    \          count++;\n            }\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++,algorithm |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long\
    \ i;\n    for(i = n / 10; i; i/= 10)\n    {\n        if(n % i == 0 || n % i ==\
    \ 11)\n            count++;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nI like this solution, but I wonder if it would be faster than the\
    \ one I posted.\n<|/ c |>\n<| c |>\nI doubt it would be faster, but it's certainly\
    \ more elegant. :)\n<|/ c |>\n<| c |>\nI doubt it would be faster, but it's certainly\
    \ more elegant. :)\n<|/ c |>\n<| c |>\nI doubt it would be faster, but it's certainly\
    \ more elegant. :)\n<|/ c |>\n<| c |>\nI doubt it would be faster, but it's certainly\
    \ more elegant. :)\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long temp;\n\
    \    long remainder;\n    \n    temp = n;\n    \n    while(temp > 0) {\n     \
    \   remainder = temp % 11;\n        if (remainder == 7) {\n            count++;\n\
    \        }\n        temp /= 11;\n    }\n    \n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThanks for the answer! I didn't\
    \ know about this way of doing it. I will definitely keep this in mind for future\
    \ coding.\n<|/ c |>\n<| c |>\nI added a more efficient solution that doesn't require\
    \ division.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long remainder;\n    long i;\n    for(i\
    \ = n;i >= 1000;i--)\n    {\n        remainder = i % 11;\n        if(remainder\
    \ == 0 || remainder == 7)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try it with\
    \ `fizz_buzz(78L)`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `fizz_buzz(78L)`.\
    \ `78L` is divisible by 11 and 13, so the loop will run once.\n<|/ c |>\n<| c\
    \ |>\nIt does work, but it's very inefficient. Try it with `fizz_buzz(78L)`.\n\
    <|/ c |>\n<| c |>\nIt does work, but it's very inefficient. Try it with `fizz_buzz(78L)`.\n\
    <|/ c |>\n<| c |>\nIt does work, but it's very inefficient. Try it with `fizz_buzz(78L)`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long count = 0;\n    long temp;\n\
    \    long i;\n    \n    temp = n;\n    \n    while(temp > 0) {\n        temp =\
    \ temp/10;\n        count++;\n    }\n    \n    for(i = 0; i < count; i++) {\n\
    \        if((n % 11) == 0 || (n % 13) == 0) {\n            count++;\n        }\n\
    \        n = n/10;\n    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++\
    \ |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long remainder = n % 11;\n    long remainder2\
    \ = n % 13;\n    long remainder3 = n % 17;\n    long remainder4 = n % 19;\n  \
    \  long remainder5 = n % 23;\n    long remainder6 = n % 29;\n    long remainder7\
    \ = n % 37;\n    long remainder8 = n % 43;\n    long remainder9 = n % 51;\n  \
    \  long remainder10 = n % 59;\n    long remainder11 = n % 67;\n    long remainder12\
    \ = n % 71;\n    long remainder13 = n % 79;\n    long remainder14 = n % 87;\n\
    \    long remainder15 = n % 93;\n    long remainder16 = n % 99;\n    long remainder17\
    \ = n % 103;\n    long remainder18 = n % 111;\n    long remainder19 = n % 119;\n\
    \    long remainder20 = n % 127;\n    long remainder21 = n % 135;\n    long remainder22\
    \ = n % 143;\n    long remainder23 = n % 151;\n    long remainder24 = n % 159;\n\
    \    long remainder25 = n % 167;\n    long remainder26 = n % 175;\n    long remainder27\
    \ = n % 183;\n    long remainder28 = n % 191;\n    long remainder29 = n % 199;\n\
    \    long remainder30 = n % 207;\n    long remainder31 = n % 215;\n    long remainder32\
    \ = n % 223;\n    long remainder33 = n % 231;\n    long remainder34 = n % 239;\n\
    \    long remainder35 = n % 247;\n    long remainder36 = n % 255;\n    long remainder37\
    \ = n % 263;\n    long remainder38 = n % 271;\n    long remainder39 = n % 279;\n\
    \    long remainder40 = n % 287;\n    long remainder41 = n % 295;\n    long remainder42\
    \ = n % 303;\n    long remainder43 = n % 311;\n    long remainder44 = n % 319;\n\
    \    long remainder45 = n % 327;\n    long remainder46 = n % 335;\n    long remainder47\
    \ = n % 343;\n    long remainder48 = n % 351;\n    long remainder49 = n % 359;\n\
    \    long remainder50 = n % 367;\n    long remainder51 = n % 375;\n    long remainder52\
    \ = n % 383;\n    long ", "{\n    long count = 0;\n    long remainder;\n    long\
    \ temp;\n    \n    while (n) {\n        remainder = n % 11;\n        if (remainder\
    \ == 7)\n            count++;\n        n /= 11;\n    }\n    \n    if (count ==\
    \ 0)\n        return 0;\n    \n    temp = count;\n    while (temp) {\n       \
    \ if (temp % 11 == 7)\n            count++;\n        temp /= 11;\n    }\n    \n\
    \    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++ |>\n<| c |>\nI like your\
    \ solution, however I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve this problem without\
    \ using any loops. I believe that it is possible to solve ", "{\n    long count\
    \ = 0;\n    long remainder;\n    \n    while (n) {\n        remainder = n % 10;\n\
    \        if (remainder == 7 || remainder == 11 || remainder == 13) {\n       \
    \     count++;\n        }\n        n = n / 10;\n    }\n    return count;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long i;\n    for(i = 1; i\
    \ <= n; i++)\n    {\n        if((i % 11) == 0 || i % 13 == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThe OP asked for a solution in C++, not C#.\n<|/ c |>\n<| c |>\n\
    I didn't realize that C# was a requirement. I've edited my answer to include a\
    \ solution in C++.\n<|/ c |>\n<| c |>\nI didn't realize that C# was a requirement.\
    \ I've edited my answer to include a solution in C++.\n<|/ c |>\n<| c |>\nI didn't\
    \ realize that C# was a requirement. I've edited my answer to include a solution\
    \ in C++.\n<|/ c |>\n<| c |>\nI didn't realize that C# was a requirement. I've\
    \ edited my answer to include a solution in C++.\n<|/ c |>\n<| a dscore=3 |>\n\
    <code>\n#include <iostream>\nusing namespace std;", "{\n    long count = 0;\n\
    \    long remainder;\n    \n    while (n>0) {\n        remainder = n % 11;\n \
    \       if (remainder == 0 || remainder == 7) {\n            count++;\n      \
    \  }\n        n = n / 11;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\npublic static void main(String[] args) {\n    long n =\
    \ Integer.parseInt(args[0]);\n    long count = 0;\n    long remainder;\n    \n\
    \    while (n>0) {\n        remainder = n % 11;\n        if (remainder == 0 ||\
    \ remainder == 7) {\n            count++;\n        }\n        n = n / 11;\n  \
    \  }\n    System.out.println(count);\n}\n</code>\n<|/ a tags=fizzbuzz,java dscore=0\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a tags=fizzbuzz,java |>\n<code>\nimport java.util.Scanner;",
  "{\n    long count = 0;\n    long remainder;\n    \n    for(long i = 1; i <= n;\
    \ i++) {\n        remainder = i % 11;\n        if(remainder == 0 || remainder\
    \ == 7) {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI guess you meant `if(remainder == 0 || remainder\
    \ == 7)` instead of `if(remainder == 0 || remainder == 1)`\n<|/ c |>\n<| c |>\n\
    Yes, I meant `remainder == 0 || remainder == 7`. Thanks for catching that.\n<|/\
    \ c |>\n<| c |>\nThe `count++` should be inside the `if` block. Otherwise it will\
    \ count even if the remainder is `0`.\n<|/ c |>\n<| c |>\nThanks for catching\
    \ that. I fixed it.\n<|/ c |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long i;\n    for(i = 1; i\
    \ <= n; ++i)\n    {\n        if((i % 11) == 0 || (i % 13) == 0)\n            ++count;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++ |>\n<| c |>\nThis\
    \ code is not correct. Try it for input `1L`.\n<|/ c |>\n<| c |>\n: I didn't test\
    \ it for input `1L`, but for input `1L` the output should be `0L`, not `1L`.\n\
    <|/ c |>\n<| c |>\n: I tested it for input `1L` and it gives me `0L` as output.\
    \ Are you sure you tested it correctly?\n<|/ c |>\n<| c |>\n: I tested it for\
    \ input `1L` and it gives me `0L` as output. Are you sure you tested it correctly?\n\
    <|/ c |>\n<| c |>\n: I tested it for input `1L` and it gives me `0L` as output.\
    \ Are you sure you tested it correctly?\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long\
    \ d = n % 10;\n    long x = n / 10;\n    long y = x % 10;\n    long z = x / 10;\n\
    \    \n    if (d == 7)\n    {\n        if (y == 7)\n        {\n            if\
    \ (z == 7)\n            {\n                count++;\n            }\n         \
    \   else\n            {\n                count++;\n            }\n        }\n\
    \        else\n        {\n            count++;\n        }\n    }\n    else\n \
    \   {\n        count++;\n    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++\
    \ |>\n<| c |>\nI like the idea of using recursion to solve this problem. I'm going\
    \ to try this out and see how it goes. Thanks!\n<|/ c |>\n<| c |>\nI added a recursive\
    \ solution to my answer.\n<|/ c |>\n<| c |>\nI added a recursive solution to my\
    \ answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long div = 11L;\n    long mod;\n    \n \
    \   while (n > div) {\n        mod = n % div;\n        if (mod != 0 && mod !=\
    \ 7) {\n            count++;\n        }\n        div = div * 10L;\n    }\n   \
    \ return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis\
    \ code does not work. Try with 100. Your code returns 1 instead of 3.\n<|/ c |>\n\
    <| c |>\n: I fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n:\
    \ I added a more efficient solution.\n<|/ c |>\n<| c |>\n: I added a more efficient\
    \ solution.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    for(long i = n; i > 0; i /=\
    \ 11L) {\n        if(i % 13L == 0) {\n            count += 1;\n        }\n   \
    \ }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long div = 11L;\n    long mod = 13L;\n    long x = n;\n    \n    while\
    \ (x > 0)\n    {\n        long y = x % div;\n        long z = x % mod;\n     \
    \   if (y == 7L && z == 7)\n        {\n            count++;\n        }\n     \
    \   x /= div;\n        x /= mod;\n    }\n    return count;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThanks for your answer. I tried your solution and it works.\
    \ But I still don't understand why my code doesn't work. Could you please explain\
    \ why?\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\n<|/ c |>\n\
    <| a dscore=1 |>\nThe problem is that the while loop never ends because x is always\
    \ greater than zero. \n<code>\nwhile (x > 0)\n{\n    long y = x % div;\n    long\
    \ z = x % mod;\n    if (y == 7L && z == 7)\n    {\n        count++;\n    }\n \
    \   x /= div;\n    x /= mod;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,fizzbuzz-buzz\
    \ |>\n<| c |>\nThanks for your answer. I tried your solution and it works. But\
    \ I still don't understand why my code doesn't work. Could you please explain\
    \ why?\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\n<|/ c |>\n\
    <| a dscore=1 |>\nThe problem is that the while loop never ends because x is always\
    \ greater than zero. \n<code>\nwhile (x > 0)\n{\n    long y = x % div;\n    long\
    \ z = x % mod;\n    if (y == 7L && z == 7)\n    {\n        count++;\n    }\n \
    \   x /= div;\n    x /= mod;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,fizzbuzz-buzz\
    \ |>\n<| a tags=fizzbuzz,c++,fizzbuzz-buzz |>\nThe problem is that the while loop\
    \ never ends because x is always greater than zero. \n<code>\nwhile (x > 0)\n\
    {\n    long y = x % div;\n    long z = x % mod;\n    if (y == 7L && z == 7)\n\
    \    {\n        count++;\n    }\n    x /= div;\n    x /= mod;\n}\n", "{\n\tlong\
    \ count = 0;\n\tlong temp;\n\twhile (n>0)\n\t{\n\t\ttemp = n%11;\n\t\tif (temp==7\
    \ || temp==13)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tn = n/11;\n\t}\n\treturn count;\n\
    }\n/*\nReturn the number of times the digit 7 appears in integers less than n\
    \ which are divisible by 11 or 13 and are divisible by 3.\n    >>> fizz_buzz_three(50L)\n\
    \    0L\n    >>> fizz_buzz_three(78L)\n    2L\n    >>> fizz_buzz_three(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz_three(long n) \n{\n\tlong count = 0;\n\tlong\
    \ temp;\n\twhile (n>0)\n\t{\n\t\ttemp = n%11;\n\t\tif (temp==7 || temp==13 &&\
    \ temp%3==0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tn = n/11;\n\t}\n\treturn count;\n\
    }\n/*\nReturn the number of times the digit 7 appears in integers less than n\
    \ which are divisible by 11 or 13 and are divisible by 3.\n    >>> fizz_buzz_three(50L)\n\
    \    0L\n    >>> fizz_buzz_three(78L)\n    2L\n    >>> fizz_buzz_three(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz_four(long n) \n{\n\tlong count = 0;\n\tlong\
    \ temp;\n\twhile (n>0)\n\t{\n\t\ttemp = n%11;\n\t\tif (temp==7 || temp==13 &&\
    \ temp%3==0 || temp==4)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tn = n/11;\n\t}\n\t\
    return count;\n}\n/*\nReturn the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13 and are divisible by 3.\n    >>>\
    \ fizz_buzz_four(50L)\n    0L\n    >>> fizz_buzz_four(78L)\n    2L\n    >>> fizz_buzz_four(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz_five(long n) \n{\n\tlong count = 0;\n\tlong\
    \ temp;\n\twhile (n>0)\n\t{\n\t\ttemp = n%11;\n\t\tif (temp==7 || temp==13 &&\
    \ temp%3==0 || temp==5 || temp==8)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tn = n/11;\n\
    \t}\n\treturn count;", "{\n    long count = 0;\n    long remainder = n % 11;\n\
    \    long remainder2 = n % 13;\n    long remainder3 = n % 17;\n    long remainder4\
    \ = n % 19;\n    long remainder5 = n % 23;\n    long remainder6 = n % 29;\n  \
    \  long remainder7 = n % 37;\n    long remainder8 = n % 47;\n    long remainder9\
    \ = n % 55;\n    long remainder10 = n % 63;\n    long remainder11 = n % 79;\n\
    \    long remainder12 = n % 87;\n    long remainder13 = n % 97;\n    long remainder14\
    \ = n % 103;\n    long remainder15 = n % 111;\n    long remainder16 = n % 121;\n\
    \    long remainder17 = n % 131;\n    long remainder18 = n % 141;\n    long remainder19\
    \ = n % 151;\n    long remainder20 = n % 161;\n    long remainder21 = n % 171;\n\
    \    long remainder22 = n % 181;\n    long remainder23 = n % 191;\n    long remainder24\
    \ = n % 201;\n    long remainder25 = n % 211;\n    long remainder26 = n % 221;\n\
    \    long remainder27 = n % 231;\n    long remainder28 = n % 241;\n    long remainder29\
    \ = n % 251;\n    long remainder30 = n % 261;\n    long remainder31 = n % 271;\n\
    \    long remainder32 = n % 281;\n    long remainder33 = n % 291;\n    long remainder34\
    \ = n % 301;\n    long remainder35 = n % 311;\n    long remainder36 = n % 321;\n\
    \    long remainder37 = n % 331;\n    long remainder38 = n % 341;\n    long remainder39\
    \ = n % 351;\n    long remainder40 = n % 361;\n    long remainder41 = n % 371;\n\
    \    long remainder42 = n % 381;\n    long remainder43 = n % 391;\n    long remainder44\
    \ = n % 401;\n    long remainder45 = n % 411;\n    long remainder46 = n % 421;\n\
    \    long remainder47 = n % 431;\n    long remainder48 = n % 441;\n    long remainder49\
    \ = n % 451;\n    long remainder50 = n % 461;\n    long remainder51 = n % 471;\n\
    \    long remainder52 = n % 481;\n    long ", "{\n    long count = 0;\n    long\
    \ i;\n    for(i = 0; i < n; ++i)\n    {\n        if((i % 11) == 0 || i % 13 ==\
    \ 0)\n        {\n            ++count;\n        }\n    }\n    return count;\n}",
  "{\n    long count = 0;\n    long remainder;\n    long i;\n    \n    for(i=n; i>0;\
    \ i--)\n    {\n        remainder = i % 11;\n        if(remainder == 7)\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++,algorithm,c++11 |>\n<| c |>\nThanks for your answer. I\
    \ don't understand why you use long instead of int. Can you explain that?\n<|/\
    \ c |>\n<| c |>\n`long` can hold numbers up to 2^63-1. `int` can hold numbers\
    \ up to 2^31-1. `long long` can hold numbers up to 2^63-1. `unsigned long long`\
    \ can hold numbers up to 2^64-1. `unsigned long` can hold numbers up to 2^32-1.\
    \ `unsigned int` can hold numbers up to 2^16-1. `unsigned short` can hold numbers\
    \ up to 2^8-1. `unsigned char` can hold numbers up to 2^0-1. `char` can hold numbers\
    \ up to 2^8-1. `short` can hold numbers up to 2^16-1. `unsigned short` can hold\
    \ numbers up to 2^8-1. `unsigned char` can hold numbers up to 2^0-1. `char` can\
    \ hold numbers up to 2^8-1. `int` can hold numbers up to 2^32-1. `unsigned int`\
    \ can hold numbers up to 2^16-1. `unsigned long` can hold numbers up to 2^32-1.\
    \ `unsigned long long` can hold numbers up to 2^64-1. `unsigned short` can hold\
    \ numbers up to 2^16-1. `unsigned long long` can hold numbers up to 2^64-1. `unsigned\
    \ long` can hold numbers up to 2^32-1. `unsigned short` can hold numbers up to\
    \ 2^16-1. `unsigned long long` can hold numbers up to 2^64-1. `unsigned long`\
    \ can hold numbers up to 2^32-1. `unsigned short` can hold numbers up to 2^16-1.\
    \ `unsigned long long` can hold numbers up to 2^64-1. `unsigned long` can hold\
    \ numbers up to 2^32-1. `unsigned short` can hold numbers up to 2^16-1. `unsigned\
    \ long long` can hold numbers up to 2^64-1. `unsigned long` can hold numbers up\
    \ to 2^32-1. `unsigned short` can hold numbers up to 2^16-1. `unsigned long long`\
    \ can hold numbers up to 2^64-1. `unsigned long` can hold numbers up to 2^32-1.\
    \ `unsigned short` can hold numbers up to 2^16-1. `unsigned long long` can hold\
    \ numbers up to 2^64-1. `unsigned long` can hold numbers ", "{\n    long count\
    \ = 0;\n    long x = n;\n    long remainder;\n    \n    while(x != 0) {\n    \
    \    remainder = x % 11;\n        if (remainder == 0 || remainder == 7) {\n  \
    \          count++;\n        }\n        x /= 11;\n    }\n    return count;\n}\n\
    </code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis doesn't work. Try\
    \ it with `fizz_buzz(78L)`. It returns `2L` instead of `3L`.\n<|/ c |>\n<| c |>\n\
    : Yes, I see that now. Thanks for pointing it out. I've updated the answer.\n\
    <|/ c |>\n<| c |>\n: I've updated the answer with another solution that doesn't\
    \ require any division.\n<|/ c |>\n<| c |>\n: Thanks for the update. I've updated\
    \ the answer again to include a solution that doesn't require any division.\n\
    <|/ c |>\n<| c |>\n: I've updated the answer again to include a solution that\
    \ doesn't require any division.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    for(long i =\
    \ n; i > 0; i /= 10) {\n        if((i % 11) == 0 || i % 13 == 0) {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\
    \tlong count = 0;\n\twhile (n > 0)\n\t{\n\t\tlong remainder = n % 11;\n\t\tif\
    \ (remainder == 0 || remainder == 7)\n\t\t\tcount++;\n\t\tn = n / 11;\n\t}\n\t\
    return count;\n}", "{\n    long count = 0;\n    long remainder;\n    long temp;\n\
    \    \n    temp = n;\n    \n    while ((temp % 11) == 0 || temp % 13 == 0) {\n\
    \        temp = temp / 11;\n        count++;\n    }\n    \n    remainder = temp\
    \ % 11;\n    \n    if (remainder == 7) {\n        count = count + 1;\n    }\n\
    \    \n    return count;\n}", "{\n    long count = 0;\n    long remainder;\n \
    \   \n    while (n>0)\n    {\n        remainder = n%11;\n        if (remainder\
    \ == 7)\n        {\n            count++;\n        }\n        n = n/11;\n    }\n\
    \    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\n\
    This doesn't work for `fizz_buzz(78L)` which should return `3L` but returns `2L`.\n\
    <|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/ c |>\n<| c |>\n: I added a\
    \ version that doesn't use any loops.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that doesn't use any loops.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long div = 11;\n    long mod\
    \ = 13;\n    long div2 = div * div;\n    long mod2 = mod * mod;\n    long div3\
    \ = div2 * div;\n    long mod3 = mod2 * mod;\n    long div4 = div3 * div;\n  \
    \  long mod4 = mod3 * mod;\n    long div5 = div4 * div;\n    long mod5 = mod4\
    \ * mod;\n    long div6 = div5 * div;\n    long mod6 = mod5 * mod;\n    long div7\
    \ = div6 * div;\n    long mod7 = mod6 * mod;\n    long div8 = div7 * div;\n  \
    \  long mod8 = mod7 * mod;\n    long div9 = div8 * div;\n    long mod9 = mod8\
    \ * mod;\n    long div10 = div9 * div;\n    long mod10 = mod9 * mod;\n    long\
    \ div11 = div10 * div;\n    long mod11 = mod10 * mod;\n    long div12 = div11\
    \ * div;\n    long mod12 = mod11 * mod;\n    long div13 = div12 * div;\n    long\
    \ mod13 = mod12 * mod;\n    long div14 = div13 * div;\n    long mod14 = mod13\
    \ * mod;\n    long div15 = div14 * div;\n    long mod15 = mod14 * mod;\n    long\
    \ div16 = div15 * div;\n    long mod16 = mod15 * mod;\n    long div17 = div16\
    \ * div;\n    long mod17 = mod16 * mod;\n    long div18 = div17 * div;\n    long\
    \ mod18 = mod17 * mod;\n    long div19 = div18 * div;\n    long mod19 = mod18\
    \ * mod;\n    long div20 = div19 * div;\n    long mod20 = mod19 * mod;\n    long\
    \ div21 = div20 * div;\n    long mod21 = mod20 * mod;\n    long div22 = div21\
    \ * div;\n    long mod22 = mod21 * mod;\n    long div23 = div22 * div;\n    long\
    \ mod23 = mod22 * mod;\n    long div24 = div23 * div;\n    long mod24 = mod23\
    \ * mod;\n    long div25 = div24 * div;\n    long mod25 = mod24 * mod;\n    long\
    \ div26", "{\n    long count = 0;\n    long d = n % 11;\n    long e = (n - d)\
    \ / 11;\n    long f = (n - e) / 13;\n    long g = (n - f) / 17;\n    long h =\
    \ (n - g) / 25;\n    long i = (n - h) / 31;\n    long j = (n - i) / 39;\n    long\
    \ k = (n - j) / 47;\n    long l = (n - k) / 55;\n    long m = (n - l) / 63;\n\
    \    long n = (n - m) / 71;\n    long o = (n - n) / 79;\n    long p = (n - o)\
    \ / 87;\n    long q = (n - p) / 97;\n    long r = (n - q) / 103;\n    long s =\
    \ (n - r) / 111;\n    long t = (n - s) / 119;\n    long u = (n - t) / 127;\n \
    \   long v = (n - u) / 135;\n    long w = (n - v) / 143;\n    long x = (n - w)\
    \ / 151;\n    long y = (n - x) / 159;\n    long z = (n - y) / 167;\n    long a\
    \ = (n - z) / 175;\n    long b = (n - a) / 183;\n    long c = (n - b) / 191;\n\
    \    long d = (n - c) / 199;\n    long e = (n - d) / 207;\n    long f = (n - e)\
    \ / 215;\n    long g = (n - f) / 223;\n    long h = (n - g) / 231;\n    long i\
    \ = (n - h) / 239;\n    long j = (n - i) / 247;\n    long k = (n - j) / 255;\n\
    \    long l = (n - k) / 263;\n    long m = (n - l) / 271;\n    long n = (n - m)\
    \ / 279;\n    long o = (n - n) / 287;\n    long p = (n - o) / 295;\n    long q\
    \ = (n - p) / 303;\n    long r = (n - q) / 311;\n    long s = (n - r) / 319;\n\
    \    long t = (n - s) / 327;\n    long u = (n - t) / 335;\n    long v = (n - u)\
    \ / 343;\n    long w = (n - v) / 351;\n    long x = (n - w) / 359;\n    long y\
    \ = (n - x) / 367;\n    long z = (n - y) / 375;\n    long a = (n - z) / 383;\n\
    \    long b = (n - a) / 391;\n    long c = (n - b) / 399;\n", "{\n\tlong count\
    \ = 0;\n\tfor (long i = 0; i <= n; i++) {\n\t\tif (i % 11 == 0 || i % 13 == 0)\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}", "{\n    long count = 0;\n\
    \    long temp;\n    \n    temp = n;\n    \n    while (temp > 0) {\n        if\
    \ (temp % 11 == 0 || temp % 13 == 0) {\n            count++;\n        }\n    \
    \    temp /= 10;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it for n = 78. You'll get an infinite loop.\n\
    <|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| c |>\n: I fixed it again.\
    \ Thanks.\n<|/ c |>\n<| c |>\n: I fixed it again. Thanks.\n<|/ c |>\n<| c |>\n\
    : I fixed it again. Thanks.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>", "{\n    long count = 0;\n    long temp;\n\
    \    long i;\n    \n    temp = n;\n    \n    while (temp > 0) {\n        if (temp\
    \ % 11 == 0 || temp % 13 == 0) {\n            count++;\n        }\n        temp\
    \ /= 10;\n    }\n    \n    return count;\n}", "{\n    long count = 0;\n    long\
    \ remainder;\n    \n    while (n>0) {\n        remainder = n%11;\n        if (remainder\
    \ == 7 || remainder == 13) count++;\n        n = n/11;\n    }\n    return count;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. `fizz_buzz(78L)` returns `2L`\
    \ instead of `3L`.\n<|/ c |>\n<| c |>\nIt works fine for me. Can you give an example\
    \ where it fails?\n<|/ c |>\n<| c |>\n`fizz_buzz(78L)` returns `2L` instead of\
    \ `3L`.\n<|/ c |>\n<| c |>\nOh I see, I misunderstood your question. I'll edit\
    \ my answer.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that\
    \ doesn't require a loop. Hope it helps.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long count = 0;\n    for(long i = n; i > 0; i /= 11)\n        for(long j\
    \ = i; j > 0; j /= 13)\n            if((n % j) == 0)\n                count++;\n\
    \    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not an answer,\
    \ but a comment on another answer. Your answer does not provide an explanation\
    \ as to why this works.\n<|/ c |>\n<| c |>\nI thought it would be helpful to explain\
    \ why this works. I added a comment to the other answer explaining why this works.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long count = 0;\n    long remainder;\n\
    \    \n    while (n>0) {\n        remainder = n % 11;\n        if (remainder ==\
    \ 7) {\n            count++;\n        }\n        n = n / 11;\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    long remainder;\n    \n    for(long\
    \ i = 1; i <= n; i++){\n        remainder = i % 11;\n        if(remainder == 0\
    \ || remainder == 7){\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    long count = 0;\n\
    \    long i;\n    for(i = 1; i <= n; i++)\n    {\n        if((i % 11) == 0 ||\
    \ i % 13 == 0)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nI like your\
    \ solution, but I wonder why you didn't use modulus operator instead of `if((i\
    \ % 11) == 0 || i % 13 == 0)`?\n<|/ c |>\n<| c |>\nBecause I didn't know about\
    \ modulus operator. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI guess it's\
    \ because I didn't know about it either. Thanks for pointing it out.\n<|/ c |>\n\
    <| c |>\nI guess it's because I didn't know about it either. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\nI guess it's because I didn't know about it either.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n\
    <code>\n#include <iostream>\nusing namespace std;", "{\n    long count = 0;\n\
    \    long i;\n    for(i = 0; i < n; i++){\n        if((i % 11) == 0 || (i % 13)\
    \ == 0){\n            count += 1;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis doesn't work for `fizz_buzz(78L)`\
    \ which should return `3L`, but returns `2L`.\n<|/ c |>\n<| c |>\n: I fixed the\
    \ bug. Thanks for pointing it out!\n<|/ c |>\n<| c |>\n: I added a more efficient\
    \ solution that doesn't require any division.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long\
    \ x = n;\n    long remainder;\n    \n    while(x != 0) {\n        remainder =\
    \ x%11;\n        if (remainder == 7) {\n            count++;\n        }\n    \
    \    x /= 11;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    long remainder = n % 11;\n   \
    \ long remainder2 = n % 13;\n    long remainder3 = n % 17;\n    long remainder4\
    \ = n % 19;\n    long remainder5 = n % 23;\n    long remainder6 = n % 29;\n  \
    \  long remainder7 = n % 37;\n    long remainder8 = n % 47;\n    long remainder9\
    \ = n % 55;\n    long remainder10 = n % 63;\n    long remainder11 = n % 79;\n\
    \    long remainder12 = n % 87;\n    long remainder13 = n % 97;\n    long remainder14\
    \ = n % 103;\n    long remainder15 = n % 111;\n    long remainder16 = n % 121;\n\
    \    long remainder17 = n % 131;\n    long remainder18 = n % 141;\n    long remainder19\
    \ = n % 151;\n    long remainder20 = n % 161;\n    long remainder21 = n % 171;\n\
    \    long remainder22 = n % 181;\n    long remainder23 = n % 191;\n    long remainder24\
    \ = n % 201;\n    long remainder25 = n % 211;\n    long remainder26 = n % 221;\n\
    \    long remainder27 = n % 231;\n    long remainder28 = n % 241;\n    long remainder29\
    \ = n % 251;\n    long remainder30 = n % 261;\n    long remainder31 = n % 271;\n\
    \    long remainder32 = n % 281;\n    long remainder33 = n % 291;\n    long remainder34\
    \ = n % 301;\n    long remainder35 = n % 311;\n    long remainder36 = n % 321;\n\
    \    long remainder37 = n % 331;\n    long remainder38 = n % 341;\n    long remainder39\
    \ = n % 351;\n    long remainder40 = n % 361;\n    long remainder41 = n % 371;\n\
    \    long remainder42 = n % 381;\n    long remainder43 = n % 391;\n    long remainder44\
    \ = n % 401;\n    long remainder45 = n % 411;\n    long remainder46 = n % 421;\n\
    \    long remainder47 = n % 431;\n    long remainder48 = n % 441;\n    long remainder49\
    \ = n % 451;\n    long remainder50 = n % 461;\n    long remainder51 = n % 471;\n\
    \    long remainder52 = n % 481;\n    long ", "{\n    long count = 0;\n    long\
    \ x = n;\n    long y = n;\n    long z = 0;\n    long w = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long w = 0;\n    long t = 0;\n    long u = 0;\n\
    \    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    long w = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ w = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long w = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long w = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long w = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long w = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long w = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long w = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long w = 0;\n    long t = 0;\n    long u = 0;\n\
    \    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    long w = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ w = 0;\n    long t = 0;\n    ", "{\n    long count = 0;\n    long remainder;\n\
    \    \n    for(long i = 1; i < n; i++) {\n        remainder = i % 11;\n      \
    \  if (remainder == 7) {\n            count += 1;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    long d = n % 11;\n    long e = (n -\
    \ d) / 13;\n    long f = d % 13;\n    long g = e % 11;\n    long h = f % 13;\n\
    \    long i = g / 11;\n    long j = g - i * 11;\n    long k = h - j * 11;\n  \
    \  long l = i - k * 13;\n    long m = n - l * 13;\n    long n = m / 11;\n    long\
    \ o = m % 11;\n    long p = o / 13;\n    long q = o - p * 13;\n    long r = p\
    \ - q * 13;\n    long s = r / 11;\n    long t = r - s * 11;\n    long u = t -\
    \ s * 11;\n    long v = u / 13;\n    long w = u - v * 13;\n    long x = v - w\
    \ * 13;\n    long y = w - x * 13;\n    long z = x - y * 13;\n    long a = y -\
    \ z * 13;\n    long b = z - a * 13;\n    long c = a - b * 13;\n    long d = b\
    \ - c * 13;\n    long e = c - d * 13;\n    long f = d - e * 13;\n    long g =\
    \ e - f * 13;\n    long h = f - g * 13;\n    long i = g - h * 13;\n    long j\
    \ = h - i * 13;\n    long k = i - j * 13;\n    long l = j - k * 13;\n    long\
    \ m = k - l * 13;\n    long n = l / 11;\n    long o = l % 11;\n    long p = o\
    \ / 13;\n    long q = o - p * 13;\n    long r = p - q * 13;\n    long s = r /\
    \ 11;\n    long t = r - s * 11;\n    long u = t - s * 11;\n    long v = u / 13;\n\
    \    long w = u - v * 13;\n    long x = v - w * 13;\n    long y = w - x * 13;\n\
    \    long z = x - y * 13;\n    long a = y - z * 13;\n    long b = z - a * 13;\n\
    \    long c = a - b * 13;\n    long d = b - c * 13;\n    long e = c - d * 13;\n\
    \    long f = d - e * 13;\n    long g = e - f * 13;\n    long h = f - g * 13;\n\
    \    long i = g - h * 13;\n    long j = h - i * 13;\n    long k = i - j * 13;\n\
    \    long l = j - k * 13;\n    long m = k - l * 13;\n    long n = l / 11;\n  \
    \  long o = l % 11;\n    long p = o / 13;\n    long q = o - p", "{\n    long count\
    \ = 0;\n    long remainder;\n    long i;\n    \n    for(i = 1; i <= n; i++) {\n\
    \        remainder = n % i;\n        if(remainder == 0 || remainder == 11 || remainder\
    \ == 13) {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++,algorithm |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long\
    \ i;\n    for(i = 1; i <= n; ++i)\n    {\n        if((i % 11) == 0 || i % 13 ==\
    \ 0)\n            ++count;\n    }\n    return count;\n}", "{\n    long count =\
    \ 0;\n    long remainder;\n    \n    while(n > 0)\n    {\n        remainder =\
    \ n % 10;\n        if((remainder == 7) && (remainder % 11 == 0) || (remainder\
    \ == 7) && (remainder % 13 == 0))\n        {\n            count++;\n        }\n\
    \        n = n / 10;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis code doesn't work. Try it with 50 and you'll see it returns\
    \ 0.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the bug and added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\nI fixed the bug and added a test\
    \ case to my answer.\n<|/ c |>\n<| c |>\nI fixed the bug and added a test case\
    \ to my answer.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long div = 11L;\n\
    \    long mod = 13L;\n    long temp;\n    \n    while (n > 0)\n    {\n       \
    \ temp = n % div;\n        if (temp == mod)\n        {\n            count++;\n\
    \        }\n        div = div * 10L;\n        mod = mod * 10L;\n        n = n\
    \ / div;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `fizz_buzz(78L)`\n<|/ c |>\n<| c\
    \ |>\nYeah, I noticed that after I posted it.  I fixed it now.\n<|/ c |>\n<| c\
    \ |>\nThanks for your answer. Can you please explain why you used the long type\
    \ for div and mod? I thought that long was enough to store a number in binary.\n\
    <|/ c |>\n<| c |>\nThe `long` type can store a number in binary, but `div` and\
    \ `mod` need to be `long` types.  `div` and `mod` were declared as `int` types,\
    \ so they were overflowing when they were multiplied by 10.  By declaring them\
    \ as `long`, they will be automatically promoted to `long` when multiplied by\
    \ 10.\n<|/ c |>\n<| c |>\nThanks for your explanation. Can you please explain\
    \ why you used the long type for div and mod? I thought that long was enough to\
    \ store a number in binary.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long i;\n    for(i = 1; i\
    \ < n; i+=11)\n    {\n        if((i % 11) == 0)\n        {\n            count\
    \ += 1;\n        }\n    }\n    for(i = 1; i < n; i+=13)\n    {\n        if((i\
    \ % 13) == 0)\n        {\n            count += 1;\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long i;\n  \
    \  for(i = 1; i <= n; i++) {\n        if((i % 11) == 0 || (i % 13) == 0) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to count the numbers\
    \ that are divisible by 11 or 13. Your code counts the numbers that are divisible\
    \ by 11 or 13 and also divisible by 7. OP wants to count the numbers that are\
    \ divisible by 11 or 13 and also divisible by 7.\n<|/ c |>\n<| c |>\nI missed\
    \ that part. Thanks for pointing it out. I've updated my answer.\n<|/ c |>\n<|\
    \ a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long digit;\n    \n    for (digit = n; digit\
    \ >= 10; digit /= 10) \n    {\n        if (std.int::isMultiple(digit, 11) || std.int::isMultiple(digit,\
    \ 13)) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long temp;\n    \n    temp\
    \ = n;\n    \n    while (temp > 0) {\n        if (temp % 11 == 0 || temp % 13\
    \ == 0) {\n            count++;\n        }\n        temp /= 10;\n    }\n    \n\
    \    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    public int fizz_buzz(int n) {\n    int count = 0;\n    \n    for(int i = 1; i\
    \ <= n; i++) {\n        if((i % 11) == 0 || (i % 13) == 0) {\n            count++;\n\
    \        }\n    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,java\
    \ |>\n<| a tags=fizzbuzz,java |>\n<code>\npublic int fizzBuzz(int n) {\n    int\
    \ count = 0;\n    \n    for(int i = 1; i <= n; i++) {\n        if((i % 11) ==\
    \ 0 || (i % 13) == 0) {\n            count++;\n        }\n    }\n    \n    return\
    \ count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\npublic class FizzBuzz {\n    public static void main(String[] args) {\n\
    \        System.out.println(fizzBuzz(100));\n    }\n    \n    public static int\
    \ fizzBuzz(int n) {\n        int count = 0;\n        \n        for(int i = 1;\
    \ i <= n; i++) {\n            if((i % 11) == 0 || (i % 13) == 0) {\n         \
    \       count++;\n            }\n        }\n        \n        return count;\n\
    \    }\n}\n</code>\n<|/ a tags=fizzbuzz,java |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\npublic class FizzBuzz {\n    public static void main(String[] args) {\n\
    \        System.out.println(fizzBuzz(100));\n    }\n    \n    public static int\
    \ fizzBuzz(int n) {\n        int count = 0;\n        \n        for(int i = 1;\
    \ i <= n; i++) {\n            if((i % 11) == 0 || (i % 13) == 0) {\n         \
    \       count++;\n            }\n        }\n        \n        return count;\n\
    \    }\n}\n</code>\n<|/ a tags=fizzbuzz,java |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a tags=fizzbuzz,java\
    \ |>\n<code>\npublic class FizzBuzz {\n    public static void main(String[] args)\
    \ {", "{\n    long count = 0;\n    long remainder;\n    \n    while (n) {\n  \
    \      remainder = n % 10;\n        if (remainder == 7 || remainder == 11 || remainder\
    \ == 13) {\n            count++;\n        }\n        n /= 10;\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    while (n > 0)\n    {\n        if (n\
    \ % 11 == 0 || n % 13 == 0)\n        {\n            count++;\n        }\n    \
    \    n = n / 10;\n    }\n    return count;\n}", "{\n\tlong count = 0;\n\tlong\
    \ temp;\n\t\n\twhile (n>0)\n\t{\n\t\ttemp = n % 10;\n\t\tif (temp == 7) count++;\n\
    \t\tn = n / 10;\n\t}\n\t\n\treturn count;\n}", "{\n    long count = 0;\n    for(long\
    \ i = n; i > 0; i /= 11L) \n    {\n        if((i % 11L) == 7L) \n        {\n \
    \           count += 1;\n        }\n    }\n    for(long i = n; i > 0; i /= 13L)\
    \ \n    {\n        if((i % 13L) == 7L) \n        {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't work. Try it with `fizz_buzz(78L)` - it returns `2L` instead of `3L`.\n\
    <|/ c |>\n<| c |>\nIt works. I tested it on `fizz_buzz(78L)` which returns `2L`.\
    \ `fizz_buzz(79L)` returns `3L`.\n<|/ c |>\n<| c |>\nI tested it on `fizz_buzz(78L)`\
    \ which returns `2L`. `fizz_buzz(79L)` returns `3L`.\n<|/ c |>\n<| c |>\nI tested\
    \ it on `fizz_buzz(78L)` which returns `2L`. `fizz_buzz(79L)` returns `3L`.\n\
    <|/ c |>\n<| c |>\nI tested it on `fizz_buzz(78L)` which returns `2L`. `fizz_buzz(79L)`\
    \ returns `3L`.\n<|/ c |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long count = 0;\n    for(long\
    \ i = n; i > 0; i /= 10L) {\n        if((i % 11L) == 7L) {\n            count\
    \ += 1;\n        }\n        if((i % 13L) == 7L) {\n            count += 1;\n \
    \       }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it for n = 78. You'll get 2 instead of 3.\n\
    <|/ c |>\n<| c |>\n: I tested it and it works. I even tested it on n = 79 and\
    \ it returned 3. What do you mean by \"doesn't work\"?\n<|/ c |>\n<| c |>\nI meant\
    \ that your code doesn't work. Try it for n = 78. You'll get 2 instead of 3.\n\
    <|/ c |>\n<| c |>\n: I tested it and it works. I even tested it on n = 79 and\
    \ it returned 3. What do you mean by \"doesn't work\"?\n<|/ c |>\n<| c |>\nI meant\
    \ that your code doesn't work. Try it for n = 78. You'll get 2 instead of 3.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <cmath>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    for(long i = n; i > 0; i /= 11)\n\
    \    {\n        if(i % 11 == 7)\n            count++;\n    }\n    for(long i =\
    \ n; i > 0; i /= 13)\n    {\n        if(i % 13 == 7)\n            count++;\n \
    \   }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<|\
    \ c |>\nI like this solution, but I wonder if there is a way to make it more efficient.\
    \ For example, if you have `long n = 1000000000000L` then `fizz_buzz(n)` will\
    \ take about a minute to run. Is there a way to make it more efficient?\n<|/ c\
    \ |>\n<| c |>\n: Yes, you can make it more efficient by using a `long` instead\
    \ of `int`. But then you also have to change `i <= n` to `i < n`. And then you\
    \ have to change `i <= n` to `i < n` again and so on. That's why I suggested a\
    \ solution where you use a `long` instead of an `int`.\n<|/ c |>\n<| c |>\n: I\
    \ added a solution that uses `long` instead of `int`.\n<|/ c |>\n<| c |>\n: I\
    \ added a solution that uses `long` instead of `int`.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long digit;\n    \n    while (n > 0) {\n        digit = n % 10;\n  \
    \      if (digit == 7 || digit == 11 || digit == 13) {\n            count++;\n\
    \        }\n        n = n / 10;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like your solution, however it fails for `fizz_buzz(78L)` which\
    \ returns `2L` instead of `3L`.\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/\
    \ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long remainder;\n    long i;\n    for(i = n - 1; i >= 0; i--)\n    {\n\
    \        remainder = n % 10;\n        if(remainder == 7 || remainder == 11)\n\
    \        {\n            count++;\n        }\n        n = n / 10;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++ |>\n<| c |>\nThis code doesn't work.\
    \ Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<| c |>\nIt does work. Try it with\
    \ `fizz_buzz(78L)`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `fizz_buzz(78L)`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<| a |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long\
    \ remainder;\n    long i;\n    \n    for(i = 1; i <= n; i++) {\n        remainder\
    \ = i % 11;\n        if (remainder == 7) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer.\
    \ Your code works fine for small numbers but for large numbers it doesn't work.\
    \ For example: fizz_buzz(987654321L) returns 0 instead of 3\n<|/ c |>\n<| c |>\n\
    I tested it on `987654321L` and it returned `3`. I think it works for `987654321L`\
    \ because `987654321L` can be divided by `11` or `13` exactly 3 times. I tested\
    \ it on `987654321L` by printing `remainder` after each iteration. `remainder`\
    \ was `0` for the first iteration, `1` for the second iteration, `2` for the third\
    \ iteration and `3` for the fourth iteration. `remainder` was `0` for the first\
    \ iteration, `1` for the second iteration, `2` for the third iteration and `3`\
    \ for the fourth iteration.\n<|/ c |>\n<| c |>\nI tested it on `987654321L` by\
    \ printing `remainder` after each iteration. `remainder` was `0` for the first\
    \ iteration, `1` for the second iteration, `2` for the third iteration and `3`\
    \ for the fourth iteration. `remainder` was `0` for the first iteration, `1` for\
    \ the second iteration, `2` for the third iteration and `3` for the fourth iteration.\n\
    <|/ c |>\n<| c |>\nI tested it on `987654321L` by printing `remainder` after each\
    \ iteration. `remainder` was `0` for the first iteration, `1` for the second iteration,\
    \ `2` for the third iteration and `3` for the fourth iteration. `remainder` was\
    \ `0` for the first iteration, `1` for the second iteration, `2` for the third\
    \ iteration and `3` for the fourth iteration.\n<|/ c |>\n<| c |>\nI tested it\
    \ on `987654321L` by printing `remainder` after each iteration. `remainder` was\
    \ `0` for the first iteration, `1` for the second iteration, `2` for the third ",
  "{\n    long count = 0;\n    long remainder;\n    long i;\n    \n    for(i = 1;\
    \ i <= n; i++){\n        remainder = n % i;\n        if(remainder == 0 || remainder\
    \ == 11 || remainder == 13){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=fizzbuzz,c++,algorithm |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  long count = 0;\n    long remainder;\n    long temp;\n    \n    while(n > 0)\n\
    \    {\n        remainder = n % 10;\n        temp = remainder % 11;\n        if(temp\
    \ == 0 || temp == 7)\n        {\n            count++;\n        }\n        n =\
    \ n / 10;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,c++\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long i;\n    for(i = 1; i < n; ++i)\n    {\n        if((i % 11) == 0\
    \ || i % 13 == 0)\n            ++count;\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++ |>\n<| c |>\nThanks for your answer. I tried your code,\
    \ but I got this error \"error: expected primary-expression before \u2018for\u2019\
    \ token\". What does it mean?\n<|/ c |>\n<| c |>\nI forgot to include `<cstdio>`\
    \ at the top. I edited my answer.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I tried your code, but I got this error \"error: expected primary-expression\
    \ before \u2018for\u2019 token\". What does it mean?\n<|/ c |>\n<| c |>\nI forgot\
    \ to include `<cstdio>` at the top. I edited my answer.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I tried your code, but I got this error \"error: expected primary-expression\
    \ before \u2018for\u2019 token\". What does it mean?\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \tlong count = 0;\n\twhile (n >= 100) {\n\t\tif (n % 11 == 0) count++;\n\t\tif\
    \ (n % 13 == 0) count++;\n\t\tn /= 100;\n\t}\n\treturn count;\n}\n/*\nReturn the\
    \ number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13.\n    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n\
    \    >>> fizz_buzz(79L)\n    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong\
    \ count = 0;\n\twhile (n >= 100) {\n\t\tif (n % 11 == 0) count++;\n\t\tif (n %\
    \ 13 == 0) count++;\n\t\tn /= 100;\n\t}\n\treturn count;\n}\n/*\nReturn the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13.\n    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n\
    \    >>> fizz_buzz(79L)\n    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong\
    \ count = 0;\n\twhile (n >= 100) {\n\t\tif (n % 11 == 0) count++;\n\t\tif (n %\
    \ 13 == 0) count++;\n\t\tn /= 100;\n\t}\n\treturn count;\n}\n/*\nReturn the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13.\n    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n\
    \    >>> fizz_buzz(79L)\n    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong\
    \ count = 0;\n\twhile (n >= 100) {\n\t\tif (n % 11 == 0) count++;\n\t\tif (n %\
    \ 13 == 0) count++;\n\t\tn /= 100;\n\t}\n\treturn count;\n}\n/*\nReturn the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13.\n    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n\
    \    >>> fizz_buzz(79L)\n    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong\
    \ count = 0;\n\twhile (n >= 100) {\n\t\tif (n % 11 == 0) count++;\n\t\tif (n %\
    \ 13 == 0) count++;\n\t\tn /= 100;\n\t}\n\treturn count;\n}", "{\n    long count\
    \ = 0;\n    long remainder;\n    \n    while (n>0) {\n        remainder = n%11;\n\
    \        if (remainder == 7) {\n            count++;\n        }\n        n = n/11;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n   \
    \ long count = 0;\n    long remainder;\n    \n    while (n>0)\n    {\n       \
    \ remainder = n%11;\n        if (remainder == 7)\n        {\n            count++;\n\
    \        }\n        n = n/11;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    long i;\n    for(i = 0; i < n;\
    \ ++i)\n    {\n        if(i % 11 == 0 || i % 13 == 0)\n            ++count;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,fizzlers |>\n<|\
    \ c |>\nI like your solution, however I believe that it is more efficient to just\
    \ count the numbers that are divisible by 11 and 13. Since you only need to count\
    \ the numbers that are divisible by 11 and 13, you only need to loop through numbers\
    \ less than n once.\n<|/ c |>\n<| c |>\nYes, you are right. I was thinking about\
    \ counting the numbers that are divisible by 11 and 13 but then I realized that\
    \ it is more efficient to just count the numbers that are divisible by 11 and\
    \ 13. Thanks for pointing that out.\n<|/ c |>\n<| a tags=fizzbuzz,c++,fizzlers\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long x = n;\n    long y = n;\n    long z = 0;\n    long w = 0;\n   \
    \ \n    while(x != 0)\n    {\n        z = x % 11;\n        x /= 11;\n        \n\
    \        if(z == 7)\n        {\n            count++;\n        }\n        \n  \
    \      z = y % 13;\n        y /= 13;\n        \n        if(z == 7)\n        {\n\
    \            count++;\n        }\n        \n        z = w % 11;\n        w /=\
    \ 11;\n        \n        if(z == 7)\n        {\n            count++;\n       \
    \ }\n    }\n    \n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. Try it for n = 50 and you'll see that it returns 0 instead\
    \ of 2.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the code so that\
    \ it works with any number less than 100. Thanks for pointing that out.\n<|/ c\
    \ |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <cmath>\nusing namespace std;", "{\n    long count = 0;\n    long remainder;\n\
    \    long temp;\n    \n    while(n > 0)\n    {\n        remainder = n % 10;\n\
    \        temp = remainder % 11;\n        if(temp == 0 || temp == 7)\n        {\n\
    \            count++;\n        }\n        n = n / 10;\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    for(long i = n; i > 0; i /=\
    \ 11L) {\n        for(long j = 1; j <= i; j *= 11L) {\n            for(long k\
    \ = 1; k <= j; k *= 13L) {\n                if(k % 11L == 7L) {\n            \
    \        count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n#include <stdio.h>",
  "{\n    long count = 0;\n    long x = n;\n    \n    while (x != 0) {\n        long\
    \ y = x % 11;\n        x /= 11;\n        if (y == 7) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for the answer. I am not allowed to use any libraries. I only need to use\
    \ basic math operations.\n<|/ c |>\n<| c |>\nI added a solution without using\
    \ any libraries.\n<|/ c |>\n<| c |>\nThanks for the answer. I am not allowed to\
    \ use any libraries. I only need to use basic math operations.\n<|/ c |>\n<| c\
    \ |>\nI added a solution without using any libraries.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "{\n    long count = 0;\n    long remainder;\n    \n    while (n)\
    \ {\n        remainder = n % 10;\n        if (remainder == 7 || remainder == 11\
    \ || remainder == 13) {\n            count++;\n        }\n        n /= 10;\n \
    \   }\n    return count;\n}", "{\n    long count = 0;\n    long remainder;\n \
    \   \n    while(n > 0)\n    {\n        remainder = n % 11;\n        if(remainder\
    \ == 0 || remainder == 7)\n        {\n            count++;\n        }\n      \
    \  n = n / 11;\n    }\n    return count;\n}", "{\n\tlong count = 0;\n\twhile (n\
    \ > 0)\n\t{\n\t\tif (n % 11 == 0 || n % 13 == 0)\n\t\t\tcount++;\n\t\tn /= 10;\n\
    \t}\n\treturn count;\n}\n/*\nReturn the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 3 or 5.\n    >>> fizz_buzz(50L)\n\
    \    0L\n    >>> fizz_buzz(78L)\n    1L\n    >>> fizz_buzz(79L)\n    1L\n    \n\
    */\nlong fizz_buzz(long n) \n{\n\tlong count = 0;\n\twhile (n > 0)\n\t{\n\t\t\
    if (n % 3 == 0 || n % 5 == 0)\n\t\t\tcount++;\n\t\tn /= 10;\n\t}\n\treturn count;\n\
    }\n/*\nReturn the number of times the digit 7 appears in integers less than n\
    \ which are divisible by 3 or 5.\n    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n\
    \    1L\n    >>> fizz_buzz(79L)\n    1L\n    \n*/\nlong fizz_buzz(long n) \n{\n\
    \tlong count = 0;\n\twhile (n > 0)\n\t{\n\t\tif (n % 3 == 0 || n % 5 == 0)\n\t\
    \t\tcount++;\n\t\tn /= 10;\n\t}\n\treturn count;\n}\n/*\nReturn the number of\
    \ times the digit 7 appears in integers less than n which are divisible by 3 or\
    \ 5.\n    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    1L\n    >>>\
    \ fizz_buzz(79L)\n    1L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong count =\
    \ 0;\n\twhile (n > 0)\n\t{\n\t\tif (n % 3 == 0 || n % 5 == 0)\n\t\t\tcount++;\n\
    \t\tn /= 10;\n\t}\n\treturn count;\n}\n/*\nReturn the number of times the digit\
    \ 7 appears in integers less than n which are divisible by 3 or 5.\n    >>> fizz_buzz(50L)\n\
    \    0L\n    >>> fizz_buzz(78L)\n    1L\n    >>> fizz_buzz(79L)\n    1L\n    \n\
    */\nlong fizz_buzz(long n) \n{\n\tlong count = 0;\n\twhile (n > 0)\n\t{\n\t\t\
    if (n % 3 == 0 || n % 5 == 0)\n\t\t\tcount++;\n\t\tn /= 10;\n\t}\n\treturn count;\n\
    }\n/*\nReturn the number of times the digit 7 appears in integers less than n\
    \ which are divisible ", "{\n    long count = 0;\n    long x = n;\n    long y\
    \ = n;\n    long z = 1;\n    \n    while (x != 0) {\n        if (x % 11 == 0 ||\
    \ x % 13 == 0) {\n            count++;\n        }\n        x /= 10;\n    }\n \
    \   \n    while (y != 0) {\n        if (y % 11 == 0 || y % 13 == 0) {\n      \
    \      count++;\n        }\n        y /= 10;\n    }\n    \n    while (z != 0)\
    \ {\n        if (z % 11 == 0 || z % 13 == 0) {\n            count++;\n       \
    \ }\n        z /= 10;\n    }\n    \n    return count;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `fizz_buzz(78L)`\n<|/ c |>\n<| c\
    \ |>\nIt works, I tested it before posting. Try it with `fizz_buzz(78L)`\n<|/\
    \ c |>\n<| c |>\nIt doesn't work. Try it with `fizz_buzz(78L)`\n<|/ c |>\n<| c\
    \ |>\nIt works, I tested it before posting. Try it with `fizz_buzz(78L)`\n<|/\
    \ c |>\n<| c |>\nIt doesn't work. Try it with `fizz_buzz(78L)`\n<|/ c |>\n<| a\
    \ tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\
    \    long count = 0;\n    long i;\n    for(i = 1; i <= n; i += 11)\n    {\n  \
    \      if((i % 11) == 0)\n            count += 1;\n    }\n    for(i = 1; i <=\
    \ n; i += 13)\n    {\n        if((i % 13) == 0)\n            count += 1;\n   \
    \ }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c\
    \ |>\nThis is not an answer, but a comment. Please, remove it.\n<|/ c |>\n<| c\
    \ |>\nI didn't post this as an answer, because I wanted to show how to do it without\
    \ using any libraries. I thought it would be helpful to show how to do it without\
    \ using any libraries. I didn't want to post an answer because I wanted to show\
    \ how to do it without using any libraries. I thought it would be helpful to show\
    \ how to do it without using any libraries. I didn't want to post an answer because\
    \ I wanted to show how to do it without using any libraries. I thought it would\
    \ be helpful to show how to do it without using any libraries. I didn't want to\
    \ post an answer because I wanted to show how to do it without using any libraries.\
    \ I thought it would be helpful to show how to do it without using any libraries.\
    \ I didn't want to post an answer because I wanted to show how to do it without\
    \ using any libraries. I thought it would be helpful to show how to do it without\
    \ using any libraries.\n<|/ c |>\n<| c |>\nI didn't want to post an answer because\
    \ I wanted to show how to do it without using any libraries. I thought it would\
    \ be helpful to show how to do it without using any libraries. I didn't want to\
    \ post an answer because I wanted to show how to do it without using any libraries.\
    \ I thought it would be helpful to show how to do it without using any libraries.\
    \ I didn't want to post an answer because I wanted to show how to do it without\
    \ using any libraries. I thought it would be helpful to show how to do it without\
    \ using any libraries. I didn't want to post an answer because I wanted to show\
    \ how to do it without using any libraries. I thought it would be helpful to show\
    \ how to do it without using any libraries.\n<|/ c |>\n<| c |>\nI didn't want\
    \ to post an answer because I wanted to show how to do it without using any libraries.\
    \ I thought it would be helpful to show how to do it without using any libraries.\
    \ I didn't want to post an answer because I wanted to show how to do it without\
    \ using any libraries. I thought it would be helpful to show how to do it without\
    \ using any libraries. I didn't want to post an answer because I wanted to show\
    \ how to do it without using any libraries. I thought it would be helpful to show\
    \ how to do it without using any libraries. I didn't want to post an ", "{\n \
    \   long count = 0;\n    long div = 11L;\n    long mod = 13L;\n    long tmp;\n\
    \    \n    while (n > 0)\n    {\n        tmp = n % div;\n        if (tmp == mod)\n\
    \            count++;\n        div = div * 10L;\n        mod = mod * 10L;\n  \
    \      n = n / div;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis code does not work. Try it for n = 78.\n<|/ c |>\n<| c |>\n\
    : It works for me. `fizz_buzz(78)` returns `2`.\n<|/ c |>\n<| c |>\n: I tested\
    \ it on `n = 78` and the result is `2`.\n<|/ c |>\n<| c |>\n: I tested it on `n\
    \ = 78` and the result is `2`.\n<|/ c |>\n<| c |>\n: I tested it on `n = 78` and\
    \ the result is `2`.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long remainder;\n    \n    while (n) {\n\
    \        remainder = n % 11;\n        if (remainder == 7) {\n            count++;\n\
    \        }\n        n /= 11;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\npublic int fizz_buzz(int n) {\n    int count =\
    \ 0;\n    \n    while(n > 0){\n        int remainder = n % 10;\n        \n   \
    \     if(remainder == 7){\n            count++;\n        }\n        \n       \
    \ n /= 10;\n    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,java\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int fizz_buzz(int n) {\n\
    \    int count = 0;\n    \n    while(n > 0){\n        int remainder = n % 10;\n\
    \        \n        if(remainder == 7){\n            count++;\n        }\n    \
    \    \n        n /= 10;\n    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,java\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a |>\n<code>\npublic int fizz_buzz(int n) {\n    int count\
    \ = 0;\n    \n    while(n > 0){\n        int remainder = n % 10;\n        \n \
    \       if(remainder == 7){\n            count++;\n        }\n        \n     \
    \   n /= 10;\n    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,java\
    \ dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question improves its\
    \ long-term value.\n<|/ c |>\n<| a tags=fizzbuzz,java |>\n<code>\npublic int fizz_buzz(int\
    \ n) {\n    int count = 0;\n    \n    while(n > 0){\n        int remainder = n\
    \ % 10;\n        \n        if(remainder == 7){\n            count++;\n       \
    \ }\n        \n        n /= 10;\n    }\n    \n    return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\npublic int fizz_buzz(int ", "{\n    long count\
    \ = 0;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n \
    \   long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f\
    \ = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n \
    \   long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o\
    \ = n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n \
    \   long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x\
    \ = n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n \
    \   long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g\
    \ = n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n \
    \   long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p\
    \ = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n \
    \   long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y\
    \ = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n \
    \   long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h\
    \ = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n \
    \   long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q\
    \ = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n \
    \   long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z\
    \ = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n \
    \   long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i\
    \ = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n \
    \   long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r\
    \ = n;\n    long s = n;\n    long t = n;\n    ", "{\n    long count = 0;\n   \
    \ long remainder;\n    \n    while (n>0) {\n        remainder = n % 11;\n    \
    \    if (remainder == 0 || remainder == 7) {\n            count++;\n        }\n\
    \        n = n / 11;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<|\
    \ c |>\n: It does work. Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<| c |>\n: It\
    \ does work. Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<| c |>\n: It does work. Try it with\
    \ `fizz_buzz(78L)`.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    long count = 0;\n\
    \    long d = n % 10;\n    long x = n / 10;\n    long y = x % 10;\n    long z\
    \ = x / 10;\n    \n    if (d == 7 && x == 11 || d == 7 && x == 13) {\n       \
    \ count++;\n    }\n    \n    if (y == 7 && z == 11 || y == 7 && z == 13) {\n \
    \       count++;\n    }\n    \n    if (z == 7 && x == 11 || z == 7 && x == 13)\
    \ {\n        count++;\n    }\n    \n    return count;\n}", "{\n    long count\
    \ = 0;\n    long i;\n    for(i = 1; i <= n; i++)\n    {\n        if((i % 11) ==\
    \ 0)\n        {\n            if((i % 13) == 0)\n            {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Scanner;", "{\n\
    \    long count = 0;\n    long div = 11L;\n    while (n > div) {\n        if (n\
    \ % div == 0)\n            count++;\n        div = div * 3L;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `fizz_buzz(78L)`\
    \ returns `2L` instead of `3L`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for\
    \ pointing it out. Now it works.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <stdio.h>\n#include <stdlib.h>", "{\n    long count = 0;\n    long remainder;\n\
    \    \n    while (n>0) {\n        remainder = n%11;\n        if (remainder ==\
    \ 7) {\n            count++;\n        }\n        n = n/11;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,c++,algorithm |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  long count = 0;\n    long remainder;\n    \n    for(long i = n; i > 0; i /=\
    \ 10) {\n        remainder = i % 10;\n        if(remainder == 7) {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long remainder;\n    \n    for(long i =\
    \ 1; i <= n; i++){\n        remainder = n % i;\n        if(remainder == 0 || remainder\
    \ == 11 || remainder == 13){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis code\
    \ doesn't work. Try it with 50 and you'll see it returns 0 instead of 2.\n<|/\
    \ c |>\n<| c |>\n: I didn't test it but I think it should work. Can you give me\
    \ a test case where it doesn't work?\n<|/ c |>\n<| c |>\n: I tested it and it\
    \ works. I edited my answer to include a test case where it doesn't work.\n<|/\
    \ c |>\n<| c |>\n: I edited my answer to include a test case where it doesn't\
    \ work.\n<|/ c |>\n<| c |>\n: I edited my answer to include a test case where\
    \ it doesn't work.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long d = n %\
    \ 10;\n    long x = n / 10;\n    long y = x % 10;\n    long z = x / 10;\n    \n\
    \    if (d == 7)\n        count += 1;\n    \n    if (y == 7)\n        count +=\
    \ 1;\n    \n    if (z == 7)\n        count += 1;\n    \n    return count;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long digit =\
    \ n % 10;\n    long remainder = n % 100;\n    long quotient = n / 10;\n    \n\
    \    if (remainder % 11 == 0 || remainder % 13 == 0) {\n        count++;\n   \
    \ }\n    \n    while (quotient != 0) {\n        long remainder2 = quotient % 10;\n\
    \        long quotient2 = quotient / 10;\n        \n        if (remainder2 % 11\
    \ == 0 || remainder2 % 13 == 0) {\n            count++;\n        }\n        \n\
    \        quotient = quotient2;\n    }\n    \n    return count;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't seem to work. `fizz_buzz(78L)` returns\
    \ `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to my answer.\n<|/ c |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long i;\n  \
    \  for(i = 1; i <= n; i++) {\n        if(i % 11 == 0 || i % 13 == 0) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work. Try it on `fizz_buzz(78L)`. You will get `0`\
    \ instead of `2`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the\
    \ bug. Now it works.\n<|/ c |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long remainder;\n    long\
    \ temp;\n    \n    temp = n;\n    \n    while(temp > 0)\n    {\n        remainder\
    \ = temp % 11;\n        \n        if(remainder == 7)\n        {\n            count++;\n\
    \        }\n        \n        temp /= 11;\n    }\n    \n    return count;\n}",
  "{\n    long count = 0;\n    long div = 11L;\n    long mod;\n    \n    while (n\
    \ > div) {\n        mod = n % div;\n        if (mod != 0 && mod != 7) {\n    \
    \        count++;\n        }\n        div = div * 10L;\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| a dscore=2 |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long div = 11L;\n\
    \    long mod;\n    \n    while (n > div) {\n        mod = n % div;\n        if\
    \ (mod != 0 && mod != 7) {\n            count++;\n        }\n        div = div\
    \ * 10L;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work for `fizz_buzz(78)` which returns `3` instead\
    \ of `2`.\n<|/ c |>\n<| c |>\nI fixed the bug.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long\
    \ div = 11L;\n    long mod;\n    \n    while (n > div) {\n        mod = n % div;\n\
    \        if (mod != 0 && mod != div) {\n            count++;\n        }\n    \
    \    div = div * 2L;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long count = 0;\n    long div = 11L;\n    long mod;\n    long digit;\n \
    \   \n    while (n != 0) {\n        mod = n % div;\n        if (mod != 0) {\n\
    \            digit = mod % 10;\n            if (digit == 7) {\n              \
    \  count++;\n            }\n        }\n        div = div / 10;\n        n = n\
    \ / 10;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI appreciate\
    \ your efforts, but I really want to know why my code doesn't work. Your code\
    \ works perfectly fine, but I really want to know why mine doesn't work. Thanks\
    \ anyways!\n<|/ c |>\n<| c |>\nI added a comment to my answer.\n<|/ c |>\n<| c\
    \ |>\nThanks for the explanation! I really appreciate it!\n<|/ c |>\n<| a tags=fizzbuzz,c++,fizzler,fizzbuzz\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long div = 11L;\n    long mod = 13L;\n    \n    while (n >= div) {\n\
    \        if (n % div == mod) {\n            count++;\n        }\n        div +=\
    \ 11L;\n        mod += 13L;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis code does not work. Try it with `fizz_buzz(78L)` which should\
    \ return `3L`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed the\
    \ bug and added a test case.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long div = 11L;\n    long\
    \ mod = 13L;\n    long div2 = div * div;\n    long mod2 = mod * mod;\n    long\
    \ div3 = div2 * div;\n    long mod3 = mod2 * mod;\n    long div4 = div3 * div;\n\
    \    long mod4 = mod3 * mod;\n    long div5 = div4 * div;\n    long mod5 = mod4\
    \ * mod;\n    long div6 = div5 * div;\n    long mod6 = mod5 * mod;\n    long div7\
    \ = div6 * div;\n    long mod7 = mod6 * mod;\n    long div8 = div7 * div;\n  \
    \  long mod8 = mod7 * mod;\n    long div9 = div8 * div;\n    long mod9 = mod8\
    \ * mod;\n    long div10 = div9 * div;\n    long mod10 = mod9 * mod;\n    long\
    \ div11 = div10 * div;\n    long mod11 = mod10 * mod;\n    long div12 = div11\
    \ * div;\n    long mod12 = mod11 * mod;\n    long div13 = div12 * div;\n    long\
    \ mod13 = mod12 * mod;\n    long div14 = div13 * div;\n    long mod14 = mod13\
    \ * mod;\n    long div15 = div14 * div;\n    long mod15 = mod14 * mod;\n    long\
    \ div16 = div15 * div;\n    long mod16 = mod15 * mod;\n    long div17 = div16\
    \ * div;\n    long mod17 = mod16 * mod;\n    long div18 = div17 * div;\n    long\
    \ mod18 = mod17 * mod;\n    long div19 = div18 * div;\n    long mod19 = mod18\
    \ * mod;\n    long div20 = div19 * div;\n    long mod20 = mod19 * mod;\n    long\
    \ div21 = div20 * div;\n    long mod21 = mod20 * mod;\n    long div22 = div21\
    \ * div;\n    long mod22 = mod21 * mod;\n    long div23 = div22 * div;\n    long\
    \ mod23 = mod22 * mod;\n    long div24 = div23 * div;\n    long mod24 = mod23\
    \ * mod;\n    long div25 = div24 * div;\n    long mod25 = mod24 * mod;", "{\n\
    \    long count = 0;\n    long x = n;\n    \n    while (x != 0)\n    {\n     \
    \   long y = x % 11;\n        x /= 11;\n        if (y == 7)\n            count++;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n\
    <| c |>\nI like the idea of using modulus and division instead of looping through\
    \ each digit. Thanks!\n<|/ c |>\n<| c |>\nI like your use of modulus and division\
    \ instead of looping through each digit. Thanks!\n<|/ c |>\n<| c |>\nI like your\
    \ use of modulus and division instead of looping through each digit. Thanks!\n\
    <|/ c |>\n<| c |>\nI like your use of modulus and division instead of looping\
    \ through each digit. Thanks!\n<|/ c |>\n<| c |>\nI like your use of modulus and\
    \ division instead of looping through each digit. Thanks!\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    for(long i = n; i > 0; i /= 11L) \n    {\n        if(i % 13L == 0)\n\
    \            count += 1;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for `fizz_buzz(78L)` which should return `3L`\n\
    <|/ c |>\n<| c |>\n: I see what you mean. I've updated my answer to account for\
    \ that.\n<|/ c |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n\tlong count = 0;\n\tlong remainder;\n\t\n\twhile (n>0)\n\
    \t{\n\t\tremainder = n%11;\n\t\tif (remainder == 7 || remainder == 13)\n\t\t{\n\
    \t\t\tcount++;\n\t\t}\n\t\tn = n/11;\n\t}\n\treturn count;\n}\n/*\nReturn the\
    \ number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13 and are divisible by 3 or 5.\n    >>> fizz_buzz_divisible(50L)\n\
    \    0L\n    >>> fizz_buzz_divisible(78L)\n    2L\n    >>> fizz_buzz_divisible(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz_divisible(long n) \n{\n\tlong count = 0;\n\t\
    long remainder;\n\t\n\twhile (n>0)\n\t{\n\t\tremainder = n%11;\n\t\tif (remainder\
    \ == 7 || remainder == 13 && remainder%3 == 0 || remainder == 13 && remainder%5\
    \ == 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tn = n/11;\n\t}\n\treturn count;\n}\n\
    /*\nReturn the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13 and are divisible by 3 or 5.\n    >>> fizz_buzz_divisible(50L)\n\
    \    0L\n    >>> fizz_buzz_divisible(78L)\n    2L\n    >>> fizz_buzz_divisible(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz_divisible(long n) \n{\n\tlong count = 0;\n\t\
    long remainder;\n\t\n\twhile (n>0)\n\t{\n\t\tremainder = n%11;\n\t\tif (remainder\
    \ == 7 || remainder == 13 && remainder%3 == 0 || remainder == 13 && remainder%5\
    \ == 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tn = n/11;\n\t}\n\treturn count;\n}\n\
    /*\nReturn the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13 and are divisible by 3 or 5.\n    >>> fizz_buzz_divisible(50L)\n\
    \    0L\n    >>> fizz_buzz_divisible(78L)\n    2L\n    >>> fizz_buzz_divisible(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz_divisible(long n) \n{\n\tlong count = 0;\n\t\
    long remainder;\n\t\n\twhile (n>0)", "{\n    long count = 0;\n    long remainder;\n\
    \    \n    for(long i = 1; i <= n; i++){\n        remainder = n % i;\n       \
    \ if(remainder == 0 || remainder == 11 || remainder == 13){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nI like the idea of using modulo arithmetic to solve this problem.\
    \ My only concern is that it's very easy to get an overflow when n is large (like\
    \ 1000000000000L). But I guess that's a problem with any solution that uses modulo\
    \ arithmetic.\n<|/ c |>\n<| c |>\nYes, I agree with you. My solution was just\
    \ to show that it is possible to solve this problem without using modulo arithmetic.\n\
    <|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    long remainder;\n    \n    while(n\
    \ > 0)\n    {\n        remainder = n % 11;\n        if (remainder == 0 || remainder\
    \ == 7)\n        {\n            count++;\n        }\n        n = n / 11;\n   \
    \ }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c\
    \ |>\nI like your solution, however it only works for numbers divisible by 11\
    \ and 13. Try it out with 50 and 78.\n<|/ c |>\n<| c |>\nYes, I realized that\
    \ after I posted it.  I fixed it now.\n<|/ c |>\n<| c |>\nI added a version that\
    \ works for any number divisible by 11 or 13.  It also has a more efficient implementation.\n\
    <|/ c |>\n<| c |>\nI like the second version. Very elegant. Thanks.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n   \
    \ long count = 0;\n    long remainder;\n    long temp;\n    \n    while (n>0)\
    \ {\n        remainder = n%11;\n        if (remainder == 7) {\n            count++;\n\
    \        }\n        n = n/11;\n    }\n    \n    temp = count;\n    \n    while\
    \ (temp > 0) {\n        if (temp % 11 == 7)\n            count++;\n        temp--;\n\
    \    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,fizzbuzz-buzz\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\
    \    long count = 0;\n    long d = n % 10;\n    long m = n / 10;\n    long x =\
    \ m % 11;\n    long y = m / 11;\n    long z = m % 13;\n    long a = m / 13;\n\
    \    long b = m % 13;\n    long c = m / 13;\n    long d = m % 13;\n    long e\
    \ = m / 13;\n    long f = m % 13;\n    long g = m / 13;\n    long h = m % 13;\n\
    \    long i = m / 13;\n    long j = m % 13;\n    long k = m / 13;\n    long l\
    \ = m % 13;\n    long m = m / 13;\n    long n = m % 13;\n    long o = m / 13;\n\
    \    long p = m % 13;\n    long q = m / 13;\n    long r = m % 13;\n    long s\
    \ = m / 13;\n    long t = m % 13;\n    long u = m / 13;\n    long v = m % 13;\n\
    \    long w = m / 13;\n    long x = m % 13;\n    long y = m / 13;\n    long z\
    \ = m % 13;\n    long a = m / 13;\n    long b = m % 13;\n    long c = m / 13;\n\
    \    long d = m % 13;\n    long e = m / 13;\n    long f = m % 13;\n    long g\
    \ = m / 13;\n    long h = m % 13;\n    long i = m / 13;\n    long j = m % 13;\n\
    \    long k = m / 13;\n    long l = m % 13;\n    long m = m / 13;\n    long n\
    \ = m % 13;\n    long o = m / 13;\n    long p = m % 13;\n    long q = m / 13;\n\
    \    long r = m % 13;\n    long s = m / 13;\n    long t = m % 13;\n    long u\
    \ = m / 13;\n    long v = m % 13;\n    long w = m / 13;\n    long x = m % 13;\n\
    \    long y = m / 13;\n    long z = m % 13;\n    long a = m / 13;\n    long b\
    \ = m % 13;\n    long c = m / 13;\n    long d = m % 13;\n    long e = m / 13;\n\
    \    long f = m % 13;\n    long g = m / 13;\n    long h = m % 13;\n    long i\
    \ = m / 13;\n    long j = m % 13;\n    long k = m / 13;\n    long l = m % 13;\n\
    \    long m = m / 13;\n    long n = m % 13;\n    long o = m / 13;\n    long p\
    \ = ", "{\n    long count = 0;\n    long i;\n    for(i = 11; i <= n; i *= 11)\n\
    \    {\n        if((n % i) == 0)\n        {\n            count += 1;\n       \
    \ }\n    }\n    for(i = 13; i <= n; i *= 13)\n    {\n        if((n % i) == 0)\n\
    \        {\n            count += 1;\n        }\n    }\n    return count;\n}\n\
    </code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nI like your solution,\
    \ but I believe that it is more efficient to check only odd numbers, since even\
    \ numbers are divisible by both 11 and 13. Also, you can save a lot of time by\
    \ checking only odd numbers, since even numbers are divisible by both 11 and 13.\
    \ Also, you can save a lot of time by checking only odd numbers, since even numbers\
    \ are divisible by both 11 and 13. Also, you can save a lot of time by checking\
    \ only odd numbers, since even numbers are divisible by both 11 and 13. Also,\
    \ you can save a lot of time by checking only odd numbers, since even numbers\
    \ are divisible by both 11 and 13. Also, you can save a lot of time by checking\
    \ only odd numbers, since even numbers are divisible by both 11 and 13. Also,\
    \ you can save a lot of time by checking only odd numbers, since even numbers\
    \ are divisible by both 11 and 13. Also, you can save a lot of time by checking\
    \ only odd numbers, since even numbers are divisible by both 11 and 13. Also,\
    \ you can save a lot of time by checking only odd numbers, since even numbers\
    \ are divisible by both 11 and 13. Also, you can save a lot of time by checking\
    \ only odd numbers, since even numbers are divisible by both 11 and 13. Also,\
    \ you can save a lot of time by checking only odd numbers, since even numbers\
    \ are divisible by both 11 and 13. Also, you can save a lot of time by checking\
    \ only odd numbers, since even numbers are divisible by both 11 and 13. Also,\
    \ you can save a lot of time by checking only odd numbers, since even numbers\
    \ are divisible by both 11 and 13. Also, you can save a lot of time by checking\
    \ only odd numbers, since even numbers are divisible by both 11 and 13. Also,\
    \ you can save a lot of time by checking only odd numbers, since even numbers\
    \ are divisible by both 11 and 13. Also, you can save a lot of time by checking\
    \ only odd numbers, since even numbers are divisible by both 11 and 13. Also,\
    \ you can save a lot of time by checking only odd numbers, since even numbers\
    \ are divisible by both 11 and ", "{\n\tlong count = 0;\n\tlong remainder;\n\t\
    long i;\n\t\n\tremainder = n % 11;\n\t\n\tif (remainder == 0 || remainder == 7)\n\
    \t{\n\t\tcount++;\n\t}\n\t\n\ti = n;\n\t\n\twhile (i>0)\n\t{\n\t\tremainder =\
    \ i % 11;\n\t\t\n\t\tif (remainder == 0 || remainder == 7)\n\t\t{\n\t\t\tcount++;\n\
    \t\t}\n\t\t\n\t\ti = i / 10;\n\t}\n\t\n\treturn count;\n}", "{\n    long count\
    \ = 0;\n    long div = 11L;\n    long mod = 13L;\n    long div2 = div;\n    long\
    \ mod2 = mod;\n    long div3 = div2;\n    long mod3 = mod2;\n    long div4 = div3;\n\
    \    long mod4 = mod3;\n    long div5 = div4;\n    long mod5 = mod4;\n    long\
    \ div6 = div5;\n    long mod6 = mod5;\n    long div7 = div6;\n    long mod7 =\
    \ mod6;\n    long div8 = div7;\n    long mod8 = mod7;\n    long div9 = div8;\n\
    \    long mod9 = mod8;\n    long div10 = div9;\n    long mod10 = mod9;\n    long\
    \ div11 = div10;\n    long mod11 = mod10;\n    long div12 = div11;\n    long mod12\
    \ = mod11;\n    long div13 = div12;\n    long mod13 = mod12;\n    long div14 =\
    \ div13;\n    long mod14 = mod13;\n    long div15 = div14;\n    long mod15 = mod14;\n\
    \    long div16 = div15;\n    long mod16 = mod15;\n    long div17 = div16;\n \
    \   long mod17 = mod16;\n    long div18 = div17;\n    long mod18 = mod17;\n  \
    \  long div19 = div18;\n    long mod19 = mod18;\n    long div20 = div19;\n   \
    \ long mod20 = mod19;\n    long div21 = div20;\n    long mod21 = mod20;\n    long\
    \ div22 = div21;\n    long mod22 = mod21;\n    long div23 = div22;\n    long mod23\
    \ = mod22;\n    long div24 = div23;\n    long mod24 = mod23;\n    long div25 =\
    \ div24;\n    long mod25 = mod24;\n    long div26 = div25;\n    long mod26 = mod25;\n\
    \    long div27 = div26;\n    long mod27 = mod26;\n    long div28 = div27;\n \
    \   long mod28 = mod27;\n    long div29 = div28;\n    long mod29 = mod28;\n  \
    \  long div30 = div29;\n    long mod30 = mod29;\n    long div31 = div30;\n   \
    \ long mod31 = mod30;\n    long div32 = div3", "{\n\tlong count = 0;\n\tlong div\
    \ = 11L;\n\tlong mod;\n\t\n\twhile (n >= div)\n\t{\n\t\tmod = n % div;\n\t\tif\
    \ (mod == 7L)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tdiv = div * 2L;\n\t}\n\t\n\t\
    return count;\n}", "{\n    long count = 0;\n    long i;\n    for(i = 0; i <= n;\
    \ i += 11)\n    {\n        if((i % 11) == 0)\n        {\n            if((i % 13)\
    \ == 0)\n            {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<|\
    \ c |>\nThis doesn't work. Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<| c |>\n\
    It works. I tested it with `fizz_buzz(78L)` and got `2L` as output. Are you sure\
    \ you tested it correctly?\n<|/ c |>\n<| c |>\nYes, I tested it on `78L` which\
    \ returns `2L`.\n<|/ c |>\n<| c |>\nI tested it on `78L` which returns `2L`. Are\
    \ you sure you tested it correctly?\n<|/ c |>\n<| c |>\nYes, I tested it on `78L`\
    \ which returns `2L`. Are you sure you tested it correctly?\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    for(long i = n; i > 0; i /= 10) {\n        if(i % 11 == 0 || i % 13\
    \ == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nI like this solution, but I wonder\
    \ how it compares to other solutions posted here.\n<|/ c |>\n<| c |>\nI like this\
    \ solution as well, but I wonder how it compares to other solutions posted here.\n\
    <|/ c |>\n<| c |>\nI like this solution as well, but I wonder how it compares\
    \ to other solutions posted here.\n<|/ c |>\n<| c |>\nI like this solution as\
    \ well, but I wonder how it compares to other solutions posted here.\n<|/ c |>\n\
    <| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long div = 11L;\n    long mod;\n    \n \
    \   while (n >= div) {\n        mod = n % div;\n        if (mod != 0 && mod !=\
    \ 7) {\n            count++;\n        }\n        div = div * 3L;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| a |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long\
    \ temp;\n    \n    for(long i = 1; i <= n; i++) {\n        temp = i % 11;\n  \
    \      if(temp == 0 || temp == 7)\n            count++;\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long div = 11L;\n    long mod;\n    \n    while (n > div) {\n      \
    \  mod = n % div;\n        if (mod != 0) {\n            count++;\n        }\n\
    \        div = div * 2L;\n    }\n    \n    return count;\n}", "{\n    long count\
    \ = 0;\n    while (n > 0)\n    {\n        if (n % 11 == 0 || n % 13 == 0)\n  \
    \          count++;\n        n /= 10;\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis code doesn't work. Try it\
    \ with `fizz_buzz(78L)`.\n<|/ c |>\n<| c |>\nI tested it and it works. I even\
    \ tested it with `fizz_buzz(78L)` and it returned `2`.\n<|/ c |>\n<| c |>\nYes,\
    \ it works. But it also returns `2` for `fizz_buzz(78L)`. You have to add `count++;`\
    \ after the `if` statement.\n<|/ c |>\n<| c |>\nOh, I see what you mean. Yes,\
    \ I missed that. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include your suggestion.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n\
    The simplest way is to just use an if statement:\n<code>\nif (n % 3 == 0 && n\
    \ % 5 == 0)\n{\n    cout << \"FizzBuzz\";\n}\nelse if (n % 3 == 0)\n{\n    cout\
    \ << \"Fizz\";\n}\nelse if (n % 5 == 0)\n{\n    cout << \"Buzz\";\n}\nelse\n{\n\
    \    cout << n;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis code doesn't work.\
    \ Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I even tested it with `fizz_buzz(78L)` and it returned `2`.\n<|/ c |>\n<| c\
    \ |>\nI edited my answer to include your suggestion.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include your suggestion.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long remainder;\n    long dividend = n;\n    long divisor = 11;\n  \
    \  long remainder2;\n    \n    while ( dividend >= divisor )\n    {\n        remainder\
    \ = dividend % divisor;\n        dividend = dividend / divisor;\n        \n  \
    \      if ( remainder == 7 )\n        {\n            count++;\n        }\n   \
    \     \n        remainder2 = remainder % divisor;\n        \n        if ( remainder2\
    \ == 7 )\n        {\n            count++;\n        }\n        \n        divisor\
    \ = divisor * 10;\n    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++\
    \ |>\n<| c |>\nThank you so much! I really appreciate your help. I really appreciate\
    \ your time and effort.\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/\
    \ c |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long remainder;\n    \n    while (n>0) {\n\
    \        remainder = n%11;\n        if (remainder == 7) {\n            count++;\n\
    \        }\n        n = n/11;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis code doesn't work for numbers divisible by 11 or 13. For example,\
    \ fizz_buzz(78) returns 2 instead of 3.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I've fixed the code now.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long i;\n  \
    \  for(i = 1; i <= n; i++) {\n        if((i % 11) == 0 || (i % 13) == 0) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport\
    \ java.io.*;\nclass GFG\n{\n    public static void main (String[] args) throws\
    \ java.lang.Exception\n    {\n        Scanner sc = new Scanner(System.in);\n \
    \       int n = sc.nextInt();\n        sc.close();\n        long count = 0;\n\
    \        for(int i = 1; i <= n; i++)\n        {\n            if((i % 11) == 0\
    \ || (i % 13) == 0)\n            {\n                count++;\n            }\n\
    \        }\n        System.out.println(count);\n    }\n}\n</code>\n<|/ a tags=java,fizzbuzz\
    \ |>\n<| a tags=java,fizzbuzz |>\n<code>\nimport java.util.Scanner;", "{\n   \
    \ long count = 0;\n    long i;\n    for(i = 1; i <= n; ++i)\n    {\n        if(i\
    \ % 11 == 0 || i % 13 == 0)\n        {\n            ++count;\n        }\n    }\n\
    \    return count;\n}", "{\n    long count = 0;\n    long d = n % 11;\n    long\
    \ e = (n - d) / 11;\n    long f = (n - e) / 13;\n    long g = (n - f) / 13;\n\
    \    long h = (n - g) / 13;\n    long i = (n - h) / 13;\n    long j = (n - i)\
    \ / 13;\n    long k = (n - j) / 13;\n    long l = (n - k) / 13;\n    long m =\
    \ (n - l) / 13;\n    long n = (n - m) / 13;\n    long o = (n - n) / 13;\n    long\
    \ p = (n - o) / 13;\n    long q = (n - p) / 13;\n    long r = (n - q) / 13;\n\
    \    long s = (n - r) / 13;\n    long t = (n - s) / 13;\n    long u = (n - t)\
    \ / 13;\n    long v = (n - u) / 13;\n    long w = (n - v) / 13;\n    long x =\
    \ (n - w) / 13;\n    long y = (n - x) / 13;\n    long z = (n - y) / 13;\n    long\
    \ a = (n - z) / 13;\n    long b = (n - a) / 13;\n    long c = (n - b) / 13;\n\
    \    long d = (n - c) / 13;\n    long e = (n - d) / 13;\n    long f = (n - e)\
    \ / 13;\n    long g = (n - f) / 13;\n    long h = (n - g) / 13;\n    long i =\
    \ (n - h) / 13;\n    long j = (n - i) / 13;\n    long k = (n - j) / 13;\n    long\
    \ l = (n - k) / 13;\n    long m = (n - l) / 13;\n    long n = (n - m) / 13;\n\
    \    long o = (n - n) / 13;\n    long p = (n - o) / 13;\n    long q = (n - p)\
    \ / 13;\n    long r = (n - q) / 13;\n    long s = (n - r) / 13;\n    long t =\
    \ (n - s) / 13;\n    long u = (n - t) / 13;\n    long v = (n - u) / 13;\n    long\
    \ w = (n - v) / 13;\n    long x = (n - w) / 13;\n    long y = (n - x) / 13;\n\
    \    long z = (n - y) / 13;\n    long a = (n - z) / 13;\n    long b = (n - a)\
    \ / 13;\n    long c = (n - b) / 13;\n    long d = (n - c) / 13;\n    long e =\
    \ (n - d) / 13;\n    long f = (n - e) / 13;\n    long g = (n - f) / 13;\n    long\
    \ h = (n - g) / 13;\n    long ", "{\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i = i * 10 + i % 10)\n    {\n        if((i % 11) == 0 || i % 13 == 0)\n\
    \            count++;\n    }\n    return count;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work. `fizz_buzz(78L)` returns `3L` instead of `2L`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I added the test case to the answer. Maybe\
    \ you forgot to copy the test case from the answer.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the test case to the answer. Maybe you forgot to copy\
    \ the test case from the answer.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added the test case to the answer. Maybe you forgot to copy the test case\
    \ from the answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added the test\
    \ case to the answer. Maybe you forgot to copy the test case from the answer.\n\
    <|/ c |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    for(long i = 1; i < n; i = i * 10 + i %\
    \ 10) {\n        if(i % 11 == 0 || i % 13 == 0) {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work for `fizz_buzz(78L)` which should return `3L`.\n\
    <|/ c |>\n<| c |>\n: It does for me. `fizz_buzz(78L)` returns `3L`.\n<|/ c |>\n\
    <| c |>\n: It does for me too. `fizz_buzz(78L)` returns `3L`.\n<|/ c |>\n<| c\
    \ |>\n: It does for me too. `fizz_buzz(78L)` returns `3L`.\n<|/ c |>\n<| c |>\n\
    : It does for me too. `fizz_buzz(78L)` returns `3L`.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long temp;\n    \n    temp = n % 11;\n    if (temp == 0) \n    {\n \
    \       temp = n % 13;\n        if (temp == 0) \n        {\n            temp =\
    \ n % 17;\n            if (temp == 0) \n            {\n                temp =\
    \ n % 23;\n                if (temp == 0) \n                {\n              \
    \      temp = n % 29;\n                    if (temp == 0) \n                 \
    \   {\n                        temp = n % 37;\n                        if (temp\
    \ == 0) \n                        {\n                            temp = n % 45;\n\
    \                            if (temp == 0) \n                            {\n\
    \                                temp = n % 53;\n                            \
    \    if (temp == 0) \n                                {\n                    \
    \                temp = n % 59;\n                                    if (temp\
    \ == 0) \n                                    {\n                            \
    \            temp = n % 67;\n                                        if (temp\
    \ == 0) \n                                        {\n                        \
    \                    temp = n % 75;\n                                        \
    \    if (temp == 0) \n                                            {\n        \
    \                                        temp = n % 83;\n                    \
    \                            if (temp == 0) \n                               \
    \                 {\n                                                    temp\
    \ = n % 91;\n                                                    if (temp == 0)\
    \ \n                                                    {\n                  \
    \                                      temp = n % 99;\n                      \
    \                                  if (temp == 0) \n                         \
    \                               {\n                                          \
    \                  temp = n % 107;\n                                         \
    \                   if (temp == 0) \n                                        \
    \                    {\n                                                     \
    \           temp = n % 115;\n                                                \
    \                if (temp == 0) \n                                           \
    \                     {\n                                                    \
    \                temp = n % 123;\n                                           \
    \                         if (temp == 0) \n                                  \
    \                                  {\n                                       \
    \                                 temp = n % 131;\n                          \
    \                                              if (temp == 0) \n             \
    \                                                           {\n              \
    \                                                              temp = n % 139;\n\
    \                                                                            if\
    \ (temp == 0) \n                                                             \
    \               {\n                                                          \
    \                      temp = n % 147;\n                                     \
    \                                           if (temp == 0) \n                \
    \                                                                {\n         \
    \                                                                           temp\
    \ = n % 155;\n                                                               \
    \                     if (temp == 0) \n                                      \
    \                                              {\n                           \
    \                                                             temp = n % 163;\n\
    \                                                                            \
    \            if (temp == 0) \n                                               \
    \                                         {\n                                \
    \                                                            temp = n % 171;\n\
    \                                                                            \
    \                if (temp == 0) \n                                           \
    \                                                 {\n                        \
    \                                                                        temp\
    \ = n % 179;\n                                                               \
    \                                 if (temp == 0) \n                          \
    \                                                                      {\n   \
    \                                                                            \
    \                     temp = n % 187;\n                                      \
    \                                                              if (temp == 0)\
    \ \n                                                                         \
    \                           {\n                                              \
    \                                                          temp = n % 195;\n \
    \                                                                            \
    \                           if (temp == 0) \n                                \
    \                                                                        {\n \
    \                                                                            \
    \                               temp = n % 203;\n                            \
    \                                                                            \
    \    if (temp == 0) \n                                                       \
    \                                                     {\n                    \
    \                                                                            \
    \                temp = n % 211;\n                                           \
    \                                                                     if (temp\
    \ == 0) \n                                                                   \
    \                                             {\n                            \
    \                                                                            \
    \            temp = n % 219;\n                                               \
    \                                                                     if (temp\
    \ == 0) \n                                                                   \
    \                                                 {\n                        \
    \                                                                            \
    \                    temp = n % 227;\n                                       \
    \                                                                            \
    \     if (temp == 0) \n                                                      \
    \                                                          {\n               \
    \                                                                            \
    \                         temp = n % 235;\n                                  \
    \                                                                            \
    \      if (temp == 0) \n                                                     \
    \                                                               {\n          \
    \                                                                            \
    \                                  temp = n % 243;\n                         \
    \                                                                            \
    \                   if (", "{\n    long count = 0;\n    long remainder;\n    long\
    \ temp;\n    \n    temp = n;\n    \n    while ( temp > 0 )\n    {\n        remainder\
    \ = temp % 11;\n        if (remainder == 7)\n        {\n            count++;\n\
    \        }\n        temp /= 11;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\npublic class FizzBuzz {\n    public static void\
    \ main(String[] args) {\n        System.out.println(fizzBuzz(50));\n    }", "{\n\
    \tlong count = 0;\n\twhile (n >= 100) {\n\t\tcount += n % 11;\n\t\tn /= 11;\n\t\
    }\n\twhile (n >= 10) {\n\t\tcount += n % 11;\n\t\tn /= 11;\n\t}\n\twhile (n >=\
    \ 1) {\n\t\tcount += n % 11;\n\t\tn /= 11;\n\t}\n\treturn count;\n}", "{\n   \
    \ long count = 0;\n    for(long i = 1L; i <= n; ++i)\n    {\n        if((i % 11L\
    \ == 0L) || (i % 13L == 0L))\n            ++count;\n    }\n    return count;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like this solution, but I wonder why you use\
    \ `long` instead of `int`?\n<|/ c |>\n<| c |>\n: Because `int` has more bits and\
    \ is more likely to fit in a CPU register. `long` has more bits and is more likely\
    \ to fit in a memory location. `long long` has more bits and is more likely to\
    \ fit in a 64-bit memory location. `int` has more bits and is more likely to fit\
    \ in a 32-bit memory location. `long` has more bits and is more likely to fit\
    \ in a 64-bit memory location. `long long` has more bits and is more likely to\
    \ fit in a 128-bit memory location. `int` has more bits and is more likely to\
    \ fit in a 256-bit memory location. `long` has more bits and is more likely to\
    \ fit in a 512-bit memory location. `long long` has more bits and is more likely\
    \ to fit in a 1024-bit memory location. `int` has more bits and is more likely\
    \ to fit in a 2048-bit memory location. `long` has more bits and is more likely\
    \ to fit in a 4096-bit memory location. `long long` has more bits and is more\
    \ likely to fit in a 8192-bit memory location.\n<|/ c |>\n<| c |>\n: I added a\
    \ comment to the code explaining why I use `long` instead of `int`.\n<|/ c |>\n\
    <| c |>\n: I added a comment to the code explaining why I use `long` instead of\
    \ `int`.\n<|/ c |>\n<| c |>\n: I added a comment to the code explaining why I\
    \ use `long` instead of `int`.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n\tlong\
    \ count = 0;\n\tfor (long i = n; i > 0; i /= 10) {\n\t\tif (i % 11 == 0 || i %\
    \ 13 == 0) {\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count;\n}\n/*\nReturn the\
    \ number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13 and are divisible by 3 or 5.\n    >>> fizz_buzz_three(50L)\n   \
    \ 0L\n    >>> fizz_buzz_three(78L)\n    1L\n    >>> fizz_buzz_three(79L)\n   \
    \ 1L\n    \n*/\nlong fizz_buzz_three(long n) \n{\n\tlong count = 0;\n\tfor (long\
    \ i = n; i > 0; i /= 10) {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tif (i\
    \ % 3 == 0 || i % 5 == 0) {\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ count;\n}\n/*\nReturn the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13 and are divisible by 3 or 5 and are divisible\
    \ by 3 or 5.\n    >>> fizz_buzz_five(50L)\n    0L\n    >>> fizz_buzz_five(78L)\n\
    \    1L\n    >>> fizz_buzz_five(79L)\n    1L\n    \n*/\nlong fizz_buzz_five(long\
    \ n) \n{\n\tlong count = 0;\n\tfor (long i = n; i > 0; i /= 10) {\n\t\tif (i %\
    \ 11 == 0 || i % 13 == 0) {\n\t\t\tif (i % 3 == 0 || i % 5 == 0) {\n\t\t\t\tif\
    \ (i % 3 == 0 || i % 5 == 0) {\n\t\t\t\t\tcount += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn count;\n}\n/*\nReturn the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 11 or 13 and are divisible by\
    \ 3 or 5 and are divisible by 3 or 5 and are divisible by 3 or 5.\n    >>> fizz_buzz_seven(50L)\n\
    \    0L\n    >>> fizz_buzz_seven(78L)\n    1L\n    >>> fizz_buzz_seven(79L)\n\
    \    1L\n    \n*/\nlong fizz_buzz_seven(long n) \n{\n\tlong count = 0;\n\tfor\
    \ (long i = n; i > 0; i /= 10) {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\t\
    if (i % 3 == 0 || i % 5 == 0) {\n\t\t\t\tif (i % 3 == 0 || i % 5 == 0) {\n\t\t\
    \t\t\tif (i % 3 == 0 || ", "{\n    long count = 0;\n    long i;\n    for(i = 1;\
    \ i <= n; i++) {\n        if((i % 11) == 0 || (i % 13) == 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it for n = 50.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it for n = 50. You'll see that it returns 0. The problem is that it\
    \ returns 0 when n is divisible by 11 or 13. Try it for n = 78. You'll see that\
    \ it returns 2. That's what OP wanted.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ Yes, it does work. My mistake.\n<|/ c |>\n<| c |>\nI see what you mean. Yes,\
    \ it does work. My mistake.\n<|/ c |>\n<| c |>\nI see what you mean. Yes, it does\
    \ work. My mistake.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long remainder;\n\
    \    long temp;\n    \n    while(n > 0)\n    {\n        remainder = n % 10;\n\
    \        if (remainder == 7)\n        {\n            count++;\n        }\n   \
    \     n = n / 10;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThe `count` variable is unnecessary. Just use `if (n % 10 == 7)\
    \ count++;`\n<|/ c |>\n<| c |>\n: Yes, but it's more readable and less error prone\
    \ to write it that way. Also, it's easier to understand for someone who doesn't\
    \ know what `count++` does.\n<|/ c |>\n<| c |>\nI agree, but I find it more readable\
    \ and less error prone to write it that way. Also, it's easier to understand for\
    \ someone who doesn't know what `count++` does.\n<|/ c |>\n<| c |>\n: I agree,\
    \ but I find it more readable and less error prone to write it that way. Also,\
    \ it's easier to understand for someone who doesn't know what `count++` does.\n\
    <|/ c |>\n<| c |>\n: I agree, but I find it more readable and less error prone\
    \ to write it that way. Also, it's easier to understand for someone who doesn't\
    \ know what `count++` does.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long count = 0;\n    for(long\
    \ i = n; i > 0; i /= 11L) {\n        if(i % 13L == 0)\n            count += 1;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n\
    <| c |>\nThis does not answer the question of how to implement the algorithm,\
    \ it just shows the correct implementation. Also the question was how to implement\
    \ the algorithm, not how to implement the algorithm.\n<|/ c |>\n<| c |>\nThe question\
    \ was how to implement the algorithm, not how to implement the algorithm.\n<|/\
    \ c |>\n<| c |>\nThe question was how to implement the algorithm, not how to implement\
    \ the algorithm.\n<|/ c |>\n<| c |>\nThe question was how to implement the algorithm,\
    \ not how to implement the algorithm.\n<|/ c |>\n<| c |>\nThe question was how\
    \ to implement the algorithm, not how to implement the algorithm.\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long div = 11L;\n    long mod = 13L;\n \
    \   long temp;\n    \n    while (n > 0)\n    {\n        temp = n % div;\n    \
    \    if (temp == mod)\n        {\n            count++;\n        }\n        div\
    \ = div * 10L;\n        mod = mod * 10L;\n        n = n / div;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis doesn't\
    \ work for `fizz_buzz(78)` which should return `3` but returns `2`.\n<|/ c |>\n\
    <| c |>\n: Yes, I missed that case. Thanks for pointing it out. I've updated the\
    \ answer.\n<|/ c |>\n<| c |>\n: I've updated the answer with a new solution that\
    \ works for both `fizz_buzz(78)` and `fizz_buzz(79)`.\n<|/ c |>\n<| c |>\n: I've\
    \ updated the answer with a new solution that works for both `fizz_buzz(78)` and\
    \ `fizz_buzz(79)`.\n<|/ c |>\n<| c |>\n: I've updated the answer with a new solution\
    \ that works for both `fizz_buzz(78)` and `fizz_buzz(79)`.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    for(long i = n; i > 0; i /= 11L) \n    {\n        if((i % 13L) == 7L)\
    \ \n        {\n            count += 1;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nI like your solution,\
    \ although I wouldn't have thought of it myself. I like how you use modulo arithmetic\
    \ to find the remainder of division.\n<|/ c |>\n<| c |>\n: I like your solution\
    \ too, but I wouldn't have thought of it myself. I like how you use modulo arithmetic\
    \ to find the remainder of division.\n<|/ c |>\n<| c |>\n: I like your solution\
    \ too, but I wouldn't have thought of it myself. I like how you use modulo arithmetic\
    \ to find the remainder of division.\n<|/ c |>\n<| c |>\n: I like your solution\
    \ too, but I wouldn't have thought of it myself. I like how you use modulo arithmetic\
    \ to find the remainder of division.\n<|/ c |>\n<| c |>\n: I like your solution\
    \ too, but I wouldn't have thought of it myself. I like how you use modulo arithmetic\
    \ to find the remainder of division.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long x = n;\n\
    \    \n    while (x != 0) {\n        if (x % 11 == 0 || x % 13 == 0) {\n     \
    \       count++;\n        }\n        x /= 10;\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis is not the correct answer.\
    \ `fizz_buzz(78)` returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nI fixed the\
    \ bug. Thanks for pointing it out. :)\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks\
    \ for pointing it out. :)\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing\
    \ it out. :)\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\
    \ :)\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long temp;\n    long i;\n    \n    temp\
    \ = n;\n    \n    while(temp != 0)\n    {\n        i = temp % 11;\n        if(i\
    \ != 7)\n        {\n            count++;\n        }\n        temp = temp / 11;\n\
    \    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nI like your solution. Very elegant. Thanks.\n<|/ c |>\n<| c |>\n\
    I like your solution. Very elegant. Thanks.\n<|/ c |>\n<| c |>\nI like your solution.\
    \ Very elegant. Thanks.\n<|/ c |>\n<| c |>\nI like your solution. Very elegant.\
    \ Thanks.\n<|/ c |>\n<| c |>\nI like your solution. Very elegant. Thanks.\n<|/\
    \ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    for(long i = n; i > 0; i /= 11L)\
    \ {\n        if(i % 13L == 0)\n            count += 1;\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis code doesn't work.\
    \ Try it with `fizz_buzz(78L)` which should return `2`.\n<|/ c |>\n<| c |>\n:\
    \ I see what you mean. Fixed.\n<|/ c |>\n<| c |>\n: I see what you mean. Fixed.\n\
    <|/ c |>\n<| a |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n  \
    \  long count = 0;\n    long x = n;\n    \n    while (x > 0)\n    {\n        long\
    \ y = x % 11;\n        long z = x % 13;\n        \n        if (y == 7 && z ==\
    \ 7)\n        {\n            count++;\n        }\n        \n        x = x / 10;\n\
    \    }\n    \n    return count;\n}", "{\n    long count = 0;\n    long remainder;\n\
    \    long temp;\n    \n    while(n > 0)\n    {\n        remainder = n % 10;\n\
    \        if(remainder == 7)\n        {\n            count++;\n        }\n    \
    \    n /= 10;\n    }\n    \n    temp = count;\n    \n    while(temp > 0)\n   \
    \ {\n        if(temp % 11 == 0)\n        {\n            count++;\n        }\n\
    \        temp /= 11;\n    }\n    \n    while(temp > 0)\n    {\n        if(temp\
    \ % 13 == 0)\n        {\n            count++;\n        }\n        temp /= 13;\n\
    \    }\n    \n    return count;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like\
    \ the idea of using remainders to count the numbers. I didn't think of that. Thanks!\n\
    <|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    long temp;\n    \n    temp = n;\n\
    \    \n    while (temp > 0) {\n        if (temp % 11 == 0 || temp % 13 == 0) {\n\
    \            count++;\n        }\n        temp /= 10;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    long i;\n    for(i = 1; i < n; i++) {\n     \
    \   if((i % 11) == 0 || (i % 13) == 0) {\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<|\
    \ c |>\nThis is not an answer, but a comment.\n<|/ c |>\n<| c |>\n: I agree. However,\
    \ the OP asked for help with his code, and I provided a solution that he could\
    \ use as a starting point for his own code. He didn't ask for help with his code,\
    \ he asked for help with his algorithm and I provided a solution that he could\
    \ use as a starting point for his own code. He didn't ask for help with his code,\
    \ he asked for help with his algorithm and I provided a solution that he could\
    \ use as a starting point for his own code.\n<|/ c |>\n<| c |>\n: I agree. However,\
    \ the OP asked for help with his code, and I provided a solution that he could\
    \ use as a starting point for his own code. He didn't ask for help with his code,\
    \ he asked for help with his algorithm and I provided a solution that he could\
    \ use as a starting point for his own code. He didn't ask for help with his code,\
    \ he asked for help with his algorithm and I provided a solution that he could\
    \ use as a starting point for his own code.\n<|/ c |>\n<| c |>\n: I agree. However,\
    \ the OP asked for help with his code, and I provided a solution that he could\
    \ use as a starting point for his own code. He didn't ask for help with his code,\
    \ he asked for help with his algorithm and I provided a solution that he could\
    \ use as a starting point for his own code. He didn't ask for help with his code,\
    \ he asked for help with his algorithm and I provided a solution that he could\
    \ use as a starting point for his own code.\n<|/ c |>\n<| c |>\n: I agree. However,\
    \ the OP asked for help with his code, and I provided a solution that he could\
    \ use as a starting point for his own code. He didn't ask for help with his code,\
    \ he asked for help with his algorithm and I provided a solution that he could\
    \ use as a starting point for his own code. He didn't ask for help with his code,\
    \ he asked for help with his algorithm and I provided a solution that he could\
    \ use as a starting point for his own ", "{\n    long count = 0;\n    long remainder;\n\
    \    \n    while (n) {\n        remainder = n % 10;\n        if (remainder ==\
    \ 7 || remainder == 11 || remainder == 13) {\n            count++;\n        }\n\
    \        n = n / 10;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++\
    \ |>\n<| c |>\nI like your solution, but I wonder why you chose to not use recursion.\n\
    <|/ c |>\n<| c |>\nI didn't want to use recursion because I didn't want to confuse\
    \ the OP with the concept of recursion. Recursion is very useful in many situations.\
    \ I chose to not use recursion because I didn't want to confuse the OP with the\
    \ concept of recursion.\n<|/ c |>\n<| c |>\nI understand that, but I wonder why\
    \ you chose to not use recursion. Recursion is very useful in many situations.\
    \ I chose to not use recursion because I didn't want to confuse the OP with the\
    \ concept of recursion.\n<|/ c |>\n<| c |>\nI chose to not use recursion because\
    \ I didn't want to confuse the OP with the concept of recursion.\n<|/ c |>\n<|\
    \ c |>\nI chose to not use recursion because I didn't want to confuse the OP with\
    \ the concept of recursion.\n<|/ c |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long remainder;\n\
    \    \n    while (n>0) {\n        remainder = n%11;\n        if (remainder ==\
    \ 7) {\n            count++;\n        }\n        n = n/11;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis doesn't\
    \ work. `fizz_buzz(78L)` returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I fixed the bug and added a link to the original source\
    \ code.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long i;\n    for(i = 1; i <= n; i++) {\n\
    \        if((i % 11) == 0 || (i % 13) == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n\tlong count = 0;\n\t\n\twhile (n > 0)\n\t\
    {\n\t\tlong remainder = n % 10;\n\t\tif (remainder == 7)\n\t\t{\n\t\t\tcount++;\n\
    \t\t}\n\t\tn /= 10;\n\t}\n\t\n\treturn count;\n}", "{\n    long count = 0;\n \
    \   while (n > 0)\n    {\n        if (n % 11 == 0 || n % 13 == 0)\n          \
    \  count++;\n        n /= 10;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,fizzbuzz-buzz\
    \ |>\n<| c |>\nI like this solution, but I wonder why you used `long` instead\
    \ of `int`?\n<|/ c |>\n<| c |>\n: Because `int` has less range than `long`.  `long`\
    \ has at least 64 bits.  `int` has at least 32 bits.  `long long` has at least\
    \ 64 bits.  `unsigned long long` has at least 64 bits.  `unsigned long` has at\
    \ least 32 bits.  `unsigned short` has at least 16 bits.  `unsigned byte` has\
    \ at least 8 bits.  `char` has at least 8 bits.  `short` has at least 16 bits.\
    \  `float` has at least 32 bits.  `double` has at least 64 bits.\n<|/ c |>\n<|\
    \ c |>\n: I used `long` because I thought it would be easier to read and understand\
    \ than `int`.  I didn't want to get into why `int` has less range than `long`.\
    \  `long` has at least 64 bits.  `int` has at least 32 bits.  `long long` has\
    \ at least 64 bits.  `unsigned long long` has at least 64 bits.  `unsigned long`\
    \ has at least 32 bits.  `unsigned short` has at least 16 bits.  `unsigned byte`\
    \ has at least 8 bits.  `char` has at least 8 bits.  `short` has at least 16 bits.\
    \  `float` has at least 32 bits.  `double` has at least 64 bits.\n<|/ c |>\n<|\
    \ c |>\n: I used `long` because I thought it would be easier to read and understand\
    \ than `int`.  I didn't want to get into why `int` has less range than `long`.\
    \  `long` has at least 64 bits.  `int` has at least 32 bits.  `long long` has\
    \ at least 64 bits.  `unsigned long long` has at least 64 bits.  `unsigned long`\
    \ has at least 32 bits.  `unsigned short` has at least 16 bits.  `unsigned byte`\
    \ has at least 8 bits.  `char` has at least 8 bits.  `short` has at least 16 bits.\
    \  `float` has at least 32 bits.  `double` has at least 64 bits.\n<|/ c |>\n<|\
    \ c |>\n: I used `long` because I thought it would be easier to read and understand\
    \ than `int`.  I didn't want to "]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
