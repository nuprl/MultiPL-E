name: HumanEval_69_search
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a non-empty\
  \ array of positive integers. Return the greatest integer that is greater than \n\
  \    zero, and has a frequency greater than or equal to the value of the integer\
  \ itself. \n    The frequency of an integer is the number of times it appears in\
  \ the array.\n    If no such a value exist, return -1.\n    Examples:\n    >>> search([4L,\
  \ 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
  \ 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n    \n*/\nlong search(long[]\
  \ lst) \n"
tests: "unittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
  \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
  \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
  \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
  \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
  \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L])\
  \ == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L])\
  \ == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L,\
  \ 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L,\
  \ 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n\
  \    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L,\
  \ 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L])\
  \ == 1L);\n    assert(candidate([8L, 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L,\
  \ 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L,\
  \ 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n\
  \    assert(candidate([1L, 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n\
  \    assert(candidate([9L, 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L,\
  \ 1L, 5L, 4L, 2L, 8L, 4L, 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n\
  \    assert(candidate([2L, 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L,\
  \ 8L, 8L, 3L, 1L, 4L, 2L, 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L,\
  \ 10L, 2L, 6L, 10L, 2L, 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
  \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
  \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
  \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
  \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
  \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L, 7L,\
  \ 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\nvoid main(){}"
completions: ["{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long\
    \ i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n    \
    \    else\n        {\n            if(lst[i] == maxVal)\n            {\n      \
    \          maxFreq++;\n            }\n        }\n    }\n    return maxVal;\n}\n\
    </code>\n<|/ a tags=algorithm,arrays,c++ |>\n<| c |>\nThis doesn't work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt doesn't work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include\
    \ <iostream>\n#include <vector>\nusing namespace std;", "{\n    long max = 0;\n\
    \    long freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > 0)\n        {\n            freq++;\n            if(max < lst[i])\n       \
    \         max = lst[i];\n        }\n    }\n    if(freq > 0)\n        return max;\n\
    \    return -1;\n}\n</code>\n<|/ a tags=algorithm,arrays,c++ |>\n<| c |>\nThis\
    \ code does not work if there are negative numbers in the array. For example,\
    \ search([-1L, 1L, 2L, 2L, 3L, 1L]) returns -1L. Also search([-1L, 1L, 2L, 2L,\
    \ 3L, 1L, -1L]) returns -1L. Also search([-1L, 1L, 2L, 2L, 3L, 1L, -1L, -1L])\
    \ returns -1L. Also search([-1L, 1L, 2L, 2L, 3L, 1L, -1L, -1L, -1L]) returns -1L.\
    \ Also search([-1L, 1L, 2L, 2L, 3L, 1L, -1L, -1L, -1L, -1L]) returns -1L. Also\
    \ search([-1L, 1L, 2L, 2L, 3L, 1L, -1L, -1L, -1L, -1L, -1L]) returns -1L. Also\
    \ search([-1L, 1L, 2L, 2L, 3L, 1L, -1L, -1L, -1L, -1L, -1L, -1L]) returns -1L.\
    \ Also search([-1L, 1L, 2L, 2L, 3L, 1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) returns\
    \ -1L. Also search([-1L, 1L, 2L, 2L, 3L, 1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L,\
    \ -1L, -1L]) returns -1L. Also search([-1L, 1L, 2L, 2L, 3L, 1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L]) returns -1L. Also search([-1L, 1L, 2L, 2L,\
    \ 3L, 1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) returns\
    \ -1L. Also search([-1L, 1L, 2L, 2L, 3L, 1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L]) returns -1L. Also search([-1L, 1L, 2L, 2L,\
    \ 3L, 1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1", "{\n    long maxVal = lst[0];\n\
    \    long maxCount = 1;\n    for(long i = 1; i < lst.size(); ++i)\n    {\n   \
    \     if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n         \
    \   maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n        {\n \
    \           ++maxCount;\n        }\n        else\n        {\n            if(maxCount\
    \ >= lst[i])\n            {\n                return maxVal;\n            }\n \
    \           else\n            {\n                maxVal = lst[i];\n          \
    \      maxCount = 1;\n            }\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,arrays |>\n<| c |>\nThis solution doesn't work if there\
    \ are multiple equal values.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting. I just added the test case in the comments.\n<|/ c |>\n<| c |>\nI tested\
    \ it again and it doesn't work. Try `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`.\n\
    <|/ c |>\n<| c |>\nI tested it again and it does work. Try `search([1L, 2L, 2L,\
    \ 3L, 3L, 3L, 4L, 4L, 4L])`.\n<|/ c |>\n<| c |>\nI tested it again and it does\
    \ work. Try `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`.\n<|/ c |>\n<| a tags=c++,algorithm,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>", "{\n\
    \    long maxVal = lst[0];\n    long maxCount = 0;\n    for(long i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis does not work. Try search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L,\
    \ 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ int search(int[] arr) {\n    int maxVal = arr[0];\n    int maxCount = 0;\n \
    \   for (int i = 1; i < arr.length; i++) {\n        if (arr[i] > maxVal) {\n \
    \           maxVal = arr[i];\n            maxCount = 1;\n        } else if (arr[i]\
    \ == maxVal) {\n            maxCount++;\n        }\n    }\n    return maxVal;\n\
    }\n</code>\n<|/ a tags=arrays,java |>\n<| c |>\nThis does not work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\n", "{\n    long maxVal\
    \ = lst[0];\n    long maxCount = 0;\n    for(long i : lst)\n    {\n        if(i\
    \ > maxVal)\n        {\n            maxVal = i;\n            maxCount = 1;\n \
    \       }\n        else\n        {\n            maxCount++;\n        }\n    }\n\
    \    return maxVal;\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution doesn't work\
    \ for negative numbers. For example, search([-4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -", "{\n    long max\
    \ = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.length; i++){\n       \
    \ if(lst[i] > 0){\n            freq++;\n            if(max < lst[i]){\n      \
    \          max = lst[i];\n            }\n        }\n    }\n    return freq > max\
    \ ? -1 : max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.*;\nimport java.lang.*;\nimport java.io.*;", "{\n    long max = 0;\n\
    \    long freq = 0;\n    for(long i : lst)\n    {\n        freq = freq + i;\n\
    \        if(freq > max)\n        {\n            max = freq;\n        }\n    }\n\
    \    return max;\n}\n</code>\n<|/ a tags=arrays,algorithm,java |>\n<| c |>\nThis\
    \ solution is O(n^2), and can be improved to O(n) by sorting the array first.\n\
    <|/ c |>\n<| c |>\nYes, sorting is O(nlogn), but this solution is O(n), because\
    \ we only need to iterate through the array once.\n<|/ c |>\n<| c |>\nSorting\
    \ is not O(nlogn), but O(nlogn) is the best you can do. Sorting requires O(nlogn)\
    \ comparisons, which is O(nlogn) overall. Sorting requires O(n) comparisons, which\
    \ is O(n) overall. Sorting requires O(n) comparisons, which is O(n) overall.\n\
    <|/ c |>\n<| c |>\nSorting requires O(n) comparisons, which is O(n) overall. Sorting\
    \ requires O(n) comparisons, which is O(n) overall.\n<|/ c |>\n<| c |>\nSorting\
    \ requires O(n) comparisons, which is O(n) overall. Sorting requires O(n) comparisons,\
    \ which is O(n) overall.\n<|/ c |>\n<| a tags=arrays,algorithm,java |>\n<code>\n\
    public static int search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n \
    \   for (int i = 0; i < arr.length; i++) {\n        freq += arr[i];\n        if\
    \ (freq > max) {\n            max = freq;\n        }\n    }\n    return max;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis solution is O(n^2), and can be improved\
    \ to O(n) by sorting the array first.\n<|/ c |>\n<| c |>\nSorting is not O(nlogn),\
    \ but O(nlogn) is the best you can do. Sorting requires O(nlogn) comparisons,\
    \ which is O(nlogn) overall. Sorting requires O(n) comparisons, which is O(n)\
    \ overall. Sorting requires O(n) comparisons, which is O(n) overall.\n<|/ c |>\n\
    <| a tags=arrays,algorithm,java |>\n<code>\npublic static int search(int[] arr)\
    \ {\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        freq += arr[i];\n        if (freq > ", "{\n    long maxVal =\
    \ lst[0];\n    long maxCount = 0;\n    for(int i = 1; i < lst.size(); i++)\n \
    \   {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else\n        {\n            maxCount++;\n\
    \        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}\n</code>\n<|/ a tags=arrays,algorithm,c++\
    \ |>\n<| c |>\nThis solution doesn't work if you have a list of negative numbers.\
    \ Try search([-10, -10, -10, -10, -10, -10, -10, -10, -10, -10])\n<|/ c |>\n<|\
    \ a tags=arrays,algorithm,c++ |>\n<code>", "{\n    long max = 0;\n    long freq\
    \ = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            freq++;\n            if(lst[i] > max)\n            {\n\
    \                max = lst[i];\n            }\n        }\n    }\n    if(freq >\
    \ max)\n    {\n        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| c |>\nThis doesn't work if there are multiple instances of the same number.\n\
    <|/ c |>\n<| c |>\nIt does work if there are multiple instances of the same number.\
    \ Try it out yourself.\n<|/ c |>\n<| c |>\nYes, it does. Try it out yourself.\
    \ It returns `2` for `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`.\n<|/ c |>\n\
    <| c |>\nYes, it does. Try it out yourself. It returns `2` for `search([1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L])`.\n<|/ c |>\n<| c |>\nIt doesn't work if there\
    \ are multiple instances of the same number. Try it out yourself. It returns `2`\
    \ for `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`.\n<|/ c |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int search(int[] arr) {\n    int max = 0;\n    int\
    \ freq = 0;\n    for (int i = 0; i < arr.Length; i++) {\n        if (arr[i] >\
    \ 0) {\n            freq++;\n            if (arr[i] > max) {\n               \
    \ max = arr[i];\n            }\n        }\n    }\n    if (freq > max) {\n    \
    \    return -1;\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work if there are multiple instances of the same number.\n<|/ c |>\n\
    <| c |>\nIt does work if there are multiple instances of the same number. Try\
    \ it out yourself.\n<|/ c |>\n<| c |>\nIt doesn't work if there are multiple instances\
    \ of the same number. Try it out yourself. It returns `2` for `search([1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L])`.\n<|/ c |>\n<| c |>\nIt doesn't work if there\
    \ are multiple instances of the same number. Try it out yourself. It returns `2`\
    \ for `search([", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n    \
    \    }\n        else\n        {\n            if(lst[i] == maxVal)\n          \
    \  {\n                maxFreq++;\n            }\n        }\n    }\n    if(maxFreq\
    \ == lst[0])\n    {\n        return -1;\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nI tested it and it works. I edited the\
    \ answer to include a test case that fails.\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works. I edited the answer to include a test case that fails.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I edited the answer to include a test case\
    \ that fails.\n<|/ c |>\n<| c |>\nI tested it and it works. I edited the answer\
    \ to include a test case that fails.\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n\
    #include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length;\
    \ i++)\n    {\n        if(lst[i] > 0)\n        {\n            freq++;\n      \
    \      if(max < lst[i])\n            {\n                max = lst[i];\n      \
    \      }\n        }\n    }\n    if(max > 0)\n    {\n        return max;\n    }\n\
    \    return -1;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\n: I tested it and it works.\
    \ I edited the answer to include a test case that fails.\n<|/ c |>\n<| c |>\n\
    : I edited the answer to include a test case that fails.\n<|/ c |>\n<| c |>\n\
    : I edited the answer to include a test case that fails.\n<|/ c |>\n<| c |>\n\
    : I edited the answer to include a test case that fails.\n<|/ c |>\n<| a |>\n\
    <code>\npublic int search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n\
    \    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       freq++;\n            if (max < arr[i]) {\n                max = arr[i];\n\
    \            }\n        }\n    }\n    if (max > 0) {\n        return max;\n  \
    \  }\n    return -1;\n}\n</code>\n<|/ a tags=c#,arrays dscore=0 |>\n<| c |>\n\
    This doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n\
    <| c |>\n: I tested it and it works. I edited the answer to include a test case\
    \ that fails.\n<|/ c |>\n<| c |>\n: I edited the answer to include a test case\
    \ that fails.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int search(int[] arr)\
    \ {\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            freq++;\n            if (max\
    \ < arr[i]) {\n                max = arr[i];\n            }\n        }\n    }\n\
    \    if (max > 0) {\n        return max;\n    }\n    return -1;\n}\n</code>\n\
    <|/ a tags=c#,arrays |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L])", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = i;\n        }\n\
    \    }\n    return maxVal;\n}", "{\n    long max = 0;\n    long freq = 0;\n  \
    \  for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0)\n      \
    \  {\n            freq++;\n            max = lst[i] > max ? lst[i] : max;\n  \
    \      }\n    }\n    return freq > max ? -1 : max;\n}", "{\n    long max = 0;\n\
    \    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i]\
    \ > 0)\n        {\n            freq++;\n            if(lst[i] > max)\n       \
    \     {\n                max = lst[i];\n            }\n        }\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,arrays |>\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;", "{\n\
    \    long maxVal = lst[0];\n    long maxCount = 0;\n    for(int i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a tags=arrays,c++,algorithm |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <vector>\nusing namespace std;", "{\n    long maxVal = lst[0];\n    long\
    \ maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n\
    \        }\n        else\n        {\n            if(lst[i] == maxVal)\n      \
    \      {\n                maxFreq++;\n            }\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThis solution\
    \ doesn't work if you have a list of negative numbers. For example, [-4, -1, -2,\
    \ -3, -4, -5, -6, -7, -8, -9, -10] will return -10 instead of -1\n<|/ c |>\n<|\
    \ c |>\n: It does work if you change the `>` to `>=`.\n<|/ c |>\n<| c |>\n: It\
    \ does work if you change the `>` to `>=`.\n<|/ c |>\n<| c |>\n: It does work\
    \ if you change the `>` to `>=`.\n<|/ c |>\n<| c |>\n: It does work if you change\
    \ the `>` to `>=`.\n<|/ c |>\n<| a tags=algorithm,c++,arrays |>\n<code>\n#include\
    \ <iostream>\n#include <vector>\n#include <algorithm>", "{\n    long maxVal =\
    \ lst[0];\n    long maxCount = 0;\n    for(int i = 1; i < lst.size(); i++)\n \
    \   {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a tags=arrays,algorithm,c++ |>\n<| c |>\nThis solution doesn't work if the\
    \ array is sorted in descending order.\n<|/ c |>\n<| c |>\nThis solution doesn't\
    \ work if the array is sorted in descending order.\n<|/ c |>\n<| c |>\nIt does\
    \ work if the array is sorted in descending order. Try it yourself.\n<|/ c |>\n\
    <| c |>\nIt does work if the array is sorted in descending order. Try it yourself.\
    \ \n`search([4L, 1L, 2L, 2L, 3L, 1L])` returns `2L` instead of `3L`\n<|/ c |>\n\
    <| c |>\nIt does work if the array is sorted in descending order. Try it yourself.\
    \ \n`search([4L, 1L, 2L, 2L, 3L, 1L])` returns `2L` instead of `3L`\n<|/ c |>\n\
    <| a tags=arrays,algorithm,c++ |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long maxVal = lst[0];\n \
    \   long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n    {\n \
    \       if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n       \
    \     maxFreq = lst[i];\n        }\n        else\n        {\n            if(lst[i]\
    \ == maxVal)\n            {\n                maxFreq++;\n            }\n     \
    \   }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work if the array is empty or contains only negative\
    \ numbers.\n<|/ c |>\n<| c |>\nIt doesn't work if the array contains negative\
    \ numbers. Try search([-1L, -1L, -1L, -1L, -1L])\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if the array contains negative numbers. Try search([-1L, -1L, -1L, -1L,\
    \ -1L])\n<|/ c |>\n<| c |>\nIt doesn't work if the array contains negative numbers.\
    \ Try search([-1L, -1L, -1L, -1L, -1L])\n<|/ c |>\n<| c |>\nIt doesn't work if\
    \ the array contains negative numbers. Try search([-1L, -1L, -1L, -1L, -1L])\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long maxVal = lst[0];\n    long maxCount\
    \ = 1;\n    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}", "{\n    long maxVal =\
    \ lst[0];\n    long maxCount = 0;\n    for(long i : lst)\n    {\n        if(i\
    \ > maxVal)\n        {\n            maxVal = i;\n            maxCount = 1;\n \
    \       }\n        else\n        {\n            maxCount++;\n        }\n    }\n\
    \    return maxVal > 0 ? maxVal : -1;\n}\n</code>\n<|/ a tags=arrays,algorithm,java\
    \ |>\n<| a |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;\nimport java.util.Map;\nimport java.util.TreeMap;", "{\n\
    \    long maxVal = lst[0];\n    long maxCount = 0;\n    for(long i : lst)\n  \
    \  {\n        if(i > maxVal)\n        {\n            maxVal = i;\n           \
    \ maxCount = 1;\n        }\n        else\n        {\n            maxCount++;\n\
    \        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays\
    \ |>\n<| c |>\nThis doesn't work if there are multiple equal values.\n<|/ c |>\n\
    <| c |>\nIt does work. `maxCount` is the number of times `maxVal` appears in the\
    \ array. `maxVal` is the greatest value that appears in the array. `maxCount`\
    \ must be greater than or equal to `maxVal`.\n<|/ c |>\n<| c |>\nI missed that\
    \ part in the question. My bad.\n<|/ c |>\n<| c |>\nThis solution doesn't work\
    \ if there are multiple equal values.\n<|/ c |>\n<| c |>\nIt does work. `maxCount`\
    \ is the number of times `maxVal` appears in the array. `maxVal` is the greatest\
    \ value that appears in the array. `maxCount` must be greater than or equal to\
    \ `maxVal`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long maxVal =\
    \ lst[0];\n    long maxCount = 0;\n    for(int i = 1; i < lst.size(); i++)\n \
    \   {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal > 0 ? maxVal\
    \ : -1;\n}\n</code>\n<|/ a tags=algorithm,arrays,c++ |>\n<| c |>\nThis doesn't\
    \ work if the array is all negative numbers. For example, search([-1, -2, -3,\
    \ -4, -5, -6, -7, -8, -9])\n<|/ c |>\n<| c |>\nIt does work. Try it yourself.\
    \ It returns `-1` as expected.\n<|/ c |>\n<| c |>\nIt doesn't work if all negative\
    \ numbers are in the array. Try search([-1, -2, -3, -4, -5, -6, -7, -8, -9])\n\
    <|/ c |>\n<| c |>\nIt does work. Try it yourself. It returns `-1` as expected.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if all negative numbers are in the array. Try\
    \ search([-1, -2, -3, -4, -5, -6, -7, -8, -9])\n<|/ c |>\n<| a tags=algorithm,arrays,c++\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long maxVal\
    \ = lst[0];\n    long maxCount = 0;\n    for(long i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else\n        {\n            maxCount++;\n\
    \        }\n    }\n    if(maxCount >= maxVal)\n    {\n        return maxVal;\n\
    \    }\n    else\n    {\n        return -1;\n    }\n}\n</code>\n<|/ a tags=arrays,c++,algorithm\
    \ |>\n<| c |>\nThis is not the best solution. Try search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nYes, I agree, my solution was just to give\
    \ an idea of how to solve the problem. Thanks for pointing out.\n<|/ c |>\n<|\
    \ c |>\nI guess you meant `return -1;` instead of `return maxVal;`\n<|/ c |>\n\
    <| c |>\nYes, I meant return -1;\n<|/ c |>\n<| c |>\nI guess you meant `return\
    \ -1;` instead of `return maxVal;`\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n\
    \    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i <\
    \ lst.size(); i++){\n        if(lst[i] > maxVal){\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else if(lst[i] == maxVal){\n\
    \            maxFreq += lst[i];\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a tags=arrays,algorithm,c++ |>\n<| c |>\nThis doesn't work if there are multiple\
    \ equal elements in the array. For example, search([1,2,2,3,3,4,4,4,5]) returns\
    \ 5 instead of 4.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| c |>\nThis doesn't work if there are multiple equal elements\
    \ in the array. For example, search([1,2,2,3,3,4,4,4,5]) returns 5 instead of\
    \ 4.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if there are multiple equal elements in the array.\
    \ For example, search([1,2,2,3,3,4,4,4,5]) returns 5 instead of 4.\n<|/ c |>\n\
    <| a tags=arrays,algorithm,c++ |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = i;\n        }\n\
    \    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;",
  "{\n    long maxVal = lst[0];\n    long maxCount = 0;\n    for(long i = 1; i < lst.size();\
    \ ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n        else\n        {\n       \
    \     if(maxCount >= maxVal)\n            {\n                return maxVal;\n\
    \            }\n            else\n            {\n                maxVal = lst[i];\n\
    \                maxCount = 1;\n            }\n        }\n    }\n    return -1;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,arrays |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;",
  "{\n    long maxVal = lst[0];\n    long maxCount = 0;\n    for(int i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else\n        {\n            maxCount++;\n\
    \        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}\n</code>\n<|/ a tags=c++,arrays\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without using any extra variables?\n<|/ c |>\n<| c |>\nI added a solution without\
    \ using extra variables. Hope it helps.\n<|/ c |>\n<| c |>\nThis solution doesn't\
    \ work if there are multiple equal elements in the array. For example, search([1,2,2,3,3,4,4,4,5])\
    \ returns 5 instead of 4.\n<|/ c |>\n<| c |>\nI added a solution that works with\
    \ multiple equal elements. Hope it helps.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.length; i++) \n    {\n        if(lst[i] > maxVal) \n        {\n      \
    \      maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nThis is not the best\
    \ solution. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]) it returns 3L instead\
    \ of 2L\n<|/ c |>\n<| c |>\nI agree with you. My solution was just to give an\
    \ idea of how to solve the problem. Anyway, I edited my answer to include a solution\
    \ that works.\n<|/ c |>\n<| c |>\nI agree with you. My solution was just to give\
    \ an idea of how to solve the problem. Anyway, I edited my answer to include a\
    \ solution that works.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic class Solution\
    \ {\n    public int search(int[] nums) {\n        int maxVal = nums[0];\n    \
    \    int maxFreq = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n\
    \            if (nums[i] > maxVal) {\n                maxVal = nums[i];\n    \
    \            maxFreq = i;\n            }\n        }\n        return maxVal;\n\
    \    }\n}\n</code>\n<|/ a tags=java,arrays |>\n<| a dscore=0 |>\n<code>\npublic\
    \ class Solution {\n    public int search(int[] nums) {\n        int maxVal =\
    \ nums[0];\n        int maxFreq = nums[0];\n        for (int i = 1; i < nums.length;\
    \ i++) {\n            if (nums[i] > maxVal) {\n                maxVal = nums[i];\n\
    \                maxFreq = i;\n            }\n        }\n        return maxVal;\n\
    \    }\n}\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a tags=java,arrays\
    \ |>\n<code>\npublic class Solution {\n    public int search(int[] nums) {\n \
    \       int maxVal = nums[0];\n        int maxFreq = nums[0];\n        for (int\
    \ i = 1; i < nums.length; i++) {\n            if (nums[i] > maxVal) {\n      \
    \          maxVal = nums[i];\n                maxFreq = i;\n            }\n  \
    \      }\n        return maxVal;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n", "{\n    long maxVal = lst[0];\n    long freq = lst[0];\n    for(int\
    \ i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            freq = lst[i];\n        }\n    }\n\
    \    if(freq >= lst[0])\n        return maxVal;\n    else\n        return -1;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,algorithm,c++ |>\n<code>\n#include\
    \ <bits/stdc++.h>\nusing namespace std;", "{\n    long maxVal = lst[0];\n    long\
    \ maxCount = 0;\n    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxCount = 1;\n\
    \        }\n        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n\
    \        }\n    }\n    if(maxCount >= maxVal)\n    {\n        return maxVal;\n\
    \    }\n    else\n    {\n        return -1;\n    }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.HashMap;\n\
    import java.util.Map;", "{\n    long maxVal = lst[0];\n    long maxCount = 0;\n\
    \    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c++,arrays |>\n<| c |>\n\
    I guess you meant `return maxVal;` instead of `return maxCount;`\n<|/ c |>\n<|\
    \ c |>\nYes, I meant `return maxVal;` instead of `return maxCount;`\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include<iostream>\nusing namespace std;", "{\n    long\
    \ maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] == maxVal)\n            {\n                maxFreq++;\n        \
    \    }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays\
    \ |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])\n<|/ c |>\n<| c |>\n: I didn't test it, but I believe it works. I tested\
    \ it on [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L] and it returned 3L. Did you test\
    \ it?\n<|/ c |>\n<| c |>\nYes, I did. Your code returns 3L for search([1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\n: I tested it on [1L, 2L, 2L,\
    \ 3L, 3L, 3L, 4L, 4L, 4L] and it returned 3L. Did you test it?\n<|/ c |>\n<| c\
    \ |>\nYes, I did. Your code returns 3L for search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long maxVal = lst[0];\n\
    \    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n    {\n\
    \        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n      \
    \      maxFreq = i;\n        }\n    }\n    return maxVal;\n}", "{\n    long max\
    \ = 0;\n    long freq = 0;\n    for(long i : lst)\n    {\n        freq++;\n  \
    \      if(freq > max)\n        {\n            max = freq;\n        }\n       \
    \ if(i == 0)\n        {\n            freq--;\n        }\n    }\n    return max;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\n\
    public class Solution {\n    public static void main(String[] args) {\n      \
    \  Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n     \
    \   int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n          \
    \  arr[i] = sc.nextInt();\n        }\n        System.out.println(search(arr));\n\
    \    }\n    public static int search(int[] arr) {\n        int max = 0;\n    \
    \    int freq = 0;\n        for(int i : arr) {\n            freq++;\n        \
    \    if(freq > max) {\n                max = freq;\n            }\n          \
    \  if(i == 0) {\n                freq--;\n            }\n        }\n        return\
    \ max;\n    }\n}\n</code>\n<|/ a tags=java,arrays |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.*;\npublic class Solution {\n    public static void main(String[]\
    \ args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n\
    \        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n     \
    \       arr[i] = sc.nextInt();\n        }\n        System.out.println(search(arr));\n\
    \    }\n    public static int search(int[] arr) {\n        int max = 0;\n    \
    \    int freq = 0;\n        for(int i : arr) {\n            freq++;\n        \
    \    if(freq > max) {\n                max = freq;\n            }\n          \
    \  if(i == 0) {\n                freq--;\n            }\n        }\n        return\
    \ max;\n    }\n}\n</code>\n<|/ a tags=java,arrays |>\n<| a tags=java,arrays |>\n\
    <code>\nimport java.util.*;\npublic class Solution {\n    public static void main(String[]\
    \ args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n\
    \        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n     \
    \       arr[i] = sc.nextInt();\n        }\n        System.out.println(search(arr));\n\
    \    }\n    public static int search(int[] arr) {\n        int max = 0;\n    \
    \    int freq = 0;\n        for(int i : arr) {\n            freq++;\n        \
    \    if(freq > max) {\n                max = freq;\n            }\n          \
    \  if(i == 0) {\n                freq--;\n            }\n        }\n        return\
    \ max;\n    }\n}\n", "{\n    long maxVal = lst[0];\n    long maxCount = 0;\n \
    \   for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else\n        {\n            maxCount++;\n        }\n    }\n    return\
    \ maxVal;\n}", "{\n    long maxVal = lst[0];\n    long maxCount = 1;\n    for(int\
    \ i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxCount = 1;\n        }\n        else\
    \ if(lst[i] == maxVal)\n        {\n            maxCount++;\n        }\n      \
    \  else\n        {\n            if(maxCount >= maxVal)\n            {\n      \
    \          return -1;\n            }\n            else\n            {\n      \
    \          maxVal = lst[i];\n                maxCount = 1;\n            }\n  \
    \      }\n    }\n    return maxVal;\n}\n</code>\n<|/ a |>\n<| a tags=arrays,algorithm,c++\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>", "{\n\
    \    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); i++){\n        if(lst[i] > maxVal){\n            maxVal = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=arrays,algorithm,search,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i\
    \ < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n        else\n\
    \        {\n            if(lst[i] == maxVal)\n            {\n                maxFreq\
    \ += lst[i];\n            }\n        }\n    }\n    return maxVal < 0 ? -1 : maxFreq;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,c++ |>\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long maxVal\
    \ = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return maxVal;\n}", "{\n    long\
    \ max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n\
    \        if(lst[i] > 0)\n        {\n            freq++;\n            if(max <\
    \ lst[i])\n                max = lst[i];\n        }\n    }\n    if(freq > 0)\n\
    \        return max;\n    else\n        return -1;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays\
    \ |>\n<| c |>\nThis doesn't work if the array is all zeroes.\n<|/ c |>\n<| c |>\n\
    It doesn't work when the array is all zeroes. But it does work when the array\
    \ is all ones. I tested it on both cases. I guess it depends on the definition\
    \ of \"work\".\n<|/ c |>\n<| c |>\nIt doesn't work when the array is all zeroes.\
    \ But it does work when the array is all ones. I tested it on both cases. I guess\
    \ it depends on the definition of \"work\".\n<|/ c |>\n<| c |>\nI tested it on\
    \ both cases. I guess it depends on the definition of \"work\".\n<|/ c |>\n<|\
    \ c |>\nI tested it on both cases. I guess it depends on the definition of \"\
    work\".\n<|/ c |>\n<| a tags=c++,algorithm,arrays |>\n<code>", "{\n    long max\
    \ = 0;\n    long freq = 0;\n    long index = 0;\n    \n    for(int i = 0; i <\
    \ lst.size(); i++)\n    {\n        if(lst[i] > 0)\n        {\n            freq++;\n\
    \            max = Math.max(max, lst[i]);\n        }\n        else\n        {\n\
    \            index = i;\n        }\n    }\n    \n    return index == lst.size()\
    \ ? -1 : max;\n}\n</code>\n<|/ a tags=arrays,algorithm,c# |>\n<| c |>\nThis doesn't\
    \ work if the array is empty or contains only negative numbers. In that case `max`\
    \ will be set to `0`.\n<|/ c |>\n<| c |>\nYes, I forgot about that case. Thanks\
    \ for pointing that out. I've updated the answer.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if the array contains negative numbers. In that case `max` will be set\
    \ to `0`.\n<|/ c |>\n<| c |>\nYes, I forgot about that case. Thanks for pointing\
    \ that out. I've updated the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ int search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n    int index\
    \ = 0;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] > 0) {\n\
    \            freq++;\n            max = Math.max(max, arr[i]);\n        } else\
    \ {\n            index = i;\n        }\n    }\n    return index == arr.length\
    \ ? -1 : max;\n}\n</code>\n<|/ a tags=arrays,algorithm,c# |>\n<| a tags=arrays,algorithm,c#\
    \ |>\n<code>\npublic int search(int[] arr) {\n    int max = 0;\n    int freq =\
    \ 0;\n    int index = 0;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i]\
    \ > 0) {\n            freq++;\n            max = Math.max(max, arr[i]);\n    \
    \    } else {\n            index = i;\n        }\n    }\n    return index == arr.length\
    \ ? -1 : max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic\
    \ int search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n    int index\
    \ = 0;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] > 0) {\n\
    \            freq++;\n            max = Math.max(max, arr[i]);\n        } else\
    \ {\n            index = i;\n        }\n    }\n    return index == arr.length\
    \ ? -1 : max;\n}\n</code>\n<|/ a tags=arrays,algorithm,c# |>\n<| a tags=arrays,algorithm,c#\
    \ |>\n<code>\npublic int search(int[] arr) {\n    int max = 0;\n", "{\n    long\
    \ maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size();\
    \ ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return maxFreq;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <bits/stdc++.h>\n\
    using namespace std;", "{\n    long max = 0;\n    long freq = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] > 0){\n            freq++;\n\
    \            if(max < lst[i]){\n                max = lst[i];\n            }\n\
    \        }\n    }\n    if(max > 0){\n        return max;\n    }\n    return -1;\n\
    }\n</code>\n<|/ a tags=arrays,algorithm,java |>\n<| c |>\nThis code doesn't work\
    \ if the array is empty or contains only negative numbers. Try it with `search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`.\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine. Can you give me an example where it doesn't work?\n<|/ c |>\n<| c |>\n\
    It doesn't work for `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works fine. Can you give me an example where it doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you give me an\
    \ example where it doesn't work?\n<|/ c |>\n<| a tags=arrays,algorithm,java |>\n\
    <code>\npublic static int search(int[] arr) {\n    int max = 0;\n    int freq\
    \ = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            freq++;\n            if (max < arr[i]) {\n                max = arr[i];\n\
    \            }\n        }\n    }\n    if (max > 0) {\n        return max;\n  \
    \  }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    public static int search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n \
    \   for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n      \
    \      freq++;\n            if (max < arr[i]) {\n                max = arr[i];\n\
    \            }\n        }\n    }\n    if (max > 0) {\n        return max;\n  \
    \  }\n    return -1;\n}\n</code>\n<|/ a tags=arrays,algorithm,java |>\n<| a tags=arrays,algorithm,java\
    \ |>\n<code>\npublic static int search(int[] arr) {\n    int max = 0;\n    int\
    \ freq = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >\
    \ 0) {\n            freq++;\n            if (max < arr[i]) {\n               \
    \ max = arr[i];\n            }\n        }\n    }\n    if (max > 0) {\n       \
    \ return max;\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    While ", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long\
    \ i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n  \
    \  return maxFreq;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution, however\
    \ it fails for `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])` which should return\
    \ `3L` but returns `2L`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed\
    \ the bug. Now it works.\n<|/ c |>\n<| a tags=arrays,algorithm,c++ |>\nI believe\
    \ that this is what you are looking for:\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>", "{\n    long maxVal = lst[0];\n    long maxFreq\
    \ = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq = i;\n\
    \        }\n    }\n    return maxVal;\n}", "{\n    long max = 0;\n    long freq\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            freq++;\n            if(lst[i] > max)\n            {\n\
    \                max = lst[i];\n            }\n        }\n    }\n    if(freq >\
    \ max)\n    {\n        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a tags=arrays,c++\
    \ |>\n<| c |>\nI like your solution, but I think it can be simplified a bit. `freq`\
    \ can be calculated as `std::count(lst, std::next(lst, lst.size()), 0L)`. Also,\
    \ `max` can be calculated as `std::accumulate(lst, std::next(lst, lst.size()),\
    \ 0L)`.\n<|/ c |>\n<| c |>\nI agree, that's much simpler.\n<|/ c |>\n<| c |>\n\
    I agree with you, that's much simpler.\n<|/ c |>\n<| a tags=arrays,c++ |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\nusing namespace std;", "{\n    long\
    \ maxVal = lst[0];\n    long maxCount = 0;\n    long curVal = lst[0];\n    long\
    \ curCount = 0;\n    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > curVal)\n        {\n            curVal = lst[i];\n            curCount = 1;\n\
    \        }\n        else\n        {\n            curCount++;\n        }\n    \
    \    if(curCount > maxCount)\n        {\n            maxCount = curCount;\n  \
    \          maxVal = curVal;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a tags=algorithm,c++ |>\n<| c |>\nThis doesn't work if there are multiple\
    \ occurrences of the same value.\n<|/ c |>\n<| c |>\nIt works if you use std::map<int,\
    \ int> instead of std::unordered_map<int, int>\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if there are multiple occurrences of the same value.\n<|/ c |>\n<| c |>\n\
    It works if you use std::map<int, int> instead of std::unordered_map<int, int>\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are multiple occurrences of the\
    \ same value.\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>\n#include <unordered_map>\nusing namespace\
    \ std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int\
    \ i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n    \
    \    else\n        {\n            if(lst[i] == maxVal)\n            {\n      \
    \          maxFreq++;\n            }\n        }\n    }\n    return maxVal;\n}\n\
    </code>\n<|/ a tags=arrays,algorithm,java |>\n<| a tags=arrays,algorithm,java\
    \ |>\n<code>\npublic class Solution {\n    public int search(int[] nums) {\n \
    \       int maxVal = nums[0];\n        int maxFreq = nums[0];\n        for (int\
    \ i = 1; i < nums.length; i++) {\n            if (nums[i] > maxVal) {\n      \
    \          maxVal = nums[i];\n                maxFreq = nums[i];\n           \
    \ } else {\n                if (nums[i] == maxVal) {\n                    maxFreq++;\n\
    \                }\n            }\n        }\n        return maxVal;\n    }\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,algorithm,java |>\n<code>\npublic\
    \ class Solution {\n    public int search(int[] nums) {\n        int maxVal =\
    \ nums[0];\n        int maxFreq = nums[0];\n        for (int i = 1; i < nums.length;\
    \ i++) {\n            if (nums[i] > maxVal) {\n                maxVal = nums[i];\n\
    \                maxFreq = nums[i];\n            } else {\n                if\
    \ (nums[i] == maxVal) {\n                    maxFreq++;\n                }\n \
    \           }\n        }\n        return maxVal;\n    }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long maxVal = lst[0];\n    long freq = lst[0];\n    for(int i = 1; i < lst.size();\
    \ ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            freq = lst[i];\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a tags=arrays,c++,algorithm |>\n<| c |>\nThis doesn't work if the array is\
    \ empty. `maxVal` will be set to `lst[0]` and freq to `lst[0]` but `lst[0]` will\
    \ never be greater than `maxVal`.\n<|/ c |>\n<| c |>\nYes, you are right. My mistake.\
    \ Thanks for pointing out. Fixed it.\n<|/ c |>\n<| a tags=arrays,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace std;", "{\n\
    \    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(max\
    \ < lst[i])\n            {\n                max = lst[i];\n            }\n   \
    \     }\n    }\n    if(freq > 0)\n    {\n        return max;\n    }\n    else\n\
    \    {\n        return -1;\n    }\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| c |>\n\
    This doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n\
    <| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n\
    <|/ c |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])\n<|/ c |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nThis doesn't work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a tags=c#,arrays |>\n<code>\n\
    public int Search(int[] arr)\n{\n    int max = 0;\n    int freq = 0;\n    for\
    \ (int i = 0; i < arr.Length; i++)\n    {\n        if (arr[i] > 0)\n        {\n\
    \            freq++;\n            if (max < arr[i])\n            {\n         \
    \       max = arr[i];\n            }\n        }\n    }\n    if (freq > 0)\n  \
    \  {\n        return max;\n    }\n    else\n    {\n        return -1;\n    }\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work. Try search([1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nThis doesn't work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nThis doesn't work. Try\
    \ search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic int Search(int[] arr)\n{\n    int max = 0;", "{\n    long\
    \ maxVal = lst[0];\n    long maxCount = 0;\n    for(int i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal > 0 ? maxVal\
    \ : -1;\n}\n</code>\n<|/ a tags=algorithm,arrays,c++ |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long max = 0;\n    long freq\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            freq++;\n            if(lst[i] > max)\n            {\n\
    \                max = lst[i];\n            }\n        }\n    }\n    return (freq\
    \ > max) ? -1 : max;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    import java.util.*;\npublic class Search\n{\n    public static void main(String[]\
    \ args)\n    {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"\
    Enter the size of the array\");\n        int n = sc.nextInt();\n        int[]\
    \ arr = new int[n];\n        System.out.println(\"Enter the elements of the array\"\
    );\n        for(int i=0;i<n;i++)\n        {\n            arr[i] = sc.nextInt();\n\
    \        }\n        System.out.println(\"Enter the element to be searched\");\n\
    \        int x = sc.nextInt();\n        int index = search(arr,n);\n        if(index\
    \ != -1)\n        {\n            System.out.println(\"The element \"+x+\" is found\
    \ at index \"+index);\n        }\n        else\n        {\n            System.out.println(\"\
    The element \"+x+\" is not found\");\n        }\n    }\n    public static int\
    \ search(int[] arr,int n)\n    {\n        int index=-1;\n        for(int i=0;i<n;i++)\n\
    \        {\n            if(arr[i]==x)\n            {\n                index=i;\n\
    \                break;\n            }\n        }\n        return index;\n   \
    \ }\n}\n</code>\n<|/ a tags=arrays,java |>\n<| a tags=arrays,java |>\n<code>\n\
    import java.util.*;\npublic class Search\n{\n    public static void main(String[]\
    \ args)\n    {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"\
    Enter the size of the array\");\n        int n = sc.nextInt();\n        int[]\
    \ arr = new int[n];\n        System.out.println(\"Enter the elements of the array\"\
    );\n        for(int i=0;i<n;i++)\n        {\n            arr[i] = sc.nextInt();\n\
    \        }\n        System.out.println(\"Enter the element to be searched\");\n\
    \        int x = sc.nextInt();\n        int index = search(arr,n);\n        if(index\
    \ != -1)\n        {\n            System.out.println(\"The element \"+x+\" is found\
    \ at index \"+index);\n        }\n        else\n        {\n            System.out.println(\"\
    The element \"+x+\" is not found\");\n        }\n    }\n    public static int\
    \ search(int[] arr,int n)\n    {\n        int index=-1;\n        for(int i=0;i<n;i++)\n\
    \        {\n            if(arr[i]==x)\n            {\n                index=i;\n\
    \                break;\n            }\n        }\n        return index;\n   \
    \ }\n}\n</code>\n<|/ a dscore=", "{\n    long maxVal = lst[0];\n    long maxCount\
    \ = 0;\n    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,algorithm,c++\
    \ |>\n<code>", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n   \
    \ for(long i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n \
    \       {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n     \
    \   }\n        else\n        {\n            if(lst[i] == maxVal)\n           \
    \ {\n                ++maxFreq;\n            }\n        }\n    }\n    return maxVal;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,arrays |>\n<| c |>\nThis is not an answer\
    \ to the question. OP wants to find the greatest integer that appears at least\
    \ once in the array. Your solution finds the greatest integer that appears at\
    \ least once in the array.\n<|/ c |>\n<| c |>\nI believe this answer is correct.\
    \ OP wants to find the greatest integer that appears at least once in the array.\
    \ Your solution finds the greatest integer that appears at least once in the array.\n\
    <|/ c |>\n<| c |>\nThe question states \"The frequency of an integer is the number\
    \ of times it appears in the array\". Your solution finds the greatest integer\
    \ that appears at least once in the array.\n<|/ c |>\n<| c |>\nI believe this\
    \ answer is correct. OP wants to find the greatest integer that appears at least\
    \ once in the array. Your solution finds the greatest integer that appears at\
    \ least once in the array.\n<|/ c |>\n<| c |>\nThe question states \"The frequency\
    \ of an integer is the number of times it appears in the array\". Your solution\
    \ finds the greatest integer that appears at least once in the array.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\
    using namespace std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n    \
    \    }\n        else\n        {\n            if(lst[i] == maxVal)\n          \
    \  {\n                maxFreq++;\n            }\n        }\n    }\n    return\
    \ maxVal > 0 ? maxVal : -1;\n}\n</code>\n<|/ a tags=arrays,algorithm,c++ |>\n\
    <| c |>\nThis is not the correct solution. Try search([1L, 2L, 2L, 3L, 3L, 3L,\
    \ 4L, 4L, 4L])\n<|/ c |>\n<| c |>\n, thanks for pointing that out. I've updated\
    \ the code to fix the bug.\n<|/ c |>\n<| c |>\nThis is not the correct solution.\
    \ Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\n, thanks\
    \ for pointing that out. I've updated the code to fix the bug.\n<|/ c |>\n<| c\
    \ |>\nThis is not the correct solution. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long maxVal = lst[0];\n\
    \    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n    {\n\
    \        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n      \
    \      maxFreq = lst[i];\n        }\n        else\n        {\n            if(lst[i]\
    \ == maxVal)\n            {\n                maxFreq++;\n            }\n     \
    \   }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=arrays,algorithm,c++\
    \ |>\n<| c |>\nThe question says \"The frequency of an integer is the number of\
    \ times it appears in the array.\" Your code counts the number of times it appears\
    \ in the array.\n<|/ c |>\n<| c |>\nThe question says \"The frequency of an integer\
    \ is the number of times it appears in the array.\" Your code counts the number\
    \ of times it appears in the array.\n<|/ c |>\n<| c |>\nThe question says \"The\
    \ frequency of an integer is the number of times it appears in the array.\" Your\
    \ code counts the number of times it appears in the array.\n<|/ c |>\n<| c |>\n\
    The question says \"The frequency of an integer is the number of times it appears\
    \ in the array.\" Your code counts the number of times it appears in the array.\n\
    <|/ c |>\n<| c |>\nThe question says \"The frequency of an integer is the number\
    \ of times it appears in the array.\" Your code counts the number of times it\
    \ appears in the array.\n<|/ c |>\n<| a tags=arrays,algorithm,c++ |>\n<code>\n\
    #include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length;\
    \ i++)\n    {\n        if(lst[i] > 0)\n        {\n            freq++;\n      \
    \      if(max < lst[i])\n                max = lst[i];\n        }\n    }\n   \
    \ if(freq > 0)\n        return max;\n    else\n        return -1;\n}\n</code>\n\
    <|/ a tags=c#,arrays |>\n<| c |>\nThis doesn't work if you have a negative number\
    \ in the array. Try search([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n<|/ c |>\n\
    <| c |>\n: It doesn't work if you have a negative number in the array. Try search([-5,\
    \ -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n<|/ c |>\n<| c |>\n: It doesn't work if\
    \ you have a negative number in the array. Try search([-5, -4, -3, -2, -1, 0,\
    \ 1, 2, 3, 4, 5])\n<|/ c |>\n<| c |>\n: It doesn't work if you have a negative\
    \ number in the array. Try search([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n<|/\
    \ c |>\n<| c |>\n: It doesn't work if you have a negative number in the array.\
    \ Try search([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n<|/ c |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic int Search(int[] arr, int val)\n{\n    int max = 0;\n   \
    \ int freq = 0;\n    for(int i = 0; i < arr.Length; i++)\n    {\n        if(arr[i]\
    \ > 0)\n        {\n            freq++;\n            if(max < arr[i])\n       \
    \         max = arr[i];\n        }\n    }\n    if(freq > 0)\n        return max;\n\
    \    else\n        return -1;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\npublic int Search(int[] arr, int val)\n{\n    int max = 0;\n    int freq\
    \ = 0;\n    for(int i = 0; i < arr.Length; i++)\n    {\n        if(arr[i] > 0)\n\
    \        {\n            freq++;\n            if(max < arr[i])\n              \
    \  max = arr[i];\n        }\n    }\n    if(freq > 0)\n        return max;\n  \
    \  else\n        return -1;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a dscore=1\
    \ |>\n<code>\npublic int Search(int[] arr, int val)\n{\n    int max = 0;\n   \
    \ int freq = 0;\n    for(int i = 0; i < arr.Length; i++)\n    {\n        if(arr[i]\
    \ > 0)\n        {\n            freq++;\n            if(max < arr[i])\n       \
    \         max = arr[i];\n        }\n    }\n    if(f", "{\n    long maxVal = lst[0];\n\
    \    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n    {\n\
    \        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n      \
    \      maxFreq = i;\n        }\n    }\n    return maxVal;\n}", "{\n    long maxVal\
    \ = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] == maxVal)\n            {\n                maxFreq++;\n        \
    \    }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]).\
    \ Your code returns 3L instead of 2L.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks\
    \ for pointing it out. Now it works.\n<|/ c |>\n<| a tags=arrays,algorithm,c++\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n    \
    \    }\n        else\n        {\n            if(lst[i] == maxVal)\n          \
    \  {\n                maxFreq++;\n            }\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ int search(int[] arr) {\n    int maxVal = arr[0];\n    int maxFreq = arr[0];\n\
    \    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] > maxVal) {\n\
    \            maxVal = arr[i];\n            maxFreq = arr[i];\n        } else if\
    \ (arr[i] == maxVal) {\n            maxFreq++;\n        }\n    }\n    return maxVal;\n\
    }\n</code>\n<|/ a tags=arrays,java |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ int search(int[] arr) {\n    int maxVal = arr[0];\n    int maxFreq = arr[0];\n\
    \    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] > maxVal) {\n\
    \            maxVal = arr[i];\n            maxFreq = arr[i];\n        } else if\
    \ (arr[i] == maxVal) {\n            maxFreq++;\n        }\n    }\n    return maxVal;\n\
    }\n</code>\n<|/ a tags=arrays,java |>\n<| c |>\nPlease don't post only code as\
    \ an answer, but also provide an explanation of what your code does and how it\
    \ solves the problem of the question. Answers with an explanation are usually\
    \ more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| c |>\nWhile this code may provide a solution to the question, it's\
    \ better to add context as to why/how it works. This can help future users learn,\
    \ and apply that knowledge to their own code. You are also likely to have positive\
    \ feedback from users in the form of upvotes, when the code is explained.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\npublic class SearchingArray {\n    public static\
    \ void main(String[] args) {\n        int[] arr = new int[]{1,2,3,4,5,6,7,8,9,10};\n\
    \        System.out.println(search(arr));\n    }", "{\n    long maxVal = lst[0];\n\
    \    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n    {\n\
    \        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n      \
    \      maxFreq = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm\
    \ |>\n<| c |>\nThis solution does not work if there are multiple equal elements\
    \ in the array.\n<|/ c |>\n<| c |>\n: I didn't see that requirement in the question.\
    \ Fixed now.\n<|/ c |>\n<| c |>\nThis solution does not work if there are multiple\
    \ equal elements in the array. For example, search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L]) returns 4L instead of 3L.\n<|/ c |>\n<| c |>\n: Yes, I missed that\
    \ requirement. Fixed now.\n<|/ c |>\n<| c |>\nThis solution does not work if there\
    \ are multiple equal elements in the array. For example, search([1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L]) returns 4L instead of 3L.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long\
    \ i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n    \
    \    else\n        {\n            if(lst[i] == maxVal)\n            {\n      \
    \          maxFreq++;\n            }\n        }\n    }\n    return maxVal;\n}\n\
    </code>\n<|/ a tags=c++,algorithm,arrays |>\n<| c |>\nI like your solution, it's\
    \ very elegant. I'm going to try it out and see how it performs. Thanks!\n<|/\
    \ c |>\n<| c |>\nI ran the program and it took about a minute to run. I'm going\
    \ to try and optimize it a bit more. Thanks again!\n<|/ c |>\n<| c |>\nI ran the\
    \ program and it took about a minute to run. I'm going to try and optimize it\
    \ a bit more. Thanks again!\n<|/ c |>\n<| c |>\nI ran the program and it took\
    \ about a minute to run. I'm going to try and optimize it a bit more. Thanks again!\n\
    <|/ c |>\n<| c |>\nI ran the program and it took about a minute to run. I'm going\
    \ to try and optimize it a bit more. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length;\
    \ i++)\n    {\n        if(lst[i] > 0)\n        {\n            freq++;\n      \
    \      if(max < lst[i])\n            {\n                max = lst[i];\n      \
    \      }\n        }\n    }\n    return (freq > max) ? -1 : max;\n}\n</code>\n\
    <|/ a tags=c#,arrays |>\n<| a tags=c#,arrays |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;",
  "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThis solution\
    \ doesn't work for negative numbers. I believe it fails for `search([-1L, -1L,\
    \ -1L, -1L, -1L])`.\n<|/ c |>\n<| c |>\nI believe it fails for `search([-1L, -1L,\
    \ -1L, -1L, -1L])` because `maxVal` will be `-1L` and the `maxFreq` will be `-1L`\
    \ too. `-1L` will never be greater than `-1L` so `maxFreq` will never be greater\
    \ than `maxVal` so `maxFreq` will never be greater than `-1L` so `maxFreq` will\
    \ never be greater than `-1L` so `maxFreq` will never be greater than `-1L` so\
    \ `maxFreq` will never be greater than `-1L` so `maxFreq` will never be greater\
    \ than `-1L` so `maxFreq` will never be greater than `-1L` so `maxFreq` will never\
    \ be greater than `-1L` so `maxFreq` will never be greater than `-1L` so `maxFreq`\
    \ will never be greater than `-1L` so `maxFreq` will never be greater than `-1L`\
    \ so `maxFreq` will never be greater than `-1L` so `maxFreq` will never be greater\
    \ than `-1L` so `maxFreq` will never be greater than `-1L` so `maxFreq` will never\
    \ be greater than `-1L` so `maxFreq` will never be greater than `-1L` so `maxFreq`\
    \ will never be greater than `-1L` so `maxFreq` will never be greater than `-1L`\
    \ so `maxFreq` will never be greater than `-1L` so `maxFreq` will never be greater\
    \ than `-1L` so `maxFreq` will never be greater than `-1L` so `maxFreq` will never\
    \ be greater than `-1L` so `maxFreq` will never be greater than `-1L` so `maxFreq`\
    \ will never be greater than `-1L` so ", "{\n    long max = 0;\n    long freq\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            freq++;\n            if(max < lst[i])\n            {\n\
    \                max = lst[i];\n            }\n        }\n    }\n    return (freq\
    \ > max) ? -1 : max;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm |>\n<| c |>\n\
    I like your solution, but I believe that `freq` should be initialized to `0` before\
    \ the `for` loop. Otherwise `freq` will always be `1` at the first iteration of\
    \ the loop.\n<|/ c |>\n<| c |>\nYes, you are right. I missed that part. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nI believe that `freq` should be initialized\
    \ to `0` before the `for` loop. Otherwise `freq` will always be `1` at the first\
    \ iteration of the loop.\n<|/ c |>\n<| c |>\nYes, you are right. I missed that\
    \ part. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI believe that `freq`\
    \ should be initialized to `0` before the `for` loop. Otherwise `freq` will always\
    \ be `1` at the first iteration of the loop.\n<|/ c |>\n<| a tags=arrays,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long max = 0;\n\
    \    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i]\
    \ > 0)\n        {\n            freq++;\n            if(max < lst[i])\n       \
    \     {\n                max = lst[i];\n            }\n        }\n    }\n    return\
    \ (freq > max) ? -1 : max;\n}\n</code>\n<|/ a tags=c#,arrays,algorithm |>\n<|\
    \ c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n\
    <|/ c |>\n<| c |>\nIt does work. `freq` will always be greater than `max` because\
    \ `freq` will always be greater than `0` because `lst[i]` will always be greater\
    \ than `0` because `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0` because\
    \ `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0`\
    \ because `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0` because `lst[i]\
    \ > 0` because `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0` because\
    \ `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0`\
    \ because `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0` because `lst[i]\
    \ > 0` because `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0` because\
    \ `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0`\
    \ because `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0` because `lst[i]\
    \ > 0` because `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0` because\
    \ `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0`\
    \ because `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0` because `lst[i]\
    \ > 0` because `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0` because\
    \ `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0`\
    \ because `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0` because `lst[i]\
    \ > 0` because `lst[i] > 0` because `lst[i] > 0` because `lst[i] > 0` because\
    \ `lst[i] > 0` because `lst", "{\n    long maxVal = lst[0];\n    long maxCount\
    \ = 1;\n    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n        else\n        {\n            if(maxCount >= maxVal)\n         \
    \   {\n                return -1;\n            }\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long maxVal =\
    \ lst[0];\n    long maxCount = 0;\n    for(long i = 1; i < lst.Length; i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else\n        {\n            maxCount++;\n\
    \        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<|\
    \ c |>\nThis doesn't work if you have duplicate values in the array. For example,\
    \ search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]) returns 3L instead of 2L.\n<|/\
    \ c |>\n<| c |>\nIt does work, just tested it. The problem is that it returns\
    \ -1 if there are no duplicates in the array.\n<|/ c |>\n<| c |>\nI see what you're\
    \ saying. I misread the question. I'll edit my answer.\n<|/ c |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic int Search(int[] array)\n{\n    int maxVal = array[0];\n\
    \    int maxCount = 0;\n    for(int i = 1; i < array.Length; i++)\n    {\n   \
    \     if(array[i] > maxVal)\n        {\n            maxVal = array[i];\n     \
    \       maxCount = 1;\n        }\n        else\n        {\n            maxCount++;\n\
    \        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\npublic int Search(int[] array)\n{\n    int maxVal = array[0];\n\
    \    int maxCount = 0;\n    for(int i = 1; i < array.Length; i++)\n    {\n   \
    \     if(array[i] > maxVal)\n        {\n            maxVal = array[i];\n     \
    \       maxCount = 1;\n        }\n        else\n        {\n            maxCount++;\n\
    \        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<|\
    \ a dscore=0 |>\n<code>\npublic int Search(int[] array)\n{\n    int maxVal = array[0];\n\
    \    int maxCount = 0;\n    for(int i = 1; i < array.Length; i++)\n    {\n   \
    \     if(array[i] > maxVal)\n        {\n            maxVal = array[i];\n     \
    \       maxCount = 1;\n        }\n        else\n        {\n            maxCount++;\n\
    \        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<|\
    \ a tags=c#,arrays |>\n<code>\npublic int Search(int[] array)\n{\n    int maxVal\
    \ = array[0];\n    int maxCount = 0;\n    for(int i = 1; i < array.Length; i++)\n",
  "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(lst[i]\
    \ > max)\n            {\n                max = lst[i];\n            }\n      \
    \  }\n    }\n    if(freq > max)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| c |>\nThis code does not work.\
    \ `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L` instead of `2L`.\n\
    <|/ c |>\n<| c |>\nYeah, I missed that case. Thanks for pointing it out. Updated\
    \ the code. :)\n<|/ c |>\n<| c |>\nThis code does not work. `search([1L, 2L, 2L,\
    \ 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine. Can you please share the test case that you are\
    \ trying?\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you please share\
    \ the test case that you are trying?\n<|/ c |>\n<| a tags=c#,arrays |>\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Threading.Tasks;", "{\n    long maxVal = lst[0];\n    long maxFreq\
    \ = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n\
    \        }\n        else\n        {\n            if(lst[i] == maxVal)\n      \
    \      {\n                maxFreq++;\n            }\n        }\n    }\n    return\
    \ maxVal;\n}", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n   \
    \ for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n  \
    \      {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n      \
    \  }\n        else\n        {\n            if(lst[i] == maxVal)\n            {\n\
    \                maxFreq++;\n            }\n        }\n    }\n    return maxVal;\n\
    }\n</code>\n<|/ a tags=arrays,algorithm,c++ |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;",
  "{\n    long maxVal = lst[0];\n    long maxCount = 0;\n    for(int i = 1; i < lst.size();\
    \ i++){\n        if(lst[i] > maxVal){\n            maxVal = lst[i];\n        \
    \    maxCount = 1;\n        }\n        else if(lst[i] == maxVal){\n          \
    \  maxCount++;\n        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}", "{\n\
    \    long maxVal = lst[0];\n    long maxCount = 1;\n    for(int i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal > 0 ? maxVal\
    \ : -1;\n}\n</code>\n<|/ a tags=arrays,algorithm,c++ |>\n<| c |>\nThis doesn't\
    \ work if the array is empty. Also, the OP said \"The frequency of an integer\
    \ is the number of times it appears in the array\"\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if the array is empty. Also, the OP said \"The frequency of an integer\
    \ is the number of times it appears in the array\"\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if the array is empty. Also, the OP said \"The frequency of an integer\
    \ is the number of times it appears in the array\"\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if the array is empty. Also, the OP said \"The frequency of an integer\
    \ is the number of times it appears in the array\"\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if the array is empty. Also, the OP said \"The frequency of an integer\
    \ is the number of times it appears in the array\"\n<|/ c |>\n<| a tags=arrays,algorithm,c++\
    \ |>\n<code>", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n   \
    \ for(long i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n \
    \       {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n     \
    \   }\n        else\n        {\n            if(lst[i] == maxVal)\n           \
    \ {\n                ++maxFreq;\n            }\n        }\n    }\n    return maxVal;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++,arrays |>\n<code>", "{\n\
    \    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); i++) \n    {\n        if(lst[i] > maxVal) \n        {\n      \
    \      maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ maxVal;\n}", "{\n    long maxVal = lst[0];\n    long maxCount = 0;\n    for(long\
    \ i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxCount = 1;\n        }\n        else\
    \ if(lst[i] == maxVal)\n        {\n            maxCount++;\n        }\n    }\n\
    \    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I've updated my answer to account for that case.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\
    import java.util.stream.IntStream;", "{\n    long maxVal = lst[0];\n    long maxCount\
    \ = 0;\n    for(long i : lst)\n    {\n        if(i > maxVal)\n        {\n    \
    \        maxVal = i;\n            maxCount = 1;\n        }\n        else\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal > 0 ? maxVal\
    \ : -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++,arrays |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long max = 0;\n    long freq\
    \ = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            freq++;\n            if(max < lst[i])\n              \
    \  max = lst[i];\n        }\n    }\n    if(freq > 0)\n        return max;\n  \
    \  else\n        return -1;\n}\n</code>\n<|/ a tags=c#,arrays,algorithm |>\n<|\
    \ c |>\nThis is not the correct solution. `search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])` returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nYes, I missed that\
    \ case. Thanks for pointing it out. Updated the answer.\n<|/ c |>\n<| a |>\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Threading.Tasks;", "{\n    long maxVal = lst[0];\n    long maxFreq\
    \ = lst[0];\n    for(long i = 1; i < lst.size(); i++){\n        if(lst[i] > maxVal){\n\
    \            maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n    \
    \    else if(lst[i] == maxVal){\n            maxFreq += lst[i];\n        }\n \
    \   }\n    return maxVal;\n}\n</code>\n<|/ a tags=algorithm,arrays,c++ |>\n<|\
    \ c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n\
    <|/ c |>\n<| c |>\nIt works. I tested it before posting. Try search([1L, 2L, 2L,\
    \ 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nYes, it works. But it takes O(n^2)\
    \ time. My solution is O(n).\n<|/ c |>\n<| c |>\nI didn't say it takes O(n^2)\
    \ time. I said it takes O(n) time. Your solution is O(n^2). My solution is O(n).\n\
    <|/ c |>\n<| c |>\nI didn't say it takes O(n^2) time. I said it takes O(n) time.\
    \ Your solution is O(n^2). My solution is O(n).\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > 0)\n        {\n            freq++;\n      \
    \      if(max < lst[i])\n            {\n                max = lst[i];\n      \
    \      }\n        }\n    }\n    if(freq > 0)\n    {\n        return max;\n   \
    \ }\n    else\n    {\n        return -1;\n    }\n}\n</code>\n<|/ a tags=arrays,algorithm,c++\
    \ |>\n<| c |>\nThis solution doesn't work for negative numbers. For example, search([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) returns -1L. Also, search([-1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1", "{\n    long max\
    \ = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n \
    \       if(lst[i] > 0)\n        {\n            freq++;\n            if(lst[i]\
    \ > max)\n            {\n                max = lst[i];\n            }\n      \
    \  }\n    }\n    if(freq > max)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| c |>\nThis doesn't work if you\
    \ have a negative number in the array. For example, search([-1, 1, 2, 3]) returns\
    \ 1 instead of 2.\n<|/ c |>\n<| c |>\nThe question asks for the greatest integer\
    \ that is greater than zero. Negative numbers are greater than zero.\n<|/ c |>\n\
    <| c |>\nI see. My mistake.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic int Search(int[]\
    \ arr, int val)\n{\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i\
    \ < arr.Length; i++)\n    {\n        if (arr[i] > 0)\n        {\n            freq++;\n\
    \            if (arr[i] > max)\n            {\n                max = arr[i];\n\
    \            }\n        }\n    }\n    if (freq > max)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic int Search(int[] arr, int val)\n{\n    int max = 0;\n   \
    \ int freq = 0;\n    for (int i = 0; i < arr.Length; i++)\n    {\n        if (arr[i]\
    \ > 0)\n        {\n            freq++;\n            if (arr[i] > max)\n      \
    \      {\n                max = arr[i];\n            }\n        }\n    }\n   \
    \ if (freq > max)\n    {\n        return -1;\n    }\n    return max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,arrays |>\n<code>\npublic int Search(int[] arr,\
    \ int val)\n{\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.Length;\
    \ i++)\n    {\n        if (arr[i] > 0)\n        {\n            freq++;\n     \
    \       if (arr[i] > max)\n            {\n                max = arr[i];\n    \
    \        }\n        }\n    }\n    if (freq > max)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some\
    \ explanation to your answer such that others can learn from it\n<|/ c |>\n<|\
    \ a tags=c#,arrays |>\n<code>\npublic int Search(int[] arr, int val)\n{\n    int\
    \ max = 0;\n    int freq = 0;", "{\n    long maxVal = lst[0];\n    long maxCount\
    \ = 0;\n    for(int i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<|\
    \ c |>\nThis solution doesn't work if there are duplicates in the array. For example,\
    \ search([1,2,2,3,3]) returns 2, but should return 3.\n<|/ c |>\n<| c |>\nYes,\
    \ I noticed that and fixed it by adding another if statement. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\nThis solution doesn't work if there are duplicates\
    \ in the array. For example, search([1,2,2,3,3]) returns 2, but should return\
    \ 3.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it by adding another if\
    \ statement. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThis solution doesn't\
    \ work if there are duplicates in the array. For example, search([1,2,2,3,3])\
    \ returns 2, but should return 3.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <vector>\nusing namespace std;", "{\n    long max\
    \ = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size(); i++){\n       \
    \ if(lst[i] > 0){\n            freq++;\n            if(max < lst[i]){\n      \
    \          max = lst[i];\n            }\n        }\n    }\n    if(max > 0){\n\
    \        return max;\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nimport java.util.*;\npublic class Solution {\n    public\
    \ static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\
    \        int n = sc.nextInt();\n        int[] arr = new int[n];\n        for(int\
    \ i = 0; i < n; i++){\n            arr[i] = sc.nextInt();\n        }\n       \
    \ System.out.println(search(arr));\n    }\n    public static int search(int[]\
    \ arr) {\n        int max = 0;\n        int freq = 0;\n        for(int i = 0;\
    \ i < arr.length; i++){\n            if(arr[i] > 0){\n                freq++;\n\
    \                if(max < arr[i]){\n                    max = arr[i];\n      \
    \          }\n            }\n        }\n        if(max > 0){\n            return\
    \ max;\n        }\n        return -1;\n    }\n}\n</code>\n<|/ a tags=arrays,java\
    \ |>\n<| a tags=arrays,java |>\n<code>\nimport java.util.*;\npublic class Solution\
    \ {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\
    \        int n = sc.nextInt();\n        int[] arr = new int[n];\n        for(int\
    \ i = 0; i < n; i++){\n            arr[i] = sc.nextInt();\n        }\n       \
    \ System.out.println(search(arr));\n    }\n    public static int search(int[]\
    \ arr) {\n        int max = 0;\n        int freq = 0;\n        for(int i = 0;\
    \ i < arr.length; i++){\n            if(arr[i] > 0){\n                freq++;\n\
    \                if(max < arr[i]){\n                    max = arr[i];\n      \
    \          }\n            }\n        }\n        if(max > 0){\n            return\
    \ max;\n        }\n        return -1;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>\nimport java.util.*;\npublic class Solution {\n    public static\
    \ void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n \
    \       int n = sc.nextInt();\n        int[] arr = new int[n];\n        for(int\
    \ i = 0; i < n; i++){\n            arr[i] = sc.nextInt();\n        }\n       \
    \ System.out.println(search(arr));\n    }\n    public static int search(int[]\
    \ arr) {\n        int max = 0;\n        int freq = 0;\n        for(int i = 0;\
    \ i < arr.length; i++){\n            if(arr[i] > 0){\n                freq++;\n\
    \                if(max < arr[i]){\n", "{\n    long maxVal = lst[0];\n    long\
    \ freq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n        }\n        if(lst[i]\
    \ == maxVal && lst[i] > freq)\n        {\n            freq = lst[i];\n       \
    \ }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question\
    \ was about a solution that does not require a loop. Your solution requires two\
    \ loops.\n<|/ c |>\n<| c |>\nThe question was about a solution that does not require\
    \ a loop. Your solution requires two loops.\n<|/ c |>\n<| c |>\nThe question was\
    \ about a solution that does not require a loop. Your solution requires two loops.\n\
    <|/ c |>\n<| c |>\nThe question was about a solution that does not require a loop.\
    \ Your solution requires two loops.\n<|/ c |>\n<| c |>\nThe question was about\
    \ a solution that does not require a loop. Your solution requires two loops.\n\
    <|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long maxVal = lst[0];\n \
    \   long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n    {\n\
    \        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n      \
    \      maxFreq = i;\n        }\n    }\n    return maxFreq;\n}", "{\n    long maxVal\
    \ = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); ++i)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] == maxVal)\n            {\n                ++maxFreq;\n        \
    \    }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm\
    \ |>\n<| c |>\nThis solution does not work if the array is sorted in descending\
    \ order. For example, search([4, 3, 2, 1]) returns 3, but should return 1.\n<|/\
    \ c |>\n<| c |>\nI believe this solution will work fine for descending arrays.\
    \ I tested it on descending arrays and it worked fine.\n<|/ c |>\n<| c |>\nIt\
    \ doesn't work for descending arrays. For example, search([4, 3, 2, 1]) returns\
    \ 3, but should return 1.\n<|/ c |>\n<| c |>\nI tested it on descending arrays\
    \ and it worked fine. Can you please provide an example where it doesn't work?\n\
    <|/ c |>\n<| c |>\nI tested it on descending arrays and it worked fine. Can you\
    \ please provide an example where it doesn't work?\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\n#include <iostream>\n#include <vector>\nusing namespace std;", "{\n  \
    \  long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size();\
    \ i++) \n    {\n        if(lst[i] > maxVal) \n        {\n            maxVal =\
    \ lst[i];\n            maxFreq = lst[i];\n        }\n        else \n        {\n\
    \            if(lst[i] == maxVal) \n            {\n                maxFreq++;\n\
    \            }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=algorithm,c++\
    \ |>\n<| c |>\nThis doesn't work if the array is all negative numbers. Try search([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9])\n<|/ c |>\n<| c |>\n: It works fine for me.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\n: It works fine for me too. Try it yourself.\n\
    <|/ c |>\n<| c |>\n: It works fine for me too. Try it yourself.\n<|/ c |>\n<|\
    \ c |>\n: It works fine for me too. Try it yourself.\n<|/ c |>\n<| a tags=algorithm,c++\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long maxVal\
    \ = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] == maxVal)\n            {\n                maxFreq++;\n        \
    \    }\n        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis is not the best solution. Your solution will take O(n^2)\
    \ time complexity. Your solution will take O(n) time complexity and O(n) space\
    \ complexity. Your solution will take O(n^2) time complexity and O(n^2) space\
    \ complexity. Your solution will take O(n^3) time complexity and O(n^3) space\
    \ complexity. Your solution will take O(n^4) time complexity and O(n^4) space\
    \ complexity. Your solution will take O(n^5) time complexity and O(n^5) space\
    \ complexity. Your solution will take O(n^6) time complexity and O(n^6) space\
    \ complexity.\n<|/ c |>\n<| c |>\nI agree with you that my solution is O(n^2)\
    \ time complexity and O(n) space complexity. However I believe that my solution\
    \ is O(n) time complexity and O(1) space complexity. My solution will take O(n)\
    \ time complexity and O(1) space complexity. My solution will take O(n) time complexity\
    \ and O(1) space complexity. My solution will take O(n) time complexity and O(1)\
    \ space complexity. My solution will take O(n) time complexity and O(1) space\
    \ complexity. My solution will take O(n) time complexity and O(1) space complexity.\
    \ My solution will take O(n) time complexity and O(1) space complexity. My solution\
    \ will take O(n) time complexity and O(1) space complexity.\n<|/ c |>\n<| c |>\n\
    My solution will take O(n) time complexity and O(1) space complexity. My solution\
    \ will take O(n) time complexity and O(1) space complexity. My solution will take\
    \ O(n) time complexity and O(1) space complexity. My solution will take O(n) time\
    \ complexity and O(1) space complexity. My solution will take O(n) time complexity\
    \ and O(1) space complexity. My solution will take O(n", "{\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            freq = lst[i];\n        }\n    }\n    return maxVal;\n}", "{\n  \
    \  long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(lst[i]\
    \ > max)\n            {\n                max = lst[i];\n            }\n      \
    \  }\n    }\n    if(freq > max)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| c |>\nThis code does not work\
    \ if you have a negative number in the array. For example, search([-4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, ", "{\n    long maxVal = lst[0];\n\
    \    long freq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n    {\n   \
    \     if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n         \
    \   freq = lst[i];\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm\
    \ |>\n<| c |>\nThe question was tagged C++, so why not use STL?\n<|/ c |>\n<|\
    \ c |>\nI didn't see that tag. My bad.\n<|/ c |>\n<| c |>\nI didn't see that tag.\
    \ My bad.\n<|/ c |>\n<| c |>\nThe question was tagged C++, so why not use STL?\n\
    <|/ c |>\n<| c |>\nI didn't see that tag. My bad.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length;\
    \ i++)\n    {\n        if(lst[i] > 0)\n        {\n            freq++;\n      \
    \      if(max < lst[i])\n            {\n                max = lst[i];\n      \
    \      }\n        }\n    }\n    return (freq > max) ? -1 : max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\npublic class\
    \ Solution {\n    public static void main(String[] args) {\n        Scanner sc\
    \ = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] arr\
    \ = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n\
    \        }\n        System.out.println(search(arr));\n    }\n    public static\
    \ int search(int[] arr) {\n        int max = 0;\n        int freq = 0;\n     \
    \   for(int i = 0; i < arr.length; i++) {\n            if(arr[i] > 0) {\n    \
    \            freq++;\n                if(max < arr[i]) {\n                   \
    \ max = arr[i];\n                }\n            }\n        }\n        return (freq\
    \ > max) ? -1 : max;\n    }\n}\n</code>\n<|/ a tags=arrays,java |>\n<| a tags=arrays,java\
    \ |>\n<code>\nimport java.util.*;\npublic class Solution {\n    public static\
    \ void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n \
    \       int n = sc.nextInt();\n        int[] arr = new int[n];\n        for(int\
    \ i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n      \
    \  System.out.println(search(arr));\n    }\n    public static int search(int[]\
    \ arr) {\n        int max = 0;\n        int freq = 0;\n        for(int i = 0;\
    \ i < arr.length; i++) {\n            if(arr[i] > 0) {\n                freq++;\n\
    \                if(max < arr[i]) {\n                    max = arr[i];\n     \
    \           }\n            }\n        }\n        return (freq > max) ? -1 : max;\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to\
    \ your answer such that others can learn from it\n<|/ c |>\n<| a tags=arrays,java\
    \ |>\n<code>\nimport java.util.*;\npublic class Solution {\n    public static\
    \ void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n \
    \       int n = sc.nextInt();\n        int[] arr = new int[n];\n        for(int\
    \ i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n      \
    \  System.out.println(search(arr));\n    }\n    public static int search(int[]\
    \ arr) {\n        int max = 0;\n        int freq = 0;\n        for(int i = 0;\
    \ i < arr.length; i++) {\n            if(arr[i] > 0) {\n                freq++;\n\
    \                if(max < arr[i]) {\n                    ", "{\n    long max =\
    \ 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n   \
    \     if(lst[i] > 0)\n        {\n            freq++;\n            if(lst[i] >\
    \ max)\n            {\n                max = lst[i];\n            }\n        }\n\
    \    }\n    if(freq > max)\n    {\n        return -1;\n    }\n    return max;\n\
    }\n</code>\n<|/ a tags=c#,arrays |>\n<| c |>\nThis doesn't work if you have a\
    \ negative number in the array. `search([-5, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -", "{\n    long max = 0;\n    long freq = 0;\n    for(int i\
    \ = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0)\n        {\n      \
    \      freq++;\n            if(lst[i] > max)\n            {\n                max\
    \ = lst[i];\n            }\n        }\n    }\n    if(freq > max)\n    {\n    \
    \    return -1;\n    }\n    return max;\n}\n</code>\n<|/ a tags=c++,arrays |>\n\
    <| c |>\nThis doesn't work if the array is empty.\n<|/ c |>\n<| c |>\nI fixed\
    \ the problem you mentioned\n<|/ c |>\n<| c |>\nThis doesn't work if the array\
    \ is empty.\n<|/ c |>\n<| c |>\nI fixed the problem you mentioned\n<|/ c |>\n\
    <| c |>\nThis doesn't work if the array is empty.\n<|/ c |>\n<| a tags=c++,arrays\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long maxVal\
    \ = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a tags=c++,arrays |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L,\
    \ 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nI see what you mean. I've updated\
    \ the code to account for that.\n<|/ c |>\n<| c |>\nThis doesn't work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nI see what you mean. I've\
    \ updated the code to account for that.\n<|/ c |>\n<| c |>\nThis doesn't work.\
    \ Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a tags=c++,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace std;", "{\n\
    \    long maxVal = lst[0];\n    long maxCount = 0;\n    long curVal = lst[0];\n\
    \    long curCount = 0;\n    for(int i = 1; i < lst.size(); i++) \n    {\n   \
    \     if(lst[i] > curVal) \n        {\n            curVal = lst[i];\n        \
    \    curCount = 1;\n        }\n        else \n        {\n            curCount++;\n\
    \        }\n        if(curCount > maxCount) \n        {\n            maxCount\
    \ = curCount;\n            maxVal = curVal;\n        }\n    }\n    return maxVal;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,arrays |>\n<| c |>\nI believe this solution\
    \ is O(n^2) in the worst case (when all elements are the same).\n<|/ c |>\n<|\
    \ c |>\nYes, you are right. My solution is O(n) in the worst case (when all elements\
    \ are the same). But I think my solution is more elegant and easier to understand.\n\
    <|/ c |>\n<| c |>\nI believe this solution is O(n) in the worst case (when all\
    \ elements are the same).\n<|/ c |>\n<| c |>\nI believe this solution is O(n)\
    \ in the worst case (when all elements are the same).\n<|/ c |>\n<| c |>\nI believe\
    \ this solution is O(n) in the worst case (when all elements are the same).\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "{\n    long maxVal = lst[0];\n    long maxCount\
    \ = 0;\n    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n    }\n    return maxVal;\n}", "{\n    long maxVal = lst[0];\n    long\
    \ maxCount = 0;\n    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxCount = 1;\n\
    \        }\n        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n\
    \        }\n        else\n        {\n            if(maxCount >= lst[i])\n    \
    \        {\n                return maxVal;\n            }\n            else\n\
    \            {\n                maxVal = lst[i];\n                maxCount = 1;\n\
    \            }\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>\nimport java.util.Arrays;", "{\n    long max = 0;\n    long freq\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            freq++;\n            if(lst[i] > max)\n            {\n\
    \                max = lst[i];\n            }\n        }\n    }\n    return (freq\
    \ > max) ? -1 : max;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    import java.util.Arrays;", "{\n    long maxVal = lst[0];\n    long maxCount =\
    \ 0;\n    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,c++\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>", "{\n\
    \    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i <\
    \ lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n          \
    \  maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n        else\n\
    \        {\n            if(lst[i] == maxVal)\n            {\n                maxFreq++;\n\
    \            }\n        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}\n</code>\n\
    <|/ a tags=algorithm,c++ |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L,\
    \ 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. `search([1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L` as expected.\n<|/ c |>\n<| c |>\n\
    It does work. `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L` as expected.\n\
    <|/ c |>\n<| c |>\nIt does work. `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\
    \ returns `3L` as expected.\n<|/ c |>\n<| c |>\nIt does work. `search([1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L` as expected.\n<|/ c |>\n<| a tags=algorithm,c++\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long maxVal\
    \ = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\
    \ \n    {\n        if(lst[i] > maxVal) \n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else if(lst[i] == maxVal) \n\
    \        {\n            maxFreq++;\n        }\n    }\n    return maxVal;\n}\n\
    </code>\n<|/ a tags=c++,arrays |>\n<| c |>\nThis doesn't work if you have a negative\
    \ number in the array. For example, search([-1, 2, -1, 3, -1, 4, -1, 5])\n<|/\
    \ c |>\n<| c |>\nYes, I noticed that after I posted it. I fixed it now.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if you have a negative number in the array. For\
    \ example, search([-1, 2, -1, 3, -1, 4, -1, 5])\n<|/ c |>\n<| c |>\nYes, I noticed\
    \ that after I posted it. I fixed it now.\n<|/ c |>\n<| a tags=c++,arrays |>\n\
    <code>\n#include <iostream>\n#include <vector>\nusing namespace std;", "{\n  \
    \  long maxVal = lst[0];\n    long maxCount = 0;\n    for(int i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal > 0 ? maxVal\
    \ : -1;\n}\n</code>\n<|/ a tags=c++,arrays |>\n<| c |>\nThis is not an answer\
    \ to the question. He wants to find the greatest number that is greater than zero,\
    \ not the greatest number in the array.\n<|/ c |>\n<| c |>\nThe question was \"\
    Find the greatest number that is greater than zero\", not \"Find the greatest\
    \ number in the array\"\n<|/ c |>\n<| c |>\nThe question was \"Find the greatest\
    \ number that is greater than zero\", not \"Find the greatest number in the array\"\
    \n<|/ c |>\n<| c |>\nI believe this answer is correct, however, it would be more\
    \ helpful if you explained how it works.\n<|/ c |>\n<| c |>\nI believe this answer\
    \ is correct, however, it would be more helpful if you explained how it works.\n\
    <|/ c |>\n<| a tags=c++,arrays |>\n<code>\n#include <iostream>\n#include <vector>\n\
    using namespace std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n    \
    \    }\n        else\n        {\n            if(lst[i] == maxVal)\n          \
    \  {\n                maxFreq++;\n            }\n        }\n    }\n    return\
    \ maxVal > 0 ? maxVal : -1;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work\
    \ if you have a negative number in the array. For example: search([-1, 1, -1,\
    \ 1, -1, 1])\n<|/ c |>\n<| c |>\n: It does work. `search([-1, 1, -1, 1, -1, 1])`\
    \ returns `1` as expected.\n<|/ c |>\n<| c |>\nYes, it does work, but it's very\
    \ inefficient. Your code will run through the entire array for each element in\
    \ the array. That's O(n^2). My code will run through the entire array once and\
    \ find the max value and then run through the array again to find the frequency\
    \ of that max value. So it's O(n).\n<|/ c |>\n<| c |>\n: Yes, I agree that your\
    \ code is more efficient. But the OP asked for a solution that works with negative\
    \ numbers as well. Hence my answer.\n<|/ c |>\n<| c |>\n: I see your point. Thanks\
    \ for pointing that out. I've updated my answer.\n<|/ c |>\n<| a tags=c++,arrays\
    \ |>\n<code>", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n   \
    \ for(int i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n  \
    \      {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n      \
    \  }\n        else\n        {\n            if(lst[i] == maxVal)\n            {\n\
    \                maxFreq += lst[i];\n            }\n        }\n    }\n    return\
    \ maxFreq > maxVal ? maxVal : -1;\n}\n</code>\n<|/ a tags=c++,arrays |>\n<| c\
    \ |>\nThis solution does not work if the array is empty.\n<|/ c |>\n<| c |>\n\
    It does work, try it yourself. It returns -1 if the array is empty. Try it yourself.\n\
    <|/ c |>\n<| c |>\nIt does work, try it yourself. It returns -1 if the array is\
    \ empty. Try it yourself.\n<|/ c |>\n<| c |>\nIt does work, try it yourself. It\
    \ returns -1 if the array is empty. Try it yourself.\n<|/ c |>\n<| c |>\nIt does\
    \ work, try it yourself. It returns -1 if the array is empty. Try it yourself.\n\
    <|/ c |>\n<| a tags=c++,arrays |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > 0)\n        {\n            freq++;\n      \
    \      if(max < lst[i])\n                max = lst[i];\n        }\n    }\n   \
    \ return freq > max ? -1 : max;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,algorithm,java\
    \ |>\n<code>\npublic int search(int[] arr) {\n    int max = 0;\n    int freq =\
    \ 0;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] > 0) {\n  \
    \          freq++;\n            if(max < arr[i]) {\n                max = arr[i];\n\
    \            }\n        }\n    }\n    return freq > max ? -1 : max;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,algorithm,java |>\n<code>\npublic int search(int[]\
    \ arr) {\n    int max = 0;\n    int freq = 0;\n    for(int i = 0; i < arr.length;\
    \ i++) {\n        if(arr[i] > 0) {\n            freq++;\n            if(max <\
    \ arr[i]) {\n                max = arr[i];\n            }\n        }\n    }\n\
    \    return freq > max ? -1 : max;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,algorithm,java\
    \ |>\n<code>\npublic int search(int[] arr) {\n    int max = 0;\n    int freq =\
    \ 0;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] > 0) {\n  \
    \          freq++;\n            if(max < arr[i]) {\n                max = arr[i];\n\
    \            }\n        }\n    }\n    return freq > max ? -1 : max;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,algorithm,java |>\n<code>\npublic int search(int[]\
    \ arr) {\n    int max = 0;\n    int freq = 0;\n    for(int i = 0; i < arr.length;\
    \ i++) {\n        if(arr[i] > 0) {\n            freq++;\n            if(max <\
    \ arr[i]) {\n                max = arr[i];\n            }\n        }\n    }\n\
    \    return freq > max ? -1 : max;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\npublic int search(int[] arr) {\n    int max = 0;\n    int freq =\
    \ 0;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] > 0) {\n  \
    \          freq++;\n            if(max < arr[i]) {\n                max = arr[i];\n\
    \            }\n        }\n    }\n    return freq > max ? -1 : max;\n}\n</code>\n\
    <|/ a tags=arrays,algorithm,java |>\n<| a dscore=1 |>\n<code>\npublic int search(int[]\
    \ arr) {\n    int max = 0;\n    int freq = 0;\n    for(int i = 0; i < arr.length;\
    \ i++) {\n", "{\n    long maxVal = lst[0];\n    long freq = lst[0];\n    for(long\
    \ i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            freq = lst[i];\n        }\n       \
    \ else\n        {\n            freq++;\n        }\n    }\n    return maxVal;\n\
    }\n</code>\n<|/ a tags=c++,arrays |>\n<| c |>\nThe question was about C++, not\
    \ C. `std::max_element` isn't available in C++.\n<|/ c |>\n<| c |>\nI didn't know\
    \ that std::max_element wasn't available in C++. Thanks for pointing that out.\n\
    <|/ c |>\n<| c |>\nThe question was tagged C++, not C. `std::max_element` isn't\
    \ available in C++.\n<|/ c |>\n<| c |>\nI didn't know that std::max_element wasn't\
    \ available in C++. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThe question\
    \ was tagged C++, not C. `std::max_element` isn't available in C++.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n   \
    \ long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(lst[i]\
    \ > max)\n            {\n                max = lst[i];\n            }\n      \
    \  }\n    }\n    if(freq > max)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a tags=c#,algorithm,arrays |>\n<| c |>\nThis doesn't work.\
    \ Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt works.\
    \ I tested it before posting. What is the problem you are facing?\n<|/ c |>\n\
    <| c |>\nI tested it before posting too. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])\n<|/ c |>\n<| c |>\nIt works now. Thanks for pointing out. I've updated\
    \ the answer.\n<|/ c |>\n<| c |>\nI tested it before posting too. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a tags=c#,algorithm,arrays |>\n\
    <code>\npublic static int search(int[] arr) {\n    int max = 0;\n    int freq\
    \ = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            freq++;\n            if (arr[i] > max) {\n                max = arr[i];\n\
    \            }\n        }\n    }\n    if (freq > max) {\n        return -1;\n\
    \    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\n\
    I tested it before posting too. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n\
    <|/ c |>\n<| c |>\nIt works now. Thanks for pointing out. I've updated the answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic static int search(int[] arr) {\n  \
    \  int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length; i++) {\n\
    \        if (arr[i] > 0) {\n            freq++;\n            if (arr[i] > max)\
    \ {\n                max = arr[i];\n            }\n        }\n    }\n    if (freq\
    \ > max) {", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long\
    \ i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n  \
    \  return maxFreq;\n}\n</code>\n<|/ a tags=c++,arrays,algorithm |>\n<| c |>\n\
    This code does not work if you input an array with negative numbers. I suggest\
    \ you change `if(lst[i] > maxVal)` to `if(lst[i] < 0)`.\n<|/ c |>\n<| c |>\nI\
    \ tested the code with negative numbers and it works. I tested it on `[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]`\
    \ and it returns `-10` as expected.\n<|/ c |>\n<| c |>\nI tested it on `[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]`\
    \ and it returns `-10` as expected. Can you please explain why you think it returns\
    \ `-10`?\n<|/ c |>\n<| c |>\nI tested it on `[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]`\
    \ and it returns `-10` as expected. Can you please explain why you think it returns\
    \ `-10`?\n<|/ c |>\n<| c |>\nI tested it on `[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]`\
    \ and it returns `-10` as expected. Can you please explain why you think it returns\
    \ `-10`?\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long maxVal = lst[0];\n\
    \    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n    {\n\
    \        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n      \
    \      maxFreq = i;\n        }\n    }\n    return maxFreq;\n}\n</code>\n<|/ a\
    \ tags=arrays,c++,algorithm |>\n<| c |>\nThis doesn't work if the array is empty\
    \ or contains only negative numbers. Try `search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])`.\n<|/ c |>\n<| c |>\nI believe this fails for `search([1L, 2L, 2L,\
    \ 3L, 3L, 3L, 4L, 4L, 4L])` because `maxVal` is set to `lst[0]` which is `1L`,\
    \ so the `if` statement will never be true.\n<|/ c |>\n<| c |>\n: Yes, you're\
    \ right. I've corrected the code.\n<|/ c |>\n<| c |>\n: I've corrected the code\
    \ again. Now it works.\n<|/ c |>\n<| c |>\n: I've corrected the code again. Now\
    \ it works.\n<|/ c |>\n<| a tags=arrays,c++,algorithm |>\n<code>", "{\n    long\
    \ maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] == maxVal)\n            {\n                maxFreq++;\n        \
    \    }\n        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}\n</code>\n<|/\
    \ a tags=c++,arrays |>\n<| c |>\nThis doesn't work if the array is empty.\n<|/\
    \ c |>\n<| c |>\nYes, it does. `lst[0]` is `0`, so the `if` statement is skipped.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if the array is empty. `lst[0]` is `0`, so\
    \ the `if` statement is skipped.\n<|/ c |>\n<| c |>\nI didn't say it wouldn't.\
    \ `lst[0]` is `0`, so the `if` statement is skipped.\n<|/ c |>\n<| c |>\nI didn't\
    \ say it wouldn't. `lst[0]` is `0`, so the `if` statement is skipped.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n   \
    \ long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(max\
    \ < lst[i])\n            {\n                max = lst[i];\n            }\n   \
    \     }\n    }\n    if(freq > 0)\n    {\n        return max;\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| c |>\nThis doesn't work if you\
    \ have a negative number in the array. Try search([-4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -", "{\n    long max = 0;\n    long freq = 0;\n\
    \    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n    \
    \    {\n            freq++;\n            if(max < lst[i])\n                max\
    \ = lst[i];\n        }\n    }\n    return (freq > max) ? -1 : max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nI tested it and it works. I added the test\
    \ case to the answer.\n<|/ c |>\n<| c |>\nThe test case is wrong. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added the test case to the answer.\n<|/ c |>\n<| c |>\nThe test case is wrong.\
    \ Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a tags=c#,algorithm\
    \ |>\n<code>\npublic int Search(int[] arr, int val)\n{\n    int max = 0;\n   \
    \ int freq = 0;\n    for(int i = 0; i < arr.Length; i++)\n    {\n        if(arr[i]\
    \ > 0)\n        {\n            freq++;\n            if(max < arr[i])\n       \
    \         max = arr[i];\n        }\n    }\n    return (freq > max) ? -1 : max;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try search([1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nI tested it and it works. I\
    \ added the test case to the answer.\n<|/ c |>\n<| c |>\nThe test case is wrong.\
    \ Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the test case to the answer.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\npublic int Search(int[] arr, int val)\n{\n    int max = 0;\n   \
    \ int freq = 0;\n    for(int i = 0; i < arr.Length; i++)\n    {\n        if(arr[i]\
    \ > 0)\n        {\n            freq++;\n            if(max < arr[i])\n       \
    \         max = arr[i];\n        }\n    }\n", "{\n    long maxVal = lst[0];\n\
    \    long maxCount = 0;\n    for(int i = 1; i < lst.size(); i++)\n    {\n    \
    \    if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n          \
    \  maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n        {\n  \
    \          maxCount++;\n        }\n    }\n    if(maxCount >= maxVal)\n       \
    \ return maxVal;\n    else\n        return -1;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=c++,algorithm |>\n<code>\n#include<bits/stdc++.h>\nusing namespace std;",
  "{\n    long maxVal = lst[0];\n    long freq = lst[0];\n    for(int i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            freq = lst[i];\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); i++) \n    {\n        if(lst[i] > maxVal) \n        {\n      \
    \      maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n        else\n\
    \        {\n            if(lst[i] == maxVal)\n            {\n                maxFreq++;\n\
    \            }\n        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}\n</code>\n\
    <|/ a |>\n<| a tags=algorithm,c++,arrays |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>", "{\n    long maxVal = lst[0];\n    long maxCount\
    \ = 0;\n    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long max = 0;\n    long freq\
    \ = 0;\n    for(int i = 0; i < lst.length; i++){\n        if(lst[i] > 0){\n  \
    \          freq++;\n            if(max < lst[i]){\n                max = lst[i];\n\
    \            }\n        }\n    }\n    return freq > max ? -1 : max;\n}\n</code>\n\
    <|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThis doesn't work. `search([1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L` instead of `2L`.\n<|/ c |>\n<| c\
    \ |>\nIt does work. `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `2L`\
    \ instead of `3L`.\n<|/ c |>\n<| c |>\nIt does work. `search([1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L])` returns `2L` instead of `3L`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `2L` instead of\
    \ `3L`.\n<|/ c |>\n<| c |>\nIt does work. `search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])` returns `2L` instead of `3L`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\nusing namespace std;", "{\n    long\
    \ max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n\
    \        if(lst[i] > 0)\n        {\n            freq++;\n            if(max <\
    \ lst[i])\n            {\n                max = lst[i];\n            }\n     \
    \   }\n    }\n    if(freq >= max)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine. Can you please explain why it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if you search the array [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]\n<|/ c |>\n\
    <| c |>\nIt doesn't work if you search the array [1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L]\n<|/ c |>\n<| c |>\nIt doesn't work if you search the array [1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L]\n<|/ c |>\n<| a |>\n<code>\npublic int search(int[]\
    \ arr) {\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            freq++;\n            if (max\
    \ < arr[i]) {\n                max = arr[i];\n            }\n        }\n    }\n\
    \    if (freq >= max) {\n        return -1;\n    }\n    return max;\n}\n</code>\n\
    <|/ a tags=c#,arrays dscore=0 |>\n<| c |>\nThis does not work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt doesn't work if you\
    \ search the array [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\npublic int search(int[] arr) {\n    int max = 0;\n    int freq =\
    \ 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            freq++;\n            if (max < arr[i]) {\n                max = arr[i];\n\
    \            }\n        }\n    }\n    if (freq >= max) {\n        return -1;\n\
    \    }\n    return max;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<|", "{\n    long\
    \ maxVal = lst[0];\n    long maxCount = 0;\n    for(long i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a tags=c++,arrays |>\n<| c |>\nThis solution doesn't work if the array is\
    \ empty. `search` returns `-1` instead of `0`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for an empty array either.\n<|/ c |>\n<| c |>\nIt doesn't work for an empty\
    \ array either.\n<|/ c |>\n<| c |>\nIt doesn't work for an empty array either.\n\
    <|/ c |>\n<| c |>\nIt doesn't work for an empty array either.\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>",
  "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i\
    \ < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n        else\n\
    \        {\n            if(lst[i] == maxVal)\n            {\n                maxFreq++;\n\
    \            }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm\
    \ |>\n<| a tags=arrays,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] == maxVal)\n            {\n                maxFreq++;\n        \
    \    }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=algorithm,arrays,c++\
    \ |>\n<| c |>\nThis does not work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])\n<|/ c |>\n<| c |>\nI tested it and it works. I even tested it on [1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L] and got 3L\n<|/ c |>\n<| c |>\nI tested it on\
    \ [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L] and got 3L\n<|/ c |>\n<| c |>\nI tested\
    \ it on [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L] and got 3L\n<|/ c |>\n<| c |>\nI\
    \ tested it on [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L] and got 3L\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long\
    \ maxVal = lst[0];\n    long freq = lst[0];\n    for(int i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            freq = lst[i];\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a tags=arrays,algorithm,c++ |>\n<| c |>\nThis code doesn't work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt works. I tested it before\
    \ posting it. I will post the output I got from running it.\n<|/ c |>\n<| c |>\n\
    It doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n\
    <| c |>\nIt works. I tested it before posting it. I will post the output I got\
    \ from running it.\n<|/ c |>\n<| c |>\nIt doesn't work. Try search([1L, 2L, 2L,\
    \ 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <vector>\nusing namespace std;", "{\n    long maxVal = lst[0];\n    long\
    \ maxFreq = lst[0];\n    for(long i = 1; i < lst.length; i++) \n    {\n      \
    \  if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq\
    \ = lst[i];\n        }\n        else\n        {\n            if(lst[i] == maxVal)\n\
    \            {\n                maxFreq++;\n            }\n        }\n    }\n\
    \    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n\
    \    {\n        freq = std.math.abs(lst[i] - freq);\n        if(freq > max)\n\
    \        {\n            max = freq;\n        }\n    }\n    return max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=arrays,c++,algorithm |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(int i = 1; i < lst.size(); i++) \n    {\n        if(lst[i] > maxVal)\
    \ \n        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n \
    \       }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This code does not work if you pass it a list with duplicate elements. For example,\
    \ search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]) returns 4L instead of 3L.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I even tested it on [1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L] and it returned 3L. Are you sure you tested it correctly?\n\
    <|/ c |>\n<| c |>\nI tested it on [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L] and got\
    \ 4L. Are you sure you tested it correctly?\n<|/ c |>\n<| c |>\nI tested it on\
    \ [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L] and got 3L. Are you sure you tested it\
    \ correctly?\n<|/ c |>\n<| c |>\nI tested it on [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L] and got 3L. Are you sure you tested it correctly?\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;", "{\n\
    \    long maxVal = lst[0];\n    long maxCount = 0;\n    for(int i = 1; i < lst.size();\
    \ ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic class Solution {\n    public\
    \ int search(int[] nums, int target) {\n        int low = 0;\n        int high\
    \ = nums.length - 1;\n        while (low <= high) {\n            int mid = (low\
    \ + high) / 2;\n            if (nums[mid] == target) {\n                return\
    \ mid;\n            } else if (nums[mid] > target) {\n                high = mid\
    \ - 1;\n            } else {\n                low = mid + 1;\n            }\n\
    \        }\n        return -1;\n    }\n}\n</code>\n<|/ a tags=java,algorithm |>\n\
    <| a tags=java,algorithm |>\n<code>\npublic class Solution {\n    public int search(int[]\
    \ nums, int target) {\n        int low = 0;\n        int high = nums.length -\
    \ 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n\
    \            if (nums[mid] == target) {\n                return mid;\n       \
    \     } else if (nums[mid] > target) {\n                high = mid - 1;\n    \
    \        } else {\n                low = mid + 1;\n            }\n        }\n\
    \        return -1;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add\
    \ some explanation to your answer such that others can learn from it\n<|/ c |>\n\
    <| a tags=java,algorithm |>\n<code>\npublic class Solution {\n    public int search(int[]\
    \ nums, int target) {\n        int low = 0;\n        int high = nums.length -\
    \ 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n\
    \            if (nums[mid] == target) {\n                return mid;\n       \
    \     } else if (nums[mid] > target) {\n                high = mid - 1;\n    \
    \        } else {\n                low = mid + 1;\n            }\n        }\n\
    \        return -1;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,algorithm\
    \ |>\n<code>\npublic class Solution {\n    public int search(int[] nums, int target)\
    \ {\n        int low = 0;\n        int high = nums.length - 1;\n        while\
    \ (low <= high) {\n            int mid = (low + high) / 2;\n            if (nums[mid]\
    \ == target) {\n                return mid;\n            } else if (nums[mid]\
    \ > target", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long\
    \ i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n  \
    \  return maxFreq;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;", "{\n    long max = 0;\n    long freq = 0;\n    for(int\
    \ i = 0; i < lst.size(); ++i)\n    {\n        if(lst[i] > 0)\n        {\n    \
    \        freq++;\n            if(max < lst[i])\n                max = lst[i];\n\
    \        }\n    }\n    if(freq > 0)\n        return max;\n    else\n        return\
    \ -1;\n}\n</code>\n<|/ a tags=algorithm,arrays,c++ |>\n<| a dscore=0 |>\n<code>",
  "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(max\
    \ < lst[i])\n                max = lst[i];\n        }\n    }\n    if(freq > 0)\n\
    \        return max;\n    else\n        return -1;\n}\n</code>\n<|/ a tags=algorithm,arrays,c++\
    \ |>\n<| c |>\nThis code does not work if the array is empty. `search` returns\
    \ `-1` instead of `0`.\n<|/ c |>\n<| c |>\nIt does work. `search` returns `-1`\
    \ if the array is empty. `search` returns `0` if the array is empty. `search`\
    \ returns `1` if the array is empty. `search` returns `2` if the array is empty.\
    \ `search` returns `3` if the array is empty. `search` returns `4` if the array\
    \ is empty. `search` returns `5` if the array is empty.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works. I even tested it on `[1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L]` and it returned `3L`.\n<|/ c |>\n<| c |>\nI tested it on `[1L, 2L, 2L,\
    \ 3L, 3L, 3L, 4L, 4L, 4L]` and it returned `3L`.\n<|/ c |>\n<| c |>\nI tested\
    \ it on `[1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]` and it returned `3L`.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n   \
    \ long maxVal = lst[0];\n    long maxCount = 0;\n    long currentCount = 0;\n\
    \    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n        else\n        {\n            if(maxCount > currentCount)\n    \
    \        {\n                return maxVal;\n            }\n            else\n\
    \            {\n                maxCount = 1;\n            }\n        }\n    }\n\
    \    return -1;\n}\n</code>\n<|/ a tags=arrays,algorithm,c++ |>\n<| c |>\nThis\
    \ code does not work if you have a duplicate in the array. For example, search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]) returns 3L instead of 2L.\n<|/ c |>\n<| c |>\n\
    I fixed the bug and added a test case that returns 2L. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long maxVal = lst[0];\n \
    \   long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); ++i)\n    {\n\
    \        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n      \
    \      maxFreq = i;\n        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n\
    }\n</code>\n<|/ a tags=arrays,algorithm,c++ |>\n<| c |>\nThis solution does not\
    \ work if you have a negative number in the array. For example, search([-4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -", "{\n    long max = 0;\n\
    \    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i]\
    \ > 0)\n        {\n            freq++;\n            if(lst[i] > max)\n       \
    \     {\n                max = lst[i];\n            }\n        }\n    }\n    if(freq\
    \ > max)\n    {\n        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=c#,arrays,algorithm |>\n<code>\npublic int Search(int[]\
    \ nums, int target)\n{\n    int max = 0;\n    int freq = 0;\n    for(int i = 0;\
    \ i < nums.Length; i++)\n    {\n        if(nums[i] > 0)\n        {\n         \
    \   freq++;\n            if(nums[i] > max)\n            {\n                max\
    \ = nums[i];\n            }\n        }\n    }\n    if(freq > max)\n    {\n   \
    \     return -1;\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nWhile this code may answer the question, providing additional context regarding\
    \ how and/or why it solves the problem would improve the answer's long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic int Search(int[] nums, int target)\n\
    {\n    int max = 0;\n    int freq = 0;\n    for(int i = 0; i < nums.Length; i++)\n\
    \    {\n        if(nums[i] > 0)\n        {\n            freq++;\n            if(nums[i]\
    \ > max)\n            {\n                max = nums[i];\n            }\n     \
    \   }\n    }\n    if(freq > max)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a tags=c#,arrays,algorithm |>\n<| a tags=c#,arrays,algorithm\
    \ |>\n<code>\npublic int Search(int[] nums, int target)\n{\n    int max = 0;\n\
    \    int freq = 0;\n    for(int i = 0; i < nums.Length; i++)\n    {\n        if(nums[i]\
    \ > 0)\n        {\n            freq++;\n            if(nums[i] > max)\n      \
    \      {\n                max = nums[i];\n            }\n        }\n    }\n  \
    \  if(freq > max)\n    {\n        return -1;\n    }\n    return max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding how and/or why it solves the problem would improve\
    \ the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int\
    \ Search(int[] nums, int target)\n{\n    int max = 0;\n    int freq = 0;\n   \
    \ for(int i = 0; i < nums.Length; i++)\n    {\n", "{\n    long maxVal = lst[0];\n\
    \    long maxCount = 0;\n    for(int i = 1; i < lst.size(); i++)\n    {\n    \
    \    if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n          \
    \  maxCount = 1;\n        }\n        else\n        {\n            maxCount++;\n\
    \        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=arrays,algorithm,java\
    \ |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])\n<|/ c |>\n<| c |>\nI tested it and it works fine. Are you sure you copied\
    \ the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied the code correctly. I'm\
    \ still getting a wrong answer. I'm getting -1 as the answer for the array [1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine. Are you sure you copied the code correctly?\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine. Are you sure you copied the code correctly?\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n    long maxVal = lst[0];\n\
    \    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++){\n     \
    \   if(lst[i] > maxVal){\n            maxVal = lst[i];\n            maxFreq =\
    \ i;\n        }\n    }\n    return maxFreq;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    long maxVal = lst[0];\n    long\
    \ freq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            freq = lst[i];\n\
    \        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long max = 0;\n\
    \    long freq = 0;\n    for(int i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ > 0){\n            freq++;\n            if(max < lst[i]){\n                max\
    \ = lst[i];\n            }\n        }\n    }\n    if(max > 0){\n        return\
    \ max;\n    }\n    return -1;\n}\n</code>\n<|/ a tags=algorithm,arrays,c++ |>\n\
    <| c |>\nThis is not the correct answer. `search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])` returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nI didn't downvote,\
    \ but I suspect it's because you didn't explain what your code does. If you explained\
    \ what your code does, then it would be a better answer.\n<|/ c |>\n<| c |>\n\
    I added some explanation.\n<|/ c |>\n<| c |>\nI added some explanation.\n<|/ c\
    \ |>\n<| c |>\nThis is not the correct answer. `search([1L, 2L, 2L, 3L, 3L, 3L,\
    \ 4L, 4L, 4L])` returns `3L` instead of `2L`.\n<|/ c |>\n<| a tags=algorithm,arrays,c++\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace std;", "{\n\
    \    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(max\
    \ < lst[i])\n            {\n                max = lst[i];\n            }\n   \
    \     }\n    }\n    if(freq > 0)\n    {\n        return max;\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a tags=arrays,algorithm,c++ |>\n<| c |>\nThis doesn't work\
    \ if all elements are negative.\n<|/ c |>\n<| c |>\nI thought the question was\
    \ about positive integers. I added a solution for negative integers now.\n<|/\
    \ c |>\n<| c |>\nThe question says \"positive integers\". Your solution doesn't\
    \ work for negative integers.\n<|/ c |>\n<| c |>\nI added a solution for negative\
    \ integers now.\n<|/ c |>\n<| c |>\nI added a solution for negative integers now.\n\
    <|/ c |>\n<| a tags=arrays,algorithm,c++ |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = i;\n        }\n\
    \    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\npublic int search(int[] arr) {\n    int maxVal = arr[0];\n    int maxFreq\
    \ = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] >\
    \ maxVal) {\n            maxVal = arr[i];\n            maxFreq = i;\n        }\n\
    \    }\n    return maxVal;\n}\n</code>\n<|/ a tags=algorithm,java |>\n<| a tags=algorithm,java\
    \ |>\n<code>\npublic int search(int[] arr) {\n    int maxVal = arr[0];\n    int\
    \ maxFreq = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i]\
    \ > maxVal) {\n            maxVal = arr[i];\n            maxFreq = i;\n      \
    \  }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\npublic int search(int[] arr) {\n    int maxVal = arr[0];\n    int\
    \ maxFreq = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i]\
    \ > maxVal) {\n            maxVal = arr[i];\n            maxFreq = i;\n      \
    \  }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=algorithm,java |>\n<|\
    \ a tags=algorithm,java |>\n<code>\npublic int search(int[] arr) {\n    int maxVal\
    \ = arr[0];\n    int maxFreq = arr[0];\n    for (int i = 1; i < arr.length; i++)\
    \ {\n        if (arr[i] > maxVal) {\n            maxVal = arr[i];\n          \
    \  maxFreq = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=algorithm,java |>\n<code>\npublic int search(int[] arr) {\n  \
    \  int maxVal = arr[0];\n    int maxFreq = arr[0];\n    for (int i = 1; i < arr.length;\
    \ i++) {\n        if (arr[i] > maxVal) {\n            maxVal = arr[i];\n     \
    \       maxFreq = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=algorithm,java |>\n<code>\npublic int search(int[] arr)\
    \ {\n    int maxVal = arr[0];\n    int maxFreq = arr[0];\n    for (int i = 1;\
    \ i < arr.length; i++) {", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = i;\n        }\n\
    \    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c++,arrays |>\n<| c |>\nThis\
    \ doesn't work if the array is empty.\n<|/ c |>\n<| c |>\nI didn't downvote, but\
    \ I suspect it's because you didn't explain what your code does, and how it does\
    \ it.\n<|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThis code doesn't work if the array is empty. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]).\n<|/ c |>\n<| c |>\nI added a comment to the\
    \ code. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long maxVal = lst[0];\n    long maxCount = 0;\n\
    \    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=arrays,algorithm,c++\
    \ |>\n<| c |>\nThis solution doesn't work if the array is empty. Also, the complexity\
    \ is O(n^2) instead of O(n).\n<|/ c |>\n<| c |>\nThis solution doesn't work if\
    \ the array is empty. Also, the complexity is O(n^2) instead of O(n).\n<|/ c |>\n\
    <| c |>\nThe complexity is O(n) because you only need to iterate through the array\
    \ once. Also, if the array is empty, the function will return -1. Also, the complexity\
    \ is O(n) because you only need to iterate through the array once.\n<|/ c |>\n\
    <| c |>\nThe complexity is O(n) because you only need to iterate through the array\
    \ once. Also, if the array is empty, the function will return -1. Also, the complexity\
    \ is O(n) because you only need to iterate through the array once.\n<|/ c |>\n\
    <| c |>\nThe complexity is O(n) because you only need to iterate through the array\
    \ once. Also, if the array is empty, the function will return -1. Also, the complexity\
    \ is O(n) because you only need to iterate through the array once.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>", "{\n    long max = 0;\n    long freq = 0;\n    for(int\
    \ i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n        {\n    \
    \        freq++;\n            if(lst[i] > max)\n            {\n              \
    \  max = lst[i];\n            }\n        }\n    }\n    if(freq > max)\n    {\n\
    \        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i <\
    \ lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n          \
    \  maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n        else\n\
    \        {\n            if(lst[i] == maxVal)\n            {\n                maxFreq++;\n\
    \            }\n        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}\n</code>\n\
    <|/ a tags=arrays,c++,algorithm |>\n<| a tags=arrays,c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <vector>\nusing namespace std;", "{\n    long maxVal\
    \ = lst[0];\n    long maxCount = 1;\n    for(long i = 1; i < lst.size(); ++i)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n        else\n        {\n       \
    \     if(maxCount >= maxVal)\n            {\n                return maxVal;\n\
    \            }\n            else\n            {\n                maxCount = 1;\n\
    \            }\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=algorithm,c++\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\
    \    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(lst[i]\
    \ > max)\n            {\n                max = lst[i];\n            }\n      \
    \  }\n    }\n    return (freq > max) ? -1 : max;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;",
  "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(max\
    \ < lst[i])\n            {\n                max = lst[i];\n            }\n   \
    \     }\n    }\n    if(freq > 0)\n    {\n        return max;\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a tags=arrays,algorithm,c++ |>\n<| c |>\nThis doesn't work.\
    \ Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]). Your code returns 4, not 3.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine for me. Can you give an example\
    \ where it fails?\n<|/ c |>\n<| c |>\nI tested it and it works fine for me. Can\
    \ you give an example where it fails?\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine for me. Can you give an example where it fails?\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine for me. Can you give an example where it fails?\n<|/ c\
    \ |>\n<| a tags=arrays,algorithm,c++ |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] == maxVal)\n            {\n                maxFreq++;\n        \
    \    }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis solution does not work if there are multiple equal numbers\
    \ in the array. For example, search([1, 1, 2, 3]) returns 1 instead of 2.\n<|/\
    \ c |>\n<| c |>\nI believe this solution does work. Try it out yourself. It does\
    \ return 2 for the example you gave.\n<|/ c |>\n<| c |>\nIt does work, but only\
    \ because you only have one occurrence of each number. Try search([1, 1, 2, 3])\
    \ which returns 1 instead of 2.\n<|/ c |>\n<| c |>\nI believe it does work. Try\
    \ it out yourself. It does return 2 for the example you gave.\n<|/ c |>\n<| c\
    \ |>\nIt does work, but only because you only have one occurrence of each number.\
    \ Try search([1, 1, 2, 3]) which returns 1 instead of 2.\n<|/ c |>\n<| a |>\n\
    <code>", "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i] > 0)\n        {\n            freq++;\n      \
    \      if(lst[i] > max)\n            {\n                max = lst[i];\n      \
    \      }\n        }\n    }\n    if(freq > max)\n    {\n        return -1;\n  \
    \  }\n    return max;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm |>\n<| c |>\n\
    This is not the right solution. Your code will give the wrong answer if the array\
    \ is sorted in descending order.\n<|/ c |>\n<| c |>\n: I didn't see that requirement\
    \ in the question. Thanks for pointing it out.\n<|/ c |>\n<| a tags=arrays,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\nusing namespace std;",
  "{\n    long max = 0;\n    long freq = 0;\n    for(long i : lst)\n    {\n      \
    \  freq++;\n        if(freq > max)\n        {\n            max = freq;\n     \
    \   }\n    }\n    return max;\n}\n</code>\n<|/ a tags=arrays,algorithm,java |>\n\
    <| c |>\nThis solution doesn't work if there are multiple occurrences of the same\
    \ number. For example, search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]) returns 3L\
    \ instead of 2L.\n<|/ c |>\n<| c |>\nYes, you are right. My solution was based\
    \ on a wrong assumption that there will be only one occurrence of the number.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a tags=arrays,algorithm,java |>\n\
    <code>\npublic static int search(int[] arr) {\n    int max = 0;\n    int freq\
    \ = 0;\n    for (int i = 0; i < arr.length; i++) {\n        freq++;\n        if\
    \ (freq > max) {\n            max = freq;\n        }\n    }\n    for (int i =\
    \ 0; i < arr.length; i++) {\n        if (arr[i] == max) {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This solution doesn't work if there are multiple occurrences of the same number.\
    \ For example, search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]) returns 3L instead\
    \ of 2L.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static int search(int[] arr)\
    \ {\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        freq++;\n        if (freq > max) {\n            max = freq;\n\
    \        }\n    }\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ == max) {\n            return i;\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a tags=arrays,algorithm,java |>\n<| a tags=arrays,algorithm,java |>\n<code>\n\
    public static int search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n \
    \   for (int i = 0; i < arr.length; i++) {\n        freq++;\n        if (freq\
    \ > max) {\n            max = freq;\n        }\n    }\n    for (int i = 0; i <\
    \ arr.length; i++) {\n        if (arr[i] == max) {\n            return i;\n  \
    \      }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\npublic static int search(int[] arr) {\n    int max = 0;\n    int\
    \ freq = 0;\n    for (int i = 0; i < arr.length; i++) {\n        freq++;\n   \
    \     if (freq > max) {\n            max = freq;\n        }\n    }\n", "{\n  \
    \  long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size();\
    \ ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] == maxVal)\n            {\n                maxFreq += lst[i];\n\
    \            }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis is not the correct solution. Your solution returns -1 if the\
    \ array is empty. Your solution returns -1 if the array contains only negative\
    \ numbers. Your solution returns -1 if the array contains only positive numbers.\
    \ Your solution returns -1 if the array contains only zeroes. Your solution returns\
    \ -1 if the array contains only negative numbers and zeroes. Your solution returns\
    \ -1 if the array contains only positive numbers and zeroes. Your solution returns\
    \ -1 if the array contains only negative numbers and positive numbers. Your solution\
    \ returns -1 if the array contains only negative numbers and negative numbers.\
    \ Your solution returns -1 if the array contains only positive numbers and negative\
    \ numbers. Your solution returns -1 if the array contains only negative numbers\
    \ and positive numbers and zeroes. Your solution returns -1 if the array contains\
    \ only positive numbers and positive numbers and zeroes. Your solution returns\
    \ -1 if the array contains only negative numbers and negative numbers and zeroes.\
    \ Your solution returns -1 if the array contains only positive numbers and negative\
    \ numbers and zeroes. Your solution returns -1 if the array contains only negative\
    \ numbers and positive numbers and positive numbers and zeroes. Your solution\
    \ returns -1 if the array contains only positive numbers and positive numbers\
    \ and positive numbers and zeroes. Your solution returns -1 if the array contains\
    \ only negative numbers and negative numbers and negative numbers and zeroes.\
    \ Your solution returns -1 if the array contains only positive numbers and positive\
    \ numbers and negative numbers and positive numbers and zeroes. Your solution\
    \ returns -1 if the array contains only negative numbers and negative numbers\
    \ and positive numbers and positive numbers and zeroes. Your solution returns\
    \ -1 if the array contains only positive numbers and positive numbers and positive\
    \ numbers and negative numbers and positive numbers and zeroes. Your solution\
    \ returns -1 if the array contains only negative numbers and negative numbers\
    \ and negative numbers and positive numbers and positive numbers and positive\
    \ numbers and zeroes. Your solution returns -1 if the array contains only positive\
    \ numbers and positive numbers and positive numbers and positive numbers and negative\
    \ numbers and positive numbers and negative numbers and zeroes. Your solution\
    \ returns -1 if the array contains only negative numbers and negative numbers\
    \ and negative numbers and negative numbers and positive numbers and positive\
    \ numbers and positive numbers and ", "{\n    long maxVal = lst[0];\n    long\
    \ maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n    {\n       \
    \ if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    if(maxFreq >= lst[maxFreq])\n        return maxVal;\n\
    \    else\n        return -1;\n}\n</code>\n<|/ a tags=c++,arrays |>\n<| a tags=c++,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace std;", "{\n\
    \    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm |>\n<| c |>\nThis is not\
    \ the best solution. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n\
    <| c |>\nI agree with you, I have added a solution that is more efficient and\
    \ more readable\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long maxVal =\
    \ lst[0];\n    long maxCount = 0;\n    for(int i = 1; i < lst.size(); i++)\n \
    \   {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a tags=arrays,algorithm,c++ |>\n<| a tags=arrays,algorithm,c++ |>\n<code>\n\
    #include <iostream>\n#include <vector>\nusing namespace std;", "{\n    long max\
    \ = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n \
    \       freq += lst[i];\n        if(freq > max)\n        {\n            max =\
    \ freq;\n        }\n    }\n    return max;\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| a tags=c#,arrays |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   long maxVal = lst[0];\n    long freq = lst[0];\n    for(int i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            freq = lst[i];\n        }\n    }\n    if(freq >= lst[0])\n      \
    \  return maxVal;\n    else\n        return -1;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays\
    \ |>\n<| a tags=c++,algorithm,arrays |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a tags=algorithm,arrays,c++ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long maxVal\
    \ = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); ++i)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] > maxFreq)\n            {\n                maxVal = lst[i];\n  \
    \              maxFreq = lst[i];\n            }\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic int search(int[]\
    \ arr) {\n    int maxVal = arr[0];\n    int maxFreq = arr[0];\n    for (int i\
    \ = 1; i < arr.length; i++) {\n        if (arr[i] > maxVal) {\n            maxVal\
    \ = arr[i];\n            maxFreq = arr[i];\n        } else if (arr[i] > maxFreq)\
    \ {\n            maxVal = arr[i];\n            maxFreq = arr[i];\n        }\n\
    \    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 tags=arrays,java |>\n<|\
    \ a |>\n<code>\npublic class SearchingArray {", "{\n    long max = 0;\n    long\
    \ freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > 0)\n        {\n            freq++;\n            if(max < lst[i])\n       \
    \         max = lst[i];\n        }\n    }\n    return (freq > max) ? -1 : max;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try search([1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ class Solution {\n    public int search(int[] nums) {\n        int max = 0;\n\
    \        int freq = 0;\n        for(int i = 0; i < nums.length; i++) {\n     \
    \       if(nums[i] > 0)\n                freq++;\n            if(max < nums[i])\n\
    \                max = nums[i];\n        }\n        return (freq > max) ? -1 :\
    \ max;\n    }\n}\n</code>\n<|/ a tags=arrays,java |>\n<| c |>\nThis doesn't work.\
    \ Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\n\
    It does work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\npublic class Solution {\n    public int search(int[]\
    \ nums) {\n        int max", "{\n    long maxVal = lst[0];\n    long maxFreq =\
    \ lst[0];\n    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq = i;\n\
    \        }\n    }\n    return maxVal;\n}", "{\n    long maxVal = lst[0];\n   \
    \ long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); ++i)\n    {\n  \
    \      if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n        \
    \    maxFreq = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c++,arrays\
    \ |>\n<| c |>\nThis code doesn't work if you input a list with duplicates.\n<|/\
    \ c |>\n<| c |>\nIt does work if you input a list with duplicates. Try it yourself.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I even added a test case where it\
    \ fails.\n<|/ c |>\n<| c |>\nI tested it and it works. I even added a test case\
    \ where it fails.\n<|/ c |>\n<| c |>\nI tested it and it works. I even added a\
    \ test case where it fails.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>", "{\n    long maxVal = lst[0];\n    long\
    \ maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n\
    \        }\n        else\n        {\n            if(lst[i] == maxVal)\n      \
    \      {\n                maxFreq++;\n            }\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThis solution\
    \ doesn't work for negative numbers. For example, if `lst = [-4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4]`, then `maxVal` will be `-4` and `maxFreq` will be `1`.\n<|/\
    \ c |>\n<| c |>\nThe question states that all integers are positive.\n<|/ c |>\n\
    <| c |>\nYes, but your solution doesn't work for negative numbers. For example,\
    \ if `lst = [-4, -4, -4, -4, -4, -4, -4, -4, -4]`, then `maxVal` will be `-4`\
    \ and `maxFreq` will be `1`.\n<|/ c |>\n<| c |>\nI see what you mean. I'll update\
    \ my answer.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <vector>\n\
    using namespace std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n    \
    \    }\n        else\n        {\n            if(lst[i] == maxVal)\n          \
    \  {\n                maxFreq++;\n            }\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I edited the code above to reflect your comment. Thanks for pointing that out.\n\
    <|/ c |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])\n<|/ c |>\n<| c |>\nI tested it and it works. I edited the code above\
    \ to reflect your comment. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n\
    This doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n\
    <| a tags=arrays,c++,algorithm |>\n<code>\n#include <iostream>\n#include <vector>\n\
    using namespace std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n    \
    \    }\n        else if(lst[i] == maxVal)\n        {\n            maxFreq++;\n\
    \        }\n    }\n    return maxVal;\n}", "{\n    long maxVal = lst[0];\n   \
    \ long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n    {\n   \
    \     if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n         \
    \   maxFreq = lst[i];\n        }\n        else\n        {\n            if(lst[i]\
    \ == maxVal)\n            {\n                maxFreq++;\n            }\n     \
    \   }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(max\
    \ < lst[i])\n                max = lst[i];\n        }\n    }\n    if(freq > 0)\n\
    \        return max;\n    else\n        return -1;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])\n<|/ c |>\n<| c |>\nIt does work. Try it yourself. It returns 3L. Are you\
    \ sure you tried it correctly?\n<|/ c |>\n<| c |>\nYes, I tested it myself. It\
    \ returns 3L. Try it yourself. It returns 3L. Are you sure you tried it correctly?\n\
    <|/ c |>\n<| c |>\nYes, I tested it myself. It returns 3L. Try it yourself. It\
    \ returns 3L. Are you sure you tried it correctly?\n<|/ c |>\n<| c |>\nYes, I\
    \ tested it myself. It returns 3L. Try it yourself. It returns 3L. Are you sure\
    \ you tried it correctly?\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\nusing namespace std;", "{\n    long maxVal = lst[0];\n    long maxFreq\
    \ = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n\
    \        }\n        else\n        {\n            if(lst[i] == maxVal)\n      \
    \      {\n                maxFreq++;\n            }\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;", "{\n    long maxVal = lst[0];\n    long\
    \ maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); ++i)\n    {\n       \
    \ if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq\
    \ = lst[i];\n        }\n        else\n        {\n            if(lst[i] == maxVal)\n\
    \            {\n                maxFreq += lst[i];\n            }\n        }\n\
    \    }\n    return maxFreq > maxVal ? maxVal : -1;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c++,algorithm |>\n<code>\n#include <bits/stdc++.h>\nusing namespace\
    \ std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int\
    \ i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n    \
    \    else\n        {\n            if(lst[i] == maxVal)\n            {\n      \
    \          maxFreq += lst[i];\n            }\n        }\n    }\n    return maxVal\
    \ > 0 ? maxVal : -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    public static int search(int[] arr) {\n    int maxVal = arr[0];\n    int maxFreq\
    \ = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] >\
    \ maxVal) {\n            maxVal = arr[i];\n            maxFreq = arr[i];\n   \
    \     } else {\n            if (arr[i] == maxVal) {\n                maxFreq +=\
    \ arr[i];\n            }\n        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n\
    }\n</code>\n<|/ a tags=arrays,java |>\n<| a dscore=0 |>\n<code>\npublic class\
    \ Solution {\n    public int search(int[] nums) {\n        int maxVal = nums[0];\n\
    \        int maxFreq = nums[0];\n        for (int i = 1; i < nums.length; i++)\
    \ {\n            if (nums[i] > maxVal) {\n                maxVal = nums[i];\n\
    \                maxFreq = nums[i];\n            } else {\n                if\
    \ (nums[i] == maxVal) {\n                    maxFreq += nums[i];\n           \
    \     }\n            }\n        }\n        return maxVal > 0 ? maxVal : -1;\n\
    \    }\n}\n</code>\n<|/ a tags=arrays,java |>\n<| a dscore=0 |>\n<code>\npublic\
    \ class Solution {\n    public int search(int[] nums) {\n        int maxVal =\
    \ nums[0];\n        int maxFreq = nums[0];\n        for (int i = 1; i < nums.length;\
    \ i++) {\n            if (nums[i] > maxVal) {\n                maxVal = nums[i];\n\
    \                maxFreq = nums[i];\n            } else {\n                if\
    \ (nums[i] == maxVal) {\n                    maxFreq += nums[i];\n           \
    \     }\n            }\n        }\n        return maxVal > 0 ? maxVal : -1;\n\
    \    }\n}\n</code>\n<|/ a tags=arrays,java |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a tags=arrays,java\
    \ |>\n<code>\npublic class Solution {\n    public int search(int[] nums) {\n \
    \       int maxVal = nums[0];\n        int maxFreq = nums[0];\n        for (int\
    \ i = 1; i < nums.length; i++) {\n            if (nums[i] > ", "{\n    long maxVal\
    \ = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); ++i)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return maxVal;\n}", "{\n    long\
    \ maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] == maxVal)\n            {\n                maxFreq++;\n        \
    \    }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=arrays,algorithm,java\
    \ |>\n<| c |>\nThis is not the most efficient solution. `O(n)` solution is possible\
    \ but `O(n)` space complexity is required.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ My solution was based on this assumption that input array is sorted.\n<|/ c\
    \ |>\n<| a tags=arrays,algorithm,java |>\n<code>\npublic int search(int[] arr)\
    \ {\n    int max = 0;\n    int maxCount = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] == max) {\n            maxCount++;\n        }\n \
    \       if (maxCount > arr[i]) {\n            max = arr[i];\n            maxCount\
    \ = 1;\n        }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>\npublic int search(int[] arr) {\n    int max = 0;\n    int\
    \ maxCount = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ == max) {\n            maxCount++;\n        }\n        if (maxCount > arr[i])\
    \ {\n            max = arr[i];\n            maxCount = 1;\n        }\n    }\n\
    \    return max;\n}\n</code>\n<|/ a tags=arrays,algorithm,java |>\n<| c |>\nPlease\
    \ add some explanation to your answer such that others can learn from it\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\npublic int search(int[] arr) {\n    int max\
    \ = 0;\n    int maxCount = 0;\n    for (int i = 0; i < arr.length; i++) {\n  \
    \      if (arr[i] == max) {\n            maxCount++;\n        }\n        if (maxCount\
    \ > arr[i]) {\n            max = arr[i];\n            maxCount = 1;\n        }\n\
    \    }\n    return max;\n}\n</code>\n<|/ a tags=arrays,algorithm,java |>\n<| c\
    \ |>\nPlease add some explanation to your answer such that others can learn from\
    \ it\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int search(int[] arr) {\n   \
    \ int max = 0;\n    int maxCount = 0;\n    for (int i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] == max) {\n            maxCount++;\n        }\n      \
    \  if (maxCount > arr[i]) {\n            ", "{\n    long maxVal = lst[0];\n  \
    \  long maxCount = 0;\n    for(long i = 1; i < lst.size(); ++i)\n    {\n     \
    \   if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n           \
    \ maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n        {\n   \
    \         maxCount++;\n        }\n    }\n    return maxVal == 0 ? -1 : maxVal;\n\
    }\n</code>\n<|/ a tags=arrays,algorithm,c++ |>\n<| c |>\nThis doesn't work if\
    \ the array is empty or contains only negative numbers. In that case it returns\
    \ `-1` instead of `0`.\n<|/ c |>\n<| c |>\nThis doesn't work if the array is empty\
    \ or contains only negative numbers. In that case it returns `-1` instead of `0`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the array is empty or contains only negative\
    \ numbers. In that case it returns `-1` instead of `0`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if the array is empty or contains only negative numbers. In that\
    \ case it returns `-1` instead of `0`.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ the array is empty or contains only negative numbers. In that case it returns\
    \ `-1` instead of `0`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(long i = 1; i < lst.size(); i++) \n    {\n        if(lst[i] > maxVal)\
    \ \n        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n \
    \       }\n        else\n        {\n            if(lst[i] == maxVal)\n       \
    \     {\n                maxFreq++;\n            }\n        }\n    }\n    return\
    \ maxVal > 0 ? maxVal : -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long maxVal = lst[0];\n    long maxCount = 1;\n   \
    \ for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n  \
    \      {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n    }\n    if(maxCount == lst.size())\n    {\n        return maxVal;\n\
    \    }\n    return -1;\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution has O(n^2)\
    \ complexity. How about O(n)?\n<|/ c |>\n<| c |>\nThis solution has O(n) complexity.\
    \ How about O(n)?\n<|/ c |>\n<| c |>\nThis solution has O(n) complexity. How about\
    \ O(n)?\n<|/ c |>\n<| c |>\nThis solution has O(n) complexity. How about O(n)?\n\
    <|/ c |>\n<| c |>\nThis solution has O(n) complexity. How about O(n)?\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\npublic static int search(int[] arr, int target) {\n\
    \    int max = 0;\n    int count = 0;\n    for (int i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] == target) {\n            count++;\n            if (count\
    \ > max) {\n                max = count;\n            }\n        }\n    }\n  \
    \  return max;\n}\n</code>\n<|/ a tags=algorithm,arrays,java |>\n<| c |>\nThis\
    \ solution has O(n) complexity. How about O(n)?\n<|/ c |>\n<| c |>\nThis solution\
    \ has O(n) complexity. How about O(n)?\n<|/ c |>\n<| c |>\nThis solution has O(n)\
    \ complexity. How about O(n)?\n<|/ c |>\n<| c |>\nThis solution has O(n) complexity.\
    \ How about O(n)?\n<|/ c |>\n<| c |>\nThis solution has O(n) complexity. How about\
    \ O(n)?\n<|/ c |>\n<| a tags=algorithm,arrays,java |>\n<code>\npublic static int\
    \ search(int[] arr, int target) {\n    int max = 0;\n    int count = 0;\n    for\
    \ (int i = 0; i < arr.length; i++) {\n        if (arr[i] == target) {\n      \
    \      count++;\n            if (count > max) {\n                max = count;\n\
    \            }\n        }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis solution has O(n) ", "{\n    long max = 0;\n    long freq\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            freq++;\n            max = lst[i] > max ? lst[i] : max;\n\
    \        }\n    }\n    return freq > max ? -1 : max;\n}", "{\n    long maxVal\
    \ = lst[0];\n    long maxCount = 0;\n    for(int i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a tags=c++,arrays |>\n<| c |>\nThis doesn't work if the array is empty. `maxVal`\
    \ will be set to `lst[0]` and the loop will never execute.\n<|/ c |>\n<| c |>\n\
    Yes, I realized that after I posted it. I fixed it now.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n   \
    \ for(long i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n \
    \       {\n            maxVal = lst[i];\n            maxFreq = i;\n        }\n\
    \    }\n    return maxVal;\n}", "{\n    long maxVal = lst[0];\n    long maxCount\
    \ = 0;\n    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else\n        {\n            maxCount++;\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a tags=c++,arrays |>\n<| a tags=c++,arrays |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long maxVal = lst[0];\n  \
    \  long maxCount = 0;\n    for(int i = 1; i < lst.size(); i++)\n    {\n      \
    \  if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n            maxCount\
    \ = 1;\n        }\n        else\n        {\n            maxCount++;\n        }\n\
    \    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work if there are multiple equal numbers in the array. For example, search([1L,\
    \ 1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]) returns 3L instead of 2L.\n<|/ c |>\n<|\
    \ c |>\nI edited my answer to include a solution that works with multiple equal\
    \ numbers in the array.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long maxVal\
    \ = lst[0];\n    long maxCount = 0;\n    for(int i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.Collections;\nimport java.util.List;", "{\n    long maxVal = lst[0];\n\
    \    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); ++i)\n    {\n\
    \        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n      \
    \      maxFreq = i;\n        }\n    }\n    return maxFreq;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L,\
    \ 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try it yourself. It returns 3L.\
    \ Try it again with [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]\n<|/ c |>\n<| c |>\n\
    It returns 3L for me too. Try it again with [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]\n\
    <|/ c |>\n<| c |>\nIt returns 3L for me too. Try it again with [1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L]\n<|/ c |>\n<| c |>\nIt returns 3L for me too. Try it again\
    \ with [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;",
  "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(max\
    \ < lst[i])\n            {\n                max = lst[i];\n            }\n   \
    \     }\n    }\n    if(freq > max)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,arrays |>\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing\
    \ System.Threading.Tasks;", "{\n    long maxVal = lst[0];\n    long maxFreq =\
    \ lst[0];\n    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] >\
    \ maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n\
    \        }\n        else\n        {\n            if(lst[i] == maxVal)\n      \
    \      {\n                maxFreq++;\n            }\n        }\n    }\n    return\
    \ maxVal > 0 ? maxVal : -1;\n}\n</code>\n<|/ a tags=c++,arrays,algorithm |>\n\
    <| c |>\nThis is not the correct solution. Your solution will return -1 for [5,\
    \ 5]\n<|/ c |>\n<| c |>\nThis is not the correct solution. Your solution will\
    \ return -1 for [5, 5]\n<|/ c |>\n<| c |>\nThis is not the correct solution. Your\
    \ solution will return -1 for [5, 5]\n<|/ c |>\n<| c |>\nThis is not the correct\
    \ solution. Your solution will return -1 for [5, 5]\n<|/ c |>\n<| c |>\nThis is\
    \ not the correct solution. Your solution will return -1 for [5, 5]\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>", "{\n    long maxVal = lst[0];\n    long maxCount =\
    \ 1;\n    for(long i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n        else\n        {\n            if(maxCount > lst[i])\n          \
    \  {\n                return -1;\n            }\n            else\n          \
    \  {\n                maxVal = lst[i];\n                maxCount = 1;\n      \
    \      }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays\
    \ |>\n<| a tags=algorithm,c++,arrays |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long max = 0;\n\
    \    long freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > 0)\n        {\n            freq++;\n            if(max < lst[i])\n       \
    \         max = lst[i];\n        }\n    }\n    if(freq > 0)\n        return max;\n\
    \    else\n        return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\n\
    I see what you mean. I'll fix it in a minute.\n<|/ c |>\n<| c |>\nI fixed it now.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ int search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n    for (int i\
    \ = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            freq++;\n\
    \            if (max < arr[i]) {\n                max = arr[i];\n            }\n\
    \        }\n    }\n    if (freq > 0) {\n        return max;\n    } else {\n  \
    \      return -1;\n    }\n}\n</code>\n<|/ a tags=arrays,java |>\n<| a tags=arrays,java\
    \ |>\n<code>\npublic static int search(int[] arr) {\n    int max = 0;\n    int\
    \ freq = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >\
    \ 0) {\n            freq++;\n            if (max < arr[i]) {\n               \
    \ max = arr[i];\n            }\n        }\n    }\n    if (freq > 0) {\n      \
    \  return max;\n    } else {\n        return -1;\n    }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static int search(int[] arr) {\n    int\
    \ max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length; i++) {\n  \
    \      if (arr[i] > 0) {\n            freq++;\n            if (max < arr[i]) {\n\
    \                max = arr[i];\n            }\n        }\n    }\n    if (freq\
    \ > 0) {\n        return max;\n    } else {\n        return -1;\n    }\n}\n</code>\n\
    <|/ a tags=arrays,java |>\n<| a tags=arrays,java |>\n<code>\npublic static int\
    \ search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n    for (int i = 0;\
    \ i < arr.length; i++) {\n        if (arr[i] > 0) {\n            freq++;\n   \
    \         if (max < arr[i]) {\n                max = arr[i];\n            }\n\
    \        }\n    }\n    if (freq > 0) {\n        return max;\n    } else {\n  \
    \      return -1;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,java\
    \ |>\n<code>\npublic ", "{\n    long maxVal = lst[0];\n    long maxCount = 0;\n\
    \    for(long i = 1; i < lst.size(); i++){\n        if(lst[i] > maxVal){\n   \
    \         maxVal = lst[i];\n            maxCount = 1;\n        }\n        else\
    \ if(lst[i] == maxVal){\n            maxCount++;\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>",
  "{\n    long maxVal = lst[0];\n    long maxCount = 1;\n    for(long i = 1; i < lst.size();\
    \ ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal;\n}", "{\n\
    \    long maxVal = lst[0];\n    long maxCount = 0;\n    for(long i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nThis doesn't work. Try search([1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nThis doesn't work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nThis doesn't work. Try\
    \ search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;",
  "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n        else\n\
    \        {\n            if(lst[i] == maxVal)\n            {\n                maxFreq++;\n\
    \            }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=arrays,algorithm,c++\
    \ |>\n<| c |>\nThis code does not work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L,\
    \ 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L,\
    \ 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long\
    \ max = 0;\n    long freq = 0;\n    for(long i : lst)\n    {\n        freq++;\n\
    \        if(freq > max)\n        {\n            max = freq;\n        }\n     \
    \   if(i == 0)\n        {\n            freq--;\n        }\n    }\n    return max;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not the correct solution. Try\
    \ `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n<| c |>\nI believe\
    \ this solution is correct. Can you please explain why you think it isn't?\n<|/\
    \ c |>\n<| c |>\nThe OP wants to find the greatest number that is greater than\
    \ zero. Your solution finds the greatest number that is greater than or equal\
    \ to zero. Try `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n<| c\
    \ |>\nI believe this solution is correct. Can you please explain why you think\
    \ it isn't?\n<|/ c |>\n<| c |>\nThe OP wants to find the greatest number that\
    \ is greater than zero. Your solution finds the greatest number that is greater\
    \ than or equal to zero. Try `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\npublic int search(int[] arr) {\n    int max\
    \ = 0;\n    int freq = 0;\n    for(int i : arr) {\n        freq++;\n        if(freq\
    \ > max) {\n            max = freq;\n        }\n        if(i == 0) {\n       \
    \     freq--;\n        }\n    }\n    return max;\n}\n</code>\n<|/ a tags=arrays,java\
    \ |>\n<| c |>\nPlease add some explanation to your answer. Code-only answers are\
    \ discouraged on Stack Overflow.\n<|/ c |>\n<| a |>\n<code>\npublic int search(int[]\
    \ arr) {\n    int max = 0;\n    int freq = 0;\n    for(int i : arr) {\n      \
    \  freq++;\n        if(freq > max) {\n            max = freq;\n        }\n   \
    \     if(i == 0) {\n            freq--;\n        }\n    }\n    return max;\n}\n\
    </code>\n<|/ a dscore=0 tags=arrays,java |>\n<| c |>\nPlease add some explanation\
    \ to your answer. Code-only answers are disco", "{\n    long max = 0;\n    long\
    \ freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > 0)\n        {\n            freq++;\n            if(lst[i] > max)\n       \
    \     {\n                max = lst[i];\n            }\n        }\n    }\n    if(freq\
    \ > max)\n    {\n        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a\
    \ tags=algorithm,arrays,c++ |>\n<| a |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] == maxVal)\n            {\n                maxFreq++;\n        \
    \    }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=c++,arrays |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\
    \    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(lst[i]\
    \ > max)\n            {\n                max = lst[i];\n            }\n      \
    \  }\n    }\n    if(freq > max)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++,arrays |>\n<code>\n\
    #include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int\
    \ i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n    \
    \    else\n        {\n            if(lst[i] == maxVal)\n            {\n      \
    \          maxFreq++;\n            }\n        }\n    }\n    return maxVal;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static int search(int[]\
    \ arr) {\n    int maxVal = arr[0];\n    int maxFreq = arr[0];\n    for (int i\
    \ = 1; i < arr.length; i++) {\n        if (arr[i] > maxVal) {\n            maxVal\
    \ = arr[i];\n            maxFreq = arr[i];\n        } else {\n            if (arr[i]\
    \ == maxVal) {\n                maxFreq++;\n            }\n        }\n    }\n\
    \    return maxVal;\n}\n</code>\n<|/ a tags=algorithm,arrays,java |>\n<| a |>\n\
    <code>\npublic static int search(int[] arr) {\n    int maxVal = arr[0];\n    int\
    \ maxFreq = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i]\
    \ > maxVal) {\n            maxVal = arr[i];\n            maxFreq = arr[i];\n \
    \       } else {\n            if (arr[i] == maxVal) {\n                maxFreq++;\n\
    \            }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=algorithm,arrays,java\
    \ dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others\
    \ can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static int search(int[]\
    \ arr) {\n    int maxVal = arr[0];\n    int maxFreq = arr[0];\n    for (int i\
    \ = 1; i < arr.length; i++) {\n        if (arr[i] > maxVal) {\n            maxVal\
    \ = arr[i];\n            maxFreq = arr[i];\n        } else {\n            if (arr[i]\
    \ == maxVal) {\n                maxFreq++;\n            }\n        }\n    }\n\
    \    return maxVal;\n}\n</code>\n<|/ a tags=algorithm,arrays,java |>\n<| a tags=algorithm,arrays,java\
    \ |>\n<code>\npublic static int search(int[] arr) {\n    int maxVal = arr[0];\n\
    \    int maxFreq = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n     \
    \   if (arr[i] > maxVal) {\n            maxVal = arr[i];\n            maxFreq\
    \ = arr[i];\n        } else {\n            if (arr[i] == maxVal) {\n         \
    \       maxFreq++;\n            }\n        }\n    }\n    return maxVal;\n}\n</code>\n",
  "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ maxFreq > maxVal ? maxVal : -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,algorithm,java\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = {4, 1,\
    \ 3, 2, 2, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,\
    \ 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,\
    \ 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,\
    \ 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,\
    \ 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,\
    \ 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,\
    \ 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,\
    \ 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,\
    \ 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,\
    \ 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,\
    \ 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,\
    \ 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,\
    \ 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,\
    \ 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,\
    \ 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,\
    \ 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, ", "{\n    long max = 0;\n \
    \   long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i]\
    \ > 0)\n        {\n            freq++;\n            if(lst[i] > max)\n       \
    \     {\n                max = lst[i];\n            }\n        }\n    }\n    if(freq\
    \ > max)\n    {\n        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=c#,arrays |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(max\
    \ < lst[i])\n            {\n                max = lst[i];\n            }\n   \
    \     }\n    }\n    if(freq > max)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,arrays,c++ |>\n<code>\n\
    #include <bits/stdc++.h>\nusing namespace std;", "{\n    long maxVal = lst[0];\n\
    \    long maxCount = 0;\n    for(int i = 1; i < lst.size(); i++)\n    {\n    \
    \    if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n          \
    \  maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n        {\n  \
    \          maxCount++;\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't work. Try `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])`\n<|/ c |>\n<| c |>\nI tested it and it works. I edited my answer to include\
    \ a test case.\n<|/ c |>\n<| c |>\nI tested it and it works. I edited my answer\
    \ to include a test case.\n<|/ c |>\n<| c |>\nI tested it and it works. I edited\
    \ my answer to include a test case.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I edited my answer to include a test case.\n<|/ c |>\n<| a tags=arrays,algorithm,c++\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace std;", "{\n\
    \    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n        else\n\
    \        {\n            if(lst[i] == maxVal)\n            {\n                maxFreq++;\n\
    \            }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c++,arrays\
    \ |>\n<| c |>\nThis doesn't work if there are two or more equal values.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if there are two or more equal values.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if there are two or more equal values.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if there are two or more equal values.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if there are two or more equal values.\n<|/ c\
    \ |>\n<| a dscore=3 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\
    \    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.length; i++){\n        if(lst[i] > maxVal){\n            maxVal = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return maxFreq;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i\
    \ < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n        else\n\
    \        {\n            if(lst[i] == maxVal)\n            {\n                maxFreq++;\n\
    \            }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=arrays,algorithm,c++,search\
    \ |>\n<| c |>\nThis solution does not work if there are multiple equal elements\
    \ in the array. For example, search([1,2,2,3,3,4,4,4,5]) returns 5 instead of\
    \ 4.\n<|/ c |>\n<| c |>\nI believe this solution does work. Try it out. `search([1,2,2,3,3,4,4,4,5])`\
    \ returns `4`\n<|/ c |>\n<| c |>\nYes, it does work. Thank you! I didn't realize\
    \ that I had to compare the frequency to the element itself. I thought I had to\
    \ compare it to the element and frequency of the element in the previous position.\
    \ Thanks again!\n<|/ c |>\n<| c |>\nThis solution does not work if there are multiple\
    \ equal elements in the array. For example, search([1,2,2,3,3,4,4,4,5]) returns\
    \ 5 instead of 4.\n<|/ c |>\n<| a dscore=0 |>\n<code>"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
