name: HumanEval_111_histogram
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprv81oog9.d(280): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprv81oog9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4bv8f3sk.d(280): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4bv8f3sk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8cnzehao.d(280): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8cnzehao.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, function(letter) {\n        \n     \
    \   if(!isNull(result)) {\n            result[letter] = result[letter] + 1L;\n\
    \        } else {\n            result[letter] = 1L;\n        }\n    });\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq0njif88.d(26): Error: basic type expected, not `function`\\\
    n/tmp/tmpq0njif88.d(26): Error: no identifier for declarator `_error_ function(letter)`\\\
    n/tmp/tmpq0njif88.d(26): Error: found `{` when expecting `;`\\n/tmp/tmpq0njif88.d(28):\
    \ Error: expression expected, not `if`\\n/tmp/tmpq0njif88.d(28): Error: found\
    \ `{` when expecting `)`\\n/tmp/tmpq0njif88.d(30): Error: declaration expected,\
    \ not `else`\\n/tmp/tmpq0njif88.d(32): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq0njif88.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        long count\
    \ = count(test, char);\n        \n        if(result == null) {\n            result\
    \ = make!(char: char, count: count);\n        } else {\n            result[char]\
    \ = count;\n        }\n    });\n    \n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\"\
    );\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplj3u6a43.d(26): Error: no identifier for declarator `char`\\\
    n/tmp/tmplj3u6a43.d(26): Error: found `=>` when expecting `;`\\n/tmp/tmplj3u6a43.d(28):\
    \ Error: found `)` when expecting `.` following char\\n/tmp/tmplj3u6a43.d(28):\
    \ Error: found `;` when expecting identifier following `char`.\\n/tmp/tmplj3u6a43.d(30):\
    \ Error: found `if` when expecting `,`\\n/tmp/tmplj3u6a43.d(30): Error: found\
    \ `==` when expecting `)`\\n/tmp/tmplj3u6a43.d(30): Error: missing `{ ... }` for\
    \ function literal\\n/tmp/tmplj3u6a43.d(30): Error: found `null` when expecting\
    \ `,`\\n/tmp/tmplj3u6a43.d(30): Error: semicolon expected, not `{`\\n/tmp/tmplj3u6a43.d(31):\
    \ Error: found `:` when expecting `.` following char\\n/tmp/tmplj3u6a43.d(31):\
    \ Error: found `char` when expecting identifier following `char`.\\n/tmp/tmplj3u6a43.d(31):\
    \ Error: found `:` when expecting `)` following template argument list\\n/tmp/tmplj3u6a43.d(31):\
    \ Error: found `count` when expecting `;` following statement\\n/tmp/tmplj3u6a43.d(31):\
    \ Error: found `)` instead of statement\\n/tmp/tmplj3u6a43.d(32): Error: found\
    \ `else` without a corresponding `if`, `version` or `debug` statement\\n/tmp/tmplj3u6a43.d(35):\
    \ Error: found `}` when expecting `)`\\n/tmp/tmplj3u6a43.d(35): Error: found `)`\
    \ instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmplj3u6a43.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char c : char[])\n    {\n        Nullable!(long[string])\
    \ subResult = histogram(c);\n        \n        if(subResult.hasValue)\n      \
    \  {\n            Nullable!(long[string]) subResultValue = subResult.value;\n\
    \            \n            foreach(subResultValue, string s : string)\n      \
    \      {\n                Nullable!(long[string]) subSubResult = histogram(s);\n\
    \                \n                if(subSubResult.hasValue)\n               \
    \ {\n                    Nullable!(long[string]) subSubResultValue = subSubResult.value;\n\
    \                    \n                    foreach(subSubResultValue, string s2\
    \ : string)\n                    {\n                        Nullable!(long[string])\
    \ subSubSubResult = histogram(s2);\n                        \n               \
    \         if(subSubSubResult.hasValue)\n                        {\n          \
    \                  Nullable!(long[string]) subSubSubResultValue = subSubSubResult.value;\n\
    \                            \n                            foreach(subSubSubResultValue,\
    \ string s3 : string)\n                            {\n                       \
    \         Nullable!(long[string]) subSubSubSubResult = histogram(s3);\n      \
    \                          \n                                if(subSubSubSubResult.hasValue)\n\
    \                                {\n                                    Nullable!(long[string])\
    \ subSubSubSubResultValue = subSubSubSubResult.value;\n                      \
    \              \n                                    foreach(subSubSubSubResultValue,\
    \ string s4 : string)\n                                    {\n               \
    \                         Nullable!(long[string]) subSubSubSubSubResult = histogram(s4);\n\
    \                                        \n                                  \
    \      if(subSubSubSubSubResult.hasValue)\n                                  \
    \      {\n                                            Nullable!(long[string])\
    \ subSubSubSubSubResultValue = subSubSubSubSubResult.value;\n                \
    \                            \n                                            foreach(subSubSubSubSubResultValue,\
    \ string s5 : string)\n                                            {\n       \
    \                                         Nullable!(long[string]) subSubSubSubSubSubResult\
    \ = histogram(s5);\n                                                \n       \
    \                                         if(subSubSubSubSubSubResult.hasValue)\n\
    \                                                {\n                         \
    \                           Nullable!(long[string]) subSubSubSubSubSubResultValue\
    \ = subSubSubSubSubSubResult.value;\n                                        \
    \            \n                                                    foreach(subSubSubSubSubSubResultValue,\
    \ string s6 : string)\n                                                    {\n\
    \                                                        Nullable!(long[string])\
    \ subSubSubSubSubSubSubResult = histogram(s6);\n                             \
    \                           \n                                               \
    \         if(subSubSubSubSubSubResult.hasValue)\n                            \
    \                            {\n                                             \
    \               Nullable!(long[string]) subSubSubSubSubSubSubResultValue = subSubSubSubSub\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl5mebpyv.d(26): Error: found `:` when expecting `;`\\n/tmp/tmpl5mebpyv.d(26):\
    \ Error: found `[` when expecting `.` following char\\n/tmp/tmpl5mebpyv.d(26):\
    \ Error: found `]` when expecting identifier following `char`.\\n/tmp/tmpl5mebpyv.d(34):\
    \ Error: found `:` when expecting `;`\\n/tmp/tmpl5mebpyv.d(42): Error: found `:`\
    \ when expecting `;`\\n/tmp/tmpl5mebpyv.d(50): Error: found `:` when expecting\
    \ `;`\\n/tmp/tmpl5mebpyv.d(58): Error: found `:` when expecting `;`\\n/tmp/tmpl5mebpyv.d(66):\
    \ Error: found `:` when expecting `;`\\n/tmp/tmpl5mebpyv.d(74): Error: found `:`\
    \ when expecting `;`\\n/tmp/tmpl5mebpyv.d(81): Error: semicolon expected, not\
    \ `unittest`\\n/tmp/tmpl5mebpyv.d(81): Error: found `unittest` instead of statement\\\
    n/tmp/tmpl5mebpyv.d(126): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpl5mebpyv.d(126): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpl5mebpyv.d(126): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpl5mebpyv.d(126):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpl5mebpyv.d(126): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpl5mebpyv.d(126): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpl5mebpyv.d(126): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpl5mebpyv.d(126):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpl5mebpyv.d(126): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl5mebpyv.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    var result\
    \ = ___nullable_dict___;\n    foreach(test, function(char) {\n        var count\
    \ = result[char];\n        if(count == null) {\n            result[char] = 1;\n\
    \        } else {\n            result[char] = count + 1;\n        }\n    });\n\
    \    return result;\n}\n/*\nGiven a string representing a space separated lowercase\
    \ letters, return an associative array\n    of the letter with the most repetition\
    \ and containing the corresponding count.\n    If several letters have the same\
    \ occurrence, return all of them.\n    \n    Example:\n    >>> histogram(\"a b\
    \ c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n    >>> histogram(\"a\
    \ b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"a b c a b\"\
    )\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"b b b b a\")\n   \
    \ [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnxidr35e.d(25): Error: basic type expected, not `function`\\\
    n/tmp/tmpnxidr35e.d(25): Error: no identifier for declarator `_error_ function(char)`\\\
    n/tmp/tmpnxidr35e.d(25): Error: found `{` when expecting `;`\\n/tmp/tmpnxidr35e.d(26):\
    \ Error: found `count` when expecting `)`\\n/tmp/tmpnxidr35e.d(26): Error: found\
    \ `=` instead of statement\\n/tmp/tmpnxidr35e.d(28): Error: found `]` when expecting\
    \ `.` following char\\n/tmp/tmpnxidr35e.d(28): Error: found `=` when expecting\
    \ identifier following `char`.\\n/tmp/tmpnxidr35e.d(28): Error: found `1` when\
    \ expecting `,`\\n/tmp/tmpnxidr35e.d(28): Error: expression expected, not `;`\\\
    n/tmp/tmpnxidr35e.d(29): Error: found `}` when expecting `,`\\n/tmp/tmpnxidr35e.d(29):\
    \ Error: expression expected, not `else`\\n/tmp/tmpnxidr35e.d(29): Error: found\
    \ `{` when expecting `,`\\n/tmp/tmpnxidr35e.d(30): Error: found `]` when expecting\
    \ `.` following char\\n/tmp/tmpnxidr35e.d(30): Error: found `=` when expecting\
    \ identifier following `char`.\\n/tmp/tmpnxidr35e.d(30): Error: found `count`\
    \ when expecting `,`\\n/tmp/tmpnxidr35e.d(30): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpnxidr35e.d(31): Error: expression expected, not `}`\\n/tmp/tmpnxidr35e.d(32):\
    \ Error: found `}` when expecting `,`\\n/tmp/tmpnxidr35e.d(32): Error: expression\
    \ expected, not `)`\\n/tmp/tmpnxidr35e.d(32): Error: found `;` when expecting\
    \ `,`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnxidr35e.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0y4volk5.d(280): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0y4volk5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        long count\
    \ = 1;\n        \n        foreach(test, char => {\n            if(char == char)\
    \ {\n                count++;\n            }\n        });\n        \n        if(result\
    \ == null) {\n            result = __dict_add(result, char, count);\n        }\
    \ else {\n            result = __dict_add(result, char, count);\n        }\n \
    \   });\n    \n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp16lrqnoa.d(26): Error: no identifier for declarator `char`\\\
    n/tmp/tmp16lrqnoa.d(26): Error: found `=>` when expecting `;`\\n/tmp/tmp16lrqnoa.d(30):\
    \ Error: no identifier for declarator `char`\\n/tmp/tmp16lrqnoa.d(30): Error:\
    \ found `=>` when expecting `;`\\n/tmp/tmp16lrqnoa.d(31): Error: found `==` when\
    \ expecting `.` following char\\n/tmp/tmp16lrqnoa.d(31): Error: found `char` when\
    \ expecting identifier following `char`.\\n/tmp/tmp16lrqnoa.d(34): Error: use\
    \ `{ }` for an empty statement, not `;`\\n/tmp/tmp16lrqnoa.d(37): Error: found\
    \ `,` when expecting `.` following char\\n/tmp/tmp16lrqnoa.d(39): Error: found\
    \ `,` when expecting `.` following char\\n/tmp/tmp16lrqnoa.d(41): Error: use `{\
    \ }` for an empty statement, not `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp16lrqnoa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuimqg1z3.d(280): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuimqg1z3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    foreach(char c in test) {\n        Nullable!(long[string])\
    \ sub = histogram(c.toString());\n        if(sub != null)\n            result\
    \ = sub;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmper5hodhr.d(25): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmper5hodhr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        long count\
    \ = count(test, char);\n        \n        if(result == null) {\n            result\
    \ = __dict_add(result, char, count);\n        } else {\n            \n       \
    \     Nullable!(long) max = __dict_max(result);\n            \n            if(count\
    \ > max) {\n                result = __dict_add(result, char, count);\n      \
    \      }\n        }\n    });\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_42acrjd.d(26): Error: no identifier for declarator `char`\\\
    n/tmp/tmp_42acrjd.d(26): Error: found `=>` when expecting `;`\\n/tmp/tmp_42acrjd.d(28):\
    \ Error: found `)` when expecting `.` following char\\n/tmp/tmp_42acrjd.d(28):\
    \ Error: found `;` when expecting identifier following `char`.\\n/tmp/tmp_42acrjd.d(30):\
    \ Error: found `if` when expecting `,`\\n/tmp/tmp_42acrjd.d(30): Error: found\
    \ `==` when expecting `)`\\n/tmp/tmp_42acrjd.d(30): Error: missing `{ ... }` for\
    \ function literal\\n/tmp/tmp_42acrjd.d(30): Error: found `null` when expecting\
    \ `,`\\n/tmp/tmp_42acrjd.d(30): Error: semicolon expected, not `{`\\n/tmp/tmp_42acrjd.d(31):\
    \ Error: found `,` when expecting `.` following char\\n/tmp/tmp_42acrjd.d(32):\
    \ Error: found `else` without a corresponding `if`, `version` or `debug` statement\\\
    n/tmp/tmp_42acrjd.d(37): Error: found `,` when expecting `.` following char\\\
    n/tmp/tmp_42acrjd.d(40): Error: found `}` when expecting `)`\\n/tmp/tmp_42acrjd.d(40):\
    \ Error: found `)` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp_42acrjd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfg8yuo74.d(280): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfg8yuo74.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(char c in test)\n    {\n        Nullable!(long)\
    \ count = get(test, c);\n        \n        if(count == null)\n        {\n    \
    \        count = long.zero;\n        }\n        \n        if(result == null)\n\
    \        {\n            result = count;\n        }\n        else\n        {\n\
    \            result = max(result, count);\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcic41r5o.d(26): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcic41r5o.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    foreach(char c in test) {\n        Nullable!(long) count\
    \ = count(test);\n        Nullable!(long) maxCount = count.max;\n        Nullable!(long)\
    \ maxChar = count.max.key;\n        Nullable!(long) maxCharCount = count.max.value;\n\
    \        Nullable!(long) maxCharCountIndex = count.max.index;\n        Nullable!(long)\
    \ maxCharCountValue = count.max.value;\n        Nullable!(long) maxCharCountIndex\
    \ = count.max.index;\n        Nullable!(long) maxCharCountValue = count.max.value;\n\
    \        Nullable!(long) maxCharCountIndex = count.max.index;\n        Nullable!(long)\
    \ maxCharCountValue = count.max.value;\n        Nullable!(long) maxCharCountIndex\
    \ = count.max.index;\n        Nullable!(long) maxCharCountValue = count.max.value;\n\
    \        Nullable!(long) maxCharCountIndex = count.max.index;\n        Nullable!(long)\
    \ maxCharCountValue = count.max.value;\n        Nullable!(long) maxCharCountIndex\
    \ = count.max.index;\n        Nullable!(long) maxCharCountValue = count.max.value;\n\
    \        Nullable!(long) maxCharCountIndex = count.max.index;\n        Nullable!(long)\
    \ maxCharCountValue = count.max.value;\n        Nullable!(long) maxCharCountIndex\
    \ = count.max.index;\n        Nullable!(long) maxCharCountValue = count.max.value;\n\
    \        Nullable!(long) maxCharCountIndex = count.max.index;\n        Nullable!(long)\
    \ maxCharCountValue = count.max.value;\n        Nullable!(long) maxCharCountIndex\
    \ = count.max.index;\n        Nullable!(long) maxCharCountValue = count.max.value;\n\
    \        Nullable!(long) maxCharCountIndex = count.max.index;\n        Nullable!(long)\
    \ maxCharCountValue = count.max.value;\n        Nullable!(long) maxCharCountIndex\
    \ = count.max.index;\n        Nullable!(long) maxCharCountValue = count.max.value;\n\
    \        Nullable!(long) maxCharCountIndex = count.max.index;\n        Nullable!(long)\
    \ maxCharCountValue = count.max.value;\n        Nullable!(long) maxCharCountIndex\
    \ = count.max.index;\n        Nullable!(long) maxCharCountValue = count.max.value;\n\
    \        Nullable!(long) maxCharCountIndex = count.max.index;\n        Nullable!(long)\
    \ maxCharCountValue = count.max.value;\n        Nullable!(long) maxCharCountIndex\
    \ = count.max.index;\n        Nullable!(long) maxChar\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn454mn41.d(25): Error: found `in` when expecting `;`\\n/tmp/tmpn454mn41.d(61):\
    \ Error: found `maxChar` when expecting `;` following statement\\n/tmp/tmpn454mn41.d(62):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmpn454mn41.d(107): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn454mn41.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    var result\
    \ = new Nullable<long[string]>(null);\n    \n    foreach(char c in test)\n   \
    \ {\n        long count = count(test.split(c));\n        \n        if(result.value\
    \ == null)\n        {\n            result.value = count;\n        }\n        else\n\
    \        {\n            result.value += count;\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvtfkohjk.d(24): Error: found `[` when expecting `.` following\
    \ long\\n/tmp/tmpvtfkohjk.d(24): Error: semicolon expected, not `]`\\n/tmp/tmpvtfkohjk.d(24):\
    \ Error: found `]` instead of statement\\n/tmp/tmpvtfkohjk.d(26): Error: found\
    \ `in` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpvtfkohjk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        long count\
    \ = count(test.split());\n        \n        if(result == null) {\n           \
    \ result = dict();\n        }\n        \n        foreach(result, char => {\n \
    \           result[char] = result.getOrElse(char, 0) + count;\n        });\n \
    \   });\n    \n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_payc1ps.d(26): Error: no identifier for declarator `char`\\\
    n/tmp/tmp_payc1ps.d(26): Error: found `=>` when expecting `;`\\n/tmp/tmp_payc1ps.d(34):\
    \ Error: no identifier for declarator `char`\\n/tmp/tmp_payc1ps.d(34): Error:\
    \ found `=>` when expecting `;`\\n/tmp/tmp_payc1ps.d(35): Error: found `]` when\
    \ expecting `.` following char\\n/tmp/tmp_payc1ps.d(35): Error: found `=` when\
    \ expecting identifier following `char`.\\n/tmp/tmp_payc1ps.d(35): Error: found\
    \ `result` when expecting `,`\\n/tmp/tmp_payc1ps.d(35): Error: found `,` when\
    \ expecting `.` following char\\n/tmp/tmp_payc1ps.d(35): Error: found `0` when\
    \ expecting identifier following `char`.\\n/tmp/tmp_payc1ps.d(35): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmp_payc1ps.d(36): Error: expression expected,\
    \ not `}`\\n/tmp/tmp_payc1ps.d(36): Error: found `)` when expecting `,`\\n/tmp/tmp_payc1ps.d(36):\
    \ Error: expression expected, not `;`\\n/tmp/tmp_payc1ps.d(37): Error: found `}`\
    \ when expecting `,`\\n/tmp/tmp_payc1ps.d(37): Error: expression expected, not\
    \ `)`\\n/tmp/tmp_payc1ps.d(37): Error: found `;` when expecting `,`\\n/tmp/tmp_payc1ps.d(39):\
    \ Error: expression expected, not `return`\\n/tmp/tmp_payc1ps.d(39): Error: found\
    \ `result` when expecting `,`\\n/tmp/tmp_payc1ps.d(39): Error: expression expected,\
    \ not `;`\\n/tmp/tmp_payc1ps.d(40): Error: found `}` when expecting `,`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_payc1ps.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    foreach(char c in test) {\n        Nullable!(long[string])\
    \ sub = histogram(c + test);\n        if (sub != null)\n            result = sub;\n\
    \    }\n    if (result == null)\n        result = ___null_dict___;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpubkihs4j.d(25): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubkihs4j.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp62nyb0nd.d(280): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp62nyb0nd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return an associative array\n    of the\
    \ letter with the most repetition and containing the corresponding count.\n  \
    \  If several letters have the same occurrence, return all of them.\n    \n  \
    \  Example:\n    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        long count\
    \ = count(test);\n        \n        if(result == null || count > result[char])\n\
    \        {\n            result[char] = count;\n        }\n    });\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw4uwmagi.d(26): Error: no identifier for declarator `char`\\\
    n/tmp/tmpw4uwmagi.d(26): Error: found `=>` when expecting `;`\\n/tmp/tmpw4uwmagi.d(30):\
    \ Error: found `]` when expecting `.` following char\\n/tmp/tmpw4uwmagi.d(30):\
    \ Error: found `)` when expecting identifier following `char`.\\n/tmp/tmpw4uwmagi.d(31):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmpw4uwmagi.d(32): Error: found `]`\
    \ when expecting `.` following char\\n/tmp/tmpw4uwmagi.d(32): Error: found `=`\
    \ when expecting identifier following `char`.\\n/tmp/tmpw4uwmagi.d(32): Error:\
    \ found `count` when expecting `,`\\n/tmp/tmpw4uwmagi.d(32): Error: expression\
    \ expected, not `;`\\n/tmp/tmpw4uwmagi.d(33): Error: found `}` when expecting\
    \ `,`\\n/tmp/tmpw4uwmagi.d(34): Error: expression expected, not `}`\\n/tmp/tmpw4uwmagi.d(34):\
    \ Error: found `)` when expecting `,`\\n/tmp/tmpw4uwmagi.d(34): Error: expression\
    \ expected, not `;`\\n/tmp/tmpw4uwmagi.d(36): Error: found `return` when expecting\
    \ `,`\\n/tmp/tmpw4uwmagi.d(36): Error: found `;` when expecting `,`\\n/tmp/tmpw4uwmagi.d(37):\
    \ Error: expression expected, not `}`\\n/tmp/tmpw4uwmagi.d(38): Error: found `unittest`\
    \ when expecting `,`\\n/tmp/tmpw4uwmagi.d(83): Error: found `void` when expecting\
    \ `,`\\n/tmp/tmpw4uwmagi.d(83): Error: found `{` when expecting `,`\\n/tmp/tmpw4uwmagi.d(83):\
    \ Error: expression expected, not `}`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpw4uwmagi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
