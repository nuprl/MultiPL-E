language: d
name: HumanEval_90_next_smallest
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: ab;\n    int: ac;\n    int: ad;\n    int: ae;\n    int:\
    \ af;\n    int: ag;\n    int: ah;\n    int: ai;\n    int: aj;\n    int: ak;\n\
    \    int: al;\n    int: am;\n    int: an;\n    int: ao;\n    int: ap;\n    int:\
    \ aq;\n    int: ar;\n    int: as;\n    int: at;\n    int: au;\n    int: av;\n\
    \    int: aw;\n    int: ax;\n    int: ay;\n    int: az;\n    int: ba;\n    int:\
    \ bb;\n    int: bc;\n    int: bd;\n    int: be;\n    int: bf;\n    int: bg;\n\
    \    int: bh;\n    int: bi;\n    int: bj;\n    int: bk;\n    int: bl;\n    int:\
    \ bm;\n    int: bn;\n    int: bo;\n    int: bp;\n    int: bq;\n    int: br;\n\
    \    int: bs;\n    int: bt;\n    int: bu;\n    int: bv;\n    int: bw;\n    int:\
    \ bx;\n    int: by;\n    int: bz;\n    int: ca;\n    int: cb;\n    int: cc;\n\
    \    int: cd;\n    int: ce;\n    int: cf;\n    int: cg;\n    int: ch;\n    int:\
    \ ci;\n    int: cj;\n    int: ck;\n    int: cl;\n    int: cm;\n    int: cn;\n\
    \    int: co;\n    int: cp;\n    int: cq;\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5p7j0ibp.d(20): Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(20):
    Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp5p7j0ibp.d(21): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(22): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(23): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(24): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(25): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(26): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(27): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(28): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5p7j0ibp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int n = arr.length;\n    if (n < 2)\n      \
    \  return null;\n    int min1 = arr[0];\n    int min2 = arr[1];\n    for (int\
    \ i = 2; i < n; i++)\n    {\n        if (arr[i] < min1)\n        {\n         \
    \   min2 = min1;\n            min1 = arr[i];\n        }\n        else if (arr[i]\
    \ < min2)\n        {\n            min2 = arr[i];\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfudnua7h.d(20): Error: undefined identifier `toArray`\n/tmp/tmpfudnua7h.d(21):
    Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmpfudnua7h.d(23):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpfudnua7h.d(38):
    Error: cannot implicitly convert expression `min2` of type `int` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfudnua7h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    var smallest_value\
    \ = lst[0];\n    \n    for (var i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ < smallest) {\n            smallest = lst[i];\n            smallest_index =\
    \ i;\n            smallest_value = lst[i];\n        }\n    }\n    \n    if (smallest_index\
    \ == lst.size() - 1) {\n        return null;\n    }\n    \n    return smallest;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4t0xh3w_.d(20): Error: undefined identifier `var`\n/tmp/tmp4t0xh3w_.d(21):
    Error: undefined identifier `var`\n/tmp/tmp4t0xh3w_.d(22): Error: undefined identifier
    `var`\n/tmp/tmp4t0xh3w_.d(24): Error: undefined identifier `var`\n/tmp/tmp4t0xh3w_.d(24):
    Error: no property `size` for type `long[]`\n/tmp/tmp4t0xh3w_.d(32): Error: no
    property `size` for type `long[]`\n/tmp/tmp4t0xh3w_.d(33): Error: cannot implicitly
    convert expression `null` of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp4t0xh3w_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  long? smallest = lst[0];\n    long? smallest_next = lst[1];\n    \n    for\
    \ (int i = 2; i < lst.lenght; i++) {\n        if (smallest_next < lst[i]) {\n\
    \            smallest_next = lst[i];\n            smallest = smallest_next;\n\
    \        }\n    }\n    return smallest;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxtkekh41.d(20): Error: no identifier for declarator `long`\n/tmp/tmpxtkekh41.d(20):
    Error: found `?` instead of statement\n/tmp/tmpxtkekh41.d(21): Error: no identifier
    for declarator `long`\n/tmp/tmpxtkekh41.d(21): Error: found `?` instead of statement\n/tmp/tmpxtkekh41.d(31):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtkekh41.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    for(var i = 1; i <\
    \ lst.lenght; i++)\n    {\n        if(smallest>lst[i])\n        {\n          \
    \  smallest = lst[i];\n            smallest_index = i;\n        }\n    }\n   \
    \ return smallest_index>0?lst[smallest_index]:null;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp869jqdxx.d(32): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp869jqdxx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int len = arr.length;\n    int min = 0;\n  \
    \  int max = len - 1;\n    int mid = 0;\n    while(min < max) {\n        mid =\
    \ (min + max) / 2;\n        if(arr[mid] < arr[min]) {\n            min = mid +\
    \ 1;\n        } else if(arr[mid] > arr[max]) {\n            max = mid - 1;\n \
    \       } else {\n            return arr[mid];\n        }\n    }\n    return null;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp62_5kz8j.d(20): Error: undefined identifier `toArray`\n/tmp/tmp62_5kz8j.d(21):
    Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmp62_5kz8j.d(32):
    Error: cannot implicitly convert expression `arr[cast(ulong)mid]` of type `int`
    to `Nullable!long`\n/tmp/tmp62_5kz8j.d(35): Error: cannot implicitly convert expression
    `null` of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp62_5kz8j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: A;\n    int: B;\n    int: C;\n    int: D;\n    int: E;\n    int: F;\n\
    \    int: G;\n    int: H;\n    int: I;\n    int: J;\n    int: K;\n    int: L;\n\
    \    int: M;\n    int: N;\n    int: O;\n    int: P;\n    int: Q;\n    int: R;\n\
    \    int: S;\n    int: T;\n    int: U;\n    int: V;\n    int: W;\n    int: X;\n\
    \    int: Y;\n    int: Z;\n    int: a1;\n    int: a2;\n    int: a3;\n    int:\
    \ a4;\n    int: a5;\n    int: a6;\n    int: a7;\n    int: a8;\n    int: a9;\n\
    \    int: a10;\n    int: a11;\n    int: a12;\n    int: a13;\n    int: a14;\n \
    \   int: a15;\n    int: a16;\n    int: a17;\n    int: a18;\n    int: a19;\n  \
    \  int: a20;\n    int: a21;\n    int: a22;\n    int: a23;\n    int: a24;\n   \
    \ int: a25;\n    int: a26;\n    int: a27;\n    int: a28;\n    int: a29;\n    int:\
    \ a30;\n    int: a31;\n    int: a32;\n    int: a33;\n    int: a34;\n    int: a35;\n\
    \    int: a36;\n    int: a37;\n    int: a38;\n    int: a39;\n    int: a40;\n \
    \   int: a41;\n    int\nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcspc07i8.d(20): Error: no identifier for declarator `int`\n/tmp/tmpcspc07i8.d(20):
    Error: found `:` instead of statement\n/tmp/tmpcspc07i8.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmpcspc07i8.d(21): Error: found `:` instead of statement\n/tmp/tmpcspc07i8.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmpcspc07i8.d(22): Error: found
    `:` instead of statement\n/tmp/tmpcspc07i8.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmpcspc07i8.d(23): Error: found `:` instead of statement\n/tmp/tmpcspc07i8.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmpcspc07i8.d(24): Error: found
    `:` instead of statement\n/tmp/tmpcspc07i8.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmpcspc07i8.d(25): Error: found `:` instead of statement\n/tmp/tmpcspc07i8.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmpcspc07i8.d(26): Error: found
    `:` instead of statement\n/tmp/tmpcspc07i8.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmpcspc07i8.d(27): Error: found `:` instead of statement\n/tmp/tmpcspc07i8.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmpcspc07i8.d(28): Error: found
    `:` instead of statement\n/tmp/tmpcspc07i8.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmpcspc07i8.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcspc07i8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0)\n        return null;\n    var min: long = lst[0];\n \
    \   var min_index = 0;\n    for (var i = 1; i < lst.length; ++i)\n    {\n    \
    \    if (lst[i] < min)\n        {\n            min = lst[i];\n            min_index\
    \ = i;\n        }\n    }\n    return lst[min_index + 1];\n}\nunittest\n{\n   \
    \ alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa1c5uq8l.d(22): Error: found `min` when expecting `;` following
    statement\n/tmp/tmpa1c5uq8l.d(22): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1c5uq8l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  long smallest = lst[0];\n    long secondSmallest = lst[1];\n    \n    for(long\
    \ i = 2; i < lst.size(); ++i)\n    {\n        if(lst[i] < smallest)\n        {\n\
    \            secondSmallest = smallest;\n            smallest = lst[i];\n    \
    \    }\n        else\n        {\n            if(lst[i] < secondSmallest)\n   \
    \         {\n                secondSmallest = lst[i];\n            }\n       \
    \ }\n    }\n    return secondSmallest;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp06r8u7zv.d(40): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp06r8u7zv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int[] sorted = toArray(sort(arr));\n    int\
    \ index = sorted.length - 1;\n    while (index >= 0 && sorted[index] == arr[index])\
    \ {\n        index--;\n    }\n    if (index < 0) {\n        return null;\n   \
    \ }\n    return sorted[index + 1];\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa1oiv4ix.d(20): Error: undefined identifier `toArray`\n/tmp/tmpa1oiv4ix.d(21):
    Error: undefined identifier `toArray`\n/tmp/tmpa1oiv4ix.d(22): Error: cannot implicitly
    convert expression `sorted.length - 1LU` of type `ulong` to `int`\n/tmp/tmpa1oiv4ix.d(27):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpa1oiv4ix.d(29):
    Error: cannot implicitly convert expression `sorted[cast(ulong)(index + 1)]` of
    type `int` to `Nullable!long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1oiv4ix.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    if (arr.length == 0)\n        return null;\n\
    \    long min1 = arr[0];\n    long min2 = arr[0];\n    for (int i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min1)\n        {\n            min2 = min1;\n\
    \            min1 = arr[i];\n        }\n        else if (arr[i] < min2)\n    \
    \    {\n            min2 = arr[i];\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpusinn49s.d(20): Error: undefined identifier `toArray`\n/tmp/tmpusinn49s.d(22):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpusinn49s.d(37):
    Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpusinn49s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0)\n        return null;\n    \n    long smallest = lst[0];\n\
    \    long second = lst[1];\n    \n    for (int i = 2; i < lst.length; ++i)\n \
    \   {\n        if (lst[i] < smallest)\n        {\n            smallest = lst[i];\n\
    \        }\n        else if (lst[i] > smallest && lst[i] < second)\n        {\n\
    \            second = lst[i];\n        }\n    }\n    \n    return second;\n}\n\
    unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result =\
    \ candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsio7fjwd.d(21): Error: cannot implicitly convert expression
    `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpsio7fjwd.d(38): Error:
    cannot implicitly convert expression `second` of type `long` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsio7fjwd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: A;\n    int: B;\n    int: C;\n    int: D;\n    int: E;\n    int: F;\n\
    \    int: G;\n    int: H;\n    int: I;\n    int: J;\n    int: K;\n    int: L;\n\
    \    int: M;\n    int: N;\n    int: O;\n    int: P;\n    int: Q;\n    int: R;\n\
    \    int: S;\n    int: T;\n    int: U;\n    int: V;\n    int: W;\n    int: X;\n\
    \    int: Y;\n    int: Z;\n    int: a1;\n    int: a2;\n    int: a3;\n    int:\
    \ a4;\n    int: a5;\n    int: a6;\n    int: a7;\n    int: a8;\n    int: a9;\n\
    \    int: a10;\n    int: a11;\n    int: a12;\n    int: a13;\n    int: a14;\n \
    \   int: a15;\n    int: a16;\n    int: a17;\n    int: a18;\n    int: a19;\n  \
    \  int: a20;\n    int: a21;\n    int: a22;\n    int: a23;\n    int: a24;\n   \
    \ int: a25;\n    int: a26;\n    int: a27;\n    int: a28;\n    int: a29;\n    int:\
    \ a30;\n    int: a31;\n    int: a32;\n    int: a33;\n    int: a34;\n    int: a35;\n\
    \    int: a36;\n    int: a37;\n    int: a38;\n    int: a39;\n    int: a40;\n \
    \   int: a41;\n    int\nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7l2rlika.d(20): Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(20):
    Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp7l2rlika.d(21): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(22): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(23): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(24): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(25): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(26): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(27): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(28): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7l2rlika.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = -1;\n    var i;\n    for (i\
    \ = 1; i < lst.Length; i++) {\n        if (lst[i] < smallest) {\n            smallest\
    \ = lst[i];\n            smallest_index = i;\n        }\n    }\n    if (smallest_index\
    \ != -1) {\n        return smallest;\n    }\n    return null;\n}\n/*\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfz7utfrt.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpfz7utfrt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    \n    for(i = 0, j = 1,\
    \ k = 0, l = lst.length; i < l; i++, j++, k++){\n        if(lst[i] < lst[j]){\n\
    \            k = j;\n        }\n    }\n    return lst[k];\n}\nunittest\n{\n  \
    \  alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt0jn6lsl.d(20): Error: no identifier for declarator `int`\n/tmp/tmpt0jn6lsl.d(20):
    Error: found `:` instead of statement\n/tmp/tmpt0jn6lsl.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmpt0jn6lsl.d(21): Error: found `:` instead of statement\n/tmp/tmpt0jn6lsl.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmpt0jn6lsl.d(22): Error: found
    `:` instead of statement\n/tmp/tmpt0jn6lsl.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmpt0jn6lsl.d(23): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt0jn6lsl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest:long;\n    var i:int;\n    var j:int;\n    var k:int;\n    \n\
    \    smallest = lst[0];\n    i = 1;\n    \n    while (i < lst.len) {\n       \
    \ smallest = lst[i];\n        \n        for (j = i; j < lst.len; j++) {\n    \
    \        if (lst[j] < smallest) {\n                smallest = lst[j];\n      \
    \          k = j;\n            }\n        }\n        \n        if (smallest !=\
    \ lst[k]) {\n            lst[k] = smallest;\n        }\n        \n        i++;\n\
    \    }\n    \n    return smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkpy_j6if.d(20): Error: found `smallest` when expecting `;` following
    statement\n/tmp/tmpkpy_j6if.d(20): Error: found `:` instead of statement\n/tmp/tmpkpy_j6if.d(21):
    Error: found `i` when expecting `;` following statement\n/tmp/tmpkpy_j6if.d(21):
    Error: found `:` instead of statement\n/tmp/tmpkpy_j6if.d(22): Error: found `j`
    when expecting `;` following statement\n/tmp/tmpkpy_j6if.d(22): Error: found `:`
    instead of statement\n/tmp/tmpkpy_j6if.d(23): Error: found `k` when expecting
    `;` following statement\n/tmp/tmpkpy_j6if.d(23): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkpy_j6if.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = lst.asArray!int[];\n    \n    int min = 0;\n    int max = arr.length\
    \ - 1;\n    \n    while (min < max) {\n        int mid = min + ((max - min) >>\
    \ 1);\n        \n        if (arr[mid] < arr[min])\n            min = mid + 1;\n\
    \        else if (arr[mid] < arr[max])\n            max = mid - 1;\n        else\n\
    \            return arr[mid];\n    }\n    \n    return null;\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbydavywy.d(20): Error: no property `asArray` for type `long[]`\n/tmp/tmpbydavywy.d(23):
    Error: cannot implicitly convert expression `arr.length - 1LU` of type `ulong`
    to `int`\n/tmp/tmpbydavywy.d(33): Error: cannot implicitly convert expression
    `arr[cast(ulong)mid]` of type `int` to `Nullable!long`\n/tmp/tmpbydavywy.d(36):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbydavywy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = new int[lst.length];\n    for(int i = 0; i < lst.length; ++i)\n\
    \        arr[i] = lst[i];\n    \n    int min = arr[0];\n    int minIndex = 0;\n\
    \    for(int i = 1; i < arr.length; ++i)\n    {\n        if(arr[i] < min)\n  \
    \      {\n            min = arr[i];\n            minIndex = i;\n        }\n  \
    \  }\n    \n    if(minIndex == arr.length - 1)\n        return null;\n    else\n\
    \        return arr[minIndex + 1];\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvn1vvehh.d(22): Error: cannot implicitly convert expression
    `lst[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpvn1vvehh.d(36): Error: cannot
    implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpvn1vvehh.d(38):
    Error: cannot implicitly convert expression `arr[cast(ulong)(minIndex + 1)]` of
    type `int` to `Nullable!long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvn1vvehh.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i, j, k;\n    \n    for(i=0, j=lst.len()-1; i<j; i++, j--)\n    {\n  \
    \      k = lst[i];\n        if(k < lst[j])\n        {\n            lst[i] = lst[j];\n\
    \            lst[j] = k;\n        }\n    }\n    return lst[j];\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv2o36cdc.d(20): Error: no identifier for declarator `int`\n/tmp/tmpv2o36cdc.d(20):
    Error: found `:` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv2o36cdc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = lst;\n    int len = arr.length;\n    if (len == 0)\n        return\
    \ null;\n    int min = 0;\n    int max = len - 1;\n    while (min < max) {\n \
    \       int mid = min + ((max - min) / 2);\n        if (arr[mid] > arr[min])\n\
    \            max = mid - 1;\n        else\n            min = mid + 1;\n    }\n\
    \    return arr[min];\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8bgro8l0.d(20): Error: cannot implicitly convert expression
    `lst` of type `long[]` to `int[]`\n/tmp/tmp8bgro8l0.d(21): Error: cannot implicitly
    convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmp8bgro8l0.d(23):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp8bgro8l0.d(33):
    Error: cannot implicitly convert expression `arr[cast(ulong)min]` of type `int`
    to `Nullable!long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bgro8l0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallestIndex = 0;\n    var smallestIndex2\
    \ = 0;\n    \n    for (var i = 1; i < lst.Length; i++) {\n        if (lst[i] <\
    \ smallest) {\n            smallest = lst[i];\n            smallestIndex = i;\n\
    \        }\n    }\n    \n    for (var i = smallestIndex + 1; i < lst.Length; i++)\
    \ {\n        if (lst[i] < smallest) {\n            smallestIndex2 = i;\n     \
    \   }\n    }\n    \n    if (smallestIndex2 != smallestIndex) {\n        return\
    \ smallest;\n    }\n    else {\n        return null;\n    }\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1idjocw3.d(20): Error: undefined identifier `var`\n/tmp/tmp1idjocw3.d(21):
    Error: undefined identifier `var`\n/tmp/tmp1idjocw3.d(22): Error: undefined identifier
    `var`\n/tmp/tmp1idjocw3.d(24): Error: undefined identifier `var`\n/tmp/tmp1idjocw3.d(24):
    Error: no property `Length` for type `long[]`\n/tmp/tmp1idjocw3.d(31): Error:
    undefined identifier `var`\n/tmp/tmp1idjocw3.d(31): Error: no property `Length`
    for type `long[]`\n/tmp/tmp1idjocw3.d(41): Error: cannot implicitly convert expression
    `null` of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp1idjocw3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  long min = lst[0];\n    long max = lst[0];\n    for(long i : lst)\n    {\n\
    \        if(i < min)\n        {\n            min = i;\n        }\n        if(i\
    \ > max)\n        {\n            max = i;\n        }\n    }\n    if(min == max)\n\
    \    {\n        return null;\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp96est_3c.d(22): Error: semicolon expected, not `:`\n/tmp/tmp96est_3c.d(22):
    Error: expression expected, not `:`\n/tmp/tmp96est_3c.d(22): Error: found `lst`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp96est_3c.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int? smallest = std.math.min(lst);\n    if (smallest.is_some) {\n        return\
    \ smallest;\n    }\n    \n    int? second = std.math.min(std.math.pairs(lst).map(|pair|\
    \ pair.1).filter(|x| x < smallest));\n    if (second.is_some) {\n        return\
    \ second;\n    }\n    \n    return null;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1bprhwk5.d(20): Error: no identifier for declarator `int`\n/tmp/tmp1bprhwk5.d(20):
    Error: found `?` instead of statement\n/tmp/tmp1bprhwk5.d(25): Error: no identifier
    for declarator `int`\n/tmp/tmp1bprhwk5.d(25): Error: found `?` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1bprhwk5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = new int[lst.length];\n    for(int i = 0; i < lst.length; ++i)\n\
    \        arr[i] = lst[i];\n    Arrays.sort(arr);\n    return arr[arr.length -\
    \ 2];\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc7tzvtaa.d(22): Error: cannot implicitly convert expression
    `lst[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpc7tzvtaa.d(23): Error: undefined
    identifier `Arrays`\n/tmp/tmpc7tzvtaa.d(24): Error: cannot implicitly convert
    expression `arr[arr.length - 2LU]` of type `int` to `Nullable!long`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpc7tzvtaa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int len = arr.length;\n    \n    int min = 0;\n\
    \    int max = len - 1;\n    \n    while (min < max) {\n        int mid = (min\
    \ + max) / 2;\n        if (arr[mid] < arr[min]) min = mid;\n        else if (arr[mid]\
    \ > arr[max]) max = mid;\n        else return arr[mid];\n    }\n    \n    return\
    \ null;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjwttp97f.d(20): Error: undefined identifier `toArray`\n/tmp/tmpjwttp97f.d(21):
    Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmpjwttp97f.d(30):
    Error: cannot implicitly convert expression `arr[cast(ulong)mid]` of type `int`
    to `Nullable!long`\n/tmp/tmpjwttp97f.d(33): Error: cannot implicitly convert expression
    `null` of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpjwttp97f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i; \n    int: j; \n    int: k; \n    int: l; \n    int: m; \n    int:\
    \ n; \n    int: o; \n    int: p; \n    int: q; \n    int: r; \n    int: s; \n\
    \    int: t; \n    int: u; \n    int: v; \n    int: w; \n    int: x; \n    int:\
    \ y; \n    int: z; \n    int: aa; \n    int: ab; \n    int: ac; \n    int: ad;\
    \ \n    int: ae; \n    int: af; \n    int: ag; \n    int: ah; \n    int: ai; \n\
    \    int: aj; \n    int: ak; \n    int: al; \n    int: am; \n    int: an; \n \
    \   int: ao; \n    int: ap; \n    int: aq; \n    int: ar; \n    int: as; \n  \
    \  int: at; \n    int: au; \n    int: av; \n    int: aw; \n    int: ax; \n   \
    \ int: ay; \n    int: az; \n    int: ba; \n    int: bb; \n    int: bc; \n    int:\
    \ bd; \n    int: be; \n    int: bf; \n    int: bg; \n    int: bh; \n    int: bi;\
    \ \n    int: bj; \n    int: bk; \n    int: bl; \n    int: bm; \n    int: bn; \n\
    \    int: bo; \n    int: bp; \n    int: bq; \n    int: br; \n    int: bs; \n \
    \   int: bt; \n    int: bu; \n    int: bv; \n    int: bw; \n    int: bx; \n  \
    \  int: by; \n    int: bz; \n    int: ca; \n    int: cb; \n    int: cc; \n   \
    \ int: cd; \n    int: ce; \n    int: cf; \n    int: cg; \n    int: ch; \n    int:\
    \ ci; \n    int: cj; \n    int: ck; \n    int: cl; \n    int: cm; \n    int: cn;\
    \ \n    int: co\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n    \
    \    auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptc9j5c4m.d(20): Error: no identifier for declarator `int`\n/tmp/tmptc9j5c4m.d(20):
    Error: found `:` instead of statement\n/tmp/tmptc9j5c4m.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmptc9j5c4m.d(21): Error: found `:` instead of statement\n/tmp/tmptc9j5c4m.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmptc9j5c4m.d(22): Error: found
    `:` instead of statement\n/tmp/tmptc9j5c4m.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmptc9j5c4m.d(23): Error: found `:` instead of statement\n/tmp/tmptc9j5c4m.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmptc9j5c4m.d(24): Error: found
    `:` instead of statement\n/tmp/tmptc9j5c4m.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmptc9j5c4m.d(25): Error: found `:` instead of statement\n/tmp/tmptc9j5c4m.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmptc9j5c4m.d(26): Error: found
    `:` instead of statement\n/tmp/tmptc9j5c4m.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmptc9j5c4m.d(27): Error: found `:` instead of statement\n/tmp/tmptc9j5c4m.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmptc9j5c4m.d(28): Error: found
    `:` instead of statement\n/tmp/tmptc9j5c4m.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmptc9j5c4m.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptc9j5c4m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = -1;\n    var smallest_value\
    \ = null;\n    \n    for (var i = 1; i < lst.Length; i++) {\n        var value\
    \ = lst[i];\n        if (value < smallest) {\n            smallest_index = i;\n\
    \            smallest_value = value;\n        }\n    }\n    \n    if (smallest_index\
    \ != -1) {\n        return smallest_value;\n    }\n    \n    return null;\n}\n\
    /*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl1v2r6v2.d(38): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpl1v2r6v2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: A;\n    int: B;\n    int: C;\n    int: D;\n    int: E;\n    int: F;\n\
    \    int: G;\n    int: H;\n    int: I;\n    int: J;\n    int: K;\n    int: L;\n\
    \    int: M;\n    int: N;\n    int: O;\n    int: P;\n    int: Q;\n    int: R;\n\
    \    int: S;\n    int: T;\n    int: U;\n    int: V;\n    int: W;\n    int: X;\n\
    \    int: Y;\n    int: Z;\n    int: a1;\n    int: a2;\n    int: a3;\n    int:\
    \ a4;\n    int: a5;\n    int: a6;\n    int: a7;\n    int: a8;\n    int: a9;\n\
    \    int: a10;\n    int: a11;\n    int: a12;\n    int: a13;\n    int: a14;\n \
    \   int: a15;\n    int: a16;\n    int: a17;\n    int: a18;\n    int: a19;\n  \
    \  int: a20;\n    int: a21;\n    int: a22;\n    int: a23;\n    int: a24;\n   \
    \ int: a25;\n    int: a26;\n    int: a27;\n    int: a28;\n    int: a29;\n    int:\
    \ a30;\n    int: a31;\n    int: a32;\n    int: a33;\n    int: a34;\n    int: a35;\n\
    \    int: a36;\n    int: a37;\n    int: a38;\n    int: a39;\n    int: a40;\n \
    \   int: a41;\n    int\nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7l2rlika.d(20): Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(20):
    Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp7l2rlika.d(21): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(22): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(23): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(24): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(25): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(26): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(27): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(28): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7l2rlika.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: Nullable<long>;\n    var min_index: Nullable<int>;\n    var i: Nullable<int>;\n\
    \    var j: Nullable<int>;\n    var k: Nullable<int>;\n    \n    min = Nullable<long>.null;\n\
    \    min_index = Nullable<int>.null;\n    \n    for (i = 0; i < lst.Length; i++)\
    \ {\n        for (j = i + 1; j < lst.Length; j++) {\n            for (k = 0; k\
    \ < lst.Length; k++) {\n                if (lst[i] < lst[j] && lst[i] < lst[k])\
    \ {\n                    min = lst[i];\n                    min_index = k;\n \
    \               }\n            }\n        }\n    }\n    \n    return min;\n}\n\
    /*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwsizlzxt.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmpwsizlzxt.d(20): Error: found `:` instead of statement\n/tmp/tmpwsizlzxt.d(21):
    Error: found `min_index` when expecting `;` following statement\n/tmp/tmpwsizlzxt.d(21):
    Error: found `:` instead of statement\n/tmp/tmpwsizlzxt.d(22): Error: found `i`
    when expecting `;` following statement\n/tmp/tmpwsizlzxt.d(22): Error: found `:`
    instead of statement\n/tmp/tmpwsizlzxt.d(23): Error: found `j` when expecting
    `;` following statement\n/tmp/tmpwsizlzxt.d(23): Error: found `:` instead of statement\n/tmp/tmpwsizlzxt.d(24):
    Error: found `k` when expecting `;` following statement\n/tmp/tmpwsizlzxt.d(24):
    Error: found `:` instead of statement\n/tmp/tmpwsizlzxt.d(26): Error: found `>`
    when expecting `.` following long\n/tmp/tmpwsizlzxt.d(26): Error: found `.` when
    expecting identifier following `long`.\n/tmp/tmpwsizlzxt.d(26): Error: found `null`
    when expecting `;` following statement\n/tmp/tmpwsizlzxt.d(26): Deprecation: use
    `{ }` for an empty statement, not `;`\n/tmp/tmpwsizlzxt.d(27): Error: found `>`
    when expecting `.` following int\n/tmp/tmpwsizlzxt.d(27): Error: found `.` when
    expecting identifier following `int`.\n/tmp/tmpwsizlzxt.d(27): Error: found `null`
    when expecting `;` following statement\n/tmp/tmpwsizlzxt.d(27): Deprecation: use
    `{ }` for an empty statement, not `;`\n/tmp/tmpwsizlzxt.d(42): Error: unterminated
    /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwsizlzxt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = lst.asArray();\n    int len = arr.length;\n    if (len < 2) return\
    \ null;\n    int min1 = arr[0];\n    int min2 = arr[1];\n    int min_index = -1;\n\
    \    for (int i = 1; i < len; i++)\n    {\n        if (arr[i] < min1)\n      \
    \  {\n            min1 = arr[i];\n            min_index = i;\n        }\n    \
    \    else if (arr[i] < min2)\n        {\n            min2 = arr[i];\n        }\n\
    \    }\n    if (min_index == -1)\n    {\n        return null;\n    }\n    return\
    \ arr[min_index];\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_x7w20gz.d(20): Error: no property `asArray` for type `long[]`\n/tmp/tmp_x7w20gz.d(21):
    Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmp_x7w20gz.d(22):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp_x7w20gz.d(40):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp_x7w20gz.d(42):
    Error: cannot implicitly convert expression `arr[cast(ulong)min_index]` of type
    `int` to `Nullable!long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_x7w20gz.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0)\n        return null;\n    \n    long smallest = lst[0];\n\
    \    long second = lst[1];\n    \n    for (int i = 2; i < lst.length; i++)\n \
    \   {\n        if (lst[i] < smallest)\n        {\n            smallest = lst[i];\n\
    \        }\n        else if (lst[i] < second)\n        {\n            second =\
    \ lst[i];\n        }\n    }\n    \n    return second;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpawzq15fk.d(21): Error: cannot implicitly convert expression
    `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpawzq15fk.d(38): Error:
    cannot implicitly convert expression `second` of type `long` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpawzq15fk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  long smallest = lst[0];\n    long secondSmallest = lst[1];\n    \n    for(uint\
    \ i = 0; i < lst.lenght; ++i)\n    {\n        if(smallest>lst[i])\n        {\n\
    \            smallest = lst[i];\n        }\n        if(secondSmallest>lst[i])\n\
    \        {\n            secondSmallest = lst[i];\n        }\n    }\n    return\
    \ secondSmallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy068um4y.d(23): Error: no property `lenght` for type `long[]`\n/tmp/tmpy068um4y.d(34):
    Error: cannot implicitly convert expression `secondSmallest` of type `long` to
    `Nullable!long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy068um4y.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int? smallest = std.min.index(lst);\n    if (smallest == null)\n        return\
    \ null;\n    return lst[smallest];\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb1y3wize.d(20): Error: no identifier for declarator `int`\n/tmp/tmpb1y3wize.d(20):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpb1y3wize.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = lst;\n    int len = arr.length;\n    int min = arr[0];\n    int\
    \ min_index = 0;\n    for(int i = 1; i < len; i++)\n    {\n        if(arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            min_index = i;\n   \
    \     }\n    }\n    if(min_index < len - 1)\n    {\n        return arr[min_index\
    \ + 1];\n    }\n    return null;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5ecksjuy.d(38): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5ecksjuy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallestIndex = -1;\n    var smallestIndex2\
    \ = -1;\n    var smallestIndex3 = -1;\n    var smallestIndex4 = -1;\n    var smallestIndex5\
    \ = -1;\n    var smallestIndex6 = -1;\n    var smallestIndex7 = -1;\n    var smallestIndex8\
    \ = -1;\n    var smallestIndex9 = -1;\n    var smallestIndex10 = -1;\n    var\
    \ smallestIndex11 = -1;\n    var smallestIndex12 = -1;\n    var smallestIndex13\
    \ = -1;\n    var smallestIndex14 = -1;\n    var smallestIndex15 = -1;\n    var\
    \ smallestIndex16 = -1;\n    var smallestIndex17 = -1;\n    var smallestIndex18\
    \ = -1;\n    var smallestIndex19 = -1;\n    var smallestIndex20 = -1;\n    var\
    \ smallestIndex21 = -1;\n    var smallestIndex22 = -1;\n    var smallestIndex23\
    \ = -1;\n    var smallestIndex24 = -1;\n    var smallestIndex25 = -1;\n    var\
    \ smallestIndex26 = -1;\n    var smallestIndex27 = -1;\n    var smallestIndex28\
    \ = -1;\n    var smallestIndex29 = -1;\n    var smallestIndex30 = -1;\n    var\
    \ smallestIndex31 = -1;\n    var smallestIndex32 = -1;\n    var smallestIndex33\
    \ = -1;\n    var smallestIndex34 = -1;\n    var smallestIndex35 = -1;\n    var\
    \ smallestIndex36 = -1;\n    var smallestIndex37 = -1;\n    var smallestIndex38\
    \ = -1;\n    var smallestIndex39 = -1;\n    var smallestIndex40 = -1;\n    var\
    \ smallestIndex41 = -1;\n    var smallestIndex42 = -1;\n    var smallestIndex43\
    \ = -1;\n    var smallestIndex44 = -1;\n    var smallestIndex45 = -1;\n    var\
    \ smallestIndex46 = -1;\n    var smallestIndex47 = -1;\n    var smallestIndex48\
    \ = -1;\n    var smallestIndex49 = -1;\n    var smallestIndex50 = -1;\n    var\
    \ smallestIndex51 = -1;\n    var smallestIndex52 = -1;\n    var smallestIndex53\
    \ = -1;\n    var smallestIndex54 = -1;\n    var smallestIndex55 = -1;\n    var\
    \ smallestIndex56 = -1;\n    var smallestIndex57 = -1;\n    var smallestIndex58\
    \ = -1;\n    var smallestIndex59 = -1;\n    var smallestIndex60 = -1;\n    var\
    \ smallestIndex61 = -1;\n    var smallestIndex62 = -1;\n    var smallestIndex63\
    \ = -1;\n    var smallestIndex64 = -1;\n    var smallestIndex65\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxzpxr4xb.d(85): Error: found `smallestIndex65` when expecting
    `;` following statement\n/tmp/tmpxzpxr4xb.d(86): Error: found `unittest` instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxzpxr4xb.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    var smallest_value\
    \ = lst[0];\n    \n    for (var i = 1; i < lst.Length; i++) {\n        if (lst[i]\
    \ < smallest_value) {\n            smallest_value = lst[i];\n            smallest_index\
    \ = i;\n        }\n    }\n    \n    if (smallest_index != 0) {\n        smallest\
    \ = lst[smallest_index];\n    }\n    \n    return smallest;\n}\n/*\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5046ntfc.d(37): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5046ntfc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    \n    for(i = 0; i < (l-1);\
    \ i++) {\n        for(j = i+1; j < l; j++) {\n            k = j;\n           \
    \ while(k < (l-1)) {\n                if(lst[k] < lst[k+1]) {\n              \
    \      k = k + 1;\n                }\n                else {\n               \
    \     break;\n                }\n            }\n            if(k == (l-1)) {\n\
    \                return lst[k];\n            }\n        }\n    }\n    return null;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyc78glgs.d(20): Error: no identifier for declarator `int`\n/tmp/tmpyc78glgs.d(20):
    Error: found `:` instead of statement\n/tmp/tmpyc78glgs.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmpyc78glgs.d(21): Error: found `:` instead of statement\n/tmp/tmpyc78glgs.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmpyc78glgs.d(22): Error: found
    `:` instead of statement\n/tmp/tmpyc78glgs.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmpyc78glgs.d(23): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyc78glgs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest:Nullable<long> = null;\n    var smallest_index:int = 0;\n    var\
    \ i:int = 0;\n    var j:int = 0;\n    \n    for(i = 0; i < lst.Length; i++) {\n\
    \        smallest = Nullable<long>[smallest_index];\n        smallest_index =\
    \ i;\n        for(j = i+1; j < lst.Length; j++) {\n            if(lst[j] < smallest)\
    \ {\n                smallest = lst[j];\n                smallest_index = j;\n\
    \            }\n        }\n    }\n    return smallest;\n}\n/*\nunittest\n{\n \
    \   alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28ryy7g7.d(20): Error: found `smallest` when expecting `;` following
    statement\n/tmp/tmp28ryy7g7.d(20): Error: found `:` instead of statement\n/tmp/tmp28ryy7g7.d(21):
    Error: found `smallest_index` when expecting `;` following statement\n/tmp/tmp28ryy7g7.d(21):
    Error: found `:` instead of statement\n/tmp/tmp28ryy7g7.d(22): Error: found `i`
    when expecting `;` following statement\n/tmp/tmp28ryy7g7.d(22): Error: found `:`
    instead of statement\n/tmp/tmp28ryy7g7.d(23): Error: found `j` when expecting
    `;` following statement\n/tmp/tmp28ryy7g7.d(23): Error: found `:` instead of statement\n/tmp/tmp28ryy7g7.d(26):
    Error: found `>` when expecting `.` following long\n/tmp/tmp28ryy7g7.d(26): Error:
    found `[` when expecting identifier following `long`.\n/tmp/tmp28ryy7g7.d(26):
    Error: found `smallest_index` when expecting `;` following statement\n/tmp/tmp28ryy7g7.d(26):
    Error: found `]` instead of statement\n/tmp/tmp28ryy7g7.d(37): Error: unterminated
    /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp28ryy7g7.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int? min = null;\n    foreach(i | i in lst) {\n        if (min == null || i\
    \ < min) {\n            min = i;\n        }\n    }\n    return min;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmskspy7x.d(20): Error: no identifier for declarator `int`\n/tmp/tmpmskspy7x.d(20):
    Error: found `?` instead of statement\n/tmp/tmpmskspy7x.d(21): Error: no identifier
    for declarator `i`\n/tmp/tmpmskspy7x.d(21): Error: found `|` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmskspy7x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest:long;\n    var index:int;\n    \n    smallest = lst[0];\n    index\
    \ = 1;\n    \n    while (index < lst.len) {\n        if (lst[index] < smallest)\
    \ {\n            smallest = lst[index];\n        }\n        index++;\n    }\n\
    \    \n    return smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdd4_27x5.d(20): Error: found `smallest` when expecting `;` following
    statement\n/tmp/tmpdd4_27x5.d(20): Error: found `:` instead of statement\n/tmp/tmpdd4_27x5.d(21):
    Error: found `index` when expecting `;` following statement\n/tmp/tmpdd4_27x5.d(21):
    Error: found `:` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpdd4_27x5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest:long;\n    var i:int;\n    var j:int;\n    \n    smallest = lst[0];\n\
    \    \n    for (i = 1; i < lst.len(); i++)\n    {\n        if (lst[i] < smallest)\n\
    \        {\n            smallest = lst[i];\n        }\n    }\n    \n    if (smallest\
    \ != null)\n    {\n        for (j = 1; j < lst.len(); j++)\n        {\n      \
    \      if (lst[j] == smallest)\n            {\n                return smallest;\n\
    \            }\n        }\n    }\n    \n    return null;\n}\nunittest\n{\n   \
    \ alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj01xgabw.d(20): Error: found `smallest` when expecting `;` following
    statement\n/tmp/tmpj01xgabw.d(20): Error: found `:` instead of statement\n/tmp/tmpj01xgabw.d(21):
    Error: found `i` when expecting `;` following statement\n/tmp/tmpj01xgabw.d(21):
    Error: found `:` instead of statement\n/tmp/tmpj01xgabw.d(22): Error: found `j`
    when expecting `;` following statement\n/tmp/tmpj01xgabw.d(22): Error: found `:`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj01xgabw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    long min2 = min(arr);\n    long min1 = min(arr);\n\
    \    long min0 = min(arr);\n    long min1 = min(arr);\n    long min2 = min(arr);\n\
    \    long min1 = min(arr);\n    long min0 = min(arr);\n    long min1 = min(arr);\n\
    \    long min2 = min(arr);\n    long min1 = min(arr);\n    long min0 = min(arr);\n\
    \    long min1 = min(arr);\n    long min2 = min(arr);\n    long min1 = min(arr);\n\
    \    long min0 = min(arr);\n    long min1 = min(arr);\n    long min2 = min(arr);\n\
    \    long min1 = min(arr);\n    long min0 = min(arr);\n    long min1 = min(arr);\n\
    \    long min2 = min(arr);\n    long min1 = min(arr);\n    long min0 = min(arr);\n\
    \    long min1 = min(arr);\n    long min2 = min(arr);\n    long min1 = min(arr);\n\
    \    long min0 = min(arr);\n    long min1 = min(arr);\n    long min2 = min(arr);\n\
    \    long min1 = min(arr);\n    long min0 = min(arr);\n    long min1 = min(arr);\n\
    \    long min2 = min(arr);\n    long min1 = min(arr);\n    long min0 = min(arr);\n\
    \    long min1 = min(arr);\n    long min2 = min(arr);\n    long min1 = min(arr);\n\
    \    long min0 = min(arr);\n    long min1 = min(arr);\n    long min2 = min(arr);\n\
    \    long min1 = min(arr);\n    long min0 = min(arr);\n    long min1 = min(arr);\n\
    \    long min2 = min(arr);\n    long min1 = min(arr);\n    long min0 = min(arr);\n\
    \    long min1 = min(arr);\n    long min2 = min(arr);\n    long min1 = min(arr);\n\
    \    long min0 = min(arr);\n    long min1 = min(arr);\n    long min2 = min(arr);\n\
    \    long min1 = min(arr);\n    long min0 = min(arr);\n    long min1 = min(arr);\n\
    \    long min2 = min(arr);\n    long min1 = min(arr);\n    long min0 = min(arr);\n\
    \    long min1 = min(arr);\n    long min2 = min(arr);\n    long min1 = min(arr);\n\
    \    long min0 = min(\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo5h6rv6i.d(84): Error: expression expected, not `unittest`\n/tmp/tmpo5h6rv6i.d(85):
    Error: found `{` when expecting `,`\n/tmp/tmpo5h6rv6i.d(86): Error: expression
    expected, not `alias`\n/tmp/tmpo5h6rv6i.d(86): Error: found `candidate` when expecting
    `,`\n/tmp/tmpo5h6rv6i.d(86): Error: expression expected, not `=`\n/tmp/tmpo5h6rv6i.d(86):
    Error: found `next_smallest` when expecting `,`\n/tmp/tmpo5h6rv6i.d(86): Error:
    expression expected, not `;`\n/tmp/tmpo5h6rv6i.d(88): Error: found `{` when expecting
    `,`\n/tmp/tmpo5h6rv6i.d(89): Error: expression expected, not `auto`\n/tmp/tmpo5h6rv6i.d(89):
    Error: found `result` when expecting `,`\n/tmp/tmpo5h6rv6i.d(89): Error: expression
    expected, not `=`\n/tmp/tmpo5h6rv6i.d(89): Error: found `candidate` when expecting
    `,`\n/tmp/tmpo5h6rv6i.d(89): Error: found `;` when expecting `,`\n/tmp/tmpo5h6rv6i.d(90):
    Error: found `;` when expecting `,`\n/tmp/tmpo5h6rv6i.d(91): Error: expression
    expected, not `}`\n/tmp/tmpo5h6rv6i.d(93): Error: found `{` when expecting `,`\n/tmp/tmpo5h6rv6i.d(94):
    Error: expression expected, not `auto`\n/tmp/tmpo5h6rv6i.d(94): Error: found `result`
    when expecting `,`\n/tmp/tmpo5h6rv6i.d(94): Error: expression expected, not `=`\n/tmp/tmpo5h6rv6i.d(94):
    Error: found `candidate` when expecting `,`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpo5h6rv6i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  long min;\n    long min_index;\n    \n    min = lst[0];\n    min_index = 0;\n\
    \    \n    for (long i = 1; i < lst.size(); ++i)\n    {\n        if (lst[i] <\
    \ min)\n        {\n            min = lst[i];\n            min_index = i;\n   \
    \     }\n    }\n    \n    if (min_index < lst.size() - 1)\n    {\n        return\
    \ lst[min_index + 1];\n    }\n    else\n    {\n        return null;\n    }\n}\n\
    unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result =\
    \ candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1nttb971.d(26): Error: no property `size` for type `long[]`\n/tmp/tmp1nttb971.d(35):
    Error: no property `size` for type `long[]`\n/tmp/tmp1nttb971.d(37): Error: cannot
    implicitly convert expression `lst[cast(ulong)(min_index + 1L)]` of type `long`
    to `Nullable!long`\n/tmp/tmp1nttb971.d(41): Error: cannot implicitly convert expression
    `null` of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp1nttb971.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  long smallest = lst[0];\n    long second_smallest = lst[1];\n    \n    for\
    \ (long i = 2; i < lst.size(); ++i)\n    {\n        if (lst[i] < smallest)\n \
    \       {\n            second_smallest = smallest;\n            smallest = lst[i];\n\
    \        }\n        else if (lst[i] < second_smallest)\n        {\n          \
    \  second_smallest = lst[i];\n        }\n    }\n    return smallest;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplbs3o2g6.d(23): Error: no property `size` for type `long[]`\n/tmp/tmplbs3o2g6.d(35):
    Error: cannot implicitly convert expression `smallest` of type `long` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplbs3o2g6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: a;\n    int: b;\n    int: c;\n    int: d;\n    int: e;\n    int: f;\n\
    \    int: g;\n    int: h;\n    int: i;\n    int: j;\n    int: k;\n    int: l;\n\
    \    int: m;\n    int: n;\n    int: o;\n    int: p;\n    int: q;\n    int: r;\n\
    \    int: s;\n    int: t;\n    int: u;\n    int: v;\n    int: w;\n    int: x;\n\
    \    int: y;\n    int: z;\n    int: a;\n    int: b;\n    int: c;\n    int: d;\n\
    \    int: e;\n    int: f;\n    int: g;\n    int: h;\n    int: i;\n    int: j;\n\
    \    int: k;\n    int: l;\n    int: m;\n    int: n;\n    int: o;\n    int: p;\n\
    \    int: q;\n    int: r;\n    int: s;\n    int: t;\n    int: u;\n    int: v;\n\
    \    int: w;\n    int: x;\n    int: y;\n    int: z;\n    int: a;\n    int: b;\n\
    \    int: c;\n    int: d;\n    int: e;\n    int: f;\n    int: g;\n    int: h;\n\
    \    int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: a;\n    int: \nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6893m17u.d(20): Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(20):
    Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp6893m17u.d(21): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(22): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(23): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(24): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(25): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(26): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(27): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(28): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6893m17u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = -1;\n    var smallest_value\
    \ = null;\n    for(var i = 1; i < lst.Length; i++)\n    {\n        if(smallest_index\
    \ == -1)\n        {\n            smallest_index = i;\n            smallest_value\
    \ = lst[i];\n        }\n        else if(smallest_value < lst[i])\n        {\n\
    \            smallest_value = lst[i];\n            smallest_index = i;\n     \
    \   }\n    }\n    return smallest_value;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_t2p8ra.d(38): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpk_t2p8ra.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int? smallest = lst[0];\n    int? second = smallest;\n    for(int i = 1; i\
    \ < lst.size(); ++i)\n    {\n        if(lst[i] < smallest)\n        {\n      \
    \      second = smallest;\n            smallest = lst[i];\n        }\n       \
    \ else if(lst[i] > smallest)\n        {\n            second = smallest;\n    \
    \        smallest = lst[i];\n        }\n        else\n        {\n            second\
    \ = lst[i];\n        }\n    }\n    return smallest;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfhot8ptb.d(20): Error: no identifier for declarator `int`\n/tmp/tmpfhot8ptb.d(20):
    Error: found `?` instead of statement\n/tmp/tmpfhot8ptb.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmpfhot8ptb.d(21): Error: found `?` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfhot8ptb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: long;\n    var min_index: long;\n    var i: long;\n    \n    min =\
    \ lst[0];\n    min_index = 0;\n    \n    for (i=1; i<lst.length; ++i)\n    {\n\
    \        if (lst[i] < min)\n        {\n            min = lst[i];\n           \
    \ min_index = i;\n        }\n    }\n    \n    if (min_index < lst.length-1)\n\
    \    {\n        return lst[min_index+1];\n    }\n    else\n    {\n        return\
    \ null;\n    }\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8qmd_6us.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmp8qmd_6us.d(20): Error: found `:` instead of statement\n/tmp/tmp8qmd_6us.d(21):
    Error: found `min_index` when expecting `;` following statement\n/tmp/tmp8qmd_6us.d(21):
    Error: found `:` instead of statement\n/tmp/tmp8qmd_6us.d(22): Error: found `i`
    when expecting `;` following statement\n/tmp/tmp8qmd_6us.d(22): Error: found `:`
    instead of statement\n/tmp/tmp8qmd_6us.d(45): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8qmd_6us.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    \n    for each (var\
    \ i in lst)\n    {\n        if (i < smallest)\n        {\n            smallest\
    \ = i;\n            smallest_index = i;\n        }\n    }\n    \n    if (smallest_index\
    \ != 0)\n    {\n        return smallest;\n    }\n    else\n    {\n        return\
    \ null;\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrj3_xtw.d(23): Error: found `each` when expecting `(`\n/tmp/tmpkrj3_xtw.d(23):
    Error: found `in` when expecting `)`\n/tmp/tmpkrj3_xtw.d(23): Error: missing `{
    ... }` for function literal\n/tmp/tmpkrj3_xtw.d(23): Error: found `lst` when expecting
    `;` following statement\n/tmp/tmpkrj3_xtw.d(23): Error: expression expected, not
    `)`\n/tmp/tmpkrj3_xtw.d(24): Error: found `{` when expecting `;` following `for`
    condition\n/tmp/tmpkrj3_xtw.d(25): Error: expression expected, not `if`\n/tmp/tmpkrj3_xtw.d(26):
    Error: found `{` when expecting `)`\n/tmp/tmpkrj3_xtw.d(30): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkrj3_xtw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest:Nullable<long> = null;\n    var smallest_index:int = 0;\n    var\
    \ index:int = 0;\n    \n    while(index < lst.len) {\n        if(smallest_index\
    \ == lst.len) {\n            smallest_index = 0;\n            smallest = lst[smallest_index];\n\
    \        }\n        \n        if(smallest_index == index) {\n            smallest_index++;\n\
    \            smallest = lst[smallest_index];\n        }\n        \n        if(smallest\
    \ == null) {\n            smallest_index++;\n            smallest = lst[smallest_index];\n\
    \        }\n        \n        if(smallest < lst[index]) {\n            smallest_index\
    \ = index;\n            smallest = lst[smallest_index];\n        }\n        \n\
    \        index++;\n    }\n    \n    return smallest;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfr8de_q8.d(20): Error: found `smallest` when expecting `;` following
    statement\n/tmp/tmpfr8de_q8.d(20): Error: found `:` instead of statement\n/tmp/tmpfr8de_q8.d(21):
    Error: found `smallest_index` when expecting `;` following statement\n/tmp/tmpfr8de_q8.d(21):
    Error: found `:` instead of statement\n/tmp/tmpfr8de_q8.d(22): Error: found `index`
    when expecting `;` following statement\n/tmp/tmpfr8de_q8.d(22): Error: found `:`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfr8de_q8.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    var smallest_value\
    \ = lst[0];\n    for(var i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i]\
    \ < smallest)\n        {\n            smallest_index = i;\n            smallest_value\
    \ = lst[i];\n        }\n    }\n    if(smallest_index == 0)\n        return null;\n\
    \    return smallest_value;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzl_zpai6.d(35): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpzl_zpai6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: long;\n    var min_index: long;\n    var i: long;\n    var j: long;\n\
    \    var k: long;\n    var l: long;\n    var m: long;\n    var n: long;\n    var\
    \ o: long;\n    var p: long;\n    var q: long;\n    var r: long;\n    var s: long;\n\
    \    var t: long;\n    var u: long;\n    var v: long;\n    var w: long;\n    var\
    \ x: long;\n    var y: long;\n    var z: long;\n    var a: long;\n    var b: long;\n\
    \    var c: long;\n    var d: long;\n    var e: long;\n    var f: long;\n    var\
    \ g: long;\n    var h: long;\n    var i: long;\n    var j: long;\n    var k: long;\n\
    \    var l: long;\n    var m: long;\n    var n: long;\n    var o: long;\n    var\
    \ p: long;\n    var q: long;\n    var r: long;\n    var s: long;\n    var t: long;\n\
    \    var u: long;\n    var v: long;\n    var w: long;\n    var x: long;\n    var\
    \ y: long;\n    var z: long;\n    var a: long;\n    var b: long;\n    var c: long;\n\
    \    var d: long;\n    var e: long;\n    var f: long;\n    var g: long;\n    var\
    \ h: long;\n    var i: long;\n    var j: long;\n    var k: long;\n    var l: long;\n\
    \    var m: long;\n    var n: long;\n    var o: long;\n    var p: long;\n    var\
    \ q: long;\n    var r: long;\n    var s: long;\n    var t: long;\n    var u: long;\n\
    \    var v: long;\n    var w: long;\n    var x: long;\n    var y: long;\n    var\
    \ z: long;\n    var a: long;\n    var b: long;\n    var c: long;\n    var d: long;\n\
    \    var e: long;\n    var f: long;\n    var g: long;\n    var h: long;\n    var\
    \ i: long;\n    var j: long;\n    var k: long;\n    var l: long;\n    var m: long;\n\
    \    var n: long;\n    var o: long;\n    var p: long;\n    var q: long;\n    var\
    \ r: long;\n    var s: long;\n    var t: long;\n    var u: long;\n    var v: long;\n\
    \    var w: long;\n    var x: long;\n\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp925_acuf.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmp925_acuf.d(20): Error: found `:` instead of statement\n/tmp/tmp925_acuf.d(21):
    Error: found `min_index` when expecting `;` following statement\n/tmp/tmp925_acuf.d(21):
    Error: found `:` instead of statement\n/tmp/tmp925_acuf.d(22): Error: found `i`
    when expecting `;` following statement\n/tmp/tmp925_acuf.d(22): Error: found `:`
    instead of statement\n/tmp/tmp925_acuf.d(23): Error: found `j` when expecting
    `;` following statement\n/tmp/tmp925_acuf.d(23): Error: found `:` instead of statement\n/tmp/tmp925_acuf.d(24):
    Error: found `k` when expecting `;` following statement\n/tmp/tmp925_acuf.d(24):
    Error: found `:` instead of statement\n/tmp/tmp925_acuf.d(25): Error: found `l`
    when expecting `;` following statement\n/tmp/tmp925_acuf.d(25): Error: found `:`
    instead of statement\n/tmp/tmp925_acuf.d(26): Error: found `m` when expecting
    `;` following statement\n/tmp/tmp925_acuf.d(26): Error: found `:` instead of statement\n/tmp/tmp925_acuf.d(27):
    Error: found `n` when expecting `;` following statement\n/tmp/tmp925_acuf.d(27):
    Error: found `:` instead of statement\n/tmp/tmp925_acuf.d(28): Error: found `o`
    when expecting `;` following statement\n/tmp/tmp925_acuf.d(28): Error: found `:`
    instead of statement\n/tmp/tmp925_acuf.d(29): Error: found `p` when expecting
    `;` following statement\n/tmp/tmp925_acuf.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp925_acuf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0)\n        return null;\n    \n    long min = lst[0];\n\
    \    long max = lst[0];\n    \n    for (int i = 1; i < lst.length; ++i)\n    {\n\
    \        if (lst[i] < min)\n        {\n            min = lst[i];\n        }\n\
    \        else if (lst[i] > max)\n        {\n            max = lst[i];\n      \
    \  }\n    }\n    \n    return max;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpimsenwlo.d(21): Error: cannot implicitly convert expression
    `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpimsenwlo.d(38): Error:
    cannot implicitly convert expression `max` of type `long` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpimsenwlo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: ab;\n    int: ac;\n    int: ad;\n    int: ae;\n    int:\
    \ af;\n    int: ag;\n    int: ah;\n    int: ai;\n    int: aj;\n    int: ak;\n\
    \    int: al;\n    int: am;\n    int: an;\n    int: ao;\n    int: ap;\n    int:\
    \ aq;\n    int: ar;\n    int: as;\n    int: at;\n    int: au;\n    int: av;\n\
    \    int: aw;\n    int: ax;\n    int: ay;\n    int: az;\n    int: ba;\n    int:\
    \ bb;\n    int: bc;\n    int: bd;\n    int: be;\n    int: bf;\n    int: bg;\n\
    \    int: bh;\n    int: bi;\n    int: bj;\n    int: bk;\n    int: bl;\n    int:\
    \ bm;\n    int: bn;\n    int: bo;\n    int: bp;\n    int: bq;\n    int: br;\n\
    \    int: bs;\n    int: bt;\n    int: bu;\n    int: bv;\n    int: bw;\n    int:\
    \ bx;\n    int: by;\n    int: bz;\n    int: ca;\n    int: cb;\n    int: cc;\n\
    \    int: cd;\n    int: ce;\n    int: cf;\n    int: cg;\n    int: ch;\n    int:\
    \ ci;\n    int: cj;\n    int: ck;\n    int: cl;\n    int: cm;\n    int: cn;\n\
    \    int: co;\n    int: cp;\n    int: cq;\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5p7j0ibp.d(20): Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(20):
    Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp5p7j0ibp.d(21): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(22): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(23): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(24): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(25): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(26): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(27): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(28): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5p7j0ibp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int? smallest = std.math.min(lst);\n    if (smallest == null)\n        return\
    \ null;\n    int? second = std.math.min(std.array.drop(lst,smallest));\n    return\
    \ second;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n       \
    \ auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyagwpqbm.d(20): Error: no identifier for declarator `int`\n/tmp/tmpyagwpqbm.d(20):
    Error: found `?` instead of statement\n/tmp/tmpyagwpqbm.d(23): Error: no identifier
    for declarator `int`\n/tmp/tmpyagwpqbm.d(23): Error: found `?` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyagwpqbm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int? min = null;\n    foreach(i : lst) {\n        if (min == null || i < min)\
    \ {\n            min = i;\n        }\n    }\n    return min;\n}\n/*\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpegytnxss.d(20): Error: no identifier for declarator `int`\n/tmp/tmpegytnxss.d(20):
    Error: found `?` instead of statement\n/tmp/tmpegytnxss.d(21): Error: no identifier
    for declarator `i`\n/tmp/tmpegytnxss.d(21): Error: found `:` when expecting `;`\n/tmp/tmpegytnxss.d(28):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpegytnxss.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    var smallest_value\
    \ = lst[0];\n    \n    for (var i = 1; i < lst.Length; i++) {\n        if (lst[i]\
    \ < smallest_value) {\n            smallest_index = i;\n            smallest_value\
    \ = lst[i];\n        }\n    }\n    \n    if (smallest_index != 0) {\n        return\
    \ lst[smallest_index];\n    } else {\n        return null;\n    }\n}\n/*\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxsieu3c9.d(37): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxsieu3c9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0)\n        return null;\n    \n    long min = lst[0];\n\
    \    long max = lst[0];\n    \n    for (int i = 1; i < lst.length; ++i) {\n  \
    \      if (lst[i] < min) {\n            min = lst[i];\n        } else if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    \n    return max;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjjn7juts.d(21): Error: cannot implicitly convert expression
    `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpjjn7juts.d(34): Error:
    cannot implicitly convert expression `max` of type `long` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjjn7juts.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0)\n        return null;\n    var smallest = lst[0];\n  \
    \  var smallest_index = lst.indexOf(smallest);\n    var smallest_value = smallest;\n\
    \    for (var i = 1; i < lst.length; ++i) {\n        if (lst[i] < smallest) {\n\
    \            smallest_value = lst[i];\n            smallest_index = i;\n     \
    \   }\n    }\n    return smallest_value;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7tpo3p_x.d(22): Error: undefined identifier `var`\n/tmp/tmp7tpo3p_x.d(23):
    Error: undefined identifier `var`\n/tmp/tmp7tpo3p_x.d(23): Error: no property
    `indexOf` for type `long[]`\n/tmp/tmp7tpo3p_x.d(24): Error: undefined identifier
    `var`\n/tmp/tmp7tpo3p_x.d(25): Error: undefined identifier `var`\n/tmp/tmp7tpo3p_x.d(21):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7tpo3p_x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  long smallest = lst[0];\n    long index = 1;\n    for(index <- 1 to lst.len)\
    \ {\n        if(lst[index] < smallest) {\n            smallest = lst[index];\n\
    \        }\n    }\n    return smallest;\n}\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpifk8jyur.d(22): Error: found `to` when expecting `;` following
    statement\n/tmp/tmpifk8jyur.d(22): Error: found `)` when expecting `;` following
    `for` condition\n/tmp/tmpifk8jyur.d(27): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpifk8jyur.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest:Nullable<long> = null;\n    var smallest_index:int = 0;\n    \n\
    \    for (i in 0..lst.length-1)\n    {\n        if (smallest_index == 0)\n   \
    \     {\n            if (lst[i] < lst[smallest_index])\n            {\n      \
    \          smallest = lst[i];\n                smallest_index = i;\n         \
    \   }\n        }\n        else if (lst[i] < lst[smallest_index])\n        {\n\
    \            smallest = lst[i];\n            smallest_index = i;\n        }\n\
    \    }\n    \n    return smallest;\n}\n/*\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyfv4z89y.d(20): Error: found `smallest` when expecting `;` following
    statement\n/tmp/tmpyfv4z89y.d(20): Error: found `:` instead of statement\n/tmp/tmpyfv4z89y.d(21):
    Error: found `smallest_index` when expecting `;` following statement\n/tmp/tmpyfv4z89y.d(21):
    Error: found `:` instead of statement\n/tmp/tmpyfv4z89y.d(23): Error: found `..`
    when expecting `;` following statement\n/tmp/tmpyfv4z89y.d(23): Error: found `)`
    when expecting `;` following `for` condition\n/tmp/tmpyfv4z89y.d(40): Error: found
    `return` when expecting `)`\n/tmp/tmpyfv4z89y.d(42): Error: unterminated /* */
    comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyfv4z89y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: A;\n    int: B;\n    int: C;\n    int: D;\n    int: E;\n    int: F;\n\
    \    int: G;\n    int: H;\n    int: I;\n    int: J;\n    int: K;\n    int: L;\n\
    \    int: M;\n    int: N;\n    int: O;\n    int: P;\n    int: Q;\n    int: R;\n\
    \    int: S;\n    int: T;\n    int: U;\n    int: V;\n    int: W;\n    int: X;\n\
    \    int: Y;\n    int: Z;\n    int: a1;\n    int: a2;\n    int: a3;\n    int:\
    \ a4;\n    int: a5;\n    int: a6;\n    int: a7;\n    int: a8;\n    int: a9;\n\
    \    int: a10;\n    int: a11;\n    int: a12;\n    int: a13;\n    int: a14;\n \
    \   int: a15;\n    int: a16;\n    int: a17;\n    int: a18;\n    int: a19;\n  \
    \  int: a20;\n    int: a21;\n    int: a22;\n    int: a23;\n    int: a24;\n   \
    \ int: a25;\n    int: a26;\n    int: a27;\n    int: a28;\n    int: a29;\n    int:\
    \ a30;\n    int: a31;\n    int: a32;\n    int: a33;\n    int: a34;\n    int: a35;\n\
    \    int: a36;\n    int: a37;\n    int: a38;\n    int: a39;\n    int: a40;\n \
    \   int: a41;\n    int\nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7l2rlika.d(20): Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(20):
    Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp7l2rlika.d(21): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(22): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(23): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(24): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(25): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(26): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(27): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(28): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7l2rlika.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: ab;\n    int: ac;\n    int: ad;\n    int: ae;\n    int:\
    \ af;\n    int: ag;\n    int: ah;\n    int: ai;\n    int: aj;\n    int: ak;\n\
    \    int: al;\n    int: am;\n    int: an;\n    int: ao;\n    int: ap;\n    int:\
    \ aq;\n    int: ar;\n    int: as;\n    int: at;\n    int: au;\n    int: av;\n\
    \    int: aw;\n    int: ax;\n    int: ay;\n    int: az;\n    int: ba;\n    int:\
    \ bb;\n    int: bc;\n    int: bd;\n    int: be;\n    int: bf;\n    int: bg;\n\
    \    int: bh;\n    int: bi;\n    int: bj;\n    int: bk;\n    int: bl;\n    int:\
    \ bm;\n    int: bn;\n    int: bo;\n    int: bp;\n    int: bq;\n    int: br;\n\
    \    int: bs;\n    int: bt;\n    int: bu;\n    int: bv;\n    int: bw;\n    int:\
    \ bx;\n    int: by;\n    int: bz;\n    int: ca;\n    int: cb;\n    int: cc;\n\
    \    int: cd;\n    int: ce;\n    int: cf;\n    int: cg;\n    int: ch;\n    int:\
    \ ci;\n    int: cj;\n    int: ck;\n    int: cl;\n    int: cm;\n    int: cn;\n\
    \    int: co;\n    int: cp;\n    int: cq;\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5p7j0ibp.d(20): Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(20):
    Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp5p7j0ibp.d(21): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(22): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(23): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(24): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(25): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(26): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(27): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(28): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5p7j0ibp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  long min;\n    long min2;\n    \n    min = lst[0];\n    min2 = lst[1];\n  \
    \  \n    for(int i = 2; i < lst.lenght; ++i)\n    {\n        if(lst[i] < min)\n\
    \        {\n            min = lst[i];\n        }\n        else if(lst[i] < min2)\n\
    \        {\n            min2 = lst[i];\n        }\n    }\n    \n    return min2;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn4jl3nj4.d(26): Error: no property `lenght` for type `long[]`\n/tmp/tmpn4jl3nj4.d(38):
    Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn4jl3nj4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int[] sorted = toArray(sort(arr));\n    int[]\
    \ result = toArray(sort(arr));\n    \n    int index = sorted.length - 1;\n   \
    \ \n    while (index >= 0 && sorted[index] == result[index]) {\n        index--;\n\
    \    }\n    \n    if (index >= 0) {\n        return arr[index];\n    } else {\n\
    \        return null;\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvvypk69z.d(20): Error: undefined identifier `toArray`\n/tmp/tmpvvypk69z.d(21):
    Error: undefined identifier `toArray`\n/tmp/tmpvvypk69z.d(22): Error: undefined
    identifier `toArray`\n/tmp/tmpvvypk69z.d(24): Error: cannot implicitly convert
    expression `sorted.length - 1LU` of type `ulong` to `int`\n/tmp/tmpvvypk69z.d(31):
    Error: cannot implicitly convert expression `arr[cast(ulong)index]` of type `int`
    to `Nullable!long`\n/tmp/tmpvvypk69z.d(33): Error: cannot implicitly convert expression
    `null` of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpvvypk69z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = -1;\n    var i;\n    for(i\
    \ = 1; i < lst.Length; ++i)\n    {\n        if(lst[i] < smallest)\n        {\n\
    \            smallest = lst[i];\n            smallest_index = i;\n        }\n\
    \    }\n    return smallest_index == -1 ? null : lst[smallest_index + 1];\n}\n\
    /*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi2rvsp91.d(33): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpi2rvsp91.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: a;\n    int: b;\n    int: c;\n    int: d;\n    int: e;\n    int: f;\n\
    \    int: g;\n    int: h;\n    int: i;\n    int: j;\n    int: k;\n    int: l;\n\
    \    int: m;\n    int: n;\n    int: o;\n    int: p;\n    int: q;\n    int: r;\n\
    \    int: s;\n    int: t;\n    int: u;\n    int: v;\n    int: w;\n    int: x;\n\
    \    int: y;\n    int: z;\n    int: a;\n    int: b;\n    int: c;\n    int: d;\n\
    \    int: e;\n    int: f;\n    int: g;\n    int: h;\n    int: i;\n    int: j;\n\
    \    int: k;\n    int: l;\n    int: m;\n    int: n;\n    int: o;\n    int: p;\n\
    \    int: q;\n    int: r;\n    int: s;\n    int: t;\n    int: u;\n    int: v;\n\
    \    int: w;\n    int: x;\n    int: y;\n    int: z;\n    int: a;\n    int: b;\n\
    \    int: c;\n    int: d;\n    int: e;\n    int: f;\n    int: g;\n    int: h;\n\
    \    int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: a;\n    int: \nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6893m17u.d(20): Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(20):
    Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp6893m17u.d(21): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(22): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(23): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(24): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(25): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(26): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(27): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(28): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6893m17u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    var smallest_value\
    \ = lst[0];\n    var smallest_index2 = 0;\n    var smallest_value2 = lst[0];\n\
    \    \n    for(var i = 1; i < lst.lenght; i++)\n    {\n        if(smallest_value\
    \ < lst[i])\n        {\n            smallest_value = lst[i];\n            smallest_index\
    \ = i;\n        }\n    }\n    \n    for(var i = 1; i < lst.lenght; i++)\n    {\n\
    \        if(smallest_value2 < lst[i])\n        {\n            smallest_value2\
    \ = lst[i];\n            smallest_index2 = i;\n        }\n    }\n    \n    if(smallest_index\
    \ != smallest_index2)\n    {\n        return smallest_value;\n    }\n    else\n\
    \    {\n        return null;\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwjq_qtfm.d(20): Error: undefined identifier `var`\n/tmp/tmpwjq_qtfm.d(21):
    Error: undefined identifier `var`\n/tmp/tmpwjq_qtfm.d(22): Error: undefined identifier
    `var`\n/tmp/tmpwjq_qtfm.d(23): Error: undefined identifier `var`\n/tmp/tmpwjq_qtfm.d(24):
    Error: undefined identifier `var`\n/tmp/tmpwjq_qtfm.d(26): Error: undefined identifier
    `var`\n/tmp/tmpwjq_qtfm.d(26): Error: no property `lenght` for type `long[]`\n/tmp/tmpwjq_qtfm.d(35):
    Error: undefined identifier `var`\n/tmp/tmpwjq_qtfm.d(35): Error: no property
    `lenght` for type `long[]`\n/tmp/tmpwjq_qtfm.d(50): Error: cannot implicitly convert
    expression `null` of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpwjq_qtfm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0)\n        return null;\n    var smallest = lst[0];\n  \
    \  var index = 1;\n    while (index < lst.length && smallest > lst[index])\n \
    \   {\n        smallest = lst[index];\n        index++;\n    }\n    return smallest;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd86z9_sl.d(22): Error: undefined identifier `var`\n/tmp/tmpd86z9_sl.d(23):
    Error: undefined identifier `var`\n/tmp/tmpd86z9_sl.d(21): Error: cannot implicitly
    convert expression `null` of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpd86z9_sl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: long;\n    var min_index: long;\n    var i: long;\n    \n    if (lst.length\
    \ == 0)\n        return null;\n    \n    min = lst[0];\n    min_index = 0;\n \
    \   \n    for (i=1; i<lst.length; ++i)\n    {\n        if (lst[i] < min)\n   \
    \     {\n            min = lst[i];\n            min_index = i;\n        }\n  \
    \  }\n    \n    if (min_index != 0)\n        return lst[min_index-1];\n    else\n\
    \        return null;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphnmq41j4.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmphnmq41j4.d(20): Error: found `:` instead of statement\n/tmp/tmphnmq41j4.d(21):
    Error: found `min_index` when expecting `;` following statement\n/tmp/tmphnmq41j4.d(21):
    Error: found `:` instead of statement\n/tmp/tmphnmq41j4.d(22): Error: found `i`
    when expecting `;` following statement\n/tmp/tmphnmq41j4.d(22): Error: found `:`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphnmq41j4.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    for(var i = 1; i <\
    \ lst.size(); ++i)\n    {\n        if(smallest>lst[i])\n        {\n          \
    \  smallest = lst[i];\n            smallest_index = i;\n        }\n    }\n   \
    \ return smallest_index>0?lst[smallest_index]:null;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkph1vees.d(32): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpkph1vees.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    long min = arr[0];\n    long max = arr[0];\n\
    \    for(int i = 1; i < arr.length; ++i)\n    {\n        if(arr[i] < min)\n  \
    \      {\n            min = arr[i];\n        }\n        else if(arr[i] > max)\n\
    \        {\n            max = arr[i];\n        }\n    }\n    return max == min\
    \ ? null : max;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n \
    \       auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsc27_lj3.d(20): Error: undefined identifier `toArray`\n/tmp/tmpsc27_lj3.d(34):
    Error: incompatible types for `(null) : (max)`: `typeof(null)` and `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsc27_lj3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    for(var i = 1; i <\
    \ lst.Length; i++)\n    {\n        if(lst[i] < smallest)\n        {\n        \
    \    smallest = lst[i];\n            smallest_index = i;\n        }\n    }\n \
    \   return smallest_index != lst.Length ? lst[smallest_index + 1] : null;\n}\n\
    unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result =\
    \ candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjzh8sg7w.d(20): Error: undefined identifier `var`\n/tmp/tmpjzh8sg7w.d(21):
    Error: undefined identifier `var`\n/tmp/tmpjzh8sg7w.d(22): Error: undefined identifier
    `var`\n/tmp/tmpjzh8sg7w.d(22): Error: no property `Length` for type `long[]`\n/tmp/tmpjzh8sg7w.d(30):
    Error: no property `Length` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjzh8sg7w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: A;\n    int: B;\n    int: C;\n    int: D;\n    int: E;\n    int: F;\n\
    \    int: G;\n    int: H;\n    int: I;\n    int: J;\n    int: K;\n    int: L;\n\
    \    int: M;\n    int: N;\n    int: O;\n    int: P;\n    int: Q;\n    int: R;\n\
    \    int: S;\n    int: T;\n    int: U;\n    int: V;\n    int: W;\n    int: X;\n\
    \    int: Y;\n    int: Z;\n    int: a1;\n    int: a2;\n    int: a3;\n    int:\
    \ a4;\n    int: a5;\n    int: a6;\n    int: a7;\n    int: a8;\n    int: a9;\n\
    \    int: a10;\n    int: a11;\n    int: a12;\n    int: a13;\n    int: a14;\n \
    \   int: a15;\n    int: a16;\n    int: a17;\n    int: a18;\n    int: a19;\n  \
    \  int: a20;\n    int: a21;\n    int: a22;\n    int: a23;\n    int: a24;\n   \
    \ int: a25;\n    int: a26;\n    int: a27;\n    int: a28;\n    int: a29;\n    int:\
    \ a30;\n    int: a31;\n    int: a32;\n    int: a33;\n    int: a34;\n    int: a35;\n\
    \    int: a36;\n    int: a37;\n    int: a38;\n    int: a39;\n    int: a40;\n \
    \   int: a41;\n    int\nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7l2rlika.d(20): Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(20):
    Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp7l2rlika.d(21): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(22): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(23): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(24): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(25): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(26): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(27): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(28): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7l2rlika.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int? smallest = lst[0];\n    int? second = smallest;\n    for(int i = 1; i\
    \ < lst.size(); ++i)\n    {\n        if(lst[i] < smallest)\n        {\n      \
    \      second = smallest;\n            smallest = lst[i];\n        }\n       \
    \ else\n        {\n            if(lst[i] < second)\n            {\n          \
    \      second = lst[i];\n            }\n        }\n    }\n    return smallest;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ojqpsg2.d(20): Error: no identifier for declarator `int`\n/tmp/tmp1ojqpsg2.d(20):
    Error: found `?` instead of statement\n/tmp/tmp1ojqpsg2.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp1ojqpsg2.d(21): Error: found `?` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ojqpsg2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0)\n        return null;\n    \n    long smallest = lst[0];\n\
    \    long secondSmallest = lst[1];\n    \n    for (int i = 2; i < lst.length;\
    \ ++i)\n    {\n        if (lst[i] < smallest)\n        {\n            secondSmallest\
    \ = smallest;\n            smallest = lst[i];\n        }\n        else if (lst[i]\
    \ < secondSmallest)\n        {\n            secondSmallest = lst[i];\n       \
    \ }\n    }\n    \n    return secondSmallest;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptf5ykhr6.d(21): Error: cannot implicitly convert expression
    `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmptf5ykhr6.d(39): Error:
    cannot implicitly convert expression `secondSmallest` of type `long` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptf5ykhr6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    var smallest_value\
    \ = lst[0];\n    var smallest_index2 = 0;\n    \n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(smallest_value < lst[i]){\n            smallest_value = lst[i];\n\
    \            smallest_index = i;\n        }\n    }\n    \n    for(var i = 0; i\
    \ < lst.length; i++){\n        if(smallest_value == lst[i]){\n            smallest_index2\
    \ = i;\n        }\n    }\n    \n    if(smallest_index2 == smallest_index){\n \
    \       return null;\n    }\n    \n    return smallest_value;\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5hbemhl9.d(20): Error: undefined identifier `var`\n/tmp/tmp5hbemhl9.d(21):
    Error: undefined identifier `var`\n/tmp/tmp5hbemhl9.d(22): Error: undefined identifier
    `var`\n/tmp/tmp5hbemhl9.d(23): Error: undefined identifier `var`\n/tmp/tmp5hbemhl9.d(25):
    Error: undefined identifier `var`\n/tmp/tmp5hbemhl9.d(32): Error: undefined identifier
    `var`\n/tmp/tmp5hbemhl9.d(39): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5hbemhl9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = lst;\n    int? smallest = arr[0];\n    int? second = arr[1];\n\
    \    \n    for (int i = 2; i < arr.length; ++i)\n    {\n        if (arr[i] < smallest)\n\
    \        {\n            smallest = arr[i];\n        }\n        else if (arr[i]\
    \ < second)\n        {\n            second = arr[i];\n        }\n    }\n    return\
    \ smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n     \
    \   auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpetuk91b3.d(21): Error: no identifier for declarator `int`\n/tmp/tmpetuk91b3.d(21):
    Error: found `?` instead of statement\n/tmp/tmpetuk91b3.d(22): Error: no identifier
    for declarator `int`\n/tmp/tmpetuk91b3.d(22): Error: found `?` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpetuk91b3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    long min1 = arr[0];\n    long min2 = arr[0];\n\
    \    for(int i = 1; i < arr.length; i++)\n    {\n        if(arr[i] < min1)\n \
    \       {\n            min2 = min1;\n            min1 = arr[i];\n        }\n \
    \       else if(arr[i] < min2)\n        {\n            min2 = arr[i];\n      \
    \  }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppmqtaatn.d(20): Error: undefined identifier `toArray`\n/tmp/tmppmqtaatn.d(35):
    Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppmqtaatn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr;\n    \n    arr = new int[lst.length];\n    \n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        arr[i] = lst[i];\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] < arr[i + 1])\n      \
    \  {\n            int temp = arr[i];\n            arr[i] = arr[i + 1];\n     \
    \       arr[i + 1] = temp;\n        }\n    }\n    \n    return arr[arr.length\
    \ - 2];\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n     \
    \   auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp50p_kvoz.d(41): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp50p_kvoz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    var smallest_value\
    \ = smallest;\n    \n    for (i in 1..lst.len) {\n        if (lst[i] < smallest)\
    \ {\n            smallest = lst[i];\n            smallest_index = i;\n       \
    \     smallest_value = smallest;\n        }\n    }\n    \n    if (smallest_index\
    \ != 0) {\n        return smallest;\n    } else {\n        return null;\n    }\n\
    }\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa4tfhdad.d(24): Error: found `..` when expecting `;` following
    statement\n/tmp/tmpa4tfhdad.d(24): Error: found `)` when expecting `;` following
    `for` condition\n/tmp/tmpa4tfhdad.d(32): Error: found `if` when expecting `)`\n/tmp/tmpa4tfhdad.d(32):
    Error: found `!=` when expecting `)`\n/tmp/tmpa4tfhdad.d(32): Error: missing `{
    ... }` for function literal\n/tmp/tmpa4tfhdad.d(32): Error: found `0` when expecting
    `;` following statement\n/tmp/tmpa4tfhdad.d(32): Error: found `)` instead of statement\n/tmp/tmpa4tfhdad.d(34):
    Error: declaration expected, not `else`\n/tmp/tmpa4tfhdad.d(36): Error: unrecognized
    declaration\n/tmp/tmpa4tfhdad.d(38): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa4tfhdad.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: long;\n    var min_index: long;\n    var i: long;\n    \n    min =\
    \ lst[0];\n    min_index = 0;\n    \n    for (i = 1; i < lst.Length; i++) {\n\
    \        if (lst[i] < min) {\n            min = lst[i];\n            min_index\
    \ = i;\n        }\n    }\n    \n    if (min_index == lst.Length - 1) {\n     \
    \   return null;\n    }\n    else {\n        return lst[min_index + 1];\n    }\n\
    }\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9e_wvxw1.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmp9e_wvxw1.d(20): Error: found `:` instead of statement\n/tmp/tmp9e_wvxw1.d(21):
    Error: found `min_index` when expecting `;` following statement\n/tmp/tmp9e_wvxw1.d(21):
    Error: found `:` instead of statement\n/tmp/tmp9e_wvxw1.d(22): Error: found `i`
    when expecting `;` following statement\n/tmp/tmp9e_wvxw1.d(22): Error: found `:`
    instead of statement\n/tmp/tmp9e_wvxw1.d(41): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9e_wvxw1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest:long;\n    var i:int;\n    var j:int;\n    var k:int;\n    var\
    \ l:int;\n    var m:int;\n    \n    smallest = lst[0];\n    \n    for (i=1; i<lst.length;\
    \ ++i)\n    {\n        if (lst[i] < smallest)\n        {\n            smallest\
    \ = lst[i];\n        }\n    }\n    \n    if (smallest != lst[0])\n    {\n    \
    \    return smallest;\n    }\n    else\n    {\n        return null;\n    }\n}\n\
    unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result =\
    \ candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw34zxv1s.d(20): Error: found `smallest` when expecting `;` following
    statement\n/tmp/tmpw34zxv1s.d(20): Error: found `:` instead of statement\n/tmp/tmpw34zxv1s.d(21):
    Error: found `i` when expecting `;` following statement\n/tmp/tmpw34zxv1s.d(21):
    Error: found `:` instead of statement\n/tmp/tmpw34zxv1s.d(22): Error: found `j`
    when expecting `;` following statement\n/tmp/tmpw34zxv1s.d(22): Error: found `:`
    instead of statement\n/tmp/tmpw34zxv1s.d(23): Error: found `k` when expecting
    `;` following statement\n/tmp/tmpw34zxv1s.d(23): Error: found `:` instead of statement\n/tmp/tmpw34zxv1s.d(24):
    Error: found `l` when expecting `;` following statement\n/tmp/tmpw34zxv1s.d(24):
    Error: found `:` instead of statement\n/tmp/tmpw34zxv1s.d(25): Error: found `m`
    when expecting `;` following statement\n/tmp/tmpw34zxv1s.d(25): Error: found `:`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw34zxv1s.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest:long;\n    var i:int;\n    var j:int;\n    \n    smallest = lst[0];\n\
    \    \n    for (i = 1; i < lst.Length; i++) {\n        if (lst[i] < smallest)\
    \ {\n            smallest = lst[i];\n        }\n    }\n    \n    if (smallest\
    \ != 0) {\n        return smallest;\n    }\n    \n    for (i = 1; i < lst.Length;\
    \ i++) {\n        if (lst[i] != 0) {\n            j = i;\n            while (j\
    \ > 0 && lst[j-1] > lst[j]) {\n                lst[j] = lst[j-1];\n          \
    \      j--;\n            }\n            lst[j] = lst[i];\n        }\n    }\n \
    \   \n    return null;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph3e5rt5k.d(20): Error: found `smallest` when expecting `;` following
    statement\n/tmp/tmph3e5rt5k.d(20): Error: found `:` instead of statement\n/tmp/tmph3e5rt5k.d(21):
    Error: found `i` when expecting `;` following statement\n/tmp/tmph3e5rt5k.d(21):
    Error: found `:` instead of statement\n/tmp/tmph3e5rt5k.d(22): Error: found `j`
    when expecting `;` following statement\n/tmp/tmph3e5rt5k.d(22): Error: found `:`
    instead of statement\n/tmp/tmph3e5rt5k.d(49): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph3e5rt5k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: A;\n    int: B;\n    int: C;\n    int: D;\n    int: E;\n    int: F;\n\
    \    int: G;\n    int: H;\n    int: I;\n    int: J;\n    int: K;\n    int: L;\n\
    \    int: M;\n    int: N;\n    int: O;\n    int: P;\n    int: Q;\n    int: R;\n\
    \    int: S;\n    int: T;\n    int: U;\n    int: V;\n    int: W;\n    int: X;\n\
    \    int: Y;\n    int: Z;\n    int: a1;\n    int: a2;\n    int: a3;\n    int:\
    \ a4;\n    int: a5;\n    int: a6;\n    int: a7;\n    int: a8;\n    int: a9;\n\
    \    int: a10;\n    int: a11;\n    int: a12;\n    int: a13;\n    int: a14;\n \
    \   int: a15;\n    int: a16;\n    int: a17;\n    int: a18;\n    int: a19;\n  \
    \  int: a20;\n    int: a21;\n    int: a22;\n    int: a23;\n    int: a24;\n   \
    \ int: a25;\n    int: a26;\n    int: a27;\n    int: a28;\n    int: a29;\n    int:\
    \ a30;\n    int: a31;\n    int: a32;\n    int: a33;\n    int: a34;\n    int: a35;\n\
    \    int: a36;\n    int: a37;\n    int: a38;\n    int: a39;\n    int: a40;\n \
    \   int: a41;\n    int\nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7l2rlika.d(20): Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(20):
    Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp7l2rlika.d(21): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(22): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(23): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(24): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(25): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(26): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(27): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(28): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7l2rlika.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int n = arr.length;\n    \n    if (n == 0) {\n\
    \        return null;\n    }\n    \n    int minIndex = 0;\n    long minValue =\
    \ arr[minIndex];\n    \n    for (int i = 1; i < n; i++) {\n        if (arr[i]\
    \ < minValue) {\n            minValue = arr[i];\n            minIndex = i;\n \
    \       }\n    }\n    \n    return arr[minIndex];\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn4kjwz2s.d(20): Error: undefined identifier `toArray`\n/tmp/tmpn4kjwz2s.d(21):
    Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmpn4kjwz2s.d(24):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpn4kjwz2s.d(37):
    Error: cannot implicitly convert expression `arr[cast(ulong)minIndex]` of type
    `int` to `Nullable!long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn4kjwz2s.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = -1;\n    var smallest_value\
    \ = null;\n    \n    for (var i = 1; i < lst.size(); ++i)\n    {\n        var\
    \ value = lst[i];\n        if (value < smallest)\n        {\n            smallest\
    \ = value;\n            smallest_index = i;\n            smallest_value = smallest;\n\
    \        }\n    }\n    \n    if (smallest_index != -1)\n    {\n        return\
    \ smallest_value;\n    }\n    else\n    {\n        return null;\n    }\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpezrzc8zg.d(20): Error: undefined identifier `var`\n/tmp/tmpezrzc8zg.d(21):
    Error: undefined identifier `var`\n/tmp/tmpezrzc8zg.d(22): Error: undefined identifier
    `var`\n/tmp/tmpezrzc8zg.d(24): Error: undefined identifier `var`\n/tmp/tmpezrzc8zg.d(24):
    Error: no property `size` for type `long[]`\n/tmp/tmpezrzc8zg.d(26): Error: undefined
    identifier `var`\n/tmp/tmpezrzc8zg.d(41): Error: cannot implicitly convert expression
    `null` of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpezrzc8zg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: long;\n    var i: long;\n    min = lst[0];\n    for (i = 1; i < lst.Length;\
    \ i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n\
    \    }\n    return min;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    public static long nextSmallest(long[] arr) {\n    long min = arr[0];\n    long\
    \ max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i]\
    \ < min) {\n            min = arr[i];\n        }\n        if (arr[i] > max) {\n\
    \            max = arr[i];\n        }\n    }\n    return max;\n}\n</code>\n<|/\
    \ a tags=c#,algorithm,arrays |>\n<| a dscore=1 |>\n<code>\npublic static long\
    \ nextSmallest(long[] arr) {\n    long min = arr[0];\n    long max = arr[0];\n\
    \    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n   \
    \         min = arr[i];\n        }\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    return max;\n}\n</code>\n<|/ a tags=c#,algorithm,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static long nextSmallest(long[] arr) {\n\
    \    long min = arr[0];\n    long max = arr[0];\n    for (int i = 1; i < arr.length;\
    \ i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n\
    \        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n  \
    \  return max;\n}\n</code>\n<|/ a tags=c#,algorithm,arrays |>\n<| a tags=c#,algorithm,arrays\
    \ |>\n<code>\npublic static long nextSmallest(long[] arr) {\n    long min = arr[0];\n\
    \    long max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if\
    \ (arr[i] < min) {\n            min = arr[i];\n        }\n        if (arr[i] >\
    \ max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static long nextSmallest(long[]\
    \ arr) {\n    long min = arr[0];\n    long max = arr[0];\n    for (int i = 1;\
    \ i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n\
    \        }\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \    }\n    return max;\n}\n</code>\n<|/ a tags=c#,algorithm,arrays |>\n<| a tag\n\
    unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result =\
    \ candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptaqwbmap.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmptaqwbmap.d(20): Error: found `:` instead of statement\n/tmp/tmptaqwbmap.d(21):
    Error: found `i` when expecting `;` following statement\n/tmp/tmptaqwbmap.d(21):
    Error: found `:` instead of statement\n/tmp/tmptaqwbmap.d(30): Error: declaration
    expected, not `<`\n/tmp/tmptaqwbmap.d(37): Error: declaration expected, not `for`\n/tmp/tmptaqwbmap.d(37):
    Error: no identifier for declarator `i`\n/tmp/tmptaqwbmap.d(37): Error: declaration
    expected, not `<`\n/tmp/tmptaqwbmap.d(37): Error: no identifier for declarator
    `i`\n/tmp/tmptaqwbmap.d(37): Error: declaration expected, not `++`\n/tmp/tmptaqwbmap.d(40):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptaqwbmap.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int? smallest = std.min.index(lst);\n    if (smallest != null)\n    {\n   \
    \     int? second = std.min.index(lst, smallest);\n        if (second != null)\n\
    \            return lst[second];\n    }\n    return null;\n}\nunittest\n{\n  \
    \  alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpceeh3z_t.d(20): Error: no identifier for declarator `int`\n/tmp/tmpceeh3z_t.d(20):
    Error: found `?` instead of statement\n/tmp/tmpceeh3z_t.d(23): Error: no identifier
    for declarator `int`\n/tmp/tmpceeh3z_t.d(23): Error: found `?` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpceeh3z_t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    \n    int len = arr.length;\n    int min = 0;\n\
    \    \n    for (int i = 0; i < len; i++)\n    {\n        if (arr[i] < arr[min])\n\
    \        {\n            min = i;\n        }\n    }\n    \n    if (min == len -\
    \ 1)\n    {\n        return null;\n    }\n    \n    return arr[min+1];\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7p6h43p6.d(20): Error: undefined identifier `toArray`\n/tmp/tmp7p6h43p6.d(22):
    Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmp7p6h43p6.d(35):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp7p6h43p6.d(38):
    Error: cannot implicitly convert expression `arr[cast(ulong)(min + 1)]` of type
    `int` to `Nullable!long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7p6h43p6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i = 0;\n    int: j = 0;\n    int: k = 0;\n    int: smallest = lst[i];\n\
    \    \n    while (i < lst.len) {\n        if (lst[i] < smallest) {\n         \
    \   smallest = lst[i];\n            i = i + 1;\n        } else {\n           \
    \ j = i + 1;\n            while (j < lst.len) {\n                if (lst[j] <\
    \ smallest) {\n                    smallest = lst[j];\n                    k =\
    \ j;\n                } else {\n                    j = j + 1;\n             \
    \   }\n            }\n            if (k == lst.len) {\n                return\
    \ null;\n            }\n            lst[k] = smallest;\n            i = k;\n \
    \       }\n    }\n    return smallest;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8ip6z4i7.d(20): Error: no identifier for declarator `int`\n/tmp/tmp8ip6z4i7.d(20):
    Error: found `:` instead of statement\n/tmp/tmp8ip6z4i7.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp8ip6z4i7.d(21): Error: found `:` instead of statement\n/tmp/tmp8ip6z4i7.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp8ip6z4i7.d(22): Error: found
    `:` instead of statement\n/tmp/tmp8ip6z4i7.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp8ip6z4i7.d(23): Error: found `:` instead of statement\n/tmp/tmp8ip6z4i7.d(48):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ip6z4i7.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: bb;\n    int: cc;\n    int: dd;\n    int: ee;\n    int:\
    \ ff;\n    int: gg;\n    int: hh;\n    int: ii;\n    int: jj;\n    int: kk;\n\
    \    int: ll;\n    int: mm;\n    int: nn;\n    int: oo;\n    int: pp;\n    int:\
    \ qq;\n    int: rr;\n    int: ss;\n    int: tt;\n    int: uu;\n    int: vv;\n\
    \    int: ww;\n    int: xx;\n    int: yy;\n    int: zz;\n    int: aaa;\n    int:\
    \ bbb;\n    int: ccc;\n    int: ddd;\n    int: eee;\n    int: fff;\n    int: ggg;\n\
    \    int: hhh;\n    int: iii;\n    int: jjj;\n    int: kkk;\n    int: lll;\n \
    \   int: mmm;\n    int: nnn;\n    int: ooo;\n    int: ppp;\n    int: qqq;\n  \
    \  int: rrr;\n    int: sss;\n    int: ttt;\n    int: uuu;\n    int: vvv;\n   \
    \ int: www;\n    int: xxx;\n    int: yyy;\n    int: zzz;\n    int: aaaa;\n   \
    \ int: bbbb;\n    int: cccc;\n    int: dddd;\n    int: eeee;\n    int: ffff;\n\
    \    int: gggg;\n    int: hhhh;\n    int: iiii;\n    int: jjjj;\n    int: kkkk;\n\
    \    int: llll;\n    int: mmmm;\n    int: nnnn;\n    int: oooo;\n    \nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp963_laas.d(20): Error: no identifier for declarator `int`\n/tmp/tmp963_laas.d(20):
    Error: found `:` instead of statement\n/tmp/tmp963_laas.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp963_laas.d(21): Error: found `:` instead of statement\n/tmp/tmp963_laas.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp963_laas.d(22): Error: found
    `:` instead of statement\n/tmp/tmp963_laas.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp963_laas.d(23): Error: found `:` instead of statement\n/tmp/tmp963_laas.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp963_laas.d(24): Error: found
    `:` instead of statement\n/tmp/tmp963_laas.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp963_laas.d(25): Error: found `:` instead of statement\n/tmp/tmp963_laas.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp963_laas.d(26): Error: found
    `:` instead of statement\n/tmp/tmp963_laas.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp963_laas.d(27): Error: found `:` instead of statement\n/tmp/tmp963_laas.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp963_laas.d(28): Error: found
    `:` instead of statement\n/tmp/tmp963_laas.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp963_laas.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp963_laas.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    for(var i = 1; i <\
    \ lst.length; ++i)\n    {\n        if(lst[i] < smallest)\n        {\n        \
    \    smallest = lst[i];\n            smallest_index = i;\n        }\n    }\n \
    \   return smallest_index == lst.length ? null : lst[smallest_index + 1];\n}\n\
    unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result =\
    \ candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphe95khxb.d(20): Error: undefined identifier `var`\n/tmp/tmphe95khxb.d(21):
    Error: undefined identifier `var`\n/tmp/tmphe95khxb.d(22): Error: undefined identifier
    `var`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphe95khxb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: ab;\n    int: ac;\n    int: ad;\n    int: ae;\n    int:\
    \ af;\n    int: ag;\n    int: ah;\n    int: ai;\n    int: aj;\n    int: ak;\n\
    \    int: al;\n    int: am;\n    int: an;\n    int: ao;\n    int: ap;\n    int:\
    \ aq;\n    int: ar;\n    int: as;\n    int: at;\n    int: au;\n    int: av;\n\
    \    int: aw;\n    int: ax;\n    int: ay;\n    int: az;\n    int: ba;\n    int:\
    \ bb;\n    int: bc;\n    int: bd;\n    int: be;\n    int: bf;\n    int: bg;\n\
    \    int: bh;\n    int: bi;\n    int: bj;\n    int: bk;\n    int: bl;\n    int:\
    \ bm;\n    int: bn;\n    int: bo;\n    int: bp;\n    int: bq;\n    int: br;\n\
    \    int: bs;\n    int: bt;\n    int: bu;\n    int: bv;\n    int: bw;\n    int:\
    \ bx;\n    int: by;\n    int: bz;\n    int: ca;\n    int: cb;\n    int: cc;\n\
    \    int: cd;\n    int: ce;\n    int: cf;\n    int: cg;\n    int: ch;\n    int:\
    \ ci;\n    int: cj;\n    int: ck;\n    int: cl;\n    int: cm;\n    int: cn;\n\
    \    int: co;\n    int: cp;\n    int: cq;\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5p7j0ibp.d(20): Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(20):
    Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp5p7j0ibp.d(21): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(22): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(23): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(24): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(25): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(26): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(27): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(28): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5p7j0ibp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  long min;\n    foreach(min, lst)\n    {\n        if(min < lst[1])\n       \
    \     return min;\n    }\n    return null;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpptkxwupk.d(21): Error: no identifier for declarator `lst`\n/tmp/tmpptkxwupk.d(21):
    Error: found `)` when expecting `;`\n/tmp/tmpptkxwupk.d(26): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpptkxwupk.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: ab;\n    int: ac;\n    int: ad;\n    int: ae;\n    int:\
    \ af;\n    int: ag;\n    int: ah;\n    int: ai;\n    int: aj;\n    int: ak;\n\
    \    int: al;\n    int: am;\n    int: an;\n    int: ao;\n    int: ap;\n    int:\
    \ aq;\n    int: ar;\n    int: as;\n    int: at;\n    int: au;\n    int: av;\n\
    \    int: aw;\n    int: ax;\n    int: ay;\n    int: az;\n    int: ba;\n    int:\
    \ bb;\n    int: bc;\n    int: bd;\n    int: be;\n    int: bf;\n    int: bg;\n\
    \    int: bh;\n    int: bi;\n    int: bj;\n    int: bk;\n    int: bl;\n    int:\
    \ bm;\n    int: bn;\n    int: bo;\n    int: bp;\n    int: bq;\n    int: br;\n\
    \    int: bs;\n    int: bt;\n    int: bu;\n    int: bv;\n    int: bw;\n    int:\
    \ bx;\n    int: by;\n    int: bz;\n    int: ca;\n    int: cb;\n    int: cc;\n\
    \    int: cd;\n    int: ce;\n    int: cf;\n    int: cg;\n    int: ch;\n    int:\
    \ ci;\n    int: cj;\n    int: ck;\n    int: cl;\n    int: cm;\n    int: cn;\n\
    \    int: co;\n    int: cp;\n    int: cq;\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5p7j0ibp.d(20): Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(20):
    Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp5p7j0ibp.d(21): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(22): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(23): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(24): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(25): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(26): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(27): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(28): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5p7j0ibp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0)\n        return null;\n    var min2 = std.min2(lst);\n\
    \    var min1 = std.min(lst);\n    if (min2 == min1)\n        return null;\n \
    \   return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdvnk64ah.d(22): Error: undefined identifier `var`\n/tmp/tmpdvnk64ah.d(22):
    Error: undefined identifier `min2` in package `std`\n/tmp/tmpdvnk64ah.d(23): Error:
    undefined identifier `var`\n/tmp/tmpdvnk64ah.d(23): Error: undefined identifier
    `min` in package `std`\n/tmp/tmpdvnk64ah.d(21): Error: cannot implicitly convert
    expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpdvnk64ah.d(25):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdvnk64ah.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallestIndex = 0;\n    var smallestIndex2\
    \ = 0;\n    for(var i = 1; i < lst.Length; i++)\n    {\n        if(lst[i] < smallest)\n\
    \        {\n            smallestIndex = i;\n            smallest = lst[i];\n \
    \       }\n    }\n    for(var i = smallestIndex + 1; i < lst.Length; i++)\n  \
    \  {\n        if(lst[i] < smallest)\n        {\n            smallestIndex2 = i;\n\
    \            smallest = lst[i];\n        }\n    }\n    if(smallestIndex2 < lst.Length\
    \ - 1)\n    {\n        return smallest;\n    }\n    else\n    {\n        return\
    \ null;\n    }\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpammii18b.d(48): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpammii18b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    \n    for(i = 0; i < (l-1);\
    \ i++) {\n        for(j = i+1; j < l; j++) {\n            for(k = 0; k < l; k++)\
    \ {\n                if(lst[i] < lst[k]) {\n                    l = k;\n     \
    \               break;\n                }\n            }\n            if(l !=\
    \ k) {\n                break;\n            }\n        }\n        if(l != k) {\n\
    \            break;\n        }\n    }\n    \n    if(l == l) {\n        return\
    \ lst[l];\n    }\n    \n    return null;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1a9iju9a.d(20): Error: no identifier for declarator `int`\n/tmp/tmp1a9iju9a.d(20):
    Error: found `:` instead of statement\n/tmp/tmp1a9iju9a.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp1a9iju9a.d(21): Error: found `:` instead of statement\n/tmp/tmp1a9iju9a.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp1a9iju9a.d(22): Error: found
    `:` instead of statement\n/tmp/tmp1a9iju9a.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp1a9iju9a.d(23): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1a9iju9a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    if (arr.length == 0)\n        return null;\n\
    \    long min = arr[0];\n    long max = arr[0];\n    for(int i = 1; i < arr.length;\
    \ ++i)\n    {\n        if (arr[i] < min)\n            min = arr[i];\n        if\
    \ (arr[i] > max)\n            max = arr[i];\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqa3qo1mg.d(20): Error: undefined identifier `toArray`\n/tmp/tmpqa3qo1mg.d(22):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpqa3qo1mg.d(32):
    Error: cannot implicitly convert expression `max` of type `long` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqa3qo1mg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    \n    for (var i =\
    \ 1; i < lst.size(); i++) {\n        if (lst[i] < smallest) {\n            smallest\
    \ = lst[i];\n            smallest_index = i;\n        }\n    }\n    \n    if (smallest_index\
    \ != 0) {\n        return smallest;\n    }\n    else {\n        return null;\n\
    \    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgdocw2mi.d(20): Error: undefined identifier `var`\n/tmp/tmpgdocw2mi.d(21):
    Error: undefined identifier `var`\n/tmp/tmpgdocw2mi.d(23): Error: undefined identifier
    `var`\n/tmp/tmpgdocw2mi.d(23): Error: no property `size` for type `long[]`\n/tmp/tmpgdocw2mi.d(34):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgdocw2mi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: long;\n    var min_index: long;\n    var i: long;\n    min = lst[0];\n\
    \    min_index = 0;\n    for (i = 1; i < lst.len(); i++) {\n        if (lst[i]\
    \ < min) {\n            min = lst[i];\n            min_index = i;\n        }\n\
    \    }\n    if (min_index == lst.len()) return null;\n    return lst[min_index\
    \ + 1];\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n     \
    \   auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcvtgrijt.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmpcvtgrijt.d(20): Error: found `:` instead of statement\n/tmp/tmpcvtgrijt.d(21):
    Error: found `min_index` when expecting `;` following statement\n/tmp/tmpcvtgrijt.d(21):
    Error: found `:` instead of statement\n/tmp/tmpcvtgrijt.d(22): Error: found `i`
    when expecting `;` following statement\n/tmp/tmpcvtgrijt.d(22): Error: found `:`
    instead of statement\n/tmp/tmpcvtgrijt.d(34): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcvtgrijt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    for(var i = 1; i <\
    \ lst.lenth; i++){\n        if(lst[i] < smallest){\n            smallest = lst[i];\n\
    \            smallest_index = i;\n        }\n    }\n    return smallest_index\
    \ == lst.lenth ? null : lst[smallest_index + 1];\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyff2_fz6.d(20): Error: undefined identifier `var`\n/tmp/tmpyff2_fz6.d(21):
    Error: undefined identifier `var`\n/tmp/tmpyff2_fz6.d(22): Error: undefined identifier
    `var`\n/tmp/tmpyff2_fz6.d(22): Error: no property `lenth` for type `long[]`\n/tmp/tmpyff2_fz6.d(28):
    Error: no property `lenth` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpyff2_fz6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int? min = null;\n    foreach(i | i in lst)\n    {\n        if(min == null\
    \ || i < min)\n        {\n            min = i;\n        }\n    }\n    return min;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv2m00qki.d(20): Error: no identifier for declarator `int`\n/tmp/tmpv2m00qki.d(20):
    Error: found `?` instead of statement\n/tmp/tmpv2m00qki.d(21): Error: no identifier
    for declarator `i`\n/tmp/tmpv2m00qki.d(21): Error: found `|` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv2m00qki.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest=lst[0];\n    var secondSmallest=lst[1];\n    for(var i=2;i<lst.length;i++){\n\
    \        if(smallest>lst[i]){\n            smallest=lst[i];\n        }\n     \
    \   if(secondSmallest>smallest){\n            secondSmallest=smallest;\n     \
    \   }\n    }\n    return secondSmallest;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu0jhxodt.d(20): Error: undefined identifier `var`\n/tmp/tmpu0jhxodt.d(21):
    Error: undefined identifier `var`\n/tmp/tmpu0jhxodt.d(22): Error: undefined identifier
    `var`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0jhxodt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int len = arr.length;\n    int min = arr[0];\n\
    \    int minIndex = 0;\n    for(int i = 1; i < len; i++)\n    {\n        if(arr[i]\
    \ < min)\n        {\n            min = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return arr[minIndex];\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqeblobc.d(20): Error: undefined identifier `toArray`\n/tmp/tmpjqeblobc.d(21):
    Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmpjqeblobc.d(32):
    Error: cannot implicitly convert expression `arr[cast(ulong)minIndex]` of type
    `int` to `Nullable!long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqeblobc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = -1;\n    var i;\n    for(i\
    \ = 1; i < lst.length; ++i)\n    {\n        if(lst[i] < smallest)\n        {\n\
    \            smallest = lst[i];\n            smallest_index = i;\n        }\n\
    \    }\n    if(smallest_index != -1)\n    {\n        return smallest;\n    }\n\
    \    else\n    {\n        return null;\n    }\n}\n/*\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx399xfav.d(40): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpx399xfav.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: Nullable!(long);\n    var min_index: Nullable!(int);\n    var i: Nullable!(int);\n\
    \    var j: Nullable!(int);\n    \n    min = Nullable!(long);\n    min_index =\
    \ Nullable!(int);\n    \n    for (i = 0; i < lst.Length; i++) {\n        if (lst[i]\
    \ < min) {\n            min = lst[i];\n            min_index = i;\n        }\n\
    \    }\n    \n    if (min_index == lst.Length - 1) {\n        return null;\n \
    \   }\n    else {\n        return lst[min_index + 1];\n    }\n}\n/*\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp99b9u549.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmp99b9u549.d(20): Error: found `:` instead of statement\n/tmp/tmp99b9u549.d(21):
    Error: found `min_index` when expecting `;` following statement\n/tmp/tmp99b9u549.d(21):
    Error: found `:` instead of statement\n/tmp/tmp99b9u549.d(22): Error: found `i`
    when expecting `;` following statement\n/tmp/tmp99b9u549.d(22): Error: found `:`
    instead of statement\n/tmp/tmp99b9u549.d(23): Error: found `j` when expecting
    `;` following statement\n/tmp/tmp99b9u549.d(23): Error: found `:` instead of statement\n/tmp/tmp99b9u549.d(42):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp99b9u549.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    \n    for(i=0, j=lst.lenght-1;\
    \ i<j; i++, j--)\n    {\n        k = lst[i];\n        l = lst[j];\n        if(k<l)\n\
    \        {\n            lst[i] = l;\n            lst[j] = k;\n        }\n    }\n\
    \    return lst[j];\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaugbgbqn.d(20): Error: no identifier for declarator `int`\n/tmp/tmpaugbgbqn.d(20):
    Error: found `:` instead of statement\n/tmp/tmpaugbgbqn.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmpaugbgbqn.d(21): Error: found `:` instead of statement\n/tmp/tmpaugbgbqn.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmpaugbgbqn.d(22): Error: found
    `:` instead of statement\n/tmp/tmpaugbgbqn.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmpaugbgbqn.d(23): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaugbgbqn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    \n    for (var i =\
    \ 1; i < lst.Length; i++)\n    {\n        if (lst[i] < smallest)\n        {\n\
    \            smallest = lst[i];\n            smallest_index = i;\n        }\n\
    \    }\n    \n    if (smallest_index == lst.Length - 1)\n    {\n        return\
    \ null;\n    }\n    else\n    {\n        return lst[smallest_index + 1];\n   \
    \ }\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphoqsbhxt.d(41): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphoqsbhxt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    var i;\n    for(i\
    \ = 1; i < lst.Length; ++i)\n    {\n        if(lst[i] < smallest)\n        {\n\
    \            smallest = lst[i];\n            smallest_index = i;\n        }\n\
    \    }\n    return smallest_index == lst.Length - 1 ? null : lst[smallest_index\
    \ + 1];\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n     \
    \   auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz0yj6ypd.d(33): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpz0yj6ypd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: a;\n    int: b;\n    int: c;\n    int: d;\n    int: e;\n    int: f;\n\
    \    int: g;\n    int: h;\n    int: i;\n    int: j;\n    int: k;\n    int: l;\n\
    \    int: m;\n    int: n;\n    int: o;\n    int: p;\n    int: q;\n    int: r;\n\
    \    int: s;\n    int: t;\n    int: u;\n    int: v;\n    int: w;\n    int: x;\n\
    \    int: y;\n    int: z;\n    int: a;\n    int: b;\n    int: c;\n    int: d;\n\
    \    int: e;\n    int: f;\n    int: g;\n    int: h;\n    int: i;\n    int: j;\n\
    \    int: k;\n    int: l;\n    int: m;\n    int: n;\n    int: o;\n    int: p;\n\
    \    int: q;\n    int: r;\n    int: s;\n    int: t;\n    int: u;\n    int: v;\n\
    \    int: w;\n    int: x;\n    int: y;\n    int: z;\n    int: a;\n    int: b;\n\
    \    int: c;\n    int: d;\n    int: e;\n    int: f;\n    int: g;\n    int: h;\n\
    \    int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: a;\n    int: \nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6893m17u.d(20): Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(20):
    Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp6893m17u.d(21): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(22): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(23): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(24): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(25): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(26): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(27): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(28): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6893m17u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: bb;\n    int: cc;\n    int: dd;\n    int: ee;\n    int:\
    \ ff;\n    int: gg;\n    int: hh;\n    int: ii;\n    int: jj;\n    int: kk;\n\
    \    int: ll;\n    int: mm;\n    int: nn;\n    int: oo;\n    int: pp;\n    int:\
    \ qq;\n    int: rr;\n    int: ss;\n    int: tt;\n    int: uu;\n    int: vv;\n\
    \    int: ww;\n    int: xx;\n    int: yy;\n    int: zz;\n    int: aaa;\n    int:\
    \ bbb;\n    int: ccc;\n    int: ddd;\n    int: eee;\n    int: fff;\n    int: ggg;\n\
    \    int: hhh;\n    int: iii;\n    int: jjj;\n    int: kkk;\n    int: lll;\n \
    \   int: mmm;\n    int: nnn;\n    int: ooo;\n    int: ppp;\n    int: qqq;\n  \
    \  int: rrr;\n    int: sss;\n    int: ttt;\n    int: uuu;\n    int: vvv;\n   \
    \ int: www;\n    int: xxx;\n    int: yyy;\n    int: zzz;\n    int: aaa1;\n   \
    \ int: bbb1;\n    int: ccc1;\n    int: ddd1;\n    int: eee1;\n    int: fff;\n\
    \    int: ggg1;\n    int: hhh1;\n    int: iii1;\n    int: jjj1;\n    int: kkk1;\n\
    \    int: lll1;\n    int: mmm1;\n    int: nnn1;\n    int: oo\nunittest\n{\n  \
    \  alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmp35ymqa.d(20): Error: no identifier for declarator `int`\n/tmp/tmpmp35ymqa.d(20):
    Error: found `:` instead of statement\n/tmp/tmpmp35ymqa.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmpmp35ymqa.d(21): Error: found `:` instead of statement\n/tmp/tmpmp35ymqa.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmpmp35ymqa.d(22): Error: found
    `:` instead of statement\n/tmp/tmpmp35ymqa.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmpmp35ymqa.d(23): Error: found `:` instead of statement\n/tmp/tmpmp35ymqa.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmpmp35ymqa.d(24): Error: found
    `:` instead of statement\n/tmp/tmpmp35ymqa.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmpmp35ymqa.d(25): Error: found `:` instead of statement\n/tmp/tmpmp35ymqa.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmpmp35ymqa.d(26): Error: found
    `:` instead of statement\n/tmp/tmpmp35ymqa.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmpmp35ymqa.d(27): Error: found `:` instead of statement\n/tmp/tmpmp35ymqa.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmpmp35ymqa.d(28): Error: found
    `:` instead of statement\n/tmp/tmpmp35ymqa.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmpmp35ymqa.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmp35ymqa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest:long;\n    var index:int;\n    smallest = lst[0];\n    index =\
    \ 1;\n    while(index < lst.len) {\n        if(lst[index] < smallest) {\n    \
    \        smallest = lst[index];\n        }\n        index++;\n    }\n    return\
    \ smallest;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n \
    \       auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6w4ts1v3.d(20): Error: found `smallest` when expecting `;` following
    statement\n/tmp/tmp6w4ts1v3.d(20): Error: found `:` instead of statement\n/tmp/tmp6w4ts1v3.d(21):
    Error: found `index` when expecting `;` following statement\n/tmp/tmp6w4ts1v3.d(21):
    Error: found `:` instead of statement\n/tmp/tmp6w4ts1v3.d(32): Error: unterminated
    /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6w4ts1v3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = lst.asArray!int[];\n    \n    int min1 = arr[0];\n    int min2\
    \ = arr[0];\n    \n    for (int i = 1; i < arr.length; ++i) {\n        if (arr[i]\
    \ < min1) {\n            min2 = min1;\n            min1 = arr[i];\n        } else\
    \ if (arr[i] < min2) {\n            min2 = arr[i];\n        }\n    }\n    \n \
    \   return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt6gi4tsc.d(20): Error: no property `asArray` for type `long[]`\n/tmp/tmpt6gi4tsc.d(34):
    Error: cannot implicitly convert expression `min2` of type `int` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6gi4tsc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    for(var i = 1; i <\
    \ lst.length; ++i)\n    {\n        if(lst[i] < smallest)\n        {\n        \
    \    smallest = lst[i];\n            smallest_index = i;\n        }\n    }\n \
    \   return smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpov51uz3g.d(20): Error: undefined identifier `var`\n/tmp/tmpov51uz3g.d(21):
    Error: undefined identifier `var`\n/tmp/tmpov51uz3g.d(22): Error: undefined identifier
    `var`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpov51uz3g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int len = arr.length;\n    if (len == 0)\n \
    \       return null;\n    int minIdx = len - 1;\n    for (int i = len - 1; i >=\
    \ 0; i--)\n    {\n        if (arr[i] < arr[minIdx])\n        {\n            minIdx\
    \ = i;\n        }\n    }\n    return arr[minIdx];\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw41s824g.d(20): Error: undefined identifier `toArray`\n/tmp/tmpw41s824g.d(21):
    Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmpw41s824g.d(23):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpw41s824g.d(32):
    Error: cannot implicitly convert expression `arr[cast(ulong)minIdx]` of type `int`
    to `Nullable!long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw41s824g.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int len = arr.length;\n    if (len == 0)\n \
    \       return null;\n    int min = 0;\n    int max = len - 1;\n    while (min\
    \ < max) {\n        int mid = min + ((max - min) / 2);\n        if (arr[mid] <\
    \ arr[min])\n            min = mid + 1;\n        else if (arr[mid] > arr[max])\n\
    \            max = mid - 1;\n        else\n            return arr[mid];\n    }\n\
    \    return null;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgqk1yqwi.d(20): Error: undefined identifier `toArray`\n/tmp/tmpgqk1yqwi.d(21):
    Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmpgqk1yqwi.d(23):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpgqk1yqwi.d(33):
    Error: cannot implicitly convert expression `arr[cast(ulong)mid]` of type `int`
    to `Nullable!long`\n/tmp/tmpgqk1yqwi.d(35): Error: cannot implicitly convert expression
    `null` of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpgqk1yqwi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0)\n        return null;\n    \n    long smallest = lst[0];\n\
    \    long second = smallest;\n    \n    for (long i : lst)\n    {\n        if\
    \ (i < smallest)\n        {\n            second = smallest;\n            smallest\
    \ = i;\n        }\n        else if (i > smallest)\n        {\n            second\
    \ = i;\n        }\n    }\n    \n    return second;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwv0_ornz.d(26): Error: semicolon expected, not `:`\n/tmp/tmpwv0_ornz.d(26):
    Error: expression expected, not `:`\n/tmp/tmpwv0_ornz.d(26): Error: found `lst`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpwv0_ornz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.is_empty())\n        return null;\n    \n    var smallest = lst[0];\n\
    \    var smallest_index = 0;\n    \n    for (var i = 1; i < lst.size(); ++i)\n\
    \    {\n        if (lst[i] < smallest)\n        {\n            smallest = lst[i];\n\
    \            smallest_index = i;\n        }\n    }\n    \n    return smallest;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7yk81m0y.d(20): Error: no property `is_empty` for type `long[]`\n/tmp/tmp7yk81m0y.d(23):
    Error: undefined identifier `var`\n/tmp/tmp7yk81m0y.d(24): Error: undefined identifier
    `var`\n/tmp/tmp7yk81m0y.d(26): Error: undefined identifier `var`\n/tmp/tmp7yk81m0y.d(26):
    Error: no property `size` for type `long[]`\n/tmp/tmp7yk81m0y.d(21): Error: cannot
    implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7yk81m0y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: ab;\n    int: ac;\n    int: ad;\n    int: ae;\n    int:\
    \ af;\n    int: ag;\n    int: ah;\n    int: ai;\n    int: aj;\n    int: ak;\n\
    \    int: al;\n    int: am;\n    int: an;\n    int: ao;\n    int: ap;\n    int:\
    \ aq;\n    int: ar;\n    int: as;\n    int: at;\n    int: au;\n    int: av;\n\
    \    int: aw;\n    int: ax;\n    int: ay;\n    int: az;\n    int: ba;\n    int:\
    \ bb;\n    int: bc;\n    int: bd;\n    int: be;\n    int: bf;\n    int: bg;\n\
    \    int: bh;\n    int: bi;\n    int: bj;\n    int: bk;\n    int: bl;\n    int:\
    \ bm;\n    int: bn;\n    int: bo;\n    int: bp;\n    int: bq;\n    int: br;\n\
    \    int: bs;\n    int: bt;\n    int: bu;\n    int: bv;\n    int: bw;\n    int:\
    \ bx;\n    int: by;\n    int: bz;\n    int: ca;\n    int: cb;\n    int: cc;\n\
    \    int: cd;\n    int: ce;\n    int: cf;\n    int: cg;\n    int: ch;\n    int:\
    \ ci;\n    int: cj;\n    int: ck;\n    int: cl;\n    int: cm;\n    int: cn;\n\
    \    int: co;\n    int: cp;\n    int: cq;\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5p7j0ibp.d(20): Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(20):
    Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp5p7j0ibp.d(21): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(22): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(23): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(24): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(25): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(26): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(27): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(28): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5p7j0ibp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int? min = null;\n    foreach(i | i in lst)\n    {\n        if(min == null\
    \ || i < min)\n        {\n            min = i;\n        }\n    }\n    return min;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv2m00qki.d(20): Error: no identifier for declarator `int`\n/tmp/tmpv2m00qki.d(20):
    Error: found `?` instead of statement\n/tmp/tmpv2m00qki.d(21): Error: no identifier
    for declarator `i`\n/tmp/tmpv2m00qki.d(21): Error: found `|` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv2m00qki.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    long min = arr[0];\n    long max = arr[0];\n\
    \    for(int i = 1; i < arr.length; ++i)\n    {\n        if(arr[i] < min)\n  \
    \      {\n            min = arr[i];\n        }\n        else if(arr[i] > max)\n\
    \        {\n            max = arr[i];\n        }\n    }\n    return max == min\
    \ ? null : max;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n \
    \       auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsc27_lj3.d(20): Error: undefined identifier `toArray`\n/tmp/tmpsc27_lj3.d(34):
    Error: incompatible types for `(null) : (max)`: `typeof(null)` and `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsc27_lj3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    long min = arr[0];\n    long max = arr[0];\n\
    \    for(int i = 1; i < arr.length; ++i)\n    {\n        if(arr[i] < min)\n  \
    \      {\n            min = arr[i];\n        }\n        else if(arr[i] > max)\n\
    \        {\n            max = arr[i];\n        }\n    }\n    return max == min\
    \ ? null : max;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n \
    \       auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsc27_lj3.d(20): Error: undefined identifier `toArray`\n/tmp/tmpsc27_lj3.d(34):
    Error: incompatible types for `(null) : (max)`: `typeof(null)` and `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsc27_lj3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i, j, k;\n    int: min;\n    \n    min = lst[0];\n    i = 1;\n    \n \
    \   while (i < lst.len) {\n        min = lst[i];\n        \n        for (j = i;\
    \ j < lst.len; j++) {\n            if (lst[j] < min) {\n                min =\
    \ lst[j];\n                k = j;\n            }\n        }\n        \n      \
    \  if (min != lst[k]) {\n            lst[k] = min;\n        }\n        \n    \
    \    i += 1;\n    }\n    \n    return Nullable!(min);\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg_n2liif.d(20): Error: no identifier for declarator `int`\n/tmp/tmpg_n2liif.d(20):
    Error: found `:` instead of statement\n/tmp/tmpg_n2liif.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmpg_n2liif.d(21): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg_n2liif.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int? min = null;\n    foreach(i : lst, \n        i => \n        {\n       \
    \     if (min == null || i < min)\n            {\n                min = i;\n \
    \           }\n        }\n    );\n    return min;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwc9i3n9i.d(20): Error: no identifier for declarator `int`\n/tmp/tmpwc9i3n9i.d(20):
    Error: found `?` instead of statement\n/tmp/tmpwc9i3n9i.d(21): Error: no identifier
    for declarator `i`\n/tmp/tmpwc9i3n9i.d(21): Error: found `:` when expecting `;`\n/tmp/tmpwc9i3n9i.d(29):
    Error: use `{ }` for an empty statement, not `;`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpwc9i3n9i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int n = arr.length;\n    if (n == 0)\n     \
    \   return null;\n    int min = 0;\n    for (int i = 0; i < n; i++)\n    {\n \
    \       if (arr[i] < arr[min])\n            min = i;\n    }\n    if (min == n)\n\
    \        return null;\n    return arr[min+1];\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwm8q6uze.d(20): Error: undefined identifier `toArray`\n/tmp/tmpwm8q6uze.d(21):
    Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmpwm8q6uze.d(23):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpwm8q6uze.d(31):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpwm8q6uze.d(32):
    Error: cannot implicitly convert expression `arr[cast(ulong)(min + 1)]` of type
    `int` to `Nullable!long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwm8q6uze.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int? smallest = std.math.minmax(lst);\n    if (smallest.is_some) {\n      \
    \  return smallest;\n    }\n    return null;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5hksreqp.d(20): Error: no identifier for declarator `int`\n/tmp/tmp5hksreqp.d(20):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp5hksreqp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: ab;\n    int: ac;\n    int: ad;\n    int: ae;\n    int:\
    \ af;\n    int: ag;\n    int: ah;\n    int: ai;\n    int: aj;\n    int: ak;\n\
    \    int: al;\n    int: am;\n    int: an;\n    int: ao;\n    int: ap;\n    int:\
    \ aq;\n    int: ar;\n    int: as;\n    int: at;\n    int: au;\n    int: av;\n\
    \    int: aw;\n    int: ax;\n    int: ay;\n    int: az;\n    int: ba;\n    int:\
    \ bb;\n    int: bc;\n    int: bd;\n    int: be;\n    int: bf;\n    int: bg;\n\
    \    int: bh;\n    int: bi;\n    int: bj;\n    int: bk;\n    int: bl;\n    int:\
    \ bm;\n    int: bn;\n    int: bo;\n    int: bp;\n    int: bq;\n    int: br;\n\
    \    int: bs;\n    int: bt;\n    int: bu;\n    int: bv;\n    int: bw;\n    int:\
    \ bx;\n    int: by;\n    int: bz;\n    int: ca;\n    int: cb;\n    int: cc;\n\
    \    int: cd;\n    int: ce;\n    int: cf;\n    int: cg;\n    int: ch;\n    int:\
    \ ci;\n    int: cj;\n    int: ck;\n    int: cl;\n    int: cm;\n    int: cn;\n\
    \    int: co;\n    int: cp;\n    int: cq;\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5p7j0ibp.d(20): Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(20):
    Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp5p7j0ibp.d(21): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(22): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(23): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(24): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(25): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(26): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(27): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(28): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5p7j0ibp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int len = arr.length;\n    int min = 0;\n  \
    \  int max = len - 1;\n    while(min <= max) {\n        int mid = min + (max -\
    \ min) / 2;\n        if(arr[mid] < arr[min])\n            min = mid + 1;\n   \
    \     else if(arr[mid] > arr[max])\n            max = mid - 1;\n        else\n\
    \            return arr[mid];\n    }\n    return null;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,c#\
    \ |>\n<| a dscore=0 |>\n<code>\npublic int[] nextSmallest(int[] arr) {\n    int\
    \ n = arr.length;\n    int min = 0;\n    int max = n - 1;\n    while (min <= max)\
    \ {\n        int mid = min + (max - min) / 2;\n        if (arr[mid] < arr[min])\n\
    \            min = mid + 1;\n        else if (arr[mid] > arr[max])\n         \
    \   max = mid - 1;\n        else\n            return new int[] {arr[mid], mid};\n\
    \    }\n    return null;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,c# |>\n\
    <| a dscore=0 |>\n<code>\npublic int[] nextSmallest(int[] arr) {\n    int n =\
    \ arr.length;\n    int min = 0;\n    int max = n - 1;\n    while (min <= max)\
    \ {\n        int mid = min + (max - min) / 2;\n        if (arr[mid] < arr[min])\n\
    \            min = mid + 1;\n        else if (arr[mid] > arr[max])\n         \
    \   max = mid - 1;\n        else\n            return new int[] {arr[mid], mid};\n\
    \    }\n    return null;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,c# |>\n\
    <| c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int[] nextSmallest(int[]\
    \ arr) {\n    int n = arr.length;\n    int min = 0;\n    int max = n - 1;\n  \
    \  while (min <= max) {\n        int mid = min + (max - min) / 2;\n        if\
    \ (arr[mid] < arr[min])\n            min = mid + 1;\n        else if (arr[mid]\
    \ > arr[max])\n            max = mid - 1;\n        else\n            return new\
    \ int[] {arr[mid], mid};\n    }\n    return null;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,c#\
    \ |>\n<| a tags=arrays,sorting,algorithm,c# |>\n<code>\npublic int[] nextSmallest(int[]\
    \ arr) {\n    int n = \nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaojgvdse.d(35): Error: declaration expected, not `<`\n/tmp/tmpaojgvdse.d(43):
    Error: declaration expected, not `while`\n/tmp/tmpaojgvdse.d(45): Error: declaration
    expected, not `if`\n/tmp/tmpaojgvdse.d(47): Error: declaration expected, not `else`\n/tmp/tmpaojgvdse.d(49):
    Error: declaration expected, not `else`\n/tmp/tmpaojgvdse.d(51): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaojgvdse.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: Nullable!(long);\n    var min_index: Nullable!(int); \n    var i:\
    \ Nullable!(int); \n    \n    min = Nullable!(long);\n    min_index = Nullable!(int);\n\
    \    \n    for (i = 0; i < lst.Length; ++i)\n    {\n        if (lst[i] < min)\n\
    \        {\n            min = lst[i];\n            min_index = i;\n        }\n\
    \    }\n    \n    if (min_index != null)\n    {\n        return lst[min_index\
    \ + 1];\n    }\n    else\n    {\n        return null;\n    }\n}\n/*\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1yweset3.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmp1yweset3.d(20): Error: found `:` instead of statement\n/tmp/tmp1yweset3.d(21):
    Error: found `min_index` when expecting `;` following statement\n/tmp/tmp1yweset3.d(21):
    Error: found `:` instead of statement\n/tmp/tmp1yweset3.d(22): Error: found `i`
    when expecting `;` following statement\n/tmp/tmp1yweset3.d(22): Error: found `:`
    instead of statement\n/tmp/tmp1yweset3.d(45): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1yweset3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    \n    for each (var\
    \ i in lst)\n    {\n        if (i < smallest)\n        {\n            smallest\
    \ = i;\n            smallest_index = i;\n        }\n    }\n    \n    if (smallest_index\
    \ != 0)\n    {\n        return smallest;\n    }\n    else\n    {\n        return\
    \ null;\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrj3_xtw.d(23): Error: found `each` when expecting `(`\n/tmp/tmpkrj3_xtw.d(23):
    Error: found `in` when expecting `)`\n/tmp/tmpkrj3_xtw.d(23): Error: missing `{
    ... }` for function literal\n/tmp/tmpkrj3_xtw.d(23): Error: found `lst` when expecting
    `;` following statement\n/tmp/tmpkrj3_xtw.d(23): Error: expression expected, not
    `)`\n/tmp/tmpkrj3_xtw.d(24): Error: found `{` when expecting `;` following `for`
    condition\n/tmp/tmpkrj3_xtw.d(25): Error: expression expected, not `if`\n/tmp/tmpkrj3_xtw.d(26):
    Error: found `{` when expecting `)`\n/tmp/tmpkrj3_xtw.d(30): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkrj3_xtw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0)\n        return null;\n    var min = lst[0];\n    var\
    \ min_index = 0;\n    for (var i = 1; i < lst.length; ++i)\n    {\n        if\
    \ (lst[i] < min)\n        {\n            min = lst[i];\n            min_index\
    \ = i;\n        }\n    }\n    return min;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuo56sqty.d(22): Error: undefined identifier `var`\n/tmp/tmpuo56sqty.d(23):
    Error: undefined identifier `var`\n/tmp/tmpuo56sqty.d(24): Error: undefined identifier
    `var`\n/tmp/tmpuo56sqty.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpuo56sqty.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0)\n        return null;\n    var smallest = lst[0];\n  \
    \  var index = 0;\n    for (var i = 1; i < lst.length; ++i)\n    {\n        if\
    \ (lst[i] < smallest)\n        {\n            smallest = lst[i];\n           \
    \ index = i;\n        }\n    }\n    return smallest;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkjedj51y.d(22): Error: undefined identifier `var`\n/tmp/tmpkjedj51y.d(23):
    Error: undefined identifier `var`\n/tmp/tmpkjedj51y.d(24): Error: undefined identifier
    `var`\n/tmp/tmpkjedj51y.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkjedj51y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: long;\n    var min_index: long;\n    var i: long;\n    \n    if (lst.length\
    \ == 0)\n        return null;\n    \n    min = lst[0];\n    min_index = 0;\n \
    \   \n    for (i=1; i<lst.length; ++i)\n    {\n        if (lst[i] < min)\n   \
    \     {\n            min = lst[i];\n            min_index = i;\n        }\n  \
    \  }\n    \n    return lst[min_index];\n}\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjo17074p.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmpjo17074p.d(20): Error: found `:` instead of statement\n/tmp/tmpjo17074p.d(21):
    Error: found `min_index` when expecting `;` following statement\n/tmp/tmpjo17074p.d(21):
    Error: found `:` instead of statement\n/tmp/tmpjo17074p.d(22): Error: found `i`
    when expecting `;` following statement\n/tmp/tmpjo17074p.d(22): Error: found `:`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjo17074p.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: ab;\n    int: ac;\n    int: ad;\n    int: ae;\n    int:\
    \ af;\n    int: ag;\n    int: ah;\n    int: ai;\n    int: aj;\n    int: ak;\n\
    \    int: al;\n    int: am;\n    int: an;\n    int: ao;\n    int: ap;\n    int:\
    \ aq;\n    int: ar;\n    int: as;\n    int: at;\n    int: au;\n    int: av;\n\
    \    int: aw;\n    int: ax;\n    int: ay;\n    int: az;\n    int: ba;\n    int:\
    \ bb;\n    int: bc;\n    int: bd;\n    int: be;\n    int: bf;\n    int: bg;\n\
    \    int: bh;\n    int: bi;\n    int: bj;\n    int: bk;\n    int: bl;\n    int:\
    \ bm;\n    int: bn;\n    int: bo;\n    int: bp;\n    int: bq;\n    int: br;\n\
    \    int: bs;\n    int: bt;\n    int: bu;\n    int: bv;\n    int: bw;\n    int:\
    \ bx;\n    int: by;\n    int: bz;\n    int: ca;\n    int: cb;\n    int: cc;\n\
    \    int: cd;\n    int: ce;\n    int: cf;\n    int: cg;\n    int: ch;\n    int:\
    \ ci;\n    int: cj;\n    int: ck;\n    int: cl;\n    int: cm;\n    int: cn;\n\
    \    int: co;\n    int: cp;\n    int: cq;\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5p7j0ibp.d(20): Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(20):
    Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp5p7j0ibp.d(21): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(22): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(23): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(24): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(25): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(26): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(27): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(28): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5p7j0ibp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: ab;\n    int: ac;\n    int: ad;\n    int: ae;\n    int:\
    \ af;\n    int: ag;\n    int: ah;\n    int: ai;\n    int: aj;\n    int: ak;\n\
    \    int: al;\n    int: am;\n    int: an;\n    int: ao;\n    int: ap;\n    int:\
    \ aq;\n    int: ar;\n    int: as;\n    int: at;\n    int: au;\n    int: av;\n\
    \    int: aw;\n    int: ax;\n    int: ay;\n    int: az;\n    int: ba;\n    int:\
    \ bb;\n    int: bc;\n    int: bd;\n    int: be;\n    int: bf;\n    int: bg;\n\
    \    int: bh;\n    int: bi;\n    int: bj;\n    int: bk;\n    int: bl;\n    int:\
    \ bm;\n    int: bn;\n    int: bo;\n    int: bp;\n    int: bq;\n    int: br;\n\
    \    int: bs;\n    int: bt;\n    int: bu;\n    int: bv;\n    int: bw;\n    int:\
    \ bx;\n    int: by;\n    int: bz;\n    int: ca;\n    int: cb;\n    int: cc;\n\
    \    int: cd;\n    int: ce;\n    int: cf;\n    int: cg;\n    int: ch;\n    int:\
    \ ci;\n    int: cj;\n    int: ck;\n    int: cl;\n    int: cm;\n    int: cn;\n\
    \    int: co;\n    int: cp;\n    int: cq;\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5p7j0ibp.d(20): Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(20):
    Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp5p7j0ibp.d(21): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(22): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(23): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(24): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(25): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(26): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(27): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(28): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5p7j0ibp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int[] sorted = toArray(sort(arr));\n    int\
    \ index = sorted.length - 1;\n    while (index >= 0 && sorted[index] == arr[index])\
    \ {\n        index--;\n    }\n    if (index < 0) {\n        return null;\n   \
    \ }\n    return sorted[index + 1];\n}\n/*\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8xudllzl.d(31): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8xudllzl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: long;\n    var min_index: long;\n    var i: long;\n    \n    min =\
    \ lst[0];\n    min_index = 0;\n    \n    for (i = 1; i < lst.Length; i++) {\n\
    \        if (lst[i] < min) {\n            min = lst[i];\n            min_index\
    \ = i;\n        }\n    }\n    \n    if (min_index == lst.Length - 1) {\n     \
    \   return null;\n    }\n    else {\n        return lst[min_index + 1];\n    }\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt230fh4i.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmpt230fh4i.d(20): Error: found `:` instead of statement\n/tmp/tmpt230fh4i.d(21):
    Error: found `min_index` when expecting `;` following statement\n/tmp/tmpt230fh4i.d(21):
    Error: found `:` instead of statement\n/tmp/tmpt230fh4i.d(22): Error: found `i`
    when expecting `;` following statement\n/tmp/tmpt230fh4i.d(22): Error: found `:`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt230fh4i.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: ab;\n    int: ac;\n    int: ad;\n    int: ae;\n    int:\
    \ af;\n    int: ag;\n    int: ah;\n    int: ai;\n    int: aj;\n    int: ak;\n\
    \    int: al;\n    int: am;\n    int: an;\n    int: ao;\n    int: ap;\n    int:\
    \ aq;\n    int: ar;\n    int: as;\n    int: at;\n    int: au;\n    int: av;\n\
    \    int: aw;\n    int: ax;\n    int: ay;\n    int: az;\n    int: ba;\n    int:\
    \ bb;\n    int: bc;\n    int: bd;\n    int: be;\n    int: bf;\n    int: bg;\n\
    \    int: bh;\n    int: bi;\n    int: bj;\n    int: bk;\n    int: bl;\n    int:\
    \ bm;\n    int: bn;\n    int: bo;\n    int: bp;\n    int: bq;\n    int: br;\n\
    \    int: bs;\n    int: bt;\n    int: bu;\n    int: bv;\n    int: bw;\n    int:\
    \ bx;\n    int: by;\n    int: bz;\n    int: ca;\n    int: cb;\n    int: cc;\n\
    \    int: cd;\n    int: ce;\n    int: cf;\n    int: cg;\n    int: ch;\n    int:\
    \ ci;\n    int: cj;\n    int: ck;\n    int: cl;\n    int: cm;\n    int: cn;\n\
    \    int: co;\n    int: cp;\n    int: cq;\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5p7j0ibp.d(20): Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(20):
    Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp5p7j0ibp.d(21): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(22): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(23): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(24): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(25): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(26): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(27): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(28): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5p7j0ibp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    long min1 = arr[0];\n    long min2 = arr[0];\n\
    \    long min3 = arr[0];\n    for(int i = 1; i < arr.length; ++i)\n    {\n   \
    \     if(arr[i] < min1)\n        {\n            min2 = min1;\n            min1\
    \ = arr[i];\n        }\n        else if(arr[i] < min2)\n        {\n          \
    \  min2 = arr[i];\n        }\n        else if(arr[i] < min3)\n        {\n    \
    \        min3 = arr[i];\n        }\n    }\n    return min3;\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx6q26xw5.d(20): Error: undefined identifier `toArray`\n/tmp/tmpx6q26xw5.d(40):
    Error: cannot implicitly convert expression `min3` of type `long` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6q26xw5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: A;\n    int: B;\n    int: C;\n    int: D;\n    int: E;\n    int: F;\n\
    \    int: G;\n    int: H;\n    int: I;\n    int: J;\n    int: K;\n    int: L;\n\
    \    int: M;\n    int: N;\n    int: O;\n    int: P;\n    int: Q;\n    int: R;\n\
    \    int: S;\n    int: T;\n    int: U;\n    int: V;\n    int: W;\n    int: X;\n\
    \    int: Y;\n    int: Z;\n    int: a1;\n    int: a2;\n    int: a3;\n    int:\
    \ a4;\n    int: a5;\n    int: a6;\n    int: a7;\n    int: a8;\n    int: a9;\n\
    \    int: a10;\n    int: a11;\n    int: a12;\n    int: a13;\n    int: a14;\n \
    \   int: a15;\n    int: a16;\n    int: a17;\n    int: a18;\n    int: a19;\n  \
    \  int: a20;\n    int: a21;\n    int: a22;\n    int: a23;\n    int: a24;\n   \
    \ int: a25;\n    int: a26;\n    int: a27;\n    int: a28;\n    int: a29;\n    int:\
    \ a30;\n    int: a31;\n    int: a32;\n    int: a33;\n    int: a34;\n    int: a35;\n\
    \    int: a36;\n    int: a37;\n    int: a38;\n    int: a39;\n    int: a40;\n \
    \   int: a41;\n    int\nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7l2rlika.d(20): Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(20):
    Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp7l2rlika.d(21): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(22): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(23): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(24): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(25): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(26): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(27): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(28): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7l2rlika.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = lst;\n    int len = arr.length;\n    if (len == 0)\n        return\
    \ null;\n    int min = 0;\n    int max = len - 1;\n    while (min < max) {\n \
    \       int mid = min + ((max - min) / 2);\n        if (arr[mid] < arr[min])\n\
    \            min = mid + 1;\n        else if (arr[mid] > arr[max])\n         \
    \   max = mid - 1;\n        else\n            return arr[mid];\n    }\n    return\
    \ null;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp710cskvl.d(20): Error: cannot implicitly convert expression
    `lst` of type `long[]` to `int[]`\n/tmp/tmp710cskvl.d(21): Error: cannot implicitly
    convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmp710cskvl.d(23):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp710cskvl.d(33):
    Error: cannot implicitly convert expression `arr[cast(ulong)mid]` of type `int`
    to `Nullable!long`\n/tmp/tmp710cskvl.d(35): Error: cannot implicitly convert expression
    `null` of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp710cskvl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    \n    for (i in 1..lst.len)\
    \ {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n      \
    \      smallest_index = i;\n        }\n    }\n    \n    if (smallest_index !=\
    \ 0) {\n        return smallest;\n    } else {\n        return null;\n    }\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1fzzqry3.d(23): Error: found `..` when expecting `;` following
    statement\n/tmp/tmp1fzzqry3.d(23): Error: found `)` when expecting `;` following
    `for` condition\n/tmp/tmp1fzzqry3.d(30): Error: found `if` when expecting `)`\n/tmp/tmp1fzzqry3.d(30):
    Error: found `!=` when expecting `)`\n/tmp/tmp1fzzqry3.d(30): Error: missing `{
    ... }` for function literal\n/tmp/tmp1fzzqry3.d(30): Error: found `0` when expecting
    `;` following statement\n/tmp/tmp1fzzqry3.d(30): Error: found `)` instead of statement\n/tmp/tmp1fzzqry3.d(32):
    Error: declaration expected, not `else`\n/tmp/tmp1fzzqry3.d(34): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1fzzqry3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  forall(lst.begin(), lst.end(), [&](long x){\n        return x < lst.back();\n\
    \    });\n    \n    forall(lst.begin(), lst.end(), [&](long x){\n        if(x\
    \ < lst.back())\n        {\n            lst.back() = x;\n            return true;\n\
    \        }\n    });\n    return null;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuivqf5g_.d(20): Error: expression expected, not `]`\n/tmp/tmpuivqf5g_.d(20):
    Error: found `x` when expecting `.` following long\n/tmp/tmpuivqf5g_.d(20): Error:
    found `)` when expecting identifier following `long`.\n/tmp/tmpuivqf5g_.d(20):
    Error: found `{` when expecting `,`\n/tmp/tmpuivqf5g_.d(21): Error: expression
    expected, not `return`\n/tmp/tmpuivqf5g_.d(21): Error: found `x` when expecting
    `,`\n/tmp/tmpuivqf5g_.d(21): Error: expression expected, not `<`\n/tmp/tmpuivqf5g_.d(21):
    Error: found `lst` when expecting `,`\n/tmp/tmpuivqf5g_.d(21): Error: found `;`
    when expecting `,`\n/tmp/tmpuivqf5g_.d(22): Error: expression expected, not `}`\n/tmp/tmpuivqf5g_.d(22):
    Error: found `;` when expecting `,`\n/tmp/tmpuivqf5g_.d(24): Error: expression
    expected, not `]`\n/tmp/tmpuivqf5g_.d(24): Error: found `x` when expecting `.`
    following long\n/tmp/tmpuivqf5g_.d(24): Error: found `)` when expecting identifier
    following `long`.\n/tmp/tmpuivqf5g_.d(24): Error: found `{` when expecting `,`\n/tmp/tmpuivqf5g_.d(25):
    Error: expression expected, not `if`\n/tmp/tmpuivqf5g_.d(26): Error: found `{`
    when expecting `,`\n/tmp/tmpuivqf5g_.d(27): Error: found `;` when expecting `,`\n/tmp/tmpuivqf5g_.d(28):
    Error: expression expected, not `return`\n/tmp/tmpuivqf5g_.d(28): Error: found
    `true` when expecting `,`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuivqf5g_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: Nullable!(long);\n    var min_index: Nullable!(int);\n    var i: Nullable!(int);\n\
    \    var j: Nullable!(int);\n    var k: Nullable!(int);\n    \n    min = Nullable!(long);\n\
    \    min_index = Nullable!(int);\n    \n    for (i = 0; i < lst.Length; i++) {\n\
    \        if (lst[i] < min) {\n            min = lst[i];\n            min_index\
    \ = i;\n        }\n    }\n    \n    if (min_index == lst.Length - 1) {\n     \
    \   return null;\n    }\n    \n    for (j = min_index + 1; j < lst.Length; j++)\
    \ {\n        if (lst[j] < min) {\n            min = lst[j];\n            min_index\
    \ = j;\n        }\n    }\n    \n    if (min_index == lst.Length - 1) {\n     \
    \   return null;\n    }\n    \n    for (k = 0; k < lst.Length; k++) {\n      \
    \  if (lst[k] == min) {\n            return lst[min_index + 1];\n        }\n \
    \   }\n    \n    return null;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr6ezpajb.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmpr6ezpajb.d(20): Error: found `:` instead of statement\n/tmp/tmpr6ezpajb.d(21):
    Error: found `min_index` when expecting `;` following statement\n/tmp/tmpr6ezpajb.d(21):
    Error: found `:` instead of statement\n/tmp/tmpr6ezpajb.d(22): Error: found `i`
    when expecting `;` following statement\n/tmp/tmpr6ezpajb.d(22): Error: found `:`
    instead of statement\n/tmp/tmpr6ezpajb.d(23): Error: found `j` when expecting
    `;` following statement\n/tmp/tmpr6ezpajb.d(23): Error: found `:` instead of statement\n/tmp/tmpr6ezpajb.d(24):
    Error: found `k` when expecting `;` following statement\n/tmp/tmpr6ezpajb.d(24):
    Error: found `:` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpr6ezpajb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: ab;\n    int: ac;\n    int: ad;\n    int: ae;\n    int:\
    \ af;\n    int: ag;\n    int: ah;\n    int: ai;\n    int: aj;\n    int: ak;\n\
    \    int: al;\n    int: am;\n    int: an;\n    int: ao;\n    int: ap;\n    int:\
    \ aq;\n    int: ar;\n    int: as;\n    int: at;\n    int: au;\n    int: av;\n\
    \    int: aw;\n    int: ax;\n    int: ay;\n    int: az;\n    int: ba;\n    int:\
    \ bb;\n    int: bc;\n    int: bd;\n    int: be;\n    int: bf;\n    int: bg;\n\
    \    int: bh;\n    int: bi;\n    int: bj;\n    int: bk;\n    int: bl;\n    int:\
    \ bm;\n    int: bn;\n    int: bo;\n    int: bp;\n    int: bq;\n    int: br;\n\
    \    int: bs;\n    int: bt;\n    int: bu;\n    int: bv;\n    int: bw;\n    int:\
    \ bx;\n    int: by;\n    int: bz;\n    int: ca;\n    int: cb;\n    int: cc;\n\
    \    int: cd;\n    int: ce;\n    int: cf;\n    int: cg;\n    int: ch;\n    int:\
    \ ci;\n    int: cj;\n    int: ck;\n    int: cl;\n    int: cm;\n    int: cn;\n\
    \    int: co;\n    int: cp;\n    int: cq;\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5p7j0ibp.d(20): Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(20):
    Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp5p7j0ibp.d(21): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(22): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(23): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(24): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(25): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(26): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(27): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(28): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5p7j0ibp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i; \n    long: min; \n    \n    for(i = 0; i < lst.len; i = i + 1) {\n\
    \        if(lst[i] < min) {\n            min = lst[i];\n        }\n    }\n   \
    \ return min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n   \
    \     auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjq24ncy1.d(20): Error: no identifier for declarator `int`\n/tmp/tmpjq24ncy1.d(20):
    Error: found `:` instead of statement\n/tmp/tmpjq24ncy1.d(21): Error: no identifier
    for declarator `long`\n/tmp/tmpjq24ncy1.d(21): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjq24ncy1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int len = arr.length;\n    if (len < 2) return\
    \ null;\n    int min1 = arr[0];\n    int min2 = arr[1];\n    for (int i = 2; i\
    \ < len; ++i)\n    {\n        int curr = arr[i];\n        if (curr < min1)\n \
    \       {\n            min2 = min1;\n            min1 = curr;\n        }\n   \
    \     else if (curr < min2)\n        {\n            min2 = curr;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplo8z7lyz.d(20): Error: undefined identifier `toArray`\n/tmp/tmplo8z7lyz.d(21):
    Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmplo8z7lyz.d(22):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmplo8z7lyz.d(38):
    Error: cannot implicitly convert expression `min2` of type `int` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplo8z7lyz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int len = arr.length;\n    if (len == 0)\n \
    \       return null;\n    int min = 0;\n    int max = len - 1;\n    while (min\
    \ < max) {\n        int mid = (min + max) / 2;\n        if (arr[mid] < arr[min])\n\
    \            min = mid + 1;\n        else if (arr[mid] > arr[max])\n         \
    \   max = mid - 1;\n        else\n            return arr[mid];\n    }\n    return\
    \ arr[min];\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n     \
    \   auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl9s0mml_.d(20): Error: undefined identifier `toArray`\n/tmp/tmpl9s0mml_.d(21):
    Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmpl9s0mml_.d(23):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpl9s0mml_.d(33):
    Error: cannot implicitly convert expression `arr[cast(ulong)mid]` of type `int`
    to `Nullable!long`\n/tmp/tmpl9s0mml_.d(35): Error: cannot implicitly convert expression
    `arr[cast(ulong)min]` of type `int` to `Nullable!long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpl9s0mml_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i, j, k;\n    long: min;\n    \n    for(i = 0; i < lst.len; i = i + 1)\
    \ {\n        min = lst[i];\n        for(j = i + 1; j < lst.len; j = j + 1) {\n\
    \            if(lst[j] < min) {\n                min = lst[j];\n             \
    \   k = j;\n            }\n        }\n        if(min != lst[i]) {\n          \
    \  lst[k] = lst[i];\n            lst[i] = min;\n        }\n    }\n    return lst[i];\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppybbl_un.d(20): Error: no identifier for declarator `int`\n/tmp/tmppybbl_un.d(20):
    Error: found `:` instead of statement\n/tmp/tmppybbl_un.d(21): Error: no identifier
    for declarator `long`\n/tmp/tmppybbl_un.d(21): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppybbl_un.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: long;\n    var min_index: long;\n    var i: long;\n    var j: long;\n\
    \    var k: long;\n    \n    min = lst[0];\n    min_index = 0;\n    for (i = 1;\
    \ i < lst.Length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n\
    \            min_index = i;\n        }\n    }\n    \n    if (min_index == lst.Length\
    \ - 1) {\n        return null;\n    }\n    \n    for (i = min_index + 1; i < lst.Length;\
    \ i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n           \
    \ min_index = i;\n        }\n    }\n    \n    return min;\n}\nunittest\n{\n  \
    \  alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt2ugi58g.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmpt2ugi58g.d(20): Error: found `:` instead of statement\n/tmp/tmpt2ugi58g.d(21):
    Error: found `min_index` when expecting `;` following statement\n/tmp/tmpt2ugi58g.d(21):
    Error: found `:` instead of statement\n/tmp/tmpt2ugi58g.d(22): Error: found `i`
    when expecting `;` following statement\n/tmp/tmpt2ugi58g.d(22): Error: found `:`
    instead of statement\n/tmp/tmpt2ugi58g.d(23): Error: found `j` when expecting
    `;` following statement\n/tmp/tmpt2ugi58g.d(23): Error: found `:` instead of statement\n/tmp/tmpt2ugi58g.d(24):
    Error: found `k` when expecting `;` following statement\n/tmp/tmpt2ugi58g.d(24):
    Error: found `:` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpt2ugi58g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    \n    for(i=0, j=lst.Length-1;\
    \ i<j; i++, j--)\n    {\n        k = lst[i];\n        l = lst[j];\n        if(k<l)\n\
    \        {\n            lst[i] = l;\n            lst[j] = k;\n        }\n    }\n\
    \    return lst[j];\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphloje7zn.d(20): Error: no identifier for declarator `int`\n/tmp/tmphloje7zn.d(20):
    Error: found `:` instead of statement\n/tmp/tmphloje7zn.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmphloje7zn.d(21): Error: found `:` instead of statement\n/tmp/tmphloje7zn.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmphloje7zn.d(22): Error: found
    `:` instead of statement\n/tmp/tmphloje7zn.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmphloje7zn.d(23): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphloje7zn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: ab;\n    int: ac;\n    int: ad;\n    int: ae;\n    int:\
    \ af;\n    int: ag;\n    int: ah;\n    int: ai;\n    int: aj;\n    int: ak;\n\
    \    int: al;\n    int: am;\n    int: an;\n    int: ao;\n    int: ap;\n    int:\
    \ aq;\n    int: ar;\n    int: as;\n    int: at;\n    int: au;\n    int: av;\n\
    \    int: aw;\n    int: ax;\n    int: ay;\n    int: az;\n    int: ba;\n    int:\
    \ bb;\n    int: bc;\n    int: bd;\n    int: be;\n    int: bf;\n    int: bg;\n\
    \    int: bh;\n    int: bi;\n    int: bj;\n    int: bk;\n    int: bl;\n    int:\
    \ bm;\n    int: bn;\n    int: bo;\n    int: bp;\n    int: bq;\n    int: br;\n\
    \    int: bs;\n    int: bt;\n    int: bu;\n    int: bv;\n    int: bw;\n    int:\
    \ bx;\n    int: by;\n    int: bz;\n    int: ca;\n    int: cb;\n    int: cc;\n\
    \    int: cd;\n    int: ce;\n    int: cf;\n    int: cg;\n    int: ch;\n    int:\
    \ ci;\n    int: cj;\n    int: ck;\n    int: cl;\n    int: cm;\n    int: cn;\n\
    \    int: co;\n    int: cp;\n    int: cq;\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5p7j0ibp.d(20): Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(20):
    Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp5p7j0ibp.d(21): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(22): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(23): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(24): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(25): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(26): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(27): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(28): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5p7j0ibp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: bb;\n    int: cc;\n    int: dd;\n    int: ee;\n    int:\
    \ ff;\n    int: gg;\n    int: hh;\n    int: ii;\n    int: jj;\n    int: kk;\n\
    \    int: ll;\n    int: mm;\n    int: nn;\n    int: oo;\n    int: pp;\n    int:\
    \ qq;\n    int: rr;\n    int: ss;\n    int: tt;\n    int: uu;\n    int: vv;\n\
    \    int: ww;\n    int: xx;\n    int: yy;\n    int: zz;\n    int: aaa;\n    int:\
    \ bbb;\n    int: ccc;\n    int: ddd;\n    int: eee;\n    int: fff;\n    int: ggg;\n\
    \    int: hhh;\n    int: iii;\n    int: jjj;\n    int: kkk;\n    int: lll;\n \
    \   int: mmm;\n    int: nnn;\n    int: ooo;\n    int: ppp;\n    int: qqq;\n  \
    \  int: rrr;\n    int: sss;\n    int: ttt;\n    int: uuu;\n    int: vvv;\n   \
    \ int: www;\n    int: xxx;\n    int: yyy;\n    int: zzz;\n    int: aaa1;\n   \
    \ int: bbb1;\n    int: ccc1;\n    int: ddd1;\n    int: eee1;\n    int: fff;\n\
    \    int: ggg1;\n    int: hhh1;\n    int: iii1;\n    int: jjj1;\n    int: kkk1;\n\
    \    int: lll1;\n    int: mmm1;\n    int: nnn1;\n    int: oo\nunittest\n{\n  \
    \  alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmp35ymqa.d(20): Error: no identifier for declarator `int`\n/tmp/tmpmp35ymqa.d(20):
    Error: found `:` instead of statement\n/tmp/tmpmp35ymqa.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmpmp35ymqa.d(21): Error: found `:` instead of statement\n/tmp/tmpmp35ymqa.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmpmp35ymqa.d(22): Error: found
    `:` instead of statement\n/tmp/tmpmp35ymqa.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmpmp35ymqa.d(23): Error: found `:` instead of statement\n/tmp/tmpmp35ymqa.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmpmp35ymqa.d(24): Error: found
    `:` instead of statement\n/tmp/tmpmp35ymqa.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmpmp35ymqa.d(25): Error: found `:` instead of statement\n/tmp/tmpmp35ymqa.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmpmp35ymqa.d(26): Error: found
    `:` instead of statement\n/tmp/tmpmp35ymqa.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmpmp35ymqa.d(27): Error: found `:` instead of statement\n/tmp/tmpmp35ymqa.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmpmp35ymqa.d(28): Error: found
    `:` instead of statement\n/tmp/tmpmp35ymqa.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmpmp35ymqa.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmp35ymqa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var index = 0;\n    foreach(i : lst, j : i) { \n\
    \        if (j < smallest) {\n            smallest = j;\n            index = i;\n\
    \        }\n    }\n    return smallest;\n}\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa6fbgmcd.d(22): Error: no identifier for declarator `i`\n/tmp/tmpa6fbgmcd.d(22):
    Error: found `:` when expecting `;`\n/tmp/tmpa6fbgmcd.d(22): Error: found `:`
    when expecting `)`\n/tmp/tmpa6fbgmcd.d(22): Error: found `)` when expecting `;`
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa6fbgmcd.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0)\n        return null;\n    var minVal = lst[0];\n    var\
    \ minIndex = 0;\n    for (var i = 1; i < lst.length; ++i)\n    {\n        if (lst[i]\
    \ < minVal)\n        {\n            minVal = lst[i];\n            minIndex = i;\n\
    \        }\n    }\n    return lst[minIndex];\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmj18f2te.d(22): Error: undefined identifier `var`\n/tmp/tmpmj18f2te.d(23):
    Error: undefined identifier `var`\n/tmp/tmpmj18f2te.d(24): Error: undefined identifier
    `var`\n/tmp/tmpmj18f2te.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpmj18f2te.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    \n    for(i = 0; i < (l-1);\
    \ ++i)\n    {\n        for(j = i+1; j < l; ++j)\n        {\n            k = j;\n\
    \            while(k != i)\n            {\n                if(lst[k] < lst[j])\n\
    \                {\n                    k = j;\n                }\n          \
    \      else\n                {\n                    k = k;\n                }\n\
    \            }\n            if(lst[k] < lst[i])\n            {\n             \
    \   lst[i] = lst[k];\n                lst[k] = i;\n            }\n        }\n\
    \    }\n    \n    if(lst[l-1] == lst[l-2])\n    {\n        return lst[l-1];\n\
    \    }\n    else\n    {\n        return null;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6ul7e8cv.d(20): Error: no identifier for declarator `int`\n/tmp/tmp6ul7e8cv.d(20):
    Error: found `:` instead of statement\n/tmp/tmp6ul7e8cv.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp6ul7e8cv.d(21): Error: found `:` instead of statement\n/tmp/tmp6ul7e8cv.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp6ul7e8cv.d(22): Error: found
    `:` instead of statement\n/tmp/tmp6ul7e8cv.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp6ul7e8cv.d(23): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ul7e8cv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = -1;\n    var smallest_value\
    \ = null;\n    \n    for (var i = 1; i < lst.size(); ++i)\n    {\n        var\
    \ value = lst[i];\n        if (value < smallest)\n        {\n            smallest\
    \ = value;\n            smallest_index = i;\n            smallest_value = smallest;\n\
    \        }\n    }\n    \n    if (smallest_index != -1)\n    {\n        return\
    \ smallest_value;\n    }\n    else\n    {\n        return null;\n    }\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpezrzc8zg.d(20): Error: undefined identifier `var`\n/tmp/tmpezrzc8zg.d(21):
    Error: undefined identifier `var`\n/tmp/tmpezrzc8zg.d(22): Error: undefined identifier
    `var`\n/tmp/tmpezrzc8zg.d(24): Error: undefined identifier `var`\n/tmp/tmpezrzc8zg.d(24):
    Error: no property `size` for type `long[]`\n/tmp/tmpezrzc8zg.d(26): Error: undefined
    identifier `var`\n/tmp/tmpezrzc8zg.d(41): Error: cannot implicitly convert expression
    `null` of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpezrzc8zg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = lst.asArray!int[];\n    int[] sorted = arr.sort();\n    if (sorted.length\
    \ == 0)\n        return null;\n    return sorted[1];\n}\n/*\nunittest\n{\n   \
    \ alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmde2u5hx.d(26): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmde2u5hx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: ab;\n    int: ac;\n    int: ad;\n    int: ae;\n    int:\
    \ af;\n    int: ag;\n    int: ah;\n    int: ai;\n    int: aj;\n    int: ak;\n\
    \    int: al;\n    int: am;\n    int: an;\n    int: ao;\n    int: ap;\n    int:\
    \ aq;\n    int: ar;\n    int: as;\n    int: at;\n    int: au;\n    int: av;\n\
    \    int: aw;\n    int: ax;\n    int: ay;\n    int: az;\n    int: ba;\n    int:\
    \ bb;\n    int: bc;\n    int: bd;\n    int: be;\n    int: bf;\n    int: bg;\n\
    \    int: bh;\n    int: bi;\n    int: bj;\n    int: bk;\n    int: bl;\n    int:\
    \ bm;\n    int: bn;\n    int: bo;\n    int: bp;\n    int: bq;\n    int: br;\n\
    \    int: bs;\n    int: bt;\n    int: bu;\n    int: bv;\n    int: bw;\n    int:\
    \ bx;\n    int: by;\n    int: bz;\n    int: ca;\n    int: cb;\n    int: cc;\n\
    \    int: cd;\n    int: ce;\n    int: cf;\n    int: cg;\n    int: ch;\n    int:\
    \ ci;\n    int: cj;\n    int: ck;\n    int: cl;\n    int: cm;\n    int: cn;\n\
    \    int: co;\n    int: cp;\n    int: cq;\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5p7j0ibp.d(20): Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(20):
    Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp5p7j0ibp.d(21): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(22): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(23): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(24): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(25): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(26): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(27): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(28): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5p7j0ibp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var secondSmallest = lst[1];\n    \n    var i =\
    \ 1;\n    \n    while(i < lst.lenth) {\n        if(smallest>lst[i]) {\n      \
    \      secondSmallest = lst[i];\n        }\n        i++;\n    }\n    \n    return\
    \ secondSmallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm53sxqmm.d(20): Error: undefined identifier `var`\n/tmp/tmpm53sxqmm.d(21):
    Error: undefined identifier `var`\n/tmp/tmpm53sxqmm.d(23): Error: undefined identifier
    `var`\n/tmp/tmpm53sxqmm.d(25): Error: no property `lenth` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm53sxqmm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int? smallest = std.min.index(lst);\n    if (smallest != null)\n        return\
    \ lst[smallest];\n    else\n        return null;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps03fpt0h.d(20): Error: no identifier for declarator `int`\n/tmp/tmps03fpt0h.d(20):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmps03fpt0h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i, j, k;\n    long: min;\n    \n    for(i=0, j=lst.length-1, k=lst.length-1;\
    \ i<j; k--, i++){\n        if(lst[i] < lst[k]){\n            min = lst[i];\n \
    \           lst[i] = lst[k];\n            lst[k] = min;\n        }\n    }\n  \
    \  return lst[i];\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeziyvs94.d(20): Error: no identifier for declarator `int`\n/tmp/tmpeziyvs94.d(20):
    Error: found `:` instead of statement\n/tmp/tmpeziyvs94.d(21): Error: no identifier
    for declarator `long`\n/tmp/tmpeziyvs94.d(21): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeziyvs94.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int len = arr.length;\n    if (len == 0)\n \
    \       return null;\n    int min1 = arr[0];\n    int min2 = arr[0];\n    for\
    \ (int i = 1; i < len; i++)\n    {\n        if (arr[i] < min1)\n        {\n  \
    \          min2 = min1;\n            min1 = arr[i];\n        }\n        else if\
    \ (arr[i] < min2)\n        {\n            min2 = arr[i];\n        }\n    }\n \
    \   return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc1gvpcow.d(20): Error: undefined identifier `toArray`\n/tmp/tmpc1gvpcow.d(21):
    Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmpc1gvpcow.d(23):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpc1gvpcow.d(38):
    Error: cannot implicitly convert expression `min2` of type `int` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1gvpcow.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: long;\n    var min_index: long;\n    var i: long;\n    \n    for (i\
    \ = 0; i < lst.Length; i++) {\n        if (lst[i] == null) {\n            return\
    \ null;\n        }\n        if (lst[i] < min) {\n            min = lst[i];\n \
    \           min_index = i;\n        }\n    }\n    return lst[min_index];\n}\n\
    unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result =\
    \ candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppgwvwk8d.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmppgwvwk8d.d(20): Error: found `:` instead of statement\n/tmp/tmppgwvwk8d.d(21):
    Error: found `min_index` when expecting `;` following statement\n/tmp/tmppgwvwk8d.d(21):
    Error: found `:` instead of statement\n/tmp/tmppgwvwk8d.d(22): Error: found `i`
    when expecting `;` following statement\n/tmp/tmppgwvwk8d.d(22): Error: found `:`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppgwvwk8d.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int[] sorted = sort(arr);\n    int index = sorted.length\
    \ - 1;\n    while (index >= 0 && sorted[index] == arr[index]) {\n        index--;\n\
    \    }\n    if (index >= 0) {\n        return sorted[index + 1];\n    } else {\n\
    \        return null;\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2kepqwbs.d(20): Error: undefined identifier `toArray`\n/tmp/tmp2kepqwbs.d(21):
    Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp2kepqwbs.d(22):
    Error: cannot implicitly convert expression `sorted.length - 1LU` of type `ulong`
    to `int`\n/tmp/tmp2kepqwbs.d(27): Error: cannot implicitly convert expression
    `sorted[cast(ulong)(index + 1)]` of type `int` to `Nullable!long`\n/tmp/tmp2kepqwbs.d(29):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2kepqwbs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: Nullable!(long);\n    var min_index: Nullable!(int);\n    var i: Nullable!(int);\n\
    \    var j: Nullable!(int);\n    \n    min = Nullable!(long);\n    min_index =\
    \ Nullable!(int);\n    \n    for (i = 0; i < lst.Length; i++) {\n        if (lst[i]\
    \ < min) {\n            min = lst[i];\n            min_index = i;\n        }\n\
    \    }\n    \n    if (min_index == lst.Length - 1) {\n        return null;\n \
    \   }\n    \n    for (j = min_index + 1; j < lst.Length; j++) {\n        if (lst[j]\
    \ < min) {\n            min = lst[j];\n        }\n    }\n    \n    return min;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp44r3c5tf.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmp44r3c5tf.d(20): Error: found `:` instead of statement\n/tmp/tmp44r3c5tf.d(21):
    Error: found `min_index` when expecting `;` following statement\n/tmp/tmp44r3c5tf.d(21):
    Error: found `:` instead of statement\n/tmp/tmp44r3c5tf.d(22): Error: found `i`
    when expecting `;` following statement\n/tmp/tmp44r3c5tf.d(22): Error: found `:`
    instead of statement\n/tmp/tmp44r3c5tf.d(23): Error: found `j` when expecting
    `;` following statement\n/tmp/tmp44r3c5tf.d(23): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44r3c5tf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: a;\n    int: b;\n    int: c;\n    int: d;\n    int: e;\n    int: f;\n\
    \    int: g;\n    int: h;\n    int: i;\n    int: j;\n    int: k;\n    int: l;\n\
    \    int: m;\n    int: n;\n    int: o;\n    int: p;\n    int: q;\n    int: r;\n\
    \    int: s;\n    int: t;\n    int: u;\n    int: v;\n    int: w;\n    int: x;\n\
    \    int: y;\n    int: z;\n    int: a;\n    int: b;\n    int: c;\n    int: d;\n\
    \    int: e;\n    int: f;\n    int: g;\n    int: h;\n    int: i;\n    int: j;\n\
    \    int: k;\n    int: l;\n    int: m;\n    int: n;\n    int: o;\n    int: p;\n\
    \    int: q;\n    int: r;\n    int: s;\n    int: t;\n    int: u;\n    int: v;\n\
    \    int: w;\n    int: x;\n    int: y;\n    int: z;\n    int: a;\n    int: b;\n\
    \    int: c;\n    int: d;\n    int: e;\n    int: f;\n    int: g;\n    int: h;\n\
    \    int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: a;\n    int: \nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6893m17u.d(20): Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(20):
    Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp6893m17u.d(21): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(22): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(23): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(24): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(25): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(26): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(27): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(28): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6893m17u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    long min2 = min(arr);\n    long min1 = min(arr);\n\
    \    long min0 = min(arr);\n    \n    for(int i = 0; i < arr.length; i++)\n  \
    \  {\n        if(arr[i] < min2)\n        {\n            min2 = arr[i];\n     \
    \   }\n        if(arr[i] < min1)\n        {\n            min1 = arr[i];\n    \
    \    }\n        if(arr[i] < min0)\n        {\n            min0 = arr[i];\n   \
    \     }\n    }\n    \n    if(min2 == min1)\n    {\n        return min2;\n    }\n\
    \    else if(min2 == min0)\n    {\n        return min1;\n    }\n    else\n   \
    \ {\n        return min0;\n    }\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfi7oadbu.d(54): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpfi7oadbu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = -1;\n    var smallest_value\
    \ = null;\n    \n    for (var i = 1; i < lst.Length; i++) {\n        var value\
    \ = lst[i];\n        if (value < smallest) {\n            smallest_index = i;\n\
    \            smallest_value = value;\n        }\n    }\n    \n    if (smallest_index\
    \ != -1) {\n        return smallest_value;\n    }\n    else {\n        return\
    \ null;\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyoyq9eed.d(20): Error: undefined identifier `var`\n/tmp/tmpyoyq9eed.d(21):
    Error: undefined identifier `var`\n/tmp/tmpyoyq9eed.d(22): Error: undefined identifier
    `var`\n/tmp/tmpyoyq9eed.d(24): Error: undefined identifier `var`\n/tmp/tmpyoyq9eed.d(24):
    Error: no property `Length` for type `long[]`\n/tmp/tmpyoyq9eed.d(25): Error:
    undefined identifier `var`\n/tmp/tmpyoyq9eed.d(36): Error: cannot implicitly convert
    expression `null` of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpyoyq9eed.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: ab;\n    int: ac;\n    int: ad;\n    int: ae;\n    int:\
    \ af;\n    int: ag;\n    int: ah;\n    int: ai;\n    int: aj;\n    int: ak;\n\
    \    int: al;\n    int: am;\n    int: an;\n    int: ao;\n    int: ap;\n    int:\
    \ aq;\n    int: ar;\n    int: as;\n    int: at;\n    int: au;\n    int: av;\n\
    \    int: aw;\n    int: ax;\n    int: ay;\n    int: az;\n    int: ba;\n    int:\
    \ bb;\n    int: bc;\n    int: bd;\n    int: be;\n    int: bf;\n    int: bg;\n\
    \    int: bh;\n    int: bi;\n    int: bj;\n    int: bk;\n    int: bl;\n    int:\
    \ bm;\n    int: bn;\n    int: bo;\n    int: bp;\n    int: bq;\n    int: br;\n\
    \    int: bs;\n    int: bt;\n    int: bu;\n    int: bv;\n    int: bw;\n    int:\
    \ bx;\n    int: by;\n    int: bz;\n    int: ca;\n    int: cb;\n    int: cc;\n\
    \    int: cd;\n    int: ce;\n    int: cf;\n    int: cg;\n    int: ch;\n    int:\
    \ ci;\n    int: cj;\n    int: ck;\n    int: cl;\n    int: cm;\n    int: cn;\n\
    \    int: co;\n    int: cp;\n    int: cq;\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5p7j0ibp.d(20): Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(20):
    Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp5p7j0ibp.d(21): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(22): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(23): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(24): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(25): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(26): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(27): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(28): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5p7j0ibp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int len = arr.length;\n    if (len == 0)\n \
    \       return null;\n    int minIndex = len - 1;\n    for (int i = 0; i < len;\
    \ i++)\n    {\n        if (arr[i] < arr[minIndex])\n        {\n            minIndex\
    \ = i;\n        }\n    }\n    if (minIndex == 0)\n        return null;\n    return\
    \ arr[minIndex];\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi_2so6j4.d(36): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpi_2so6j4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: long;\n    var min_index: long;\n    var i: long;\n    \n    min =\
    \ lst[0];\n    min_index = 0;\n    \n    for (i = 1; i < lst.Length; i++) {\n\
    \        if (lst[i] < min) {\n            min = lst[i];\n            min_index\
    \ = i;\n        }\n    }\n    \n    if (min_index < lst.Length - 1) {\n      \
    \  return lst[min_index + 1];\n    } else {\n        return null;\n    }\n}\n\
    unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result =\
    \ candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0fy4eosa.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmp0fy4eosa.d(20): Error: found `:` instead of statement\n/tmp/tmp0fy4eosa.d(21):
    Error: found `min_index` when expecting `;` following statement\n/tmp/tmp0fy4eosa.d(21):
    Error: found `:` instead of statement\n/tmp/tmp0fy4eosa.d(22): Error: found `i`
    when expecting `;` following statement\n/tmp/tmp0fy4eosa.d(22): Error: found `:`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0fy4eosa.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    var smallest_value\
    \ = smallest;\n    var smallest_index2 = 0;\n    var smallest_value2 = smallest;\n\
    \    \n    foreach(i : lst, j : i..)\n    {\n        if(smallest_value < j)\n\
    \        {\n            smallest_value = j;\n            smallest_index = i;\n\
    \        }\n    }\n    \n    foreach(i : lst, j : i..)\n    {\n        if(smallest_value2\
    \ < j)\n        {\n            smallest_value2 = j;\n            smallest_index2\
    \ = i;\n        }\n    }\n    \n    if(smallest_index != smallest_index2)\n  \
    \  {\n        return smallest_value;\n    }\n    else\n    {\n        return null;\n\
    \    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqnm9u88k.d(26): Error: no identifier for declarator `i`\n/tmp/tmpqnm9u88k.d(26):
    Error: found `:` when expecting `;`\n/tmp/tmpqnm9u88k.d(26): Error: found `:`
    when expecting `)`\n/tmp/tmpqnm9u88k.d(26): Error: found `..` when expecting `;`
    following statement\n/tmp/tmpqnm9u88k.d(26): Error: found `)` instead of statement\n/tmp/tmpqnm9u88k.d(33):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqnm9u88k.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: long = lst[0];\n    var minIndex: long = 0;\n    var minIndex2: long\
    \ = 0;\n    var minIndex3: long = 0;\n    \n    for (var i: int = 0; i < lst.Length;\
    \ i++) {\n        if (lst[i] < min) {\n            minIndex = i;\n           \
    \ min = lst[i];\n        }\n    }\n    \n    for (var i: int = 0; i < lst.Length;\
    \ i++) {\n        if (lst[i] == min) {\n            if (minIndex2 == 0) {\n  \
    \              minIndex2 = i;\n            }\n            else {\n           \
    \     if (lst[minIndex2] > lst[minIndex]) {\n                    minIndex2 = i;\n\
    \                }\n            }\n        }\n    }\n    \n    for (var i: int\
    \ = 0; i < lst.Length; i++) {\n        if (lst[i] == min) {\n            if (minIndex3\
    \ == 0) {\n                minIndex3 = i;\n            }\n            else {\n\
    \                if (lst[minIndex3] > lst[minIndex2]) {\n                    minIndex3\
    \ = i;\n                }\n            }\n        }\n    }\n    \n    if (minIndex2\
    \ != 0) {\n        return lst[minIndex2];\n    }\n    else if (minIndex3 != 0)\
    \ {\n        return lst[minIndex3];\n    }\n    else {\n        return null;\n\
    \    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1u4wr52u.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmp1u4wr52u.d(20): Error: found `:` instead of statement\n/tmp/tmp1u4wr52u.d(21):
    Error: found `minIndex` when expecting `;` following statement\n/tmp/tmp1u4wr52u.d(21):
    Error: found `:` instead of statement\n/tmp/tmp1u4wr52u.d(22): Error: found `minIndex2`
    when expecting `;` following statement\n/tmp/tmp1u4wr52u.d(22): Error: found `:`
    instead of statement\n/tmp/tmp1u4wr52u.d(23): Error: found `minIndex3` when expecting
    `;` following statement\n/tmp/tmp1u4wr52u.d(23): Error: found `:` instead of statement\n/tmp/tmp1u4wr52u.d(25):
    Error: found `i` when expecting `;` following statement\n/tmp/tmp1u4wr52u.d(25):
    Error: expression expected, not `:`\n/tmp/tmp1u4wr52u.d(25): Error: found `int`
    when expecting `;` following `for` condition\n/tmp/tmp1u4wr52u.d(25): Error: expression
    expected, not `=`\n/tmp/tmp1u4wr52u.d(25): Error: found `0` when expecting `)`\n/tmp/tmp1u4wr52u.d(25):
    Error: use `{ }` for an empty statement, not `;`\n/tmp/tmp1u4wr52u.d(25): Error:
    found `)` when expecting `;` following statement\n/tmp/tmp1u4wr52u.d(32): Error:
    found `i` when expecting `;` following statement\n/tmp/tmp1u4wr52u.d(32): Error:
    expression expected, not `:`\n/tmp/tmp1u4wr52u.d(32): Error: found `int` when
    expecting `;` following `for` condition\n/tmp/tmp1u4wr52u.d(32): Error: expression
    expected, not `=`\n/tmp/tmp1u4wr52u.d(32): Error: found `0` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1u4wr52u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: Nullable<long>;\n    var min_index: Nullable<int>;\n    var i: Nullable<int>;\n\
    \    var j: Nullable<int>;\n    var k: Nullable<int>;\n    var len: Nullable<int>;\n\
    \    var smallest: Nullable<long>;\n    var smallest_index: Nullable<int>;\n \
    \   var smallest_value: Nullable<long>;\n    \n    len = length(lst);\n    smallest_index\
    \ = -1;\n    smallest_value = null;\n    \n    for (i = 0; i < len; ++i)\n   \
    \ {\n        if (lst[i] < smallest_value)\n        {\n            smallest_value\
    \ = lst[i];\n            smallest_index = i;\n        }\n    }\n    \n    if (smallest_index\
    \ == -1)\n        return null;\n    \n    min = smallest_value;\n    min_index\
    \ = smallest_index;\n    \n    for (i = len - 1; i >= 0; --i)\n    {\n       \
    \ if (lst[i] < min)\n        {\n            min = lst[i];\n            min_index\
    \ = i;\n        }\n    }\n    \n    if (min_index == 0)\n        return null;\n\
    \    \n    for (i = min_index - 1; i >= 0; --i)\n    {\n        if (lst[i] < min)\n\
    \        {\n            min = lst[i];\n            min_index = i;\n        }\n\
    \    }\n    \n    if (min_index == 0)\n        return null;\n    \n    for (i\
    \ = min_index - 1; i >= 0; --i)\n    {\n        if (lst[i] < min)\n        {\n\
    \            min = lst[i];\n            min_index = i;\n        }\n    }\n   \
    \ \n    if (min_index == 0)\n        return null;\n    \n    for (i = min_index\
    \ - 1; i >= 0; --i)\n    {\n        if (lst[i] < min)\n        {\n           \
    \ min = lst[i];\n            min_index = i;\n        }\n    }\n    \n    if (min_index\
    \ == 0)\n        return null;\n    \n    for (i = min_index - 1; i >= 0; --i)\n\
    \    {\n        if (lst[i] < min)\n        {\n            min = lst[i];\n    \
    \        min_index = i;\n        }\n    }\n    \n    if (min_index == 0)\n   \
    \     return null;\n    \n    for (i = min_index - 1; i >= 0; --i)\n    {\n  \
    \      if (lst[i] < min)\n        {\n            min = lst[i];\n            min_index\
    \ = i;\n        }\n    }\n    \n    if (min_index == 0)\n        return null;\n\
    \    \n    for (i = min_index - 1; i >= 0; --i)\n    {\n        if (lst[i] < min)\n\
    \        {\n            min = lst[i];\n            min_index = i;\n        }\n\
    \    }\n    \n    if (min_index == 0)\n        return null;\n    \n    for (i\
    \ = min_index - 1\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6yywhqz4.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmp6yywhqz4.d(20): Error: found `:` instead of statement\n/tmp/tmp6yywhqz4.d(21):
    Error: found `min_index` when expecting `;` following statement\n/tmp/tmp6yywhqz4.d(21):
    Error: found `:` instead of statement\n/tmp/tmp6yywhqz4.d(22): Error: found `i`
    when expecting `;` following statement\n/tmp/tmp6yywhqz4.d(22): Error: found `:`
    instead of statement\n/tmp/tmp6yywhqz4.d(23): Error: found `j` when expecting
    `;` following statement\n/tmp/tmp6yywhqz4.d(23): Error: found `:` instead of statement\n/tmp/tmp6yywhqz4.d(24):
    Error: found `k` when expecting `;` following statement\n/tmp/tmp6yywhqz4.d(24):
    Error: found `:` instead of statement\n/tmp/tmp6yywhqz4.d(25): Error: found `len`
    when expecting `;` following statement\n/tmp/tmp6yywhqz4.d(25): Error: found `:`
    instead of statement\n/tmp/tmp6yywhqz4.d(26): Error: found `smallest` when expecting
    `;` following statement\n/tmp/tmp6yywhqz4.d(26): Error: found `:` instead of statement\n/tmp/tmp6yywhqz4.d(27):
    Error: found `smallest_index` when expecting `;` following statement\n/tmp/tmp6yywhqz4.d(27):
    Error: found `:` instead of statement\n/tmp/tmp6yywhqz4.d(28): Error: found `smallest_value`
    when expecting `;` following statement\n/tmp/tmp6yywhqz4.d(28): Error: found `:`
    instead of statement\n/tmp/tmp6yywhqz4.d(134): Error: found `unittest` when expecting
    `;` following statement\n/tmp/tmp6yywhqz4.d(174): Error: found `void` when expecting
    `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6yywhqz4.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    int len = arr.length;\n    if (len == 0)\n \
    \       return null;\n    int min1 = arr[len-1];\n    int min2 = arr[len-2];\n\
    \    int min3 = arr[len-3];\n    int min4 = arr[len-4];\n    int min5 = arr[len-5];\n\
    \    int min6 = arr[len-6];\n    int min7 = arr[len-7];\n    int min8 = arr[len-8];\n\
    \    int min9 = arr[len-9];\n    int min10 = arr[len-10];\n    int min11 = arr[len-11];\n\
    \    int min12 = arr[len-12];\n    int min13 = arr[len-13];\n    int min14 = arr[len-14];\n\
    \    int min15 = arr[len-15];\n    int min16 = arr[len-16];\n    int min17 = arr[len-17];\n\
    \    int min18 = arr[len-18];\n    int min19 = arr[len-19];\n    int min20 = arr[len-20];\n\
    \    int min21 = arr[len-21];\n    int min22 = arr[len-22];\n    int min23 = arr[len-23];\n\
    \    int min24 = arr[len-24];\n    int min25 = arr[len-25];\n    int min26 = arr[len-26];\n\
    \    int min27 = arr[len-27];\n    int min28 = arr[len-28];\n    int min29 = arr[len-29];\n\
    \    int min30 = arr[len-30];\n    int min31 = arr[len-31];\n    int min32 = arr[len-32];\n\
    \    int min33 = arr[len-33];\n    int min34 = arr[len-34];\n    int min35 = arr[len-35];\n\
    \    int min36 = arr[len-36];\n    int min37 = arr[len-37];\n    int min38 = arr[len-38];\n\
    \    int min39 = arr[len-39];\n    int min40 = arr[len-40];\n    int min41 = arr[len-41];\n\
    \    int min42 = arr[len-42];\n    int min43 = arr[len-43];\n    int min44 = arr[len-44];\n\
    \    int min45 = arr[len-45];\n    int min46 = arr[len-46];\n    int min47 = arr[len-47];\n\
    \    int min48 = arr[len-48];\n    int min49 = arr[len-49];\n    int min50 = arr[len-50];\n\
    \    int min51 = arr[len-51];\n    int min52 = arr[len-52];\n    int min53 = \n\
    unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result =\
    \ candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptofdizq3.d(77): Error: expression expected, not `unittest`\n/tmp/tmptofdizq3.d(78):
    Error: semicolon expected, not `{`\n/tmp/tmptofdizq3.d(117): Error: found `End
    of File` when expecting `}` following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmptofdizq3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    var i;\n    for(i\
    \ = 1; i < lst.Length; i++) {\n        if(lst[i] < smallest) {\n            smallest\
    \ = lst[i];\n            smallest_index = i;\n        }\n    }\n    return smallest_index\
    \ == lst.Length ? null : lst[smallest_index + 1];\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1wsdru3b.d(20): Error: undefined identifier `var`\n/tmp/tmp1wsdru3b.d(21):
    Error: undefined identifier `var`\n/tmp/tmp1wsdru3b.d(22): Error: undefined identifier
    `var`\n/tmp/tmp1wsdru3b.d(23): Error: no property `Length` for type `long[]`\n/tmp/tmp1wsdru3b.d(29):
    Error: no property `Length` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp1wsdru3b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0)\n        return null;\n    var smallest = lst[0];\n  \
    \  var index = lst.indexOf(smallest);\n    if (index == 0)\n        return null;\n\
    \    var nextSmallest = lst[index + 1];\n    return nextSmallest;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplcnn4doo.d(22): Error: undefined identifier `var`\n/tmp/tmplcnn4doo.d(23):
    Error: undefined identifier `var`\n/tmp/tmplcnn4doo.d(23): Error: no property
    `indexOf` for type `long[]`\n/tmp/tmplcnn4doo.d(26): Error: undefined identifier
    `var`\n/tmp/tmplcnn4doo.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`\n/tmp/tmplcnn4doo.d(25): Error: cannot
    implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplcnn4doo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    var smallest_value\
    \ = smallest;\n    \n    for(var i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i]\
    \ < smallest)\n        {\n            smallest_value = smallest;\n           \
    \ smallest_index = i;\n            smallest = lst[i];\n        }\n    }\n    \n\
    \    return smallest_value;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp60ekwq3q.d(20): Error: undefined identifier `var`\n/tmp/tmp60ekwq3q.d(21):
    Error: undefined identifier `var`\n/tmp/tmp60ekwq3q.d(22): Error: undefined identifier
    `var`\n/tmp/tmp60ekwq3q.d(24): Error: undefined identifier `var`\n/tmp/tmp60ekwq3q.d(24):
    Error: no property `size` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp60ekwq3q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    var smallest_value\
    \ = smallest;\n    var smallest_next = smallest;\n    \n    for (var i = 1; i\
    \ < lst.Length; i++) {\n        if (lst[i] < smallest) {\n            smallest_value\
    \ = smallest;\n            smallest_index = i;\n            smallest_next = lst[i];\n\
    \        }\n        else if (lst[i] == smallest) {\n            smallest_value\
    \ = smallest_next;\n            smallest_index = i;\n            smallest_next\
    \ = lst[i];\n        }\n    }\n    \n    if (smallest_index == lst.Length - 1)\
    \ {\n        return null;\n    }\n    else {\n        return smallest_value;\n\
    \    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5yivsug0.d(20): Error: undefined identifier `var`\n/tmp/tmp5yivsug0.d(21):
    Error: undefined identifier `var`\n/tmp/tmp5yivsug0.d(22): Error: undefined identifier
    `var`\n/tmp/tmp5yivsug0.d(23): Error: undefined identifier `var`\n/tmp/tmp5yivsug0.d(25):
    Error: undefined identifier `var`\n/tmp/tmp5yivsug0.d(25): Error: no property
    `Length` for type `long[]`\n/tmp/tmp5yivsug0.d(38): Error: no property `Length`
    for type `long[]`\n/tmp/tmp5yivsug0.d(39): Error: cannot implicitly convert expression
    `null` of type `typeof(null)` to `Nullable!long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp5yivsug0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int? smallest = lst[0];\n    int? secondSmallest = smallest;\n    \n    for\
    \ (int i = 1; i < lst.Length; i++)\n    {\n        if (lst[i] < smallest)\n  \
    \      {\n            secondSmallest = smallest;\n            smallest = lst[i];\n\
    \        }\n        else if (lst[i] < secondSmallest)\n        {\n           \
    \ secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n}\n\
    /*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt5d0oumi.d(20): Error: no identifier for declarator `int`\n/tmp/tmpt5d0oumi.d(20):
    Error: found `?` instead of statement\n/tmp/tmpt5d0oumi.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmpt5d0oumi.d(21): Error: found `?` instead of statement\n/tmp/tmpt5d0oumi.d(37):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt5d0oumi.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int? smallest = lst[0];\n    int? second = smallest;\n    foreach(i : lst,\
    \ j : i .. lst[i - 1]) {\n        if(j < smallest) {\n            second = smallest;\n\
    \            smallest = j;\n        }\n    }\n    return smallest;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpimekgr2x.d(20): Error: no identifier for declarator `int`\n/tmp/tmpimekgr2x.d(20):
    Error: found `?` instead of statement\n/tmp/tmpimekgr2x.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmpimekgr2x.d(21): Error: found `?` instead of statement\n/tmp/tmpimekgr2x.d(22):
    Error: no identifier for declarator `i`\n/tmp/tmpimekgr2x.d(22): Error: found
    `:` when expecting `;`\n/tmp/tmpimekgr2x.d(22): Error: found `:` when expecting
    `)`\n/tmp/tmpimekgr2x.d(22): Error: found `..` when expecting `;` following statement\n/tmp/tmpimekgr2x.d(22):
    Error: found `)` when expecting `;` following statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpimekgr2x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  forall(lst.begin(), lst.end(), [&](long x){\n        if(x < lst[0]) return\
    \ x;\n    });\n    return Nullable!(long);\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpngdr0tfk.d(20): Error: expression expected, not `]`\n/tmp/tmpngdr0tfk.d(20):
    Error: found `x` when expecting `.` following long\n/tmp/tmpngdr0tfk.d(20): Error:
    found `)` when expecting identifier following `long`.\n/tmp/tmpngdr0tfk.d(20):
    Error: found `{` when expecting `,`\n/tmp/tmpngdr0tfk.d(21): Error: expression
    expected, not `if`\n/tmp/tmpngdr0tfk.d(21): Error: found `return` when expecting
    `,`\n/tmp/tmpngdr0tfk.d(21): Error: found `;` when expecting `,`\n/tmp/tmpngdr0tfk.d(22):
    Error: expression expected, not `}`\n/tmp/tmpngdr0tfk.d(22): Error: found `;`
    when expecting `,`\n/tmp/tmpngdr0tfk.d(23): Error: expression expected, not `return`\n/tmp/tmpngdr0tfk.d(23):
    Error: found `Nullable` when expecting `,`\n/tmp/tmpngdr0tfk.d(23): Error: found
    `)` when expecting `.` following long\n/tmp/tmpngdr0tfk.d(23): Error: found `;`
    when expecting identifier following `long`.\n/tmp/tmpngdr0tfk.d(23): Error: found
    `}` when expecting `)`\n/tmp/tmpngdr0tfk.d(25): Error: found `unittest` when expecting
    `,`\n/tmp/tmpngdr0tfk.d(65): Error: found `void` when expecting `,`\n/tmp/tmpngdr0tfk.d(65):
    Error: found `{` when expecting `,`\n/tmp/tmpngdr0tfk.d(65): Error: expression
    expected, not `}`\n/tmp/tmpngdr0tfk.d(65): Error: found `End of File` when expecting
    `,`\n/tmp/tmpngdr0tfk.d(20): Error: found `End of File` when expecting `]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngdr0tfk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = -1;\n    var smallest_value\
    \ = null;\n    \n    for (var i = 1; i < lst.Length; i++) {\n        var value\
    \ = lst[i];\n        if (value < smallest) {\n            smallest_index = i;\n\
    \            smallest_value = value;\n        }\n    }\n    \n    if (smallest_index\
    \ != -1) {\n        return smallest_value;\n    }\n    else {\n        return\
    \ null;\n    }\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuv5a0xj9.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpuv5a0xj9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int? smallest = lst[0];\n    int? second = smallest;\n    \n    for (int i\
    \ = 1; i < lst.Length; i++)\n    {\n        if (lst[i] < smallest)\n        {\n\
    \            second = smallest;\n            smallest = lst[i];\n        }\n \
    \       else if (lst[i] < second)\n        {\n            second = lst[i];\n \
    \       }\n    }\n    \n    return smallest;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprzti_vnc.d(20): Error: no identifier for declarator `int`\n/tmp/tmprzti_vnc.d(20):
    Error: found `?` instead of statement\n/tmp/tmprzti_vnc.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmprzti_vnc.d(21): Error: found `?` instead of statement\n/tmp/tmprzti_vnc.d(38):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprzti_vnc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: A;\n    int: B;\n    int: C;\n    int: D;\n    int: E;\n    int: F;\n\
    \    int: G;\n    int: H;\n    int: I;\n    int: J;\n    int: K;\n    int: L;\n\
    \    int: M;\n    int: N;\n    int: O;\n    int: P;\n    int: Q;\n    int: R;\n\
    \    int: S;\n    int: T;\n    int: U;\n    int: V;\n    int: W;\n    int: X;\n\
    \    int: Y;\n    int: Z;\n    int: a1;\n    int: a2;\n    int: a3;\n    int:\
    \ a4;\n    int: a5;\n    int: a6;\n    int: a7;\n    int: a8;\n    int: a9;\n\
    \    int: a10;\n    int: a11;\n    int: a12;\n    int: a13;\n    int: a14;\n \
    \   int: a15;\n    int: a16;\n    int: a17;\n    int: a18;\n    int: a19;\n  \
    \  int: a20;\n    int: a21;\n    int: a22;\n    int: a23;\n    int: a24;\n   \
    \ int: a25;\n    int: a26;\n    int: a27;\n    int: a28;\n    int: a29;\n    int:\
    \ a30;\n    int: a31;\n    int: a32;\n    int: a33;\n    int: a34;\n    int: a35;\n\
    \    int: a36;\n    int: a37;\n    int: a38;\n    int: a39;\n    int: a40;\n \
    \   int: a41;\n    int\nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7l2rlika.d(20): Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(20):
    Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp7l2rlika.d(21): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(22): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(23): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(24): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(25): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(26): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(27): Error: found `:` instead of statement\n/tmp/tmp7l2rlika.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp7l2rlika.d(28): Error: found
    `:` instead of statement\n/tmp/tmp7l2rlika.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp7l2rlika.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7l2rlika.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: aa;\n    int: ab;\n    int: ac;\n    int: ad;\n    int: ae;\n    int:\
    \ af;\n    int: ag;\n    int: ah;\n    int: ai;\n    int: aj;\n    int: ak;\n\
    \    int: al;\n    int: am;\n    int: an;\n    int: ao;\n    int: ap;\n    int:\
    \ aq;\n    int: ar;\n    int: as;\n    int: at;\n    int: au;\n    int: av;\n\
    \    int: aw;\n    int: ax;\n    int: ay;\n    int: az;\n    int: ba;\n    int:\
    \ bb;\n    int: bc;\n    int: bd;\n    int: be;\n    int: bf;\n    int: bg;\n\
    \    int: bh;\n    int: bi;\n    int: bj;\n    int: bk;\n    int: bl;\n    int:\
    \ bm;\n    int: bn;\n    int: bo;\n    int: bp;\n    int: bq;\n    int: br;\n\
    \    int: bs;\n    int: bt;\n    int: bu;\n    int: bv;\n    int: bw;\n    int:\
    \ bx;\n    int: by;\n    int: bz;\n    int: ca;\n    int: cb;\n    int: cc;\n\
    \    int: cd;\n    int: ce;\n    int: cf;\n    int: cg;\n    int: ch;\n    int:\
    \ ci;\n    int: cj;\n    int: ck;\n    int: cl;\n    int: cm;\n    int: cn;\n\
    \    int: co;\n    int: cp;\n    int: cq;\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5p7j0ibp.d(20): Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(20):
    Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp5p7j0ibp.d(21): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(22): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(23): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(24): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(25): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(26): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(27): Error: found `:` instead of statement\n/tmp/tmp5p7j0ibp.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp5p7j0ibp.d(28): Error: found
    `:` instead of statement\n/tmp/tmp5p7j0ibp.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp5p7j0ibp.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5p7j0ibp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    for(var i = 1; i <\
    \ lst.length; ++i)\n    {\n        if(lst[i] < smallest)\n        {\n        \
    \    smallest = lst[i];\n            smallest_index = i;\n        }\n    }\n \
    \   return smallest_index == lst.length - 1 ? null : lst[smallest_index + 1];\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc4a031bk.d(20): Error: undefined identifier `var`\n/tmp/tmpc4a031bk.d(21):
    Error: undefined identifier `var`\n/tmp/tmpc4a031bk.d(22): Error: undefined identifier
    `var`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc4a031bk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  long smallest = lst[0];\n    long index = 1;\n    for(long i = 1;i < lst.size;++i)\n\
    \    {\n        if(lst[i] < smallest)\n        {\n            smallest = lst[i];\n\
    \            index = i;\n        }\n    }\n    return smallest;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzts3xr50.d(22): Error: no property `size` for type `long[]`\n/tmp/tmpzts3xr50.d(30):
    Error: cannot implicitly convert expression `smallest` of type `long` to `Nullable!long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzts3xr50.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i, j, k;\n    \n    for(i=0, j=lst.length-1; i<j; i++, j--)\n    {\n \
    \       k = lst[i];\n        if(k<lst[j])\n        {\n            lst[i] = lst[j];\n\
    \            lst[j] = k;\n        }\n    }\n    return lst[j];\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6bx8avi6.d(20): Error: no identifier for declarator `int`\n/tmp/tmp6bx8avi6.d(20):
    Error: found `:` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp6bx8avi6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = lst;\n    int len = arr.length;\n    int min1 = 0, min2 = 0, min3\
    \ = 0;\n    \n    for (int i = 0; i < len; i++)\n    {\n        if (arr[i] < arr[min1])\n\
    \        {\n            min2 = min1;\n            min1 = i;\n        }\n     \
    \   else if (arr[i] < arr[min2])\n        {\n            min2 = i;\n        }\n\
    \        else if (arr[i] < arr[min3])\n        {\n            min3 = i;\n    \
    \    }\n    }\n    if (min2 != min3)\n    {\n        return arr[min2];\n    }\n\
    \    else\n    {\n        return null;\n    }\n}\n/*\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfqb1k093.d(49): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpfqb1k093.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  long smallest = lst[0];\n    long secondSmallest = lst[1];\n    for(long i\
    \ = 2; i < lst.lenght; ++i)\n    {\n        if(lst[i] < smallest)\n        {\n\
    \            secondSmallest = smallest;\n            smallest = lst[i];\n    \
    \    }\n        else if(lst[i] < secondSmallest)\n        {\n            secondSmallest\
    \ = lst[i];\n        }\n    }\n    return secondSmallest;\n}\nunittest\n{\n  \
    \  alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpysgwjgjt.d(22): Error: no property `lenght` for type `long[]`\n/tmp/tmpysgwjgjt.d(34):
    Error: cannot implicitly convert expression `secondSmallest` of type `long` to
    `Nullable!long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpysgwjgjt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var min: Nullable!(long);\n    var min_index: Nullable!(int);\n    \n    min\
    \ = Nullable!(long);\n    min_index = Nullable!(int);\n    \n    for (i in 0..lst.length-1)\n\
    \    {\n        if (lst[i] < min)\n        {\n            min = lst[i];\n    \
    \        min_index = i;\n        }\n    }\n    \n    if (min_index != 0)\n   \
    \ {\n        return lst[min_index-1];\n    }\n    else\n    {\n        return\
    \ Nullable!(long);\n    }\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1eqv6mm_.d(20): Error: found `min` when expecting `;` following
    statement\n/tmp/tmp1eqv6mm_.d(20): Error: found `:` instead of statement\n/tmp/tmp1eqv6mm_.d(21):
    Error: found `min_index` when expecting `;` following statement\n/tmp/tmp1eqv6mm_.d(21):
    Error: found `:` instead of statement\n/tmp/tmp1eqv6mm_.d(26): Error: found `..`
    when expecting `;` following statement\n/tmp/tmp1eqv6mm_.d(26): Error: found `)`
    when expecting `;` following `for` condition\n/tmp/tmp1eqv6mm_.d(35): Error: found
    `if` when expecting `)`\n/tmp/tmp1eqv6mm_.d(35): Error: found `!=` when expecting
    `)`\n/tmp/tmp1eqv6mm_.d(35): Error: missing `{ ... }` for function literal\n/tmp/tmp1eqv6mm_.d(35):
    Error: found `0` when expecting `;` following statement\n/tmp/tmp1eqv6mm_.d(35):
    Error: found `)` instead of statement\n/tmp/tmp1eqv6mm_.d(39): Error: declaration
    expected, not `else`\n/tmp/tmp1eqv6mm_.d(42): Error: unrecognized declaration\n/tmp/tmp1eqv6mm_.d(44):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1eqv6mm_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: a;\n    int: b;\n    int: c;\n    int: d;\n    int: e;\n    int: f;\n\
    \    int: g;\n    int: h;\n    int: i;\n    int: j;\n    int: k;\n    int: l;\n\
    \    int: m;\n    int: n;\n    int: o;\n    int: p;\n    int: q;\n    int: r;\n\
    \    int: s;\n    int: t;\n    int: u;\n    int: v;\n    int: w;\n    int: x;\n\
    \    int: y;\n    int: z;\n    int: a;\n    int: b;\n    int: c;\n    int: d;\n\
    \    int: e;\n    int: f;\n    int: g;\n    int: h;\n    int: i;\n    int: j;\n\
    \    int: k;\n    int: l;\n    int: m;\n    int: n;\n    int: o;\n    int: p;\n\
    \    int: q;\n    int: r;\n    int: s;\n    int: t;\n    int: u;\n    int: v;\n\
    \    int: w;\n    int: x;\n    int: y;\n    int: z;\n    int: a;\n    int: b;\n\
    \    int: c;\n    int: d;\n    int: e;\n    int: f;\n    int: g;\n    int: h;\n\
    \    int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: a;\n    int: \nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6893m17u.d(20): Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(20):
    Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp6893m17u.d(21): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(22): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(23): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(24): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(25): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(26): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(27): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(28): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6893m17u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  var smallest = lst[0];\n    var smallest_index = 0;\n    \n    for each (var\
    \ i in lst)\n    {\n        if (i < smallest)\n        {\n            smallest\
    \ = i;\n            smallest_index = i;\n        }\n    }\n    \n    if (smallest_index\
    \ != 0)\n    {\n        return smallest;\n    }\n    else\n    {\n        return\
    \ null;\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrj3_xtw.d(23): Error: found `each` when expecting `(`\n/tmp/tmpkrj3_xtw.d(23):
    Error: found `in` when expecting `)`\n/tmp/tmpkrj3_xtw.d(23): Error: missing `{
    ... }` for function literal\n/tmp/tmpkrj3_xtw.d(23): Error: found `lst` when expecting
    `;` following statement\n/tmp/tmpkrj3_xtw.d(23): Error: expression expected, not
    `)`\n/tmp/tmpkrj3_xtw.d(24): Error: found `{` when expecting `;` following `for`
    condition\n/tmp/tmpkrj3_xtw.d(25): Error: expression expected, not `if`\n/tmp/tmpkrj3_xtw.d(26):
    Error: found `{` when expecting `)`\n/tmp/tmpkrj3_xtw.d(30): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkrj3_xtw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: a;\n    int: b;\n    int: c;\n    int: d;\n    int: e;\n    int: f;\n\
    \    int: g;\n    int: h;\n    int: i;\n    int: j;\n    int: k;\n    int: l;\n\
    \    int: m;\n    int: n;\n    int: o;\n    int: p;\n    int: q;\n    int: r;\n\
    \    int: s;\n    int: t;\n    int: u;\n    int: v;\n    int: w;\n    int: x;\n\
    \    int: y;\n    int: z;\n    int: a;\n    int: b;\n    int: c;\n    int: d;\n\
    \    int: e;\n    int: f;\n    int: g;\n    int: h;\n    int: i;\n    int: j;\n\
    \    int: k;\n    int: l;\n    int: m;\n    int: n;\n    int: o;\n    int: p;\n\
    \    int: q;\n    int: r;\n    int: s;\n    int: t;\n    int: u;\n    int: v;\n\
    \    int: w;\n    int: x;\n    int: y;\n    int: z;\n    int: a;\n    int: b;\n\
    \    int: c;\n    int: d;\n    int: e;\n    int: f;\n    int: g;\n    int: h;\n\
    \    int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: a;\n    int: \nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6893m17u.d(20): Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(20):
    Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(21): Error: no identifier
    for declarator `int`\n/tmp/tmp6893m17u.d(21): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(22):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(22): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(23): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(23): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(24):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(24): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(25): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(25): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(26):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(26): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(27): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(27): Error: found `:` instead of statement\n/tmp/tmp6893m17u.d(28):
    Error: no identifier for declarator `int`\n/tmp/tmp6893m17u.d(28): Error: found
    `:` instead of statement\n/tmp/tmp6893m17u.d(29): Error: no identifier for declarator
    `int`\n/tmp/tmp6893m17u.d(29): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6893m17u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int? min = null;\n    foreach(i : lst, \n        function(x)\n        {\n \
    \           if(x == min)\n            {\n                min = null;\n       \
    \     }\n            else\n            {\n                min = x;\n         \
    \   }\n        }\n    );\n    return min;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyshq97de.d(20): Error: no identifier for declarator `int`\n/tmp/tmpyshq97de.d(20):
    Error: found `?` instead of statement\n/tmp/tmpyshq97de.d(21): Error: no identifier
    for declarator `i`\n/tmp/tmpyshq97de.d(21): Error: found `:` when expecting `;`\n/tmp/tmpyshq97de.d(33):
    Error: use `{ }` for an empty statement, not `;`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpyshq97de.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  int[] arr = toArray(lst);\n    long minVal = arr[0];\n    long minIdx = 1;\n\
    \    for(int i = 1; i < arr.length; ++i)\n    {\n        if(arr[i] < minVal)\n\
    \        {\n            minIdx = i;\n            minVal = arr[i];\n        }\n\
    \    }\n    return arr[minIdx];\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwmds10x5.d(33): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpwmds10x5.d", "-I/tmp"]\n'''
  stdout: b''
