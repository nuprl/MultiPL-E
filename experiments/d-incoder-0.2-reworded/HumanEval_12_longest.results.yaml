name: HumanEval_12_longest
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    \n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2rixvks9.d(23): Error: semicolon expected, not `in`\\n/tmp/tmp2rixvks9.d(23):\
    \ Error: expression expected, not `in`\\n/tmp/tmp2rixvks9.d(23): Error: found\
    \ `strings` when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2rixvks9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach(string; strings) {\n\t\tint\
    \ length = string.length;\n\t\tif (maxLength == null || length > maxLength) {\n\
    \t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp96rg6osi.d(16): Error: no identifier for declarator `int`\\n/tmp/tmp96rg6osi.d(16):\
    \ Error: found `?` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp96rg6osi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach (string s in strings) {\n\t\
    \tif (maxLength == null || s.length() > maxLength) {\n\t\t\tmaxLength = s.length;\n\
    \t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxucav8_p.d(16): Error: no identifier for declarator `int`\\n/tmp/tmpxucav8_p.d(16):\
    \ Error: found `?` instead of statement\\n/tmp/tmpxucav8_p.d(17): Error: found\
    \ `in` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpxucav8_p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach(string; strings)\
    \ {\n        if (longest == null || string.length >= longest.length)\n       \
    \     longest = string;\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl9ndp_tm.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x455539]\\n??:? void tmpl9ndp_tm.__unittest_L23_C1()\
    \ [0x4414a3]\\n??:? void tmpl9ndp_tm.__modtest() [0x453048]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e3af]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454b66]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459d59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459de8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459ce5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454b3d]\\n??:? runModuleUnitTests [0x45e185]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4564c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x45644b]\\n??:? _d_run_main [0x4563b6]\\n??:? main [0x45311b]\\\
    n??:? __libc_start_main [0xe4f1b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ string : strings) {\n        int length = string.length;\n        if (length\
    \ > maxLength) {\n            maxLength = length;\n            maxString = string;\n\
    \        }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw6x7sb9b.d(23): Error: found `string` when expecting `;` following\
    \ statement\\n/tmp/tmpw6x7sb9b.d(23): Error: expression expected, not `:`\\n/tmp/tmpw6x7sb9b.d(23):\
    \ Error: found `strings` when expecting `;` following `for` condition\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw6x7sb9b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprziq32rs.d(22): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprziq32rs.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tif (strings.length == 0) {\n\t\treturn null;\n\t}\n\t\n\tstring\
    \ longest = strings[0];\n\tfor (int i = 1; i < strings.length; i++) {\n\t\tif\
    \ (strings[i].length() > longest.length()) {\n\t\t\tlongest = strings[i];\n\t\t\
    }\n\t}\n\treturn longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi_vukjah.d(22): Error: no property `length` for type `string`\\\
    n/tmp/tmpi_vukjah.d(22): Error: no property `length` for type `string`\\n/tmp/tmpi_vukjah.d(17):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!string`\\n/tmp/tmpi_vukjah.d(26): Error: cannot implicitly convert\
    \ expression `longest` of type `string` to `Nullable!string`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi_vukjah.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    string longest = strings[0];\n\
    \    \n    for (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= maxLen) {\n            longest = strings[i];\n            maxLen = longest.length;\n\
    \        }\n    }\n    \n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu8ilxse9.d(20): Error: cannot implicitly convert expression `strings[0].length`\
    \ of type `ulong` to `int`\\n/tmp/tmpu8ilxse9.d(26): Error: cannot implicitly\
    \ convert expression `longest.length` of type `ulong` to `int`\\n/tmp/tmpu8ilxse9.d(17):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!string`\\n/tmp/tmpu8ilxse9.d(30): Error: cannot implicitly convert\
    \ expression `longest` of type `string` to `Nullable!string`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu8ilxse9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpva3zwfa_.d(22): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpva3zwfa_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLength = 0;\n    string maxString = null;\n    foreach (string s in strings)\n\
    \    {\n        if (s.length() > maxLength)\n        {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_4ikahtw.d(21): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_4ikahtw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach(string; strings)\n\
    \    {\n        if (longest == null || string.length < longest.length)\n     \
    \       longest = string;\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5ji9ilz0.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x455539]\\n??:? void tmp5ji9ilz0.__unittest_L24_C1()\
    \ [0x4414a3]\\n??:? void tmp5ji9ilz0.__modtest() [0x453048]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e3af]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454b66]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459d59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459de8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459ce5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454b3d]\\n??:? runModuleUnitTests [0x45e185]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4564c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x45644b]\\n??:? _d_run_main [0x4563b6]\\n??:? main [0x45311b]\\\
    n??:? __libc_start_main [0x67917554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tif (strings.length == 0) {\n\t\treturn null;\n\t}\n\t\n\tstring\
    \ longest = strings[0];\n\t\n\tfor (int i = 1; i < strings.length; i++) {\n\t\t\
    if (strings[i].length() > longest.length()) {\n\t\t\tlongest = strings[i];\n\t\
    \t}\n\t}\n\t\n\treturn longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg5l687nk.d(23): Error: no property `length` for type `string`\\\
    n/tmp/tmpg5l687nk.d(23): Error: no property `length` for type `string`\\n/tmp/tmpg5l687nk.d(17):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!string`\\n/tmp/tmpg5l687nk.d(28): Error: cannot implicitly convert\
    \ expression `longest` of type `string` to `Nullable!string`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg5l687nk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length();\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpekoeg8l_.d(24): Error: no property `length` for type `string`\\\
    n/tmp/tmpekoeg8l_.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\n/tmp/tmpekoeg8l_.d(31): Error: cannot\
    \ implicitly convert expression `maxString` of type `string` to `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpekoeg8l_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm8dgzwx4.d(19): Error: undefined identifier `var`\\n/tmp/tmpm8dgzwx4.d(20):\
    \ Error: undefined identifier `var`\\n/tmp/tmpm8dgzwx4.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm8dgzwx4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe5_2elgt.d(16): Error: no identifier for declarator `int`\\n/tmp/tmpe5_2elgt.d(16):\
    \ Error: found `?` instead of statement\\n/tmp/tmpe5_2elgt.d(17): Error: found\
    \ `in` when expecting `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpe5_2elgt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var longest = strings[0];\n    foreach(string; strings)\n\
    \    {\n        if (string.length > longest.length)\n        {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3_5202i6.d(16): Error: undefined identifier `var`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_5202i6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = 0;\n    string max = null;\n    foreach (string s in strings)\
    \ {\n        int len = s.length();\n        if (len > maxLen) {\n            max\
    \ = s;\n            maxLen = len;\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1xy4qzcs.d(22): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xy4qzcs.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach(string;\
    \ strings) {\n        var length = string.length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = string;\n      \
    \  }\n    }\n    return maxString;\n}\n</code>\n<|/ a tags=string,arrays,c#,algorithm\
    \ |>\n<| c |>\nI like your solution but I think it would be better to use a foreach\
    \ loop instead of an index. Also the return statement should be `return maxLength\
    \ > 0 ? maxString : null;`\n<|/ c |>\n<| c |>\nI agree with you on both counts.\
    \ I wanted to keep it simple and avoid the extra variable and to keep it close\
    \ to the OP's original code. Also, I think it would be better to return `null`\
    \ instead of `\"\"` if the input array is empty. I'll edit my answer to reflect\
    \ this.\n<|/ c |>\n<| c |>\nI agree with you on both counts. I wanted to keep\
    \ it simple and avoid the extra variable and to keep it close to the OP's original\
    \ code. Also, I think it would be better to return `null` instead of `\"\"` if\
    \ the input array is empty. I'll edit my answer to reflect this.\n<|/ c |>\n<|\
    \ a tags=string,arrays,c#,algorithm |>\n<code>\nstring longest(string [] strings)\n\
    {\n    string longest = \"\";\n    foreach (string s in strings)\n    {\n    \
    \    if (s.Length > longest.Length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work if there are multiple strings of the same length. Try it with\
    \ `string[] strings = { \"a\", \"bb\", \"ccc\", \"dddd\" };`\n<|/ c |>\n<| c |>\n\
    Yes, it does. Try it with `string[] strings = { \"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\" };`\n<|/ c |>\n<| c |>\nIt doesn't work if there are multiple strings\
    \ of the same length. Try it with `string[] strings = { \"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\" };`\n<|/ c |>\n<| c |>\nYes, it does. Try it with `string[]\
    \ strings = { \"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\" };`\n<|/ c |>\n<| c |>\n\
    It doesn't work if there are multiple strings of the same length. Try it with\
    \ `string[] strings = { \"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\" };`\n<|/ \n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgj1hzrbe.d(27): Error: declaration expected, not `<`\\n/tmp/tmpgj1hzrbe.d(33):\
    \ Error: unterminated character constant\\n/tmp/tmpgj1hzrbe.d(33): Error: unterminated\
    \ character constant\\n/tmp/tmpgj1hzrbe.d(36): Error: unterminated character constant\\\
    n/tmp/tmpgj1hzrbe.d(36): Error: unterminated character constant\\n/tmp/tmpgj1hzrbe.d(43):\
    \ Error: declaration expected, not `foreach`\\n/tmp/tmpgj1hzrbe.d(48): Error:\
    \ unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpgj1hzrbe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i)\n        if (strings[i].length\
    \ >= longest.length)\n            longest = strings[i];\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpluokw8j_.d(18): Error: undefined identifier `var`\\n/tmp/tmpluokw8j_.d(19):\
    \ Error: undefined identifier `var`\\n/tmp/tmpluokw8j_.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpluokw8j_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLength = 0;\n    string maxString = null;\n    \n    for (string s in\
    \ strings) {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    \n    return maxString;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8s6ixuzw.d(22): Error: semicolon expected, not `in`\\n/tmp/tmp8s6ixuzw.d(22):\
    \ Error: expression expected, not `in`\\n/tmp/tmp8s6ixuzw.d(22): Error: found\
    \ `strings` when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp8s6ixuzw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
