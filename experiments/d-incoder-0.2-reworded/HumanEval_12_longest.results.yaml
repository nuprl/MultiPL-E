language: d
name: HumanEval_12_longest
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    \n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2rixvks9.d(23): Error: semicolon expected, not `in`\n/tmp/tmp2rixvks9.d(23):
    Error: expression expected, not `in`\n/tmp/tmp2rixvks9.d(23): Error: found `strings`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2rixvks9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach(string; strings) {\n\t\tint\
    \ length = string.length;\n\t\tif (maxLength == null || length > maxLength) {\n\
    \t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp96rg6osi.d(16): Error: no identifier for declarator `int`\n/tmp/tmp96rg6osi.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp96rg6osi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach (string s in strings) {\n\t\
    \tif (maxLength == null || s.length() > maxLength) {\n\t\t\tmaxLength = s.length;\n\
    \t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxucav8_p.d(16): Error: no identifier for declarator `int`\n/tmp/tmpxucav8_p.d(16):
    Error: found `?` instead of statement\n/tmp/tmpxucav8_p.d(17): Error: found `in`
    when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxucav8_p.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach(string; strings)\
    \ {\n        if (longest == null || string.length >= longest.length)\n       \
    \     longest = string;\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpl9ndp_tm.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x455539]\n??:? void tmpl9ndp_tm.__unittest_L23_C1() [0x4414a3]\n??:?
    void tmpl9ndp_tm.__modtest() [0x453048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45e3af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x454b66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x459d59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x459de8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x459ce5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x454b3d]\n??:? runModuleUnitTests [0x45e185]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4564c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x45644b]\n??:? _d_run_main [0x4563b6]\n??:? main [0x45311b]\n??:?
    __libc_start_main [0xe4f1b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ string : strings) {\n        int length = string.length;\n        if (length\
    \ > maxLength) {\n            maxLength = length;\n            maxString = string;\n\
    \        }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6x7sb9b.d(23): Error: found `string` when expecting `;` following
    statement\n/tmp/tmpw6x7sb9b.d(23): Error: expression expected, not `:`\n/tmp/tmpw6x7sb9b.d(23):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpw6x7sb9b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprziq32rs.d(22): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprziq32rs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tif (strings.length == 0) {\n\t\treturn null;\n\t}\n\t\n\tstring\
    \ longest = strings[0];\n\tfor (int i = 1; i < strings.length; i++) {\n\t\tif\
    \ (strings[i].length() > longest.length()) {\n\t\t\tlongest = strings[i];\n\t\t\
    }\n\t}\n\treturn longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi_vukjah.d(22): Error: no property `length` for type `string`\n/tmp/tmpi_vukjah.d(22):
    Error: no property `length` for type `string`\n/tmp/tmpi_vukjah.d(17): Error:
    cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpi_vukjah.d(26):
    Error: cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_vukjah.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    string longest = strings[0];\n\
    \    \n    for (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= maxLen) {\n            longest = strings[i];\n            maxLen = longest.length;\n\
    \        }\n    }\n    \n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu8ilxse9.d(20): Error: cannot implicitly convert expression
    `strings[0].length` of type `ulong` to `int`\n/tmp/tmpu8ilxse9.d(26): Error: cannot
    implicitly convert expression `longest.length` of type `ulong` to `int`\n/tmp/tmpu8ilxse9.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpu8ilxse9.d(30):
    Error: cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu8ilxse9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpva3zwfa_.d(22): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpva3zwfa_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLength = 0;\n    string maxString = null;\n    foreach (string s in strings)\n\
    \    {\n        if (s.length() > maxLength)\n        {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_4ikahtw.d(21): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_4ikahtw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach(string; strings)\n\
    \    {\n        if (longest == null || string.length < longest.length)\n     \
    \       longest = string;\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5ji9ilz0.d(30): unittest failure\n----------------\n??:?
    _d_unittestp [0x455539]\n??:? void tmp5ji9ilz0.__unittest_L24_C1() [0x4414a3]\n??:?
    void tmp5ji9ilz0.__modtest() [0x453048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45e3af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x454b66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x459d59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x459de8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x459ce5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x454b3d]\n??:? runModuleUnitTests [0x45e185]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4564c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x45644b]\n??:? _d_run_main [0x4563b6]\n??:? main [0x45311b]\n??:?
    __libc_start_main [0x67917554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tif (strings.length == 0) {\n\t\treturn null;\n\t}\n\t\n\tstring\
    \ longest = strings[0];\n\t\n\tfor (int i = 1; i < strings.length; i++) {\n\t\t\
    if (strings[i].length() > longest.length()) {\n\t\t\tlongest = strings[i];\n\t\
    \t}\n\t}\n\t\n\treturn longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg5l687nk.d(23): Error: no property `length` for type `string`\n/tmp/tmpg5l687nk.d(23):
    Error: no property `length` for type `string`\n/tmp/tmpg5l687nk.d(17): Error:
    cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpg5l687nk.d(28):
    Error: cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg5l687nk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length();\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpekoeg8l_.d(24): Error: no property `length` for type `string`\n/tmp/tmpekoeg8l_.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpekoeg8l_.d(31):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpekoeg8l_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm8dgzwx4.d(19): Error: undefined identifier `var`\n/tmp/tmpm8dgzwx4.d(20):
    Error: undefined identifier `var`\n/tmp/tmpm8dgzwx4.d(17): Error: cannot implicitly
    convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm8dgzwx4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe5_2elgt.d(16): Error: no identifier for declarator `int`\n/tmp/tmpe5_2elgt.d(16):
    Error: found `?` instead of statement\n/tmp/tmpe5_2elgt.d(17): Error: found `in`
    when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5_2elgt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var longest = strings[0];\n    foreach(string; strings)\n\
    \    {\n        if (string.length > longest.length)\n        {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3_5202i6.d(16): Error: undefined identifier `var`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3_5202i6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = 0;\n    string max = null;\n    foreach (string s in strings)\
    \ {\n        int len = s.length();\n        if (len > maxLen) {\n            max\
    \ = s;\n            maxLen = len;\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1xy4qzcs.d(22): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1xy4qzcs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach(string;\
    \ strings) {\n        var length = string.length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = string;\n      \
    \  }\n    }\n    return maxString;\n}\n</code>\n<|/ a tags=string,arrays,c#,algorithm\
    \ |>\n<| c |>\nI like your solution but I think it would be better to use a foreach\
    \ loop instead of an index. Also the return statement should be `return maxLength\
    \ > 0 ? maxString : null;`\n<|/ c |>\n<| c |>\nI agree with you on both counts.\
    \ I wanted to keep it simple and avoid the extra variable and to keep it close\
    \ to the OP's original code. Also, I think it would be better to return `null`\
    \ instead of `\"\"` if the input array is empty. I'll edit my answer to reflect\
    \ this.\n<|/ c |>\n<| c |>\nI agree with you on both counts. I wanted to keep\
    \ it simple and avoid the extra variable and to keep it close to the OP's original\
    \ code. Also, I think it would be better to return `null` instead of `\"\"` if\
    \ the input array is empty. I'll edit my answer to reflect this.\n<|/ c |>\n<|\
    \ a tags=string,arrays,c#,algorithm |>\n<code>\nstring longest(string [] strings)\n\
    {\n    string longest = \"\";\n    foreach (string s in strings)\n    {\n    \
    \    if (s.Length > longest.Length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work if there are multiple strings of the same length. Try it with\
    \ `string[] strings = { \"a\", \"bb\", \"ccc\", \"dddd\" };`\n<|/ c |>\n<| c |>\n\
    Yes, it does. Try it with `string[] strings = { \"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\" };`\n<|/ c |>\n<| c |>\nIt doesn't work if there are multiple strings\
    \ of the same length. Try it with `string[] strings = { \"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\" };`\n<|/ c |>\n<| c |>\nYes, it does. Try it with `string[]\
    \ strings = { \"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\" };`\n<|/ c |>\n<| c |>\n\
    It doesn't work if there are multiple strings of the same length. Try it with\
    \ `string[] strings = { \"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\" };`\n<|/ \n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgj1hzrbe.d(27): Error: declaration expected, not `<`\n/tmp/tmpgj1hzrbe.d(33):
    Error: unterminated character constant\n/tmp/tmpgj1hzrbe.d(33): Error: unterminated
    character constant\n/tmp/tmpgj1hzrbe.d(36): Error: unterminated character constant\n/tmp/tmpgj1hzrbe.d(36):
    Error: unterminated character constant\n/tmp/tmpgj1hzrbe.d(43): Error: declaration
    expected, not `foreach`\n/tmp/tmpgj1hzrbe.d(48): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgj1hzrbe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i)\n        if (strings[i].length\
    \ >= longest.length)\n            longest = strings[i];\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpluokw8j_.d(18): Error: undefined identifier `var`\n/tmp/tmpluokw8j_.d(19):
    Error: undefined identifier `var`\n/tmp/tmpluokw8j_.d(17): Error: cannot implicitly
    convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpluokw8j_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLength = 0;\n    string maxString = null;\n    \n    for (string s in\
    \ strings) {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    \n    return maxString;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8s6ixuzw.d(22): Error: semicolon expected, not `in`\n/tmp/tmp8s6ixuzw.d(22):
    Error: expression expected, not `in`\n/tmp/tmp8s6ixuzw.d(22): Error: found `strings`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp8s6ixuzw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0; i != strings.length;\
    \ ++i) {\n        var length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptb3uqx7r.d(19): Error: undefined identifier `var`\n/tmp/tmptb3uqx7r.d(20):
    Error: undefined identifier `var`\n/tmp/tmptb3uqx7r.d(21): Error: undefined identifier
    `var`\n/tmp/tmptb3uqx7r.d(22): Error: undefined identifier `var`\n/tmp/tmptb3uqx7r.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptb3uqx7r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLength = 0;\n    string maxString = null;\n    \n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        int length = strings[i].length;\n \
    \       if (length > maxLength)\n        {\n            maxLength = length;\n\
    \            maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptuwd0zfh.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmptuwd0zfh.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmptuwd0zfh.d(32):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptuwd0zfh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach(string; strings) {\n \
    \       if (maxLength == null || string.length < maxLength.value)\n          \
    \  maxLength = string.length;\n    }\n    return maxLength;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfm4a6vkj.d(16): Error: no identifier for declarator `int`\n/tmp/tmpfm4a6vkj.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpfm4a6vkj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3c8pq3a8.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmp3c8pq3a8.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp3c8pq3a8.d(31):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c8pq3a8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tstring maxString = null;\n\t\n\tforeach(string;\
    \ strings) {\n\t\tif (maxLength == null || string.length < maxLength) {\n\t\t\t\
    maxLength = string.length;\n\t\t\tmaxString = string;\n\t\t}\n\t}\n\t\n\treturn\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_e800zm7.d(16): Error: no identifier for declarator `int`\n/tmp/tmp_e800zm7.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp_e800zm7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = 0;\n    int maxIndex = 0;\n    \n    for (int i = 0; i\
    \ < strings.length; ++i) {\n        int len = strings[i].length;\n        if (len\
    \ > maxLen) {\n            maxLen = len;\n            maxIndex = i;\n        }\n\
    \    }\n    \n    return strings[maxIndex];\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt0hfcztm.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmpt0hfcztm.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpt0hfcztm.d(31):
    Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of
    type `string` to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpt0hfcztm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var longest:string = Null!(string);\n    var longestLength:int\
    \ = 0;\n    foreach(string; strings)\n    {\n        if(longestLength < string.length)\n\
    \        {\n            longest = string;\n            longestLength = string.length;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_feffyu4.d(16): Error: found `longest` when expecting `;` following
    statement\n/tmp/tmp_feffyu4.d(16): Error: found `:` instead of statement\n/tmp/tmp_feffyu4.d(17):
    Error: found `longestLength` when expecting `;` following statement\n/tmp/tmp_feffyu4.d(17):
    Error: found `:` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp_feffyu4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    int maxIndex = 0;\n    \n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        int length = strings[i].length;\n      \
    \  if (length > maxLength) {\n            maxLength = length;\n            maxIndex\
    \ = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkwuit_4k.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmpkwuit_4k.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpkwuit_4k.d(31):
    Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of
    type `string` to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpkwuit_4k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0; i != strings.length;\
    \ ++i) {\n        var s = strings[i];\n        if (s.length == maxLength) {\n\
    \            maxString = s;\n        }\n        else {\n            maxLength\
    \ = s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppt8fblp_.d(19): Error: undefined identifier `var`\n/tmp/tmppt8fblp_.d(20):
    Error: undefined identifier `var`\n/tmp/tmppt8fblp_.d(21): Error: undefined identifier
    `var`\n/tmp/tmppt8fblp_.d(22): Error: undefined identifier `var`\n/tmp/tmppt8fblp_.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppt8fblp_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var maxLength\
    \ = 0;\n    var maxString = \"\";\n    for (var i = 0; i != strings.length; ++i)\
    \ {\n        var s = strings[i];\n        if (s.length == maxLength)\n       \
    \     continue;\n        if (s.length > maxLength) {\n            maxLength =\
    \ s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm46xbnzh.d(18): Error: undefined identifier `var`\n/tmp/tmpm46xbnzh.d(19):
    Error: undefined identifier `var`\n/tmp/tmpm46xbnzh.d(20): Error: undefined identifier
    `var`\n/tmp/tmpm46xbnzh.d(21): Error: undefined identifier `var`\n/tmp/tmpm46xbnzh.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm46xbnzh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach(string; strings) {\n\t\tint\
    \ length = string.length;\n\t\tif (maxLength == null || length > maxLength) {\n\
    \t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp96rg6osi.d(16): Error: no identifier for declarator `int`\n/tmp/tmp96rg6osi.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp96rg6osi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLength = 0;\n    int maxIndex = 0;\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxIndex = i;\n        }\n \
    \   }\n    return strings[maxIndex];\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9bleucez.d(22): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmp9bleucez.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp9bleucez.d(28):
    Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of
    type `string` to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp9bleucez.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach (string s in strings) {\n\t\
    \tint? length = s.length();\n\t\tif (maxLength == null || length < maxLength)\
    \ {\n\t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr8kn0kw1.d(16): Error: no identifier for declarator `int`\n/tmp/tmpr8kn0kw1.d(16):
    Error: found `?` instead of statement\n/tmp/tmpr8kn0kw1.d(17): Error: found `in`
    when expecting `;`\n/tmp/tmpr8kn0kw1.d(18): Error: no identifier for declarator
    `int`\n/tmp/tmpr8kn0kw1.d(18): Error: found `?` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr8kn0kw1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach(string;\
    \ strings) {\n        if (string.length > maxLength) {\n            maxLength\
    \ = string.length;\n            maxString = string;\n        }\n    }\n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplaz6k1_y.d(16): Error: undefined identifier `var`\n/tmp/tmplaz6k1_y.d(17):
    Error: undefined identifier `var`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplaz6k1_y.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ string : strings) {\n        int length = string.length;\n        if (length\
    \ > maxLength) {\n            maxLength = length;\n            maxString = string;\n\
    \        }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6x7sb9b.d(23): Error: found `string` when expecting `;` following
    statement\n/tmp/tmpw6x7sb9b.d(23): Error: expression expected, not `:`\n/tmp/tmpw6x7sb9b.d(23):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpw6x7sb9b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach(string,strings) {\n\t\tif(maxLength\
    \ == null || string.length >= maxLength) {\n\t\t\tmaxLength = string.length;\n\
    \t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2pe1k5kb.d(16): Error: no identifier for declarator `int`\n/tmp/tmp2pe1k5kb.d(16):
    Error: found `?` instead of statement\n/tmp/tmp2pe1k5kb.d(17): Error: no identifier
    for declarator `strings`\n/tmp/tmp2pe1k5kb.d(17): Error: found `)` when expecting
    `;`\n/tmp/tmp2pe1k5kb.d(22): Error: found `return` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2pe1k5kb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    string longest = strings[0];\n    \n    for (string s : strings) {\n\
    \        if (s.length() > longest.length()) {\n            longest = s;\n    \
    \    }\n    }\n    \n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1532o65j.d(22): Error: found `s` when expecting `;` following
    statement\n/tmp/tmp1532o65j.d(22): Error: expression expected, not `:`\n/tmp/tmp1532o65j.d(22):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp1532o65j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength.Value()) {\n    \
    \        maxLength = s.length;\n        }\n    }\n    return maxLength;\n}\n</code>\n\
    <|/ a |>\n<| a |>\n<code>\nfunction longestString(strings: string[]): string {\n\
    \    let longestString: string = null;\n    strings.forEach((string) => {\n  \
    \      if (longestString == null || string.length > longestString.length) {\n\
    \            longestString = string;\n        }\n    });\n    return longestString;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring longestString(string[] strings) {\n    string longest = null;\n\
    \    foreach (string s in strings) {\n        if (longest == null || s.Length\
    \ > longest.Length) {\n            longest = s;\n        }\n    }\n    return\
    \ longest;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string longestString(string[] strings)\n{\n    string longest = null;\n    foreach\
    \ (string s in strings)\n    {\n        if (longest == null || s.Length > longest.Length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring longestString(string[]\
    \ strings)\n{\n    string longest = null;\n    foreach (string s in strings)\n\
    \    {\n        if (longest == null || s.Length > longest.Length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=2 |>\n<code>\nstring longestString(string[]\
    \ strings)\n{\n    string longest = null;\n    foreach (string s in strings)\n\
    \    {\n        if (longest == null || s.Length > longest.Length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring\
    \ longestString(string[] strings)\n{\n    string longest = null;\n    foreach\
    \ (string s in strings)\n    {\n        if (longest == null || s.Length > longest.Length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3_8_gqmu.d(16): Error: no identifier for declarator `int`\n/tmp/tmp3_8_gqmu.d(16):
    Error: found `?` instead of statement\n/tmp/tmp3_8_gqmu.d(17): Error: found `in`
    when expecting `;`\n/tmp/tmp3_8_gqmu.d(24): Error: declaration expected, not `<`\n/tmp/tmp3_8_gqmu.d(30):
    Error: function declaration without return type. (Note that constructors are always
    named `this`)\n/tmp/tmp3_8_gqmu.d(30): Error: found `=>` when expecting `)`\n/tmp/tmp3_8_gqmu.d(30):
    Error: no identifier for declarator `strings.forEach(string)`\n/tmp/tmp3_8_gqmu.d(34):
    Error: declaration expected, not `)`\n/tmp/tmp3_8_gqmu.d(35): Error: declaration
    expected, not `return`\n/tmp/tmp3_8_gqmu.d(36): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3_8_gqmu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3c8pq3a8.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmp3c8pq3a8.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp3c8pq3a8.d(31):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c8pq3a8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe5_2elgt.d(16): Error: no identifier for declarator `int`\n/tmp/tmpe5_2elgt.d(16):
    Error: found `?` instead of statement\n/tmp/tmpe5_2elgt.d(17): Error: found `in`
    when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5_2elgt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    \n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2rixvks9.d(23): Error: semicolon expected, not `in`\n/tmp/tmp2rixvks9.d(23):
    Error: expression expected, not `in`\n/tmp/tmp2rixvks9.d(23): Error: found `strings`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2rixvks9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength.Value()) {\n    \
    \        maxLength = s.length;\n        }\n    }\n    return maxLength;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmeyb8s1n.d(16): Error: no identifier for declarator `int`\n/tmp/tmpmeyb8s1n.d(16):
    Error: found `?` instead of statement\n/tmp/tmpmeyb8s1n.d(17): Error: found `in`
    when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmeyb8s1n.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = 0;\n    string maxStr = null;\n    \n    for (string str\
    \ : strings) {\n        if (str.length() > maxLen) {\n            maxLen = str.length();\n\
    \            maxStr = str;\n        }\n    }\n    \n    return maxStr;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp25k9ula5.d(23): Error: found `str` when expecting `;` following
    statement\n/tmp/tmp25k9ula5.d(23): Error: expression expected, not `:`\n/tmp/tmp25k9ula5.d(23):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp25k9ula5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        var len = strings[i].length;\n        if (len > longest.length) {\n \
    \           longest = strings[i];\n        }\n    }\n    return longest;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp91m1vqq0.d(19): Error: undefined identifier `var`\n/tmp/tmp91m1vqq0.d(20):
    Error: undefined identifier `var`\n/tmp/tmp91m1vqq0.d(21): Error: undefined identifier
    `var`\n/tmp/tmp91m1vqq0.d(17): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp91m1vqq0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpva3zwfa_.d(22): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpva3zwfa_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy2ki0mfo.d(19): Error: undefined identifier `var`\n/tmp/tmpy2ki0mfo.d(20):
    Error: undefined identifier `var`\n/tmp/tmpy2ki0mfo.d(17): Error: cannot implicitly
    convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy2ki0mfo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach(string; strings) {\n\t\tint\
    \ length = string.length;\n\t\tif (maxLength == null || length > maxLength) {\n\
    \t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp96rg6osi.d(16): Error: no identifier for declarator `int`\n/tmp/tmp96rg6osi.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp96rg6osi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLength = 0;\n    string maxString = null;\n    \n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        int length = strings[i].length;\n      \
    \  if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    \n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkd3ats1p.d(23): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmpkd3ats1p.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpkd3ats1p.d(30):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkd3ats1p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLen = 0;\n    string maxStr = null;\n    for (string str : strings)\
    \ {\n        int len = str.length;\n        if (len > maxLen) {\n            maxLen\
    \ = len;\n            maxStr = str;\n        }\n    }\n    return maxStr;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_ib9txha.d(21): Error: found `str` when expecting `;` following
    statement\n/tmp/tmp_ib9txha.d(21): Error: expression expected, not `:`\n/tmp/tmp_ib9txha.d(21):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_ib9txha.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach(string; strings)\
    \ {\n        if (longest == null || string.length >= longest.length)\n       \
    \     longest = string;\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpl9ndp_tm.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x455539]\n??:? void tmpl9ndp_tm.__unittest_L23_C1() [0x4414a3]\n??:?
    void tmpl9ndp_tm.__modtest() [0x453048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45e3af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x454b66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x459d59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x459de8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x459ce5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x454b3d]\n??:? runModuleUnitTests [0x45e185]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4564c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x45644b]\n??:? _d_run_main [0x4563b6]\n??:? main [0x45311b]\n??:?
    __libc_start_main [0xe4f1b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length();\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpekoeg8l_.d(24): Error: no property `length` for type `string`\n/tmp/tmpekoeg8l_.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpekoeg8l_.d(31):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpekoeg8l_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\t\n\tif (strings.length == 0)\n\t\treturn null;\n\t\n\tstring\
    \ longest = strings[0];\n\t\n\tfor (int i = 1; i < strings.length; i++)\n\t{\n\
    \t\tif (strings[i].length() > longest.length())\n\t\t\tlongest = strings[i];\n\
    \t}\n\t\n\treturn longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp6y9aq2p.d(24): Error: no property `length` for type `string`\n/tmp/tmpp6y9aq2p.d(24):
    Error: no property `length` for type `string`\n/tmp/tmpp6y9aq2p.d(18): Error:
    cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpp6y9aq2p.d(28):
    Error: cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6y9aq2p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\t\n\tint? maxLength = null;\n\tstring maxString = null;\n\t\n\
    \tforeach(string,s,strings) {\n\t\t\n\t\tif(s.length() > maxLength) {\n\t\t\t\
    maxLength = s.length;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\t\n\treturn maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj2huhb69.d(17): Error: no identifier for declarator `int`\n/tmp/tmpj2huhb69.d(17):
    Error: found `?` instead of statement\n/tmp/tmpj2huhb69.d(20): Error: no identifier
    for declarator `strings`\n/tmp/tmpj2huhb69.d(20): Error: found `)` when expecting
    `;`\n/tmp/tmpj2huhb69.d(28): Error: found `return` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj2huhb69.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach(string; strings)\
    \ {\n        if (longest == null || string.length() > longest.length()) {\n  \
    \          longest = string;\n        }\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2gim3opf.d(18): Error: no property `length` for type `string`\n/tmp/tmp2gim3opf.d(18):
    Error: function expected before `()`, not `longest.get().length` of type `ulong`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2gim3opf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach (string s in strings) {\n\t\
    \tif (maxLength == null || s.length() > maxLength.Value()) {\n\t\t\tmaxLength\
    \ = s.length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsnfibu19.d(16): Error: no identifier for declarator `int`\n/tmp/tmpsnfibu19.d(16):
    Error: found `?` instead of statement\n/tmp/tmpsnfibu19.d(17): Error: found `in`
    when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsnfibu19.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach(string; strings) {\n \
    \       if (maxLength == null || string.length < maxLength.value)\n          \
    \  maxLength = string.length;\n    }\n    return maxLength;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfm4a6vkj.d(16): Error: no identifier for declarator `int`\n/tmp/tmpfm4a6vkj.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpfm4a6vkj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length)\n            longest = strings[i];\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplve0m6al.d(18): Error: undefined identifier `var`\n/tmp/tmplve0m6al.d(19):
    Error: undefined identifier `var`\n/tmp/tmplve0m6al.d(17): Error: cannot implicitly
    convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplve0m6al.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach(string; strings)\
    \ {\n        if (longest == null || string.length() > longest.length()) {\n  \
    \          longest = string;\n        }\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2gim3opf.d(18): Error: no property `length` for type `string`\n/tmp/tmp2gim3opf.d(18):
    Error: function expected before `()`, not `longest.get().length` of type `ulong`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2gim3opf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    int maxIndex = 0;\n    \n    for (int i = 0;\
    \ i < strings.length; i++) {\n        int length = strings[i].length;\n      \
    \  if (length > maxLength) {\n            maxLength = length;\n            maxIndex\
    \ = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv2a0v9hq.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmpv2a0v9hq.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpv2a0v9hq.d(31):
    Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of
    type `string` to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv2a0v9hq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach(string; strings) {\n \
    \       if (maxLength == null || string.length < maxLength.value)\n          \
    \  maxLength = string.length;\n    }\n    return maxLength;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfm4a6vkj.d(16): Error: no identifier for declarator `int`\n/tmp/tmpfm4a6vkj.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpfm4a6vkj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    string longest = strings[0];\n    \n    for (string s : strings) {\n\
    \        if (s.length() > longest.length()) {\n            longest = s;\n    \
    \    }\n    }\n    \n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1532o65j.d(22): Error: found `s` when expecting `;` following
    statement\n/tmp/tmp1532o65j.d(22): Error: expression expected, not `:`\n/tmp/tmp1532o65j.d(22):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp1532o65j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLength = 0;\n    int maxIndex = 0;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxIndex = i;\n        }\n \
    \   }\n    \n    return strings[maxIndex];\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpidkdmth4.d(23): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmpidkdmth4.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpidkdmth4.d(30):
    Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of
    type `string` to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpidkdmth4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach\
    \ (string s in strings) {\n        if (s.length() > maxLength) {\n           \
    \ maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmped78snco.d(18): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmped78snco.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length >= longest.length) {\n            longest\
    \ = strings[i];\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1g_aeeq6.d(20): Error: undefined identifier `var`\n/tmp/tmp1g_aeeq6.d(21):
    Error: undefined identifier `var`\n/tmp/tmp1g_aeeq6.d(17): Error: cannot implicitly
    convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1g_aeeq6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0; i &lt;\
    \ strings.length; i++) {\n        var s = strings[i];\n        if (s.length &gt;\
    \ maxLength) {\n            maxLength = s.length;\n            maxString = s;\n\
    \        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnsiecep4.d(21): Error: found `;` when expecting `)`\n/tmp/tmpnsiecep4.d(21):
    Error: found `)` when expecting `;` following statement\n/tmp/tmpnsiecep4.d(23):
    Error: found `;` when expecting `)`\n/tmp/tmpnsiecep4.d(23): Error: found `)`
    when expecting `;` following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpnsiecep4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen) {\n            return strings[i];\n\
    \        }\n        maxLen = strings[i].length;\n    }\n    \n    return null;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7cj17s62.d(20): Error: cannot implicitly convert expression
    `strings[0].length` of type `ulong` to `int`\n/tmp/tmp7cj17s62.d(26): Error: cannot
    implicitly convert expression `strings[cast(ulong)i].length` of type `ulong` to
    `int`\n/tmp/tmp7cj17s62.d(17): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!string`\n/tmp/tmp7cj17s62.d(24): Error: cannot
    implicitly convert expression `strings[cast(ulong)i]` of type `string` to `Nullable!string`\n/tmp/tmp7cj17s62.d(29):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cj17s62.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tif (strings.length == 0)\n\t\treturn null;\n\telse\n\t\treturn\
    \ strings[0];\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp83ub3gk1.d(17): Error: cannot implicitly convert expression
    `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp83ub3gk1.d(19): Error:
    cannot implicitly convert expression `strings[0]` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp83ub3gk1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? longestLength = null;\n    foreach(string[] stringArray,\
    \ strings) {\n        int length = stringArray.length;\n        if (longestLength\
    \ == null || length > longestLength) {\n            longestLength = length;\n\
    \        }\n    }\n    return longestLength;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_kevwm9j.d(16): Error: no identifier for declarator `int`\n/tmp/tmp_kevwm9j.d(16):
    Error: found `?` instead of statement\n/tmp/tmp_kevwm9j.d(17): Error: no identifier
    for declarator `strings`\n/tmp/tmp_kevwm9j.d(17): Error: found `)` when expecting
    `;`\n/tmp/tmp_kevwm9j.d(23): Error: found `return` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_kevwm9j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length < longest.length) {\n            longest\
    \ = strings[i];\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0myvq9i_.d(20): Error: undefined identifier `var`\n/tmp/tmp0myvq9i_.d(21):
    Error: undefined identifier `var`\n/tmp/tmp0myvq9i_.d(17): Error: cannot implicitly
    convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0myvq9i_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? longestLength = null;\n\tstring longestString = null;\n\
    \tforeach(string[] stringArray, strings) {\n\t\tint stringLength = stringArray.length;\n\
    \t\tif(longestLength == null || stringLength > longestLength) {\n\t\t\tlongestLength\
    \ = stringLength;\n\t\t\tlongestString = stringArray[0];\n\t\t}\n\t}\n\treturn\
    \ longestString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n      \
    \  auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n    \
    \    auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzcmoc2b8.d(16): Error: no identifier for declarator `int`\n/tmp/tmpzcmoc2b8.d(16):
    Error: found `?` instead of statement\n/tmp/tmpzcmoc2b8.d(18): Error: no identifier
    for declarator `strings`\n/tmp/tmpzcmoc2b8.d(18): Error: found `)` when expecting
    `;`\n/tmp/tmpzcmoc2b8.d(25): Error: found `return` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzcmoc2b8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3c8pq3a8.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmp3c8pq3a8.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp3c8pq3a8.d(31):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c8pq3a8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; i++) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpctrgxlwx.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmpctrgxlwx.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpctrgxlwx.d(31):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpctrgxlwx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? longestLength = null;\n\tstring longestString = null;\n\
    \tforeach(string[] stringArray, strings) {\n\t\tint stringLength = stringArray.length;\n\
    \t\tif (longestLength == null || longestLength > stringLength) {\n\t\t\tlongestLength\
    \ = stringLength;\n\t\t\tlongestString = stringArray[0];\n\t\t}\n\t}\n\treturn\
    \ longestString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n      \
    \  auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n    \
    \    auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplfhgzguu.d(16): Error: no identifier for declarator `int`\n/tmp/tmplfhgzguu.d(16):
    Error: found `?` instead of statement\n/tmp/tmplfhgzguu.d(18): Error: no identifier
    for declarator `strings`\n/tmp/tmplfhgzguu.d(18): Error: found `)` when expecting
    `;`\n/tmp/tmplfhgzguu.d(25): Error: found `return` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfhgzguu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tstring maxString = null;\n\tforeach(string,s,strings)\
    \ {\n\t\tint length = s.length();\n\t\tif(maxLength == null || length > maxLength)\
    \ {\n\t\t\tmaxLength = length;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\treturn maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w258fx4.d(16): Error: no identifier for declarator `int`\n/tmp/tmp8w258fx4.d(16):
    Error: found `?` instead of statement\n/tmp/tmp8w258fx4.d(18): Error: no identifier
    for declarator `strings`\n/tmp/tmp8w258fx4.d(18): Error: found `)` when expecting
    `;`\n/tmp/tmp8w258fx4.d(25): Error: found `return` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8w258fx4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int[] lengths = strings.length.map!(x => x.toInt);\n    int maxLength\
    \ = lengths.max;\n    \n    for (int i = 0; i < lengths.length; i++) {\n     \
    \   if (lengths[i] != maxLength) {\n            return strings[i];\n        }\n\
    \    }\n    \n    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1nwetxbx.d(20): Error: no property `map` for type `ulong`\n/tmp/tmp1nwetxbx.d(21):
    Error: no property `max` for type `int[]`\n/tmp/tmp1nwetxbx.d(17): Error: cannot
    implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp1nwetxbx.d(25):
    Error: cannot implicitly convert expression `strings[cast(ulong)i]` of type `string`
    to `Nullable!string`\n/tmp/tmp1nwetxbx.d(29): Error: cannot implicitly convert
    expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp1nwetxbx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        int len = s.length();\n        if (maxLength == null || len > maxLength)\
    \ {\n            maxLength = len;\n        }\n    }\n    return maxLength;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk8jgedp3.d(16): Error: no identifier for declarator `int`\n/tmp/tmpk8jgedp3.d(16):
    Error: found `?` instead of statement\n/tmp/tmpk8jgedp3.d(17): Error: found `in`
    when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk8jgedp3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = strings[0];\n    \n    for\
    \ (int i = 1; i < strings.length; i++) {\n        if (strings[i].length() > maxLength)\
    \ {\n            maxLength = strings[i].length();\n            maxString = strings[i];\n\
    \        }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5nbktiqb.d(24): Error: no property `length` for type `string`\n/tmp/tmp5nbktiqb.d(25):
    Error: no property `length` for type `string`\n/tmp/tmp5nbktiqb.d(17): Error:
    cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp5nbktiqb.d(30):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5nbktiqb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach(string; strings) {\n\t\tint\
    \ length = string.length;\n\t\tif (maxLength == null || length > maxLength) {\n\
    \t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp96rg6osi.d(16): Error: no identifier for declarator `int`\n/tmp/tmp96rg6osi.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp96rg6osi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2etf4ec1.d(272): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2etf4ec1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0; i &lt;\
    \ strings.length; ++i) {\n        var s = strings[i];\n        if (s.length &gt;\
    \ maxLength) {\n            maxLength = s.length;\n            maxString = s;\n\
    \        }\n    }\n    return maxString;\n}\n</pre>\n</div>\nunittest\n{\n   \
    \ alias candidate = longest;\n\n{\n        auto result = candidate([]);\n    \
    \    assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"\
    y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuf9x5pvx.d(21): Error: found `;` when expecting `)`\n/tmp/tmpuf9x5pvx.d(21):
    Error: found `)` when expecting `;` following statement\n/tmp/tmpuf9x5pvx.d(23):
    Error: found `;` when expecting `)`\n/tmp/tmpuf9x5pvx.d(23): Error: found `)`
    when expecting `;` following statement\n/tmp/tmpuf9x5pvx.d(30): Error: declaration
    expected, not `<`\n/tmp/tmpuf9x5pvx.d(36): Error: declaration expected, not `{`\n/tmp/tmpuf9x5pvx.d(38):
    Error: declaration expected, not `assert`\n/tmp/tmpuf9x5pvx.d(39): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuf9x5pvx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach(string; strings) {\n \
    \       if (maxLength == null || string.length >= maxLength) {\n            maxLength\
    \ = string.length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjr9py5ib.d(16): Error: no identifier for declarator `int`\n/tmp/tmpjr9py5ib.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpjr9py5ib.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbtk4gid0.d(20): Error: cannot implicitly convert expression
    `strings[0].length` of type `ulong` to `int`\n/tmp/tmpbtk4gid0.d(24): Error: cannot
    implicitly convert expression `strings[cast(ulong)i].length` of type `ulong` to
    `int`\n/tmp/tmpbtk4gid0.d(17): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!string`\n/tmp/tmpbtk4gid0.d(28): Error: cannot
    implicitly convert expression `strings[strings.length - 1LU]` of type `string`
    to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbtk4gid0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; i++) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpctrgxlwx.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmpctrgxlwx.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpctrgxlwx.d(31):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpctrgxlwx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach (string s in\
    \ strings) {\n        if (longest == null || s.length() > longest.length()) {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyjy00btc.d(17): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyjy00btc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm8dgzwx4.d(19): Error: undefined identifier `var`\n/tmp/tmpm8dgzwx4.d(20):
    Error: undefined identifier `var`\n/tmp/tmpm8dgzwx4.d(17): Error: cannot implicitly
    convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm8dgzwx4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach(string; strings) {\n\t\tint?\
    \ length = string.length;\n\t\tif (maxLength == null || length > maxLength) {\n\
    \t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyp8nsrlt.d(16): Error: no identifier for declarator `int`\n/tmp/tmpyp8nsrlt.d(16):
    Error: found `?` instead of statement\n/tmp/tmpyp8nsrlt.d(18): Error: no identifier
    for declarator `int`\n/tmp/tmpyp8nsrlt.d(18): Error: found `?` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyp8nsrlt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3c8pq3a8.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmp3c8pq3a8.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp3c8pq3a8.d(31):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c8pq3a8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        int length = s.length();\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = s;\n        }\n\
    \    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7_n98g00.d(22): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7_n98g00.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ string : strings) {\n        int length = string.length;\n        if (length\
    \ > maxLength) {\n            maxLength = length;\n            maxString = string;\n\
    \        }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6x7sb9b.d(23): Error: found `string` when expecting `;` following
    statement\n/tmp/tmpw6x7sb9b.d(23): Error: expression expected, not `:`\n/tmp/tmpw6x7sb9b.d(23):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpw6x7sb9b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach (string s in strings)\n\t\
    {\n\t\tif (maxLength == null || s.length() > maxLength.value)\n\t\t{\n\t\t\tmaxLength\
    \ = s.length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo2qxd2ey.d(16): Error: no identifier for declarator `int`\n/tmp/tmpo2qxd2ey.d(16):
    Error: found `?` instead of statement\n/tmp/tmpo2qxd2ey.d(17): Error: found `in`
    when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo2qxd2ey.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpva3zwfa_.d(22): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpva3zwfa_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    int maxIndex = 0;\n    \n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        int length = strings[i].length();\n    \
    \    if (length > maxLength) {\n            maxLength = length;\n            maxIndex\
    \ = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpizikxg4e.d(24): Error: no property `length` for type `string`\n/tmp/tmpizikxg4e.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpizikxg4e.d(31):
    Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of
    type `string` to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpizikxg4e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength.Value()) {\n    \
    \        maxLength = s.length;\n        }\n    }\n    return maxLength;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmeyb8s1n.d(16): Error: no identifier for declarator `int`\n/tmp/tmpmeyb8s1n.d(16):
    Error: found `?` instead of statement\n/tmp/tmpmeyb8s1n.d(17): Error: found `in`
    when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmeyb8s1n.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ string : strings) {\n        int length = string.length;\n        if (length\
    \ > maxLength) {\n            maxLength = length;\n            maxString = string;\n\
    \        }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6x7sb9b.d(23): Error: found `string` when expecting `;` following
    statement\n/tmp/tmpw6x7sb9b.d(23): Error: expression expected, not `:`\n/tmp/tmpw6x7sb9b.d(23):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpw6x7sb9b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3c8pq3a8.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmp3c8pq3a8.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp3c8pq3a8.d(31):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c8pq3a8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLength = 0;\n    int maxIndex = 0;\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxIndex = i;\n        }\n \
    \   }\n    return strings[maxIndex];\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9bleucez.d(22): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmp9bleucez.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp9bleucez.d(28):
    Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of
    type `string` to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp9bleucez.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tstring maxString = null;\n\tforeach(string,string,strings)\
    \ {\n\t\tif (maxLength == null || maxLength > string.length)\n\t\t\tmaxLength\
    \ = string.length;\n\t\tif (maxString == null || maxString.length < string.length)\n\
    \t\t\tmaxString = string;\n\t}\n\treturn maxString;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmwyi90zj.d(16): Error: no identifier for declarator `int`\n/tmp/tmpmwyi90zj.d(16):
    Error: found `?` instead of statement\n/tmp/tmpmwyi90zj.d(18): Error: no identifier
    for declarator `strings`\n/tmp/tmpmwyi90zj.d(18): Error: found `)` when expecting
    `;`\n/tmp/tmpmwyi90zj.d(24): Error: found `return` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwyi90zj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp44hbmdh.d(16): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp44hbmdh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ ++i) {\n        var len = strings[i].length;\n        if (len > longest.length)\
    \ longest = strings[i];\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphu238uq6.d(16): Error: undefined identifier `var`\n/tmp/tmphu238uq6.d(17):
    Error: undefined identifier `var`\n/tmp/tmphu238uq6.d(18): Error: undefined identifier
    `var`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphu238uq6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen) {\n            return strings[i];\n\
    \        }\n        maxLen = strings[i].length;\n    }\n    \n    return null;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7cj17s62.d(20): Error: cannot implicitly convert expression
    `strings[0].length` of type `ulong` to `int`\n/tmp/tmp7cj17s62.d(26): Error: cannot
    implicitly convert expression `strings[cast(ulong)i].length` of type `ulong` to
    `int`\n/tmp/tmp7cj17s62.d(17): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!string`\n/tmp/tmp7cj17s62.d(24): Error: cannot
    implicitly convert expression `strings[cast(ulong)i]` of type `string` to `Nullable!string`\n/tmp/tmp7cj17s62.d(29):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cj17s62.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    int maxIndex = 0;\n    \n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        int length = strings[i].length;\n      \
    \  if (length > maxLength) {\n            maxLength = length;\n            maxIndex\
    \ = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkwuit_4k.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmpkwuit_4k.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpkwuit_4k.d(31):
    Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of
    type `string` to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpkwuit_4k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm8dgzwx4.d(19): Error: undefined identifier `var`\n/tmp/tmpm8dgzwx4.d(20):
    Error: undefined identifier `var`\n/tmp/tmpm8dgzwx4.d(17): Error: cannot implicitly
    convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm8dgzwx4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLen = 0;\n    int maxIndex = 0;\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLen) {\n            maxLen = s.length();\n  \
    \          maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n}\n\
    </code>\n<|/ a |>\n<| c |>\nI like your solution, but I wonder why you didn't\
    \ use std.algorithm.maxBy instead of writing your own maxBy function?\n<|/ c |>\n\
    <| c |>\nBecause I didn't know about std.algorithm.maxBy. Thanks for pointing\
    \ it out!\n<|/ c |>\n<| c |>\nI didn't know about std.algorithm.maxBy either.\
    \ Thanks for pointing it out!\n<|/ c |>\n<| a |>\nI came up with a solution that\
    \ uses std.algorithm.maxBy and std.algorithm.minBy:\n<code>\nimport std.algorithm;\n\
    import std.array;\nimport std.conv;\nimport std.stdio;\nimport std.string;\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4uff_cp1.d(21): Error: found `in` when expecting `;`\n/tmp/tmp4uff_cp1.d(29):
    Error: declaration expected, not `<`\n/tmp/tmp4uff_cp1.d(32): Error: unterminated
    character constant\n/tmp/tmp4uff_cp1.d(35): Error: unterminated character constant\n/tmp/tmp4uff_cp1.d(38):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp4uff_cp1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ string : strings) {\n        if (string.length > maxLength) {\n            maxLength\
    \ = string.length;\n            maxString = string;\n        }\n    }\n    \n\
    \    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph3zlxnhl.d(23): Error: found `string` when expecting `;` following
    statement\n/tmp/tmph3zlxnhl.d(23): Error: expression expected, not `:`\n/tmp/tmph3zlxnhl.d(23):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmph3zlxnhl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3c8pq3a8.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmp3c8pq3a8.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp3c8pq3a8.d(31):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c8pq3a8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach (string s in strings)\n\t\
    {\n\t\tif (maxLength == null || s.length() > maxLength)\n\t\t{\n\t\t\tmaxLength\
    \ = s.length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqb7rtqc7.d(16): Error: no identifier for declarator `int`\n/tmp/tmpqb7rtqc7.d(16):
    Error: found `?` instead of statement\n/tmp/tmpqb7rtqc7.d(17): Error: found `in`
    when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqb7rtqc7.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length >= maxLen) {\n            return strings[i];\n\
    \        }\n        maxLen = strings[i].length;\n    }\n    \n    return null;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoa0a_g4v.d(20): Error: cannot implicitly convert expression
    `strings[0].length` of type `ulong` to `int`\n/tmp/tmpoa0a_g4v.d(26): Error: cannot
    implicitly convert expression `strings[cast(ulong)i].length` of type `ulong` to
    `int`\n/tmp/tmpoa0a_g4v.d(17): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!string`\n/tmp/tmpoa0a_g4v.d(24): Error: cannot
    implicitly convert expression `strings[cast(ulong)i]` of type `string` to `Nullable!string`\n/tmp/tmpoa0a_g4v.d(29):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoa0a_g4v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tstring maxString = null;\n\tforeach(string;\
    \ strings) {\n\t\tif (maxLength == null || string.length < maxLength) {\n\t\t\t\
    maxLength = string.length;\n\t\t\tmaxString = string;\n\t\t}\n\t}\n\treturn maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2k9y0pk4.d(16): Error: no identifier for declarator `int`\n/tmp/tmp2k9y0pk4.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2k9y0pk4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph236f__p.d(21): Error: found `s` when expecting `;` following
    statement\n/tmp/tmph236f__p.d(21): Error: expression expected, not `:`\n/tmp/tmph236f__p.d(21):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmph236f__p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach(string,strings) \n\t{\n\t\t\
    int length = string.length;\n\t\tif (maxLength == null || length > maxLength)\n\
    \t\t{\n\t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqauyn7n1.d(16): Error: no identifier for declarator `int`\n/tmp/tmpqauyn7n1.d(16):
    Error: found `?` instead of statement\n/tmp/tmpqauyn7n1.d(17): Error: no identifier
    for declarator `strings`\n/tmp/tmpqauyn7n1.d(17): Error: found `)` when expecting
    `;`\n/tmp/tmpqauyn7n1.d(25): Error: found `return` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqauyn7n1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        int len = s.length();\n        if (maxLength == null || len > maxLength)\
    \ {\n            maxLength = len;\n        }\n    }\n    return maxLength;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk8jgedp3.d(16): Error: no identifier for declarator `int`\n/tmp/tmpk8jgedp3.d(16):
    Error: found `?` instead of statement\n/tmp/tmpk8jgedp3.d(17): Error: found `in`
    when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk8jgedp3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ string : strings) {\n        int length = string.length;\n        if (length\
    \ > maxLength) {\n            maxLength = length;\n            maxString = string;\n\
    \        }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6x7sb9b.d(23): Error: found `string` when expecting `;` following
    statement\n/tmp/tmpw6x7sb9b.d(23): Error: expression expected, not `:`\n/tmp/tmpw6x7sb9b.d(23):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpw6x7sb9b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length)\n            longest = strings[i];\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplve0m6al.d(18): Error: undefined identifier `var`\n/tmp/tmplve0m6al.d(19):
    Error: undefined identifier `var`\n/tmp/tmplve0m6al.d(17): Error: cannot implicitly
    convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplve0m6al.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLength = 0;\n    string maxString = strings[0];\n    for (int i =\
    \ 1; i < strings.length; ++i) {\n        if (strings[i].length() > maxLength)\
    \ {\n            maxLength = strings[i].length();\n            maxString = strings[i];\n\
    \        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7tlnat1m.d(22): Error: no property `length` for type `string`\n/tmp/tmp7tlnat1m.d(23):
    Error: no property `length` for type `string`\n/tmp/tmp7tlnat1m.d(17): Error:
    cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp7tlnat1m.d(27):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7tlnat1m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe5_2elgt.d(16): Error: no identifier for declarator `int`\n/tmp/tmpe5_2elgt.d(16):
    Error: found `?` instead of statement\n/tmp/tmpe5_2elgt.d(17): Error: found `in`
    when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5_2elgt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3c8pq3a8.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmp3c8pq3a8.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp3c8pq3a8.d(31):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c8pq3a8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tstring maxString = null;\n\tforeach(string;\
    \ strings) {\n\t\tint length = string.length;\n\t\tif (maxLength == null || length\
    \ > maxLength) {\n\t\t\tmaxLength = length;\n\t\t\tmaxString = string;\n\t\t}\n\
    \t}\n\treturn maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp27g4y8pj.d(16): Error: no identifier for declarator `int`\n/tmp/tmp27g4y8pj.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp27g4y8pj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach(string; strings)\
    \ {\n        if (longest == null || string.length < longest.length)\n        \
    \    longest = string;\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmptdrypn1g.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x455539]\n??:? void tmptdrypn1g.__unittest_L23_C1() [0x4414a3]\n??:?
    void tmptdrypn1g.__modtest() [0x453048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45e3af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x454b66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x459d59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x459de8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x459ce5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x454b3d]\n??:? runModuleUnitTests [0x45e185]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4564c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x45644b]\n??:? _d_run_main [0x4563b6]\n??:? main [0x45311b]\n??:?
    __libc_start_main [0x63fcc554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    string longest = strings[0];\n    \n    for (string s : strings) {\n\
    \        if (s.length() > longest.length()) {\n            longest = s;\n    \
    \    }\n    }\n    \n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1532o65j.d(22): Error: found `s` when expecting `;` following
    statement\n/tmp/tmp1532o65j.d(22): Error: expression expected, not `:`\n/tmp/tmp1532o65j.d(22):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp1532o65j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0; i &lt;\
    \ strings.length; i++) {\n        var s = strings[i];\n        if (s.length &gt;\
    \ maxLength) {\n            maxLength = s.length;\n            maxString = s;\n\
    \        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnsiecep4.d(21): Error: found `;` when expecting `)`\n/tmp/tmpnsiecep4.d(21):
    Error: found `)` when expecting `;` following statement\n/tmp/tmpnsiecep4.d(23):
    Error: found `;` when expecting `)`\n/tmp/tmpnsiecep4.d(23): Error: found `)`
    when expecting `;` following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpnsiecep4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength.Value()) {\n    \
    \        maxLength = s.length;\n        }\n    }\n    return maxLength;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmeyb8s1n.d(16): Error: no identifier for declarator `int`\n/tmp/tmpmeyb8s1n.d(16):
    Error: found `?` instead of statement\n/tmp/tmpmeyb8s1n.d(17): Error: found `in`
    when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmeyb8s1n.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLength = 0;\n    string maxString = strings[0];\n    \n    for (int i\
    \ = 1; i < strings.length; ++i) {\n        int length = strings[i].length;\n \
    \       if (length > maxLength) {\n            maxLength = length;\n         \
    \   maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmnlpzafk.d(23): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmpmnlpzafk.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpmnlpzafk.d(30):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnlpzafk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tstring maxString = null;\n\tforeach(string,s,strings)\
    \ {\n\t\tif(s.length() > maxLength) {\n\t\t\tmaxLength = s.length;\n\t\t\tmaxString\
    \ = s;\n\t\t}\n\t}\n\treturn maxString;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn0i0omo8.d(16): Error: no identifier for declarator `int`\n/tmp/tmpn0i0omo8.d(16):
    Error: found `?` instead of statement\n/tmp/tmpn0i0omo8.d(18): Error: no identifier
    for declarator `strings`\n/tmp/tmpn0i0omo8.d(18): Error: found `)` when expecting
    `;`\n/tmp/tmpn0i0omo8.d(24): Error: found `return` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0i0omo8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach(string;\
    \ strings) {\n        var length = string.length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = string;\n      \
    \  }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp374k7c0b.d(16): Error: undefined identifier `var`\n/tmp/tmp374k7c0b.d(17):
    Error: undefined identifier `var`\n/tmp/tmp374k7c0b.d(19): Error: undefined identifier
    `var`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp374k7c0b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach(string; strings)\
    \ {\n        if (longest == null || string.length >= longest.length)\n       \
    \     longest = string;\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpl9ndp_tm.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x455539]\n??:? void tmpl9ndp_tm.__unittest_L23_C1() [0x4414a3]\n??:?
    void tmpl9ndp_tm.__modtest() [0x453048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45e3af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x454b66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x459d59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x459de8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x459ce5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x454b3d]\n??:? runModuleUnitTests [0x45e185]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4564c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x45644b]\n??:? _d_run_main [0x4563b6]\n??:? main [0x45311b]\n??:?
    __libc_start_main [0xe4f1b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length > longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyk8j3qm5.d(19): Error: undefined identifier `var`\n/tmp/tmpyk8j3qm5.d(20):
    Error: undefined identifier `var`\n/tmp/tmpyk8j3qm5.d(17): Error: cannot implicitly
    convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyk8j3qm5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach(string; strings) {\n\t\tint\
    \ length = string.length;\n\t\tif (maxLength == null || length > maxLength) {\n\
    \t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp96rg6osi.d(16): Error: no identifier for declarator `int`\n/tmp/tmp96rg6osi.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp96rg6osi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length)\n            longest = strings[i];\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplve0m6al.d(18): Error: undefined identifier `var`\n/tmp/tmplve0m6al.d(19):
    Error: undefined identifier `var`\n/tmp/tmplve0m6al.d(17): Error: cannot implicitly
    convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplve0m6al.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLength = 0;\n    string maxString = null;\n    \n    for (string s :\
    \ strings)\n    {\n        int length = s.length();\n        if (length > maxLength)\n\
    \        {\n            maxLength = length;\n            maxString = s;\n    \
    \    }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbnv245ro.d(22): Error: found `s` when expecting `;` following
    statement\n/tmp/tmpbnv245ro.d(22): Error: expression expected, not `:`\n/tmp/tmpbnv245ro.d(22):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpbnv245ro.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach(string; strings) {\n\t\tint\
    \ length = string.length;\n\t\tif (maxLength == null || length > maxLength) {\n\
    \t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp96rg6osi.d(16): Error: no identifier for declarator `int`\n/tmp/tmp96rg6osi.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp96rg6osi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ string : strings) {\n        if (string.length > maxLength) {\n            maxLength\
    \ = string.length;\n            maxString = string;\n        }\n    }\n    \n\
    \    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph3zlxnhl.d(23): Error: found `string` when expecting `;` following
    statement\n/tmp/tmph3zlxnhl.d(23): Error: expression expected, not `:`\n/tmp/tmph3zlxnhl.d(23):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmph3zlxnhl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tstring maxString = null;\n\tforeach(string,s,strings)\
    \ {\n\t\tif(s.length() > maxLength) {\n\t\t\tmaxLength = s.length;\n\t\t\tmaxString\
    \ = s;\n\t\t}\n\t}\n\treturn maxString;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn0i0omo8.d(16): Error: no identifier for declarator `int`\n/tmp/tmpn0i0omo8.d(16):
    Error: found `?` instead of statement\n/tmp/tmpn0i0omo8.d(18): Error: no identifier
    for declarator `strings`\n/tmp/tmpn0i0omo8.d(18): Error: found `)` when expecting
    `;`\n/tmp/tmpn0i0omo8.d(24): Error: found `return` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0i0omo8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach(string; strings) {\n \
    \       if (maxLength == null || string.length < maxLength) {\n            maxLength\
    \ = string.length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp29as34hi.d(16): Error: no identifier for declarator `int`\n/tmp/tmp29as34hi.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp29as34hi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length();\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpekoeg8l_.d(24): Error: no property `length` for type `string`\n/tmp/tmpekoeg8l_.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpekoeg8l_.d(31):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpekoeg8l_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0; i &lt;\
    \ strings.length; i++) {\n        var length = strings[i].length;\n        if\
    \ (length &gt; maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    return maxString;\n}\nunittest\n{\n   \
    \ alias candidate = longest;\n\n{\n        auto result = candidate([]);\n    \
    \    assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"\
    y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp5xnd6hs.d(21): Error: found `;` when expecting `)`\n/tmp/tmpp5xnd6hs.d(21):
    Error: found `)` when expecting `;` following statement\n/tmp/tmpp5xnd6hs.d(23):
    Error: found `;` when expecting `)`\n/tmp/tmpp5xnd6hs.d(23): Error: found `)`
    when expecting `;` following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpp5xnd6hs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLength = 0;\n    string maxString = strings[0];\n    \n    for (int i\
    \ = 1; i < strings.length; ++i) {\n        if (strings[i].length() > maxLength)\
    \ {\n            maxLength = strings[i].length();\n            maxString = strings[i];\n\
    \        }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppu9ks6yc.d(23): Error: no property `length` for type `string`\n/tmp/tmppu9ks6yc.d(24):
    Error: no property `length` for type `string`\n/tmp/tmppu9ks6yc.d(17): Error:
    cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmppu9ks6yc.d(29):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppu9ks6yc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i)\n        if (strings[i].length\
    \ >= longest.length)\n            longest = strings[i];\n    return longest;\n\
    }\n/*\n Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\n    strings of the same length. Return null in case the\
    \ input array is empty.\n    >>> shortest([\"\"])\n    None\n    >>> shortest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> shortest([\"a\", \"bb\", \"ccc\"])\n \
    \   \"a\"\n    \n*/\nNullable!(string) shortest(string[] strings) \n{\n    if\
    \ (strings.length == 0)\n        return null;\n    var shortest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i)\n        if (strings[i].length <\
    \ shortest.length)\n            shortest = strings[i];\n    return shortest;\n\
    }\n/*\n Out of array of strings, return the longest one in case of multiple strings\
    \ of the same length.\n    Return null in case the input array is empty.\n   \
    \ >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\"\
    , \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings)\
    \ \n{\n    if (strings.length == 0)\n        return null;\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i)\n        if (strings[i].length >\
    \ longest.length)\n            longest = strings[i];\n    return longest;\n}\n\
    /*\n Out of array of strings, return the shortest one in case of multiple strings\
    \ of the same length.\n    Return null in case the input array is empty.\n   \
    \ >>> shortest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> shortest([\"a\", \"\
    bb\", \"ccc\"])\n    \"a\"\n    \n*/\nNullable!(string) shortest(string[] strings)\
    \ \n{\n    if (strings.length == 0)\n        return null;\n    var shortest =\
    \ strings[0];\n    for (var i = 1; i < strings.length; ++i)\n        if (strings[i].length\
    \ < shortest.length)\n            shortest = strings[i];\n    return shortest;\n\
    }\n/*\n Out of array of strings, return the longest one in case of multiple strings\
    \ of the same length.\n    Return null in case the input array is empty.\n   \
    \ >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\"\
    , \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings)\
    \ \n{\n    if (strings.length == 0)\n        return null;\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i)\n        if (strings[i].length >\
    \ longest.length)\n            longest\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgx2gdgmi.d(100): Error: found `unittest` when expecting `;`
    following statement\n/tmp/tmpgx2gdgmi.d(120): Error: found `End of File` when
    expecting `}` following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpgx2gdgmi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLength = 0;\n    int maxIndex = 0;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxIndex = i;\n        }\n \
    \   }\n    \n    return strings[maxIndex];\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpidkdmth4.d(23): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmpidkdmth4.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpidkdmth4.d(30):
    Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of
    type `string` to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpidkdmth4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length) longest = s;\n    }\n    return longest;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe00db52n.d(16): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe00db52n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ string : strings) {\n        int length = string.length;\n        if (length\
    \ > maxLength) {\n            maxLength = length;\n            maxString = string;\n\
    \        }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6x7sb9b.d(23): Error: found `string` when expecting `;` following
    statement\n/tmp/tmpw6x7sb9b.d(23): Error: expression expected, not `:`\n/tmp/tmpw6x7sb9b.d(23):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpw6x7sb9b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var longest:string = Null!(string);\n    var i:int = 0;\n\
    \    var len:int = 0;\n    var s:string = strings[i];\n    while(i < strings.length)\n\
    \    {\n        len = s.length();\n        if(len > longest.length)\n        {\n\
    \            longest = s;\n        }\n        i++;\n        s = strings[i];\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpddirs4u9.d(16): Error: found `longest` when expecting `;` following
    statement\n/tmp/tmpddirs4u9.d(16): Error: found `:` instead of statement\n/tmp/tmpddirs4u9.d(17):
    Error: found `i` when expecting `;` following statement\n/tmp/tmpddirs4u9.d(17):
    Error: found `:` instead of statement\n/tmp/tmpddirs4u9.d(18): Error: found `len`
    when expecting `;` following statement\n/tmp/tmpddirs4u9.d(18): Error: found `:`
    instead of statement\n/tmp/tmpddirs4u9.d(19): Error: found `s` when expecting
    `;` following statement\n/tmp/tmpddirs4u9.d(19): Error: found `:` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpddirs4u9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tif (strings.length == 0)\n\t\treturn null;\n\t\n\tstring longest\
    \ = strings[0];\n\t\n\tfor (int i = 1; i < strings.length; ++i)\n\t{\n\t\tif (strings[i].length()\
    \ > longest.length())\n\t\t\tlongest = strings[i];\n\t}\n\t\n\treturn longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnf2f7aho.d(23): Error: no property `length` for type `string`\n/tmp/tmpnf2f7aho.d(23):
    Error: no property `length` for type `string`\n/tmp/tmpnf2f7aho.d(17): Error:
    cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpnf2f7aho.d(27):
    Error: cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnf2f7aho.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3c8pq3a8.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmp3c8pq3a8.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp3c8pq3a8.d(31):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c8pq3a8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ string : strings) {\n        int length = string.length;\n        if (length\
    \ > maxLength) {\n            maxLength = length;\n            maxString = string;\n\
    \        }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6x7sb9b.d(23): Error: found `string` when expecting `;` following
    statement\n/tmp/tmpw6x7sb9b.d(23): Error: expression expected, not `:`\n/tmp/tmpw6x7sb9b.d(23):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpw6x7sb9b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLength = 0;\n    string maxString = strings[0];\n    \n    for (int i\
    \ = 1; i < strings.length; ++i) {\n        int length = strings[i].length;\n \
    \       if (length > maxLength) {\n            maxLength = length;\n         \
    \   maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmnlpzafk.d(23): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmpmnlpzafk.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpmnlpzafk.d(30):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnlpzafk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe5_2elgt.d(16): Error: no identifier for declarator `int`\n/tmp/tmpe5_2elgt.d(16):
    Error: found `?` instead of statement\n/tmp/tmpe5_2elgt.d(17): Error: found `in`
    when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5_2elgt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsda641qe.d(20): Error: cannot implicitly convert expression
    `strings[0].length` of type `ulong` to `int`\n/tmp/tmpsda641qe.d(24): Error: cannot
    implicitly convert expression `strings[cast(ulong)i].length` of type `ulong` to
    `int`\n/tmp/tmpsda641qe.d(17): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!string`\n/tmp/tmpsda641qe.d(28): Error: cannot
    implicitly convert expression `strings[strings.length - 1LU]` of type `string`
    to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsda641qe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    string longest = strings[0];\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length() > longest.length()) {\n            longest\
    \ = strings[i];\n        }\n    }\n    \n    return longest;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpulcbng4h.d(23): Error: no property `length` for type `string`\n/tmp/tmpulcbng4h.d(23):
    Error: no property `length` for type `string`\n/tmp/tmpulcbng4h.d(17): Error:
    cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpulcbng4h.d(28):
    Error: cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpulcbng4h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = 0;\n    var maxString = \"\";\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplxyr97ck.d(21): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplxyr97ck.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    int maxIndex = 0;\n    \n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        int length = strings[i].length;\n      \
    \  if (length > maxLength) {\n            maxLength = length;\n            maxIndex\
    \ = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkwuit_4k.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmpkwuit_4k.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpkwuit_4k.d(31):
    Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of
    type `string` to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpkwuit_4k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ string : strings) {\n        if (string.length > maxLength) {\n            maxLength\
    \ = string.length;\n            maxString = string;\n        }\n    }\n    \n\
    \    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph3zlxnhl.d(23): Error: found `string` when expecting `;` following
    statement\n/tmp/tmph3zlxnhl.d(23): Error: expression expected, not `:`\n/tmp/tmph3zlxnhl.d(23):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmph3zlxnhl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n\
    \        var len = strings[i].length;\n        if (len > longest.length) {\n \
    \           longest = strings[i];\n        }\n    }\n    return longest;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf_jdyk4h.d(19): Error: undefined identifier `var`\n/tmp/tmpf_jdyk4h.d(20):
    Error: undefined identifier `var`\n/tmp/tmpf_jdyk4h.d(21): Error: undefined identifier
    `var`\n/tmp/tmpf_jdyk4h.d(17): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpf_jdyk4h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tif (strings.length == 0)\n\t\treturn null;\n\t\n\tstring longest\
    \ = strings[0];\n\t\n\tfor (int i = 1; i < strings.length; i++)\n\t{\n\t\tif (strings[i].length()\
    \ > longest.length)\n\t\t\tlongest = strings[i];\n\t}\n\t\n\treturn longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf7ppks_m.d(23): Error: no property `length` for type `string`\n/tmp/tmpf7ppks_m.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpf7ppks_m.d(27):
    Error: cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf7ppks_m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach(string; strings) {\n        if (string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpohiov9co.d(17): Error: function `tmpohiov9co.longest(string[]
    strings)` is not callable using argument types `()`\n/tmp/tmpohiov9co.d(18): Error:
    function `tmpohiov9co.longest(string[] strings)` is not callable using argument
    types `(string)`\n/tmp/tmpohiov9co.d(18):        cannot pass argument `string`
    of type `string` to parameter `string[] strings`\n/tmp/tmpohiov9co.d(20): Error:
    function `tmpohiov9co.longest(string[] strings)` is not callable using argument
    types `()`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpohiov9co.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe5_2elgt.d(16): Error: no identifier for declarator `int`\n/tmp/tmpe5_2elgt.d(16):
    Error: found `?` instead of statement\n/tmp/tmpe5_2elgt.d(17): Error: found `in`
    when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5_2elgt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    \n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2rixvks9.d(23): Error: semicolon expected, not `in`\n/tmp/tmp2rixvks9.d(23):
    Error: expression expected, not `in`\n/tmp/tmp2rixvks9.d(23): Error: found `strings`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2rixvks9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var longest = strings[0];\n    var longestLength = longest.length;\n\
    \    for(var i = 1; i < strings.length; ++i)\n    {\n        var s = strings[i];\n\
    \        var l = s.length;\n        if(l > longestLength)\n        {\n       \
    \     longest = s;\n            longestLength = l;\n        }\n    }\n    return\
    \ longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpygu8864o.d(16): Error: undefined identifier `var`\n/tmp/tmpygu8864o.d(17):
    Error: undefined identifier `var`\n/tmp/tmpygu8864o.d(18): Error: undefined identifier
    `var`\n/tmp/tmpygu8864o.d(20): Error: undefined identifier `var`\n/tmp/tmpygu8864o.d(21):
    Error: undefined identifier `var`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpygu8864o.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tstring maxString = null;\n\tforeach(string,s,strings)\
    \ {\n\t\tif (s.length() > maxLength) {\n\t\t\tmaxLength = s.length;\n\t\t\tmaxString\
    \ = s;\n\t\t}\n\t}\n\treturn maxString;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpysy6x7kq.d(16): Error: no identifier for declarator `int`\n/tmp/tmpysy6x7kq.d(16):
    Error: found `?` instead of statement\n/tmp/tmpysy6x7kq.d(18): Error: no identifier
    for declarator `strings`\n/tmp/tmpysy6x7kq.d(18): Error: found `)` when expecting
    `;`\n/tmp/tmpysy6x7kq.d(24): Error: found `return` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpysy6x7kq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen)\n            continue;\n  \
    \      \n        maxLen = strings[i].length;\n    }\n    \n    return strings[strings.length\
    \ - 1];\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbu5_q1_h.d(19): Error: cannot implicitly convert expression
    `strings[0].length` of type `ulong` to `int`\n/tmp/tmpbu5_q1_h.d(25): Error: cannot
    implicitly convert expression `strings[cast(ulong)i].length` of type `ulong` to
    `int`\n/tmp/tmpbu5_q1_h.d(17): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!string`\n/tmp/tmpbu5_q1_h.d(28): Error: cannot
    implicitly convert expression `strings[strings.length - 1LU]` of type `string`
    to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbu5_q1_h.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var longest = strings[0];\n    for(var i = 1; i < strings.length;\
    \ ++i)\n        if(strings[i].length >= longest.length)\n            longest =\
    \ strings[i];\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_8mlt65c.d(16): Error: undefined identifier `var`\n/tmp/tmp_8mlt65c.d(17):
    Error: undefined identifier `var`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_8mlt65c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach(string; strings) {\n \
    \       if (maxLength == null || string.length < maxLength.value)\n          \
    \  maxLength = string.length;\n    }\n    return maxLength;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfm4a6vkj.d(16): Error: no identifier for declarator `int`\n/tmp/tmpfm4a6vkj.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpfm4a6vkj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach(string; strings) {\n \
    \       if(maxLength == null || string.length < maxLength) {\n            maxLength\
    \ = string.length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0aql__84.d(16): Error: no identifier for declarator `int`\n/tmp/tmp0aql__84.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0aql__84.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach(string,strings) {\n\t\tint\
    \ length = string.length;\n\t\tif(maxLength == null || length > maxLength) {\n\
    \t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpszc34fu7.d(16): Error: no identifier for declarator `int`\n/tmp/tmpszc34fu7.d(16):
    Error: found `?` instead of statement\n/tmp/tmpszc34fu7.d(17): Error: no identifier
    for declarator `strings`\n/tmp/tmpszc34fu7.d(17): Error: found `)` when expecting
    `;`\n/tmp/tmpszc34fu7.d(23): Error: found `return` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpszc34fu7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe5_2elgt.d(16): Error: no identifier for declarator `int`\n/tmp/tmpe5_2elgt.d(16):
    Error: found `?` instead of statement\n/tmp/tmpe5_2elgt.d(17): Error: found `in`
    when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5_2elgt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = strings[0].Length;\n    for (var i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].Length > maxLength) {\n            maxLength\
    \ = strings[i].Length;\n        }\n    }\n    return maxLength > 0 ? strings[0]\
    \ : null;\n}\n/*\n In array of strings, return the longest one in case of multiple\
    \ strings of the same length.\n    Otherwise return the first one in case of multiple\
    \ strings of different length. Return null in case\n    the input array is empty.\n\
    \    >>> longestIn([])\n    None\n    >>> longestIn([\"a\", \"b\", \"c\"])\n \
    \   \"a\"\n    >>> longestIn([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\n\
    Nullable!(string) longestIn(string[] strings) \n{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    var maxLength = strings[0].Length;\n   \
    \ for (var i = 1; i < strings.length; i++) {\n        if (strings[i].Length >\
    \ maxLength) {\n            maxLength = strings[i].Length;\n        }\n    }\n\
    \    return maxLength > 0 ? strings[0] : null;\n}\n/*\n In array of strings, return\
    \ the longest one in case of multiple strings of the same length.\n    Otherwise\
    \ return the first one in case of multiple strings of different length. Return\
    \ null in case\n    the input array is empty.\n    >>> longestIn([])\n    None\n\
    \    >>> longestIn([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longestIn([\"a\"\
    , \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longestIn(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = strings[0].Length;\n    for (var i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].Length > maxLength) {\n            maxLength\
    \ = strings[i].Length;\n        }\n    }\n    return maxLength > 0 ? strings[0]\
    \ : null;\n}\n/*\n In array of strings, return the longest one in case of multiple\
    \ strings of the same length.\n    Otherwise return the first one in case of multiple\
    \ strings of different length. Return null in case\n    the input array is empty.\n\
    \    >>> longestIn([])\n    None\n    >>> longestIn([\"a\", \"b\", \"c\"])\n \
    \   \"a\"\n    >>> longestIn([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\n\
    Nullable!(string) longestIn(string[] strings) \n{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    var maxLength = strings[0].Length;\n   \
    \ for (var i = 1; i < strings.length; i++) {\n        if (strings[i].Length >\
    \ maxLength) {\n            maxLength = strings[i].Length;\n        }\n    }\n\
    \    return maxLength\nunittest\n{\n    alias candidate = longest;\n\n{\n    \
    \    auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n  \
    \      auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps7od5sus.d(101): Error: found `unittest` when expecting `;`
    following `return` statement\n/tmp/tmps7od5sus.d(121): Error: found `End of File`
    when expecting `}` following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmps7od5sus.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3c8pq3a8.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmp3c8pq3a8.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp3c8pq3a8.d(31):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c8pq3a8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = strings[0];\n    \n    for\
    \ (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length() > maxLength)\
    \ {\n            maxLength = strings[i].length();\n            maxString = strings[i];\n\
    \        }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy_7a9f9u.d(24): Error: no property `length` for type `string`\n/tmp/tmpy_7a9f9u.d(25):
    Error: no property `length` for type `string`\n/tmp/tmpy_7a9f9u.d(17): Error:
    cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpy_7a9f9u.d(30):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_7a9f9u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        var len = strings[i].length;\n        if (len > longest.length) {\n \
    \           longest = strings[i];\n        }\n    }\n    return longest;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp91m1vqq0.d(19): Error: undefined identifier `var`\n/tmp/tmp91m1vqq0.d(20):
    Error: undefined identifier `var`\n/tmp/tmp91m1vqq0.d(21): Error: undefined identifier
    `var`\n/tmp/tmp91m1vqq0.d(17): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp91m1vqq0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ s in strings) {\n        int length = s.length();\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = s;\n        }\n\
    \    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_k7kz_08.d(23): Error: semicolon expected, not `in`\n/tmp/tmp_k7kz_08.d(23):
    Error: expression expected, not `in`\n/tmp/tmp_k7kz_08.d(23): Error: found `strings`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_k7kz_08.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        int length = s.length();\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = s;\n        }\n\
    \    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7_n98g00.d(22): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7_n98g00.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpva3zwfa_.d(22): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpva3zwfa_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach(string;\
    \ strings) {\n        if (string.length > maxLength) {\n            maxLength\
    \ = string.length;\n            maxString = string;\n        }\n    }\n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplaz6k1_y.d(16): Error: undefined identifier `var`\n/tmp/tmplaz6k1_y.d(17):
    Error: undefined identifier `var`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplaz6k1_y.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; i++) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpctrgxlwx.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmpctrgxlwx.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpctrgxlwx.d(31):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpctrgxlwx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tstring maxString = null;\n\tforeach(string;\
    \ strings) {\n\t\tif (maxLength == null || string.length < maxLength) {\n\t\t\t\
    maxLength = string.length;\n\t\t\tmaxString = string;\n\t\t}\n\t}\n\treturn maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2k9y0pk4.d(16): Error: no identifier for declarator `int`\n/tmp/tmp2k9y0pk4.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2k9y0pk4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLength = 0;\n    string maxString = null;\n    for (string string\
    \ : strings) {\n        if (string.length > maxLength) {\n            maxLength\
    \ = string.length;\n            maxString = string;\n        }\n    }\n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpow2pdd4j.d(21): Error: found `string` when expecting `;` following
    statement\n/tmp/tmpow2pdd4j.d(21): Error: expression expected, not `:`\n/tmp/tmpow2pdd4j.d(21):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpow2pdd4j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tstring maxString = null;\n\tforeach(string[]\
    \ s, strings) {\n\t\tint len = s.length();\n\t\tif (maxLength == null || len >\
    \ maxLength) {\n\t\t\tmaxLength = len;\n\t\t\tmaxString = s[0];\n\t\t}\n\t\telse\
    \ if (len == maxLength) {\n\t\t\tmaxString = maxString + \",\" + s[0];\n\t\t}\n\
    \t}\n\treturn maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt7bu56ix.d(16): Error: no identifier for declarator `int`\n/tmp/tmpt7bu56ix.d(16):
    Error: found `?` instead of statement\n/tmp/tmpt7bu56ix.d(18): Error: no identifier
    for declarator `strings`\n/tmp/tmpt7bu56ix.d(18): Error: found `)` when expecting
    `;`\n/tmp/tmpt7bu56ix.d(28): Error: found `return` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt7bu56ix.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    int maxIndex = 0;\n    \n    for (int i = 0;\
    \ i < strings.length; i++) {\n        int length = strings[i].length;\n      \
    \  if (length > maxLength) {\n            maxLength = length;\n            maxIndex\
    \ = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv2a0v9hq.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmpv2a0v9hq.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpv2a0v9hq.d(31):
    Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of
    type `string` to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv2a0v9hq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm8dgzwx4.d(19): Error: undefined identifier `var`\n/tmp/tmpm8dgzwx4.d(20):
    Error: undefined identifier `var`\n/tmp/tmpm8dgzwx4.d(17): Error: cannot implicitly
    convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm8dgzwx4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ string : strings) {\n        if (string.length > maxLength) {\n            maxLength\
    \ = string.length;\n            maxString = string;\n        }\n    }\n    \n\
    \    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph3zlxnhl.d(23): Error: found `string` when expecting `;` following
    statement\n/tmp/tmph3zlxnhl.d(23): Error: expression expected, not `:`\n/tmp/tmph3zlxnhl.d(23):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmph3zlxnhl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ string : strings) {\n        if (string.length > maxLength) {\n            maxLength\
    \ = string.length;\n            maxString = string;\n        }\n    }\n    \n\
    \    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph3zlxnhl.d(23): Error: found `string` when expecting `;` following
    statement\n/tmp/tmph3zlxnhl.d(23): Error: expression expected, not `:`\n/tmp/tmph3zlxnhl.d(23):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmph3zlxnhl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ s : strings) {\n        int length = s.length();\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = s;\n        }\n\
    \    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn_68f7gz.d(23): Error: found `s` when expecting `;` following
    statement\n/tmp/tmpn_68f7gz.d(23): Error: expression expected, not `:`\n/tmp/tmpn_68f7gz.d(23):
    Error: found `strings` when expecting `;` following `for` condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpn_68f7gz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe5_2elgt.d(16): Error: no identifier for declarator `int`\n/tmp/tmpe5_2elgt.d(16):
    Error: found `?` instead of statement\n/tmp/tmpe5_2elgt.d(17): Error: found `in`
    when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5_2elgt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbtk4gid0.d(20): Error: cannot implicitly convert expression
    `strings[0].length` of type `ulong` to `int`\n/tmp/tmpbtk4gid0.d(24): Error: cannot
    implicitly convert expression `strings[cast(ulong)i].length` of type `ulong` to
    `int`\n/tmp/tmpbtk4gid0.d(17): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!string`\n/tmp/tmpbtk4gid0.d(28): Error: cannot
    implicitly convert expression `strings[strings.length - 1LU]` of type `string`
    to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbtk4gid0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n        var s\
    \ = strings[i];\n        if (s.length < longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpup74rvo9.d(18): Error: undefined identifier `var`\n/tmp/tmpup74rvo9.d(19):
    Error: undefined identifier `var`\n/tmp/tmpup74rvo9.d(20): Error: undefined identifier
    `var`\n/tmp/tmpup74rvo9.d(17): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpup74rvo9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tif (strings.length == 0)\n\t\treturn null;\n\t\n\tint maxLength\
    \ = strings[0].length;\n\t\n\tfor (int i = 1; i < strings.length; ++i)\n\t{\n\t\
    \tif (strings[i].length >= maxLength)\n\t\t{\n\t\t\tmaxLength = strings[i].length;\n\
    \t\t}\n\t}\n\t\n\treturn strings[strings.length - 1];\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdgxuw8d6.d(19): Error: cannot implicitly convert expression
    `strings[0].length` of type `ulong` to `int`\n/tmp/tmpdgxuw8d6.d(25): Error: cannot
    implicitly convert expression `strings[cast(ulong)i].length` of type `ulong` to
    `int`\n/tmp/tmpdgxuw8d6.d(17): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!string`\n/tmp/tmpdgxuw8d6.d(29): Error: cannot
    implicitly convert expression `strings[strings.length - 1LU]` of type `string`
    to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdgxuw8d6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach(string; strings) {\n \
    \       if (maxLength == null || string.length < maxLength.value)\n          \
    \  maxLength = string.length;\n    }\n    return maxLength;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfm4a6vkj.d(16): Error: no identifier for declarator `int`\n/tmp/tmpfm4a6vkj.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpfm4a6vkj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    var longest = strings[0];\n    var longestLength = longest.length;\n\
    \    \n    for (var i = 1; i < strings.length; i++) {\n        var s = strings[i];\n\
    \        var length = s.length;\n        if (length > longestLength) {\n     \
    \       longest = s;\n            longestLength = length;\n        }\n    }\n\
    \    \n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7tqnxu68.d(20): Error: undefined identifier `var`\n/tmp/tmp7tqnxu68.d(21):
    Error: undefined identifier `var`\n/tmp/tmp7tqnxu68.d(23): Error: undefined identifier
    `var`\n/tmp/tmp7tqnxu68.d(24): Error: undefined identifier `var`\n/tmp/tmp7tqnxu68.d(25):
    Error: undefined identifier `var`\n/tmp/tmp7tqnxu68.d(17): Error: cannot implicitly
    convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7tqnxu68.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength.Value()) {\n    \
    \        maxLength = s.length;\n        }\n    }\n    return maxLength;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmeyb8s1n.d(16): Error: no identifier for declarator `int`\n/tmp/tmpmeyb8s1n.d(16):
    Error: found `?` instead of statement\n/tmp/tmpmeyb8s1n.d(17): Error: found `in`
    when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmeyb8s1n.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLength = 0;\n    string maxString = null;\n    foreach (string s in\
    \ strings) {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdsqwzg10.d(21): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdsqwzg10.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tif (strings.length == 0)\n\t\treturn null;\n\telse\n\t\treturn\
    \ strings[strings.length - 1];\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_ot_a5ht.d(17): Error: cannot implicitly convert expression
    `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp_ot_a5ht.d(19): Error:
    cannot implicitly convert expression `strings[strings.length - 1LU]` of type `string`
    to `Nullable!string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ot_a5ht.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach(string; strings) {\n\t\tint?\
    \ length = string.length;\n\t\tif (maxLength == null || length > maxLength) {\n\
    \t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyp8nsrlt.d(16): Error: no identifier for declarator `int`\n/tmp/tmpyp8nsrlt.d(16):
    Error: found `?` instead of statement\n/tmp/tmpyp8nsrlt.d(18): Error: no identifier
    for declarator `int`\n/tmp/tmpyp8nsrlt.d(18): Error: found `?` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyp8nsrlt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3c8pq3a8.d(24): Error: cannot implicitly convert expression
    `strings[cast(ulong)i].length` of type `ulong` to `int`\n/tmp/tmp3c8pq3a8.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp3c8pq3a8.d(31):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c8pq3a8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm8dgzwx4.d(19): Error: undefined identifier `var`\n/tmp/tmpm8dgzwx4.d(20):
    Error: undefined identifier `var`\n/tmp/tmpm8dgzwx4.d(17): Error: cannot implicitly
    convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm8dgzwx4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tstring maxString = null;\n\tforeach(string,s,strings)\
    \ {\n\t\tif(maxLength == null || s.length() > maxLength) {\n\t\t\tmaxLength =\
    \ s.length;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\treturn maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkh1xmx0m.d(16): Error: no identifier for declarator `int`\n/tmp/tmpkh1xmx0m.d(16):
    Error: found `?` instead of statement\n/tmp/tmpkh1xmx0m.d(18): Error: no identifier
    for declarator `strings`\n/tmp/tmpkh1xmx0m.d(18): Error: found `)` when expecting
    `;`\n/tmp/tmpkh1xmx0m.d(24): Error: found `return` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkh1xmx0m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach(string; strings)\
    \ {\n        if (longest == null || string.length() > longest.length()) {\n  \
    \          longest = string;\n        }\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2gim3opf.d(18): Error: no property `length` for type `string`\n/tmp/tmp2gim3opf.d(18):
    Error: function expected before `()`, not `longest.get().length` of type `ulong`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2gim3opf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    string longest = strings[0];\n    \n    for (int i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length() > longest.length()) {\n            longest\
    \ = strings[i];\n        }\n    }\n    \n    return longest;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaph4i9ux.d(23): Error: no property `length` for type `string`\n/tmp/tmpaph4i9ux.d(23):
    Error: no property `length` for type `string`\n/tmp/tmpaph4i9ux.d(17): Error:
    cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpaph4i9ux.d(28):
    Error: cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaph4i9ux.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tstring maxString = null;\n\tforeach(string;\
    \ strings) {\n\t\tif (maxLength == null || string.length < maxLength) {\n\t\t\t\
    maxLength = string.length;\n\t\t\tmaxString = string;\n\t\t}\n\t}\n\treturn maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2k9y0pk4.d(16): Error: no identifier for declarator `int`\n/tmp/tmp2k9y0pk4.d(16):
    Error: found `?` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2k9y0pk4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach(string; strings)\n\
    \    {\n        if (longest == null || string.length() > longest.length())\n \
    \           longest = string;\n    }\n    return longest;\n}\nunittest\n{\n  \
    \  alias candidate = longest;\n\n{\n        auto result = candidate([]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\",\
    \ \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_4kmmlr7.d(19): Error: no property `length` for type `string`\n/tmp/tmp_4kmmlr7.d(19):
    Error: function expected before `()`, not `longest.get().length` of type `ulong`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_4kmmlr7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        var len = strings[i].length;\n        if (len > longest.length) {\n \
    \           longest = strings[i];\n        }\n    }\n    return longest;\n}\n\
    /*\n Out of array of strings, return the shortest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return null in case the input\
    \ array is empty.\n    >>> shortest([\"\"])\n    \"\"\n    >>> shortest([\"a\"\
    , \"b\", \"c\"])\n    \"a\"\n    >>> shortest([\"a\", \"bb\", \"ccc\"])\n    \"\
    a\"\n    \n*/\nNullable!(string) shortest(string[] strings) \n{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var shortest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; i++) {\n        var len = strings[i].length;\n\
    \        if (len < shortest.length) {\n            shortest = strings[i];\n  \
    \      }\n    }\n    return shortest;\n}\n/*\n Out of array of strings, return\
    \ the longest one in case of multiple strings of the same length.\n    Return\
    \ null in case the input array is empty.\n    >>> longest([\"a\", \"b\", \"c\"\
    ])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for (var\
    \ i = 1; i < strings.length; i++) {\n        var len = strings[i].length;\n  \
    \      if (len > longest.length) {\n            longest = strings[i];\n      \
    \  }\n    }\n    return longest;\n}\n/*\n Out of array of strings, return the\
    \ shortest one in case of multiple strings of the same length.\n    Return null\
    \ in case the input array is empty.\n    >>> shortest([\"\"])\n    \"\"\n    >>>\
    \ shortest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> shortest([\"a\", \"bb\"\
    , \"ccc\"])\n    \"a\"\n    \n*/\nNullable!(string) shortest(string[] strings)\
    \ \n{\n    if (strings.length == 0) {\n        return null;\n    }\n    var shortest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n        var len\
    \ = strings[i].length;\n        if (len < shortest.length) {\n            shortest\
    \ = strings[i];\n        }\n    }\n    return shortest;\n}\n/*\n Out of array\
    \ of strings, return the longest one in case of multiple strings of the same length.\n\
    \    Return null in case the input array is empty.\n    >>> longest([\"a\", \"\
    b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\
    \n    \n*/\nNullable!(string) longest(string[] strings) \n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp92quem49.d(112): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92quem49.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLength = 0;\n    string maxString = null;\n    \n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        int length = strings[i].length();\n    \
    \    if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    \n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnwjbr1oh.d(23): Error: no property `length` for type `string`\n/tmp/tmpnwjbr1oh.d(17):
    Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpnwjbr1oh.d(30):
    Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnwjbr1oh.d", "-I/tmp"]\n'''
  stdout: b''
