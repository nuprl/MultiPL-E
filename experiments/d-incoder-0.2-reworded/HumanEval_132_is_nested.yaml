name: HumanEval_132_is_nested
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
  \ takes a string as input which contains only square brackets.\n    The function\
  \ should return true if and only if there is a valid subsequence of brackets \n\
  \    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested(\"\
  [[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"\
  [][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[][]]\"\
  )\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \n*/\nbool is_nested(string\
  \ string) \n"
tests: "unittest\n{\n    alias candidate = is_nested;\n\n    assert(candidate(\"[[]]\"\
  ) == true);\n    assert(candidate(\"[]]]]]]][[[[[]\") == false);\n    assert(candidate(\"\
  [][]\") == false);\n    assert(candidate(\"[]\") == false);\n    assert(candidate(\"\
  [[[[]]]]\") == true);\n    assert(candidate(\"[]]]]]]]]]]\") == false);\n    assert(candidate(\"\
  [][][[]]\") == true);\n    assert(candidate(\"[[]\") == false);\n    assert(candidate(\"\
  []]\") == false);\n    assert(candidate(\"[[]][[\") == true);\n    assert(candidate(\"\
  [[][]]\") == true);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
  [[[[[[[[\") == false);\n    assert(candidate(\"]]]]]]]]\") == false);\n}\nvoid main(){}"
completions: ["{\n    stack<char> stack;\n    stack<char> stack2;\n    stack<char>\
    \ stack3;\n    stack<char> stack4;\n    stack<char> stack5;\n    stack<char> stack6;\n\
    \    stack<char> stack7;\n    stack<char> stack8;\n    stack<char> stack9;\n \
    \   stack<char> stack10;\n    stack<char> stack11;\n    stack<char> stack12;\n\
    \    stack<char> stack13;\n    stack<char> stack14;\n    stack<char> stack15;\n\
    \    stack<char> stack16;\n    stack<char> stack17;\n    stack<char> stack18;\n\
    \    stack<char> stack19;\n    stack<char> stack20;\n    stack<char> stack21;\n\
    \    stack<char> stack22;\n    stack<char> stack23;\n    stack<char> stack24;\n\
    \    stack<char> stack25;\n    stack<char> stack26;\n    stack<char> stack27;\n\
    \    stack<char> stack28;\n    stack<char> stack29;\n    stack<char> stack30;\n\
    \    stack<char> stack31;\n    stack<char> stack32;\n    stack<char> stack33;\n\
    \    stack<char> stack34;\n    stack<char> stack35;\n    stack<char> stack36;\n\
    \    stack<char> stack37;\n    stack<char> stack38;\n    stack<char> stack39;\n\
    \    stack<char> stack40;\n    stack<char> stack41;\n    stack<char> stack42;\n\
    \    stack<char> stack43;\n    stack<char> stack44;\n    stack<char> stack45;\n\
    \    stack<char> stack46;\n    stack<char> stack47;\n    stack<char> stack48;\n\
    \    stack<char> stack49;\n    stack<char> stack50;\n    stack<char> stack51;\n\
    \    stack<char> stack52;\n    stack<char> stack53;\n    stack<char> stack54;\n\
    \    stack<char> stack55;\n    stack<char> stack56;\n    stack<char> stack57;\n\
    \    stack<char> stack58;\n    stack<char> stack59;\n    stack<char> stack60;\n\
    \    stack<char> stack61;\n    stack<char> stack62;\n    stack<char> stack63;\n\
    \    stack<char> stack64;\n    stack<char> stack65;\n    stack<char> stack66;\n\
    \    stack", "{\n    bool result = false;\n    stack<char> stack;\n    stack<char>\
    \ stack2;\n    stack<char> stack3;\n    stack<char> stack4;\n    stack<char> stack5;\n\
    \    stack<char> stack6;\n    stack<char> stack7;\n    stack<char> stack8;\n \
    \   stack<char> stack9;\n    stack<char> stack10;\n    stack<char> stack11;\n\
    \    stack<char> stack12;\n    stack<char> stack13;\n    stack<char> stack14;\n\
    \    stack<char> stack15;\n    stack<char> stack16;\n    stack<char> stack17;\n\
    \    stack<char> stack18;\n    stack<char> stack19;\n    stack<char> stack20;\n\
    \    stack<char> stack21;\n    stack<char> stack22;\n    stack<char> stack23;\n\
    \    stack<char> stack24;\n    stack<char> stack25;\n    stack<char> stack26;\n\
    \    stack<char> stack27;\n    stack<char> stack28;\n    stack<char> stack29;\n\
    \    stack<char> stack30;\n    stack<char> stack31;\n    stack<char> stack32;\n\
    \    stack<char> stack33;\n    stack<char> stack34;\n    stack<char> stack35;\n\
    \    stack<char> stack36;\n    stack<char> stack37;\n    stack<char> stack38;\n\
    \    stack<char> stack39;\n    stack<char> stack40;\n    stack<char> stack41;\n\
    \    stack<char> stack42;\n    stack<char> stack43;\n    stack<char> stack44;\n\
    \    stack<char> stack45;\n    stack<char> stack46;\n    stack<char> stack47;\n\
    \    stack<char> stack48;\n    stack<char> stack49;\n    stack<char> stack50;\n\
    \    stack<char> stack51;\n    stack<char> stack52;\n    stack<char> stack53;\n\
    \    stack<char> stack54;\n    stack<char> stack55;\n    stack<char> stack56;\n\
    \    stack<char> stack57;\n    stack<char> stack58;\n    stack<char> stack59;\n\
    \    stack<char> stack60;\n    stack<char> stack61;\n    stack<char> stack62;\n\
    \    stack<char> stack63;\n    stack<char> stack64;\n    stack<char> stack65;\n\
    \    stack<char> stack", "{\n    bool result = false;\n    stack<char> brackets;\n\
    \    stack<char> openings;\n    stack<char> closings;\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(string[i] == '[')\n        {\n\
    \            brackets.push(string[i]);\n            openings.push(string[i]);\n\
    \        }\n        else if(string[i] == ']')\n        {\n            char opening\
    \ = openings.top();\n            char closing = brackets.pop();\n            openings.pop();\n\
    \            closings.push(closing);\n            if(opening == '[' && closing\
    \ == ']')\n            {\n                result = true;\n            }\n    \
    \    }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ does not work. Try `is_nested
  "{\n    bool result = false;\n    stack<string> brackets;\n    brackets.push(string);\n\
    \    string current = \"\";\n    while(!brackets.empty())\n    {\n        current\
    \ = brackets.top();\n        brackets.pop();\n        if(current.length() == 0)\n\
    \        {\n            result = true;\n            break;\n        }\n      \
    \  for(int i = 0; i < current.length(); i++)\n        {\n            if(current[i]\
    \ == '[')\n            {\n                brackets.push(current.substr(0, i));\n\
    \            }\n            else if(current[i] == ']')\n            {\n      \
    \          string temp = brackets.top();\n                brackets.pop();\n  \
    \              if(temp.length() == 0)\n                {\n                   \
    \ result = true;\n                    break;\n                }\n            \
    \    else\n                {\n                    if(temp.substr(0, i) != current.substr(0,\
    \ i))\n                    {\n                        result = true;\n       \
    \                 break;\n                    }\n                }\n         \
    \   }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\nI like your solution, however I believe it can be optimized a little\
    \ bit more. For example, you can avoid the second `if` statement by checking `if(temp.substr(0,\
    \ i) != current.substr(0, i))` right after `brackets.pop();`. Also, you can avoid\
    \ the second `for` loop by checking `if(current[i] == '[')` right after `brackets.push(current.substr(0,\
    \ i));`. Also, you can avoid the second `while` loop by checking `if(!brackets.empty())`\
    \ right after `string current = \"\";`.\n<|/ c |>\n<| c |>\nThanks for the suggestions.\
    \ I updated the code accordingly.\n<|/ c |>\n<| c |>\nThanks for your suggestions.\
    \ I updated the code accordingly.\n<|/ c |>\n<| a tags=c++,string,algorithm |>\n\
    <code>\n#include <iostream>\n#include <stack>\n#include <string>\nusing namespace\
    \ std;", "{\n    size_t brackets = 0;\n    size_t open_brackets = 0;\n    size_t\
    \ closed_brackets = 0;\n    size_t open_brackets_index = 0;\n    size_t closed_brackets_index\
    \ = 0;\n    size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    size_t l\
    \ = 0;\n    size_t m = 0;\n    size_t n = 0;\n    size_t o = 0;\n    size_t p\
    \ = 0;\n    size_t q = 0;\n    size_t r = 0;\n    size_t s = 0;\n    size_t t\
    \ = 0;\n    size_t u = 0;\n    size_t v = 0;\n    size_t w = 0;\n    size_t x\
    \ = 0;\n    size_t y = 0;\n    size_t z = 0;\n    size_t brackets_length = 0;\n\
    \    size_t open_brackets_length = 0;\n    size_t closed_brackets_length = 0;\n\
    \    size_t open_brackets_index_length = 0;\n    size_t closed_brackets_index_length\
    \ = 0;\n    size_t open_brackets_index_length2 = 0;\n    size_t closed_brackets_index_length2\
    \ = 0;\n    size_t open_brackets_index_length3 = 0;\n    size_t closed_brackets_index_length3\
    \ = 0;\n    size_t open_brackets_index_length4 = 0;\n    size_t closed_brackets_index_length4\
    \ = 0;\n    size_t open_brackets_index_length5 = 0;\n    size_t closed_brackets_index_length5\
    \ = 0;\n    size_t open_brackets_index_length6 = 0;\n    size_t closed_brackets_index_length6\
    \ = 0;\n    size_t open_brackets_index_length7 = 0;\n    size_t closed_brackets_index_length7\
    \ = 0;\n    size_t open_brackets_index_length8 = 0;\n    size_t closed_brackets_index_length8\
    \ = 0;\n    size_t open_brackets_index_length9 = 0;\n    size_t closed_brackets_index_length9\
    \ = 0;\n    size_t open_brackets_index_length10 = 0;\n    size_t closed_brackets_index_length10\
    \ = 0;\n    size_t open_brackets_index_length11 = 0;\n    size_t closed_brackets_index_length11\
    \ = 0;\n    size_t open_brackets_index_length12 = 0;\n    size_t closed_brackets_index_length12\
    \ = 0;\n    size_t open_brackets_index_length13 = 0;\n    size_t closed_brackets_index_length13\
    \ = 0;\n    size_t open_brackets_index_length14 = 0;\n    size_t closed_brackets_index_length14\
    \ = 0;\n    size_t open_brackets_index_length15 = 0;\n    size_t closed_brackets_index_length15\
    \ = 0;\n    size_t open_brackets_index_length16 = 0;\n    size_t closed_brackets_index_length16\
    \ = 0;\n", "{\n    bool result = false;\n    for(int i = 0; i < string.size();\
    \ ++i)\n    {\n        if(string[i] == '[')\n        {\n            bool found\
    \ = false;\n            for(int j = i; j < string.size(); ++j)\n            {\n\
    \                if(string[j] == '[')\n                {\n                   \
    \ found = true;\n                    break;\n                }\n            }\n\
    \            if(!found)\n            {\n                result = true;\n     \
    \           break;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    bool result = false;\n    stack<char> stack;\n    stack<char> brackets;\n\
    \    stack<char> brackets_open;\n    stack<char> brackets_close;\n    stack<char>\
    \ brackets_nested;\n    stack<char> brackets_nested_open;\n    stack<char> brackets_nested_close;\n\
    \    stack<char> brackets_nested_nested;\n    stack<char> brackets_nested_nested_open;\n\
    \    stack<char> brackets_nested_nested_close;\n    stack<char> brackets_nested_nested_nested;\n\
    \    stack<char> brackets_nested_nested_nested_open;\n    stack<char> brackets_nested_nested_nested_close;\n\
    \    stack<char> brackets_nested_nested_nested_nested;\n    stack<char> brackets_nested_nested_nested_nested_open;\n\
    \    stack<char> brackets_nested_nested_nested_nested_close;\n    stack<char>\
    \ brackets_nested_nested_nested_nested_nested;\n    stack<char> brackets_nested_nested_nested_nested_nested_open;\n\
    \    stack<char> brackets_nested_nested_nested_nested_nested_close;\n    stack<char>\
    \ brackets_nested_nested_nested_nested_nested_nested;\n    stack<char> brackets_nested_nested_nested_nested_nested_nested_open;\n\
    \    stack<char> brackets_nested_nested_nested_nested_nested_nested_close;\n \
    \   stack<char> brackets_nested_nested_nested_nested_nested_nested_nested;\n \
    \   stack<char> brackets_nested_nested_nested_nested_nested_nested_nested_open;\n\
    \    stack<char> brackets_nested_nested_nested_nested_nested_nested_nested_close;\n\
    \    stack<char> brackets_nested_nested_nested_nested_nested_nested_nested_nested;\n\
    \    stack<char> brackets_nested_nested_nested_nested_nested_nested_nested_nested_open;\n\
    \    stack<char> brackets_nested_nested_nested_nested_nested_nested_nested_nested_close;\n\
    \    stack<char> brackets_nested_nested_nested_nested_nested_nested_nested_nested_nested;\n\
    \    stack<char> brackets_nested_nested_nested_nested_nested_nested_nested_nested_nested_open;\n\
    \    stack<char> brackets_nested_nested_nested_nested_nested_nested_nested_nested_nested_close;\n\
    \    stack<char> brackets_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested;\n\
    \    stack<char> brackets_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_open;\n\
    \    stack<char> brackets_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_close;\n\
    \    stack<char> brackets_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested;\n\
    \    stack<char> brackets_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_open;\n\
    \    stack<char> brackets_nested_nested_nested_", "{\n    bool result = true;\n\
    \    for(int i = 0; i < string.size(); i++)\n    {\n        if(string[i] == '[')\n\
    \        {\n            for(int j = i; j < string.size(); j++)\n            {\n\
    \                if(string[j] == '[')\n                {\n                   \
    \ result = true;\n                    break;\n                }\n            \
    \    else if(string[j] == ']')\n                {\n                    result\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "{\n    bool result = true;\n    stack<char> brackets;\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] ==\
    \ '[')\n        {\n            brackets.push('[');\n        }\n        else if(string[i]\
    \ == ']')\n        {\n            if(brackets.top() == '[')\n            {\n \
    \               brackets.pop();\n            }\n            else\n           \
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| c |>\nThis doesn't work. Try it with `\"[[]]\"`.\n<|/ c |>\n<| c |>\n\
    It does work. Try it with `\"[[]]\"`. `brackets.top()` will return the `'['` character\
    \ and `brackets.pop()` will remove it from the stack. `brackets.top()` will return\
    \ `'['` again and `brackets.pop()` will remove it from the stack. `brackets.top()`\
    \ will return `'['` again and `brackets.pop()` will remove it from the stack.\
    \ `brackets.top()` will return `'['` again and `brackets.pop()` will remove it\
    \ from the stack. `brackets.top()` will return `'['` again and `brackets.pop()`\
    \ will remove it from the stack. `brackets.top()` will return `'['` again and\
    \ `brackets.pop()` will remove it from the stack. `brackets.top()` will return\
    \ `'['` again and `brackets.pop()` will remove it from the stack. `brackets.top()`\
    \ will return `'['` again and `brackets.pop()` will remove it from the stack.\
    \ `brackets.top()` will return `'['` again and `brackets.pop()` will remove it\
    \ from the stack. `brackets.top()` will return `'['` again and `brackets.pop()`\
    \ will remove it from the stack. `brackets.top()` will return `'['` again and\
    \ `brackets.pop()` will remove it from the stack. `brackets.top()` will return\
    \ `'['` again and `brackets.pop()` will remove it from the stack. `brackets.top()`\
    \ will return `'['` again and `brackets.pop()` will remove it from the stack.\
    \ `brackets.top()` will return `'['` again and `brackets.pop()` will remove it\
    \ from the stack. `brackets.top()` will return `'['` again and `brackets.pop()`\
    \ will remove it from the stack. `brackets.top()` will return `'['` again and\
    \ `brackets.pop()` will remove it from the stack. `brackets.top()` will return\
    \ `'['` ", "{\n    stack<char> stack;\n    stack<char> brackets;\n    bool result\
    \ = false;\n    \n    for(int i = 0; i < string.size(); i++)\n    {\n        if(string[i]\
    \ == '[')\n        {\n            stack.push(string[i]);\n            brackets.push(string[i]);\n\
    \        }\n        else if(string[i] == ']')\n        {\n            if(!brackets.empty())\n\
    \            {\n                if(brackets.top() == '[')\n                {\n\
    \                    brackets.pop();\n                    stack.push(string[i]);\n\
    \                }\n                else\n                {\n                \
    \    result = true;\n                    break;\n                }\n         \
    \   }\n            else\n            {\n                result = true;\n     \
    \           break;\n            }\n        }\n    }\n    \n    return result;\n\
    }", "{\n    size_t start = 0;\n    size_t end = 0;\n    size_t count = 0;\n  \
    \  size_t i = 0;\n    bool result = false;\n    while(i < string.length())\n \
    \   {\n        if(string[i] == '[')\n        {\n            count++;\n       \
    \ }\n        else if(string[i] == ']')\n        {\n            count--;\n    \
    \    }\n        else if(string[i] == '[')\n        {\n            count++;\n \
    \       }\n        else if(string[i] == ']')\n        {\n            count--;\n\
    \        }\n        else if(count == 0)\n        {\n            result = true;\n\
    \            end = i;\n        }\n        i++;\n    }\n    if(result && end ==\
    \ string.length())\n    {\n        return true;\n    }\n    else\n    {\n    \
    \    return false;\n    }\n}", "{\n    bool result = true;\n    stack<string>\
    \ brackets;\n    brackets.push(string);\n    string bracket = brackets.top();\n\
    \    \n    for(int i = 0; i < bracket.length(); i++)\n    {\n        if(string[i]\
    \ != '[')\n        {\n            result = false;\n            break;\n      \
    \  }\n        \n        string bracket2 = brackets.top();\n        \n        if(bracket2[i]\
    \ != ']')\n        {\n            result = false;\n            break;\n      \
    \  }\n        \n        brackets.pop();\n        \n        if(bracket.length()\
    \ == 0)\n        {\n            result = true;\n            break;\n        }\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <stack>", "{\n\
    \    stack<char> brackets;\n    bool result = true;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == '[')\n        {\n            brackets.push('[');\n\
    \        }\n        else if(string[i] == ']')\n        {\n            if(brackets.top()\
    \ == '[')\n            {\n                brackets.pop();\n            }\n   \
    \         else\n            {\n                result = false;\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    stack<char> brackets;\n   \
    \ bool result = true;\n    for(int i = 0; i < string.size(); i++)\n    {\n   \
    \     if(brackets.empty())\n        {\n            if(i == 0)\n            {\n\
    \                brackets.push('[');\n            }\n            else\n      \
    \      {\n                brackets.push(']');\n            }\n        }\n    \
    \    else if(brackets.top() == '[' && string[i] == '[')\n        {\n         \
    \   brackets.push('[');\n        }\n        else if(brackets.top() == '[' && string[i]\
    \ == ']')\n        {\n            brackets.pop();\n        }\n        else if(brackets.top()\
    \ == ']' && string[i] == ']')\n        {\n            brackets.pop();\n      \
    \  }\n        else if(brackets.top() == ']' && string[i] == '[')\n        {\n\
    \            brackets.push('[');\n        }\n        else if(brackets.top() ==\
    \ '[' && string[i] == ']')\n        {\n            brackets.pop();\n        }\n\
    \        else if(brackets.top() == '[' && string[i] == '[')\n        {\n     \
    \       brackets.push('[');\n        }\n        else if(brackets.top() == '['\
    \ && string[i] == ']')\n        {\n            brackets.pop();\n        }\n  \
    \      else if(brackets.top() == '[' && string[i] == '[')\n        {\n       \
    \     brackets.push('[');\n        }\n        else if(brackets.top() == '[' &&\
    \ string[i] == ']')\n        {\n            brackets.pop();\n        }\n     \
    \   else if(brackets.top() == '[' && string[i] == '[')\n        {\n          \
    \  brackets.push('[');\n        }\n        else if(brackets.top() == '[' && string[i]\
    \ == ']')\n        {\n            brackets.pop();\n        }\n        else if(brackets.top()\
    \ == '[' && string[i] == '[')\n        {\n            brackets.push('[');\n  \
    \      }\n        else if(brackets.top() == '[' && string[i] == ']')\n       \
    \ {\n            brackets.pop();\n        }\n        else if(brackets.top() ==\
    \ '[' && string[i] == '[')\n        {\n            brackets.push('[');\n     \
    \   }\n        else if(brackets.top() == '[' && string[i] == ']')\n        {\n\
    \            brackets.pop();\n        }\n        else if(brackets.top() == '['\
    \ && string[i] == '[')\n        {\n            brackets.push('[');\n        }\n\
    \        else if(brackets.top() == '[' && string[i] == ']')\n        {\n     \
    \       brackets.pop();\n        }\n        else if(brackets.top() == '[' && string[i]\
    \ == '[", "{\n    bool result = false;\n    stack<char> stack;\n    stack<char>\
    \ brackets;\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == '[')\n        {\n            stack.push(string[i]);\n            brackets.push(string[i]);\n\
    \        }\n        else if(string[i] == ']')\n        {\n            char c =\
    \ stack.pop();\n            if(brackets.top() == '[')\n            {\n       \
    \         brackets.pop();\n            }\n            else\n            {\n  \
    \              result = true;\n                break;\n            }\n       \
    \ }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>\n#include <iostream>\n#include <stack>\n#include <string>\nusing\
    \ namespace std;", "{\n    stack<char> brackets;\n    bool result = false;\n \
    \   for(auto c : string)\n    {\n        if(c == '[' || c == '{')\n          \
    \  brackets.push(c);\n        else if(c == ']' || c == '}')\n        {\n     \
    \       if(brackets.top() == '[')\n            {\n                brackets.pop();\n\
    \            }\n            else\n            {\n                brackets.pop();\n\
    \                result = true;\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| c |>\nI believe this would\
    \ fail for `is_nested
  "{\n    int brackets = 0;\n    int openings = 0;\n    int closings = 0;\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == '[')\n    \
    \    {\n            openings++;\n        }\n        else if(string[i] == ']')\n\
    \        {\n            closings++;\n        }\n        else if(string[i] == '{')\n\
    \        {\n            brackets++;\n        }\n        else if(string[i] == '}')\n\
    \        {\n            brackets--;\n        }\n    }\n    if(openings == closings\
    \ && brackets == 0)\n    {\n        return true;\n    }\n    return false;\n}\n\
    </code>\n<|/ a tags=c++,string,arrays |>\n<| c |>\nThis doesn't work if the brackets\
    \ are nested more than once.\n<|/ c |>\n<| c |>\nYes, it does. I tested it and\
    \ it works. I even tested it on [this](http://ideone.com/HZ7X9) input and it works.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are multiple nested brackets.\n<|/\
    \ c |>\n<| c |>\nIt does work if there are multiple nested brackets. I tested\
    \ it on [this](http://ideone.com/HZ7X9) input and it works.\n<|/ c |>\n<| c |>\n\
    It doesn't work if there are multiple nested brackets. I tested it on [this](http://ideone.com/HZ7X9)\
    \ input and it works.\n<|/ c |>\n<| a tags=c++,string,arrays |>\n<code>", "{\n\
    \    bool result = false;\n    stack<string> stack;\n    stack<string> openBrackets;\n\
    \    stack<string> closeBrackets;\n    stack<string> openBracketsStack;\n    stack<string>\
    \ closeBracketsStack;\n    stack<string> openBracketsStack2;\n    stack<string>\
    \ closeBracketsStack2;\n    stack<string> openBracketsStack3;\n    stack<string>\
    \ closeBracketsStack3;\n    stack<string> openBracketsStack4;\n    stack<string>\
    \ closeBracketsStack4;\n    stack<string> openBracketsStack5;\n    stack<string>\
    \ closeBracketsStack5;\n    stack<string> openBracketsStack6;\n    stack<string>\
    \ closeBracketsStack6;\n    stack<string> openBracketsStack7;\n    stack<string>\
    \ closeBracketsStack7;\n    stack<string> openBracketsStack8;\n    stack<string>\
    \ closeBracketsStack8;\n    stack<string> openBracketsStack9;\n    stack<string>\
    \ closeBracketsStack9;\n    stack<string> openBracketsStack10;\n    stack<string>\
    \ closeBracketsStack10;\n    stack<string> openBracketsStack11;\n    stack<string>\
    \ closeBracketsStack11;\n    stack<string> openBracketsStack12;\n    stack<string>\
    \ closeBracketsStack12;\n    stack<string> openBracketsStack13;\n    stack<string>\
    \ closeBracketsStack13;\n    stack<string> openBracketsStack14;\n    stack<string>\
    \ closeBracketsStack14;\n    stack<string> openBracketsStack15;\n    stack<string>\
    \ closeBracketsStack15;\n    stack<string> openBracketsStack16;\n    stack<string>\
    \ closeBracketsStack16;\n    stack<string> openBracketsStack17;\n    stack<string>\
    \ closeBracketsStack17;\n    stack<string> openBracketsStack18;\n    stack<string>\
    \ closeBracketsStack18;\n    stack<string> openBracketsStack19;\n    stack<string>\
    \ closeBracketsStack19;\n    stack<string> openBracketsStack20;\n    stack<string",
  "{\n    bool result = false;\n    stack<char> brackets;\n    for(auto c : string)\
    \ \n    {\n        if(c == '[') \n        {\n            brackets.push(c);\n \
    \       }\n        else if(c == ']') \n        {\n            if(brackets.top()\
    \ == '[') \n            {\n                brackets.pop();\n            }\n  \
    \          else \n            {\n                result = true;\n            \
    \    break;\n            }\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,string,algorithm |>\n<| c |>\nThe `stack` should be `std::stack<char>`.\n\
    <|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n\
    \    bool result = false;\n    stack<char> stack;\n    stack<char> open;\n   \
    \ stack<char> close;\n    stack<char> nest;\n    \n    for(auto c : string)\n\
    \    {\n        if(!isalnum(c) && c != '_')\n        {\n            stack.push(c);\n\
    \        }\n        else\n        {\n            if(stack.empty())\n         \
    \   {\n                stack.push(c);\n            }\n            else\n     \
    \       {\n                if(stack.top() == '[' && c == ']')\n              \
    \  {\n                    if(nest.empty())\n                    {\n          \
    \              result = true;\n                    }\n                    else\n\
    \                    {\n                        if(nest.top() == '[')\n      \
    \                  {\n                            nest.push(']');\n          \
    \              }\n                        else\n                        {\n  \
    \                          nest.push('[');\n                        }\n      \
    \              }\n                }\n                else if(stack.top() == '[')\n\
    \                {\n                    if(nest.empty())\n                   \
    \ {\n                        result = true;\n                    }\n         \
    \           else\n                    {\n                        if(nest.top()\
    \ == '[')\n                        {\n                            nest.push(']');\n\
    \                        }\n                        else\n                   \
    \     {\n                            nest.push('[');\n                       \
    \ }\n                    }\n                }\n                else if(stack.top()\
    \ == '{')\n                {\n                    if(nest.empty())\n         \
    \           {\n                        result = true;\n                    }\n\
    \                    else\n                    {\n                        if(nest.top()\
    \ == '{')\n                        {\n                            nest.push(\"\
    }\");\n                        }\n                        else\n             \
    \           {\n                            nest.push(\"{\");\n               \
    \         }\n                    }\n                }\n                else if(stack.top()\
    \ == '(')\n                {\n                    if(nest.empty())\n         \
    \           {\n                        result = true;\n                    }\n\
    \                    else\n                    {\n                        if(nest.top()\
    \ == '(')\n                        {\n                            nest.push(\"\
    )\");\n                        }\n                        else\n             \
    \           {\n                            nest.push(\"(\");\n               \
    \         }\n                    }\n                }\n                else if(stack.top()\
    \ == '\"')\n                {\n                    if(nest.empty())\n        \
    \            {\n                        result = true;\n                    }\n\
    \                    else\n                    {\n                        if(nest.top()\
    \ == '\"')\n                        {\n                            nest.push(\"\
    '\");\n                        }\n                        else\n             \
    \           {\n                            nest.push(\"\\\"\");\n            \
    \            }\n                    }\n                }\n                else\
    \ if(stack.top() == '\\'')\n                {\n                    if(nest.empty())\n\
    \                    {\n                        result = true;\n             \
    \       }\n                    else\n                    {\n                 \
    \       if(nest.top() == '\\'')\n                        {\n                 \
    \           nest.push(\"'\");\n                        }\n                   \
    \     else\n                        {\n                            nest.push(\"\
    \\\"\");\n", "{\n    bool result = false;\n    stack<char> brackets;\n    for(auto\
    \ c : string) \n    {\n        if(c == '[') \n        {\n            brackets.push(c);\n\
    \        }\n        else if(c == ']') \n        {\n            if(brackets.top()\
    \ == '[') \n            {\n                brackets.pop();\n            }\n  \
    \          else \n            {\n                result = true;\n            }\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your\
    \ solution, but I believe that `is_nested(\"[][]\")` should return `true` since\
    \ there is at least one nested bracket.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ I missed that case. Thank you for pointing it out.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\nI believe that you can solve this problem with recursion.\n<code>", "{\n\
    \    size_t brackets = 0;\n    size_t open_brackets = 0;\n    size_t close_brackets\
    \ = 0;\n    size_t open_parenthesis = 0;\n    size_t close_parenthesis = 0;\n\
    \    size_t open_curly = 0;\n    size_t close_curly = 0;\n    size_t open_angle\
    \ = 0;\n    size_t close_angle = 0;\n    size_t open_paren = 0;\n    size_t close_paren\
    \ = 0;\n    size_t open_curly2 = 0;\n    size_t close_curly2 = 0;\n    size_t\
    \ open_angle2 = 0;\n    size_t close_angle2 = 0;\n    size_t open_paren2 = 0;\n\
    \    size_t close_paren2 = 0;\n    size_t open_curly3 = 0;\n    size_t close_curly3\
    \ = 0;\n    size_t open_angle3 = 0;\n    size_t close_angle3 = 0;\n    size_t\
    \ open_paren3 = 0;\n    size_t close_paren3 = 0;\n    size_t open_curly4 = 0;\n\
    \    size_t close_curly4 = 0;\n    size_t open_angle4 = 0;\n    size_t close_angle4\
    \ = 0;\n    size_t open_paren4 = 0;\n    size_t close_paren4 = 0;\n    size_t\
    \ open_curly5 = 0;\n    size_t close_curly5 = 0;\n    size_t open_angle5 = 0;\n\
    \    size_t close_angle5 = 0;\n    size_t open_paren5 = 0;\n    size_t close_paren5\
    \ = 0;\n    size_t open_curly6 = 0;\n    size_t close_curly6 = 0;\n    size_t\
    \ open_angle6 = 0;\n    size_t close_angle6 = 0;\n    size_t open_paren6 = 0;\n\
    \    size_t close_paren6 = 0;\n    size_t open_curly7 = 0;\n    size_t close_curly7\
    \ = 0;\n    size_t open_angle7 = 0;\n    size_t close_angle7 = 0;\n    size_t\
    \ open_paren7 = 0;\n    size_t close_paren7 = 0;\n    size_t open_curly8 = 0;\n\
    \    size_t close_curly8 = 0;\n    size_t open_angle8 = 0;\n    size_t close_angle8\
    \ = 0;\n    size_t open_paren8 = 0;\n    size_t close_paren8 = 0;\n    size_t\
    \ open_curly9 = 0;\n    size_t close_curly9 = 0;\n    size_t open_angle9 = 0;\n\
    \    size_t close_angle9 = 0;\n    size_t open_paren9 = 0;\n    size_t close_paren9\
    \ = 0;\n    size_t open_curly10 = 0;\n    size_t close_curly10 = 0;\n    size_t\
    \ open_angle10 = 0;\n    size_t close_angle10 = 0;\n    size_t open_paren10 =\
    \ 0;\n    size_t close_paren10 = 0;\n    size_t open_curly11 = 0;\n    size_t\
    \ close_curly11 = 0;\n    size_t open_angle11 = 0;\n    size_t close_angle11 =\
    \ 0;\n    size_t open_paren11 = 0;\n    size_t close_paren11 = 0;\n    size_t\
    \ open_curly12 = 0;\n    size_t close_curly12 = 0;\n    size_t open_angle12",
  "{\n    bool result = false;\n    stack<string> brackets;\n    for(auto c : string)\
    \ \n    {\n        if(c == '[') brackets.push(c);\n        else if(c == ']') \n\
    \        {\n            if(brackets.top() == '[') \n            {\n          \
    \      brackets.pop();\n                if(brackets.top() == '[') brackets.pop();\n\
    \            }\n            else \n            {\n                result = true;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nI believe this can be done with\
    \ regular expressions. \n<code>\nimport re", "{\n    stack<char> s;\n    bool\
    \ result = false;\n    bool open = false;\n    bool close = false;\n    bool open2\
    \ = false;\n    bool close2 = false;\n    bool open3 = false;\n    bool close3\
    \ = false;\n    bool open4 = false;\n    bool close4 = false;\n    bool open5\
    \ = false;\n    bool close5 = false;\n    bool open6 = false;\n    bool close6\
    \ = false;\n    bool open7 = false;\n    bool close7 = false;\n    bool open8\
    \ = false;\n    bool close8 = false;\n    bool open9 = false;\n    bool close9\
    \ = false;\n    bool open10 = false;\n    bool close10 = false;\n    bool open11\
    \ = false;\n    bool close11 = false;\n    bool open12 = false;\n    bool close12\
    \ = false;\n    bool open13 = false;\n    bool close13 = false;\n    bool open14\
    \ = false;\n    bool close14 = false;\n    bool open15 = false;\n    bool close15\
    \ = false;\n    bool open16 = false;\n    bool close16 = false;\n    bool open17\
    \ = false;\n    bool close17 = false;\n    bool open18 = false;\n    bool close18\
    \ = false;\n    bool open19 = false;\n    bool close19 = false;\n    bool open20\
    \ = false;\n    bool close20 = false;\n    bool open21 = false;\n    bool close21\
    \ = false;\n    bool open22 = false;\n    bool close22 = false;\n    bool open23\
    \ = false;\n    bool close23 = false;\n    bool open24 = false;\n    bool close24\
    \ = false;\n    bool open25 = false;\n    bool close25 = false;\n    bool open26\
    \ = false;\n    bool close26 = false;\n    bool open27 = false;\n    bool close27\
    \ = false;\n    bool open28 = false;\n    bool close28 = false;\n    bool open29\
    \ = false;\n    bool close29 = false;\n    bool open30 = false;\n    bool close30\
    \ = false;\n    bool open31 = false;\n    bool close31 = false;\n    bool open32\
    \ = false;\n    bool close32 = false;\n    bool open33 = false;\n    bool close33\
    \ = false;\n    bool open34 = false;\n    bool close34 = false;\n    bool open35\
    \ = false;\n    bool close35 = false;\n    bool open36 = false;\n    bool close36\
    \ = false;\n    bool open37 = false;\n    bool close37 = false;\n    bool open38\
    \ = false;\n    bool close38 = false;\n    bool open39 = false;\n    bool close39\
    \ = false;\n    bool open40 = false;\n    bool close40 = false;\n    bool open41\
    \ = false;\n    bool close41 = false;\n    bool open", "{\n    string brackets\
    \ = \"[]\";\n    string brackets_open = \"[[\";\n    string brackets_close = \"\
    ]]\";\n    string brackets_nested = \"[[[]\";\n    string brackets_nested_open\
    \ = \"[[[\";\n    string brackets_nested_close = \"]][]\";\n    string brackets_nested_nested\
    \ = \"[[[[]\";\n    string brackets_nested_nested_open = \"[[[[[\";\n    string\
    \ brackets_nested_nested_close = \"]][]]]\";\n    string brackets_nested_nested_nested\
    \ = \"[[[[[[[]\";\n    string brackets_nested_nested_nested_open = \"[[[[[[[[\"\
    ;\n    string brackets_nested_nested_nested_close = \"]][]]]]]]\";\n    string\
    \ brackets_nested_nested_nested_nested = \"[[[[[[[[[]\";\n    string brackets_nested_nested_nested_nested_open\
    \ = \"[[[[[[[[[[\";\n    string brackets_nested_nested_nested_nested_close = \"\
    ]][]]]]]]]]\";\n    string brackets_nested_nested_nested_nested_open = \"[[[[[[[[[[[[\"\
    ;\n    string brackets_nested_nested_nested_nested_close = \"]][]]]]]]]]]]\";\n\
    \    string brackets_nested_nested_nested_nested_nested_open = \"[[[[[[[[[[[[[[\"\
    ;\n    string brackets_nested_nested_nested_nested_nested_close = \"]][]]]]]]]]]]]]\"\
    ;\n    string brackets_nested_nested_nested_nested_nested_nested_open = \"[[[[[[[[[[[[[[[[\"\
    ;\n    string brackets_nested_nested_nested_nested_nested_nested_close = \"]][]]]]]]]]]]]]]]\"\
    ;\n    string brackets_nested_nested_nested_nested_nested_nested_nested_open =\
    \ \"[[[[[[[[[[[[[[[[[[\";\n    string brackets_nested_nested_nested_nested_nested_nested_nested_close\
    \ = \"]][]]]]]]]]]]]]]]]]]]\";\n    string brackets_nested_nested_nested_nested_nested_nested_nested_nested_open\
    \ = \"[[[[[[[[[[[[[[[[[[[[\";\n    string brackets_nested_nested_nested_nested_nested_nested_nested_nested_open\
    \ = \"[[[[[[[[[[[[[[[[[[[[[[[[\";\n    string brackets_nested_nested_nested_nested_nested_nested_nested_nested_nested_open\
    \ = \"[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\";\n    string brackets_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_open\
    \ = \"[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\";\n    string brackets_nested_nested_nested_nested_nested_nested_nested_",
  "{\n    int open = 0;\n    int close = 0;\n    int i = 0;\n    bool result = false;\n\
    \    while(i < string.length())\n    {\n        if(string[i] == '[')\n       \
    \ {\n            open++;\n        }\n        else if(string[i] == ']')\n     \
    \   {\n            close++;\n        }\n        i++;\n    }\n    if(open > close)\n\
    \    {\n        result = true;\n    }\n    return result;\n}", "{\n    int i =\
    \ 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int\
    \ n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n   \
    \ int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int brackets = 0;\n    bool\
    \ result = false;\n    \n    while(i < string.length())\n    {\n        char c\
    \ = string[i];\n        \n        if(c == '[')\n        {\n            brackets++;\n\
    \        }\n        else if(c == ']')\n        {\n            brackets--;\n  \
    \      }\n        \n        if(brackets == 0)\n        {\n            result =\
    \ true;\n            break;\n        }\n        \n        i++;\n    }\n    \n\
    \    return result;\n}", "{\n    bool result = false;\n    stack<string> brackets;\n\
    \    brackets.push(string);\n    string bracket = brackets.top();\n    while(bracket\
    \ != \"\")\n    {\n        if(bracket.find(\"[\") != string::npos)\n        {\n\
    \            brackets.pop();\n            bracket = brackets.top();\n        }\n\
    \        else\n        {\n            result = true;\n            break;\n   \
    \     }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| c |>\nThanks for your answer. Your solution works fine for most cases,\
    \ but fails for cases like \"[[]][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]",
  "{\n    bool result = false;\n    stack<char> brackets;\n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        if(string[i] == '[')\n        {\n    \
    \        brackets.push('[');\n        }\n        else if(string[i] == ']')\n \
    \       {\n            if(brackets.top() == '[')\n            {\n            \
    \    brackets.pop();\n            }\n            else\n            {\n       \
    \         result = true;\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++,brackets,nested,algorithm |>\n<| c |>\nThis\
    \ doesn't work if there are multiple nested brackets.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if there are multiple nested brackets.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if there are multiple nested brackets.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if there are multiple nested brackets.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if there are multiple nested brackets.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n#include <iostream>\n#include <stack>\n#include <string>\nusing\
    \ namespace std;", "{\n    stack<char> stack;\n    stack<char> stack2;\n    stack<char>\
    \ stack3;\n    stack<char> stack4;\n    stack<char> stack5;\n    stack<char> stack6;\n\
    \    stack<char> stack7;\n    stack<char> stack8;\n    stack<char> stack9;\n \
    \   stack<char> stack10;\n    stack<char> stack11;\n    stack<char> stack12;\n\
    \    stack<char> stack13;\n    stack<char> stack14;\n    stack<char> stack15;\n\
    \    stack<char> stack16;\n    stack<char> stack17;\n    stack<char> stack18;\n\
    \    stack<char> stack19;\n    stack<char> stack20;\n    stack<char> stack21;\n\
    \    stack<char> stack22;\n    stack<char> stack23;\n    stack<char> stack24;\n\
    \    stack<char> stack25;\n    stack<char> stack26;\n    stack<char> stack27;\n\
    \    stack<char> stack28;\n    stack<char> stack29;\n    stack<char> stack30;\n\
    \    stack<char> stack31;\n    stack<char> stack32;\n    stack<char> stack33;\n\
    \    stack<char> stack34;\n    stack<char> stack35;\n    stack<char> stack36;\n\
    \    stack<char> stack37;\n    stack<char> stack38;\n    stack<char> stack39;\n\
    \    stack<char> stack40;\n    stack<char> stack41;\n    stack<char> stack42;\n\
    \    stack<char> stack43;\n    stack<char> stack44;\n    stack<char> stack45;\n\
    \    stack<char> stack46;\n    stack<char> stack47;\n    stack<char> stack48;\n\
    \    stack<char> stack49;\n    stack<char> stack50;\n    stack<char> stack51;\n\
    \    stack<char> stack52;\n    stack<char> stack53;\n    stack<char> stack54;\n\
    \    stack<char> stack55;\n    stack<char> stack56;\n    stack<char> stack57;\n\
    \    stack<char> stack58;\n    stack<char> stack59;\n    stack<char> stack60;\n\
    \    stack<char> stack61;\n    stack<char> stack62;\n    stack<char> stack63;\n\
    \    stack<char> stack64;\n    stack<char> stack65;\n    stack<char> stack66;\n\
    \    stack", "{\n    string brackets = \"[]\";\n    stack<string> stack;\n   \
    \ stack<string> brackets_stack;\n    bool result = false;\n    bool brackets_found\
    \ = false;\n    for(int i = 0; i < string.size(); i++)\n    {\n        if(string[i]\
    \ == '[')\n        {\n            brackets_stack.push(string[i]);\n          \
    \  brackets_found = true;\n        }\n        else if(string[i] == ']')\n    \
    \    {\n            if(!brackets_found)\n            {\n                brackets_stack.push(string[i]);\n\
    \                brackets_found = true;\n            }\n            else\n   \
    \         {\n                brackets_stack.push(string[i]);\n               \
    \ brackets_found = false;\n            }\n        }\n        else if(string[i]\
    \ == '{')\n        {\n            stack.push(string[i]);\n        }\n        else\
    \ if(string[i] == '}')\n        {\n            if(!stack.empty())\n          \
    \  {\n                brackets_stack.push(string[i]);\n                brackets_found\
    \ = false;\n            }\n            else\n            {\n                brackets_stack.push(string[i]);\n\
    \                brackets_found = true;\n            }\n        }\n        else\n\
    \        {\n            if(!brackets_found)\n            {\n                brackets_stack.push(string[i]);\n\
    \                brackets_found = true;\n            }\n            else\n   \
    \         {\n                brackets_stack.push(string[i]);\n               \
    \ brackets_found = false;\n            }\n        }\n    }\n    while(!brackets_stack.empty())\n\
    \    {\n        string bracket = brackets_stack.top();\n        brackets_stack.pop();\n\
    \        for(int i = 0; i < bracket.size(); i++)\n        {\n            string\
    \ bracket2 = bracket;\n            if(bracket2[i] == '[')\n            {\n   \
    \             bracket2 += bracket2[i];\n            }\n            if(bracket2[i]\
    \ == ']')\n            {\n                bracket2 += bracket2[i];\n         \
    \   }\n            if(bracket2[i] == '{')\n            {\n                bracket2\
    \ += bracket2[i];\n            }\n            if(bracket2[i] == '}')\n       \
    \     {\n                bracket2 += bracket2[i];\n            }\n           \
    \ if(bracket2[i] == '[')\n            {\n                bracket2 += bracket2[i];\n\
    \            }\n            if(bracket2[i] == ']')\n            {\n          \
    \      bracket2 += bracket2[i];\n            }\n            if(bracket2[i] ==\
    \ '{')\n            {\n                bracket2 += bracket2[i];\n            }\n\
    \            if(bracket2[i] == '}')\n            {\n                bracket2 +=\
    \ bracket2[i];\n            }\n            if(bracket2[i] == '[')\n          \
    \  {\n                bracket2 += bracket2[i];\n            }\n            if(bracket2",
  "{\n    bool result = true;\n    stack<char> stack;\n    stack<char> brackets;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] ==\
    \ '[')\n        {\n            stack.push(string[i]);\n            brackets.push(string[i]);\n\
    \        }\n        else if(string[i] == ']')\n        {\n            if(!brackets.empty())\n\
    \            {\n                if(brackets.top() == '[')\n                {\n\
    \                    result = false;\n                }\n                else\n\
    \                {\n                    brackets.pop();\n                }\n \
    \           }\n            else\n            {\n                result = false;\n\
    \            }\n        }\n        else\n        {\n            if(!brackets.empty())\n\
    \            {\n                if(brackets.top() == '[')\n                {\n\
    \                    brackets.pop();\n                }\n                else\n\
    \                {\n                    result = false;\n                }\n \
    \           }\n            else\n            {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string,brackets\
    \ |>\n<| c |>\nThanks for your answer. Your solution works perfectly for me. I\
    \ am new to C++ and I didn't know about stacks. Thanks again.\n<|/ c |>\n<| c\
    \ |>\nYou're welcome. Stacks are very useful and are a very important part of\
    \ modern programming. Good luck!\n<|/ c |>\n<| a tags=c++,string,brackets |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <stack>\nusing namespace\
    \ std;", "{\n    bool result = true;\n    stack<char> brackets;\n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        if(string[i] == '[')\n      \
    \  {\n            brackets.push('[');\n        }\n        else if(string[i] ==\
    \ ']')\n        {\n            if(brackets.top() == '[')\n            {\n    \
    \            brackets.pop();\n            }\n            else\n            {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| c |>\nThis doesn't\
    \ work for `is_nested
  "{\n    bool result = false;\n    stack<string> brackets;\n    brackets.push(string);\n\
    \    string bracket;\n    while(!brackets.empty())\n    {\n        bracket = brackets.top();\n\
    \        brackets.pop();\n        for(int i = 0; i < bracket.length(); i++)\n\
    \        {\n            if(bracket[i] == '[')\n            {\n               \
    \ brackets.push(bracket.substr(0, i));\n            }\n            if(bracket[i]\
    \ == '{')\n            {\n                brackets.push(bracket.substr(0, i));\n\
    \            }\n            if(bracket[i] == '(')\n            {\n           \
    \     brackets.push(bracket.substr(0, i));\n            }\n            if(bracket[i]\
    \ == ']')\n            {\n                brackets.pop();\n            }\n   \
    \         if(bracket[i] == '}')\n            {\n                brackets.pop();\n\
    \            }\n            if(bracket[i] == ')')\n            {\n           \
    \     brackets.pop();\n            }\n        }\n        if(bracket.length() ==\
    \ 0)\n        {\n            result = true;\n            break;\n        }\n \
    \   }\n    return result;\n}", "{\n    int open = 0;\n    int close = 0;\n   \
    \ for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] == '[')\n\
    \            open++;\n        else if(string[i] == ']')\n            close++;\n\
    \        if(open > close || open < 0)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    stack<char> s;\n    bool found = false;\n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        if(string[i] == '[')\n        {\n\
    \            s.push(string[i]);\n        }\n        else if(string[i] == ']')\n\
    \        {\n            if(s.top() == '[')\n            {\n                s.pop();\n\
    \                found = true;\n            }\n            else\n            {\n\
    \                return false;\n            }\n        }\n    }\n    return found;\n\
    }", "{\n    bool result = false;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(string[i] == '[')\n        {\n            bool found = false;\n\
    \            for(int j = i; j < string.length(); j++)\n            {\n       \
    \         if(string[j] == '[')\n                {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if(!found)\n            {\n                result = true;\n           \
    \     break;\n            }\n        }\n    }\n    return result;\n}", "{\n  \
    \  stack<char> brackets;\n    bool found = false;\n    \n    for(int i = 0; i\
    \ < string.size(); i++)\n    {\n        if(string[i] == '[')\n        {\n    \
    \        brackets.push(string[i]);\n        }\n        else if(string[i] == ']')\n\
    \        {\n            char c = brackets.top();\n            brackets.pop();\n\
    \            if(c == '[')\n            {\n                found = true;\n    \
    \        }\n        }\n    }\n    return found;\n}", "{\n    stack<char> stack;\n\
    \    stack<char> brackets;\n    bool result = false;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == '[')\n        {\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] == ']')\n        {\n            if(!brackets.empty())\n\
    \            {\n                if(!brackets.top() == '[')\n                {\n\
    \                    result = true;\n                    break;\n            \
    \    }\n                else\n                {\n                    brackets.pop();\n\
    \                }\n            }\n            else\n            {\n         \
    \       result = false;\n                break;\n            }\n        }\n  \
    \      else\n        {\n            if(!brackets.empty())\n            {\n   \
    \             if(!brackets.top() == '[')\n                {\n                \
    \    brackets.push(string[i]);\n                }\n                else\n    \
    \            {\n                    brackets.pop();\n                }\n     \
    \       }\n            else\n            {\n                brackets.push(string[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c++,algorithm,string |>\n<code>", "{\n    stack<char> stack;\n\
    \    stack<char> stack2;\n    stack<char> stack3;\n    stack<char> stack4;\n \
    \   stack<char> stack5;\n    stack<char> stack6;\n    stack<char> stack7;\n  \
    \  stack<char> stack8;\n    stack<char> stack9;\n    stack<char> stack10;\n  \
    \  stack<char> stack11;\n    stack<char> stack12;\n    stack<char> stack13;\n\
    \    stack<char> stack14;\n    stack<char> stack15;\n    stack<char> stack16;\n\
    \    stack<char> stack17;\n    stack<char> stack18;\n    stack<char> stack19;\n\
    \    stack<char> stack20;\n    stack<char> stack21;\n    stack<char> stack22;\n\
    \    stack<char> stack23;\n    stack<char> stack24;\n    stack<char> stack25;\n\
    \    stack<char> stack26;\n    stack<char> stack27;\n    stack<char> stack28;\n\
    \    stack<char> stack29;\n    stack<char> stack30;\n    stack<char> stack31;\n\
    \    stack<char> stack32;\n    stack<char> stack33;\n    stack<char> stack34;\n\
    \    stack<char> stack35;\n    stack<char> stack36;\n    stack<char> stack37;\n\
    \    stack<char> stack38;\n    stack<char> stack39;\n    stack<char> stack40;\n\
    \    stack<char> stack41;\n    stack<char> stack42;\n    stack<char> stack43;\n\
    \    stack<char> stack44;\n    stack<char> stack45;\n    stack<char> stack46;\n\
    \    stack<char> stack47;\n    stack<char> stack48;\n    stack<char> stack49;\n\
    \    stack<char> stack50;\n    stack<char> stack51;\n    stack<char> stack52;\n\
    \    stack<char> stack53;\n    stack<char> stack54;\n    stack<char> stack55;\n\
    \    stack<char> stack56;\n    stack<char> stack57;\n    stack<char> stack58;\n\
    \    stack<char> stack59;\n    stack<char> stack60;\n    stack<char> stack61;\n\
    \    stack<char> stack62;\n    stack<char> stack63;\n    stack<char> stack64;\n\
    \    stack<char> stack65;\n    stack<char> stack66;\n    stack", "{\n    bool\
    \ result = false;\n    stack<char> stack;\n    stack<char> brackets;\n    \n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] == '[')\n\
    \        {\n            stack.push(string[i]);\n            brackets.push(string[i]);\n\
    \        }\n        else if(string[i] == ']')\n        {\n            char c =\
    \ stack.pop();\n            char d = brackets.pop();\n            if(c != d)\n\
    \            {\n                result = false;\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}", "{\n    stack<string> s;\n\
    \    s.push(string);\n    while(!s.empty())\n    {\n        string temp = s.top();\n\
    \        if(temp == \"[\" || temp == \"{\" || temp == \"(\")\n        {\n    \
    \        s.pop();\n        }\n        else\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int count = 0;\n    bool found = false;\n\
    \    bool found2 = false;\n    bool found3 = false;\n    bool found4 = false;\n\
    \    bool found5 = false;\n    bool found6 = false;\n    bool found7 = false;\n\
    \    bool found8 = false;\n    bool found9 = false;\n    bool found10 = false;\n\
    \    bool found11 = false;\n    bool found12 = false;\n    bool found13 = false;\n\
    \    bool found14 = false;\n    bool found15 = false;\n    bool found16 = false;\n\
    \    bool found17 = false;\n    bool found18 = false;\n    bool found19 = false;\n\
    \    bool found20 = false;\n    bool found21 = false;\n    bool found22 = false;\n\
    \    bool found23 = false;\n    bool found24 = false;\n    bool found25 = false;\n\
    \    bool found26 = false;\n    bool found27 = false;\n    bool found28 = false;\n\
    \    bool found29 = false;\n    bool found30 = false;\n    bool found31 = false;\n\
    \    bool found32 = false;\n    bool found33 = false;\n    bool found34 = false;\n\
    \    bool found35 = false;\n    bool found36 = false;\n    bool found37 = false;\n\
    \    bool found38 = false;\n    bool found39 = false;\n    bool found40 = false;\n\
    \    bool found41 = false;\n    bool found42 = false;\n    bool found43 = false;\n\
    \    bool found44 = false;\n    bool found45 = false;\n    bool found46 = false;\n\
    \    bool found47 = false;\n    bool found48 = false;\n    bool found49 = false;\n\
    \    bool found50 = false;\n    bool found51 = false;\n    bool found52 = false;\n\
    \    bool found53 = false;\n    bool found54 = false;\n    bool found55 = false;\n\
    \    bool found56 = false;\n    bool found57 = false;\n    bool found58 = false;\n\
    \    bool found59 = false;\n    bool found60 = false;\n    bool found61 = false;\n\
    \    bool found62 = false;\n    bool found63 = false;\n    bool found64 = false;\n\
    \    bool found65 = false;\n    bool found66 = false;\n    bool found67 = false;\n\
    \    bool found68 = false;\n    bool found69 = false;\n    bool found70 = false;\n\
    \    bool found71 = false;\n    bool found72 = false;\n    bool found73 = false;\n\
    \    bool found74 = false;\n    bool found75 = false;\n    bool found76 = false;\n\
    \    bool found77 = false;\n    bool found78 = false;\n    bool found79 = false;\n\
    \    bool ", "{\n    int open = 0;\n    int close = 0;\n    for(int i = 0; i <\
    \ string.size(); i++)\n    {\n        if(string[i] == '[')\n        {\n      \
    \      open++;\n        }\n        if(string[i] == ']')\n        {\n         \
    \   close++;\n        }\n    }\n    if(open != close)\n    {\n        return false;\n\
    \    }\n    return true;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c\
    \ |>\nThis fails for `is_nested(\"[][[]]\")`\n<|/ c |>\n<| c |>\nYes, it fails\
    \ for `is_nested(\"[][[]]\")`. But it fails for `is_nested(\"[][]\")` too. `is_nested(\"\
    []\")` fails because `open` and `close` are both `0`.\n<|/ c |>\n<| c |>\nYes,\
    \ I see that now. Thanks for pointing that out. I've updated my answer to fix\
    \ it.\n<|/ c |>\n<| c |>\n`is_nested(\"[][]\")` fails because `open` and `close`\
    \ are both `0`.\n<|/ c |>\n<| c |>\nYes, I see that now. Thanks for pointing that\
    \ out. I've updated my answer to fix it.\n<|/ c |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>", "{\n    stack<string> stack;\n    stack<string> brackets;\n   \
    \ string temp;\n    bool found = false;\n    \n    for(int i = 0; i < string.size();\
    \ i++)\n    {\n        if(string[i] == '[')\n        {\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] == ']')\n        {\n            temp = stack.pop();\n\
    \            if(!found)\n            {\n                found = true;\n      \
    \          brackets.push(temp);\n            }\n            else\n           \
    \ {\n                if(!brackets.contains(temp))\n                {\n       \
    \             found = false;\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return found;\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `is_nested(\"[[][]]\")`\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `is_nested
  "{\n    bool result = false;\n    stack<char> brackets;\n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        if(brackets.empty())\n        {\n    \
    \        if((string[i] == '[') || (string[i] == '('))\n            {\n       \
    \         brackets.push(string[i]);\n            }\n        }\n        else if(brackets.top()\
    \ == '[' && string[i] == '[')\n        {\n            brackets.pop();\n      \
    \  }\n        else if(brackets.top() == '(' && string[i] == '(')\n        {\n\
    \            brackets.pop();\n        }\n        else if(brackets.top() == '['\
    \ && string[i] == ']')\n        {\n            brackets.pop();\n            if(brackets.top()\
    \ == '[' && string[i] == ']')\n            {\n                brackets.pop();\n\
    \                if(brackets.top() == '[' && string[i] == ']')\n             \
    \   {\n                    brackets.pop();\n                    if(brackets.top()\
    \ == '[' && string[i] == ']')\n                    {\n                       \
    \ brackets.pop();\n                        if(brackets.top() == '[' && string[i]\
    \ == ']')\n                        {\n                            brackets.pop();\n\
    \                            if(brackets.top() == '[' && string[i] == ']')\n \
    \                           {\n                                brackets.pop();\n\
    \                                if(brackets.top() == '[' && string[i] == ']')\n\
    \                                {\n                                    brackets.pop();\n\
    \                                    if(brackets.top() == '[' && string[i] ==\
    \ ']')\n                                    {\n                              \
    \          brackets.pop();\n                                        if(brackets.top()\
    \ == '[' && string[i] == ']')\n                                        {\n   \
    \                                         brackets.pop();\n                  \
    \                          if(brackets.top() == '[' && string[i] == ']')\n   \
    \                                         {\n                                \
    \                brackets.pop();\n                                           \
    \     if(brackets.top() == '[' && string[i] == ']')\n                        \
    \                        {\n                                                 \
    \   brackets.pop();\n                                                    if(brackets.top()\
    \ == '[' && string[i] == ']')\n                                              \
    \      {\n                                                        brackets.pop();\n\
    \                                                        if(brackets.top() ==\
    \ '[' && string[i] == ']')\n                                                 \
    \       {\n                                                            brackets.pop();\n\
    \                                                            if(brackets.top()\
    \ == '[' && string[i] == ']')\n                                              \
    \              {\n                                                           \
    \     brackets.pop();\n                                                      \
    \          if(brackets.top() == '[' && string[i] == ']')\n                   \
    \                                             {\n                            \
    \                                        brackets.pop();\n                   \
    \                                                 if(brackets.top() == '[' &&\
    \ string[i] == ']')\n                                                        \
    \            {\n                                                             \
    \           brackets.pop();\n                                                \
    \                        if(brackets.top() == '[' && string[i] == ']')\n     \
    \                                                                   {\n      \
    \                                                                      brackets.pop();\n\
    \                                                                            if(brackets.top",
  "{\n    stack<char> brackets;\n    bool found = false;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == '[')\n        {\n            brackets.push(string[i]);\n\
    \        }\n        else if(string[i] == ']')\n        {\n            if(!brackets.empty())\n\
    \            {\n                char open = brackets.top();\n                brackets.pop();\n\
    \                if(open == '[')\n                {\n                    found\
    \ = true;\n                    break;\n                }\n            }\n    \
    \    }\n    }\n    return found;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ code doesn't work if you have a string like `
  "{\n    bool result = true;\n    for(int i = 0; i < string.size(); ++i)\n    {\n\
    \        if(string[i] == '[' && string[i+1] == '[')\n        {\n            result\
    \ += is_nested(string+i+2);\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,string |>\n<| c |>\nThis doesn't work. Try it on `\"\
    []]\"`.\n<|/ c |>\n<| c |>\nIt does work. Try it on `\"[]]\"`. You just need to\
    \ add one more `if` statement to check if `string[i+1] == '['`.\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work. Try it on `\"[]]\"`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it on `\"[]]\"`. You just need to add one more `if` statement to check if\
    \ `string[i+1] == '['`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it on `\"[]]\"\
    `.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n\
    \    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n\
    \    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n\
    \    int z = 0;\n    int brackets = 0;\n    bool found = false;\n    bool found2\
    \ = false;\n    bool found3 = false;\n    bool found4 = false;\n    bool found5\
    \ = false;\n    bool found6 = false;\n    bool found7 = false;\n    bool found8\
    \ = false;\n    bool found9 = false;\n    bool found10 = false;\n    bool found11\
    \ = false;\n    bool found12 = false;\n    bool found13 = false;\n    bool found14\
    \ = false;\n    bool found15 = false;\n    bool found16 = false;\n    bool found17\
    \ = false;\n    bool found18 = false;\n    bool found19 = false;\n    bool found20\
    \ = false;\n    bool found21 = false;\n    bool found22 = false;\n    bool found23\
    \ = false;\n    bool found24 = false;\n    bool found25 = false;\n    bool found26\
    \ = false;\n    bool found27 = false;\n    bool found28 = false;\n    bool found29\
    \ = false;\n    bool found30 = false;\n    bool found31 = false;\n    bool found32\
    \ = false;\n    bool found33 = false;\n    bool found34 = false;\n    bool found35\
    \ = false;\n    bool found36 = false;\n    bool found37 = false;\n    bool found38\
    \ = false;\n    bool found39 = false;\n    bool found40 = false;\n    bool found41\
    \ = false;\n    bool found42 = false;\n    bool found43 = false;\n    bool found44\
    \ = false;\n    bool found45 = false;\n    bool found46 = false;\n    bool found47\
    \ = false;\n    bool found48 = false;\n    bool found49 = false;\n    bool found50\
    \ = false;\n    bool found51 = false;\n    bool found52 = false;\n    bool found53\
    \ = false;\n    bool found54 = false;\n    bool found55 = false;\n    bool found56\
    \ = false;\n    bool found57 = false;\n    bool found58 = false;\n    bool found59\
    \ = false;\n    bool found60 = false;\n    bool found61 = false;\n    bool found62\
    \ = false;\n    bool found63 = false;\n    bool found64 = false;\n    bool found65\
    \ = false;\n    bool found66 = false;\n    bool found67 = false;\n    bool found68\
    \ = false;\n    bool found69 = false;\n    bool found70 = false;\n    bool found71\
    \ = ", "{\n    string brackets = \"[]\";\n    string openBrackets = \"[\" + brackets;\n\
    \    string closeBrackets = \"]\" + brackets;\n    string openBracketsCount =\
    \ openBrackets.count(\"[\");\n    string closeBracketsCount = closeBrackets.count(\"\
    ]\");\n    string openBracketsCount2 = openBrackets.count(\"[\");\n    string\
    \ closeBracketsCount2 = closeBrackets.count(\"]\");\n    string openBracketsCount3\
    \ = openBrackets.count(\"[\");\n    string closeBracketsCount3 = closeBrackets.count(\"\
    ]\");\n    string openBracketsCount4 = openBrackets.count(\"[\");\n    string\
    \ closeBracketsCount4 = closeBrackets.count(\"]\");\n    string openBracketsCount5\
    \ = openBrackets.count(\"[\");\n    string closeBracketsCount5 = closeBrackets.count(\"\
    ]\");\n    string openBracketsCount6 = openBrackets.count(\"[\");\n    string\
    \ closeBracketsCount6 = closeBrackets.count(\"]\");\n    string openBracketsCount7\
    \ = openBrackets.count(\"[\");\n    string closeBracketsCount7 = closeBrackets.count(\"\
    ]\");\n    string openBracketsCount8 = openBrackets.count(\"[\");\n    string\
    \ closeBracketsCount8 = closeBrackets.count(\"]\");\n    string openBracketsCount9\
    \ = openBrackets.count(\"[\");\n    string closeBracketsCount9 = closeBrackets.count(\"\
    ]\");\n    string openBracketsCount10 = openBrackets.count(\"[\");\n    string\
    \ closeBracketsCount10 = closeBrackets.count(\"]\");\n    string openBracketsCount11\
    \ = openBrackets.count(\"[\");\n    string closeBracketsCount11 = closeBrackets.count(\"\
    ]\");\n    string openBracketsCount12 = openBrackets.count(\"[\");\n    string\
    \ closeBracketsCount12 = closeBrackets.count(\"]\");\n    string openBracketsCount13\
    \ = openBrackets.count(\"[\");\n    string closeBracketsCount13 = closeBrackets.count(\"\
    ]\");\n    string openBracketsCount14 = openBrackets.count(\"[\");\n    string\
    \ closeBracketsCount14 = closeBrackets.count(\"]\");\n    string open", "{\n \
    \   stack<char> s;\n    bool result = false;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == '[')\n        {\n            s.push(string[i]);\n\
    \        }\n        else if(string[i] == ']')\n        {\n            if(!s.empty()\
    \ && s.top() == '[')\n            {\n                s.pop();\n            }\n\
    \            else\n            {\n                result = true;\n           \
    \ }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,stack,algorithm,string\
    \ |>\n<| c |>\nThis doesn't work. Try it with `is_nested
  "{\n    int brackets = 0;\n    for (int i = 0; i < string.length(); i++)\n    {\n\
    \        if (string[i] == '[')\n            brackets++;\n        else if (string[i]\
    \ == ']')\n            brackets--;\n        if (brackets < 0)\n            return\
    \ false;\n    }\n    return brackets == 0;\n}", "{\n    string open = \"[\", close\
    \ = \"]\";\n    stack<string> brackets;\n    brackets.push(open);\n    bool result\
    \ = false;\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == open)\n        {\n            brackets.push(string[i]);\n        }\n    \
    \    else if(string[i] == close)\n        {\n            if(brackets.top() !=\
    \ close)\n            {\n                result = false;\n                break;\n\
    \            }\n            else\n            {\n                brackets.pop();\n\
    \            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try `is_nested(\"[[]]\")`\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added the test case you mentioned.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I added the test case you mentioned.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I added the test case you mentioned.\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works. I added the test case you mentioned.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    size_t pos = 0;\n    size_t brackets\
    \ = 0;\n    size_t depth = 0;\n    bool found = false;\n    bool brackets_found\
    \ = false;\n    bool brackets_opened = false;\n    bool brackets_closed = false;\n\
    \    bool brackets_closed_by_bracket = false;\n    bool brackets_closed_by_bracket2\
    \ = false;\n    bool brackets_closed_by_bracket3 = false;\n    bool brackets_closed_by_bracket4\
    \ = false;\n    bool brackets_closed_by_bracket5 = false;\n    bool brackets_closed_by_bracket6\
    \ = false;\n    bool brackets_closed_by_bracket7 = false;\n    bool brackets_closed_by_bracket8\
    \ = false;\n    bool brackets_closed_by_bracket9 = false;\n    bool brackets_closed_by_bracket10\
    \ = false;\n    bool brackets_closed_by_bracket11 = false;\n    bool brackets_closed_by_bracket12\
    \ = false;\n    bool brackets_closed_by_bracket13 = false;\n    bool brackets_closed_by_bracket14\
    \ = false;\n    bool brackets_closed_by_bracket15 = false;\n    bool brackets_closed_by_bracket16\
    \ = false;\n    bool brackets_closed_by_bracket17 = false;\n    bool brackets_closed_by_bracket18\
    \ = false;\n    bool brackets_closed_by_bracket19 = false;\n    bool brackets_closed_by_bracket20\
    \ = false;\n    bool brackets_closed_by_bracket21 = false;\n    bool brackets_closed_by_bracket22\
    \ = false;\n    bool brackets_closed_by_bracket23 = false;\n    bool brackets_closed_by_bracket24\
    \ = false;\n    bool brackets_closed_by_bracket25 = false;\n    bool brackets_closed_by_bracket26\
    \ = false;\n    bool brackets_closed_by_bracket27 = false;\n    bool brackets_closed_by_bracket28\
    \ = false;\n    bool brackets_closed_by_bracket29 = false;\n    bool brackets_closed_by_bracket30\
    \ = false;\n    bool brackets_closed_by_bracket31 = false;\n    bool brackets_closed_by_bracket32\
    \ = false;\n    bool brackets_closed_by_bracket33 = false;\n    bool brackets_closed_by_bracket34\
    \ = false;\n    bool brackets_closed_by_bracket35 = false;\n    bool brackets_closed_by_bracket36\
    \ = false;\n    bool brackets_closed_by_bracket37 = false;\n    bool brackets_closed_by_bracket38\
    \ = false;\n    bool brackets_closed_by_bracket39 = false;\n    bool brackets_closed_by_bracket40\
    \ = false;\n    bool brackets_closed_by_bracket41 = false;\n    bool brackets_closed_by_bracket42\
    \ = false;\n    bool brackets_", "{\n    size_t start = 0;\n    size_t end = 0;\n\
    \    size_t nest = 0;\n    bool result = false;\n    for(size_t i = 0; i < string.size();\
    \ ++i)\n    {\n        if(string[i] == '[')\n        {\n            start = i;\n\
    \            ++nest;\n        }\n        if(string[i] == ']')\n        {\n   \
    \         end = i;\n            ++nest;\n        }\n        if(nest == 0)\n  \
    \      {\n            result = true;\n            break;\n        }\n    }\n \
    \   return result;\n}", "{\n    bool result = true;\n    stack<char> brackets;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] ==\
    \ '[')\n        {\n            brackets.push('[');\n        }\n        else if(string[i]\
    \ == ']')\n        {\n            if(!brackets.empty())\n            {\n     \
    \           if(brackets.top() == '[')\n                {\n                   \
    \ brackets.pop();\n                }\n                else\n                {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n            }\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c++,stack,data-structures |>\n<| c |>\nI like your solution. Could you\
    \ please explain how it works?\n<|/ c |>\n<| c |>\nThe stack is used to keep track\
    \ of which brackets are open. Every time you see a `[` you push it onto the stack.\
    \ When you see a `]` you pop it off the stack. If it isn't empty then you know\
    \ that there is at least one `[` inside the brackets. So the function returns\
    \ `true` if the string contains at least one `[` inside brackets and `false` otherwise.\
    \ Hope that helps.\n<|/ c |>\n<| c |>\nI like your solution. Could you please\
    \ explain how it works?\n<|/ c |>\n<| c |>\nI added some comments to the code.\
    \ Hope that helps.\n<|/ c |>\n<| c |>\nThanks for the explanation. I am new to\
    \ stacks and this helped me a lot.\n<|/ c |>\n<| a tags=c++,stack,data-structures\
    \ |>\n<code>\n#include <iostream>\n#include <stack>\nusing namespace std;", "{\n\
    \    int open_brackets = 0;\n    int close_brackets = 0;\n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        if(string[i] == '[')\n            open_brackets++;\n\
    \        else if(string[i] == ']')\n            close_brackets++;\n        if(open_brackets\
    \ > close_brackets)\n            return false;\n    }\n    return true;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "{\n    bool result = false;\n \
    \   stack<string> brackets;\n    brackets.push(string);\n    string bracket;\n\
    \    while(!brackets.empty())\n    {\n        bracket = brackets.top();\n    \
    \    brackets.pop();\n        if(!bracket.empty())\n        {\n            if(bracket.back()\
    \ == '[')\n            {\n                brackets.push(bracket.substr(0,bracket.size()-1));\n\
    \            }\n            else if(bracket.back() == ']')\n            {\n  \
    \              brackets.pop();\n                result = true;\n            }\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <stack>\nusing namespace std;", "{\n\
    \    bool result = true;\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] == '[')\n        {\n            bool found = false;\n  \
    \          for(int j = i; j < string.length(); j++)\n            {\n         \
    \       if(string[j] == ']')\n                {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if(!found)\n\
    \            {\n                result = false;\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <vector>\nusing namespace std;", "{\n    bool result = true;\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == '[')\n    \
    \    {\n            for(int j = i; j < string.length(); j++)\n            {\n\
    \                if(string[j] == ']')\n                {\n                   \
    \ result = result && is_nested(string);\n                    break;\n        \
    \        }\n            }\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for the answer. Can you please explain how\
    \ this works?\n<|/ c |>\n<| c |>\nI added some comments. Hope it helps.\n<|/ c\
    \ |>\n<| c |>\nThanks for the comments. I understand it now. :)\n<|/ c |>\n<|\
    \ a tags=c++,string,algorithm |>\nI wrote a recursive solution in Python:\n<code>\n\
    def is_nested(s):\n    stack = []\n    open_brackets = 0\n    for c in s:\n  \
    \      if c == '[':\n            open_brackets += 1\n            stack.append(c)\n\
    \        elif c == ']':\n            open_brackets -= 1\n            if open_brackets\
    \ == 0:\n                stack.pop()\n            else:\n                return\
    \ False\n    return open_brackets == 0\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  stack<char> brackets;\n    bool found = false;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == '[')\n        {\n            brackets.push('[');\n\
    \        }\n        else if(string[i] == ']')\n        {\n            if(brackets.top()\
    \ == '[')\n            {\n                brackets.pop();\n            }\n   \
    \         else\n            {\n                found = true;\n            }\n\
    \        }\n    }\n    return found;\n}", "{\n    stack<char> brackets;\n    bool\
    \ result = true;\n    for(int i = 0; i < string.size(); i++)\n    {\n        if(string[i]\
    \ == '[')\n        {\n            brackets.push('[');\n        }\n        else\
    \ if(string[i] == ']')\n        {\n            if(brackets.top() == '[')\n   \
    \         {\n                brackets.pop();\n            }\n            else\n\
    \            {\n                result = false;\n            }\n        }\n  \
    \      else\n        {\n            result = false;\n        }\n    }\n    return\
    \ result;\n}", "{\n    size_t pos = 0;\n    size_t brackets = 0;\n    bool found\
    \ = false;\n    bool found2 = false;\n    bool found3 = false;\n    bool found4\
    \ = false;\n    bool found5 = false;\n    bool found6 = false;\n    bool found7\
    \ = false;\n    bool found8 = false;\n    bool found9 = false;\n    bool found10\
    \ = false;\n    bool found11 = false;\n    bool found12 = false;\n    bool found13\
    \ = false;\n    bool found14 = false;\n    bool found15 = false;\n    bool found16\
    \ = false;\n    bool found17 = false;\n    bool found18 = false;\n    bool found19\
    \ = false;\n    bool found20 = false;\n    bool found21 = false;\n    bool found22\
    \ = false;\n    bool found23 = false;\n    bool found24 = false;\n    bool found25\
    \ = false;\n    bool found26 = false;\n    bool found27 = false;\n    bool found28\
    \ = false;\n    bool found29 = false;\n    bool found30 = false;\n    bool found31\
    \ = false;\n    bool found32 = false;\n    bool found33 = false;\n    bool found34\
    \ = false;\n    bool found35 = false;\n    bool found36 = false;\n    bool found37\
    \ = false;\n    bool found38 = false;\n    bool found39 = false;\n    bool found40\
    \ = false;\n    bool found41 = false;\n    bool found42 = false;\n    bool found43\
    \ = false;\n    bool found44 = false;\n    bool found45 = false;\n    bool found46\
    \ = false;\n    bool found47 = false;\n    bool found48 = false;\n    bool found49\
    \ = false;\n    bool found50 = false;\n    bool found51 = false;\n    bool found52\
    \ = false;\n    bool found53 = false;\n    bool found54 = false;\n    bool found55\
    \ = false;\n    bool found56 = false;\n    bool found57 = false;\n    bool found58\
    \ = false;\n    bool found59 = false;\n    bool found60 = false;\n    bool found61\
    \ = false;\n    bool found62 = false;\n    bool found63 = false;\n    bool found64\
    \ = false;\n    bool found65 = false;\n    bool found66 = false;\n    bool found67\
    \ = false;\n    bool found68 = false;\n    bool found69 = false;\n    bool found70\
    \ = false;\n    bool found71 = false;\n    bool found72 = false;\n    bool found73\
    \ = false;\n    bool found74 = false;\n    bool found75 = false;\n    bool found76\
    \ = false;\n    bool found77 = false;\n    bool found78 = false;\n    bool found79\
    \ = false;\n    bool found80 = false;\n    bool found8", "{\n    size_t i = 0;\n\
    \    size_t j = 0;\n    size_t k = 0;\n    bool result = false;", "{\n    stack<char>\
    \ s;\n    bool found = false;\n    for(auto c : string)\n    {\n        if(!s.empty()\
    \ && c == '[' && s.top() == '[')\n        {\n            s.push('[');\n      \
    \  }\n        else if(s.empty() || c == '[' && s.top() != ']')\n        {\n  \
    \          return false;\n        }\n        else if(s.top() == '[' && c == ']')\n\
    \        {\n            s.pop();\n            found = true;\n        }\n     \
    \   else\n        {\n            return false;\n        }\n    }\n    return found;\n\
    }", "{\n    bool result = false;\n    stack<char> stack;\n    stack<char> open;\n\
    \    stack<char> close;\n    stack<char> nest;\n    stack.push('[');\n    open.push('[');\n\
    \    close.push(']');\n    nest.push('[');\n    \n    for(int i = 0; i < string.size();\
    \ ++i)\n    {\n        if(string[i] == '[')\n        {\n            stack.push(string[i]);\n\
    \            open.push(string[i]);\n        }\n        else if(string[i] == ']')\n\
    \        {\n            bool is_open = stack.top() == '[';\n            bool is_close\
    \ = close.top() == '[';\n            bool is_nest = nest.top() == '[';\n     \
    \       bool is_open2 = open.top() == '[';\n            bool is_close2 = close.top()\
    \ == ']';\n            bool is_nest2 = nest.top() == ']';\n            bool is_open3\
    \ = open.top() == '[';\n            bool is_close3 = close.top() == ']';\n   \
    \         bool is_nest3 = nest.top() == '[';\n            bool is_open4 = open.top()\
    \ == '[';\n            bool is_close4 = close.top() == ']';\n            bool\
    \ is_nest4 = nest.top() == ']';\n            bool is_open5 = open.top() == '[';\n\
    \            bool is_close5 = close.top() == ']';\n            bool is_nest5 =\
    \ nest.top() == '[';\n            bool is_open6 = open.top() == '[';\n       \
    \     bool is_close6 = close.top() == ']';\n            bool is_nest6 = nest.top()\
    \ == ']';\n            bool is_open7 = open.top() == '[';\n            bool is_close7\
    \ = close.top() == ']';\n            bool is_nest7 = nest.top() == '[';\n    \
    \        bool is_open8 = open.top() == '[';\n            bool is_close8 = close.top()\
    \ == ']';\n            bool is_nest8 = nest.top() == ']';\n            bool is_open9\
    \ = open.top() == '[';\n            bool is_close9 = close.top() == ']';\n   \
    \         bool is_nest9 = nest.top() == '[';\n            bool is_open10 = open.top()\
    \ == '[';\n            bool is_close10 = close.top() == ']';\n            bool\
    \ is_nest10 = nest.top() == ']';\n            bool is_open11 = open.top() == '[';\n\
    \            bool is_close11 = close.top() == ']';\n            bool is_nest11\
    \ = nest.top() == '[';\n            bool is_open12 = open.top() == '[';\n    \
    \        bool is_close12 = close.top() == ']';", "{\n    bool result = false;\n\
    \    stack<string> stack;\n    stack<string> open;\n    stack<string> close;\n\
    \    stack<string> current;\n    stack<string> temp;\n    string temp2;\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] ==\
    \ '[')\n        {\n            open.push(string[i]);\n        }\n        else\
    \ if(string[i] == ']')\n        {\n            close.push(string[i]);\n      \
    \  }\n        else if(string[i] == '{')\n        {\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] == '}')\n        {\n            current\
    \ = stack.pop();\n            temp = close;\n            while(!temp.empty())\n\
    \            {\n                temp2 = temp.pop();\n                if(temp2\
    \ == current)\n                {\n                    result = true;\n       \
    \             break;\n                }\n            }\n        }\n    }\n   \
    \ return result;\n}", "{\n    bool result = false;\n    stack<char> brackets;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] ==\
    \ '[')\n        {\n            brackets.push(string[i]);\n        }\n        else\
    \ if(string[i] == ']')\n        {\n            char c = brackets.pop();\n    \
    \        if(c == '[')\n            {\n                result = true;\n       \
    \     }\n            else\n            {\n                result = false;\n  \
    \          }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `is_nested(\"[[]]\")`\n<|/ c |>\n\
    <| c |>\nYes, I forgot about that case. Thanks for pointing it out. I've edited\
    \ my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    stack<char> brackets;\n\
    \    bool result = false;\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] == '[')\n        {\n            brackets.push('[');\n  \
    \      }\n        else if(string[i] == ']')\n        {\n            if(brackets.top()\
    \ == '[')\n            {\n                brackets.pop();\n            }\n   \
    \         else\n            {\n                result = true;\n            }\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thank you for your answer. Unfortunately, I cannot use stacks because I am not\
    \ allowed to use them in my assignment. I am only allowed to use arrays and loops.\n\
    <|/ c |>\n<| c |>\nI see. Well, if you can't use stacks, you can always use recursion.\
    \ I'll edit my answer with some code.\n<|/ c |>\n<| c |>\nThank you for your answer.\
    \ Unfortunately, I cannot use stacks because I am not allowed to use them in my\
    \ assignment. I am only allowed to use arrays and loops.\n<|/ c |>\n<| c |>\n\
    I see. Well, if you can't use stacks, you can always use recursion. I'll edit\
    \ my answer with some code.\n<|/ c |>\n<| c |>\nThank you for your answer. Unfortunately,\
    \ I cannot use stacks because I am not allowed to use them in my assignment. I\
    \ am only allowed to use arrays and loops.\n<|/ c |>\n<| a tags=c++,string,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    int open = 0;\n    int close = 0;\n    int open2 = 0;\n    int close2 = 0;\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int count\
    \ = 0;\n    bool result = false;\n    for(i = 0; i < string.size(); i++)\n   \
    \ {\n        if(string[i] == '[')\n        {\n            open++;\n        }\n\
    \        else if(string[i] == ']')\n        {\n            close++;\n        }\n\
    \        else if(string[i] == '{')\n        {\n            open2++;\n        }\n\
    \        else if(string[i] == '}')\n        {\n            close2++;\n       \
    \ }\n    }\n    if(open > close || open2 > close2)\n    {\n        return false;\n\
    \    }\n    for(i = 0; i < string.size(); i++)\n    {\n        if(string[i] ==\
    \ '[')\n        {\n            open++;\n        }\n        else if(string[i] ==\
    \ ']')\n        {\n            close++;\n        }\n        else if(string[i]\
    \ == '{')\n        {\n            open2++;\n        }\n        else if(string[i]\
    \ == '}')\n        {\n            close2++;\n        }\n        else if(string[i]\
    \ == '[')\n        {\n            open++;\n        }\n        else if(string[i]\
    \ == ']')\n        {\n            close++;\n        }\n        else if(string[i]\
    \ == '{')\n        {\n            open2++;\n        }\n        else if(string[i]\
    \ == '}')\n        {\n            close2++;\n        }\n    }\n    if(open !=\
    \ close || open2 != close2)\n    {\n        return false;\n    }\n    for(i =\
    \ 0; i < string.size(); i++)\n    {\n        if(string[i] == '[')\n        {\n\
    \            open++;\n        }\n        else if(string[i] == ']')\n        {\n\
    \            close++;\n        }\n        else if(string[i] == '{')\n        {\n\
    \            open2++;\n        }\n        else if(string[i] == '}')\n        {\n\
    \            close2++;\n        }\n        else if(string[i] == '[')\n       \
    \ {\n            open++;\n        }\n        else if(string[i] == ']')\n     \
    \   {\n            close++;\n        }\n        else if(string[i] == '{')\n  \
    \      {\n            open2++;\n        }\n        else if(string[i] == '}')\n\
    \        {\n            close2++;\n        }\n    }\n    for(i = 0; i < string.size();\
    \ i++)\n    {\n        if(string[i] == '[')\n        {\n            open++;\n\
    \        }\n        else if(string[i] == ']')\n        {\n            close++;\n\
    \        }\n        else if(string[i] == '{')\n        {\n            open2++;\n\
    \        }\n        else if(string[i] == '}')\n        {\n            close2++;\n\
    \        }\n        else if(string[i] == '[')\n        {\n            open++;\n\
    \        }", "{\n    bool result = true;\n    for(int i = 0; i < string.size();\
    \ i++)\n    {\n        if(string[i] == '[' && string[i+1] == '[' && string[i+2]\
    \ == '[' && string[i+3] == '[')\n        {\n            i += 4;\n            while(i\
    \ < string.size() && string[i] != ']')\n            {\n                i += 1;\n\
    \            }\n            i += 1;\n        }\n        else\n        {\n    \
    \        result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code works\
    \ fine for strings like
  "{\n    bool result = false;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        if(string[i] == '[')\n        {\n            bool found = false;\n\
    \            for(int j = i; j < string.length(); j++)\n            {\n       \
    \         if(string[j] == '[')\n                {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if(!found)\n            {\n                result = true;\n           \
    \     break;\n            }\n        }\n    }\n    return result;\n}", "{\n  \
    \  stack<char> stack;\n    bool result = false;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == '[')\n        {\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] == ']')\n        {\n            if(stack.size()\
    \ == 0)\n            {\n                result = true;\n                break;\n\
    \            }\n            else\n            {\n                char top = stack.top();\n\
    \                if(top == '[')\n                {\n                    stack.pop();\n\
    \                }\n                else if(top == ']')\n                {\n \
    \                   stack.pop();\n                }\n                else\n  \
    \              {\n                    result = true;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,stack,string |>\n<| c |>\nI believe this fails for `is_nested(\"\
    []]]]]]][[[[[]\")`\n<|/ c |>\n<| c |>\nYes, it fails for that case. Thanks for\
    \ pointing that out. I will edit my answer accordingly.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <stack>", "{\n\
    \    stack<char> brackets;\n    bool found = false;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == '[')\n        {\n            brackets.push(string[i]);\n\
    \        }\n        else if(string[i] == ']')\n        {\n            if(brackets.top()\
    \ == '[')\n            {\n                brackets.pop();\n            }\n   \
    \         else\n            {\n                found = true;\n               \
    \ break;\n            }\n        }\n    }\n    return found;\n}", "{\n    bool\
    \ result = true;\n    for(int i = 0; i < string.size(); i++)\n    {\n        if(string[i]\
    \ == '[')\n        {\n            for(int j = i; j < string.size(); j++)\n   \
    \         {\n                if(string[j] == '[')\n                {\n       \
    \             result = true;\n                    break;\n                }\n\
    \                else if(string[j] == ']')\n                {\n              \
    \      result = false;\n                    break;\n                }\n      \
    \      }\n        }\n    }\n    return result;\n}", "{\n    stack<char> brackets;\n\
    \    bool result = true;\n    for(int i = 0; i < string.size(); ++i)\n    {\n\
    \        if(string[i] == '[')\n        {\n            brackets.push('[');\n  \
    \      }\n        else if(string[i] == ']')\n        {\n            if(brackets.top()\
    \ == '[')\n            {\n                brackets.pop();\n            }\n   \
    \         else\n            {\n                result = false;\n             \
    \   break;\n            }\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,string |>\n<| c |>\nThis doesn't work. Try `is_nested(\"\

  "{\n    stack<char> brackets;\n    brackets.push('[');\n    brackets.push(']');\n\
    \    for(int i = 0; i < string.size(); ++i)\n    {\n        if(brackets.top()\
    \ == '[' && string[i] == '[')\n        {\n            brackets.push('[');\n  \
    \      }\n        else if(brackets.top() == ']' && string[i] == ']')\n       \
    \ {\n            brackets.pop();\n        }\n        else if(brackets.top() ==\
    \ '[' && string[i] == '[')\n        {\n            brackets.push('[');\n     \
    \   }\n        else if(brackets.top() == ']' && string[i] == ']')\n        {\n\
    \            brackets.pop();\n        }\n        else if(brackets.top() == '['\
    \ && string[i] == ']')\n        {\n            brackets.push(']');\n        }\n\
    \        else if(brackets.top() == ']' && string[i] == '[')\n        {\n     \
    \       brackets.pop();\n        }\n    }\n    return brackets.top() == '[';\n\
    }\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nI believe this fails\
    \ for `is_nested(\"[[]]\")`\n<|/ c |>\n<| c |>\nYes, I believe it does. I tested\
    \ it and it works. I added a test case to my answer.\n<|/ c |>\n<| c |>\nI believe\
    \ this fails for `is_nested(\"[][]\")`\n<|/ c |>\n<| c |>\nYes, I believe it does.\
    \ I tested it and it works. I added a test case to my answer.\n<|/ c |>\n<| c\
    \ |>\nI believe this fails for `is_nested(\"[]\")`\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "{\n    string brackets = \"[]\";\n    string bracketsNesting = \"[]\"\
    ;\n    string bracketsNestingNesting = \"[]\";\n    string bracketsNestingNestingNesting\
    \ = \"[]\";\n    string bracketsNestingNestingNestingNesting = \"[]\";\n    string\
    \ bracketsNestingNestingNestingNestingNesting = \"[]\";\n    string bracketsNestingNestingNestingNestingNestingNesting\
    \ = \"[]\";\n    string bracketsNestingNestingNestingNestingNestingNestingNesting\
    \ = \"[]\";\n    string bracketsNestingNestingNestingNestingNestingNestingNestingNesting\
    \ = \"[]\";\n    string bracketsNestingNestingNestingNestingNestingNestingNestingNesting\
    \ = \"[]\";\n    string bracketsNestingNestingNestingNestingNestingNestingNestingNestingNesting\
    \ = \"[]\";\n    string bracketsNestingNestingNestingNestingNestingNestingNestingNestingNestingNesting\
    \ = \"[]\";\n    string bracketsNestingNestingNestingNestingNestingNestingNestingNestingNestingNesting\
    \ = \"[]\";\n    string bracketsNestingNestingNestingNestingNestingNestingNestingNestingNestingNestingNesting\
    \ = \"[]\";\n    string bracketsNestingNestingNestingNestingNestingNestingNestingNestingNestingNestingNesting\
    \ = \"[]\";\n    string bracketsNestingNestingNestingNestingNestingNestingNestingNestingNestingNestingNesting\
    \ = \"[]\";\n    string bracketsNestingNestingNestingNestingNestingNestingNestingNestingNestingNestingNestingNesting\
    \ = \"[]\";\n    string bracketsNestingNestingNestingNestingNestingNest", "{\n\
    \    bool result = false;\n    stack<char> brackets;\n    for(auto c : string)\n\
    \    {\n        if(c == '[')\n            brackets.push(c);\n        else if(c\
    \ == ']')\n        {\n            if(brackets.top() == '[')\n            {\n \
    \               brackets.pop();\n            }\n            else\n           \
    \ {\n                result = true;\n                break;\n            }\n \
    \       }\n    }\n    return result;\n}", "{\n    stack<char> brackets;\n    bool\
    \ found = false;\n    for(int i = 0; i < string.length(); i++)\n    {\n      \
    \  if(string[i] == '[')\n        {\n            brackets.push('[');\n        }\n\
    \        else if(string[i] == ']')\n        {\n            if(brackets.top() ==\
    \ '[')\n            {\n                brackets.pop();\n            }\n      \
    \      else\n            {\n                found = true;\n                break;\n\
    \            }\n        }\n    }\n    return found;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. `is_nested
  "{\n    stack<char> stack;\n    stack<char> brackets;\n    bool found = false;\n\
    \    bool found2 = false;\n    bool found3 = false;\n    bool found4 = false;\n\
    \    bool found5 = false;\n    bool found6 = false;\n    bool found7 = false;\n\
    \    bool found8 = false;\n    bool found9 = false;\n    bool found10 = false;\n\
    \    bool found11 = false;\n    bool found12 = false;\n    bool found13 = false;\n\
    \    bool found14 = false;\n    bool found15 = false;\n    bool found16 = false;\n\
    \    bool found17 = false;\n    bool found18 = false;\n    bool found19 = false;\n\
    \    bool found20 = false;\n    bool found21 = false;\n    bool found22 = false;\n\
    \    bool found23 = false;\n    bool found24 = false;\n    bool found25 = false;\n\
    \    bool found26 = false;\n    bool found27 = false;\n    bool found28 = false;\n\
    \    bool found29 = false;\n    bool found30 = false;\n    bool found31 = false;\n\
    \    bool found32 = false;\n    bool found33 = false;\n    bool found34 = false;\n\
    \    bool found35 = false;\n    bool found36 = false;\n    bool found37 = false;\n\
    \    bool found38 = false;\n    bool found39 = false;\n    bool found40 = false;\n\
    \    bool found41 = false;\n    bool found42 = false;\n    bool found43 = false;\n\
    \    bool found44 = false;\n    bool found45 = false;\n    bool found46 = false;\n\
    \    bool found47 = false;\n    bool found48 = false;\n    bool found49 = false;\n\
    \    bool found50 = false;\n    bool found51 = false;\n    bool found52 = false;\n\
    \    bool found53 = false;\n    bool found54 = false;\n    bool found55 = false;\n\
    \    bool found56 = false;\n    bool found57 = false;\n    bool found58 = false;\n\
    \    bool found59 = false;\n    bool found60 = false;\n    bool found61 = false;\n\
    \    bool found62 = false;\n    bool found63 = false;\n    bool found64 = false;\n\
    \    bool found65 = false;\n    bool found66 = false;\n    bool found67 = false;\n\
    \    bool found68 = false;\n    bool found69 = false;\n    bool found70 = false;\n\
    \    bool found71 = false;\n    bool found72 = false;\n    bool found73 = false;\n\
    \    bool found74 = false;\n    bool found75 = false;\n    bool found76 = false;\n\
    \    bool found77 = false;\n    bool found78 = false;\n    bool found79 = false;\n\
    \    bool found80 = false;\n", "{\n    bool result = false;\n    stack<char> brackets;\n\
    \    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == '[')\n        {\n            brackets.push('[');\n        }\n        else\
    \ if(string[i] == ']')\n        {\n            if(brackets.top() == '[')\n   \
    \         {\n                brackets.pop();\n            }\n            else\n\
    \            {\n                result = true;\n                break;\n     \
    \       }\n        }\n    }\n    \n    return result;\n}", "{\n    stack<char>\
    \ brackets;\n    bool result = false;\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == '[')\n        {\n            brackets.push('[');\n\
    \        }\n        else if(string[i] == ']')\n        {\n            if(brackets.top()\
    \ == '[')\n            {\n                brackets.pop();\n            }\n   \
    \         else\n            {\n                result = true;\n              \
    \  break;\n            }\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <stack>\n#include <string>\nusing namespace std;", "{\n    stack<char> stack;\n\
    \    bool result = false;\n    for(int i = 0; i < string.size(); i++)\n    {\n\
    \        if(string[i] == '[')\n        {\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] == ']')\n        {\n            if(!stack.empty()\
    \ && stack.pop() == '[')\n            {\n                result = true;\n    \
    \        }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| a tags=c++,algorithm,string |>\nI wrote a recursive solution in c++.\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  stack<char> stack;\n    stack<char> open;\n    stack<char> close;\n    stack<char>\
    \ bracket;\n    bool found = false;\n    bool found2 = false;\n    bool found3\
    \ = false;\n    bool found4 = false;\n    bool found5 = false;\n    bool found6\
    \ = false;\n    bool found7 = false;\n    bool found8 = false;\n    bool found9\
    \ = false;\n    bool found10 = false;\n    bool found11 = false;\n    bool found12\
    \ = false;\n    bool found13 = false;\n    bool found14 = false;\n    bool found15\
    \ = false;\n    bool found16 = false;\n    bool found17 = false;\n    bool found18\
    \ = false;\n    bool found19 = false;\n    bool found20 = false;\n    bool found21\
    \ = false;\n    bool found22 = false;\n    bool found23 = false;\n    bool found24\
    \ = false;\n    bool found25 = false;\n    bool found26 = false;\n    bool found27\
    \ = false;\n    bool found28 = false;\n    bool found29 = false;\n    bool found30\
    \ = false;\n    bool found31 = false;\n    bool found32 = false;\n    bool found33\
    \ = false;\n    bool found34 = false;\n    bool found35 = false;\n    bool found36\
    \ = false;\n    bool found37 = false;\n    bool found38 = false;\n    bool found39\
    \ = false;\n    bool found40 = false;\n    bool found41 = false;\n    bool found42\
    \ = false;\n    bool found43 = false;\n    bool found44 = false;\n    bool found45\
    \ = false;\n    bool found46 = false;\n    bool found47 = false;\n    bool found48\
    \ = false;\n    bool found49 = false;\n    bool found50 = false;\n    bool found51\
    \ = false;\n    bool found52 = false;\n    bool found53 = false;\n    bool found54\
    \ = false;\n    bool found55 = false;\n    bool found56 = false;\n    bool found57\
    \ = false;\n    bool found58 = false;\n    bool found59 = false;\n    bool found60\
    \ = false;\n    bool found61 = false;\n    bool found62 = false;\n    bool found63\
    \ = false;\n    bool found64 = false;\n    bool found65 = false;\n    bool found66\
    \ = false;\n    bool found67 = false;\n    bool found68 = false;\n    bool found69\
    \ = false;\n    bool found70 = false;\n    bool found71 = false;\n    bool found72\
    \ = false;\n    bool found73 = false;\n    bool found74 = false;\n    bool found75\
    \ = false;\n    bool found76 = false;\n    bool found77 = false;\n    bool found78",
  "{\n    stack<char> s;\n    bool result = false;\n    for(int i = 0; i < string.size();\
    \ i++)\n    {\n        if(string[i] == '[')\n        {\n            s.push(string[i]);\n\
    \        }\n        else if(string[i] == ']')\n        {\n            if(s.top()\
    \ == '[')\n            {\n                s.pop();\n            }\n          \
    \  else\n            {\n                result = true;\n            }\n      \
    \  }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string,arrays |>\n\
    <| c |>\nThank you very much for your answer. Your code is very helpful and it\
    \ works perfectly. I am sorry that I cannot upvote your answer because I do not\
    \ have enough reputation. Thank you very much for your help.\n<|/ c |>\n<| c |>\n\
    No worries, glad I could help. :)\n<|/ c |>\n<| a tags=c++,string,arrays |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <stack>\nusing namespace\
    \ std;", "{\n    bool result = false;\n    stack<char> brackets;\n    \n    for(auto\
    \ c : string)\n    {\n        if(c == '[')\n        {\n            brackets.push(c);\n\
    \        }\n        else if(c == ']')\n        {\n            if(!brackets.empty())\n\
    \            {\n                if(brackets.top() == '[')\n                {\n\
    \                    brackets.pop();\n                }\n                else\n\
    \                {\n                    result = true;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    bool result = true;\n    stack<string> brackets;\n    brackets.push(string);\n\
    \    string bracket = brackets.top();\n    \n    for(int i = 0; i < bracket.length();\
    \ i++)\n    {\n        char c = bracket[i];\n        \n        if(c == '[' ||\
    \ c == '{' || c == '(')\n        {\n            brackets.push(bracket.substr(0,\
    \ i));\n        }\n        else if(c == ']' || c == '}' || c == ')')\n       \
    \ {\n            string bracket2 = brackets.top();\n            brackets.pop();\n\
    \            \n            if(bracket2.length() == 0)\n            {\n       \
    \         result = false;\n            }\n            else\n            {\n  \
    \              for(int j = 0; j < bracket2.length(); j++)\n                {\n\
    \                    char d = bracket2[j];\n                    \n           \
    \         if(d == '[' || d == '{' || d == '(')\n                    {\n      \
    \                  brackets.push(bracket2.substr(0, j));\n                   \
    \ }\n                    else if(d == ']' || d == '}' || d == ')')\n         \
    \           {\n                        string bracket3 = brackets.top();\n   \
    \                     brackets.pop();\n                        \n            \
    \            if(bracket3.length() == 0)\n                        {\n         \
    \                   result = false;\n                        }\n             \
    \           else\n                        {\n                            for(int\
    \ k = 0; k < bracket3.length(); k++)\n                            {\n        \
    \                        char e = bracket3[k];\n                             \
    \   \n                                if(e == '[' || e == '{' || e == '(')\n \
    \                               {\n                                    brackets.push(bracket3.substr(0,\
    \ k));\n                                }\n                                else\
    \ if(e == ']' || e == '}' || e == ')')\n                                {\n  \
    \                                  string bracket4 = brackets.top();\n       \
    \                             brackets.pop();\n                              \
    \      \n                                    if(bracket4.length() == 0)\n    \
    \                                {\n                                        result\
    \ = false;\n                                    }\n                          \
    \          else\n                                    {\n                     \
    \                   for(int l = 0; l < bracket4.length(); l++)\n             \
    \                           {\n                                            char\
    \ f = bracket4[l];\n                                            \n           \
    \                                 if(f == '[' || f == '{' || f == '(')\n     \
    \                                       {\n                                  \
    \              brackets.push(bracket4.substr(0, l));\n                       \
    \                     }\n                                            else if(f\
    \ == ']' || f == '}' || f == ')')\n                                          \
    \  {\n                                                string bracket5 = brackets.top();\n\
    \                                                brackets.pop();\n           \
    \                                     \n                                     \
    \           if(bracket5.length() == 0)\n                                     \
    \           {\n                                                    result = false;\n\
    \                                                }\n                         \
    \                       else\n                                               \
    \ {\n                                                    for(int m = 0; m < bracket5.length();\
    \ m++)\n                                                    {\n              \
    \                                          char g = bracket5[m];\n           \
    \                                             \n                             \
    \                           if(g == '[' || g", "{\n    bool result = true;\n \
    \   stack<string> brackets;\n    brackets.push(string);\n    string bracket;\n\
    \    while(brackets.size() > 0)\n    {\n        bracket = brackets.top();\n  \
    \      brackets.pop();\n        if(string.length() == 0)\n        {\n        \
    \    result = false;\n            break;\n        }\n        string sub = string.substr(0,\
    \ string.length() - bracket.length());\n        if(sub.length() == 0)\n      \
    \  {\n            result = false;\n            break;\n        }\n        string\
    \ bracket2 = bracket.substr(0, bracket.length() - sub.length());\n        if(bracket2.length()\
    \ == 0)\n        {\n            result = false;\n            break;\n        }\n\
    \        if(sub == bracket2)\n        {\n            string rest = string.substr(string.length()\
    \ - bracket.length());\n            if(bracket.length() == sub.length() && rest\
    \ == bracket)\n            {\n                brackets.push(sub);\n          \
    \  }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| c |>\nThis fails for `is_nested(\"[[]]\")` which should return true.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to account for\
    \ that case.\n<|/ c |>\n<| c |>\nThis fails for `is_nested
  "{\n    stack<char> stack;\n    bool result = false;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == '[')\n        {\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] == ']')\n        {\n            if(stack.empty())\n\
    \            {\n                result = true;\n                break;\n     \
    \       }\n            else\n            {\n                char c = stack.pop();\n\
    \                if(c == '[')\n                {\n                    stack.push(c);\n\
    \                }\n                else\n                {\n                \
    \    result = false;\n                    break;\n                }\n        \
    \    }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work. Try it with `is_nested
  "{\n    bool result = true;\n    for(int i = 0; i < string.size(); i++)\n    {\n\
    \        if(string[i] == '[')\n        {\n            for(int j = i; j < string.size();\
    \ j++)\n            {\n                if(string[j] == ']')\n                {\n\
    \                    result = result && (string[j-1] == '[');\n              \
    \      break;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    stack<char> brackets;\n    bool result = true;\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == '[')\n    \
    \    {\n            brackets.push('[');\n        }\n        else if(string[i]\
    \ == ']')\n        {\n            if(brackets.top() == '[')\n            {\n \
    \               brackets.pop();\n            }\n            else\n           \
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    stack<char> s;\n    bool result\
    \ = true;\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == '[')\n        {\n            s.push(string[i]);\n        }\n        else\
    \ if(string[i] == ']')\n        {\n            if(!s.empty() && s.top() == '[')\n\
    \            {\n                s.pop();\n            }\n            else\n  \
    \          {\n                result = false;\n                break;\n      \
    \      }\n        }\n    }\n    return result;\n}", "{\n    stack<char> s;\n \
    \   bool found = false;\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] == '[')\n        {\n            s.push(string[i]);\n   \
    \     }\n        else if(string[i] == ']')\n        {\n            if(!s.empty())\n\
    \            {\n                if(s.top() == '[')\n                {\n      \
    \              s.pop();\n                }\n                else\n           \
    \     {\n                    found = true;\n                    break;\n     \
    \           }\n            }\n        }\n    }\n    return found;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work. Try it on `\"[[]]\"`.\n<|/ c |>\n<| c |>\n\
    I tested it on \"[[]]\" and it returned true.\n<|/ c |>\n<| c |>\nIt returns true\
    \ for \"[[]]\" but false for \"[]]\".\n<|/ c |>\n<| c |>\nYes, I noticed that\
    \ and fixed it before you posted your comment. Thanks for pointing it out.\n<|/\
    \ c |>\n<| c |>\nI fixed it now. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "{\n    bool result = false;\n    stack<string> brackets;\n   \
    \ brackets.push(string);\n    string bracket;\n    while(!brackets.empty())\n\
    \    {\n        bracket = brackets.top();\n        brackets.pop();\n        for(int\
    \ i = 0; i < bracket.length(); i++)\n        {\n            char c = bracket[i];\n\
    \            if(c == '[')\n            {\n                brackets.push(bracket.substr(0,\
    \ i));\n            }\n            if(c == ']')\n            {\n             \
    \   brackets.pop();\n            }\n        }\n        if(bracket.length() > 0)\n\
    \        {\n            result = true;\n            break;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution,\
    \ however it fails on `is_nested
  "{\n    int brackets = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] == '[')\n            brackets++;\n        if(string[i] ==\
    \ ']')\n            brackets--;\n        if(string[i] == '[' && brackets == 0)\n\
    \            return true;\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI believe this would return true for \"[[[]]]\" which is not valid\n\
    <|/ c |>\n<| c |>\nI believe this would return true for \"[[[]]]\" which is not\
    \ valid\n<|/ c |>\n<| c |>\nYes, you are right. I missed that case. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| c |>\nI believe this would return true for \"\
    [[[]]]\" which is not valid\n<|/ c |>\n<| c |>\nI believe this would return true\
    \ for \"[[[]]]\" which is not valid\n<|/ c |>\n<| a tags=c++ |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    stack<char> s;\n\
    \    bool result = false;\n    for(auto c : string) \n    {\n        if(c == '[')\
    \ s.push(char(c));\n        else if(c == ']') \n        {\n            if(!s.empty()\
    \ && s.top() == '[') s.pop();\n            else result = true;\n        }\n  \
    \      else if(c == '[' || c == ']') \n        {\n            if(!s.empty() &&\
    \ s.top() == '[') s.pop();\n            else if(!s.empty() && s.top() == ']')\
    \ s.pop();\n            else s.push(char(c));\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like this solution, but I feel like it could\
    \ be improved by using a stack of `char`s instead of `string`s. That would make\
    \ it easier to check if a bracket is nested or not.\n<|/ c |>\n<| c |>\nYes, I\
    \ agree with you. I'll add that to the answer.\n<|/ c |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <stack>", "{\n\
    \    stack<char> s;\n    bool found = false;\n    bool bracket = false;\n    bool\
    \ opening = false;\n    bool closing = false;\n    bool open = false;\n    bool\
    \ close = false;\n    bool open2 = false;\n    bool close2 = false;\n    bool\
    \ open3 = false;\n    bool close3 = false;\n    bool open4 = false;\n    bool\
    \ close4 = false;\n    bool open5 = false;\n    bool close5 = false;\n    bool\
    \ open6 = false;\n    bool close6 = false;\n    bool open7 = false;\n    bool\
    \ close7 = false;\n    bool open8 = false;\n    bool close8 = false;\n    bool\
    \ open9 = false;\n    bool close9 = false;\n    bool open10 = false;\n    bool\
    \ close10 = false;\n    bool open11 = false;\n    bool close11 = false;\n    bool\
    \ open12 = false;\n    bool close12 = false;\n    bool open13 = false;\n    bool\
    \ close13 = false;\n    bool open14 = false;\n    bool close14 = false;\n    bool\
    \ open15 = false;\n    bool close15 = false;\n    bool open16 = false;\n    bool\
    \ close16 = false;\n    bool open17 = false;\n    bool close17 = false;\n    bool\
    \ open18 = false;\n    bool close18 = false;\n    bool open19 = false;\n    bool\
    \ close19 = false;\n    bool open20 = false;\n    bool close20 = false;\n    bool\
    \ open21 = false;\n    bool close21 = false;\n    bool open22 = false;\n    bool\
    \ close22 = false;\n    bool open23 = false;\n    bool close23 = false;\n    bool\
    \ open24 = false;\n    bool close24 = false;\n    bool open25 = false;\n    bool\
    \ close25 = false;\n    bool open26 = false;\n    bool close26 = false;\n    bool\
    \ open27 = false;\n    bool close27 = false;\n    bool open28 = false;\n    bool\
    \ close28 = false;\n    bool open29 = false;\n    bool close29 = false;\n    bool\
    \ open30 = false;\n    bool close30 = false;\n    bool open31 = false;\n    bool\
    \ close31 = false;\n    bool open32 = false;\n    bool close32 = false;\n    bool\
    \ open33 = false;\n    bool close33 = false;\n    bool open34 = false;\n    bool\
    \ close34 = false;\n    bool open35 = false;\n    bool close35 = false;\n    bool\
    \ open36 = false;\n    bool close36 = false;\n    bool open37 = false;\n    bool\
    \ close37 = false;\n    bool open38 = false;\n    bool close38 = false;\n    bool\
    \ open39 = false;\n    bool close39 = false;\n    bool open40 = false;\n    bool\
    \ close40 = false;\n    ", "{\n    stack<char> stack;\n    bool found = false;\n\
    \    for(auto c : string)\n    {\n        if(c == '[' || c == '{')\n        {\n\
    \            stack.push(c);\n        }\n        else if(c == ']' || c == '}')\n\
    \        {\n            if(stack.empty())\n            {\n                return\
    \ false;\n            }\n            else\n            {\n                char\
    \ top = stack.top();\n                if(top == '[' || top == '{')\n         \
    \       {\n                    stack.pop();\n                }\n             \
    \   else\n                {\n                    stack.pop();\n              \
    \      stack.pop();\n                }\n            }\n        }\n    }\n    return\
    \ stack.empty();\n}", "{\n    stack<char> brackets;\n    bool result = false;\n\
    \    \n    foreach(char c, string) \n    {\n        if(c == '[') \n        {\n\
    \            brackets.push(c);\n        }\n        else if(c == ']') \n      \
    \  {\n            if(brackets.top() == '[') \n            {\n                brackets.pop();\n\
    \            }\n            else \n            {\n                result = true;\n\
    \                break;\n            }\n        }\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| a dscore=0 |>\n<code>", "{\n\
    \    bool result = false;\n    stack<char> stack;\n    stack<char> open;\n   \
    \ stack<char> close;\n    \n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        if(string[i] == '[')\n        {\n            stack.push(string[i]);\n\
    \            open.push(string[i]);\n        }\n        else if(string[i] == ']')\n\
    \        {\n            char openChar = open.pop();\n            char closeChar\
    \ = close.pop();\n            if(openChar == '[' && closeChar == ']')\n      \
    \      {\n                stack.push(string[i]);\n            }\n            else\
    \ if(openChar == '[' && closeChar == '[')\n            {\n                stack.push(string[i]);\n\
    \            }\n            else if(openChar == '[' && closeChar == '{')\n   \
    \         {\n                stack.push(string[i]);\n            }\n         \
    \   else if(openChar == '{' && closeChar == '}')\n            {\n            \
    \    stack.push(string[i]);\n            }\n            else if(openChar == '{'\
    \ && closeChar == '[')\n            {\n                stack.push(string[i]);\n\
    \            }\n            else if(openChar == '{' && closeChar == '{')\n   \
    \         {\n                stack.push(string[i]);\n            }\n         \
    \   else if(openChar == '{' && closeChar == '[')\n            {\n            \
    \    stack.push(string[i]);\n            }\n            else if(openChar == '['\
    \ && closeChar == '[')\n            {\n                stack.push(string[i]);\n\
    \            }\n            else if(openChar == '[' && closeChar == '{')\n   \
    \         {\n                stack.push(string[i]);\n            }\n         \
    \   else if(openChar == '{' && closeChar == '{')\n            {\n            \
    \    stack.push(string[i]);\n            }\n            else if(openChar == '{'\
    \ && closeChar == '[')\n            {\n                stack.push(string[i]);\n\
    \            }\n            else if(openChar == '[' && closeChar == '[')\n   \
    \         {\n                stack.push(string[i]);\n            }\n         \
    \   else if(openChar == '{' && closeChar == '{')\n            {\n            \
    \    stack.push(string[i]);\n            }\n            else if(openChar == '{'\
    \ && closeChar == '[')\n            {\n                stack.push(string[i]);\n\
    \            }\n            else if(openChar == '[' && closeChar == '[')\n   \
    \         {\n                stack.push(string[i]);\n            }\n         \
    \   else if(openChar == '{' && closeChar == '{')\n            {\n            \
    \    stack.push(string[i]);\n            }\n            else if(openChar == '{'\
    \ && closeChar == '[')\n            {\n                stack.push(string[i]);\n\
    \            }\n            else if(openChar == '[' && closeChar == '[')\n   \
    \         {\n                stack.push(string[i]);\n            }\n         \
    \   else if(openChar == '{' && closeChar == '", "{\n    bool result = true;\n\
    \    stack<char> stack;\n    stack<char> openings;\n    stack<char> closings;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] ==\
    \ '[')\n        {\n            stack.push(string[i]);\n            openings.push(string[i]);\n\
    \        }\n        else if(string[i] == ']')\n        {\n            char opening\
    \ = openings.top();\n            char closing = string[i];\n            openings.pop();\n\
    \            closings.push(closing);\n            if(opening != closing)\n   \
    \         {\n                result = false;\n            }\n        }\n     \
    \   else\n        {\n            char opening = openings.top();\n            char\
    \ closing = closings.top();\n            openings.pop();\n            closings.pop();\n\
    \            if(opening != closing)\n            {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    bool result\
    \ = false;\n    stack<char> stack;\n    stack<char> brackets;\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == '[')\n    \
    \    {\n            stack.push(string[i]);\n            brackets.push(string[i]);\n\
    \        }\n        else if(string[i] == ']')\n        {\n            char c =\
    \ stack.pop();\n            char d = brackets.pop();\n            if(c == '['\
    \ && d != ']')\n            {\n                result = true;\n              \
    \  break;\n            }\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c++,algorithm,string |>\n<| c |>\nThis fails for `is_nested
  "{\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] ==\
    \ '[')\n        {\n            int j = i + 1;\n            while(j < string.length()\
    \ && string[j] != ']')\n                j++;\n            if(j == string.length())\n\
    \                return true;\n        }\n    }\n    return false;\n}\n</code>\n\
    <|/ a tags=c++,string,substring |>\n<| c |>\nThis doesn't work if the brackets\
    \ are nested more than once.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting it. The function returns true if the string contains at least one nested\
    \ bracket.\n<|/ c |>\n<| c |>\nI tested it before posting it. The function returns\
    \ true if the string contains at least one nested bracket.\n<|/ c |>\n<| c |>\n\
    I tested it before posting it. The function returns true if the string contains\
    \ at least one nested bracket.\n<|/ c |>\n<| c |>\nI tested it before posting\
    \ it. The function returns true if the string contains at least one nested bracket.\n\
    <|/ c |>\n<| a tags=c++,string,substring |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
