name: HumanEval_161_solve
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nYou are given a string s.\n \
  \   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n\
  \    otherwise keep it as it is.\n    If the string contains no letters, reverse\
  \ the string.\n    The function should return the resulted string.\n    Examples\n\
  \    >>> solve(\"1234\")\n    \"4321\"\n    >>> solve(\"ab\")\n    \"AB\"\n    >>>\
  \ solve(\"#a@C\")\n    \"#A@c\"\n    \n*/\nstring solve(string s) \n"
tests: "unittest\n{\n    alias candidate = solve;\n\n    assert(candidate(\"AsDf\"\
  ) == \"aSdF\");\n    assert(candidate(\"1234\") == \"4321\");\n    assert(candidate(\"\
  ab\") == \"AB\");\n    assert(candidate(\"#a@C\") == \"#A@c\");\n    assert(candidate(\"\
  #AsdfW^45\") == \"#aSDFw^45\");\n    assert(candidate(\"#6@2\") == \"2@6#\");\n\
  \    assert(candidate(\"#$a^D\") == \"#$A^d\");\n    assert(candidate(\"#ccc\")\
  \ == \"#CCC\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\nI didn't downvote, but I suspect it's because this doesn't answer the\
    \ question asked.\n<|/ c |>\n<| c |>\nI didn't downvote either, but this doesn't\
    \ answer the question asked.\n<|/ c |>\n<| c |>\nI didn't downvote either, but\
    \ this doesn't answer the question asked.\n<|/ c |>\n<| c |>\nI didn't downvote\
    \ either, but this doesn't answer the question asked.\n<|/ c |>\n<| c |>\nI didn't\
    \ downvote either, but this doesn't answer the question asked.\n<|/ c |>\n<| a\
    \ tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n \
    \   for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n \
    \       {\n            result += toUpper(s[i]);\n        }\n        else\n   \
    \     {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nI like your solution. Very concise and easy to understand.\
    \ Thanks.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        char c = s[i];\n        if(c == 'a' || c == 'A')\n    \
    \    {\n            result += 'A';\n        }\n        else if(c == 'b' || c ==\
    \ 'B')\n        {\n            result += 'B';\n        }\n        else if(c ==\
    \ 'c' || c == 'C')\n        {\n            result += 'C';\n        }\n       \
    \ else if(c == 'd' || c == 'D')\n        {\n            result += 'D';\n     \
    \   }\n        else if(c == 'e' || c == 'E')\n        {\n            result +=\
    \ 'E';\n        }\n        else if(c == 'f' || c == 'F')\n        {\n        \
    \    result += 'F';\n        }\n        else if(c == 'g' || c == 'G')\n      \
    \  {\n            result += 'G';\n        }\n        else if(c == 'h' || c ==\
    \ 'H')\n        {\n            result += 'H';\n        }\n        else if(c ==\
    \ 'i' || c == 'I')\n        {\n            result += 'I';\n        }\n       \
    \ else if(c == 'j' || c == 'J')\n        {\n            result += 'J';\n     \
    \   }\n        else if(c == 'k' || c == 'K')\n        {\n            result +=\
    \ 'K';\n        }\n        else if(c == 'l' || c == 'L')\n        {\n        \
    \    result += 'L';\n        }\n        else if(c == 'm' || c == 'M')\n      \
    \  {\n            result += 'M';\n        }\n        else if(c == 'n' || c ==\
    \ 'N')\n        {\n            result += 'N';\n        }\n        else if(c ==\
    \ 'o' || c == 'O')\n        {\n            result += 'O';\n        }\n       \
    \ else if(c == 'p' || c == 'P')\n        {\n            result += 'P';\n     \
    \   }\n        else if(c == 'q' || c == 'Q')\n        {\n            result +=\
    \ 'Q';\n        }\n        else if(c == 'r' || c == 'R')\n        {\n        \
    \    result += 'R';\n        }\n        else if(c == 's' || c == 'S')\n      \
    \  {\n            result += 'S';\n        }\n        else if(c == 't' || c ==\
    \ 'T')\n        {\n            result += 'T';\n        }\n        else if(c ==\
    \ 'u' || c == 'U')\n        {\n            result += 'U';\n        }\n       \
    \ else if(c == 'v' || c == 'V')\n        {\n            result += 'V';\n     \
    \   }\n        else if(c == 'w' || c == 'W')\n        {\n            result +=\
    \ 'W';\n        }\n        else if(c == 'x' || c == 'X", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isalpha(s[i]))\n\
    \        {\n            result += toupper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,string |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <cctype>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    map<char, char>\
    \ map;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isalpha(s[i]))\n\
    \        {\n            map[tolower(s[i])] = toupper(s[i]);\n        }\n     \
    \   else\n        {\n            map[s[i]] = s[i];\n        }\n    }\n    string\
    \ result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(map.count(s[i])\
    \ > 0)\n        {\n            result += map[s[i]];\n        }\n        else\n\
    \        {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n\
    \            result += toUpper(s[i]);\n        }\n        else\n        {\n  \
    \          result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work if\
    \ `s` is `\"#a@C\"`\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ it. It works.\n<|/ c |>\n<| c |>\nIt doesn't work if `s` is `\"#a@C\"`\n<|/\
    \ c |>\n<| c |>\nIt works. I tested it before posting it. It works.\n<|/ c |>\n\
    <| c |>\nIt doesn't work if `s` is `\"#a@C\"`\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            string temp = s[i];\n            s[i] = toUpper(s[i]);\n\
    \            s[i] = toLower(s[i]);\n            s[i] = temp;\n        }\n    }\n\
    \    \n    if(s.length() == 0)\n    {\n        return s;\n    }\n    \n    return\
    \ reverse(s);\n}", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\nI believe this solution will fail for input like \"#a@C\" where it will\
    \ return \"#A@c\"\n<|/ c |>\n<| c |>\nYes, you are right. My solution was based\
    \ on his example. I'll edit my answer.\n<|/ c |>\n<| c |>\nI believe this solution\
    \ will fail for input like \"#a@C\" where it will return \"#A@c\"\n<|/ c |>\n\
    <| c |>\nYes, you are right. My solution was based on his example. I'll edit my\
    \ answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n \
    \       if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++ |>\n<| c |>\nI like\
    \ your solution but I think it would be more efficient to reverse the string in\
    \ place instead of creating a new string and copying over the old string. Also,\
    \ `isLetter` could be replaced by `isalpha`.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, my solution was more of a \"proof of concept\" than a solution. Thanks\
    \ for the suggestion.\n<|/ c |>\n<| c |>\nI agree with you, my solution was more\
    \ of a \"proof of concept\" than a solution. Thanks for the suggestion.\n<|/ c\
    \ |>\n<| a tags=string,c++ |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n \
    \   for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n \
    \       {\n            result += toUpper(s[i]);\n        }\n        else\n   \
    \     {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=c++,string |>\n<| c |>\nThanks so much for your help. I appreciate\
    \ it a lot.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\nThis doesn't work if there are multiple letters in the string. Try it\
    \ with `solve(\"aba\")`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I edited\
    \ my answer to fix that issue.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    int len = s.length();\n    \n    for(int i = 0; i < len; i++)\n\
    \    {\n        if(isLetter(s[i]))\n        {\n            s[i] = toUpper(s[i]);\n\
    \        }\n        else\n        {\n            s[i] = toLower(s[i]);\n     \
    \   }\n    }\n    \n    return s;\n}", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n\
    \            result += toUpper(s[i]);\n        }\n        else\n        {\n  \
    \          result += s[i];\n        }\n    }\n    return result;\n}", "{\n   \
    \ string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n    \
    \    if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n   \
    \     }\n        else\n        {\n            result += s[i];\n        }\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        char c = s[i];\n        if(isLetter(c))\n        {\n  \
    \          string temp = toUpper(s[i]);\n            result += temp;\n       \
    \ }\n        else\n        {\n            result += s[i];\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    int len = s.length();\n    for(int i = 0; i < len;\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            s[i] = toUpper(s[i]);\n\
    \        }\n        else\n        {\n            s[i] = toLower(s[i]);\n     \
    \   }\n    }\n    string res = \"\";\n    for(int i = 0; i < len; i++)\n    {\n\
    \        res += s[i];\n    }\n    return res;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\nThis doesn't work if the string contains numbers. Try it with `solve(\"\
    1234\")`.\n<|/ c |>\n<| c |>\nI tested it and it works. I even tested it with\
    \ `solve(\"a1b2c3d4e5\")` and it worked. Can you give me an example where it fails?\n\
    <|/ c |>\n<| c |>\nIt fails for me with `solve(\"a1b2c3d4e5\")`.\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works. I even tested it with `solve(\"a1b2c3d4e5\"\
    )` and it worked. Can you give me an example where it fails?\n<|/ c |>\n<| c |>\n\
    It fails for me with `solve(\"a1b2c3d4e5\")`.\n<|/ c |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isalpha(s[i]))\n        {\n            result += toupper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\nThis doesn't work. Try it with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works. I even tested it on `solve(\"ab\")` before I posted\
    \ my answer. Did you try it?\n<|/ c |>\n<| c |>\nYes, I did. `solve(\"ab\")` returns\
    \ `\"AB\"`, not `\"aB\"`.\n<|/ c |>\n<| c |>\nI tested it again and it works now.\
    \ Thanks for pointing that out. I'll edit my answer now.\n<|/ c |>\n<| c |>\n\
    I tested it again and it works now. Thanks for pointing that out. I'll edit my\
    \ answer now.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++){\n        if(isLetter(s[i])){\n            result\
    \ += toUpper(s[i]);\n        }else{\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work if the string contains any non-letters.\n<|/ c |>\n<| c |>\nI thought the\
    \ question was about reversing letters, not reversing numbers. I updated my answer\
    \ to include a solution for letters.\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n \
    \       if(isalpha(s[i]))\n        {\n            result += toupper(s[i]);\n \
    \       }\n        else\n        {\n            result += s[i];\n        }\n \
    \   }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThank you so much! I\
    \ really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! Glad I could help.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\nThis doesn't work if there are multiple letters in the string. For example,\
    \ `solve(\"aba\")` returns `\"Baa\"`, which is not the correct answer.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if there are multiple letters in the string.\
    \ For example, `solve(\"aba\")` returns `\"Baa\"`, which is not the correct answer.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are multiple letters in the string.\
    \ For example, `solve(\"aba\")` returns `\"Baa\"`, which is not the correct answer.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are multiple letters in the string.\
    \ For example, `solve(\"aba\")` returns `\"Baa\"`, which is not the correct answer.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are multiple letters in the string.\
    \ For example, `solve(\"aba\")` returns `\"Baa\"`, which is not the correct answer.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\n#include <cctype>", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        if(c ==\
    \ 'a' || c == 'A')\n        {\n            result += toupper(c);\n        }\n\
    \        else if(c == 'b' || c == 'B')\n        {\n            result += tolower(c);\n\
    \        }\n        else\n        {\n            result += c;\n        }\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThis doesn't\
    \ work if the string contains more than one letter. For example, `solve(\"ab\"\
    )` returns `\"Ab\"` instead of `\"ba\"`.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ Thanks for pointing that out. I've updated my answer to include a solution that\
    \ should work for multiple letters.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        if(isalpha(s[i]))\n        {\n            string temp = toupper(s[i]);\n\
    \            result += temp;\n        }\n        else\n        {\n           \
    \ result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work if the string contains numbers. Try it with `solve(\"\
    1234\")`.\n<|/ c |>\n<| c |>\nYes, I forgot about that. Thanks for pointing it\
    \ out. I've updated my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isalpha(s[i]))\n        {\n \
    \           result += toupper(s[i]);\n        }\n        else\n        {\n   \
    \         result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work if the string contains any non-letters.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't require any loops.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if the string contains any non-letters.\n<|/ c |>\n\
    <| c |>\nI added a solution that doesn't require any loops.\n<|/ c |>\n<| c |>\n\
    This doesn't work if the string contains any non-letters.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n \
    \       char c = s[i];\n        if(c == 'a' || c == 'A')\n        {\n        \
    \    result += 'A';\n        }\n        else if(c == 'b' || c == 'B')\n      \
    \  {\n            result += 'B';\n        }\n        else if(c == 'c' || c ==\
    \ 'C')\n        {\n            result += 'C';\n        }\n        else if(c ==\
    \ 'd' || c == 'D')\n        {\n            result += 'D';\n        }\n       \
    \ else if(c == 'e' || c == 'E')\n        {\n            result += 'E';\n     \
    \   }\n        else if(c == 'f' || c == 'F')\n        {\n            result +=\
    \ 'F';\n        }\n        else if(c == 'g' || c == 'G')\n        {\n        \
    \    result += 'G';\n        }\n        else if(c == 'h' || c == 'H')\n      \
    \  {\n            result += 'H';\n        }\n        else if(c == 'i' || c ==\
    \ 'I')\n        {\n            result += 'I';\n        }\n        else if(c ==\
    \ 'j' || c == 'J')\n        {\n            result += 'J';\n        }\n       \
    \ else if(c == 'k' || c == 'K')\n        {\n            result += 'K';\n     \
    \   }\n        else if(c == 'l' || c == 'L')\n        {\n            result +=\
    \ 'L';\n        }\n        else if(c == 'm' || c == 'M')\n        {\n        \
    \    result += 'M';\n        }\n        else if(c == 'n' || c == 'N')\n      \
    \  {\n            result += 'N';\n        }\n        else if(c == 'o' || c ==\
    \ 'O')\n        {\n            result += 'O';\n        }\n        else if(c ==\
    \ 'p' || c == 'P')\n        {\n            result += 'P';\n        }\n       \
    \ else if(c == 'q' || c == 'Q')\n        {\n            result += 'Q';\n     \
    \   }\n        else if(c == 'r' || c == 'R')\n        {\n            result +=\
    \ 'R';\n        }\n        else if(c == 's' || c == 'S')\n        {\n        \
    \    result += 'S';\n        }\n        else if(c == 't' || c == 'T')\n      \
    \  {\n            result += 'T';\n        }\n        else if(c == 'u' || c ==\
    \ 'U')\n        {\n            result += 'U';\n        }\n        else if(c ==\
    \ 'v' || c == 'V')\n        {\n            result += 'V';\n        }\n       \
    \ else if(c == 'w' || c == 'W')\n        {\n            result += 'W';\n     \
    \   }\n        else if(c == 'x' || c == 'X", "{\n    string result = \"\";\n \
    \   for(int i = 0; i < s.length(); i++)\n    {\n        if(isalpha(s[i]))\n  \
    \      {\n            result += toupper(s[i]);\n        }\n        else\n    \
    \    {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if the string contains\
    \ only letters.\n<|/ c |>\n<| c |>\nI didn't know that `isalpha` was case sensitive.\
    \ Thanks for pointing that out. I've updated my answer.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if the string contains only letters.\n<|/ c |>\n<| c |>\nI didn't\
    \ know that `isalpha` was case sensitive. Thanks for pointing that out. I've updated\
    \ my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n\
    \            result += toUpper(s[i]);\n        }\n        else\n        {\n  \
    \          result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\n\
    import java.io.*;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isalpha(s[i]))\n        {\n            result += toupper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    int len = s.length();\n    string result = \"\";\n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(s[i] == 'a')\n        {\n\
    \            result += \"A\";\n        }\n        else if(s[i] == 'A')\n     \
    \   {\n            result += \"a\";\n        }\n        else if(s[i] == 'b')\n\
    \        {\n            result += \"B\";\n        }\n        else if(s[i] == 'B')\n\
    \        {\n            result += \"b\";\n        }\n        else if(s[i] == 'c')\n\
    \        {\n            result += \"C\";\n        }\n        else if(s[i] == 'C')\n\
    \        {\n            result += \"c\";\n        }\n        else if(s[i] == 'd')\n\
    \        {\n            result += \"D\";\n        }\n        else if(s[i] == 'D')\n\
    \        {\n            result += \"d\";\n        }\n        else if(s[i] == 'e')\n\
    \        {\n            result += \"E\";\n        }\n        else if(s[i] == 'E')\n\
    \        {\n            result += \"e\";\n        }\n        else if(s[i] == 'f')\n\
    \        {\n            result += \"F\";\n        }\n        else if(s[i] == 'F')\n\
    \        {\n            result += \"f\";\n        }\n        else if(s[i] == 'g')\n\
    \        {\n            result += \"G\";\n        }\n        else if(s[i] == 'G')\n\
    \        {\n            result += \"g\";\n        }\n        else if(s[i] == 'h')\n\
    \        {\n            result += \"H\";\n        }\n        else if(s[i] == 'H')\n\
    \        {\n            result += \"h\";\n        }\n        else if(s[i] == 'i')\n\
    \        {\n            result += \"I\";\n        }\n        else if(s[i] == 'I')\n\
    \        {\n            result += \"i\";\n        }\n        else if(s[i] == 'j')\n\
    \        {\n            result += \"J\";\n        }\n        else if(s[i] == 'J')\n\
    \        {\n            result += \"j\";\n        }\n        else if(s[i] == 'k')\n\
    \        {\n            result += \"K\";\n        }\n        else if(s[i] == 'K')\n\
    \        {\n            result += \"k\";\n        }\n        else if(s[i] == 'l')\n\
    \        {\n            result += \"L\";\n        }\n        else if(s[i] == 'L')\n\
    \        {\n            result += \"l\";\n        }\n        else if(s[i] == 'm')\n\
    \        {\n            result += \"M\";\n        }\n        else if(s[i] == 'M')\n\
    \        {\n            result += \"m\";\n        }\n        else if(s[i] == 'n')\n\
    \        {\n            result += \"N\";\n        }\n        else if(s[i] == 'N')\n\
    \        {\n            result += \"n\";\n        }\n        else if(s[i] == 'o')\n\
    \        {\n            result += \"O\";\n        }\n        else if(s[i] == 'O",
  "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work if there are multiple letters in the string. For example, if `s = \"ab\"\
    `, then `solve(s)` returns `\"Aa\"`.\n<|/ c |>\n<| c |>\nYes, you are right. My\
    \ mistake. I'll fix it.\n<|/ c |>\n<| c |>\nI fixed the problem. Thanks for pointing\
    \ out.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    map<int,int> m;\n    for(int\
    \ i=0;i<s.length();i++)\n    {\n        if(isalpha(s[i]))\n        {\n       \
    \     int k = toupper(s[i]);\n            m[k] = m[k] + 1;\n        }\n      \
    \  else\n        {\n            m[s[i]] = m[s[i]] - 1;\n        }\n    }\n   \
    \ string ans = \"\";\n    for(int i=0;i<s.length();i++)\n    {\n        if(m[i]>0)\n\
    \        {\n            ans = ans + s[i];\n        }\n    }\n    return ans;\n\
    }\n</code>\n<|/ a tags=string,algorithm,c++ |>\n<| c |>\nI believe this solution\
    \ is wrong. Try `solve(\"ab\")`\n<|/ c |>\n<| c |>\nYes, you are right. My mistake.\
    \ Thank you. Fixed it.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work if\
    \ the string contains any non-letters.\n<|/ c |>\n<| c |>\nI thought the question\
    \ was about reversing only letters. I added a note about that.\n<|/ c |>\n<| c\
    \ |>\nThe question states that \"The function should return the resulted string.\"\
    \ Your code doesn't do that.\n<|/ c |>\n<| c |>\nI added the missing return statement.\n\
    <|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++ |>\n<| c |>\n`isLetter` should be `isAlpha`\n\
    <|/ c |>\n<| c |>\n`isLetter` should be `isAlpha`\n<|/ c |>\n<| c |>\n`isLetter`\
    \ should be `isAlpha`\n<|/ c |>\n<| c |>\n`isLetter` should be `isAlpha`\n<|/\
    \ c |>\n<| c |>\n`isLetter` should be `isAlpha`\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n   \
    \     if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n  \
    \      }\n        else\n        {\n            result += s[i];\n        }\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nIt does work. Try it\
    \ with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `solve(\"\
    ab\")`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `solve(\"ab\")`.\n<|/ c\
    \ |>\n<| c |>\nIt does work. Try it with `solve(\"ab\")`.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n \
    \       if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,arrays |>\n<| a\
    \ tags=string,c++,arrays |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n \
    \   for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n \
    \       {\n            result += toUpper(s[i]);\n        }\n        else\n   \
    \     {\n            result += s[i];\n        }\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your answer! I appreciate\
    \ it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;\nstring solve(const string &s) {\n    string result = \"\"\
    ;\n    for(int i = 0; i < s.length(); i++) {\n        if(isLetter(s[i])) {\n \
    \           result += toUpper(s[i]);\n        } else {\n            result +=\
    \ s[i];\n        }\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Can you please\
    \ explain why you used `isLetter` instead of `isAlpha`?\n<|/ c |>\n<| c |>\n`isAlpha`\
    \ checks if the character is a letter, `isLetter` checks if the character is a\
    \ letter. `isAlpha` checks if the character is a letter, `isLetter` checks if\
    \ the character is a letter. `isAlpha` checks if the character is a letter, `isLetter`\
    \ checks if the character is a letter. `isAlpha` checks if the character is a\
    \ letter, `isLetter` checks if the character is a letter.\n<|/ c |>\n<| c |>\n\
    Thanks for your explanation. Can you please explain why you used `isLetter` instead\
    \ of `isAlpha`?\n<|/ c |>\n<| c |>\n`isAlpha` checks if the character is a letter,\
    \ `isLetter` checks if the character is a letter. `isAlpha` checks if the character\
    \ is a letter, `isLetter` checks if the character is a letter. `isAlpha` checks\
    \ if the character is a letter, `isLetter` checks if the character is a letter.\
    \ `isAlpha` checks if the character is a letter, `isLetter` checks if the character\
    \ is a letter.\n<|/ c |>\n<| c |>\nThanks for your explanation. Can you please\
    \ explain why you used `isLetter` instead of `isAlpha`?\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nimport\
    \ java.util.*;\nimport java.lang.*;\nimport java.io.*;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++ |>\n<| c |>\nThis doesn't work if the string\
    \ contains numbers. For example, if `s = \"#a@C\"`, then `solve(s)` returns `\"\
    #A@c\"`, which is not the correct result.\n<|/ c |>\n<| c |>\nI didn't see that\
    \ requirement in the question. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n\
    I added a solution that doesn't require the string to be reversed at all.\n<|/\
    \ c |>\n<| c |>\nI added a solution that doesn't require the string to be reversed\
    \ at all.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require the string\
    \ to be reversed at all.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n\
    \            result += toUpper(s[i]);\n        }\n        else\n        {\n  \
    \          result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `solve(\"ab\")`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I tested it with `solve(\"ab\")`\
    \ and the output is `AB`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `solve(\"\
    ab\")`.\n<|/ c |>\n<| c |>\nI tested it and it works. I tested it with `solve(\"\
    ab\")` and the output is `AB`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with\
    \ `solve(\"ab\")`.\n<|/ c |>\n<| a tags=string,c++ |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n\
    \            result += toUpper(s[i]);\n        }\n        else\n        {\n  \
    \          result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work for \"#a@C\"\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting. What is the problem?\n\
    <|/ c |>\n<| c |>\nIt doesn't work for \"#a@C\" because \"#a@C\" doesn't contain\
    \ any letters. \"#a@C\" contains \"#a@\" which contains \"a@\" which contains\
    \ \"@C\" which contains \"C\".\n<|/ c |>\n<| c |>\nYes, I see that now. Thanks\
    \ for pointing that out. I've updated my answer.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer with another solution that doesn't require any loops.\n<|/ c |>\n\
    <| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n \
    \   for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n \
    \       {\n            result += toUpper(s[i]);\n        }\n        else\n   \
    \     {\n            result += s[i];\n        }\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        if(isalpha(s[i]))\n        {\n            string temp = toupper(s[i]);\n\
    \            result += temp;\n        }\n        else\n        {\n           \
    \ result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nI believe this would fail for `solve(\"ab\")` because `toupper`\
    \ would return `A` instead of `a`.\n<|/ c |>\n<| c |>\nYes, you are right. I've\
    \ edited my answer to fix this issue.\n<|/ c |>\n<| c |>\nThis fails for `solve(\"\
    ab\")` because `toupper` would return `A` instead of `a`.\n<|/ c |>\n<| c |>\n\
    Yes, you are right. I've edited my answer to fix this issue.\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n\
    \            result += toUpper(s[i]);\n        }\n        else\n        {\n  \
    \          result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `solve(\"ab\")`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `solve(\"ab\")`.\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work. Try it with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nIt does work. Try it\
    \ with `solve(\"ab\")`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n\
    \            result += toUpper(s[i]);\n        }\n        else\n        {\n  \
    \          result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c++,algorithm |>\n<| c |>\nThis code doesn't work if you input\
    \ a number like \"123abc\".\n<|/ c |>\n<| c |>\nI fixed the code so it works now.\
    \ Thanks for pointing out.\n<|/ c |>\n<| c |>\nThis code doesn't work if you input\
    \ a number like \"123abc\".\n<|/ c |>\n<| c |>\nI fixed the code so it works now.\
    \ Thanks for pointing out.\n<|/ c |>\n<| c |>\nThis code doesn't work if you input\
    \ a number like \"123abc\".\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    int len = s.length();\n    string result = \"\";\n    for(int\
    \ i = 0; i < len; i++)\n    {\n        if(isLetter(s[i]))\n        {\n       \
    \     result += toUpper(s[i]);\n        }\n        else\n        {\n         \
    \   result += s[i];\n        }\n    }\n    \n    if(result.length() == 0)\n  \
    \  {\n        result = toUpper(result);\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    for(int i =\
    \ 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n    \
    \        result += toUpper(s[i]);\n        }\n        else\n        {\n      \
    \      result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=string,c++,algorithm |>\n<| c |>\nI believe this solution will fail for\
    \ input like \"#a@C\"\n<|/ c |>\n<| c |>\nYes, you are right. My solution was\
    \ for \"#a@C\" input. Thanks for pointing out.\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your answer. Could you please explain why you used `isLetter` instead of `isAlpha`?\n\
    <|/ c |>\n<| c |>\n`isLetter` checks if the character is a letter, `isAlpha` checks\
    \ if the character is alphabetic. `isLetter` returns true if the character is\
    \ a letter, `isAlpha` returns true if the character is alphabetic.\n<|/ c |>\n\
    <| c |>\nThanks for your explanation. Could you please explain why you used `isLetter`\
    \ instead of `isAlpha`?\n<|/ c |>\n<| c |>\n`isLetter` checks if the character\
    \ is a letter, `isAlpha` checks if the character is alphabetic. `isLetter` returns\
    \ true if the character is a letter, `isAlpha` returns true if the character is\
    \ alphabetic.\n<|/ c |>\n<| c |>\nThanks for your explanation. Could you please\
    \ explain why you used `isLetter` instead of `isAlpha`?\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    int len = s.length();\n    \n    for(int i = 0; i <\
    \ len; i++)\n    {\n        if(isalpha(s[i]))\n        {\n            s[i] = toupper(s[i]);\n\
    \        }\n        else\n        {\n            s[i] = tolower(s[i]);\n     \
    \   }\n    }\n    \n    return s;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try it on `\"#a@C\"`.\n<|/ c |>\n<| c |>\nIt works. I tested it\
    \ on `\"#a@C\"`. Please see my updated answer.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. Try it on `\"#a@C\"`.\n<|/ c |>\n<| c |>\nIt works. I tested it on `\"\
    #a@C\"`. Please see my updated answer.\n<|/ c |>\n<| c |>\nIt doesn't work. Try\
    \ it on `\"#a@C\"`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    int len\
    \ = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n\
    \    {\n        if(isLetter(s[i]))\n        {\n            string temp = toUpper(s[i]);\n\
    \            result += temp;\n        }\n        else\n        {\n           \
    \ result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n\
    <| a tags=string,c++ |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    for(int i=0;i<s.length();i++)\n\
    \    {\n        if(isalpha(s[i]))\n        {\n            string temp=s[i];\n\
    \            s[i]=toupper(s[i]);\n            s[i]=tolower(s[i]);\n          \
    \  s[i]=temp;\n        }\n    }\n    for(int i=0;i<s.length();i++)\n    {\n  \
    \      if(isalpha(s[i]))\n        {\n            string temp=s[i];\n         \
    \   s[i]=tolower(s[i]);\n            s[i]=toupper(s[i]);\n            s[i]=temp;\n\
    \        }\n    }\n    return s;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis does not work. `solve(\"ab\")` returns `\"#a@C\"`, not `\"\
    AB\"`.\n<|/ c |>\n<| c |>\nI tested it and it works. I used the code from your\
    \ question. Maybe you used a different code?\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works. I used the code from your question. Maybe you used a different code?\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the code from your question.\
    \ Maybe you used a different code?\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I used the code from your question. Maybe you used a different code?\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isalpha(s[i]))\n        {\n \
    \           result += toupper(s[i]);\n        }\n        else\n        {\n   \
    \         result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work if you have a string\
    \ like \"#a@C\"\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting.\
    \ What do you mean by \"doesn't work\"? It gives the correct result for that input.\n\
    <|/ c |>\n<| c |>\nI mean it gives the wrong result for that input. Try it yourself\
    \ with that input.\n<|/ c |>\n<| c |>\nI tested it myself and it gives the correct\
    \ result. Can you give an example where it gives the wrong result?\n<|/ c |>\n\
    <| c |>\nI tested it myself and it gives the correct result. Can you give an example\
    \ where it gives the wrong result?\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    int len = s.length();\n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(isLetter(s[i]))\n       \
    \ {\n            s[i] = toUpper(s[i]);\n        }\n        else\n        {\n \
    \           s[i] = toLower(s[i]);\n        }\n    }\n    return s;\n}\n</code>\n\
    <|/ a tags=string,c++,arrays |>\n<| a tags=string,c++,arrays |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++,arrays |>\n<| a tags=string,c++,arrays |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len;\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            string temp = s[i];\n            s[i] = toUpper(s[i]);\n\
    \            s[i] = toLower(s[i]);\n            s[i] = temp;\n        }\n    }\n\
    \    if(len == 0)\n    {\n        return s;\n    }\n    string result = \"\";\n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(isLetter(s[i]))\n       \
    \ {\n            result += s[i];\n        }\n        else\n        {\n       \
    \     result += toUpper(s[i]);\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;\nstring reverse(string s)\n{\n    string result = \"\";\n\
    \    for(int i = 0; i < s.length(); i++)\n    {\n        if(isalpha(s[i]))\n \
    \       {\n            result += toupper(s[i]);\n        }\n        else\n   \
    \     {\n            result += s[i];\n        }\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        if(isLetter(s[i]))\n        {\n            string temp = s[i];\n    \
    \        s[i] = toUpper(s[i]);\n            s[i] = toLower(s[i]);\n          \
    \  s[i] = temp;\n        }\n    }\n    for(int i = 0; i < s.length(); i++)\n \
    \   {\n        if(!isLetter(s[i]))\n        {\n            string temp = s[i];\n\
    \            s[i] = toLower(s[i]);\n            s[i] = toUpper(s[i]);\n      \
    \      s[i] = temp;\n        }\n    }\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        if(isLetter(s[i]))\n        {\n            result += s[i];\n \
    \       }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;\nstring solve(const\
    \ string &s) {\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(isLetter(s[i])) {\n            string temp = s[i];\n    \
    \        s[i] = toUpper(s[i]);\n            s[i] = toLower(s[i]);\n          \
    \  s[i] = temp;\n        }\n    }\n    for(int i = 0; i < s.length(); i++) {\n\
    \        if(!isLetter(s[i])) {\n            string temp = s[i];\n            s[i]\
    \ = toLower(s[i]);\n            s[i] = toUpper(s[i]);\n            s[i] = temp;\n\
    \        }\n    }\n    for(int i = 0; i < s.length(); i++) {\n        if(isLetter(s[i]))\
    \ {\n            result += s[i];\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n \
    \       if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++ |>\n<| c |>\nThis\
    \ doesn't work if the string contains numbers. Try it with `solve(\"123\")`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the code accordingly.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the string contains numbers. Try it with\
    \ `solve(\"123\")`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated\
    \ the code accordingly.\n<|/ c |>\n<| c |>\nThis doesn't work if the string contains\
    \ numbers. Try it with `solve(\"123\")`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        if(c ==\
    \ 'a' || c == 'A')\n        {\n            result += toupper(c);\n        }\n\
    \        else if(c == 'b' || c == 'B')\n        {\n            result += tolower(c);\n\
    \        }\n        else if(c == '#' || c == '@')\n        {\n            result\
    \ += c;\n        }\n        else\n        {\n            result += c;\n      \
    \  }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Scanner;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isalpha(s[i]))\n        {\n \
    \           result += toupper(s[i]);\n        }\n        else\n        {\n   \
    \         result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\npublic class\
    \ ReverseString\n{\n    public static void main(String args[])\n    {\n      \
    \  Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter the\
    \ String\");\n        String str = sc.nextLine();\n        System.out.println(\"\
    Reverse the String\");\n        System.out.println(reverse(str));\n    }\n   \
    \ public static String reverse(String str)\n    {\n        int len = str.length();\n\
    \        StringBuffer sb = new StringBuffer();\n        for(int i=len-1;i>=0;i--)\n\
    \        {\n            sb.append(str.charAt(i));\n        }\n        return sb.toString();\n\
    \    }\n}\n</code>\n<|/ a tags=string,java |>\n<| a |>\n<code>\nimport java.util.Scanner;",
  "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        if(isalpha(s[i]))\n        {\n            result += toupper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,arrays |>\n<| c\
    \ |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| c\
    \ |>\nYou're welcome. Don't forget to accept the answer if it solved your problem.\n\
    <|/ c |>\n<| a tags=string,c++,arrays |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n\
    \            result += toUpper(s[i]);\n        }\n        else\n        {\n  \
    \          result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\nimport java.util.*;\nimport java.lang.*;\n\
    import java.io.*;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>\nusing\
    \ namespace std;", "{\n    int len = s.length();\n    \n    for(int i = 0; i <\
    \ len; i++)\n    {\n        if(s[i] == 'a' || s[i] == 'A')\n        {\n      \
    \      s[i] = toupper(s[i]);\n        }\n        else if(s[i] == 'b' || s[i] ==\
    \ 'B')\n        {\n            s[i] = tolower(s[i]);\n        }\n        else\
    \ if(s[i] == 'c' || s[i] == 'C')\n        {\n            s[i] = toupper(s[i]);\n\
    \        }\n        else if(s[i] == 'd' || s[i] == 'D')\n        {\n         \
    \   s[i] = tolower(s[i]);\n        }\n        else if(s[i] == 'e' || s[i] == 'E')\n\
    \        {\n            s[i] = toupper(s[i]);\n        }\n        else if(s[i]\
    \ == 'f' || s[i] == 'F')\n        {\n            s[i] = tolower(s[i]);\n     \
    \   }\n        else if(s[i] == 'g' || s[i] == 'G')\n        {\n            s[i]\
    \ = toupper(s[i]);\n        }\n        else if(s[i] == 'h' || s[i] == 'H')\n \
    \       {\n            s[i] = tolower(s[i]);\n        }\n        else if(s[i]\
    \ == 'i' || s[i] == 'I')\n        {\n            s[i] = toupper(s[i]);\n     \
    \   }\n        else if(s[i] == 'j' || s[i] == 'J')\n        {\n            s[i]\
    \ = tolower(s[i]);\n        }\n        else if(s[i] == 'k' || s[i] == 'K')\n \
    \       {\n            s[i] = toupper(s[i]);\n        }\n        else if(s[i]\
    \ == 'l' || s[i] == 'L')\n        {\n            s[i] = tolower(s[i]);\n     \
    \   }\n        else if(s[i] == 'm' || s[i] == 'M')\n        {\n            s[i]\
    \ = toupper(s[i]);\n        }\n        else if(s[i] == 'n' || s[i] == 'N')\n \
    \       {\n            s[i] = tolower(s[i]);\n        }\n        else if(s[i]\
    \ == 'o' || s[i] == 'O')\n        {\n            s[i] = toupper(s[i]);\n     \
    \   }\n        else if(s[i] == 'p' || s[i] == 'P')\n        {\n            s[i]\
    \ = tolower(s[i]);\n        }\n        else if(s[i] == 'q' || s[i] == 'Q')\n \
    \       {\n            s[i] = toupper(s[i]);\n        }\n        else if(s[i]\
    \ == 'r' || s[i] == 'R')\n        {\n            s[i] = tolower(s[i]);\n     \
    \   }\n        else if(s[i] == 's' || s[i] == 'S')\n        {\n            s[i]\
    \ = toupper(s[i]);\n        }\n        else if(s[i] == 't' || s[i] == 'T')\n \
    \       {\n            s[i] = tolower(s[i]);\n        }\n        else if(s[i]\
    \ == 'u' || s[i] == 'U')\n        {\n            s[i] = toupper(s[i]);\n     \
    \   }\n        else if(s[i] == 'v' || s[i] == 'V')\n        {\n            s[i]\
    \ = tolower(s[i]);\n        }\n        else if(s[i] == 'w' || s[i] == 'W')\n \
    \       {\n            s[i] = toupper(s[i]);\n        }\n        ", "{\n    int\
    \ len = s.length();\n    string ans = \"\";\n    for(int i = 0; i < len; i++)\n\
    \    {\n        if(isLetter(s[i]))\n        {\n            ans += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            ans += s[i];\n        }\n   \
    \ }\n    if(ans.length() == 0)\n    {\n        ans = s;\n    }\n    return ans;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n\
    \        if(c == 'a' || c == 'A')\n        {\n            result += toupper(c);\n\
    \        }\n        else if(c == 'b' || c == 'B')\n        {\n            result\
    \ += tolower(c);\n        }\n        else\n        {\n            result += c;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThanks so much for the answer! I really appreciate it. I will try\
    \ this out and see how it goes.\n<|/ c |>\n<| c |>\nThis doesn't work for \"#a@C\"\
    \n<|/ c |>\n<| c |>\nI tested it and it works. I tested it on \"#a@C\" and the\
    \ output is \"#A@c\"\n<|/ c |>\n<| c |>\nI tested it on \"#a@C\" and the output\
    \ is \"#A@c\"\n<|/ c |>\n<| c |>\nI tested it on \"#a@C\" and the output is \"\
    #A@c\"\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        if(isalpha(s[i]))\n        {\n            result += toupper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\nThis doesn't work if the string contains numbers. Try it with `solve(\"\
    123\")`.\n<|/ c |>\n<| c |>\nI fixed the issue you mentioned\n<|/ c |>\n<| c |>\n\
    `isalpha` doesn't check for numbers. `isdigit` does.\n<|/ c |>\n<| c |>\nI fixed\
    \ the issue you mentioned\n<|/ c |>\n<| c |>\nI fixed the issue you mentioned\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n\
    \            result += toUpper(s[i]);\n        }\n        else\n        {\n  \
    \          result += s[i];\n        }\n    }\n    return result;\n}", "{\n   \
    \ string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n    \
    \    if(isalpha(s[i]))\n        {\n            char c = toupper(s[i]);\n     \
    \       result += c;\n        }\n        else\n        {\n            result +=\
    \ s[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        char c = s[i];\n        if(c == 'a' || c == 'A')\n        {\n\
    \            result += 'A';\n        }\n        else if(c == 'b' || c == 'B')\n\
    \        {\n            result += 'B';\n        }\n        else if(c == 'c' ||\
    \ c == 'C')\n        {\n            result += 'C';\n        }\n        else if(c\
    \ == 'd' || c == 'D')\n        {\n            result += 'D';\n        }\n    \
    \    else if(c == 'e' || c == 'E')\n        {\n            result += 'E';\n  \
    \      }\n        else if(c == 'f' || c == 'F')\n        {\n            result\
    \ += 'F';\n        }\n        else if(c == 'g' || c == 'G')\n        {\n     \
    \       result += 'G';\n        }\n        else if(c == 'h' || c == 'H')\n   \
    \     {\n            result += 'H';\n        }\n        else if(c == 'i' || c\
    \ == 'I')\n        {\n            result += 'I';\n        }\n        else if(c\
    \ == 'j' || c == 'J')\n        {\n            result += 'J';\n        }\n    \
    \    else if(c == 'k' || c == 'K')\n        {\n            result += 'K';\n  \
    \      }\n        else if(c == 'l' || c == 'L')\n        {\n            result\
    \ += 'L';\n        }\n        else if(c == 'm' || c == 'M')\n        {\n     \
    \       result += 'M';\n        }\n        else if(c == 'n' || c == 'N')\n   \
    \     {\n            result += 'N';\n        }\n        else if(c == 'o' || c\
    \ == 'O')\n        {\n            result += 'O';\n        }\n        else if(c\
    \ == 'p' || c == 'P')\n        {\n            result += 'P';\n        }\n    \
    \    else if(c == 'q' || c == 'Q')\n        {\n            result += 'Q';\n  \
    \      }\n        else if(c == 'r' || c == 'R')\n        {\n            result\
    \ += 'R';\n        }\n        else if(c == 's' || c == 'S')\n        {\n     \
    \       result += 'S';\n        }\n        else if(c == 't' || c == 'T')\n   \
    \     {\n            result += 'T';\n        }\n        else if(c == 'u' || c\
    \ == 'U')\n        {\n            result += 'U';\n        }\n        else if(c\
    \ == 'v' || c == 'V')\n        {\n            result += 'V';\n        }\n    \
    \    else if(c == 'w' || c == 'W')\n        {\n            result += 'W';\n  \
    \      }\n        else if(c == 'x' || c == 'X", "{\n    string result = \"\";\n\
    \    for(int i = 0; i < s.length(); i++)\n    {\n        if(isalpha(s[i]))\n \
    \       {\n            string temp = toupper(s[i]);\n            result += temp;\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        char c = s[i];\n        if(c == 'a' || c == 'A')\n    \
    \    {\n            result += toupper(s[i]);\n        }\n        else if(c ==\
    \ 'b' || c == 'B')\n        {\n            result += tolower(s[i]);\n        }\n\
    \        else if(c == '#' || c == '@')\n        {\n            result += s[i];\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\nThis doesn't work for `solve(\"ab#a@C\")`\n<|/ c |>\n<| c |>\nI didn't\
    \ see that requirement. I've updated my answer accordingly.\n<|/ c |>\n<| c |>\n\
    This doesn't work for `solve(\"ab#a@C\")`\n<|/ c |>\n<| c |>\nI didn't see that\
    \ requirement. I've updated my answer accordingly.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for `solve(\"ab#a@C\")`\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        if(isalpha(s[i]))\n        {\n            string temp = toupper(s[i]);\n\
    \            result += temp;\n        }\n        else\n        {\n           \
    \ result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nI guess you meant `result += temp;` instead of `result += s[i];`\n\
    <|/ c |>\n<| c |>\nYes, I meant `result += temp;` instead of `result += s[i];`\n\
    <|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <cctype>", "{\n    int len = s.length();\n    char c;\n \
    \   for(int i=0;i<len;i++)\n    {\n        c = s[i];\n        if(c>='a' && c<='z')\n\
    \        {\n            s[i] = c-32;\n        }\n        else if(c>='A' && c<='Z')\n\
    \        {\n            s[i] = c+32;\n        }\n    }\n    return s;\n}\n</code>\n\
    <|/ a tags=string,c++,algorithm |>\n<| c |>\nThanks for your answer. I tried your\
    \ solution and it works perfectly. However I still don't understand why my code\
    \ doesn't work. Can you please explain why my code doesn't work?\n<|/ c |>\n<|\
    \ c |>\nI added an explanation to the answer.\n<|/ c |>\n<| c |>\nThanks for your\
    \ explanation. I understand now why my code doesn't work. However I still don't\
    \ understand why my code doesn't work. Can you please explain why my code doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        if(isalpha(s[i]))\n        {\n            result += toupper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThe question is tagged\
    \ C++, so why not use `std::string`?\n<|/ c |>\n<| c |>\nI didn't know that string\
    \ was a template in C++. Thanks for the tip!\n<|/ c |>\n<| c |>\nI didn't know\
    \ that string was a template in C++. Thanks for the tip!\n<|/ c |>\n<| c |>\n\
    I didn't know that string was a template in C++. Thanks for the tip!\n<|/ c |>\n\
    <| c |>\nI didn't know that string was a template in C++. Thanks for the tip!\n\
    <|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(isLetter(s[i])){\n\
    \            result += toUpper(s[i]);\n        }\n        else{\n            result\
    \ += s[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\nThis doesn't work if the string contains more than one letter.\
    \ For example, `solve(\"ab\")` returns `\"A@b\"` instead of `\"AB\"`.\n<|/ c |>\n\
    <| c |>\nYes, you are right. I just fixed it. Thanks.\n<|/ c |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n \
    \       if(isalpha(s[i]))\n        {\n            result += toupper(s[i]);\n \
    \       }\n        else\n        {\n            result += s[i];\n        }\n \
    \   }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            string temp\
    \ = toUpper(s[i]);\n            result += temp;\n        }\n        else\n   \
    \     {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=c++,string |>\n<| c |>\nThe question asks for an algorithm,\
    \ not an implementation. Also, your solution doesn't work for `solve(\"ab\")`.\n\
    <|/ c |>\n<| c |>\nI agree with you, my solution was to give a solution that is\
    \ easy to understand. Your solution is better and more efficient.\n<|/ c |>\n\
    <| c |>\nI agree with you, my solution was to give a solution that is easy to\
    \ understand. Your solution is better and more efficient.\n<|/ c |>\n<| c |>\n\
    I agree with you, my solution was to give a solution that is easy to understand.\
    \ Your solution is better and more efficient.\n<|/ c |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isalpha(s[i]))\n        {\n            result += toupper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really\
    \ appreciate it!\n<|/ c |>\n<| a tags=string,c++ |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        if(c ==\
    \ 'a' || c == 'A')\n        {\n            result += 'A';\n        }\n       \
    \ else if(c == 'b' || c == 'B')\n        {\n            result += 'B';\n     \
    \   }\n        else if(c == 'c' || c == 'C')\n        {\n            result +=\
    \ 'C';\n        }\n        else if(c == 'd' || c == 'D')\n        {\n        \
    \    result += 'D';\n        }\n        else if(c == 'e' || c == 'E')\n      \
    \  {\n            result += 'E';\n        }\n        else if(c == 'f' || c ==\
    \ 'F')\n        {\n            result += 'F';\n        }\n        else if(c ==\
    \ 'g' || c == 'G')\n        {\n            result += 'G';\n        }\n       \
    \ else if(c == 'h' || c == 'H')\n        {\n            result += 'H';\n     \
    \   }\n        else if(c == 'i' || c == 'I')\n        {\n            result +=\
    \ 'I';\n        }\n        else if(c == 'j' || c == 'J')\n        {\n        \
    \    result += 'J';\n        }\n        else if(c == 'k' || c == 'K')\n      \
    \  {\n            result += 'K';\n        }\n        else if(c == 'l' || c ==\
    \ 'L')\n        {\n            result += 'L';\n        }\n        else if(c ==\
    \ 'm' || c == 'M')\n        {\n            result += 'M';\n        }\n       \
    \ else if(c == 'n' || c == 'N')\n        {\n            result += 'N';\n     \
    \   }\n        else if(c == 'o' || c == 'O')\n        {\n            result +=\
    \ 'O';\n        }\n        else if(c == 'p' || c == 'P')\n        {\n        \
    \    result += 'P';\n        }\n        else if(c == 'q' || c == 'Q')\n      \
    \  {\n            result += 'Q';\n        }\n        else if(c == 'r' || c ==\
    \ 'R')\n        {\n            result += 'R';\n        }\n        else if(c ==\
    \ 's' || c == 'S')\n        {\n            result += 'S';\n        }\n       \
    \ else if(c == 't' || c == 'T')\n        {\n            result += 'T';\n     \
    \   }\n        else if(c == 'u' || c == 'U')\n        {\n            result +=\
    \ 'U';\n        }\n        else if(c == 'v' || c == 'V')\n        {\n        \
    \    result += 'V';\n        }\n        else if(c == 'w' || c == 'W')\n      \
    \  {\n            result += 'W';\n        }\n        else if(c == 'x' || c ==\
    \ 'X", "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        char c = s[i];\n        if(c == 'A' || c == 'a') \n        {\n\
    \            result += c;\n        }\n        else if(c == 'B' || c == 'b')\n\
    \        {\n            result += c;\n        }\n        else if(c == 'C' || c\
    \ == 'c')\n        {\n            result += c;\n        }\n        else if(c ==\
    \ 'D' || c == 'd')\n        {\n            result += c;\n        }\n        else\
    \ if(c == 'E' || c == 'e')\n        {\n            result += c;\n        }\n \
    \       else if(c == 'F' || c == 'f')\n        {\n            result += c;\n \
    \       }\n        else if(c == 'G' || c == 'g')\n        {\n            result\
    \ += c;\n        }\n        else if(c == 'H' || c == 'h')\n        {\n       \
    \     result += c;\n        }\n        else if(c == 'I' || c == 'i')\n       \
    \ {\n            result += c;\n        }\n        else if(c == 'J' || c == 'j')\n\
    \        {\n            result += c;\n        }\n        else if(c == 'K' || c\
    \ == 'k')\n        {\n            result += c;\n        }\n        else if(c ==\
    \ 'L' || c == 'l')\n        {\n            result += c;\n        }\n        else\
    \ if(c == 'M' || c == 'm')\n        {\n            result += c;\n        }\n \
    \       else if(c == 'N' || c == 'n')\n        {\n            result += c;\n \
    \       }\n        else if(c == 'O' || c == 'o')\n        {\n            result\
    \ += c;\n        }\n        else if(c == 'P' || c == 'p')\n        {\n       \
    \     result += c;\n        }\n        else if(c == 'Q' || c == 'q')\n       \
    \ {\n            result += c;\n        }\n        else if(c == 'R' || c == 'r')\n\
    \        {\n            result += c;\n        }\n        else if(c == 'S' || c\
    \ == 's')\n        {\n            result += c;\n        }\n        else if(c ==\
    \ 'T' || c == 't')\n        {\n            result += c;\n        }\n        else\
    \ if(c == 'U' || c == 'u')\n        {\n            result += c;\n        }\n \
    \       else if(c == 'V' || c == 'v')\n        {\n            result += c;\n \
    \       }\n        else if(c == 'W' || c == 'w')\n        {\n            result\
    \ += c;\n        }\n        else if(c == 'X' || c == 'x')\n        {\n       \
    \     result += c;\n        }\n        else if(c == 'Y' || c == 'y')\n       \
    \ {\n            result += c;\n        }\n        else if(c == 'Z' || c == 'z')\n\
    \        {\n            result += c;\n        }\n        else\n        {\n   \
    \         result += c;", "{\n    int len = s.length();\n    string result = \"\
    \";\n    for(int i = 0; i < len; i++)\n    {\n        if(isLetter(s[i]))\n   \
    \     {\n            result += toUpper(s[i]);\n        }\n        else\n     \
    \   {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n\
    \            result += toUpper(s[i]);\n        }\n        else\n        {\n  \
    \          result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work if the string contains\
    \ any non-letters.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if the string contains any non-letters. Try\
    \ it with `solve(\"a#bC\")`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting.\n<|/ c |>\n<| c |>\nIt doesn't work if the string contains any non-letters.\
    \ Try it with `solve(\"a#bC\")`.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n   \
    \     if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n  \
    \      }\n        else\n        {\n            result += s[i];\n        }\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < s.length(); i++){\n       \
    \ if(isLetter(s[i])){\n            result += toUpper(s[i]);\n        }else{\n\
    \            result += s[i];\n        }\n    }\n    for(int i = 0; i < s.length();\
    \ i++){\n        if(!isLetter(s[i])){\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++){\n\
    \        if(isalpha(s[i])){\n            result += toupper(s[i]);\n        }\n\
    \        else{\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work if\
    \ the string is empty or contains only letters.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting it. I will edit my answer to include a test case.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if the string is empty or contains only letters.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if the string is empty or contains only letters.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if the string is empty or contains only letters.\n\
    <|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++){\n        if(isLetter(s[i])){\n            result\
    \ += toUpper(s[i]);\n        }\n        else{\n            result += s[i];\n \
    \       }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26839532)\n<|/ c |>\n<| c |>\nI thought\
    \ this was an answer. He asked for help with his code. He gave the code he wrote\
    \ and asked for help with his code. He gave the code he wrote and asked for help\
    \ with his code. He gave the code he wrote and asked for help with his code. He\
    \ gave the code he wrote and asked for help with his code. He gave the code he\
    \ wrote and asked for help with his code. He gave the code he wrote and asked\
    \ for help with his code. He gave the code he wrote and asked for help with his\
    \ code. He gave the code he wrote and asked for help with his code. He gave the\
    \ code he wrote and asked for help with his code. He gave the code he wrote and\
    \ asked for help with his code. He gave the code he wrote and asked for help with\
    \ his code. He gave the code he wrote and asked for help with his code. He gave\
    \ the code he wrote and asked for help with his code. He gave the code he wrote\
    \ and asked for help with his code. He gave the code he wrote and asked for help\
    \ with his code. He gave the code he wrote and asked for help with his code. He\
    \ gave the code he wrote and asked for help with his code. He gave the code he\
    \ wrote and asked for help with his code. He gave the code he wrote and as", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n \
    \       if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\nI like the idea of using recursion to solve this problem. Thanks!\n<|/\
    \ c |>\n<| c |>\nThis solution doesn't work if you have a string like \"#a@C\"\
    \n<|/ c |>\n<| c |>\n: It does. I tested it before posting it.\n<|/ c |>\n<| c\
    \ |>\n: It doesn't work if you have a string like \"#a@C\"\n<|/ c |>\n<| c |>\n\
    : It doesn't work if you have a string like \"#a@C\"\n<|/ c |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    using namespace std;", "{\n    int len = s.length();\n    char c = s[0];\n   \
    \ string result = \"\";\n    for(int i = 1; i < len; i++)\n    {\n        if(s[i]\
    \ == c)\n        {\n            result += toupper(c);\n        }\n        else\n\
    \        {\n            result += c;\n        }\n        c = s[i];\n    }\n  \
    \  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i <\
    \ len; i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result\
    \ += toUpper(s[i]);\n        }\n        else\n        {\n            result +=\
    \ s[i];\n        }\n    }\n    if(len == 0)\n    {\n        return result;\n \
    \   }\n    for(int i = 0; i < len; i++)\n    {\n        if(isLetter(s[i]))\n \
    \       {\n            result += toUpper(s[i]);\n        }\n        else\n   \
    \     {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work. Try\
    \ `solve(\"ab\")`\n<|/ c |>\n<| c |>\nIt works. I tested it. `solve(\"ab\")` returns\
    \ `\"AB\"`\n<|/ c |>\n<| c |>\nIt doesn't work. Try `solve(\"ab\")`\n<|/ c |>\n\
    <| c |>\nIt works. I tested it. `solve(\"ab\")` returns `\"AB\"`\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work. Try `solve(\"ab\")`\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n}",
  "{\n    int len = s.length();\n    char c = s[0];\n    string result = \"\";\n \
    \   for(int i = 1; i < len; i++)\n    {\n        if(s[i] == c)\n        {\n  \
    \          result += toupper(c);\n        }\n        else\n        {\n       \
    \     result += c;\n        }\n        c = s[i];\n    }\n    result += c;\n  \
    \  return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis\
    \ doesn't work if the string contains more than one letter. For example, \"ab\"\
    \ returns \"aB\".\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ it. I will edit my answer to include a test case.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if the string contains more than one letter. For example, \"ab\" returns\
    \ \"aB\".\n<|/ c |>\n<| c |>\nI tested it before posting it. I will edit my answer\
    \ to include a test case.\n<|/ c |>\n<| c |>\nIt doesn't work if the string contains\
    \ more than one letter. For example, \"ab\" returns \"aB\".\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    int len = s.length();\n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(isLetter(s[i]))\n       \
    \ {\n            string temp = toUpper(s[i]);\n            s[i] = toLower(s[i]);\n\
    \            s[i] = temp;\n        }\n    }\n    string result = \"\";\n    for(int\
    \ i = 0; i < len; i++)\n    {\n        if(isLetter(s[i]))\n        {\n       \
    \     result += s[i];\n        }\n        else\n        {\n            result\
    \ += s[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++\
    \ |>\n<| c |>\nThis doesn't work if the string contains only letters.\n<|/ c |>\n\
    <| c |>\nIt works perfectly for me. Can you give an example where it fails?\n\
    <|/ c |>\n<| c |>\nIt fails when the string contains only letters. Try it on \"\
    a\".\n<|/ c |>\n<| c |>\nI tested it on \"a\" and it works perfectly. Can you\
    \ give an example where it fails?\n<|/ c |>\n<| c |>\nIt fails when the string\
    \ contains only letters. Try it on \"a\".\n<|/ c |>\n<| a tags=string,c++ |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    for(int i =\
    \ 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n    \
    \        result += toUpper(s[i]);\n        }\n        else\n        {\n      \
    \      result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c++,string,algorithm |>\n<| c |>\nThis doesn't work. Try `solve(\"ab\"\
    )`.\n<|/ c |>\n<| c |>\nYes, I forgot to add that case. Thanks for pointing out.\n\
    <|/ c |>\n<| c |>\nThis doesn't work. Try `solve(\"ab\")`.\n<|/ c |>\n<| c |>\n\
    Yes, I forgot to add that case. Thanks for pointing out.\n<|/ c |>\n<| c |>\n\
    This doesn't work. Try `solve(\"ab\")`.\n<|/ c |>\n<| a tags=c++,string,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n \
    \       if(isLetter(s[i]))\n        {\n            string temp = toUpper(s[i]);\n\
    \            result += temp;\n        }\n        else\n        {\n           \
    \ result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=string,c++ |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThis\
    \ doesn't work. Try it with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nIt works. I tested\
    \ it before posting. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it myself and\
    \ it doesn't work. Try it with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nI tested it\
    \ myself and it works. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it myself\
    \ and it works. Try it yourself.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n \
    \       if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThanks\
    \ for your answer. Your code works fine for small strings, but for large strings\
    \ it takes too much time to execute. Do you know any way to make it faster?\n\
    <|/ c |>\n<| c |>\nI added a faster solution\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Your code works fine for small strings, but for large strings it takes\
    \ too much time to execute. Do you know any way to make it faster?\n<|/ c |>\n\
    <| c |>\nI added a faster solution\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Your code works fine for small strings, but for large strings it takes too much\
    \ time to execute. Do you know any way to make it faster?\n<|/ c |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    for(int i = 0; i < s.length(); i++)\n    {\n      \
    \  if(isLetter(s[i]))\n        {\n            s[i] = toUpper(s[i]);\n        }\n\
    \        else\n        {\n            s[i] = toLower(s[i]);\n        }\n    }\n\
    \    \n    return s;\n}", "{\n    int len = s.length();\n    for(int i = 0; i\
    \ < len; i++)\n    {\n        if(isLetter(s[i]))\n        {\n            s[i]\
    \ = toUpper(s[i]);\n        }\n        else\n        {\n            s[i] = toLower(s[i]);\n\
    \        }\n    }\n    return s;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\nThanks for your answer. Can you please explain me how you did this \"\
    if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n        }\n\
    \        else\n        {\n            result += s[i];\n        }\"\n<|/ c |>\n\
    <| c |>\n`isLetter` checks if the character is a letter. `toUpper` converts a\
    \ letter to uppercase and `toLower` converts a letter to lowercase. `result +=\
    \ toUpper(s[i]);` converts the character to uppercase and appends it to the result\
    \ string. `result += s[i];` appends the character to the result string. `isLetter`\
    \ checks if the character is a letter. `toUpper` converts a letter to uppercase\
    \ and `toLower` converts a letter to lowercase. `result += toUpper(s[i]);` converts\
    \ the character to uppercase and appends it to the result string. `result += s[i];`\
    \ appends the character to the result string. `isLetter` checks if the character\
    \ is a letter. `toUpper` converts a letter to uppercase and `toLower` converts\
    \ a letter to lowercase. `result += toUpper(s[i]);` converts the character to\
    \ uppercase and appends it to the result string. `result += s[i];` appends the\
    \ character to the result string.\n<|/ c |>\n<| c |>\nThanks again. Can you please\
    \ explain me how you did this \"if(isLetter(s[i]))\n        {\n            result\
    \ += toUpper(s[i]);\n        }\n        else\n        {\n            result +=\
    \ s[i];\n        }\"\n<|/ c |>\n<| c |>\n`isLetter` checks if the character is\
    \ a letter. `toUpper` converts a letter to uppercase and `toLower` converts a\
    \ letter to lowercase. `result += toUpper(s[i]);` converts the character to uppercase\
    \ and appends it to the result string. `result += s[i];` appends the character\
    \ to the result string. `isLetter` checks if the character is a letter. `toUpper`\
    \ converts a letter to uppercase and `toLower` converts a letter to lowercase.\
    \ `result += toUpper(s[i]);` converts the character to uppercase and appends it\
    \ to the result string. `result += s[i];` appends the character to the result\
    \ string.\n<|/ c |>\n<| c |>\nThanks again. Can ", "{\n    string result = \"\"\
    ;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++,arrays |>\n<| c |>\nThank you so much for your\
    \ help! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,arrays |>\n<| c\
    \ |>\nThank you so much for this. I really appreciate it.\n<|/ c |>\n<| c |>\n\
    I tried to run this code, but I got this error \"error: invalid conversion from\
    \ 'char' to 'const char*' [-fpermissive]\" on the line \"result += toUpper(s[i]);\"\
    \n<|/ c |>\n<| c |>\nI fixed the error, but now it says \"error: invalid conversion\
    \ from 'char' to 'const char*' [-fpermissive]\" on the line \"result += toUpper(s[i]);\"\
    \n<|/ c |>\n<| c |>\nI fixed the error, but now it says \"error: invalid conversion\
    \ from 'char' to 'const char*' [-fpermissive]\" on the line \"result += toUpper(s[i]);\"\
    \n<|/ c |>\n<| c |>\nI fixed the error, but now it says \"error: invalid conversion\
    \ from 'char' to 'const char*' [-fpermissive]\" on the line \"result += toUpper(s[i]);\"\
    \n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <cctype>", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThank\
    \ you very much for your answer. Your code is very helpful and I learned a lot\
    \ from it. I appreciate your help.\n<|/ c |>\n<| c |>\nYou're welcome. Glad I\
    \ could help. If you found my answer helpful, please consider accepting it by\
    \ clicking the check mark next to my answer. Thanks!\n<|/ c |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    int len = s.length();\n    char c;\n    string result = \"\";\n    for(int\
    \ i = 0; i < len; i++)\n    {\n        c = s[i];\n        if(c == 'A')\n     \
    \   {\n            result += 'a';\n        }\n        else if(c == 'a')\n    \
    \    {\n            result += 'A';\n        }\n        else if(c == '#')\n   \
    \     {\n            result += '#';\n        }\n        else if(c == '@')\n  \
    \      {\n            result += '@';\n        }\n        else if(c == 'C')\n \
    \       {\n            result += 'c';\n        }\n        else if(c == 'c')\n\
    \        {\n            result += 'C';\n        }\n        else if(c == 'B')\n\
    \        {\n            result += 'b';\n        }\n        else if(c == 'b')\n\
    \        {\n            result += 'B';\n        }\n        else if(c == 'D')\n\
    \        {\n            result += 'd';\n        }\n        else if(c == 'd')\n\
    \        {\n            result += 'D';\n        }\n        else if(c == 'F')\n\
    \        {\n            result += 'f';\n        }\n        else if(c == 'f')\n\
    \        {\n            result += 'F';\n        }\n        else if(c == 'G')\n\
    \        {\n            result += 'g';\n        }\n        else if(c == 'g')\n\
    \        {\n            result += 'G';\n        }\n        else if(c == 'H')\n\
    \        {\n            result += 'h';\n        }\n        else if(c == 'h')\n\
    \        {\n            result += 'H';\n        }\n        else if(c == 'I')\n\
    \        {\n            result += 'i';\n        }\n        else if(c == 'i')\n\
    \        {\n            result += 'I';\n        }\n        else if(c == 'J')\n\
    \        {\n            result += 'j';\n        }\n        else if(c == 'j')\n\
    \        {\n            result += 'J';\n        }\n        else if(c == 'K')\n\
    \        {\n            result += 'k';\n        }\n        else if(c == 'k')\n\
    \        {\n            result += 'K';\n        }\n        else if(c == 'L')\n\
    \        {\n            result += 'l';\n        }\n        else if(c == 'l')\n\
    \        {\n            result += 'L';\n        }\n        else if(c == 'M')\n\
    \        {\n            result += 'm';\n        }\n        else if(c == 'm')\n\
    \        {\n            result += 'M';\n        }\n        else if(c == 'N')\n\
    \        {\n            result += 'n';\n        }\n        else if(c == 'n')\n\
    \        {\n            result += 'N';\n        }\n        else if(c == 'O')\n\
    \        {\n            result += 'o';\n", "{\n    string result = \"\";\n   \
    \ for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n   \
    \     {\n            result += toUpper(s[i]);\n        }\n        else\n     \
    \   {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic String reverseString(String\
    \ s) {\n    StringBuilder sb = new StringBuilder();\n    char[] chars = s.toCharArray();\n\
    \    for (int i = chars.length - 1; i >= 0; i--) {\n        sb.append(chars[i]);\n\
    \    }\n    return sb.toString();\n}\n</code>\n<|/ a tags=string,java |>\n<| c\
    \ |>\nWhile this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=string,java |>\n<code>\npublic String reverse(String s) {\n\
    \    StringBuilder sb = new StringBuilder();\n    char[] chars = s.toCharArray();\n\
    \    for (int i = chars.length - 1; i >= 0; i--) {\n        sb.append(chars[i]);\n\
    \    }\n    return sb.toString();\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\npublic String reverse(String s) {\n    StringBuilder sb = new StringBuilder();\n\
    \    char[] chars = s.toCharArray();\n    for (int i = chars.length - 1; i >=\
    \ 0; i--) {\n        sb.append(chars[i]);\n    }\n    return sb.toString();\n\
    }\n</code>\n<|/ a tags=string,java |>\n<| a tags=string,java |>\n<code>\npublic\
    \ String reverse(String s) {\n    StringBuilder sb = new StringBuilder();\n  \
    \  char[] chars = s.toCharArray();\n    for (int i = chars.length - 1; i >= 0;\
    \ i--) {\n        sb.append(chars[i]);\n    }\n    return sb.toString();\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic String reverse(String\
    \ s) {\n    StringBuilder sb = new StringBuilder();\n    char[] chars = s.toCharArray();\n\
    \    for (int i = chars.length - 1; i >= 0; i--) {\n        sb.append(chars[i]);\n\
    \    }\n    return sb.toString();\n}\n</code>\n<|/ a tags=string,java |>\n<| a\
    \ tags=string,java |>\n<code>\npublic String reverse(String s) {\n    StringBuilder\
    \ sb = new StringBuilder();\n    char[] chars = s.toCharArray();\n    for (int\
    \ i = chars.length - 1; i >= 0; i--) {\n        sb.append(chars[i]);\n    }\n\
    \    return sb.toString();\n", "{\n    string result = \"\";\n    for(int i =\
    \ 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n    \
    \        string temp = toUpper(s[i]);\n            result += temp;\n        }\n\
    \        else\n        {\n            result += s[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts,\
    \ but I believe that your solution is too complicated for such a simple problem.\
    \ Also I believe that your solution does not work for the string \"#a@C\".\n<|/\
    \ c |>\n<| c |>\nI agree with you, my solution is too complicated and I believe\
    \ that your solution is too complicated for such a simple problem. Also I believe\
    \ that your solution does not work for the string \"#a@C\".\n<|/ c |>\n<| c |>\n\
    I believe that your solution is too complicated for such a simple problem. Also\
    \ I believe that your solution does not work for the string \"#a@C\".\n<|/ c |>\n\
    <| c |>\nI believe that your solution is too complicated for such a simple problem.\
    \ Also I believe that your solution does not work for the string \"#a@C\".\n<|/\
    \ c |>\n<| c |>\nI believe that your solution is too complicated for such a simple\
    \ problem. Also I believe that your solution does not work for the string \"#a@C\"\
    .\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n\
    \            string temp = toUpper(s[i]);\n            result += temp;\n     \
    \   }\n        else\n        {\n            result += s[i];\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        char c = s[i];\n        if(c == 'a' || c == 'A')\n    \
    \    {\n            result += 'A';\n        }\n        else if(c == 'b' || c ==\
    \ 'B')\n        {\n            result += 'B';\n        }\n        else if(c ==\
    \ 'c' || c == 'C')\n        {\n            result += 'C';\n        }\n       \
    \ else if(c == 'd' || c == 'D')\n        {\n            result += 'D';\n     \
    \   }\n        else if(c == 'e' || c == 'E')\n        {\n            result +=\
    \ 'E';\n        }\n        else if(c == 'f' || c == 'F')\n        {\n        \
    \    result += 'F';\n        }\n        else if(c == 'g' || c == 'G')\n      \
    \  {\n            result += 'G';\n        }\n        else if(c == 'h' || c ==\
    \ 'H')\n        {\n            result += 'H';\n        }\n        else if(c ==\
    \ 'i' || c == 'I')\n        {\n            result += 'I';\n        }\n       \
    \ else if(c == 'j' || c == 'J')\n        {\n            result += 'J';\n     \
    \   }\n        else if(c == 'k' || c == 'K')\n        {\n            result +=\
    \ 'K';\n        }\n        else if(c == 'l' || c == 'L')\n        {\n        \
    \    result += 'L';\n        }\n        else if(c == 'm' || c == 'M')\n      \
    \  {\n            result += 'M';\n        }\n        else if(c == 'n' || c ==\
    \ 'N')\n        {\n            result += 'N';\n        }\n        else if(c ==\
    \ 'o' || c == 'O')\n        {\n            result += 'O';\n        }\n       \
    \ else if(c == 'p' || c == 'P')\n        {\n            result += 'P';\n     \
    \   }\n        else if(c == 'q' || c == 'Q')\n        {\n            result +=\
    \ 'Q';\n        }\n        else if(c == 'r' || c == 'R')\n        {\n        \
    \    result += 'R';\n        }\n        else if(c == 's' || c == 'S')\n      \
    \  {\n            result += 'S';\n        }\n        else if(c == 't' || c ==\
    \ 'T')\n        {\n            result += 'T';\n        }\n        else if(c ==\
    \ 'u' || c == 'U')\n        {\n            result += 'U';\n        }\n       \
    \ else if(c == 'v' || c == 'V')\n        {\n            result += 'V';\n     \
    \   }\n        else if(c == 'w' || c == 'W')\n        {\n            result +=\
    \ 'W';\n        }\n        else if(c == 'x' || c == 'X", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            string temp = s[i];\n            s[i] = toUpper(s[i]);\n\
    \            s[i] = toLower(s[i]);\n            s[i] = temp;\n        }\n    }\n\
    \    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += s[i];\n        }\n        else\n        {\n\
    \            result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work if the string contains multiple consecutive\
    \ letters.\n<|/ c |>\n<| c |>\nIt does work if you add an else statement to handle\
    \ that case. `if(isLetter(s[i]))\n        {\n            string temp = s[i];\n\
    \            s[i] = toUpper(s[i]);\n            s[i] = toLower(s[i]);\n      \
    \      s[i] = temp;\n        }\n        else\n        {\n            result +=\
    \ s[i];\n        }`\n<|/ c |>\n<| c |>\nI added an else statement to handle that\
    \ case. `if(isLetter(s[i]))\n        {\n            string temp = s[i];\n    \
    \        s[i] = toUpper(s[i]);\n            s[i] = toLower(s[i]);\n          \
    \  s[i] = temp;\n        }\n        else\n        {\n            result += s[i];\n\
    \        }`\n<|/ c |>\n<| c |>\nI added an else statement to handle that case.\
    \ `if(isLetter(s[i]))\n        {\n            string temp = s[i];\n          \
    \  s[i] = toUpper(s[i]);\n            s[i] = toLower(s[i]);\n            s[i]\
    \ = temp;\n        }\n        else\n        {\n            result += s[i];\n \
    \       }`\n<|/ c |>\n<| c |>\nI added an else statement to handle that case.\
    \ `if(isLetter(s[i]))\n        {\n            string temp = s[i];\n          \
    \  s[i] = toUpper(s[i]);\n            s[i] = toLower(s[i]);\n            s[i]\
    \ = temp;\n        }\n        else\n        {\n            result += s[i];\n \
    \       }`\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    for(int\
    \ i=0;i<s.length();i++)\n    {\n        if(isalpha(s[i]))\n        {\n       \
    \     string temp = s[i];\n            s[i] = toupper(s[i]);\n            s[i]\
    \ = tolower(s[i]);\n            s[i] = temp;\n        }\n    }\n    return s;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work for\
    \ `solve(\"ab\")` which should return `\"AB\"`.\n<|/ c |>\n<| c |>\nI fixed the\
    \ problem with ab case\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++){\n\
    \        if(isLetter(s[i])){\n            result += toUpper(s[i]);\n        }else{\n\
    \            result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work for `solve(\"ab\"\
    )`\n<|/ c |>\n<| c |>\nI didn't see that requirement. Thanks for pointing out.\
    \ I've updated my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    for(int i=0;i<s.length();i++)\n\
    \    {\n        if(isalpha(s[i]))\n        {\n            string temp = s[i];\n\
    \            s[i] = toupper(s[i]);\n            s[i] = tolower(s[i]);\n      \
    \      s[i] = temp;\n        }\n    }\n    string result = \"\";\n    for(int\
    \ i=0;i<s.length();i++)\n    {\n        if(s[i]!='\\0')\n        {\n         \
    \   result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThe OP wants to reverse the case of the letters, not just swap\
    \ them.\n<|/ c |>\n<| c |>\nYes, I missed that. Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isalpha(s[i]))\n        {\n            string temp =\
    \ toupper(s[i]);\n            result += temp;\n        }\n        else\n     \
    \   {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=string,c++,algorithm |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        char c = s[i];\n        if(c == 'A' || c == 'a')\n        {\n       \
    \     result += c;\n        }\n        else if(c == 'B' || c == 'b')\n       \
    \ {\n            result += c;\n        }\n        else if(c == 'C' || c == 'c')\n\
    \        {\n            result += c;\n        }\n        else if(c == 'D' || c\
    \ == 'd')\n        {\n            result += c;\n        }\n        else if(c ==\
    \ 'E' || c == 'e')\n        {\n            result += c;\n        }\n        else\
    \ if(c == 'F' || c == 'f')\n        {\n            result += c;\n        }\n \
    \       else if(c == 'G' || c == 'g')\n        {\n            result += c;\n \
    \       }\n        else if(c == 'H' || c == 'h')\n        {\n            result\
    \ += c;\n        }\n        else if(c == 'I' || c == 'i')\n        {\n       \
    \     result += c;\n        }\n        else if(c == 'J' || c == 'j')\n       \
    \ {\n            result += c;\n        }\n        else if(c == 'K' || c == 'k')\n\
    \        {\n            result += c;\n        }\n        else if(c == 'L' || c\
    \ == 'l')\n        {\n            result += c;\n        }\n        else if(c ==\
    \ 'M' || c == 'm')\n        {\n            result += c;\n        }\n        else\
    \ if(c == 'N' || c == 'n')\n        {\n            result += c;\n        }\n \
    \       else if(c == 'O' || c == 'o')\n        {\n            result += c;\n \
    \       }\n        else if(c == 'P' || c == 'p')\n        {\n            result\
    \ += c;\n        }\n        else if(c == 'Q' || c == 'q')\n        {\n       \
    \     result += c;\n        }\n        else if(c == 'R' || c == 'r')\n       \
    \ {\n            result += c;\n        }\n        else if(c == 'S' || c == 's')\n\
    \        {\n            result += c;\n        }\n        else if(c == 'T' || c\
    \ == 't')\n        {\n            result += c;\n        }\n        else if(c ==\
    \ 'U' || c == 'u')\n        {\n            result += c;\n        }\n        else\
    \ if(c == 'V' || c == 'v')\n        {\n            result += c;\n        }\n \
    \       else if(c == 'W' || c == 'w')\n        {\n            result += c;\n \
    \       }\n        else if(c == 'X' || c == 'x')\n        {\n            result\
    \ += c;\n        }\n        else if(c == 'Y' || c == 'y')\n        {\n       \
    \     result += c;\n        }\n        else if(c == 'Z' || c == 'z')\n       \
    \ {\n            result += c;\n        }\n        else\n        {\n          \
    \  result += c;\n", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            string temp\
    \ = toUpper(s[i]);\n            result += temp;\n        }\n        else\n   \
    \     {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `solve(\"\
    ab\")`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `solve(\"ab\")`.\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work for `solve(\"ab\")`. It returns `\"Ab\"`.\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\n\
    It does work. Try it with `solve(\"ab\")`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    int len\
    \ = s.length();\n    string ans = \"\";\n    for(int i = 0; i < len; i++)\n  \
    \  {\n        if(isLetter(s[i]))\n        {\n            ans += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            ans += s[i];\n        }\n   \
    \ }\n    return ans;\n}", "{\n    string result = \"\";\n    for(int i = 0; i\
    \ < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n         \
    \   result += toUpper(s[i]);\n        }\n        else\n        {\n           \
    \ result += s[i];\n        }\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            string temp = toUpper(s[i]);\n            result += temp;\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\nThis doesn't work if the string contains multiple consecutive letters.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. I just added the\
    \ explanation to the answer.\n<|/ c |>\n<| c |>\nThis doesn't work if the string\
    \ contains multiple consecutive letters.\n<|/ c |>\n<| c |>\nYes, it does. I tested\
    \ it before posting it. I just added the explanation to the answer.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if the string contains multiple consecutive letters.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n\
    \            result += toUpper(s[i]);\n        }\n        else\n        {\n  \
    \          result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,string |>\n<| c |>\nThis does not work if the string contains any\
    \ non-letters.\n<|/ c |>\n<| c |>\nYes, you are right. I've edited my answer accordingly.\
    \ Thanks.\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            string temp = s[i];\n            s[i] = toUpper(s[i]);\n\
    \            s[i] = toLower(s[i]);\n            s[i] = temp;\n        }\n    }\n\
    \    for(int i = 0; i < s.length(); i++)\n    {\n        if(!isLetter(s[i]))\n\
    \        {\n            string temp = s[i];\n            s[i] = temp;\n      \
    \  }\n    }\n    for(int i = 0; i < s.length(); i++)\n    {\n        result +=\
    \ s[i];\n    }\n    return result;\n}", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n\
    \            result += toUpper(s[i]);\n        }\n        else\n        {\n  \
    \          result += s[i];\n        }\n    }\n    return result;\n}", "{\n   \
    \ string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n    \
    \    if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n   \
    \     }\n        else\n        {\n            result += s[i];\n        }\n   \
    \ }\n    return result;\n}", "{\n    string result = \"\";\n    for(int i = 0;\
    \ i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n       \
    \     result += toUpper(s[i]);\n        }\n        else\n        {\n         \
    \   result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        if(c ==\
    \ 'a' || c == 'A')\n        {\n            result += toupper(s[i]);\n        }\n\
    \        else if(c == 'b' || c == 'B')\n        {\n            result += tolower(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\nThis code does not work if the string contains any non-letters. For example,\
    \ `solve(\"ab\")` returns `\"AB\"` instead of `\"ab\"`.\n<|/ c |>\n<| c |>\nI\
    \ missed that case. Thanks for pointing it out. I've updated my answer.\n<|/ c\
    \ |>\n<| c |>\nThe code still doesn't work if the string contains any non-letters.\
    \ For example, `solve(\"ab\")` returns `\"AB\"` instead of `\"ab\"`.\n<|/ c |>\n\
    <| c |>\nI missed that case. Thanks for pointing it out. I've updated my answer.\n\
    <|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    for(int i = 0;\
    \ i < s.length(); i++)\n    {\n        char c = s[i];\n        if(c == 'a' ||\
    \ c == 'A')\n        {\n            s[i] = toupper(s[i]);\n        }\n       \
    \ else if(c == 'b' || c == 'B')\n        {\n            s[i] = tolower(s[i]);\n\
    \        }\n        else if(c == '#' || c == '@')\n        {\n            s[i]\
    \ = toupper(s[i]);\n            s[i] = tolower(s[i]);\n        }\n    }\n    return\
    \ s;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if the string\
    \ contains any non-letters.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting it.\n<|/ c |>\n<| c |>\nIt doesn't work if you give it a string with\
    \ non-letters in it.\n<|/ c |>\n<| c |>\nI tested it before posting it. It works\
    \ fine.\n<|/ c |>\n<| c |>\nIt doesn't work if you give it a string with non-letters\
    \ in it.\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n\
    \            result += toUpper(s[i]);\n        }\n        else\n        {\n  \
    \          result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c++ |>\n<| a tags=string,c++ |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThis code doesn't work if the string\
    \ contains only letters. Try it with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it with `solve(\"ab\")`. And it does work. Try it with `solve(\"ab\"\
    )`. And it does work. Try it with `solve(\"ab\")`. And it does work. Try it with\
    \ `solve(\"ab\")`. And it does work. Try it with `solve(\"ab\")`. And it does\
    \ work. Try it with `solve(\"ab\")`. And it does work. Try it with `solve(\"ab\"\
    )`. And it does work. Try it with `solve(\"ab\")`. And it does work. Try it with\
    \ `solve(\"ab\")`. And it does work. Try it with `solve(\"ab\")`. And it does\
    \ work. Try it with `solve(\"ab\")`. And it does work. Try it with `solve(\"ab\"\
    )`. And it does work. Try it with `solve(\"ab\")`. And it does work. Try it with\
    \ `solve(\"ab\")`. And it does work. Try it with `solve(\"ab\")`. And it does\
    \ work. Try it with `solve(\"ab\")`. And it does work. Try it with `solve(\"ab\"\
    )`. And it does work. Try it with `solve(\"ab\")`. And it does work. Try it with\
    \ `solve(\"ab\")`. And it does work. Try it with `solve(\"ab\")`. And it does\
    \ work. Try it with `solve(\"ab\")`. And it does work. Try it with `solve(\"ab\"\
    )`. And it does work. Try it with `solve(\"ab\")`. And it does work. Try it with\
    \ `solve(\"ab\")`. And it does work. Try it with `solve(\"ab\")`. And it does\
    \ work. Try it with `solve(\"ab\")`. And it does work. Try it with `solve(\"ab\"\
    )`. And it does work. Try it with `solve(\"ab\")`. And it does work. Try it with\
    \ `solve(\"ab\")`. And it does work. Try it with `solve(\"ab\")`. And it does\
    \ work. Try it with `solve(\"ab\")`. And it does work. Try it with `solve(\"ab\"\
    )`. And ", "{\n    int len = s.length();\n    char ch;\n    string res = \"\"\
    ;\n    for(int i = 0; i < len; i++)\n    {\n        ch = s[i];\n        if(isalpha(ch))\n\
    \        {\n            ch = toupper(ch);\n        }\n        else\n        {\n\
    \            ch = tolower(ch);\n        }\n        res += ch;\n    }\n    return\
    \ res;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nI believe that\
    \ `isalpha` checks for ASCII characters, not Unicode characters.\n<|/ c |>\n<|\
    \ c |>\n`isalpha` checks for ASCII characters, not Unicode characters. `isalpha`\
    \ returns true if the character is either `'a'`, `'A'`, `'0'`, `'9'`, or `'\\\
    n'`.\n<|/ c |>\n<| c |>\n`isalpha` checks for ASCII characters, not Unicode characters.\n\
    <|/ c |>\n<| c |>\n`isalpha` checks for ASCII characters, not Unicode characters.\n\
    <|/ c |>\n<| c |>\n`isalpha` checks for ASCII characters, not Unicode characters.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n \
    \       char c = s[i];\n        if(c == 'a' || c == 'A')\n        {\n        \
    \    result += toupper(s[i]);\n        }\n        else if(c == 'b' || c == 'B')\n\
    \        {\n            result += tolower(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis code doesn't work.\
    \ Try it with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed\
    \ it before you posted your comment. Thanks.\n<|/ c |>\n<| c |>\nThis code doesn't\
    \ work. Try it with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nI fixed it before you\
    \ posted your comment. Thanks.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            s[i] = toUpper(s[i]);\n        }\n        else\n     \
    \   {\n            s[i] = toLower(s[i]);\n        }\n    }\n    return s;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work if the string contains any non-letters.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the string contains any non-letters.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if the string contains any non-letters.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work if the string contains any non-letters.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work if the string contains any non-letters.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if\
    \ the string contains multiple letters.\n<|/ c |>\n<| c |>\nI didn't downvote,\
    \ but I suspect it's because you didn't explain what your code does, and how it\
    \ does it.\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\n<|/ c\
    \ |>\n<| c |>\nI added some explanation to the answer.\n<|/ c |>\n<| c |>\nI added\
    \ some explanation to the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    int len = s.length();\n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(isLetter(s[i]))\n       \
    \ {\n            s[i] = toUpper(s[i]);\n        }\n        else\n        {\n \
    \           s[i] = toLower(s[i]);\n        }\n    }\n    \n    return s;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic String reverse(String s) {\n\
    \    char[] arr = s.toCharArray();\n    for(int i = arr.length-1; i >= 0; i--)\n\
    \        System.out.print(arr[i]);\n    return \"\";\n}\n</code>\n<|/ a tags=string,java\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic class ReverseString {\n    public\
    \ static void main(String[] args) {\n        String str = \"Hello World\";\n \
    \       System.out.println(reverse(str));\n    }", "{\n    string result = \"\"\
    ;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThe `isLetter` function\
    \ should be `isalpha`.\n<|/ c |>\n<| c |>\n`isalpha` checks for letters, not letters\
    \ only.\n<|/ c |>\n<| c |>\n`isalpha` checks for letters only.\n<|/ c |>\n<| c\
    \ |>\n`isalpha` checks for letters only.\n<|/ c |>\n<| c |>\n`isalpha` checks\
    \ for letters only.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    map<char,char> m;\n    for(int i=0;i<s.length();i++)\n    {\n        if(isalpha(s[i]))\n\
    \        {\n            m[tolower(s[i])] = toupper(s[i]);\n        }\n       \
    \ else\n        {\n            m[s[i]] = s[i];\n        }\n    }\n    string result\
    \ = \"\";\n    for(int i=0;i<s.length();i++)\n    {\n        if(m.find(s[i]) !=\
    \ m.end())\n        {\n            result += m[s[i]];\n        }\n        else\n\
    \        {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work for\
    \ `solve(\"ab\")` which should return `\"AB\"`.\n<|/ c |>\n<| c |>\nI edited my\
    \ answer to include a solution that works with `solve(\"ab\")`\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work for `solve(\"ab\")` which should return `\"AB\"`.\n<|/\
    \ c |>\n<| c |>\nI edited my answer to include a solution that works with `solve(\"\
    ab\")`\n<|/ c |>\n<| c |>\nThis doesn't work for `solve(\"ab\")` which should\
    \ return `\"AB\"`.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work if the string contains only letters.\n<|/ c |>\n<| c |>\nIt does work,\
    \ I've tested it before posting it. The OP stated that he wants to reverse the\
    \ string if there are no letters.\n<|/ c |>\n<| c |>\nI see what you mean. I've\
    \ updated my answer accordingly.\n<|/ c |>\n<| c |>\nThis doesn't work if the\
    \ string contains only letters.\n<|/ c |>\n<| c |>\nIt does work, I've tested\
    \ it before posting it. The OP stated that he wants to reverse the string if there\
    \ are no letters.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        if(c ==\
    \ 'a' || c == 'A')\n        {\n            result += toupper(s[i]);\n        }\n\
    \        else if(c == 'b' || c == 'B')\n        {\n            result += tolower(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate\
    \ your efforts, but this doesn't work. Try it out with input \"#a@C\"\n<|/ c |>\n\
    <| c |>\nIt works, I tested it before posting it. What do you mean by \"doesn't\
    \ work\"? It returns \"#A@c\" as expected. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running it on ideone.com\n\
    <|/ c |>\n<| c |>\nI tested it on ideone.com. Works fine for me. Are you sure\
    \ you copied it correctly? What IDE are you using?\n<|/ c |>\n<| c |>\nI'm using\
    \ Eclipse IDE for C/C++ Developers. I copied it exactly as you wrote it. I even\
    \ tried copying it from my IDE but it still doesn't work. I'm running it on ideone.com\n\
    <|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work if the string contains any non-letters.\n<|/ c |>\n<| c |>\nYes, you are\
    \ right. I missed that case. Thanks for pointing it out. I've updated my answer.\n\
    <|/ c |>\n<| a tags=string,c++ |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer.\
    \ Your code is very helpful to me. Thanks again.\n<|/ c |>\n<| c |>\nYou're welcome.\
    \ I'm glad it helped you. :)\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n\
    \            result += toUpper(s[i]);\n        }\n        else\n        {\n  \
    \          result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\n\
    import java.io.*;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work if you have a string like \"ab#c\" for example\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I tested it on \"ab#c\" and the result was \"#cba\"\n<|/ c\
    \ |>\n<| c |>\nI tested it on \"ab#c\" and the result was \"#cba\"\n<|/ c |>\n\
    <| c |>\nI tested it on \"ab#c\" and the result was \"#cba\"\n<|/ c |>\n<| c |>\n\
    I tested it on \"ab#c\" and the result was \"#cba\"\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isalpha(s[i]))\n        {\n            result += toupper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\nThis doesn't work. Try \"#a@C\"\n<|/ c |>\n<| c |>\nI tested it and it\
    \ works. I even tested it on \"#a@C\" as you said and it works. What is the problem\
    \ you are talking about?\n<|/ c |>\n<| c |>\nI tested it on \"#a@C\" and it works.\
    \ What is the problem you are talking about?\n<|/ c |>\n<| c |>\nI tested it on\
    \ \"#a@C\" and it works. What is the problem you are talking about?\n<|/ c |>\n\
    <| c |>\nI tested it on \"#a@C\" and it works. What is the problem you are talking\
    \ about?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    int len = s.length();\n    for(int i = 0; i < len;\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            s[i] = toUpper(s[i]);\n\
    \        }\n        else\n        {\n            s[i] = toLower(s[i]);\n     \
    \   }\n    }\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n  \
    \  {\n        result += s[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nI guess you meant `if(isLetter(s[i]))` instead of `if(isLetter(s[i]))`\n\
    <|/ c |>\n<| c |>\nYes, I did mean that. Thanks for pointing it out.\n<|/ c |>\n\
    <| c |>\nThe `isLetter` function can be replaced by `s[i] == 'a'`\n<|/ c |>\n\
    <| c |>\nYes, that would work as well. Thanks for pointing it out.\n<|/ c |>\n\
    <| c |>\n`isLetter` can be replaced by `isalpha`.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  int len = s.length();\n    \n    for(int i = 0; i < len; i++)\n    {\n    \
    \    if(s[i] == 'A' || s[i] == 'a')\n        {\n            s[i] = 'a';\n    \
    \    }\n        else if(s[i] == 'B' || s[i] == 'b')\n        {\n            s[i]\
    \ = 'b';\n        }\n        else if(s[i] == 'C' || s[i] == 'c')\n        {\n\
    \            s[i] = 'c';\n        }\n        else if(s[i] == 'D' || s[i] == 'd')\n\
    \        {\n            s[i] = 'd';\n        }\n        else if(s[i] == 'E' ||\
    \ s[i] == 'e')\n        {\n            s[i] = 'e';\n        }\n        else if(s[i]\
    \ == 'F' || s[i] == 'f')\n        {\n            s[i] = 'f';\n        }\n    \
    \    else if(s[i] == 'G' || s[i] == 'g')\n        {\n            s[i] = 'g';\n\
    \        }\n        else if(s[i] == 'H' || s[i] == 'h')\n        {\n         \
    \   s[i] = 'h';\n        }\n        else if(s[i] == 'I' || s[i] == 'i')\n    \
    \    {\n            s[i] = 'i';\n        }\n        else if(s[i] == 'J' || s[i]\
    \ == 'j')\n        {\n            s[i] = 'j';\n        }\n        else if(s[i]\
    \ == 'K' || s[i] == 'k')\n        {\n            s[i] = 'k';\n        }\n    \
    \    else if(s[i] == 'L' || s[i] == 'l')\n        {\n            s[i] = 'l';\n\
    \        }\n        else if(s[i] == 'M' || s[i] == 'm')\n        {\n         \
    \   s[i] = 'm';\n        }\n        else if(s[i] == 'N' || s[i] == 'n')\n    \
    \    {\n            s[i] = 'n';\n        }\n        else if(s[i] == 'O' || s[i]\
    \ == 'o')\n        {\n            s[i] = 'o';\n        }\n        else if(s[i]\
    \ == 'P' || s[i] == 'p')\n        {\n            s[i] = 'p';\n        }\n    \
    \    else if(s[i] == 'Q' || s[i] == 'q')\n        {\n            s[i] = 'q';\n\
    \        }\n        else if(s[i] == 'R' || s[i] == 'r')\n        {\n         \
    \   s[i] = 'r';\n        }\n        else if(s[i] == 'S' || s[i] == 's')\n    \
    \    {\n            s[i] = 's';\n        }\n        else if(s[i] == 'T' || s[i]\
    \ == 't')\n        {\n            s[i] = 't';\n        }\n        else if(s[i]\
    \ == 'U' || s[i] == 'u')\n        {\n            s[i] = 'u';\n        }\n    \
    \    else if(s[i] == 'V' || s[i] == 'v')\n        {\n            s[i] = 'v';\n\
    \        }\n        else if(s[i] == 'W' || s[i] == 'w')\n        {\n         \
    \   s[i] = 'w';\n        }\n        else if(s[i] == 'X' || s[i] == 'x')\n    \
    \    {\n            s[i] = 'x';\n        }\n        else if(s[i]", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n\
    \            result += toUpper(s[i]);\n        }\n        else\n        {\n  \
    \          result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    int len = s.length();\n    string result\
    \ = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work for `solve(\"ab\")`\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I fixed it.\n<|/ c |>\n<| a |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n   \
    \     if(isalpha(s[i]))\n        {\n            result += toupper(s[i]);\n   \
    \     }\n        else\n        {\n            result += s[i];\n        }\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;\nstring solve(const\
    \ string &s)\n{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isalpha(s[i]))\n        {\n            result += toupper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    for(int i =\
    \ 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        if(c == 'a'\
    \ || c == 'A')\n        {\n            result += toupper(c);\n        }\n    \
    \    else if(c == 'b' || c == 'B')\n        {\n            result += tolower(c);\n\
    \        }\n        else\n        {\n            result += c;\n        }\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++ |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            s[i] = toUpper(s[i]);\n        }\n        else\n     \
    \   {\n            s[i] = toLower(s[i]);\n        }\n    }\n    \n    string result\
    \ = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        result += s[i];\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        if(c ==\
    \ 'a' || c == 'A')\n        {\n            result += toupper(c);\n        }\n\
    \        else if(c == 'b' || c == 'B')\n        {\n            result += tolower(c);\n\
    \        }\n        else\n        {\n            result += c;\n        }\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26827814)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case of a string and I provided a solution. He also asked how to\
    \ reverse the case ", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\nI like your solution but I think it can be simplified a bit. `isLetter`\
    \ can be replaced with `isalpha`.\n<|/ c |>\n<| c |>\nYes, you are right. `isalpha`\
    \ would be better. Thanks.\n<|/ c |>\n<| c |>\n`isalpha` doesn't check for `isdigit`\
    \ though.\n<|/ c |>\n<| c |>\n`isalpha` checks for `isupper` and `islower` so\
    \ `isdigit` would not be needed.\n<|/ c |>\n<| c |>\n`isdigit` is needed because\
    \ `isalpha` doesn't check for `isdigit`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer.\
    \ Can you please tell me why you used `std.string` instead of `string`?\n<|/ c\
    \ |>\n<| c |>\n`std.string` is an alias for `string`\n<|/ c |>\n<| c |>\nThanks.\
    \ I didn't know that.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    for(int i=0;i<s.length();i++)\n\
    \    {\n        if(isalpha(s[i]))\n        {\n            string temp=s[i];\n\
    \            s[i]=toupper(s[i]);\n            s[i]=tolower(s[i]);\n          \
    \  s[i]=temp;\n        }\n    }\n    return s;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26839463)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He wants to reverse\
    \ the case of the letters in a string. He also wants to reverse the string if\
    \ there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He also wants to keep the string unchanged\
    \ if there are no letters in the string. He ", "{\n    string result = \"\";\n\
    \    for(int i = 0; i < s.length(); i++)\n    {\n        if(isalpha(s[i]))\n \
    \       {\n            string temp = toupper(s[i]);\n            result += temp;\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\nThis doesn't work for \"#a@C\" which should return \"#A@c\"\n<|/ c |>\n\
    <| c |>\nI see what you mean. I've updated the answer to account for that case.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for \"#a@C\" which should return \"#A@c\"\
    \n<|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to account for\
    \ that case.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\n`isLetter` should be `isalpha` I think.\n<|/ c |>\n<| c |>\n`isalpha`\
    \ doesn't exist in C++.\n<|/ c |>\n<| c |>\n`isalpha` does exist in C++, it's\
    \ just not in the standard library.\n<|/ c |>\n<| c |>\n`isalpha` exists in `<cctype>`,\
    \ not `<cstring>`.\n<|/ c |>\n<| c |>\n`isalpha` exists in `<cctype>`, not `<cstring>`.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    map<int, char> m;\n    for(int i\
    \ = 0; i < s.length(); i++)\n    {\n        if(isalpha(s[i]))\n        {\n   \
    \         m[toupper(s[i])] = toupper(s[i]);\n        }\n        else\n       \
    \ {\n            m[s[i]] = s[i];\n        }\n    }\n    string result = \"\";\n\
    \    for(int i = 0; i < s.length(); i++)\n    {\n        if(m.find(s[i]) != m.end())\n\
    \        {\n            result += m[s[i]];\n        }\n        else\n        {\n\
    \            result += s[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work if you have a string\
    \ like \"ab#c\" for example. You'll get \"#cba\" instead of \"abc\"\n<|/ c |>\n\
    <| c |>\n: I didn't see that requirement in the question, but I added a solution\
    \ for that case as well.\n<|/ c |>\n<| c |>\n: I added a solution for that case\
    \ as well. Thanks for pointing it out.\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        char c = s[i];\n        if(c == 'a' || c == 'A')\n    \
    \    {\n            result += toupper(s[i]);\n        }\n        else if(c ==\
    \ 'b' || c == 'B')\n        {\n            result += tolower(s[i]);\n        }\n\
    \        else\n        {\n            result += s[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n   \
    \     if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n  \
    \      }\n        else\n        {\n            result += s[i];\n        }\n  \
    \  }\n    return result;\n}", "{\n    int len = s.length();\n    for(int i = 0;\
    \ i < len; i++)\n    {\n        if(isLetter(s[i]))\n        {\n            s[i]\
    \ = toUpper(s[i]);\n        }\n        else\n        {\n            s[i] = toLower(s[i]);\n\
    \        }\n    }\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n\
    \    {\n        result += s[i];\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=string,c++ |>\n<| c |>\nThis doesn't work if the string contains any non-letters.\n\
    <|/ c |>\n<| c |>\nIt doesn't work because `toUpper` and `toLower` don't do what\
    \ they claim they do. `toUpper` converts lowercase letters to uppercase, and `toLower`\
    \ converts uppercase letters to lowercase. `toUpper` doesn't do anything for non-letters.\
    \ `toLower` does nothing for non-letters.\n<|/ c |>\n<| c |>\nI didn't know that\
    \ `toUpper` and `toLower` don't do what they claim they do. Thanks for pointing\
    \ that out. I've edited my answer to include a solution that doesn't use those\
    \ functions.\n<|/ c |>\n<| c |>\nThe `toUpper` and `toLower` functions do what\
    \ they claim they do. `toUpper` converts lowercase letters to uppercase, and `toLower`\
    \ converts uppercase letters to lowercase. `toUpper` doesn't do anything for non-letters.\
    \ `toLower` does nothing for non-letters.\n<|/ c |>\n<| c |>\nI didn't know that\
    \ `toUpper` and `toLower` don't do what they claim they do. Thanks for pointing\
    \ that out. I've edited my answer to include a solution that doesn't use those\
    \ functions.\n<|/ c |>\n<| a tags=string,c++ |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n        {\n\
    \            result += toUpper(s[i]);\n        }\n        else\n        {\n  \
    \          result += s[i];\n        }\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\n\
    import java.io.*;\nclass GFG {\n    public static void main (String[] args) {\n\
    \        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter\
    \ the string\");\n        String str = sc.nextLine();\n        str = str.replaceAll(\"\
    [^a-zA-Z]\", \"\");\n        str = str.replaceAll(\"\\\\s+\",\"\");\n        str\
    \ = str.toLowerCase();\n        str = str.replaceAll(\"^[a-zA-Z]+\", \"\");\n\
    \        str = str.replaceAll(\"[^a-zA-Z]\", \"\");\n        str = str.replaceAll(\"\
    \\\\s+\",\"\");\n        str = str.replaceAll(\"^[a-zA-Z]+\", \"\");\n       \
    \ str = str.replaceAll(\"[^a-zA-Z]\", \"\");\n        str = str.replaceAll(\"\\\
    \\s+\",\"\");\n        str = str.replaceAll(\"^[a-zA-Z]+\", \"\");\n        str\
    \ = str.replaceAll(\"[^a-zA-Z]\", \"\");\n        str = str.replaceAll(\"\\\\\
    s+\",\"\");\n        str = str.replaceAll(\"^[a-zA-Z]+\", \"\");\n        str\
    \ = str.replaceAll(\"[^a-zA-Z]\", \"\");\n        str = str.replaceAll(\"\\\\\
    s+\",\"\");\n        str = str.replaceAll(\"^[a-zA-Z]+\", \"\");\n        str\
    \ = str.replaceAll(\"[^a-zA-Z]\", \"\");\n        str = str.replaceAll(\"\\\\\
    s+\",\"\");\n        str = str.replaceAll(\"^[a-zA-Z]+\", \"\");\n        str\
    \ = str.replaceAll(\"[^a-zA-Z]\", \"\");\n        str = str.replaceAll(\"\\\\\
    s+\",\"\");\n        str = str.replaceAll(\"^[a-zA-Z]+\", \"\");\n        str\
    \ = str.replaceAll(\"[^a-zA-Z]\", \"\");\n        str = str.replaceAll(\"\\\\\
    s+\",\"\");\n        str = str.replaceAll(\"^[a-zA-Z]+\", \"\");\n        str\
    \ = str.replaceAll(\"[^a-zA-Z]\", \"\");\n        str = str.replaceAll(\"\\\\\
    s+\",\"\");\n        str = str.replaceAll(\"^[a-zA-Z]+\", \"\");\n        str\
    \ = str.replaceAll(\"[^a-zA-Z]\", \"\");\n        str = str.replaceAll(\"\\\\\
    s+\",\"\");\n        str = str.replaceAll(\"^[a-zA-Z]+\", \"\");\n        str\
    \ = str.replaceAll(\"[^a-zA-Z]\", \"\");\n        str = str.replaceAll(\"\\\\\
    s+\",\"\");\n        str = str.replaceAll(\"^[a-zA-Z]+\", \"\"", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis code does not work.\
    \ Try it on \"#a@C\".\n<|/ c |>\n<| c |>\nI tested it on \"#a@C\" and it worked\
    \ fine. Can you please elaborate on what is not working?\n<|/ c |>\n<| c |>\n\
    The code does not work. Try it on \"#a@C\".\n<|/ c |>\n<| c |>\nI tested it on\
    \ \"#a@C\" and it worked fine. Can you please elaborate on what is not working?\n\
    <|/ c |>\n<| c |>\nThe code does not work. Try it on \"#a@C\".\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    using namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isLetter(s[i]))\n        {\n            string temp\
    \ = toUpper(s[i]);\n            result += temp;\n        }\n        else\n   \
    \     {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    int len = s.length();\n    char\
    \ c = s[0];\n    string result = \"\";\n    for(int i = 1; i < len; i++)\n   \
    \ {\n        if(s[i] == c)\n        {\n            result += toupper(c);\n   \
    \         c += tolower(s[i]);\n        }\n        else\n        {\n          \
    \  result += s[i];\n        }\n    }\n    if(len == 0)\n    {\n        result\
    \ += c;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer! But I still don't understand why my code didn't work. Could\
    \ you please explain to me why my code didn't work?\n<|/ c |>\n<| c |>\nYour code\
    \ didn't work because you didn't reverse the case of the letters. You just added\
    \ the letters unchanged. You have to add `toupper(c)` before `c+=tolower(s[i])`\n\
    <|/ c |>\n<| c |>\nI see. But why did my code work when I used `toupper()` before\
    \ `c+=tolower(s[i])`?\n<|/ c |>\n<| c |>\nBecause you were adding the letters\
    \ unchanged. You were adding `c` before you added `tolower(s[i])`\n<|/ c |>\n\
    <| c |>\nI see. But why did my code work when I used `toupper()` before `c+=tolower(s[i])`?\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    int len = s.length();\n    for(int\
    \ i = 0; i < len; i++)\n    {\n        if(isLetter(s[i]))\n        {\n       \
    \     s[i] = toUpper(s[i]);\n        }\n        else\n        {\n            s[i]\
    \ = toLower(s[i]);\n        }\n    }\n    string result = \"\";\n    for(int i\
    \ = 0; i < len; i++)\n    {\n        result += s[i];\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work if\
    \ you have a string like \"#a@C\"\n<|/ c |>\n<| c |>\nYes, it does. I tested it\
    \ before posting it. I will edit my post to include a test case.\n<|/ c |>\n<|\
    \ c |>\nOh sorry, I missed the part where you said \"If the string contains no\
    \ letters, reverse the string.\"\n<|/ c |>\n<| c |>\nYes, I missed that part too.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work for \"#a@C\"\
    \ because you only check for letters in the first character of the string. Try\
    \ \"#a@C#\" for example\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n   \
    \ {\n        if(isalpha(s[i]))\n        {\n            s[i] = toupper(s[i]);\n\
    \        }\n        else\n        {\n            s[i] = tolower(s[i]);\n     \
    \   }\n    }\n    \n    return s;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;",
  "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        if(isLetter(s[i]))\n        {\n            result += toUpper(s[i]);\n\
    \        }\n        else\n        {\n            result += s[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\nThanks for your answer. Your code works but my code doesn't. Can you please\
    \ check my code?\n<|/ c |>\n<| c |>\nI edited my answer, I hope it helps. I didn't\
    \ test it though.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works\
    \ but my code doesn't. Can you please check my code?\n<|/ c |>\n<| c |>\nI edited\
    \ my answer, I hope it helps. I didn't test it though.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Your code works but my code doesn't. Can you please check my\
    \ code?\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThis doesn't work if there are\
    \ multiple letters in the string. For example, if `s = \"#a@C\"`, then `solve(s)`\
    \ returns `\"#A@c\"`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it now.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    map<int, string>\
    \ m;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isalpha(s[i]))\n\
    \        {\n            m[toupper(s[i])] = s[i];\n        }\n        else\n  \
    \      {\n            m[s[i]] = toupper(s[i]);\n        }\n    }\n    string result\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(m.count(s[i])\
    \ > 0)\n        {\n            result += m[s[i]];\n        }\n        else\n \
    \       {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n\
    \        {\n            result += toUpper(s[i]);\n        }\n        else\n  \
    \      {\n            result += s[i];\n        }\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        char c = s[i];\n        if(c == 'a' || c == 'A')\n        {\n       \
    \     result += 'A';\n        }\n        else if(c == 'b' || c == 'B')\n     \
    \   {\n            result += 'B';\n        }\n        else if(c == 'c' || c ==\
    \ 'C')\n        {\n            result += 'C';\n        }\n        else if(c ==\
    \ 'd' || c == 'D')\n        {\n            result += 'D';\n        }\n       \
    \ else if(c == 'e' || c == 'E')\n        {\n            result += 'E';\n     \
    \   }\n        else if(c == 'f' || c == 'F')\n        {\n            result +=\
    \ 'F';\n        }\n        else if(c == 'g' || c == 'G')\n        {\n        \
    \    result += 'G';\n        }\n        else if(c == 'h' || c == 'H')\n      \
    \  {\n            result += 'H';\n        }\n        else if(c == 'i' || c ==\
    \ 'I')\n        {\n            result += 'I';\n        }\n        else if(c ==\
    \ 'j' || c == 'J')\n        {\n            result += 'J';\n        }\n       \
    \ else if(c == 'k' || c == 'K')\n        {\n            result += 'K';\n     \
    \   }\n        else if(c == 'l' || c == 'L')\n        {\n            result +=\
    \ 'L';\n        }\n        else if(c == 'm' || c == 'M')\n        {\n        \
    \    result += 'M';\n        }\n        else if(c == 'n' || c == 'N')\n      \
    \  {\n            result += 'N';\n        }\n        else if(c == 'o' || c ==\
    \ 'O')\n        {\n            result += 'O';\n        }\n        else if(c ==\
    \ 'p' || c == 'P')\n        {\n            result += 'P';\n        }\n       \
    \ else if(c == 'q' || c == 'Q')\n        {\n            result += 'Q';\n     \
    \   }\n        else if(c == 'r' || c == 'R')\n        {\n            result +=\
    \ 'R';\n        }\n        else if(c == 's' || c == 'S')\n        {\n        \
    \    result += 'S';\n        }\n        else if(c == 't' || c == 'T')\n      \
    \  {\n            result += 'T';\n        }\n        else if(c == 'u' || c ==\
    \ 'U')\n        {\n            result += 'U';\n        }\n        else if(c ==\
    \ 'v' || c == 'V')\n        {\n            result += 'V';\n        }\n       \
    \ else if(c == 'w' || c == 'W')\n        {\n            result += 'W';\n     \
    \   }\n        else if(c == 'x' || c == 'X", "{\n    string result = \"\";\n \
    \   for(int i = 0; i < s.length(); i++)\n    {\n        if(isLetter(s[i]))\n \
    \       {\n            result += toUpper(s[i]);\n        }\n        else\n   \
    \     {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your code,\
    \ but I got this error \"error: expected primary-expression before '[' token\"\
    \n<|/ c |>\n<| c |>\nI edited my answer, I forgot to put `[]` around `isLetter`.\
    \ Try it now.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried your code, but\
    \ I got this error \"error: expected primary-expression before '[' token\"\n<|/\
    \ c |>\n<| c |>\nI edited my answer, I forgot to put `[]` around `isLetter`. Try\
    \ it now.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried your code, but I\
    \ got this error \"error: expected primary-expression before '[' token\"\n<|/\
    \ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n \
    \   for(int i = 0; i < s.length(); i++){\n        if(isLetter(s[i])){\n      \
    \      result += toUpper(s[i]);\n        }else{\n            result += s[i];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Scanner;\npublic class ReverseString {\n    public\
    \ static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\
    \        System.out.println(\"Enter a string\");\n        String str = sc.nextLine();\n\
    \        str = reverse(str);\n        System.out.println(str);\n    }\n    public\
    \ static String reverse(String str) {\n        int length = str.length();\n  \
    \      char[] arr = str.toCharArray();\n        char[] reverse = new char[length];\n\
    \        for (int i = 0; i < length; i++) {\n            reverse[i] = arr[length\
    \ - 1 - i];\n        }\n        return new String(reverse);\n    }\n}\n</code>\n\
    <|/ a tags=string,java |>\n<| a dscore=0 |>\n<code>\nimport java.util.Scanner;",
  "{\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n       \
    \ if(isLetter(s[i]))\n        {\n            s[i] = toUpper(s[i]);\n        }\n\
    \        else\n        {\n            s[i] = toLower(s[i]);\n        }\n    }\n\
    \    return s;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Scanner;", "{\n    map<char, char> map;\n    map['a'] = 'A';\n   \
    \ map['b'] = 'B';\n    map['c'] = 'C';\n    map['d'] = 'D';\n    map['e'] = 'E';\n\
    \    map['f'] = 'F';\n    map['g'] = 'G';\n    map['h'] = 'H';\n    map['i'] =\
    \ 'I';\n    map['j'] = 'J';\n    map['k'] = 'K';\n    map['l'] = 'L';\n    map['m']\
    \ = 'M';\n    map['n'] = 'N';\n    map['o'] = 'O';\n    map['p'] = 'P';\n    map['q']\
    \ = 'Q';\n    map['r'] = 'R';\n    map['s'] = 'S';\n    map['t'] = 'T';\n    map['u']\
    \ = 'U';\n    map['v'] = 'V';\n    map['w'] = 'W';\n    map['x'] = 'X';\n    map['y']\
    \ = 'Y';\n    map['z'] = 'Z';\n    map['!'] = '!';\n    map['?'] = '?';\n    map['#']\
    \ = '#';\n    map['$'] = '$';\n    map['%'] = '%';\n    map['&'] = '&';\n    map['*']\
    \ = '*';\n    map['('] = '(';\n    map[')'] = ')';\n    map['='] = '=';\n    map['-']\
    \ = '-';\n    map['+'] = '+';\n    map['|'] = '|';\n    map[':'] = ':';\n    map[';']\
    \ = ';';\n    map['<'] = '<';\n    map['>'] = '>';\n    map['?'] = '?';\n    map['.']\
    \ = '.';\n    map['/'] = '/';\n    map['\\\\'] = '\\\\';\n    map['^'] = '^';\n\
    \    map['\"'] = '\"';\n    map[' '] = '';\n    map['~'] = '~';\n    map['`']\
    \ = '`';\n    map['-'] = '-';\n    map['='] = '=';\n    map['['] = '[';\n    map[']']\
    \ = ']';\n    map['{'] = '{';\n    map['}'] = '}';\n    map['|'] = '|';\n    map['\\\
    \\'] = '\\\\';\n    map['/'] = '/';\n    map['\"'] = '\"';\n    map[' '] = '';\n\
    \    map['~"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
