name: HumanEval_19_sort_numbers
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a |>\n<code>\n#include\
    \ <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe5356d4t.d(15): Error: found `in` when expecting `;`\\n/tmp/tmpe5356d4t.d(40):\
    \ Error: declaration expected, not `<`\\n/tmp/tmpe5356d4t.d(52): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpe5356d4t.d(53): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpe5356d4t.d(54): Error: declaration expected, not `assert`\\\
    n/tmp/tmpe5356d4t.d(55): Error: declaration expected, not `assert`\\n/tmp/tmpe5356d4t.d(56):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpe5356d4t.d(57): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe5356d4t.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try\
    \ it with `\"one two three\"`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting. Try it again with `\"one two three\"`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for `\"one two three\"` because `sort_numbers` doesn't handle that case.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I'll fix it.\n<|/ c |>\n<| c |>\nI fixed\
    \ it now. Thanks for pointing that out.\n<|/ c |>\n<| a tags=c++,sorting |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfalcwh2q.d(15): Error: found `in` when expecting `;`\\n/tmp/tmpfalcwh2q.d(40):\
    \ Error: declaration expected, not `<`\\n/tmp/tmpfalcwh2q.d(43): Error: unterminated\
    \ character constant\\n/tmp/tmpfalcwh2q.d(49): Error: unterminated character constant\\\
    n/tmp/tmpfalcwh2q.d(49): Error: unterminated character constant\\n/tmp/tmpfalcwh2q.d(52):\
    \ Error: unterminated character constant\\n/tmp/tmpfalcwh2q.d(67): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpfalcwh2q.d(68): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpfalcwh2q.d(69): Error: declaration expected, not `assert`\\\
    n/tmp/tmpfalcwh2q.d(70): Error: declaration expected, not `assert`\\n/tmp/tmpfalcwh2q.d(71):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpfalcwh2q.d(72): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfalcwh2q.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0': result += \" zero \"\
    ;\n                break;\n            case '1': result += \" one \";\n      \
    \          break;\n            case '2': result += \" two \";\n              \
    \  break;\n            case '3': result += \" three \";\n                break;\n\
    \            case '4': result += \" four \";\n                break;\n       \
    \     case '5': result += \" five \";\n                break;\n            case\
    \ '6': result += \" six \";\n                break;\n            case '7': result\
    \ += \" seven \";\n                break;\n            case '8': result += \"\
    \ eight \";\n                break;\n            case '9': result += \" nine \"\
    ;\n                break;\n            default:\n                result += c;\n\
    \                break;\n        }\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n \
    \   assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwo4kd13g.d(14): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwo4kd13g.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> map;\n    map[\"zero\"] = 0;\n    map[\"\
    one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"four\"\
    ] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n\
    \    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n    map[\"ten\"] = 10;\n   \
    \ map[\"eleven\"] = 11;\n    map[\"twelve\"] = 12;\n    map[\"thirteen\"] = 13;\n\
    \    map[\"fourteen\"] = 14;\n    map[\"fifteen\"] = 15;\n    map[\"sixteen\"\
    ] = 16;\n    map[\"seventeen\"] = 17;\n    map[\"eighteen\"] = 18;\n    map[\"\
    nineteen\"] = 19;\n    map[\"twenty\"] = 20;\n    map[\"thirty\"] = 30;\n    map[\"\
    forty\"] = 31;\n    map[\"fifty\"] = 30;\n    map[\"sixty\"] = 30;\n    map[\"\
    seventy\"] = 30;\n    map[\"eighty\"] = 30;\n    map[\"ninety\"] = 30;\n    map[\"\
    hundred\"] = 100;\n    map[\"thousand\"] = 1000;\n    map[\"million\"] = 1000000;\n\
    \    map[\"billion\"] = 1000000000;\n    map[\"trillion\"] = 1000000000000;\n\
    \    map[\"quadrillion\"] = 1000000000000000;\n    map[\"quintillion\"] = 1000000000000000000;\n\
    \    map[\"sextillion\"] = 100000000000000000000;\n    map[\"septillion\"] = 100000000000000000000000;\n\
    \    map[\"octillion\"] = 100000000000000000000000000;\n    map[\"nonillion\"\
    ] = 10000000000000000000000000000;\n    map[\"decillion\"] = 10000000000000000000000000000000;\n\
    \    map[\"undecillion\"] = 1000000000000000000000000000000000;\n    map[\"duodecillion\"\
    ] = 10000000000000000000000000000000001;\n    map[\"tredecillion\"] = 100000000000000000000000000000000010;\n\
    \    map[\"quattuordecillion\"] = 1000000000000000000000000000000000100;\n   \
    \ map[\"quindecillion\"] = 10000000000000000000000000000000001000;\n    map[\"\
    sexdecillion\"] = 100000000000000000000000000000000010000;\n    map[\"septendecillion\"\
    ] = 1000000000000000000000000000000000100000;\n    map[\"octodecillion\"] = 10000000000000000000000000000000001000000;\n\
    \    map[\"novemdec\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphy61y3yn.d(13): Error: found `>` when expecting `.` following\
    \ int\\n/tmp/tmphy61y3yn.d(49): Error: integer overflow\\n/tmp/tmphy61y3yn.d(50):\
    \ Error: integer overflow\\n/tmp/tmphy61y3yn.d(51): Error: integer overflow\\\
    n/tmp/tmphy61y3yn.d(52): Error: integer overflow\\n/tmp/tmphy61y3yn.d(53): Error:\
    \ integer overflow\\n/tmp/tmphy61y3yn.d(54): Error: integer overflow\\n/tmp/tmphy61y3yn.d(55):\
    \ Error: integer overflow\\n/tmp/tmphy61y3yn.d(56): Error: integer overflow\\\
    n/tmp/tmphy61y3yn.d(57): Error: integer overflow\\n/tmp/tmphy61y3yn.d(58): Error:\
    \ integer overflow\\n/tmp/tmphy61y3yn.d(59): Error: integer overflow\\n/tmp/tmphy61y3yn.d(60):\
    \ Error: integer overflow\\n/tmp/tmphy61y3yn.d(61): Error: integer overflow\\\
    n/tmp/tmphy61y3yn.d(62): Error: unterminated string constant starting at /tmp/tmphy61y3yn.d(71)\\\
    n/tmp/tmphy61y3yn.d(67): Error: Implicit string concatenation is deprecated, use\
    \ \"novemdec\\\\x0aunittest\\\\x0a{\\\\x0a    alias candidate = sort_numbers;\\\
    \\x0a\\\\x0a    assert(candidate(\" ~ \") == \" instead\\n/tmp/tmphy61y3yn.d(67):\
    \ Error: Implicit string concatenation is deprecated, use \") == \" ~ \");\\\\\
    x0a    assert(candidate(\" instead\\n/tmp/tmphy61y3yn.d(68): Error: found `three`\
    \ when expecting `,`\\n/tmp/tmphy61y3yn.d(68): Error: found `three` when expecting\
    \ `,`\\n/tmp/tmphy61y3yn.d(69): Error: found `three` when expecting `,`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphy61y3yn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        int number = std.atoi(c);\n        string digit = std.format(\"\
    %0d\", number);\n        result += digit;\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,c++,algorithm |>\n<| c |>\n\
    This doesn't work. Try it with `\"one two three\"`.\n<|/ c |>\n<| c |>\nIt works\
    \ fine for me. Try it here: http://ideone.com/7nKKz\n<|/ c |>\n<| c |>\nI see\
    \ what you mean. I've edited my answer to fix the bug. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| c |>\nI see what you mean. I've edited my answer to fix the\
    \ bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI see what you mean. I've\
    \ edited my answer to fix the bug. Thanks for pointing it out.\n<|/ c |>\n<| a\
    \ tags=sorting,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwuc4qzo1.d(14): Error: found `in` when expecting `;`\\n/tmp/tmpwuc4qzo1.d(23):\
    \ Error: declaration expected, not `<`\\n/tmp/tmpwuc4qzo1.d(26): Error: unterminated\
    \ character constant\\n/tmp/tmpwuc4qzo1.d(32): Error: unterminated character constant\\\
    n/tmp/tmpwuc4qzo1.d(35): Error: unterminated character constant\\n/tmp/tmpwuc4qzo1.d(38):\
    \ Error: unterminated character constant\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpwuc4qzo1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        char c = numbers[i];\n        if(isdigit(c))\n        {\n\
    \            int number = c - '0';\n            result += std.string(number);\n\
    \        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c |>\nThis is not the best solution.\
    \ Using `std::sort` will sort your string in lexicographical order. Which means\
    \ `'2'` will come before `'10'`, which is not the case here.\n<|/ c |>\n<| c |>\n\
    I agree, but I thought the OP was just trying to sort the numbers. I added a solution\
    \ that sorts the numbers in numerical order.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, but I thought the OP was just trying to sort the numbers. I added a solution\
    \ that sorts the numbers in numerical order.\n<|/ c |>\n<| a tags=c++,sorting,string\
    \ |>\nThe best solution is to use std::sort with a custom comparator:\n<code>\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxijv1swr.d(26): Error: declaration expected, not `<`\\n/tmp/tmpxijv1swr.d(44):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpxijv1swr.d(45): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpxijv1swr.d(46): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpxijv1swr.d(47): Error: declaration expected, not `assert`\\\
    n/tmp/tmpxijv1swr.d(48): Error: declaration expected, not `assert`\\n/tmp/tmpxijv1swr.d(49):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpxijv1swr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid choice\";\n        }\n\
    \    }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,c++,string |>\n<| c |>\nI like this solution, but I wonder\
    \ if it would be more efficient to convert the string to a vector of ints and\
    \ then sort that vector?\n<|/ c |>\n<| c |>\n: Yes, that would be more efficient.\
    \ `std::sort` will do that for you. `std::sort` will also do that for you, if\
    \ you use `std::istringstream` to read your input into a `std::vector`.\n<|/ c\
    \ |>\n<| c |>\n: I added a version that uses `std::sort` instead of `std::istringstream`.\n\
    <|/ c |>\n<| c |>\n: I added a version that uses `std::sort` instead of `std::istringstream`.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx04ompzb.d(14): Error: found `in` when expecting `;`\\n/tmp/tmpx04ompzb.d(37):\
    \ Error: declaration expected, not `<`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpx04ompzb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> map;\n    map[\"zero\"] = 0;\n    map[\"\
    one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"four\"\
    ] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n\
    \    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n    \n    vector<string> numbers_split;\n\
    \    \n    foreach(char c in numbers)\n    {\n        numbers_split.push_back(c);\n\
    \    }\n    \n    sort(numbers_split.begin(), numbers_split.end(), [](const string\
    \ &a, const string &b) -> bool\n    {\n        string a_str = a;\n        string\
    \ b_str = b;\n        \n        int a_int = std.string.to<int>(a_str);\n     \
    \   int b_int = std.string.to<int>(b_str);\n        \n        return a_int < b_int\
    \ ? true : a_int > b_int ? false : false;\n    });\n    \n    string result =\
    \ \"\";\n    \n    foreach(string s in numbers_split)\n    {\n        result +=\
    \ map[s];\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpui4xem_e.d(13): Error: found `>` when expecting `.` following\
    \ int\\n/tmp/tmpui4xem_e.d(25): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpui4xem_e.d(27): Error: found `in` when expecting `;`\\n/tmp/tmpui4xem_e.d(32):\
    \ Error: `(arguments)` expected following `const(string)`\\n/tmp/tmpui4xem_e.d(32):\
    \ Error: `(arguments)` expected following `const(string)`\\n/tmp/tmpui4xem_e.d(32):\
    \ Error: expression expected, not `>`\\n/tmp/tmpui4xem_e.d(32): Error: found `bool`\
    \ when expecting `,`\\n/tmp/tmpui4xem_e.d(37): Error: found `>` when expecting\
    \ `.` following int\\n/tmp/tmpui4xem_e.d(37): Error: found `(` when expecting\
    \ identifier following `int`.\\n/tmp/tmpui4xem_e.d(37): Error: semicolon expected,\
    \ not `a_str`\\n/tmp/tmpui4xem_e.d(37): Error: found `)` when expecting `;` following\
    \ statement\\n/tmp/tmpui4xem_e.d(37): Deprecation: use `{ }` for an empty statement,\
    \ not `;`\\n/tmp/tmpui4xem_e.d(38): Error: found `>` when expecting `.` following\
    \ int\\n/tmp/tmpui4xem_e.d(38): Error: found `(` when expecting identifier following\
    \ `int`.\\n/tmp/tmpui4xem_e.d(38): Error: semicolon expected, not `b_str`\\n/tmp/tmpui4xem_e.d(38):\
    \ Error: found `)` when expecting `;` following statement\\n/tmp/tmpui4xem_e.d(38):\
    \ Deprecation: use `{ }` for an empty statement, not `;`\\n/tmp/tmpui4xem_e.d(45):\
    \ Error: found `in` when expecting `;`\\n/tmp/tmpui4xem_e.d(52): Error: declaration\
    \ expected, not `<`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpui4xem_e.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < numbers.size();\
    \ ++i)\n    {\n        string num = numbers[i];\n        \n        if(num == \"\
    zero\")\n        {\n            result += \"zero\";\n        }\n        else if(num\
    \ == \"one\")\n        {\n            result += \"one\";\n        }\n        else\
    \ if(num == \"two\")\n        {\n            result += \"two\";\n        }\n \
    \       else if(num == \"three\")\n        {\n            result += \"three\"\
    ;\n        }\n        else if(num == \"four\")\n        {\n            result\
    \ += \"four\";\n        }\n        else if(num == \"five\")\n        {\n     \
    \       result += \"five\";\n        }\n        else if(num == \"six\")\n    \
    \    {\n            result += \"six\";\n        }\n        else if(num == \"seven\"\
    )\n        {\n            result += \"seven\";\n        }\n        else if(num\
    \ == \"eight\")\n        {\n            result += \"eight\";\n        }\n    \
    \    else if(num == \"nine\")\n        {\n            result += \"nine\";\n  \
    \      }\n        else\n        {\n            throw runtime_error(\"Invalid number\
    \ \" + num);\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five\
    \ nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpadilp08l.d(15): Error: no property `size` for type `string`\\\
    n/tmp/tmpadilp08l.d(17): Error: cannot implicitly convert expression `numbers[cast(ulong)i]`\
    \ of type `immutable(char)` to `string`\\n/tmp/tmpadilp08l.d(21): Error: slice\
    \ `result` is not mutable\\n/tmp/tmpadilp08l.d(25): Error: slice `result` is not\
    \ mutable\\n/tmp/tmpadilp08l.d(29): Error: slice `result` is not mutable\\n/tmp/tmpadilp08l.d(33):\
    \ Error: slice `result` is not mutable\\n/tmp/tmpadilp08l.d(37): Error: slice\
    \ `result` is not mutable\\n/tmp/tmpadilp08l.d(41): Error: slice `result` is not\
    \ mutable\\n/tmp/tmpadilp08l.d(45): Error: slice `result` is not mutable\\n/tmp/tmpadilp08l.d(49):\
    \ Error: slice `result` is not mutable\\n/tmp/tmpadilp08l.d(53): Error: slice\
    \ `result` is not mutable\\n/tmp/tmpadilp08l.d(57): Error: slice `result` is not\
    \ mutable\\n/tmp/tmpadilp08l.d(61): Error: undefined identifier `runtime_error`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpadilp08l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<int, string> map;\n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        string num;\n        map[i] = num;\n    }\n    for(int\
    \ i = 0; i < numbers.size(); i++)\n    {\n        string num;\n        map[i]\
    \ = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string\
    \ num;\n        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n\
    \    {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0;\
    \ i < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n \
    \   {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n \
    \   {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n \
    \   {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n \
    \   {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n \
    \   {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n \
    \   {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++)\n    {\n        string num;\n        map[i] = \nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb91qf5fe.d(13): Error: found `,` when expecting `.` following\
    \ int\\n/tmp/tmpb91qf5fe.d(13): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpb91qf5fe.d(128): Error: expression expected, not `unittest`\\\
    n/tmp/tmpb91qf5fe.d(129): Error: found `{` when expecting `;` following statement\\\
    n/tmp/tmpb91qf5fe.d(138): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb91qf5fe.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> map;\n    map[\"zero\"] = 0;\n    map[\"\
    one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"four\"\
    ] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n\
    \    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n    \n    string result = \"\
    \";\n    \n    foreach(char c in numbers)\n    {\n        string key = to_string(map[c]);\n\
    \        result += key;\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8tl2abww.d(13): Error: found `>` when expecting `.` following\
    \ int\\n/tmp/tmp8tl2abww.d(27): Error: found `in` when expecting `;`\\n/tmp/tmp8tl2abww.d(35):\
    \ Error: declaration expected, not `<`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8tl2abww.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph_bgfe0a.d(14): Error: found `in` when expecting `;`\\n/tmp/tmph_bgfe0a.d(37):\
    \ Error: declaration expected, not `<`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmph_bgfe0a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result = result + c;\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,algorithm |>\n<|\
    \ c |>\nI like your solution, however it does require the user to know that '0'\
    \ is less than '1', and so on. Is there a way to do this without knowing that?\n\
    <|/ c |>\n<| c |>\nYes, you can use a map to convert each character to a number\
    \ and then sort by that number. I'll post an example in a minute.\n<|/ c |>\n\
    <| c |>\nI added an example that converts the string to a map of characters to\
    \ numbers and then sorts by the numbers. Hope that helps.\n<|/ c |>\n<| c |>\n\
    Thanks, this was very helpful.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <vector>\n#include <map>\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1yv1yo4v.d(15): Error: found `in` when expecting `;`\\n/tmp/tmp1yv1yo4v.d(40):\
    \ Error: declaration expected, not `<`\\n/tmp/tmp1yv1yo4v.d(46): Error: unterminated\
    \ character constant\\n/tmp/tmp1yv1yo4v.d(65): Error: declaration expected, not\
    \ `assert`\\n/tmp/tmp1yv1yo4v.d(66): Error: declaration expected, not `assert`\\\
    n/tmp/tmp1yv1yo4v.d(67): Error: declaration expected, not `assert`\\n/tmp/tmp1yv1yo4v.d(68):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp1yv1yo4v.d(69): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp1yv1yo4v.d(70): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1yv1yo4v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjzm2qfth.d(14): Error: found `in` when expecting `;`\\n/tmp/tmpjzm2qfth.d(37):\
    \ Error: declaration expected, not `<`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpjzm2qfth.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        int number = std.atoi(c);\n        \n        result += (number\
    \ < 10) ? \"0\" + number : number; \n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `sort_numbers(\"one\
    \ two three\")`.\n<|/ c |>\n<| c |>\nI fixed it by adding `if (number < 10)` before\
    \ `result += (number < 10) ? \"0\" + number : number; `\n<|/ c |>\n<| c |>\nThat\
    \ doesn't fix it because `number` will still be `0` for `sort_numbers(\"one two\
    \ three\")`.\n<|/ c |>\n<| c |>\nI fixed it by adding `if (number < 10)` before\
    \ `result += (number < 10) ? \"0\" + number : number; `\n<|/ c |>\n<| c |>\nI\
    \ fixed it by adding `if (number < 10)` before `result += (number < 10) ? \"0\"\
    \ + number : number; `\n<|/ c |>\n<| a |>\n<code>\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        int number = std.atoi(c);\n        \n        result += (number\
    \ < 10) ? \"0\" + number : number; \n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=string,sorting,c++ dscore=0 |>\n<| c |>\nThis doesn't work. Try it\
    \ with `sort_numbers(\"one two three\")`.\n<|/ c |>\n<| c |>\nI fixed it by adding\
    \ `if (number < 10)` before `result += (number < 10) ? \"0\" + number : number;\
    \ `\n<|/ c |>\n<| c |>\nI fixed it by adding `if (number < 10)` before `result\
    \ += (number < 10) ? \"0\" + number : number; `\n<|/ c |>\n<| c |>\nI fixed it\
    \ by adding `if (number < 10)` before `result += (number < 10) ? \"0\" + number\
    \ : number; `\n<|/ c |>\n<| a tags=string,sorting,c++ |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <cctype>\nunittest\n{\n    alias\
    \ candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcklyz1st.d(15): Error: found `in` when expecting `;`\\n/tmp/tmpcklyz1st.d(24):\
    \ Error: declaration expected, not `<`\\n/tmp/tmpcklyz1st.d(27): Error: unterminated\
    \ character constant\\n/tmp/tmpcklyz1st.d(33): Error: unterminated character constant\\\
    n/tmp/tmpcklyz1st.d(47): Error: declaration expected, not `foreach`\\n/tmp/tmpcklyz1st.d(51):\
    \ Error: no identifier for declarator `result`\\n/tmp/tmpcklyz1st.d(51): Error:\
    \ declaration expected, not `+=`\\n/tmp/tmpcklyz1st.d(52): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcklyz1st.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphjc7hk7m.d(15): Error: found `in` when expecting `;`\\n/tmp/tmphjc7hk7m.d(40):\
    \ Error: declaration expected, not `<`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmphjc7hk7m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    stringstream ss;\n    vector<string> numbers_vec;\n    vector<string>\
    \ sorted_numbers_vec;\n    vector<string> sorted_numbers_vec_temp;\n    vector<string>\
    \ sorted_numbers_vec_temp_temp;\n    vector<string> sorted_numbers_vec_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp;\n    vector<string>\
    \ sorted_numbers_vec_temp_temp_temp_temp_temp;\n    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp;\n \
    \   vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoqyf_yn8.d(14): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(15): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(16): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(17): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(18): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(19): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(20): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(21): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(22): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(23): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(24): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(25): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(26): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(27): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(28): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(29): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(30): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(31): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(32): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpoqyf_yn8.d(33): Error: found `>` when expecting `;` following\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoqyf_yn8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\
    \ {\n        switch(c) {\n            case '0':\n            case '1':\n     \
    \       case '2':\n            case '3':\n            case '4':\n            case\
    \ '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid choice\";\n        }\n\
    \    }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,c++,string |>\n<| c |>\nI like your solution, but\
    \ I wonder if there is a way to do it without using strings. I guess I could use\
    \ chars, but that would require me to convert them to strings. I wonder if there\
    \ is a way to do it without using strings. I guess I could use chars, but that\
    \ would require me to convert them to strings. I wonder if there is a way to do\
    \ it without using strings. I guess I could use chars, but that would require\
    \ me to convert them to strings. I wonder if there is a way to do it without using\
    \ strings. I guess I could use chars, but that would require me to convert them\
    \ to strings. I wonder if there is a way to do it without using strings. I guess\
    \ I could use chars, but that would require me to convert them to strings. I wonder\
    \ if there is a way to do it without using strings. I guess I could use chars,\
    \ but that would require me to convert them to strings. I wonder if there is a\
    \ way to do it without using strings. I guess I could use chars, but that would\
    \ require me to convert them to strings. I wonder if there is a way to do it without\
    \ using strings. I guess I could use chars, but that would require me to convert\
    \ them to strings. I wonder if there is a way to do it without using strings.\
    \ I guess I could use chars, but that would require me to convert them to strings.\
    \ I wonder if there is a way to do it without using strings. I guess I could use\
    \ chars, but that would require me to convert them to strings. I wonder if there\
    \ is a way to do it without using strings. I guess I could use chars, but that\
    \ would require me to convert them to strings. I wonder if there is a way to do\
    \ it without using strings. I guess I could use chars, but that would require\
    \ me to convert them to strings. I wonder if there is a way to do it without using\
    \ strings. I guess I could use chars, but that would require me to convert them\
    \ to strings. I wonder if there is a way to do it without using strings. I guess\
    \ I could use chars, but that would require me to convert them to strings. I wonder\
    \ if there is a way to do it without using strings. I guess I could use chars,\
    \ but that would require me to convert them to strings. I \nunittest\n{\n    alias\
    \ candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvz5fghrj.d(15): Error: found `in` when expecting `;`\\n/tmp/tmpvz5fghrj.d(38):\
    \ Error: declaration expected, not `<`\\n/tmp/tmpvz5fghrj.d(46): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpvz5fghrj.d(47): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpvz5fghrj.d(48): Error: declaration expected, not `assert`\\\
    n/tmp/tmpvz5fghrj.d(49): Error: declaration expected, not `assert`\\n/tmp/tmpvz5fghrj.d(50):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpvz5fghrj.d(51): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvz5fghrj.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid number \" + numbers);\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting\
    \ |>\n<| c |>\nI like the idea of using a switch statement to map the characters\
    \ to numbers. But this doesn't work for \"one two three\" which should return\
    \ \"one two three\" but instead returns \"one two threethree\"\n<|/ c |>\n<| c\
    \ |>\nI fixed the bug in my code (I forgot to put a break statement after each\
    \ case). Thanks for pointing that out.\n<|/ c |>\n<| a tags=c++,sorting |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi_xxocf0.d(15): Error: found `in` when expecting `;`\\n/tmp/tmpi_xxocf0.d(40):\
    \ Error: declaration expected, not `<`\\n/tmp/tmpi_xxocf0.d(43): Error: unterminated\
    \ character constant\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi_xxocf0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<int, int> map;\n    map[0] = 0;\n    map[1] = 1;\n   \
    \ map[2] = 2;\n    map[3] = 3;\n    map[4] = 4;\n    map[5] = 5;\n    map[6] =\
    \ 6;\n    map[7] = 7;\n    map[8] = 8;\n    map[9] = 9;\n    \n    string result\
    \ = \"\";\n    \n    foreach(char c in numbers)\n    {\n        int number = map[c];\n\
    \        result += to_string(number);\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <vector>\n#include <algorithm>\nunittest\n{\n    alias candidate\
    \ = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdd6uxr5r.d(13): Error: found `,` when expecting `.` following\
    \ int\\n/tmp/tmpdd6uxr5r.d(13): Error: found `int` when expecting identifier following\
    \ `int`.\\n/tmp/tmpdd6uxr5r.d(13): Error: found `>` when expecting `;` following\
    \ statement\\n/tmp/tmpdd6uxr5r.d(27): Error: found `in` when expecting `;`\\n/tmp/tmpdd6uxr5r.d(35):\
    \ Error: declaration expected, not `<`\\n/tmp/tmpdd6uxr5r.d(47): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpdd6uxr5r.d(48): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpdd6uxr5r.d(49): Error: declaration expected, not `assert`\\\
    n/tmp/tmpdd6uxr5r.d(50): Error: declaration expected, not `assert`\\n/tmp/tmpdd6uxr5r.d(51):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpdd6uxr5r.d(52): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdd6uxr5r.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
