language: d
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a |>\n<code>\n#include\
    \ <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe5356d4t.d(15): Error: found `in` when expecting `;`\n/tmp/tmpe5356d4t.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpe5356d4t.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmpe5356d4t.d(53): Error: declaration expected, not
    `assert`\n/tmp/tmpe5356d4t.d(54): Error: declaration expected, not `assert`\n/tmp/tmpe5356d4t.d(55):
    Error: declaration expected, not `assert`\n/tmp/tmpe5356d4t.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmpe5356d4t.d(57): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5356d4t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try\
    \ it with `\"one two three\"`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting. Try it again with `\"one two three\"`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for `\"one two three\"` because `sort_numbers` doesn't handle that case.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I'll fix it.\n<|/ c |>\n<| c |>\nI fixed\
    \ it now. Thanks for pointing that out.\n<|/ c |>\n<| a tags=c++,sorting |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfalcwh2q.d(15): Error: found `in` when expecting `;`\n/tmp/tmpfalcwh2q.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpfalcwh2q.d(43): Error: unterminated
    character constant\n/tmp/tmpfalcwh2q.d(49): Error: unterminated character constant\n/tmp/tmpfalcwh2q.d(49):
    Error: unterminated character constant\n/tmp/tmpfalcwh2q.d(52): Error: unterminated
    character constant\n/tmp/tmpfalcwh2q.d(67): Error: declaration expected, not `assert`\n/tmp/tmpfalcwh2q.d(68):
    Error: declaration expected, not `assert`\n/tmp/tmpfalcwh2q.d(69): Error: declaration
    expected, not `assert`\n/tmp/tmpfalcwh2q.d(70): Error: declaration expected, not
    `assert`\n/tmp/tmpfalcwh2q.d(71): Error: declaration expected, not `assert`\n/tmp/tmpfalcwh2q.d(72):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfalcwh2q.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0': result += \" zero \"\
    ;\n                break;\n            case '1': result += \" one \";\n      \
    \          break;\n            case '2': result += \" two \";\n              \
    \  break;\n            case '3': result += \" three \";\n                break;\n\
    \            case '4': result += \" four \";\n                break;\n       \
    \     case '5': result += \" five \";\n                break;\n            case\
    \ '6': result += \" six \";\n                break;\n            case '7': result\
    \ += \" seven \";\n                break;\n            case '8': result += \"\
    \ eight \";\n                break;\n            case '9': result += \" nine \"\
    ;\n                break;\n            default:\n                result += c;\n\
    \                break;\n        }\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n \
    \   assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwo4kd13g.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwo4kd13g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> map;\n    map[\"zero\"] = 0;\n    map[\"\
    one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"four\"\
    ] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n\
    \    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n    map[\"ten\"] = 10;\n   \
    \ map[\"eleven\"] = 11;\n    map[\"twelve\"] = 12;\n    map[\"thirteen\"] = 13;\n\
    \    map[\"fourteen\"] = 14;\n    map[\"fifteen\"] = 15;\n    map[\"sixteen\"\
    ] = 16;\n    map[\"seventeen\"] = 17;\n    map[\"eighteen\"] = 18;\n    map[\"\
    nineteen\"] = 19;\n    map[\"twenty\"] = 20;\n    map[\"thirty\"] = 30;\n    map[\"\
    forty\"] = 31;\n    map[\"fifty\"] = 30;\n    map[\"sixty\"] = 30;\n    map[\"\
    seventy\"] = 30;\n    map[\"eighty\"] = 30;\n    map[\"ninety\"] = 30;\n    map[\"\
    hundred\"] = 100;\n    map[\"thousand\"] = 1000;\n    map[\"million\"] = 1000000;\n\
    \    map[\"billion\"] = 1000000000;\n    map[\"trillion\"] = 1000000000000;\n\
    \    map[\"quadrillion\"] = 1000000000000000;\n    map[\"quintillion\"] = 1000000000000000000;\n\
    \    map[\"sextillion\"] = 100000000000000000000;\n    map[\"septillion\"] = 100000000000000000000000;\n\
    \    map[\"octillion\"] = 100000000000000000000000000;\n    map[\"nonillion\"\
    ] = 10000000000000000000000000000;\n    map[\"decillion\"] = 10000000000000000000000000000000;\n\
    \    map[\"undecillion\"] = 1000000000000000000000000000000000;\n    map[\"duodecillion\"\
    ] = 10000000000000000000000000000000001;\n    map[\"tredecillion\"] = 100000000000000000000000000000000010;\n\
    \    map[\"quattuordecillion\"] = 1000000000000000000000000000000000100;\n   \
    \ map[\"quindecillion\"] = 10000000000000000000000000000000001000;\n    map[\"\
    sexdecillion\"] = 100000000000000000000000000000000010000;\n    map[\"septendecillion\"\
    ] = 1000000000000000000000000000000000100000;\n    map[\"octodecillion\"] = 10000000000000000000000000000000001000000;\n\
    \    map[\"novemdec\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphy61y3yn.d(13): Error: found `>` when expecting `.` following
    int\n/tmp/tmphy61y3yn.d(49): Error: integer overflow\n/tmp/tmphy61y3yn.d(50):
    Error: integer overflow\n/tmp/tmphy61y3yn.d(51): Error: integer overflow\n/tmp/tmphy61y3yn.d(52):
    Error: integer overflow\n/tmp/tmphy61y3yn.d(53): Error: integer overflow\n/tmp/tmphy61y3yn.d(54):
    Error: integer overflow\n/tmp/tmphy61y3yn.d(55): Error: integer overflow\n/tmp/tmphy61y3yn.d(56):
    Error: integer overflow\n/tmp/tmphy61y3yn.d(57): Error: integer overflow\n/tmp/tmphy61y3yn.d(58):
    Error: integer overflow\n/tmp/tmphy61y3yn.d(59): Error: integer overflow\n/tmp/tmphy61y3yn.d(60):
    Error: integer overflow\n/tmp/tmphy61y3yn.d(61): Error: integer overflow\n/tmp/tmphy61y3yn.d(62):
    Error: unterminated string constant starting at /tmp/tmphy61y3yn.d(71)\n/tmp/tmphy61y3yn.d(67):
    Error: Implicit string concatenation is deprecated, use "novemdec\\x0aunittest\\x0a{\\x0a    alias
    candidate = sort_numbers;\\x0a\\x0a    assert(candidate(" ~ ") == " instead\n/tmp/tmphy61y3yn.d(67):
    Error: Implicit string concatenation is deprecated, use ") == " ~ ");\\x0a    assert(candidate("
    instead\n/tmp/tmphy61y3yn.d(68): Error: found `three` when expecting `,`\n/tmp/tmphy61y3yn.d(68):
    Error: found `three` when expecting `,`\n/tmp/tmphy61y3yn.d(69): Error: found
    `three` when expecting `,`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphy61y3yn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        int number = std.atoi(c);\n        string digit = std.format(\"\
    %0d\", number);\n        result += digit;\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,c++,algorithm |>\n<| c |>\n\
    This doesn't work. Try it with `\"one two three\"`.\n<|/ c |>\n<| c |>\nIt works\
    \ fine for me. Try it here: http://ideone.com/7nKKz\n<|/ c |>\n<| c |>\nI see\
    \ what you mean. I've edited my answer to fix the bug. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| c |>\nI see what you mean. I've edited my answer to fix the\
    \ bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI see what you mean. I've\
    \ edited my answer to fix the bug. Thanks for pointing it out.\n<|/ c |>\n<| a\
    \ tags=sorting,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwuc4qzo1.d(14): Error: found `in` when expecting `;`\n/tmp/tmpwuc4qzo1.d(23):
    Error: declaration expected, not `<`\n/tmp/tmpwuc4qzo1.d(26): Error: unterminated
    character constant\n/tmp/tmpwuc4qzo1.d(32): Error: unterminated character constant\n/tmp/tmpwuc4qzo1.d(35):
    Error: unterminated character constant\n/tmp/tmpwuc4qzo1.d(38): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwuc4qzo1.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        char c = numbers[i];\n        if(isdigit(c))\n        {\n\
    \            int number = c - '0';\n            result += std.string(number);\n\
    \        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c |>\nThis is not the best solution.\
    \ Using `std::sort` will sort your string in lexicographical order. Which means\
    \ `'2'` will come before `'10'`, which is not the case here.\n<|/ c |>\n<| c |>\n\
    I agree, but I thought the OP was just trying to sort the numbers. I added a solution\
    \ that sorts the numbers in numerical order.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, but I thought the OP was just trying to sort the numbers. I added a solution\
    \ that sorts the numbers in numerical order.\n<|/ c |>\n<| a tags=c++,sorting,string\
    \ |>\nThe best solution is to use std::sort with a custom comparator:\n<code>\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxijv1swr.d(26): Error: declaration expected, not `<`\n/tmp/tmpxijv1swr.d(44):
    Error: declaration expected, not `assert`\n/tmp/tmpxijv1swr.d(45): Error: declaration
    expected, not `assert`\n/tmp/tmpxijv1swr.d(46): Error: declaration expected, not
    `assert`\n/tmp/tmpxijv1swr.d(47): Error: declaration expected, not `assert`\n/tmp/tmpxijv1swr.d(48):
    Error: declaration expected, not `assert`\n/tmp/tmpxijv1swr.d(49): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxijv1swr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid choice\";\n        }\n\
    \    }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,c++,string |>\n<| c |>\nI like this solution, but I wonder\
    \ if it would be more efficient to convert the string to a vector of ints and\
    \ then sort that vector?\n<|/ c |>\n<| c |>\n: Yes, that would be more efficient.\
    \ `std::sort` will do that for you. `std::sort` will also do that for you, if\
    \ you use `std::istringstream` to read your input into a `std::vector`.\n<|/ c\
    \ |>\n<| c |>\n: I added a version that uses `std::sort` instead of `std::istringstream`.\n\
    <|/ c |>\n<| c |>\n: I added a version that uses `std::sort` instead of `std::istringstream`.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx04ompzb.d(14): Error: found `in` when expecting `;`\n/tmp/tmpx04ompzb.d(37):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpx04ompzb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> map;\n    map[\"zero\"] = 0;\n    map[\"\
    one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"four\"\
    ] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n\
    \    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n    \n    vector<string> numbers_split;\n\
    \    \n    foreach(char c in numbers)\n    {\n        numbers_split.push_back(c);\n\
    \    }\n    \n    sort(numbers_split.begin(), numbers_split.end(), [](const string\
    \ &a, const string &b) -> bool\n    {\n        string a_str = a;\n        string\
    \ b_str = b;\n        \n        int a_int = std.string.to<int>(a_str);\n     \
    \   int b_int = std.string.to<int>(b_str);\n        \n        return a_int < b_int\
    \ ? true : a_int > b_int ? false : false;\n    });\n    \n    string result =\
    \ \"\";\n    \n    foreach(string s in numbers_split)\n    {\n        result +=\
    \ map[s];\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpui4xem_e.d(13): Error: found `>` when expecting `.` following
    int\n/tmp/tmpui4xem_e.d(25): Error: found `>` when expecting `;` following statement\n/tmp/tmpui4xem_e.d(27):
    Error: found `in` when expecting `;`\n/tmp/tmpui4xem_e.d(32): Error: `(arguments)`
    expected following `const(string)`\n/tmp/tmpui4xem_e.d(32): Error: `(arguments)`
    expected following `const(string)`\n/tmp/tmpui4xem_e.d(32): Error: expression
    expected, not `>`\n/tmp/tmpui4xem_e.d(32): Error: found `bool` when expecting
    `,`\n/tmp/tmpui4xem_e.d(37): Error: found `>` when expecting `.` following int\n/tmp/tmpui4xem_e.d(37):
    Error: found `(` when expecting identifier following `int`.\n/tmp/tmpui4xem_e.d(37):
    Error: semicolon expected, not `a_str`\n/tmp/tmpui4xem_e.d(37): Error: found `)`
    when expecting `;` following statement\n/tmp/tmpui4xem_e.d(37): Deprecation: use
    `{ }` for an empty statement, not `;`\n/tmp/tmpui4xem_e.d(38): Error: found `>`
    when expecting `.` following int\n/tmp/tmpui4xem_e.d(38): Error: found `(` when
    expecting identifier following `int`.\n/tmp/tmpui4xem_e.d(38): Error: semicolon
    expected, not `b_str`\n/tmp/tmpui4xem_e.d(38): Error: found `)` when expecting
    `;` following statement\n/tmp/tmpui4xem_e.d(38): Deprecation: use `{ }` for an
    empty statement, not `;`\n/tmp/tmpui4xem_e.d(45): Error: found `in` when expecting
    `;`\n/tmp/tmpui4xem_e.d(52): Error: declaration expected, not `<`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpui4xem_e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < numbers.size();\
    \ ++i)\n    {\n        string num = numbers[i];\n        \n        if(num == \"\
    zero\")\n        {\n            result += \"zero\";\n        }\n        else if(num\
    \ == \"one\")\n        {\n            result += \"one\";\n        }\n        else\
    \ if(num == \"two\")\n        {\n            result += \"two\";\n        }\n \
    \       else if(num == \"three\")\n        {\n            result += \"three\"\
    ;\n        }\n        else if(num == \"four\")\n        {\n            result\
    \ += \"four\";\n        }\n        else if(num == \"five\")\n        {\n     \
    \       result += \"five\";\n        }\n        else if(num == \"six\")\n    \
    \    {\n            result += \"six\";\n        }\n        else if(num == \"seven\"\
    )\n        {\n            result += \"seven\";\n        }\n        else if(num\
    \ == \"eight\")\n        {\n            result += \"eight\";\n        }\n    \
    \    else if(num == \"nine\")\n        {\n            result += \"nine\";\n  \
    \      }\n        else\n        {\n            throw runtime_error(\"Invalid number\
    \ \" + num);\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five\
    \ nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpadilp08l.d(15): Error: no property `size` for type `string`\n/tmp/tmpadilp08l.d(17):
    Error: cannot implicitly convert expression `numbers[cast(ulong)i]` of type `immutable(char)`
    to `string`\n/tmp/tmpadilp08l.d(21): Error: slice `result` is not mutable\n/tmp/tmpadilp08l.d(25):
    Error: slice `result` is not mutable\n/tmp/tmpadilp08l.d(29): Error: slice `result`
    is not mutable\n/tmp/tmpadilp08l.d(33): Error: slice `result` is not mutable\n/tmp/tmpadilp08l.d(37):
    Error: slice `result` is not mutable\n/tmp/tmpadilp08l.d(41): Error: slice `result`
    is not mutable\n/tmp/tmpadilp08l.d(45): Error: slice `result` is not mutable\n/tmp/tmpadilp08l.d(49):
    Error: slice `result` is not mutable\n/tmp/tmpadilp08l.d(53): Error: slice `result`
    is not mutable\n/tmp/tmpadilp08l.d(57): Error: slice `result` is not mutable\n/tmp/tmpadilp08l.d(61):
    Error: undefined identifier `runtime_error`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpadilp08l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<int, string> map;\n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        string num;\n        map[i] = num;\n    }\n    for(int\
    \ i = 0; i < numbers.size(); i++)\n    {\n        string num;\n        map[i]\
    \ = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string\
    \ num;\n        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n\
    \    {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0;\
    \ i < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n \
    \   {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n \
    \   {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n \
    \   {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n \
    \   {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n \
    \   {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n \
    \   {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++)\n    {\n        string num;\n        map[i] = \nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb91qf5fe.d(13): Error: found `,` when expecting `.` following
    int\n/tmp/tmpb91qf5fe.d(13): Error: found `>` when expecting `;` following statement\n/tmp/tmpb91qf5fe.d(128):
    Error: expression expected, not `unittest`\n/tmp/tmpb91qf5fe.d(129): Error: found
    `{` when expecting `;` following statement\n/tmp/tmpb91qf5fe.d(138): Error: found
    `End of File` when expecting `}` following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpb91qf5fe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> map;\n    map[\"zero\"] = 0;\n    map[\"\
    one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"four\"\
    ] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n\
    \    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n    \n    string result = \"\
    \";\n    \n    foreach(char c in numbers)\n    {\n        string key = to_string(map[c]);\n\
    \        result += key;\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8tl2abww.d(13): Error: found `>` when expecting `.` following
    int\n/tmp/tmp8tl2abww.d(27): Error: found `in` when expecting `;`\n/tmp/tmp8tl2abww.d(35):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8tl2abww.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph_bgfe0a.d(14): Error: found `in` when expecting `;`\n/tmp/tmph_bgfe0a.d(37):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmph_bgfe0a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result = result + c;\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,algorithm |>\n<|\
    \ c |>\nI like your solution, however it does require the user to know that '0'\
    \ is less than '1', and so on. Is there a way to do this without knowing that?\n\
    <|/ c |>\n<| c |>\nYes, you can use a map to convert each character to a number\
    \ and then sort by that number. I'll post an example in a minute.\n<|/ c |>\n\
    <| c |>\nI added an example that converts the string to a map of characters to\
    \ numbers and then sorts by the numbers. Hope that helps.\n<|/ c |>\n<| c |>\n\
    Thanks, this was very helpful.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <vector>\n#include <map>\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1yv1yo4v.d(15): Error: found `in` when expecting `;`\n/tmp/tmp1yv1yo4v.d(40):
    Error: declaration expected, not `<`\n/tmp/tmp1yv1yo4v.d(46): Error: unterminated
    character constant\n/tmp/tmp1yv1yo4v.d(65): Error: declaration expected, not `assert`\n/tmp/tmp1yv1yo4v.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmp1yv1yo4v.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmp1yv1yo4v.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmp1yv1yo4v.d(69): Error: declaration expected, not `assert`\n/tmp/tmp1yv1yo4v.d(70):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1yv1yo4v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjzm2qfth.d(14): Error: found `in` when expecting `;`\n/tmp/tmpjzm2qfth.d(37):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpjzm2qfth.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        int number = std.atoi(c);\n        \n        result += (number\
    \ < 10) ? \"0\" + number : number; \n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `sort_numbers(\"one\
    \ two three\")`.\n<|/ c |>\n<| c |>\nI fixed it by adding `if (number < 10)` before\
    \ `result += (number < 10) ? \"0\" + number : number; `\n<|/ c |>\n<| c |>\nThat\
    \ doesn't fix it because `number` will still be `0` for `sort_numbers(\"one two\
    \ three\")`.\n<|/ c |>\n<| c |>\nI fixed it by adding `if (number < 10)` before\
    \ `result += (number < 10) ? \"0\" + number : number; `\n<|/ c |>\n<| c |>\nI\
    \ fixed it by adding `if (number < 10)` before `result += (number < 10) ? \"0\"\
    \ + number : number; `\n<|/ c |>\n<| a |>\n<code>\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        int number = std.atoi(c);\n        \n        result += (number\
    \ < 10) ? \"0\" + number : number; \n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=string,sorting,c++ dscore=0 |>\n<| c |>\nThis doesn't work. Try it\
    \ with `sort_numbers(\"one two three\")`.\n<|/ c |>\n<| c |>\nI fixed it by adding\
    \ `if (number < 10)` before `result += (number < 10) ? \"0\" + number : number;\
    \ `\n<|/ c |>\n<| c |>\nI fixed it by adding `if (number < 10)` before `result\
    \ += (number < 10) ? \"0\" + number : number; `\n<|/ c |>\n<| c |>\nI fixed it\
    \ by adding `if (number < 10)` before `result += (number < 10) ? \"0\" + number\
    \ : number; `\n<|/ c |>\n<| a tags=string,sorting,c++ |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <cctype>\nunittest\n{\n    alias\
    \ candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcklyz1st.d(15): Error: found `in` when expecting `;`\n/tmp/tmpcklyz1st.d(24):
    Error: declaration expected, not `<`\n/tmp/tmpcklyz1st.d(27): Error: unterminated
    character constant\n/tmp/tmpcklyz1st.d(33): Error: unterminated character constant\n/tmp/tmpcklyz1st.d(47):
    Error: declaration expected, not `foreach`\n/tmp/tmpcklyz1st.d(51): Error: no
    identifier for declarator `result`\n/tmp/tmpcklyz1st.d(51): Error: declaration
    expected, not `+=`\n/tmp/tmpcklyz1st.d(52): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcklyz1st.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphjc7hk7m.d(15): Error: found `in` when expecting `;`\n/tmp/tmphjc7hk7m.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmphjc7hk7m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    stringstream ss;\n    vector<string> numbers_vec;\n    vector<string>\
    \ sorted_numbers_vec;\n    vector<string> sorted_numbers_vec_temp;\n    vector<string>\
    \ sorted_numbers_vec_temp_temp;\n    vector<string> sorted_numbers_vec_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp;\n    vector<string>\
    \ sorted_numbers_vec_temp_temp_temp_temp_temp;\n    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp;\n \
    \   vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoqyf_yn8.d(14): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(15): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(16): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(17): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(18): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(19): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(20): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(21): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(22): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(23): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(24): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(25): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(26): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(27): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(28): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(29): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(30): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(31): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(32): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpoqyf_yn8.d(33): Error: found `>` when expecting `;` following
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoqyf_yn8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\
    \ {\n        switch(c) {\n            case '0':\n            case '1':\n     \
    \       case '2':\n            case '3':\n            case '4':\n            case\
    \ '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid choice\";\n        }\n\
    \    }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,c++,string |>\n<| c |>\nI like your solution, but\
    \ I wonder if there is a way to do it without using strings. I guess I could use\
    \ chars, but that would require me to convert them to strings. I wonder if there\
    \ is a way to do it without using strings. I guess I could use chars, but that\
    \ would require me to convert them to strings. I wonder if there is a way to do\
    \ it without using strings. I guess I could use chars, but that would require\
    \ me to convert them to strings. I wonder if there is a way to do it without using\
    \ strings. I guess I could use chars, but that would require me to convert them\
    \ to strings. I wonder if there is a way to do it without using strings. I guess\
    \ I could use chars, but that would require me to convert them to strings. I wonder\
    \ if there is a way to do it without using strings. I guess I could use chars,\
    \ but that would require me to convert them to strings. I wonder if there is a\
    \ way to do it without using strings. I guess I could use chars, but that would\
    \ require me to convert them to strings. I wonder if there is a way to do it without\
    \ using strings. I guess I could use chars, but that would require me to convert\
    \ them to strings. I wonder if there is a way to do it without using strings.\
    \ I guess I could use chars, but that would require me to convert them to strings.\
    \ I wonder if there is a way to do it without using strings. I guess I could use\
    \ chars, but that would require me to convert them to strings. I wonder if there\
    \ is a way to do it without using strings. I guess I could use chars, but that\
    \ would require me to convert them to strings. I wonder if there is a way to do\
    \ it without using strings. I guess I could use chars, but that would require\
    \ me to convert them to strings. I wonder if there is a way to do it without using\
    \ strings. I guess I could use chars, but that would require me to convert them\
    \ to strings. I wonder if there is a way to do it without using strings. I guess\
    \ I could use chars, but that would require me to convert them to strings. I wonder\
    \ if there is a way to do it without using strings. I guess I could use chars,\
    \ but that would require me to convert them to strings. I \nunittest\n{\n    alias\
    \ candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvz5fghrj.d(15): Error: found `in` when expecting `;`\n/tmp/tmpvz5fghrj.d(38):
    Error: declaration expected, not `<`\n/tmp/tmpvz5fghrj.d(46): Error: declaration
    expected, not `assert`\n/tmp/tmpvz5fghrj.d(47): Error: declaration expected, not
    `assert`\n/tmp/tmpvz5fghrj.d(48): Error: declaration expected, not `assert`\n/tmp/tmpvz5fghrj.d(49):
    Error: declaration expected, not `assert`\n/tmp/tmpvz5fghrj.d(50): Error: declaration
    expected, not `assert`\n/tmp/tmpvz5fghrj.d(51): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvz5fghrj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid number \" + numbers);\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting\
    \ |>\n<| c |>\nI like the idea of using a switch statement to map the characters\
    \ to numbers. But this doesn't work for \"one two three\" which should return\
    \ \"one two three\" but instead returns \"one two threethree\"\n<|/ c |>\n<| c\
    \ |>\nI fixed the bug in my code (I forgot to put a break statement after each\
    \ case). Thanks for pointing that out.\n<|/ c |>\n<| a tags=c++,sorting |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi_xxocf0.d(15): Error: found `in` when expecting `;`\n/tmp/tmpi_xxocf0.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpi_xxocf0.d(43): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_xxocf0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<int, int> map;\n    map[0] = 0;\n    map[1] = 1;\n   \
    \ map[2] = 2;\n    map[3] = 3;\n    map[4] = 4;\n    map[5] = 5;\n    map[6] =\
    \ 6;\n    map[7] = 7;\n    map[8] = 8;\n    map[9] = 9;\n    \n    string result\
    \ = \"\";\n    \n    foreach(char c in numbers)\n    {\n        int number = map[c];\n\
    \        result += to_string(number);\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <vector>\n#include <algorithm>\nunittest\n{\n    alias candidate\
    \ = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdd6uxr5r.d(13): Error: found `,` when expecting `.` following
    int\n/tmp/tmpdd6uxr5r.d(13): Error: found `int` when expecting identifier following
    `int`.\n/tmp/tmpdd6uxr5r.d(13): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpdd6uxr5r.d(27): Error: found `in` when expecting `;`\n/tmp/tmpdd6uxr5r.d(35):
    Error: declaration expected, not `<`\n/tmp/tmpdd6uxr5r.d(47): Error: declaration
    expected, not `assert`\n/tmp/tmpdd6uxr5r.d(48): Error: declaration expected, not
    `assert`\n/tmp/tmpdd6uxr5r.d(49): Error: declaration expected, not `assert`\n/tmp/tmpdd6uxr5r.d(50):
    Error: declaration expected, not `assert`\n/tmp/tmpdd6uxr5r.d(51): Error: declaration
    expected, not `assert`\n/tmp/tmpdd6uxr5r.d(52): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdd6uxr5r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<int, string> map;\n    map[0] = \"zero\";\n    map[1]\
    \ = \"one\";\n    map[2] = \"two\";\n    map[3] = \"three\";\n    map[4] = \"\
    four\";\n    map[5] = \"five\";\n    map[6] = \"six\";\n    map[7] = \"seven\"\
    ;\n    map[8] = \"eight\";\n    map[9] = \"nine\";\n    \n    string result =\
    \ \"\";\n    \n    for(int i = 0; i < numbers.size(); ++i)\n    {\n        string\
    \ number = numbers[i];\n        \n        for(int j = 0; j < number.length();\
    \ ++j)\n        {\n            int number = number[j];\n            \n       \
    \     string choice = map[number];\n            \n            if(choice != \"\"\
    )\n            {\n                result += choice;\n            }\n        }\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c\
    \ |>\nThanks so much for the help! I appreciate it!\n<|/ c |>\n<| c |>\nI added\
    \ a version that doesn't use maps, just for fun.\n<|/ c |>\n<| c |>\nThanks so\
    \ much for the help! I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4qtlc8rc.d(13): Error: found `,` when expecting `.` following
    int\n/tmp/tmp4qtlc8rc.d(13): Error: found `>` when expecting `;` following statement\n/tmp/tmp4qtlc8rc.d(46):
    Error: declaration expected, not `<`\n/tmp/tmp4qtlc8rc.d(52): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4qtlc8rc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> map;\n    map[\"zero\"] = 0;\n    map[\"\
    one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"four\"\
    ] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n\
    \    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n    \n    string result = \"\
    \";\n    \n    foreach(char c in numbers)\n    {\n        int value = map[c];\n\
    \        result += to_string(value);\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphda19dfc.d(13): Error: found `>` when expecting `.` following
    int\n/tmp/tmphda19dfc.d(27): Error: found `in` when expecting `;`\n/tmp/tmphda19dfc.d(35):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmphda19dfc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        string number = numbers[i];\n        if(number == \"zero\"\
    )\n            number = \"one\";\n        else if(number == \"one\")\n       \
    \     number = \"two\";\n        else if(number == \"two\")\n            number\
    \ = \"three\";\n        else if(number == \"three\")\n            number = \"\
    four\";\n        else if(number == \"four\")\n            number = \"five\";\n\
    \        else if(number == \"five\")\n            number = \"six\";\n        else\
    \ if(number == \"six\")\n            number = \"seven\";\n        else if(number\
    \ == \"seven\")\n            number = \"eight\";\n        else if(number == \"\
    eight\")\n            number = \"nine\";\n        else if(number == \"nine\")\n\
    \            number = \"zero\";\n        result += number;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv9wuhi87.d(41): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv9wuhi87.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result = result + c;\n        \
    \        break;\n            default:\n                throw new Exception(\"\
    Invalid choice\");\n        }\n    }\n    sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nstring sort_numbers(string numbers)\
    \ \n{\n    string result = \"\";\n    foreach(char c in numbers)\n    {\n    \
    \    switch(c)\n        {\n            case '0':\n            case '1':\n    \
    \        case '2':\n            case '3':\n            case '4':\n           \
    \ case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result = result + c;\n               \
    \ break;\n            default:\n                throw new Exception(\"Invalid\
    \ choice\");\n        }\n    }\n    sort(result);\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting dscore=2 |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n \
    \   alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi3f6h7b_.d(14): Error: found `in` when expecting `;`\n/tmp/tmpi3f6h7b_.d(37):
    Error: declaration expected, not `<`\n/tmp/tmpi3f6h7b_.d(44): Error: declaration
    expected, not `foreach`\n/tmp/tmpi3f6h7b_.d(59): Error: declaration expected,
    not `break`\n/tmp/tmpi3f6h7b_.d(60): Error: declaration expected, not `default`\n/tmp/tmpi3f6h7b_.d(62):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi3f6h7b_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid number in sort_numbers: \" + numbers);\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=c++,sorting |>\nI wrote a program to sort numbers in ascending order\
    \ using C++.\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpijqodcet.d(15): Error: found `in` when expecting `;`\n/tmp/tmpijqodcet.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpijqodcet.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> map;\n    map[\"zero\"] = 0;\n    map[\"\
    one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"four\"\
    ] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n\
    \    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n    \n    string result = \"\
    \";\n    \n    foreach(char c in numbers)\n    {\n        int number = map[c];\n\
    \        result += to_string(number);\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting |>\n<| c |>\nI like your solution, but I wonder if there\
    \ is a way to avoid the map and just use string::find and string::substr.\n<|/\
    \ c |>\n<| c |>\nYes, but that would require a lot of code duplication. I'd rather\
    \ not do that. :)\n<|/ c |>\n<| c |>\nI like your solution, but I wonder if there\
    \ is a way to avoid the map and just use string::find and string::substr.\n<|/\
    \ c |>\n<| c |>\nI like your solution, but I wonder if there is a way to avoid\
    \ the map and just use string::find and string::substr.\n<|/ c |>\n<| c |>\nI\
    \ like your solution, but I wonder if there is a way to avoid the map and just\
    \ use string::find and string::substr.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I wonder if there is a way to avoid the map and just use string::find and\
    \ string::substr.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n    alias\
    \ candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9vjheiin.d(13): Error: found `>` when expecting `.` following
    int\n/tmp/tmp9vjheiin.d(27): Error: found `in` when expecting `;`\n/tmp/tmp9vjheiin.d(35):
    Error: declaration expected, not `<`\n/tmp/tmp9vjheiin.d(41): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9vjheiin.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result = result + c;\n        \
    \        break;\n            default:\n                throw new Exception(\"\
    Invalid number: \" + numbers);\n        }\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nI like the\
    \ idea of using a switch statement to map the characters to numbers. I like your\
    \ use of exceptions though. I'll have to look into that more. Thanks!\n<|/ c |>\n\
    <| c |>\nI added a version that uses exceptions instead of switch statements.\n\
    <|/ c |>\n<| c |>\nI added a version that uses exceptions instead of switch statements.\n\
    <|/ c |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n \
    \   alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyva1id6w.d(14): Error: found `in` when expecting `;`\n/tmp/tmpyva1id6w.d(37):
    Error: declaration expected, not `<`\n/tmp/tmpyva1id6w.d(40): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyva1id6w.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid number '\" + c + \"'\");\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzgqoz855.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzgqoz855.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8fywq8vo.d(15): Error: found `in` when expecting `;`\n/tmp/tmp8fywq8vo.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8fywq8vo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> map;\n    map[\"zero\"] = 0;\n    map[\"\
    one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"four\"\
    ] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n\
    \    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n    map[\"ten\"] = 10;\n   \
    \ map[\"eleven\"] = 11;\n    map[\"twelve\"] = 12;\n    map[\"thirteen\"] = 13;\n\
    \    map[\"fourteen\"] = 14;\n    map[\"fifteen\"] = 15;\n    map[\"sixteen\"\
    ] = 16;\n    map[\"seventeen\"] = 17;\n    map[\"eighteen\"] = 18;\n    map[\"\
    nineteen\"] = 19;\n    map[\"twenty\"] = 20;\n    map[\"thirty\"] = 30;\n    map[\"\
    forty\"] = 31;\n    map[\"fifty\"] = 30;\n    map[\"sixty\"] = 30;\n    map[\"\
    seventy\"] = 30;\n    map[\"eighty\"] = 30;\n    map[\"ninety\"] = 30;\n    map[\"\
    hundred\"] = 100;\n    map[\"thousand\"] = 1000;\n    map[\"million\"] = 1000000;\n\
    \    map[\"billion\"] = 1000000000;\n    map[\"trillion\"] = 1000000000000;\n\
    \    map[\"quadrillion\"] = 1000000000000000;\n    map[\"quintillion\"] = 1000000000000000000;\n\
    \    map[\"sextillion\"] = 100000000000000000000;\n    map[\"septillion\"] = 100000000000000000000000;\n\
    \    map[\"octillion\"] = 100000000000000000000000000;\n    map[\"nonillion\"\
    ] = 10000000000000000000000000000;\n    map[\"decillion\"] = 10000000000000000000000000000000;\n\
    \    map[\"undecillion\"] = 1000000000000000000000000000000000;\n    map[\"duodecillion\"\
    ] = 10000000000000000000000000000000001;\n    map[\"tredecillion\"] = 100000000000000000000000000000000010;\n\
    \    map[\"quattuordecillion\"] = 1000000000000000000000000000000000100;\n   \
    \ map[\"quindecillion\"] = 10000000000000000000000000000000001000;\n    map[\"\
    sexdecillion\"] = 100000000000000000000000000000000010000;\n    map[\"septendecillion\"\
    ] = 1000000000000000000000000000000000100000;\n    map[\"octodecillion\"] = 10000000000000000000000000000000001000000;\n\
    \    map[\"novemdec\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphy61y3yn.d(13): Error: found `>` when expecting `.` following
    int\n/tmp/tmphy61y3yn.d(49): Error: integer overflow\n/tmp/tmphy61y3yn.d(50):
    Error: integer overflow\n/tmp/tmphy61y3yn.d(51): Error: integer overflow\n/tmp/tmphy61y3yn.d(52):
    Error: integer overflow\n/tmp/tmphy61y3yn.d(53): Error: integer overflow\n/tmp/tmphy61y3yn.d(54):
    Error: integer overflow\n/tmp/tmphy61y3yn.d(55): Error: integer overflow\n/tmp/tmphy61y3yn.d(56):
    Error: integer overflow\n/tmp/tmphy61y3yn.d(57): Error: integer overflow\n/tmp/tmphy61y3yn.d(58):
    Error: integer overflow\n/tmp/tmphy61y3yn.d(59): Error: integer overflow\n/tmp/tmphy61y3yn.d(60):
    Error: integer overflow\n/tmp/tmphy61y3yn.d(61): Error: integer overflow\n/tmp/tmphy61y3yn.d(62):
    Error: unterminated string constant starting at /tmp/tmphy61y3yn.d(71)\n/tmp/tmphy61y3yn.d(67):
    Error: Implicit string concatenation is deprecated, use "novemdec\\x0aunittest\\x0a{\\x0a    alias
    candidate = sort_numbers;\\x0a\\x0a    assert(candidate(" ~ ") == " instead\n/tmp/tmphy61y3yn.d(67):
    Error: Implicit string concatenation is deprecated, use ") == " ~ ");\\x0a    assert(candidate("
    instead\n/tmp/tmphy61y3yn.d(68): Error: found `three` when expecting `,`\n/tmp/tmphy61y3yn.d(68):
    Error: found `three` when expecting `,`\n/tmp/tmphy61y3yn.d(69): Error: found
    `three` when expecting `,`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphy61y3yn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    stringstream ss(numbers);\n    string numbers_sorted;\n  \
    \  \n    while(!ss.eof())\n    {\n        string number;\n        ss >> number;\n\
    \        numbers_sorted = numbers_sorted + number + \" \";\n    }\n    \n    sort(numbers_sorted.begin(),\
    \ numbers_sorted.end());\n    \n    return numbers_sorted;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <vector>\n#include <string>\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa3pt5ejt.d(27): Error: declaration expected, not `<`\n/tmp/tmpa3pt5ejt.d(39):
    Error: declaration expected, not `assert`\n/tmp/tmpa3pt5ejt.d(40): Error: declaration
    expected, not `assert`\n/tmp/tmpa3pt5ejt.d(41): Error: declaration expected, not
    `assert`\n/tmp/tmpa3pt5ejt.d(42): Error: declaration expected, not `assert`\n/tmp/tmpa3pt5ejt.d(43):
    Error: declaration expected, not `assert`\n/tmp/tmpa3pt5ejt.d(44): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa3pt5ejt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid input\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,string |>\n<| c\
    \ |>\nThis doesn't work if there are more than 9 numbers in the string. For example,\
    \ sort_numbers(\"one two three four five six seven eight nine\") returns \"one\
    \ two three four five six seven eight nine\"\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting it. I just tested it again and it works fine. I'll\
    \ edit my answer to include a test case.\n<|/ c |>\n<| c |>\nI tested it again\
    \ and it works fine. I'll edit my answer to include a test case.\n<|/ c |>\n<|\
    \ c |>\nI tested it again and it works fine. I'll edit my answer to include a\
    \ test case.\n<|/ c |>\n<| c |>\nI tested it again and it works fine. I'll edit\
    \ my answer to include a test case.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphn6wu45y.d(15): Error: found `in` when expecting `;`\n/tmp/tmphn6wu45y.d(40):
    Error: declaration expected, not `<`\n/tmp/tmphn6wu45y.d(43): Error: unterminated
    character constant\n/tmp/tmphn6wu45y.d(46): Error: unterminated character constant\n/tmp/tmphn6wu45y.d(49):
    Error: unterminated character constant\n/tmp/tmphn6wu45y.d(52): Error: unterminated
    character constant\n/tmp/tmphn6wu45y.d(55): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphn6wu45y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result = result + c;\n        \
    \        break;\n            default:\n                break;\n        }\n   \
    \ }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include\
    \ <algorithm>\n#include <vector>\nusing namespace std;\nunittest\n{\n    alias\
    \ candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg80b_oy1.d(14): Error: found `in` when expecting `;`\n/tmp/tmpg80b_oy1.d(37):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpg80b_oy1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid number '\" + c + \"'\");\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThis doesn't work. `sort_numbers(\"one two three\")` returns `\"one two\
    \ three\"`\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it before you commented\
    \ on it. I was just trying to show how it could be done. I'll edit the answer\
    \ to show how it could be done.\n<|/ c |>\n<| c |>\nI added a version that works\
    \ with any number of digits. I didn't want to make my answer too long.\n<|/ c\
    \ |>\n<| c |>\nI added a version that works with any number of digits. I didn't\
    \ want to make my answer too long.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include\
    \ <algorithm>\n#include <iostream>\n#include <string>\nunittest\n{\n    alias\
    \ candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb7hqzw8u.d(15): Error: found `in` when expecting `;`\n/tmp/tmpb7hqzw8u.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpb7hqzw8u.d(43): Error: unterminated
    character constant\n/tmp/tmpb7hqzw8u.d(46): Error: unterminated character constant\n/tmp/tmpb7hqzw8u.d(49):
    Error: unterminated character constant\n/tmp/tmpb7hqzw8u.d(52): Error: unterminated
    character constant\n/tmp/tmpb7hqzw8u.d(63): Error: declaration expected, not `assert`\n/tmp/tmpb7hqzw8u.d(64):
    Error: declaration expected, not `assert`\n/tmp/tmpb7hqzw8u.d(65): Error: declaration
    expected, not `assert`\n/tmp/tmpb7hqzw8u.d(66): Error: declaration expected, not
    `assert`\n/tmp/tmpb7hqzw8u.d(67): Error: declaration expected, not `assert`\n/tmp/tmpb7hqzw8u.d(68):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7hqzw8u.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid input\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,sorting,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwt4ds4ll.d(15): Error: found `in` when expecting `;`\n/tmp/tmpwt4ds4ll.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpwt4ds4ll.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmpwt4ds4ll.d(53): Error: declaration expected, not
    `assert`\n/tmp/tmpwt4ds4ll.d(54): Error: declaration expected, not `assert`\n/tmp/tmpwt4ds4ll.d(55):
    Error: declaration expected, not `assert`\n/tmp/tmpwt4ds4ll.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmpwt4ds4ll.d(57): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwt4ds4ll.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid input\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThis\
    \ doesn't work. `sort_numbers(\"three one five\")` returns `\"one three five\"\
    `.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks for pointing it out.\n<|/ c |>\n\
    <| c |>\n: I added a more efficient solution which doesn't require a switch statement.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| c |>\n: I added a more efficient solution\
    \ which doesn't require a switch statement. Thanks for pointing it out.\n<|/ c\
    \ |>\n<| c |>\n: I added a more efficient solution which doesn't require a switch\
    \ statement. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps7gowvzs.d(15): Error: found `in` when expecting `;`\n/tmp/tmps7gowvzs.d(40):
    Error: declaration expected, not `<`\n/tmp/tmps7gowvzs.d(43): Error: unterminated
    character constant\n/tmp/tmps7gowvzs.d(49): Error: unterminated character constant\n/tmp/tmps7gowvzs.d(52):
    Error: unterminated character constant\n/tmp/tmps7gowvzs.d(55): Error: unterminated
    character constant\n/tmp/tmps7gowvzs.d(67): Error: declaration expected, not `assert`\n/tmp/tmps7gowvzs.d(68):
    Error: declaration expected, not `assert`\n/tmp/tmps7gowvzs.d(69): Error: declaration
    expected, not `assert`\n/tmp/tmps7gowvzs.d(70): Error: declaration expected, not
    `assert`\n/tmp/tmps7gowvzs.d(71): Error: declaration expected, not `assert`\n/tmp/tmps7gowvzs.d(72):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps7gowvzs.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid number\
    \ in sort_numbers: \" + c;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwayfoi84.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwayfoi84.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid choice\";\n        }\n\
    \    }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting,string |>\n<| c |>\nThis doesn't work if the numbers are\
    \ in descending order. For example, sort_numbers(\"nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine \nunittest\n{\n    alias candidate\
    \ = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdwvfl1v3.d(14): Error: found `in` when expecting `;`\n/tmp/tmpdwvfl1v3.d(37):
    Error: declaration expected, not `<`\n/tmp/tmpdwvfl1v3.d(40): Error: unterminated
    character constant\n/tmp/tmpdwvfl1v3.d(49): Error: unterminated string constant
    starting at /tmp/tmpdwvfl1v3.d(49)\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpdwvfl1v3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> map;\n    foreach(char c in numbers)\n  \
    \  {\n        if(map.contains(c))\n            map[c]++;\n        else\n     \
    \       map[c] = 1;\n    }\n    string result = \"\";\n    foreach(auto pair in\
    \ map)\n    {\n        result += pair.key + \" \";\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpny85d1mk.d(13): Error: found `>` when expecting `.` following
    int\n/tmp/tmpny85d1mk.d(14): Error: found `in` when expecting `;`\n/tmp/tmpny85d1mk.d(22):
    Error: basic type expected, not `auto`\n/tmp/tmpny85d1mk.d(22): Error: no identifier
    for declarator `_error_`\n/tmp/tmpny85d1mk.d(22): Error: found `auto` when expecting
    `;`\n/tmp/tmpny85d1mk.d(29): Error: declaration expected, not `<`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpny85d1mk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        if(isdigit(c))\n        {\n            int number = std.atoi(c);\n\
    \            \n            for(int i = 9; i >= 0; i--)\n            {\n      \
    \          if(number == i)\n                {\n                    result += to_string(i);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    \n    return result;\n}\n</code>\n<|/ a tags=string,sorting,c++ |>\n\
    <| c |>\nI like your solution, but I wonder if there is a way to do it without\
    \ using std.\n<|/ c |>\n<| c |>\nI added a solution without using std.\n<|/ c\
    \ |>\n<| c |>\nI added a solution without using std.\n<|/ c |>\n<| c |>\nI added\
    \ a solution without using std.\n<|/ c |>\n<| a tags=string,sorting,c++ |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp6_93cjm.d(15): Error: found `in` when expecting `;`\n/tmp/tmpp6_93cjm.d(34):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpp6_93cjm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result = result + c;\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid number \" + numbers);\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqaph7bou.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqaph7bou.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        string number = numbers[i];\n        if(number == \"zero\"\
    )\n        {\n            result += \"zero\";\n        }\n        else if(number\
    \ == \"one\")\n        {\n            result += \"one\";\n        }\n        else\
    \ if(number == \"two\")\n        {\n            result += \"two\";\n        }\n\
    \        else if(number == \"three\")\n        {\n            result += \"three\"\
    ;\n        }\n        else if(number == \"four\")\n        {\n            result\
    \ += \"four\";\n        }\n        else if(number == \"five\")\n        {\n  \
    \          result += \"five\";\n        }\n        else if(number == \"six\")\n\
    \        {\n            result += \"six\";\n        }\n        else if(number\
    \ == \"seven\")\n        {\n            result += \"seven\";\n        }\n    \
    \    else if(number == \"eight\")\n        {\n            result += \"eight\"\
    ;\n        }\n        else if(number == \"nine\")\n        {\n            result\
    \ += \"nine\";\n        }\n        else\n        {\n            result += number;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n\
    <| c |>\nThis is not the best solution. `std::map` would be a better solution.\
    \ `std::map` would also allow you to add more numbers in the future without having\
    \ to change the code.\n<|/ c |>\n<| c |>\nI agree with you. But the OP asked for\
    \ a solution without using std::map. So I gave him a solution with std::map.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I believe that OP wants to learn how\
    \ to solve this problem without using std::map. So I gave him a solution with\
    \ std::map.\n<|/ c |>\n<| c |>\nI agree with you, but I believe that OP wants\
    \ to learn how to solve this problem without using std::map. So I gave him a solution\
    \ with std::map.\n<|/ c |>\n<| c |>\nI agree with you, but I believe that OP wants\
    \ to learn how to solve this problem without using std::map. So I gave him a solution\
    \ with std::map.\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>\nunittest\n{\n    alias\
    \ candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwwdjrkha.d(64): Error: declaration expected, not `<`\n/tmp/tmpwwdjrkha.d(91):
    Error: declaration expected, not `assert`\n/tmp/tmpwwdjrkha.d(92): Error: declaration
    expected, not `assert`\n/tmp/tmpwwdjrkha.d(93): Error: declaration expected, not
    `assert`\n/tmp/tmpwwdjrkha.d(94): Error: declaration expected, not `assert`\n/tmp/tmpwwdjrkha.d(95):
    Error: declaration expected, not `assert`\n/tmp/tmpwwdjrkha.d(96): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwwdjrkha.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    stringstream ss(numbers);\n    string num;\n    vector<int>\
    \ nums;\n    while(ss >> num) \n    {\n        nums.push_back(std.atoi(num.c_str()));\n\
    \    }\n    sort(nums.begin(), nums.end());\n    string result = \"\";\n    for(int\
    \ i = 0; i < nums.size(); i++) \n    {\n        result += nums[i];\n    }\n  \
    \  return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThis doesn't\
    \ work if you have a string like \"one two three four five\"\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting it.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for me in VS2013. `sort_numbers(\"one two three four five\")` returns `\"one\
    \ two three four five\"`.\n<|/ c |>\n<| c |>\nYes, it does work. Try it yourself\
    \ and see if it works for you.\n<|/ c |>\n<| c |>\nI tested it myself and it works.\
    \ I even tested it on ideone.com.\n<|/ c |>\n<| a tags=c++,sorting |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\
    using namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n   \
    \ assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwgxyp6wn.d(15): Error: found `>` when expecting `.` following
    int\n/tmp/tmpwgxyp6wn.d(28): Error: declaration expected, not `<`\n/tmp/tmpwgxyp6wn.d(31):
    Error: unterminated character constant\n/tmp/tmpwgxyp6wn.d(37): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwgxyp6wn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw new Exception(\"Invalid number \"\
    \ + numbers);\n        }\n    }\n    sort(result.begin(), result.end());\n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting,algorithm |>\n<| c |>\nThis\
    \ doesn't work if you have a string like \"one two three\".  It will sort \"one\"\
    \ before \"two\".\n<|/ c |>\n<| c |>\n: Yes, I realized that after I posted. \
    \ I fixed it by adding a space to the end of the string.  I tested it and it works.\n\
    <|/ c |>\n<| c |>\n: I fixed it by adding a space to the end of the string.  I\
    \ tested it and it works.\n<|/ c |>\n<| c |>\n: I fixed it by adding a space to\
    \ the end of the string.  I tested it and it works.\n<|/ c |>\n<| c |>\n: I fixed\
    \ it by adding a space to the end of the string.  I tested it and it works.\n\
    <|/ c |>\n<| a |>\nI wrote a solution using std::sort and std::istringstream to\
    \ read and parse the numbers from the input string. \n<code>\n#include <iostream>\n\
    #include <sstream>\n#include <algorithm>\n#include <vector>\nunittest\n{\n   \
    \ alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five\
    \ nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1vdybx49.d(14): Error: found `in` when expecting `;`\n/tmp/tmp1vdybx49.d(37):
    Error: declaration expected, not `<`\n/tmp/tmp1vdybx49.d(40): Error: unterminated
    character constant\n/tmp/tmp1vdybx49.d(65): Error: declaration expected, not `assert`\n/tmp/tmp1vdybx49.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmp1vdybx49.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmp1vdybx49.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmp1vdybx49.d(69): Error: declaration expected, not `assert`\n/tmp/tmp1vdybx49.d(70):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1vdybx49.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but I wonder\
    \ why you used `string` instead of `char[]`?\n<|/ c |>\n<| c |>\nI used `string`\
    \ because I wanted to be as close as possible to OP's original code. `char[]`\
    \ would have worked just as well.\n<|/ c |>\n<| c |>\nI see what you mean. `char[]`\
    \ would also have worked just as well. Thanks for your help.\n<|/ c |>\n<| a tags=c++,sorting\
    \ |>\nI came up with this solution:\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <string>\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7lm2sh4n.d(15): Error: found `in` when expecting `;`\n/tmp/tmp7lm2sh4n.d(40):
    Error: declaration expected, not `<`\n/tmp/tmp7lm2sh4n.d(46): Error: unterminated
    character constant\n/tmp/tmp7lm2sh4n.d(61): Error: declaration expected, not `assert`\n/tmp/tmp7lm2sh4n.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmp7lm2sh4n.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmp7lm2sh4n.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmp7lm2sh4n.d(65): Error: declaration expected, not `assert`\n/tmp/tmp7lm2sh4n.d(66):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7lm2sh4n.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    for(int i = 0; i < numbers.size();\
    \ ++i)\n    {\n        string num = numbers[i];\n        string num2 = num;\n\
    \        string num3 = num;\n        string num4 = num;\n        string num5 =\
    \ num;\n        string num6 = num;\n        string num7 = num;\n        string\
    \ num8 = num;\n        string num9 = num;\n        string num10 = num;\n     \
    \   string num11 = num;\n        string num12 = num;\n        string num13 = num;\n\
    \        string num14 = num;\n        string num15 = num;\n        string num16\
    \ = num;\n        string num17 = num;\n        string num18 = num;\n        string\
    \ num19 = num;\n        string num20 = num;\n        string num21 = num;\n   \
    \     string num22 = num;\n        string num23 = num;\n        string num24 =\
    \ num;\n        string num25 = num;\n        string num26 = num;\n        string\
    \ num27 = num;\n        string num28 = num;\n        string num29 = num;\n   \
    \     string num30 = num;\n        string num31 = num;\n        string num32 =\
    \ num;\n        string num33 = num;\n        string num34 = num;\n        string\
    \ num35 = num;\n        string num36 = num;\n        string num37 = num;\n   \
    \     string num38 = num;\n        string num39 = num;\n        string num40 =\
    \ num;\n        string num41 = num;\n        string num42 = num;\n        string\
    \ num43 = num;\n        string num44 = num;\n        string num45 = num;\n   \
    \     string num46 = num;\n        string num47 = num;\n        string num48 =\
    \ num;\n        string num49 = num;\n        string num50 = num;\n        string\
    \ num51 = num;\n        string num52 = num;\n        string num53 = num;\n   \
    \     string num54 = num;\n        string num55 = num;\n        string num56 =\
    \ num;\n        string num57 = num;\n        string num58 = num;\n        string\
    \ num59 = num;\n        string num60 = num;\n        string num61 = num;\n   \
    \     string num62 = num;\n        string num63 = num;\n        string num64\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppck4372k.d(79): Error: found `num64` when expecting `;` following
    statement\n/tmp/tmppck4372k.d(80): Error: found `unittest` instead of statement\n/tmp/tmppck4372k.d(90):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppck4372k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk3r8ifpy.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk3r8ifpy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThanks for your\
    \ answer. I am not allowed to use any libraries other than std.\n<|/ c |>\n<|\
    \ c |>\nI added a solution without using any libraries.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I am not allowed to use any libraries other than std.\n<|/\
    \ c |>\n<| c |>\nI added a solution without using any libraries.\n<|/ c |>\n<|\
    \ c |>\nThanks for your answer. I am not allowed to use any libraries other than\
    \ std.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <vector>\n#include <algorithm>\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvfsbz7lh.d(15): Error: found `in` when expecting `;`\n/tmp/tmpvfsbz7lh.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpvfsbz7lh.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmpvfsbz7lh.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmpvfsbz7lh.d(69): Error: declaration expected, not `assert`\n/tmp/tmpvfsbz7lh.d(70):
    Error: declaration expected, not `assert`\n/tmp/tmpvfsbz7lh.d(71): Error: declaration
    expected, not `assert`\n/tmp/tmpvfsbz7lh.d(72): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvfsbz7lh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid number in sort_numbers:\
    \ \" + c;\n        }\n    }\n    sort(result.begin(), result.end());\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,c++,algorithm |>\n\
    I wrote a solution in Python, using an auxiliary list to store the sorted numbers.\
    \ \n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split()\n    numbers\
    \ = [int(i) for i in numbers]\n    numbers.sort()\n    numbers = [str(i) for i\
    \ in numbers]\n    return ' '.join(numbers)\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n\
    using namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n   \
    \ assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxu1ne8an.d(14): Error: found `in` when expecting `;`\n/tmp/tmpxu1ne8an.d(37):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpxu1ne8an.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to do this without having to write out each case statement. Maybe some sort\
    \ of loop?\n<|/ c |>\n<| c |>\nYou could use a switch statement and just have\
    \ it loop through each character in the string. I'll update my answer with an\
    \ example.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require you to\
    \ write out each case statement. Hopefully this helps!\n<|/ c |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nunittest\n{\n  \
    \  alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n \
    \   assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five\
    \ nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsp1zquhu.d(14): Error: found `in` when expecting `;`\n/tmp/tmpsp1zquhu.d(37):
    Error: declaration expected, not `<`\n/tmp/tmpsp1zquhu.d(43): Error: unterminated
    character constant\n/tmp/tmpsp1zquhu.d(46): Error: unterminated character constant\n/tmp/tmpsp1zquhu.d(57):
    Error: declaration expected, not `assert`\n/tmp/tmpsp1zquhu.d(58): Error: declaration
    expected, not `assert`\n/tmp/tmpsp1zquhu.d(59): Error: declaration expected, not
    `assert`\n/tmp/tmpsp1zquhu.d(60): Error: declaration expected, not `assert`\n/tmp/tmpsp1zquhu.d(61):
    Error: declaration expected, not `assert`\n/tmp/tmpsp1zquhu.d(62): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsp1zquhu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting |>\n<| c |>\nThe `sort` function will sort `'0'` before\
    \ `'1'`, which is not what the OP wants.\n<|/ c |>\n<| c |>\n: Yes, I realized\
    \ that after I posted my answer. I've updated my answer to reflect that.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <vector>\nusing namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdt8syhqq.d(14): Error: found `in` when expecting `;`\n/tmp/tmpdt8syhqq.d(37):
    Error: declaration expected, not `<`\n/tmp/tmpdt8syhqq.d(43): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdt8syhqq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid number: \" + c);\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this\
    \ solution, although it does require a lot of extra code (like an extra function).\
    \ But it does solve the problem and it's very simple.\n<|/ c |>\n<| a tags=sorting,c++,algorithm\
    \ |>\nI like your solution, but I thought I'd post my solution as well. \n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsbjpd6km.d(15): Error: found `in` when expecting `;`\n/tmp/tmpsbjpd6km.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpsbjpd6km.d(43): Error: unterminated
    character constant\n/tmp/tmpsbjpd6km.d(46): Error: unterminated character constant\n/tmp/tmpsbjpd6km.d(56):
    Error: declaration expected, not `assert`\n/tmp/tmpsbjpd6km.d(57): Error: declaration
    expected, not `assert`\n/tmp/tmpsbjpd6km.d(58): Error: declaration expected, not
    `assert`\n/tmp/tmpsbjpd6km.d(59): Error: declaration expected, not `assert`\n/tmp/tmpsbjpd6km.d(60):
    Error: declaration expected, not `assert`\n/tmp/tmpsbjpd6km.d(61): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsbjpd6km.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5y3q88oz.d(15): Error: found `in` when expecting `;`\n/tmp/tmp5y3q88oz.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp5y3q88oz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<int, string> map;\n    map[0] = \"zero\";\n    map[1]\
    \ = \"one\";\n    map[2] = \"two\";\n    map[3] = \"three\";\n    map[4] = \"\
    four\";\n    map[5] = \"five\";\n    map[6] = \"six\";\n    map[7] = \"seven\"\
    ;\n    map[8] = \"eight\";\n    map[9] = \"nine\";\n    \n    string result =\
    \ \"\";\n    \n    foreach(char c in numbers)\n    {\n        int index = c -\
    \ '0';\n        result += map[index];\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdsg2zkkh.d(13): Error: found `,` when expecting `.` following
    int\n/tmp/tmpdsg2zkkh.d(13): Error: found `>` when expecting `;` following statement\n/tmp/tmpdsg2zkkh.d(27):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpdsg2zkkh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution,\
    \ but I wonder if it would be possible to do this without using strings and just\
    \ using chars. I guess it would be more efficient since you wouldn't have to allocate\
    \ memory for the string, but I haven't tested it yet.\n<|/ c |>\n<| c |>\nI guess\
    \ it would be possible but would require a lot of work. You'd have to implement\
    \ a sorting algorithm that sorts characters. You'd have to implement a comparison\
    \ function that compares two characters. You'd have to implement a function that\
    \ compares two strings. You'd have to implement a function that compares two strings.\
    \ You'd have to implement a function that compares two strings. You'd have to\
    \ implement a function that compares two strings. You'd have to implement a function\
    \ that compares two strings. You'd have to implement a function that compares\
    \ two strings. You'd have to implement a function that compares two strings. You'd\
    \ have to implement a function that compares two strings. You'd have to implement\
    \ a function that compares two strings. You'd have to implement a function that\
    \ compares two strings. You'd have to implement a function that compares two strings.\
    \ You'd have to implement a function that compares two strings. You'd have to\
    \ implement a function that compares two strings. You'd have to implement a function\
    \ that compares two strings. You'd have to implement a function that compares\
    \ two strings. You'd have to implement a function that compares two strings. You'd\
    \ have to implement a function that compares two strings. You'd have to implement\
    \ a function that compares two strings. You'd have to implement a function that\
    \ compares two strings. You'd have to implement a function that compares two strings.\
    \ You'd have to implement a function that compares two strings. You'd have to\
    \ implement a function that compares two strings. You'd have to implement a function\
    \ that compares two strings. You'd have to implement a function that compares\
    \ two strings. You'd have to implement a function that compares two strings. You'd\
    \ have to implement a function that compares two strings. You'd have to implement\
    \ a function that compares two strings. You'd have to implement a function that\
    \ compares two strings. You\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppgd2njfh.d(15): Error: found `in` when expecting `;`\n/tmp/tmppgd2njfh.d(40):
    Error: declaration expected, not `<`\n/tmp/tmppgd2njfh.d(43): Error: unterminated
    character constant\n/tmp/tmppgd2njfh.d(43): Error: unterminated character constant\n/tmp/tmppgd2njfh.d(46):
    Error: unterminated character constant\n/tmp/tmppgd2njfh.d(46): Error: unterminated
    character constant\n/tmp/tmppgd2njfh.d(46): Error: unterminated character constant\n/tmp/tmppgd2njfh.d(46):
    Error: unterminated character constant\n/tmp/tmppgd2njfh.d(46): Error: unterminated
    character constant\n/tmp/tmppgd2njfh.d(46): Error: unterminated character constant\n/tmp/tmppgd2njfh.d(46):
    Error: unterminated character constant\n/tmp/tmppgd2njfh.d(46): Error: unterminated
    character constant\n/tmp/tmppgd2njfh.d(46): Error: unterminated character constant\n/tmp/tmppgd2njfh.d(46):
    Error: unterminated character constant\n/tmp/tmppgd2njfh.d(46): Error: unterminated
    character constant\n/tmp/tmppgd2njfh.d(46): Error: unterminated character constant\n/tmp/tmppgd2njfh.d(46):
    Error: unterminated character constant\n/tmp/tmppgd2njfh.d(46): Error: unterminated
    character constant\n/tmp/tmppgd2njfh.d(46): Error: unterminated character constant\n/tmp/tmppgd2njfh.d(46):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmppgd2njfh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,c++,string |>\n<| c |>\nI like\
    \ your solution, but I wonder if there is a way to do it without using strings.\
    \ I guess it would be more efficient to convert each number to a number and then\
    \ sort them, but I'm not sure how to do that.\n<|/ c |>\n<| c |>\nI added a version\
    \ that doesn't use strings. It's not as elegant as yours, but it does avoid the\
    \ problem of having to convert each number to a string.\n<|/ c |>\n<| c |>\nI\
    \ added a version that doesn't use strings. It's not as elegant as yours, but\
    \ it does avoid the problem of having to convert each number to a string.\n<|/\
    \ c |>\n<| c |>\nI added a version that doesn't use strings. It's not as elegant\
    \ as yours, but it does avoid the problem of having to convert each number to\
    \ a string.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <algorithm>\n#include <vector>\n#include <string>\nunittest\n{\n    alias candidate\
    \ = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_wkvhjqh.d(15): Error: found `in` when expecting `;`\n/tmp/tmp_wkvhjqh.d(40):
    Error: declaration expected, not `<`\n/tmp/tmp_wkvhjqh.d(43): Error: unterminated
    character constant\n/tmp/tmp_wkvhjqh.d(46): Error: unterminated character constant\n/tmp/tmp_wkvhjqh.d(46):
    Error: unterminated character constant\n/tmp/tmp_wkvhjqh.d(49): Error: unterminated
    character constant\n/tmp/tmp_wkvhjqh.d(49): Error: unterminated character constant\n/tmp/tmp_wkvhjqh.d(52):
    Error: unterminated character constant\n/tmp/tmp_wkvhjqh.d(52): Error: unterminated
    character constant\n/tmp/tmp_wkvhjqh.d(64): Error: declaration expected, not `assert`\n/tmp/tmp_wkvhjqh.d(65):
    Error: declaration expected, not `assert`\n/tmp/tmp_wkvhjqh.d(66): Error: declaration
    expected, not `assert`\n/tmp/tmp_wkvhjqh.d(67): Error: declaration expected, not
    `assert`\n/tmp/tmp_wkvhjqh.d(68): Error: declaration expected, not `assert`\n/tmp/tmp_wkvhjqh.d(69):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_wkvhjqh.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThis doesn't\
    \ work if you have a string like \"one two three\"\n<|/ c |>\n<| c |>\n: Yes,\
    \ it does. I tested it before posting it, and it works fine.\n<|/ c |>\n<| c |>\n\
    : It doesn't work if you have a string like \"one two three\"\n<|/ c |>\n<| c\
    \ |>\n: It doesn't work if you have a string like \"one two three\"\n<|/ c |>\n\
    <| c |>\n: It doesn't work if you have a string like \"one two three\"\n<|/ c\
    \ |>\n<| a |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <string>\n\
    using namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n   \
    \ assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3pquhwgm.d(15): Error: found `in` when expecting `;`\n/tmp/tmp3pquhwgm.d(40):
    Error: declaration expected, not `<`\n/tmp/tmp3pquhwgm.d(43): Error: unterminated
    character constant\n/tmp/tmp3pquhwgm.d(49): Error: unterminated character constant\n/tmp/tmp3pquhwgm.d(52):
    Error: unterminated character constant\n/tmp/tmp3pquhwgm.d(55): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3pquhwgm.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        result += numbers[i];\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0onwrap0.d(21): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0onwrap0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa4eygj7t.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa4eygj7t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    stringstream ss(numbers);\n    string num;\n    vector<int>\
    \ nums;\n    while(ss >> num)\n    {\n        nums.push_back(int(num));\n    }\n\
    \    sort(nums.begin(), nums.end());\n    string result = \"\";\n    for(int i\
    \ = 0; i < nums.size(); i++)\n    {\n        result += to_string(nums[i]);\n \
    \   }\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <string>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgys6ahky.d(15): Error: found `>` when expecting `.` following
    int\n/tmp/tmpgys6ahky.d(28): Error: declaration expected, not `<`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpgys6ahky.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result = result + c;\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,string |>\n<| a\
    \ dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    using namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n   \
    \ assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp51wf_yq.d(15): Error: found `in` when expecting `;`\n/tmp/tmpp51wf_yq.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpp51wf_yq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result = result + c;\n        \
    \        break;\n            default:\n                throw new Exception(\"\
    Invalid input\");\n        }\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1bnjld6q.d(14): Error: found `in` when expecting `;`\n/tmp/tmp1bnjld6q.d(37):
    Error: declaration expected, not `<`\n/tmp/tmp1bnjld6q.d(48): Error: declaration
    expected, not `assert`\n/tmp/tmp1bnjld6q.d(49): Error: declaration expected, not
    `assert`\n/tmp/tmp1bnjld6q.d(50): Error: declaration expected, not `assert`\n/tmp/tmp1bnjld6q.d(51):
    Error: declaration expected, not `assert`\n/tmp/tmp1bnjld6q.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmp1bnjld6q.d(53): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1bnjld6q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk3r8ifpy.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk3r8ifpy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> map;\n    map[\"zero\"] = 0;\n    map[\"\
    one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"four\"\
    ] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n\
    \    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n    \n    map[\"ten\"] = 10;\n\
    \    map[\"eleven\"] = 11;\n    map[\"twelve\"] = 12;\n    map[\"thirteen\"] =\
    \ 13;\n    map[\"fourteen\"] = 14;\n    map[\"fifteen\"] = 15;\n    map[\"sixteen\"\
    ] = 16;\n    map[\"seventeen\"] = 17;\n    map[\"eighteen\"] = 18;\n    map[\"\
    nineteen\"] = 19;\n    \n    map[\"twenty\"] = 20;\n    map[\"thirty\"] = 30;\n\
    \    map[\"forty\"] = 31;\n    map[\"fifty\"] = 30;\n    map[\"sixty\"] = 30;\n\
    \    map[\"seventy\"] = 30;\n    map[\"eighty\"] = 30;\n    map[\"ninety\"] =\
    \ 30;\n    \n    map[\"hundred\"] = 100;\n    map[\"thousand\"] = 1000;\n    map[\"\
    million\"] = 1000000;\n    map[\"billion\"] = 1000000000;\n    map[\"trillion\"\
    ] = 1000000000000;\n    map[\"quadrillion\"] = 1000000000000000;\n    map[\"quintillion\"\
    ] = 1000000000000000000;\n    map[\"sextillion\"] = 100000000000000000000;\n \
    \   map[\"septillion\"] = 100000000000000000000000;\n    map[\"octillion\"] =\
    \ 100000000000000000000000000;\n    map[\"nonillion\"] = 10000000000000000000000000000;\n\
    \    map[\"decillion\"] = 10000000000000000000000000000000;\n    map[\"undecillion\"\
    ] = 1000000000000000000000000000000000;\n    map[\"duodecillion\"] = 10000000000000000000000000000000001;\n\
    \    map[\"tredecillion\"] = 100000000000000000000000000000000010;\n    map[\"\
    quattuordecillion\"] = 1000000000000000000000000000000000100;\n    map[\"quindecillion\"\
    ] = 10000000000000000000000000000000001000;\n    map[\"sexdecillion\"] = 100000000000000000000000000000000010000;\n\
    \    map[\"septendecillion\"] = 1000000000000000000000000000000000100000;\n  \
    \  map[\"octodecillion\"] = 10000000000000000000000000000000001000000;\n\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmz87yfys.d(13): Error: found `>` when expecting `.` following
    int\n/tmp/tmpmz87yfys.d(52): Error: integer overflow\n/tmp/tmpmz87yfys.d(53):
    Error: integer overflow\n/tmp/tmpmz87yfys.d(54): Error: integer overflow\n/tmp/tmpmz87yfys.d(55):
    Error: integer overflow\n/tmp/tmpmz87yfys.d(56): Error: integer overflow\n/tmp/tmpmz87yfys.d(57):
    Error: integer overflow\n/tmp/tmpmz87yfys.d(58): Error: integer overflow\n/tmp/tmpmz87yfys.d(59):
    Error: integer overflow\n/tmp/tmpmz87yfys.d(60): Error: integer overflow\n/tmp/tmpmz87yfys.d(61):
    Error: integer overflow\n/tmp/tmpmz87yfys.d(62): Error: integer overflow\n/tmp/tmpmz87yfys.d(63):
    Error: integer overflow\n/tmp/tmpmz87yfys.d(64): Error: integer overflow\n/tmp/tmpmz87yfys.d(66):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpmz87yfys.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> numbers_map;\n    foreach(char c in numbers)\n\
    \    {\n        numbers_map[c] = numbers_map[c] + 1;\n    }\n    map<string, int>\
    \ sorted_numbers_map;\n    foreach(pair<string, int> p in numbers_map)\n    {\n\
    \        sorted_numbers_map[p.first] = p.second;\n    }\n    string sorted_numbers\
    \ = \"\";\n    foreach(pair<string, int> p in sorted_numbers_map)\n    {\n   \
    \     sorted_numbers += p.first + \" \";\n    }\n    return sorted_numbers;\n\
    }\n</code>\n<|/ a tags=c++,sorting |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7x5r41xg.d(13): Error: found `>` when expecting `.` following
    int\n/tmp/tmp7x5r41xg.d(14): Error: found `in` when expecting `;`\n/tmp/tmp7x5r41xg.d(18):
    Error: found `>` when expecting `.` following int\n/tmp/tmp7x5r41xg.d(19): Error:
    no identifier for declarator `pair`\n/tmp/tmp7x5r41xg.d(19): Error: found `<`
    when expecting `;`\n/tmp/tmp7x5r41xg.d(19): Error: found `>` when expecting `.`
    following int\n/tmp/tmp7x5r41xg.d(24): Error: no identifier for declarator `pair`\n/tmp/tmp7x5r41xg.d(24):
    Error: found `<` when expecting `;`\n/tmp/tmp7x5r41xg.d(24): Error: found `>`
    when expecting `.` following int\n/tmp/tmp7x5r41xg.d(30): Error: declaration expected,
    not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7x5r41xg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        result += numbers[i];\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ answer the question. OP asked for sorting a string, not an array.\n<|/ c |>\n\
    <| c |>\nI added a solution that sorts a string. Thanks for pointing that out.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question. OP asked for sorting a string,\
    \ not an array.\n<|/ c |>\n<| c |>\nI added a solution that sorts a string. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| c |>\nThis doesn't answer the question.\
    \ OP asked for sorting a string, not an array.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppcse_x5n.d(21): Error: declaration expected, not `<`\n/tmp/tmppcse_x5n.d(24):
    Error: unterminated character constant\n/tmp/tmppcse_x5n.d(30): Error: unterminated
    character constant\n/tmp/tmppcse_x5n.d(36): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppcse_x5n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting,algorithm |>\n<| c |>\nThe\
    \ question was about sorting numbers, not strings. Your solution sorts strings.\
    \ Also, you should use `std::sort` instead of `std::for_each`.\n<|/ c |>\n<| c\
    \ |>\nThe question was about sorting numbers, not strings. Your solution sorts\
    \ strings. Also, you should use `std::sort` instead of `std::for_each`.\n<|/ c\
    \ |>\n<| c |>\nI agree with you, but I thought it would be better to show a solution\
    \ that sorts numbers. I agree that `std::for_each` is better than `std::sort`,\
    \ but `std::sort` also works.\n<|/ c |>\n<| c |>\nI agree with you, but I thought\
    \ it would be better to show a solution that sorts numbers. I agree that `std::for_each`\
    \ is better than `std::sort`, but `std::sort` also works.\n<|/ c |>\n<| c |>\n\
    I agree with you, but I thought it would be better to show a solution that sorts\
    \ numbers. I agree that `std::for_each` is better than `std::sort`, but `std::sort`\
    \ also works.\n<|/ c |>\n<| a tags=c++,sorting,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeypjtoov.d(15): Error: found `in` when expecting `;`\n/tmp/tmpeypjtoov.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpeypjtoov.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmpeypjtoov.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmpeypjtoov.d(69): Error: declaration expected, not `assert`\n/tmp/tmpeypjtoov.d(70):
    Error: declaration expected, not `assert`\n/tmp/tmpeypjtoov.d(71): Error: declaration
    expected, not `assert`\n/tmp/tmpeypjtoov.d(72): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeypjtoov.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpumdgobwi.d(15): Error: found `in` when expecting `;`\n/tmp/tmpumdgobwi.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpumdgobwi.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmpumdgobwi.d(53): Error: declaration expected, not
    `assert`\n/tmp/tmpumdgobwi.d(54): Error: declaration expected, not `assert`\n/tmp/tmpumdgobwi.d(55):
    Error: declaration expected, not `assert`\n/tmp/tmpumdgobwi.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmpumdgobwi.d(57): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpumdgobwi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        string num = numbers[i];\n        \n        if(num == \"\
    zero\")\n        {\n            result += \"zero \";\n        }\n        else\
    \ if(num == \"one\")\n        {\n            result += \"one \";\n        }\n\
    \        else if(num == \"two\")\n        {\n            result += \"two \";\n\
    \        }\n        else if(num == \"three\")\n        {\n            result +=\
    \ \"three \";\n        }\n        else if(num == \"four\")\n        {\n      \
    \      result += \"four \";\n        }\n        else if(num == \"five\")\n   \
    \     {\n            result += \"five \";\n        }\n        else if(num == \"\
    six\")\n        {\n            result += \"six \";\n        }\n        else if(num\
    \ == \"seven\")\n        {\n            result += \"seven \";\n        }\n   \
    \     else if(num == \"eight\")\n        {\n            result += \"eight \";\n\
    \        }\n        else if(num == \"nine\")\n        {\n            result +=\
    \ \"nine \";\n        }\n        else\n        {\n            result += \"zero\
    \ \";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == \"zero\")\n        {\n            result += \"\
    zero \";\n        }\n        else if(result[i] == \"one\")\n        {\n      \
    \      result += \"one \";\n        }\n        else if(result[i] == \"two\")\n\
    \        {\n            result += \"two \";\n        }\n        else if(result[i]\
    \ == \"three\")\n        {\n            result += \"three \";\n        }\n   \
    \     else if(result[i] == \"four\")\n        {\n            result += \"four\
    \ \";\n        }\n        else if(result[i] == \"five\")\n        {\n        \
    \    result += \"five \";\n        }\n        else if(result[i] == \"six\")\n\
    \        {\n            result += \"six \";\n        }\n        else if(result[i]\
    \ == \"seven\")\n        {\n            result += \"seven \";\n        }\n   \
    \     else if(result[i] == \"eight\")\n        {\n            result += \"eight\
    \ \";\n        }\n        else if(result[i] == \"nine\")\n        {\n        \
    \    result += \"nine \";\n        }\n        else\n        {\n            result\
    \ += \"zero \";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpivdn7w40.d(15): Error: no property `length` for type `string`\n/tmp/tmpivdn7w40.d(17):
    Error: cannot implicitly convert expression `numbers[cast(ulong)i]` of type `immutable(char)`
    to `string`\n/tmp/tmpivdn7w40.d(21): Error: slice `result` is not mutable\n/tmp/tmpivdn7w40.d(25):
    Error: slice `result` is not mutable\n/tmp/tmpivdn7w40.d(29): Error: slice `result`
    is not mutable\n/tmp/tmpivdn7w40.d(33): Error: slice `result` is not mutable\n/tmp/tmpivdn7w40.d(37):
    Error: slice `result` is not mutable\n/tmp/tmpivdn7w40.d(41): Error: slice `result`
    is not mutable\n/tmp/tmpivdn7w40.d(45): Error: slice `result` is not mutable\n/tmp/tmpivdn7w40.d(49):
    Error: slice `result` is not mutable\n/tmp/tmpivdn7w40.d(53): Error: slice `result`
    is not mutable\n/tmp/tmpivdn7w40.d(57): Error: slice `result` is not mutable\n/tmp/tmpivdn7w40.d(61):
    Error: slice `result` is not mutable\n/tmp/tmpivdn7w40.d(65): Error: no property
    `length` for type `string`\n/tmp/tmpivdn7w40.d(67): Error: incompatible types
    for `(result[cast(ulong)i]) == ("zero")`: `immutable(char)` and `string`\n/tmp/tmpivdn7w40.d(69):
    Error: slice `result` is not mutable\n/tmp/tmpivdn7w40.d(71): Error: incompatible
    types for `(result[cast(ulong)i]) == ("one")`: `immutable(char)` and `string`\n/tmp/tmpivdn7w40.d(73):
    Error: slice `result` is not mutable\n/tmp/tmpivdn7w40.d(75): Error: incompatible
    types for `(result[cast(ulong)i]) == ("two")`: `immutable(char)` and `string`\n/tmp/tmpivdn7w40.d(77):
    Error: slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpivdn7w40.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<int, string> map;\n    map[0] = \"zero\";\n    map[1]\
    \ = \"one\";\n    map[2] = \"two\";\n    map[3] = \"three\";\n    map[4] = \"\
    four\";\n    map[5] = \"five\";\n    map[6] = \"six\";\n    map[7] = \"seven\"\
    ;\n    map[8] = \"eight\";\n    map[9] = \"nine\";\n    \n    string result =\
    \ \"\";\n    \n    foreach(char c in numbers)\n    {\n        int number = map[to_integer(c)];\n\
    \        result += number;\n    }\n    \n    return result;\n}\n</code>\n<|/ a\
    \ tags=c++,string,sorting |>\n<| c |>\nThis doesn't work. `map` doesn't have a\
    \ `[]` operator. `map[0] = \"zero\";` should be `map[\"zero\"] = \"zero\";`\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed the code in the answer.\n\
    <|/ c |>\n<| a tags=c++,string,sorting |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\n#include <vector>\nunittest\n{\n    alias candidate\
    \ = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_c0fsye.d(13): Error: found `,` when expecting `.` following
    int\n/tmp/tmpz_c0fsye.d(13): Error: found `>` when expecting `;` following statement\n/tmp/tmpz_c0fsye.d(27):
    Error: found `in` when expecting `;`\n/tmp/tmpz_c0fsye.d(35): Error: declaration
    expected, not `<`\n/tmp/tmpz_c0fsye.d(38): Error: unterminated character constant\n/tmp/tmpz_c0fsye.d(38):
    Error: unterminated character constant\n/tmp/tmpz_c0fsye.d(41): Error: unterminated
    character constant\n/tmp/tmpz_c0fsye.d(53): Error: declaration expected, not `assert`\n/tmp/tmpz_c0fsye.d(54):
    Error: declaration expected, not `assert`\n/tmp/tmpz_c0fsye.d(55): Error: declaration
    expected, not `assert`\n/tmp/tmpz_c0fsye.d(56): Error: declaration expected, not
    `assert`\n/tmp/tmpz_c0fsye.d(57): Error: declaration expected, not `assert`\n/tmp/tmpz_c0fsye.d(58):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_c0fsye.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=string,sorting,c++ |>\n<| c |>\nThanks\
    \ for your answer! I understand your solution, but I wanted to know if there was\
    \ a way to do it without using switch statements.\n<|/ c |>\n<| c |>\nI added\
    \ a solution without switch statements.\n<|/ c |>\n<| a tags=string,sorting,c++\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpviu2dxs3.d(15): Error: found `in` when expecting `;`\n/tmp/tmpviu2dxs3.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpviu2dxs3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0': result += \" zero\"\
    ; break;\n            case '1': result += \" one\"; break;\n            case '2':\
    \ result += \" two\"; break;\n            case '3': result += \" three\"; break;\n\
    \            case '4': result += \" four\"; break;\n            case '5': result\
    \ += \" five\"; break;\n            case '6': result += \" six\"; break;\n   \
    \         case '7': result += \" seven\"; break;\n            case '8': result\
    \ += \" eight\"; break;\n            case '9': result += \" nine\"; break;\n \
    \           default: result += c; break;\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpca139nya.d(15): Error: found `in` when expecting `;`\n/tmp/tmpca139nya.d(37):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpca139nya.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw runtime_error(\"Invalid input\");\n\
    \        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c |>\nThis solution doesn't work\
    \ for negative numbers. Try it with `sort_numbers(\"one two -three\")`.\n<|/ c\
    \ |>\n<| c |>\nI added a version that works with negative numbers. I didn't want\
    \ to change too much of the original code so I didn't add any comments.\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include\
    \ <string>\nusing namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeyagdddh.d(14): Error: found `in` when expecting `;`\n/tmp/tmpeyagdddh.d(37):
    Error: declaration expected, not `<`\n/tmp/tmpeyagdddh.d(40): Error: unterminated
    character constant\n/tmp/tmpeyagdddh.d(43): Error: unterminated character constant\n/tmp/tmpeyagdddh.d(43):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpeyagdddh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        if(numbers[i] == \"zero\")\n        {\n            result\
    \ += \" zero \";\n        }\n        else if(numbers[i] == \"one\")\n        {\n\
    \            result += \" one \";\n        }\n        else if(numbers[i] == \"\
    two\")\n        {\n            result += \" two \";\n        }\n        else if(numbers[i]\
    \ == \"three\")\n        {\n            result += \" three \";\n        }\n  \
    \      else if(numbers[i] == \"four\")\n        {\n            result += \" four\
    \ \";\n        }\n        else if(numbers[i] == \"five\")\n        {\n       \
    \     result += \" five \";\n        }\n        else if(numbers[i] == \"six\"\
    )\n        {\n            result += \" six \";\n        }\n        else if(numbers[i]\
    \ == \"seven\")\n        {\n            result += \" seven \";\n        }\n  \
    \      else if(numbers[i] == \"eight\")\n        {\n            result += \" eight\
    \ \";\n        }\n        else if(numbers[i] == \"nine\")\n        {\n       \
    \     result += \" nine \";\n        }\n        else\n        {\n            result\
    \ += numbers[i];\n        }\n    }\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == \" \")\n        {\n            result +=\
    \ \" \";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == \"nine\")\n        {\n            result += \"\
    \ nine \";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == \"eight\")\n        {\n            result += \"\
    \ eight \";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == \"seven\")\n        {\n            result += \"\
    \ seven \";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == \"six\")\n        {\n            result += \"\
    \ six \";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == \"five\")\n        {\n            result += \"\
    \ five \";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == \"four\")\n        {\n            result += \"\
    \ four \";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == \"three\")\n        {\n            result += \"\
    \ three \";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == \"two\")\n        {\n            result += \"\
    \ two \";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxcucsm32.d(135): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxcucsm32.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting |>\n<| c |>\nI like your solution, but I wonder if there\
    \ is a way to do it without using strings. I understand that strings are immutable\
    \ and that sorting algorithms work on strings, but I wonder if there is a way\
    \ to do it without using strings. I understand that strings are immutable and\
    \ that sorting algorithms work on strings, but I wonder if there is a way to do\
    \ it without using strings. I understand that strings are immutable and that sorting\
    \ algorithms work on strings, but I wonder if there is a way to do it without\
    \ using strings. I understand that strings are immutable and that sorting algorithms\
    \ work on strings, but I wonder if there is a way to do it without using strings.\
    \ I understand that strings are immutable and that sorting algorithms work on\
    \ strings, but I wonder if there is a way to do it without using strings. I understand\
    \ that strings are immutable and that sorting algorithms work on strings, but\
    \ I wonder if there is a way to do it without using strings. I understand that\
    \ strings are immutable and that sorting algorithms work on strings, but I wonder\
    \ if there is a way to do it without using strings. I understand that strings\
    \ are immutable and that sorting algorithms work on strings, but I wonder if there\
    \ is a way to do it without using strings. I understand that strings are immutable\
    \ and that sorting algorithms work on strings, but I wonder if there is a way\
    \ to do it without using strings. I understand that strings are immutable and\
    \ that sorting algorithms work on strings, but I wonder if there is a way to do\
    \ it without using strings. I understand that strings are immutable and that sorting\
    \ algorithms work on strings, but I wonder if there is a way to do it without\
    \ using strings. I understand that strings are immutable and that sorting algorithms\
    \ work on strings, but I wonder if there is a way to do it without using strings.\
    \ I understand that strings are immutable and that sorting algorithms work on\
    \ strings, but I wonder if there is a way to do it without using strings. I understand\
    \ that strings are immutable and that sorting algorithms work on strings, but\
    \ I wonder if there is a way to do it without using strings. I understand that\
    \ strings are immutable and that sorting algorithms work on strings, but I wonder\
    \ if there is a way to do it \nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphrqvdj0l.d(14): Error: found `in` when expecting `;`\n/tmp/tmphrqvdj0l.d(37):
    Error: declaration expected, not `<`\n/tmp/tmphrqvdj0l.d(45): Error: declaration
    expected, not `assert`\n/tmp/tmphrqvdj0l.d(46): Error: declaration expected, not
    `assert`\n/tmp/tmphrqvdj0l.d(47): Error: declaration expected, not `assert`\n/tmp/tmphrqvdj0l.d(48):
    Error: declaration expected, not `assert`\n/tmp/tmphrqvdj0l.d(49): Error: declaration
    expected, not `assert`\n/tmp/tmphrqvdj0l.d(50): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphrqvdj0l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid number in sort_numbers()\");\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting\
    \ |>\n<| c |>\nI like your solution, but I wonder how it compares to other solutions\
    \ posted so far.\n<|/ c |>\n<| c |>\n: I like your solution as well, but I wonder\
    \ how it compares to other solutions posted so far.\n<|/ c |>\n<| c |>\n: I like\
    \ your solution as well, but I wonder how it compares to other solutions posted\
    \ so far.\n<|/ c |>\n<| c |>\n: I like your solution as well, but I wonder how\
    \ it compares to other solutions posted so far.\n<|/ c |>\n<| c |>\n: I like your\
    \ solution as well, but I wonder how it compares to other solutions posted so\
    \ far.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo7doyqn3.d(15): Error: found `in` when expecting `;`\n/tmp/tmpo7doyqn3.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo7doyqn3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> map;\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        string num = numbers[i];\n        map[num] = i;\n    }\n\
    \    \n    string result = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n\
    \    {\n        string num = numbers[i];\n        int index = map[num];\n    \
    \    result += num;\n        \n        if(i != index)\n            result += \"\
    \ \";\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=string,sorting,c++\
    \ |>\n<| c |>\nThis code doesn't work for \"three one five\" as input. Also it\
    \ seems like it sorts the numbers alphabetically instead of from smallest to largest.\n\
    <|/ c |>\n<| c |>\nThe code sorts the numbers from smallest to largest. I've added\
    \ a test case to show that it works.\n<|/ c |>\n<| c |>\nI see it now. Thanks\
    \ for your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnm6rn048.d(13): Error: found `>` when expecting `.` following
    int\n/tmp/tmpnm6rn048.d(33): Error: declaration expected, not `<`\n/tmp/tmpnm6rn048.d(36):
    Error: unterminated character constant\n/tmp/tmpnm6rn048.d(39): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnm6rn048.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,c++ |>\n<| c |>\nI like this\
    \ solution, but I wonder if there is a way to avoid the switch statement. Something\
    \ like `switch(tolower(c))`\n<|/ c |>\n<| c |>\n: Yes, `tolower()` would work.\
    \ `switch` statements are just more concise and easier to read. `tolower()` also\
    \ works with `char` types, but it returns a `char` instead of a `string`.\n<|/\
    \ c |>\n<| c |>\nI agree, `switch` is more concise, but I find it easier to read\
    \ and understand than `tolower()`.\n<|/ c |>\n<| c |>\n: I agree. `switch` is\
    \ more concise, but I find it easier to read and understand than `tolower()`.\
    \ `switch` statements are just more concise and easier to read. `tolower()` also\
    \ works with `char` types, but it returns a `char` instead of a `string`.\n<|/\
    \ c |>\n<| c |>\n: I agree. `switch` is more concise, but I find it easier to\
    \ read and understand than `tolower()`. `switch` statements are just more concise\
    \ and easier to read. `tolower()` also works with `char` types, but it returns\
    \ a `char` instead of a `string`.\n<|/ c |>\n<| a tags=sorting,c++ |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphrbzcoz7.d(15): Error: found `in` when expecting `;`\n/tmp/tmphrbzcoz7.d(40):
    Error: declaration expected, not `<`\n/tmp/tmphrbzcoz7.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmphrbzcoz7.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmphrbzcoz7.d(69): Error: declaration expected, not `assert`\n/tmp/tmphrbzcoz7.d(70):
    Error: declaration expected, not `assert`\n/tmp/tmphrbzcoz7.d(71): Error: declaration
    expected, not `assert`\n/tmp/tmphrbzcoz7.d(72): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphrbzcoz7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid number\
    \ '\" + c + \"'\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgkuu45xb.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgkuu45xb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> m;\n    map<int, string> m2;\n    \n    foreach(char\
    \ c in numbers)\n    {\n        if(isdigit(c))\n        {\n            int n =\
    \ c - '0';\n            m[n] = m[n] + 1;\n        }\n    }\n    \n    foreach(int\
    \ n, m)\n    {\n        m2[n] = to_string(n);\n    }\n    \n    string result\
    \ = \"\";\n    foreach(int n, m2)\n    {\n        result += n2[n];\n    }\n  \
    \  \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,algorithm |>\n<| c\
    \ |>\nI like the idea of using maps, but it seems like a lot of overhead for something\
    \ that should be fairly simple.\n<|/ c |>\n<| c |>\n: I agree, but I wanted to\
    \ show that it is possible to solve this problem without using maps. I guess I\
    \ should have made it clear that my solution was a very simple one, and not necessarily\
    \ the most efficient one.\n<|/ c |>\n<| c |>\n: I added a solution that uses maps\
    \ and a custom comparator that uses `std::sort`.\n<|/ c |>\n<| c |>\n: I added\
    \ a solution that uses `std::sort` with a custom comparator.\n<|/ c |>\n<| c |>\n\
    : I added a solution that uses `std::sort` with a custom comparator.\n<|/ c |>\n\
    <| a tags=sorting,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nunittest\n{\n    alias candidate = sort_numbers;\n\n   \
    \ assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdnejtld3.d(13): Error: found `>` when expecting `.` following
    int\n/tmp/tmpdnejtld3.d(14): Error: found `,` when expecting `.` following int\n/tmp/tmpdnejtld3.d(14):
    Error: found `>` when expecting `;` following statement\n/tmp/tmpdnejtld3.d(16):
    Error: found `in` when expecting `;`\n/tmp/tmpdnejtld3.d(25): Error: no identifier
    for declarator `m`\n/tmp/tmpdnejtld3.d(25): Error: found `)` when expecting `;`\n/tmp/tmpdnejtld3.d(30):
    Error: found `string` when expecting `)`\n/tmp/tmpdnejtld3.d(31): Error: no identifier
    for declarator `m2`\n/tmp/tmpdnejtld3.d(31): Error: found `)` when expecting `;`\n/tmp/tmpdnejtld3.d(36):
    Error: found `return` when expecting `)`\n/tmp/tmpdnejtld3.d(38): Error: declaration
    expected, not `<`\n/tmp/tmpdnejtld3.d(64): Error: declaration expected, not `assert`\n/tmp/tmpdnejtld3.d(65):
    Error: declaration expected, not `assert`\n/tmp/tmpdnejtld3.d(66): Error: declaration
    expected, not `assert`\n/tmp/tmpdnejtld3.d(67): Error: declaration expected, not
    `assert`\n/tmp/tmpdnejtld3.d(68): Error: declaration expected, not `assert`\n/tmp/tmpdnejtld3.d(69):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdnejtld3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a dscore=1 |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\n#include <string>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdtv5lzve.d(15): Error: found `in` when expecting `;`\n/tmp/tmpdtv5lzve.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpdtv5lzve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a |>\n<code>\n#include\
    \ <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd32z6mcz.d(15): Error: found `in` when expecting `;`\n/tmp/tmpd32z6mcz.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpd32z6mcz.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmpd32z6mcz.d(53): Error: declaration expected, not
    `assert`\n/tmp/tmpd32z6mcz.d(54): Error: declaration expected, not `assert`\n/tmp/tmpd32z6mcz.d(55):
    Error: declaration expected, not `assert`\n/tmp/tmpd32z6mcz.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmpd32z6mcz.d(57): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd32z6mcz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\
    \ {\n        switch(c) {\n            case '0':\n            case '1':\n     \
    \       case '2':\n            case '3':\n            case '4':\n            case\
    \ '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid number\";\n        }\n\
    \    }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=c++,sorting |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb2qosodr.d(15): Error: found `in` when expecting `;`\n/tmp/tmpb2qosodr.d(38):
    Error: declaration expected, not `<`\n/tmp/tmpb2qosodr.d(49): Error: declaration
    expected, not `assert`\n/tmp/tmpb2qosodr.d(50): Error: declaration expected, not
    `assert`\n/tmp/tmpb2qosodr.d(51): Error: declaration expected, not `assert`\n/tmp/tmpb2qosodr.d(52):
    Error: declaration expected, not `assert`\n/tmp/tmpb2qosodr.d(53): Error: declaration
    expected, not `assert`\n/tmp/tmpb2qosodr.d(54): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb2qosodr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <string>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuhwryzic.d(15): Error: found `in` when expecting `;`\n/tmp/tmpuhwryzic.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpuhwryzic.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid input\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,string |>\n<| c\
    \ |>\nI like your solution, but I wonder how it compares to other solutions posted\
    \ here (especially the one by John Zwinck)\n<|/ c |>\n<| c |>\nI like your solution\
    \ as well, but I wonder how it compares to other solutions posted here (especially\
    \ the one by John Zwinck)\n<|/ c |>\n<| c |>\nI like your solution as well, but\
    \ I wonder how it compares to other solutions posted here (especially the one\
    \ by John Zwinck)\n<|/ c |>\n<| c |>\nI like your solution as well, but I wonder\
    \ how it compares to other solutions posted here (especially the one by John Zwinck)\n\
    <|/ c |>\n<| c |>\nI like your solution as well, but I wonder how it compares\
    \ to other solutions posted here (especially the one by John Zwinck)\n<|/ c |>\n\
    <| a tags=sorting,c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nunittest\n{\n    alias candidate = sort_numbers;\n\n   \
    \ assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_yr14etd.d(15): Error: found `in` when expecting `;`\n/tmp/tmp_yr14etd.d(40):
    Error: declaration expected, not `<`\n/tmp/tmp_yr14etd.d(66): Error: declaration
    expected, not `assert`\n/tmp/tmp_yr14etd.d(67): Error: declaration expected, not
    `assert`\n/tmp/tmp_yr14etd.d(68): Error: declaration expected, not `assert`\n/tmp/tmp_yr14etd.d(69):
    Error: declaration expected, not `assert`\n/tmp/tmp_yr14etd.d(70): Error: declaration
    expected, not `assert`\n/tmp/tmp_yr14etd.d(71): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_yr14etd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        if(isdigit(c))\n        {\n            int num = std.atoi(c);\n\
    \            \n            for(int i = 9; i >= 0; i--)\n            {\n      \
    \          if(num == i)\n                {\n                    result += std.string(\"\
    zero \");\n                    break;\n                }\n                else\
    \ if(num < i)\n                {\n                    result += std.string(\"\
    one \");\n                    break;\n                }\n            }\n     \
    \   }\n        else\n        {\n            result += c;\n        }\n    }\n \
    \   \n    return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdxoobvnj.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdxoobvnj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    stringstream ss(numbers);\n    string numbers_sorted;\n  \
    \  \n    while(ss.good())\n    {\n        string num;\n        ss >> num;\n  \
    \      numbers_sorted += num;\n    }\n    \n    sort(numbers_sorted.begin(), numbers_sorted.end());\n\
    \    \n    return numbers_sorted;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c\
    \ |>\nThe OP asked for a solution that doesn't use any libraries. He also asked\
    \ for a solution that doesn't use any loops. He also asked for a solution that\
    \ doesn't use any `if` statements. He also asked for a solution that doesn't use\
    \ any `while` statements. He also asked for a solution that doesn't use any `for`\
    \ statements. He also asked for a solution that doesn't use any `if` statements.\
    \ He also asked for a solution that doesn't use any `while` statements. He also\
    \ asked for a solution that doesn't use any `for` statements. He also asked for\
    \ a solution that doesn't use any `if` statements. He also asked for a solution\
    \ that doesn't use any `while` statements. He also asked for a solution that doesn't\
    \ use any `for` statements. He also asked for a solution that doesn't use any\
    \ `if` statements. He also asked for a solution that doesn't use any `while` statements.\
    \ He also asked for a solution that doesn't use any `for` statements. He also\
    \ asked for a solution that doesn't use any `if` statements. He also asked for\
    \ a solution that doesn't use any `while` statements. He also asked for a solution\
    \ that doesn't use any `for` statements. He also asked for a solution that doesn't\
    \ use any `if` statements. He also asked for a solution that doesn't use any `while`\
    \ statements. He also asked for a solution that doesn't use any `for` statements.\
    \ He also asked for a solution that doesn't use any `if` statements. He also asked\
    \ for a solution that doesn't use any `while` statements. He also asked for a\
    \ solution that doesn't use any `for` statements. He also asked for a solution\
    \ that doesn't use any `if` statements. He also asked for a solution that doesn't\
    \ use any `while` statements. He also asked for a solution that doesn't use any\
    \ `for` statements. He also asked for a solution that doesn't use any \nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp04t8h_m5.d(27): Error: declaration expected, not `<`\n/tmp/tmp04t8h_m5.d(30):
    Error: unterminated character constant\n/tmp/tmp04t8h_m5.d(30): Error: unterminated
    character constant\n/tmp/tmp04t8h_m5.d(30): Error: unterminated character constant\n/tmp/tmp04t8h_m5.d(30):
    Error: unterminated character constant\n/tmp/tmp04t8h_m5.d(30): Error: unterminated
    character constant\n/tmp/tmp04t8h_m5.d(30): Error: unterminated character constant\n/tmp/tmp04t8h_m5.d(30):
    Error: unterminated character constant\n/tmp/tmp04t8h_m5.d(30): Error: unterminated
    character constant\n/tmp/tmp04t8h_m5.d(30): Error: unterminated character constant\n/tmp/tmp04t8h_m5.d(30):
    Error: unterminated character constant\n/tmp/tmp04t8h_m5.d(30): Error: unterminated
    character constant\n/tmp/tmp04t8h_m5.d(30): Error: unterminated character constant\n/tmp/tmp04t8h_m5.d(30):
    Error: unterminated character constant\n/tmp/tmp04t8h_m5.d(30): Error: unterminated
    character constant\n/tmp/tmp04t8h_m5.d(30): Error: unterminated character constant\n/tmp/tmp04t8h_m5.d(30):
    Error: unterminated character constant\n/tmp/tmp04t8h_m5.d(30): Error: unterminated
    character constant\n/tmp/tmp04t8h_m5.d(30): Error: unterminated character constant\n/tmp/tmp04t8h_m5.d(30):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp04t8h_m5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0': result += \"zero \"\
    ; break;\n            case '1': result += \"one \"; break;\n            case '2':\
    \ result += \"two \"; break;\n            case '3': result += \"three \"; break;\n\
    \            case '4': result += \"four \"; break;\n            case '5': result\
    \ += \"five \"; break;\n            case '6': result += \"six \"; break;\n   \
    \         case '7': result += \"seven \"; break;\n            case '8': result\
    \ += \"eight \"; break;\n            case '9': result += \"nine \"; break;\n \
    \           default: result += \"error \"; break;\n        }\n    }\n    \n  \
    \  sort(result.begin(), result.end());\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz2cx68m4.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz2cx68m4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0': result += \"zero\"\
    ; break;\n            case '1': result += \"one\"; break;\n            case '2':\
    \ result += \"two\"; break;\n            case '3': result += \"three\"; break;\n\
    \            case '4': result += \"four\"; break;\n            case '5': result\
    \ += \"five\"; break;\n            case '6': result += \"six\"; break;\n     \
    \       case '7': result += \"seven\"; break;\n            case '8': result +=\
    \ \"eight\"; break;\n            case '9': result += \"nine\"; break;\n      \
    \  }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq0v3kib1.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq0v3kib1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptzqcfo4q.d(15): Error: found `in` when expecting `;`\n/tmp/tmptzqcfo4q.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmptzqcfo4q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    for(int i = 0; i < numbers.size();\
    \ ++i)\n    {\n        string num = numbers[i];\n        if(num == \"zero\")\n\
    \        {\n            result += \"zero\";\n        }\n        else if(num ==\
    \ \"one\")\n        {\n            result += \"one\";\n        }\n        else\
    \ if(num == \"two\")\n        {\n            result += \"two\";\n        }\n \
    \       else if(num == \"three\")\n        {\n            result += \"three\"\
    ;\n        }\n        else if(num == \"four\")\n        {\n            result\
    \ += \"four\";\n        }\n        else if(num == \"five\")\n        {\n     \
    \       result += \"five\";\n        }\n        else if(num == \"six\")\n    \
    \    {\n            result += \"six\";\n        }\n        else if(num == \"seven\"\
    )\n        {\n            result += \"seven\";\n        }\n        else if(num\
    \ == \"eight\")\n        {\n            result += \"eight\";\n        }\n    \
    \    else if(num == \"nine\")\n        {\n            result += \"nine\";\n  \
    \      }\n        else\n        {\n            throw runtime_error(\"Invalid number\
    \ in sort_numbers()\");\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c++,sorting,string |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to do this without having to write out every possible permutation.\
    \ For example, if I wanted to sort \"one two three\", I would have to write out\
    \ \"one two three\", \"one three two\", \"two one three\", etc. Is there a way\
    \ to do this without having to write out every possible permutation?\n<|/ c |>\n\
    <| c |>\n: No, there isn't. You'd have to write out every permutation anyway.\
    \ That's why I wrote the code to do it for you. :)\n<|/ c |>\n<| c |>\n: I added\
    \ a solution that doesn't require you to write out every permutation.\n<|/ c |>\n\
    <| c |>\n: I added a solution that doesn't require you to write out every permutation.\n\
    <|/ c |>\n<| c |>\n: I added a solution that doesn't require you to write out\
    \ every permutation.\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution using std::next_permutation:\n\
    <code>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <iostream>\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9ewa0lui.d(64): Error: declaration expected, not `<`\n/tmp/tmp9ewa0lui.d(70):
    Error: unterminated character constant\n/tmp/tmp9ewa0lui.d(70): Error: unterminated
    character constant\n/tmp/tmp9ewa0lui.d(70): Error: unterminated character constant\n/tmp/tmp9ewa0lui.d(73):
    Error: unterminated character constant\n/tmp/tmp9ewa0lui.d(76): Error: unterminated
    character constant\n/tmp/tmp9ewa0lui.d(79): Error: unterminated character constant\n/tmp/tmp9ewa0lui.d(82):
    Error: unterminated character constant\n/tmp/tmp9ewa0lui.d(92): Error: declaration
    expected, not `assert`\n/tmp/tmp9ewa0lui.d(93): Error: declaration expected, not
    `assert`\n/tmp/tmp9ewa0lui.d(94): Error: declaration expected, not `assert`\n/tmp/tmp9ewa0lui.d(95):
    Error: declaration expected, not `assert`\n/tmp/tmp9ewa0lui.d(96): Error: declaration
    expected, not `assert`\n/tmp/tmp9ewa0lui.d(97): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ewa0lui.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0': result += \"zero\"\
    ; break;\n            case '1': result += \"one\"; break;\n            case '2':\
    \ result += \"two\"; break;\n            case '3': result += \"three\"; break;\n\
    \            case '4': result += \"four\"; break;\n            case '5': result\
    \ += \"five\"; break;\n            case '6': result += \"six\"; break;\n     \
    \       case '7': result += \"seven\"; break;\n            case '8': result +=\
    \ \"eight\"; break;\n            case '9': result += \"nine\"; break;\n      \
    \      default: result += \"?\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\n<code>\n#include <algorithm>\n#include <iostream>\n#include <string>\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnnmnfw5f.d(15): Error: found `in` when expecting `;`\n/tmp/tmpnnmnfw5f.d(37):
    Error: declaration expected, not `<`\n/tmp/tmpnnmnfw5f.d(48): Error: declaration
    expected, not `assert`\n/tmp/tmpnnmnfw5f.d(49): Error: declaration expected, not
    `assert`\n/tmp/tmpnnmnfw5f.d(50): Error: declaration expected, not `assert`\n/tmp/tmpnnmnfw5f.d(51):
    Error: declaration expected, not `assert`\n/tmp/tmpnnmnfw5f.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmpnnmnfw5f.d(53): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnnmnfw5f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid number\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgfu8u601.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgfu8u601.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid choice\";\n        }\n\
    \    }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two\
    \ three\")` returns `\"one two three\"` instead of `\"one three two\"`.\n<|/ c\
    \ |>\n<| c |>\nI tested it on ideone.com, which is where I tested the code. http://ideone.com/4K8Ky\n\
    <|/ c |>\n<| c |>\nI tested it on ideone.com, which is where I tested the code.\
    \ http://ideone.com/4K8Ky\n<|/ c |>\n<| c |>\nI tested it on ideone.com, which\
    \ is where I tested the code. http://ideone.com/4K8Ky\n<|/ c |>\n<| c |>\nI tested\
    \ it on ideone.com, which is where I tested the code. http://ideone.com/4K8Ky\n\
    <|/ c |>\n<| a tags=string,sorting,c++ |>\nI wrote a little program to test the\
    \ sorting algorithms mentioned in the other answers. I used the standard library\
    \ sort function and compared it to the bubble sort algorithm. I used the string\
    \ class from STL. \n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    #include <vector>\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbe_i0are.d(14): Error: found `in` when expecting `;`\n/tmp/tmpbe_i0are.d(37):
    Error: declaration expected, not `<`\n/tmp/tmpbe_i0are.d(40): Error: unterminated
    character constant\n/tmp/tmpbe_i0are.d(65): Error: declaration expected, not `assert`\n/tmp/tmpbe_i0are.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmpbe_i0are.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmpbe_i0are.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmpbe_i0are.d(69): Error: declaration expected, not `assert`\n/tmp/tmpbe_i0are.d(70):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbe_i0are.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThe `switch`\
    \ statement is unnecessary. `if` statements are enough.\n<|/ c |>\n<| c |>\n:\
    \ I agree, but I wanted to show how it could be done with switch statements. I\
    \ guess I should have been more clear.\n<|/ c |>\n<| c |>\nI agree with you. My\
    \ comment was more about your `switch` statement being unnecessary. `if` statements\
    \ are enough.\n<|/ c |>\n<| c |>\n: I agree. I was just trying to show how it\
    \ could be done with switch statements. I guess I should have been more clear.\n\
    <|/ c |>\n<| c |>\nI agree with you. I was just trying to show how it could be\
    \ done with switch statements. I guess I should have been more clear.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    using namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n   \
    \ assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp062v6q5a.d(15): Error: found `in` when expecting `;`\n/tmp/tmp062v6q5a.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp062v6q5a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        string number = numbers[i];\n        \n        if(number\
    \ == \"zero\")\n            result += \"zero \";\n        else if(number == \"\
    one\")\n            result += \"one \";\n        else if(number == \"two\")\n\
    \            result += \"two \";\n        else if(number == \"three\")\n     \
    \       result += \"three \";\n        else if(number == \"four\")\n         \
    \   result += \"four \";\n        else if(number == \"five\")\n            result\
    \ += \"five \";\n        else if(number == \"six\")\n            result += \"\
    six \";\n        else if(number == \"seven\")\n            result += \"seven \"\
    ;\n        else if(number == \"eight\")\n            result += \"eight \";\n \
    \       else if(number == \"nine\")\n            result += \"nine \";\n      \
    \  else\n            result += number + \" \";\n    }\n    \n    for(int i = 0;\
    \ i < result.length(); i++)\n    {\n        if(result.at(i) == \" \")\n      \
    \      result += \"zero \";\n    }\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result.at(i) == \" \")\n            result += \"zero\
    \ \";\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n    \
    \    if(result.at(i) == \" \")\n            result += \"zero \";\n    }\n    \n\
    \    for(int i = 0; i < result.length(); i++)\n    {\n        if(result.at(i)\
    \ == \" \")\n            result += \"zero \";\n    }\n    \n    for(int i = 0;\
    \ i < result.length(); i++)\n    {\n        if(result.at(i) == \" \")\n      \
    \      result += \"zero \";\n    }\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result.at(i) == \" \")\n            result += \"zero\
    \ \";\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n    \
    \    if(result.at(i) == \" \")\n            result += \"zero \";\n    }\n    \n\
    \    for(int i = 0; i < result.length(); i++)\n    {\n        if(result.at(i)\
    \ == \" \")\n            result += \"zero \";\n    }\n    \n    for(int i = 0;\
    \ i < result.length(); i++)\n    {\n        if(result.at(i) == \" \")\n      \
    \      result += \"zero \";\n    }\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result.at(i) == \" \")\n            result += \"zero\
    \ \";\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n    \
    \    if(result.at(i) == \" \")\n            result += \"zero \";\n    }\n    \n\
    \    for(int i = 0; i < result.length(); i++)\n    {\n        if(result.at(i)\
    \ == \" \")\n            result += \"zero \";\n    }\n    \n    for(int i = 0;\
    \ i < result.length(); i++)\n    {\n        if(\nunittest\n{\n    alias candidate\
    \ = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp45s4scy5.d(118): Error: expression expected, not `unittest`\n/tmp/tmp45s4scy5.d(119):
    Error: found `{` when expecting `)`\n/tmp/tmp45s4scy5.d(128): Error: found `End
    of File` when expecting `}` following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp45s4scy5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n\
    #include <algorithm>\n#include <vector>\nusing namespace std;\nunittest\n{\n \
    \   alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplup7io2a.d(14): Error: found `in` when expecting `;`\n/tmp/tmplup7io2a.d(37):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmplup7io2a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result = result + c;\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid number: \" + numbers);\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n\
    #include <string>\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphqr58r_0.d(15): Error: found `in` when expecting `;`\n/tmp/tmphqr58r_0.d(40):
    Error: declaration expected, not `<`\n/tmp/tmphqr58r_0.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmphqr58r_0.d(53): Error: declaration expected, not
    `assert`\n/tmp/tmphqr58r_0.d(54): Error: declaration expected, not `assert`\n/tmp/tmphqr58r_0.d(55):
    Error: declaration expected, not `assert`\n/tmp/tmphqr58r_0.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmphqr58r_0.d(57): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqr58r_0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a |>\n<| a tags=sorting,c++,string |>\nI wrote\
    \ a solution in Python that uses string manipulation instead of sorting algorithms.\
    \ I hope it helps.\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split()\n\
    \    numbers.sort()\n    numbers = ' '.join(numbers)\n    return numbers\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkj4op4xl.d(15): Error: found `in` when expecting `;`\n/tmp/tmpkj4op4xl.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpkj4op4xl.d(54): Error: declaration
    expected, not `assert`\n/tmp/tmpkj4op4xl.d(55): Error: declaration expected, not
    `assert`\n/tmp/tmpkj4op4xl.d(56): Error: declaration expected, not `assert`\n/tmp/tmpkj4op4xl.d(57):
    Error: declaration expected, not `assert`\n/tmp/tmpkj4op4xl.d(58): Error: declaration
    expected, not `assert`\n/tmp/tmpkj4op4xl.d(59): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkj4op4xl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,sorting |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4py2sd42.d(15): Error: found `in` when expecting `;`\n/tmp/tmp4py2sd42.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp4py2sd42.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0': result += \"zero \"\
    ; break;\n            case '1': result += \"one \"; break;\n            case '2':\
    \ result += \"two \"; break;\n            case '3': result += \"three \"; break;\n\
    \            case '4': result += \"four \"; break;\n            case '5': result\
    \ += \"five \"; break;\n            case '6': result += \"six \"; break;\n   \
    \         case '7': result += \"seven \"; break;\n            case '8': result\
    \ += \"eight \"; break;\n            case '9': result += \"nine \"; break;\n \
    \       }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,c++ |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplqn4tugu.d(15): Error: found `in` when expecting `;`\n/tmp/tmplqn4tugu.d(36):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmplqn4tugu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution,\
    \ but I really don't like that I have to write all those cases. I thought there\
    \ might be a more elegant solution. Thanks anyway.\n<|/ c |>\n<| c |>\nI agree,\
    \ it's not a very elegant solution. I'm sure there are some clever ways to do\
    \ it, but I haven't found them yet. I'll keep looking though.\n<|/ c |>\n<| c\
    \ |>\nI added a more elegant solution that doesn't require you to write all those\
    \ cases. It's not as pretty as your original solution, but it's more elegant.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I really don't like that I have to\
    \ write all those cases. I thought there might be a more elegant solution. Thanks\
    \ anyway.\n<|/ c |>\n<| c |>\nI added a more elegant solution that doesn't require\
    \ you to write all those cases. It's not as pretty as your original solution,\
    \ but it's more elegant.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting,string |>\n<| c |>\nI like your solution, but I really\
    \ don't like that I have to write all those cases. I thought there might be a\
    \ more elegant solution. Thanks anyway.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I really don't like that I have to write all those cases. I thought \nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2qplwvsn.d(15): Error: found `in` when expecting `;`\n/tmp/tmp2qplwvsn.d(40):
    Error: declaration expected, not `<`\n/tmp/tmp2qplwvsn.d(43): Error: unterminated
    character constant\n/tmp/tmp2qplwvsn.d(46): Error: unterminated character constant\n/tmp/tmp2qplwvsn.d(46):
    Error: unterminated character constant\n/tmp/tmp2qplwvsn.d(46): Error: unterminated
    character constant\n/tmp/tmp2qplwvsn.d(46): Error: unterminated character constant\n/tmp/tmp2qplwvsn.d(49):
    Error: unterminated character constant\n/tmp/tmp2qplwvsn.d(49): Error: unterminated
    character constant\n/tmp/tmp2qplwvsn.d(49): Error: unterminated character constant\n/tmp/tmp2qplwvsn.d(52):
    Error: unterminated character constant\n/tmp/tmp2qplwvsn.d(55): Error: unterminated
    character constant\n/tmp/tmp2qplwvsn.d(55): Error: unterminated character constant\n/tmp/tmp2qplwvsn.d(55):
    Error: unterminated character constant\n/tmp/tmp2qplwvsn.d(62): Error: declaration
    expected, not `foreach`\n/tmp/tmp2qplwvsn.d(77): Error: declaration expected,
    not `break`\n/tmp/tmp2qplwvsn.d(78): Error: declaration expected, not `default`\n/tmp/tmp2qplwvsn.d(80):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2qplwvsn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid number: \" + c;\n     \
    \   }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n \
    \   alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeij3dobi.d(14): Error: found `in` when expecting `;`\n/tmp/tmpeij3dobi.d(37):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpeij3dobi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> map;\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        string num = numbers[i];\n        map[num] = i;\n    }\n\
    \    \n    string result = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n\
    \    {\n        string num = numbers[i];\n        int index = map[num];\n    \
    \    result += num;\n        for(int j = index + 1; j < numbers.length(); j++)\n\
    \        {\n            result += \" \" + numbers[j];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphmfcnxzg.d(13): Error: found `>` when expecting `.` following
    int\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphmfcnxzg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include\
    \ <string>\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp23djfk7_.d(15): Error: found `in` when expecting `;`\n/tmp/tmp23djfk7_.d(40):
    Error: declaration expected, not `<`\n/tmp/tmp23djfk7_.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmp23djfk7_.d(53): Error: declaration expected, not
    `assert`\n/tmp/tmp23djfk7_.d(54): Error: declaration expected, not `assert`\n/tmp/tmp23djfk7_.d(55):
    Error: declaration expected, not `assert`\n/tmp/tmp23djfk7_.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmp23djfk7_.d(57): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23djfk7_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<int, string> map;\n    map[0] = \"zero\";\n    map[1]\
    \ = \"one\";\n    map[2] = \"two\";\n    map[3] = \"three\";\n    map[4] = \"\
    four\";\n    map[5] = \"five\";\n    map[6] = \"six\";\n    map[7] = \"seven\"\
    ;\n    map[8] = \"eight\";\n    map[9] = \"nine\";\n    \n    vector<string> numbers_vec;\n\
    \    \n    foreach(char c, numbers) {\n        numbers_vec.push_back(map[to_integer(c)]);\n\
    \    }\n    \n    sort(numbers_vec.begin(), numbers_vec.end());\n    \n    string\
    \ result = \"\";\n    \n    foreach(string s, numbers_vec) {\n        result +=\
    \ s + \" \";\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI like your solution but I think it would be better to use a `map<int,\
    \ string>` instead of `vector<string>`\n<|/ c |>\n<| c |>\n: Yes, I agree. I've\
    \ edited my answer to include your suggestion.\n<|/ c |>\n<| a dscore=2 |>\nHere's\
    \ a solution using std::map and std::sort:\n<code>\n#include <iostream>\n#include\
    \ <map>\n#include <string>\n#include <algorithm>\n#include <iterator>\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplcsycjun.d(13): Error: found `,` when expecting `.` following
    int\n/tmp/tmplcsycjun.d(13): Error: found `>` when expecting `;` following statement\n/tmp/tmplcsycjun.d(25):
    Error: found `>` when expecting `;` following statement\n/tmp/tmplcsycjun.d(27):
    Error: no identifier for declarator `numbers`\n/tmp/tmplcsycjun.d(27): Error:
    found `)` when expecting `;`\n/tmp/tmplcsycjun.d(31): Error: found `sort` when
    expecting `)`\n/tmp/tmplcsycjun.d(35): Error: no identifier for declarator `numbers_vec`\n/tmp/tmplcsycjun.d(35):
    Error: found `)` when expecting `;`\n/tmp/tmplcsycjun.d(39): Error: found `return`
    when expecting `)`\n/tmp/tmplcsycjun.d(41): Error: declaration expected, not `<`\n/tmp/tmplcsycjun.d(47):
    Error: unterminated character constant\n/tmp/tmplcsycjun.d(50): Error: unterminated
    character constant\n/tmp/tmplcsycjun.d(61): Error: declaration expected, not `assert`\n/tmp/tmplcsycjun.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmplcsycjun.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmplcsycjun.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmplcsycjun.d(65): Error: declaration expected, not `assert`\n/tmp/tmplcsycjun.d(66):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplcsycjun.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa4eygj7t.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa4eygj7t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        char c = numbers[i];\n        \n        switch(c)\n   \
    \     {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid choice\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting\
    \ |>\n<| c |>\nThis doesn't work if the input string is \"one two three\"\n<|/\
    \ c |>\n<| c |>\nIt doesn't work because you didn't implement the sorting algorithm\
    \ correctly. Your code doesn't sort the input string at all. Your code doesn't\
    \ even sort the input string correctly if the input string is \"one two three\"\
    .\n<|/ c |>\n<| c |>\nI didn't implement the sorting algorithm correctly. Your\
    \ code doesn't sort the input string at all. Your code doesn't even sort the input\
    \ string correctly if the input string is \"one two three\".\n<|/ c |>\n<| c |>\n\
    I didn't implement the sorting algorithm correctly. Your code doesn't sort the\
    \ input string at all. Your code doesn't even sort the input string correctly\
    \ if the input string is \"one two three\".\n<|/ c |>\n<| c |>\nI didn't implement\
    \ the sorting algorithm correctly. Your code doesn't sort the input string at\
    \ all. Your code doesn't even sort the input string correctly if the input string\
    \ is \"one two three\".\n<|/ c |>\n<| a tags=c++,sorting |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjw42g6h9.d(42): Error: declaration expected, not `<`\n/tmp/tmpjw42g6h9.d(45):
    Error: unterminated character constant\n/tmp/tmpjw42g6h9.d(48): Error: unterminated
    character constant\n/tmp/tmpjw42g6h9.d(48): Error: unterminated character constant\n/tmp/tmpjw42g6h9.d(48):
    Error: unterminated character constant\n/tmp/tmpjw42g6h9.d(48): Error: unterminated
    character constant\n/tmp/tmpjw42g6h9.d(51): Error: unterminated character constant\n/tmp/tmpjw42g6h9.d(51):
    Error: unterminated character constant\n/tmp/tmpjw42g6h9.d(51): Error: unterminated
    character constant\n/tmp/tmpjw42g6h9.d(54): Error: unterminated character constant\n/tmp/tmpjw42g6h9.d(54):
    Error: unterminated character constant\n/tmp/tmpjw42g6h9.d(54): Error: unterminated
    character constant\n/tmp/tmpjw42g6h9.d(57): Error: unterminated character constant\n/tmp/tmpjw42g6h9.d(57):
    Error: unterminated character constant\n/tmp/tmpjw42g6h9.d(57): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjw42g6h9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    stringstream ss(numbers);\n    string num;\n    vector<int>\
    \ nums;\n    while(ss >> num)\n    {\n        nums.push_back(int(num));\n    }\n\
    \    sort(nums.begin(), nums.end());\n    string result = \"\";\n    for(int i\
    \ = 0; i < nums.size(); i++)\n    {\n        result += to_string(nums[i]);\n \
    \   }\n    return result;\n}\n</code>\n<|/ a |>\n<| a tags=c++,string,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpda7w5ube.d(15): Error: found `>` when expecting `.` following
    int\n/tmp/tmpda7w5ube.d(28): Error: declaration expected, not `<`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpda7w5ube.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,c++,string |>\n<| a dscore=2\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpemp5iwt_.d(15): Error: found `in` when expecting `;`\n/tmp/tmpemp5iwt_.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpemp5iwt_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\
    \ {\n        switch(c) {\n            case '0':\n            case '1':\n     \
    \       case '2':\n            case '3':\n            case '4':\n            case\
    \ '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid number: \" + c;\n     \
    \   }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `sort` sorts\
    \ lexicographically, not numerically.\n<|/ c |>\n<| c |>\n: Yes, it does. `sort`\
    \ sorts lexicographically, not numerically. `sort_numbers` sorts numerically.\n\
    <|/ c |>\n<| c |>\n: I see what you mean. `sort` sorts lexicographically, not\
    \ numerically. `sort_numbers` sorts numerically.\n<|/ c |>\n<| c |>\n: I see what\
    \ you mean. `sort` sorts lexicographically, not numerically. `sort_numbers` sorts\
    \ numerically.\n<|/ c |>\n<| c |>\n: I see what you mean. `sort` sorts lexicographically,\
    \ not numerically. `sort_numbers` sorts numerically.\n<|/ c |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_zqdvenv.d(15): Error: found `in` when expecting `;`\n/tmp/tmp_zqdvenv.d(38):
    Error: declaration expected, not `<`\n/tmp/tmp_zqdvenv.d(41): Error: unterminated
    character constant\n/tmp/tmp_zqdvenv.d(65): Error: declaration expected, not `assert`\n/tmp/tmp_zqdvenv.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmp_zqdvenv.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmp_zqdvenv.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmp_zqdvenv.d(69): Error: declaration expected, not `assert`\n/tmp/tmp_zqdvenv.d(70):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_zqdvenv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0': result += \"zero \"\
    ; break;\n            case '1': result += \"one \"; break;\n            case '2':\
    \ result += \"two \"; break;\n            case '3': result += \"three \"; break;\n\
    \            case '4': result += \"four \"; break;\n            case '5': result\
    \ += \"five \"; break;\n            case '6': result += \"six \"; break;\n   \
    \         case '7': result += \"seven \"; break;\n            case '8': result\
    \ += \"eight \"; break;\n            case '9': result += \"nine \"; break;\n \
    \           default: result += \"invalid \"; break;\n        }\n    }\n    \n\
    \    sort(result.begin(), result.end());\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=sorting,c++,string |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n \
    \   alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgxgyn1mw.d(15): Error: found `in` when expecting `;`\n/tmp/tmpgxgyn1mw.d(37):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpgxgyn1mw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result = result + c;\n        \
    \        break;\n            default:\n                throw new Exception(\"\
    Invalid input\");\n        }\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\n</code>\n<|/ a tags=c++,sorting,string |>\n<| a tags=c++,sorting,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuxvigjne.d(14): Error: found `in` when expecting `;`\n/tmp/tmpuxvigjne.d(37):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpuxvigjne.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4lvnc42s.d(15): Error: found `in` when expecting `;`\n/tmp/tmp4lvnc42s.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp4lvnc42s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<int, int> map;\n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        string num = numbers[i];\n        map[i] = map.count(num);\n\
    \    }\n    map<int, int>::iterator it;\n    string result = \"\";\n    for(it\
    \ = map.begin(); it != map.end(); it++)\n    {\n        if(it->second == 0)\n\
    \        {\n            result += it->first;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe7_jl62_.d(13): Error: found `,` when expecting `.` following
    int\n/tmp/tmpe7_jl62_.d(13): Error: found `int` when expecting identifier following
    `int`.\n/tmp/tmpe7_jl62_.d(13): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpe7_jl62_.d(19): Error: found `,` when expecting `.` following
    int\n/tmp/tmpe7_jl62_.d(19): Error: found `int` when expecting identifier following
    `int`.\n/tmp/tmpe7_jl62_.d(19): Error: found `>` when expecting `;` following
    statement\n/tmp/tmpe7_jl62_.d(19): Error: found `:` instead of statement\n/tmp/tmpe7_jl62_.d(23):
    Error: use `.` for member lookup, not `->`\n/tmp/tmpe7_jl62_.d(25): Error: use
    `.` for member lookup, not `->`\n/tmp/tmpe7_jl62_.d(30): Error: declaration expected,
    not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe7_jl62_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid number\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,string |>\n<| c\
    \ |>\nI like this solution, but I wonder if there is a way to do it without having\
    \ to write out the switch statement for each number in the string. Is there a\
    \ way to do this with a loop?\n<|/ c |>\n<| c |>\nYou could use a `std::map` with\
    \ the number as the key and the string as the value, then iterate through the\
    \ map and append the string to the result string. Or you could use a `std::unordered_map`\
    \ with the number as the key and the string as the value, then iterate through\
    \ the map and append the string to the result string.\n<|/ c |>\n<| c |>\nI added\
    \ an example of a `std::map` solution to my answer.\n<|/ c |>\n<| c |>\nI added\
    \ an example of a `std::unordered_map` solution to my answer.\n<|/ c |>\n<| c\
    \ |>\nI added an example of a `std::map` solution to my answer.\n<|/ c |>\n<|\
    \ a tags=sorting,c++,string |>\nYou can use the std::sort algorithm with a custom\
    \ comparator:\n<code>\n#include <algorithm>\n#include <string>\nunittest\n{\n\
    \    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1a7hbq2e.d(15): Error: found `in` when expecting `;`\n/tmp/tmp1a7hbq2e.d(40):
    Error: declaration expected, not `<`\n/tmp/tmp1a7hbq2e.d(66): Error: declaration
    expected, not `assert`\n/tmp/tmp1a7hbq2e.d(67): Error: declaration expected, not
    `assert`\n/tmp/tmp1a7hbq2e.d(68): Error: declaration expected, not `assert`\n/tmp/tmp1a7hbq2e.d(69):
    Error: declaration expected, not `assert`\n/tmp/tmp1a7hbq2e.d(70): Error: declaration
    expected, not `assert`\n/tmp/tmp1a7hbq2e.d(71): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1a7hbq2e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string,int> map;\n    map[\"zero\"] = 0;\n    map[\"one\"\
    ] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"four\"] = 4;\n\
    \    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n    map[\"\
    eight\"] = 8;\n    map[\"nine\"] = 9;\n    \n    vector<string> nums = split(numbers,\
    \ \" \");\n    \n    vector<int> nums_ints;\n    \n    for(int i = 0; i < nums.size();\
    \ i++)\n    {\n        nums_ints.push_back(map[nums[i]]);\n    }\n    \n    sort(nums_ints.begin(),\
    \ nums_ints.end());\n    \n    string result = \"\";\n    \n    for(int i = 0;\
    \ i < nums_ints.size(); i++)\n    {\n        result += to_string(nums_ints[i]);\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers(\"three one five\")` returns `\"one three five\"\
    `.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now it works.\n\
    <|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now it works.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <vector>\n#include <string>\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprmyucjqg.d(13): Error: found `>` when expecting `.` following
    int\n/tmp/tmprmyucjqg.d(25): Error: found `>` when expecting `;` following statement\n/tmp/tmprmyucjqg.d(27):
    Error: found `>` when expecting `.` following int\n/tmp/tmprmyucjqg.d(45): Error:
    declaration expected, not `<`\n/tmp/tmprmyucjqg.d(48): Error: unterminated character
    constant\n/tmp/tmprmyucjqg.d(66): Error: declaration expected, not `assert`\n/tmp/tmprmyucjqg.d(67):
    Error: declaration expected, not `assert`\n/tmp/tmprmyucjqg.d(68): Error: declaration
    expected, not `assert`\n/tmp/tmprmyucjqg.d(69): Error: declaration expected, not
    `assert`\n/tmp/tmprmyucjqg.d(70): Error: declaration expected, not `assert`\n/tmp/tmprmyucjqg.d(71):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprmyucjqg.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa4eygj7t.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa4eygj7t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nI like your\
    \ solution, although I believe it would be better to use a `std::set` instead\
    \ of a `std::vector` for the `result` variable. `std::set` has `lower_bound` and\
    \ `upper_bound` methods that would allow you to find the smallest and largest\
    \ numbers without having to loop through the entire `result` vector.\n<|/ c |>\n\
    <| c |>\nYes, I agree. `std::set` would be better. I'll update the answer.\n<|/\
    \ c |>\n<| c |>\nI agree that `std::set` is better, but I didn't want to change\
    \ the OP's code too much just to show how it could be done.\n<|/ c |>\n<| c |>\n\
    I agree that `std::set` is better, but I didn't want to change the OP's code too\
    \ much just to show how it could be done.\n<|/ c |>\n<| c |>\nI agree that `std::set`\
    \ is better, but I didn't want to change the OP's code too much just to show how\
    \ it could be done.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <algorithm>\n#include <vector>\n#include <string>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5jr6uroz.d(15): Error: found `in` when expecting `;`\n/tmp/tmp5jr6uroz.d(40):
    Error: declaration expected, not `<`\n/tmp/tmp5jr6uroz.d(46): Error: unterminated
    character constant\n/tmp/tmp5jr6uroz.d(49): Error: unterminated character constant\n/tmp/tmp5jr6uroz.d(49):
    Error: unterminated character constant\n/tmp/tmp5jr6uroz.d(52): Error: unterminated
    character constant\n/tmp/tmp5jr6uroz.d(52): Error: unterminated character constant\n/tmp/tmp5jr6uroz.d(55):
    Error: unterminated character constant\n/tmp/tmp5jr6uroz.d(55): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jr6uroz.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        int number = std.atoi(c);\n        \n        if(number < 10)\n\
    \        {\n            result += std.string(number);\n        }\n        else\n\
    \        {\n            result += std.string(number%10, number/10);\n        }\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting,string |>\n\
    <| a tags=c++,sorting,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyhjxmacp.d(15): Error: found `in` when expecting `;`\n/tmp/tmpyhjxmacp.d(31):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpyhjxmacp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < numbers.size();\
    \ ++i)\n    {\n        string number = numbers[i];\n        \n        for(int\
    \ j = 0; j < number.length(); ++j)\n        {\n            char c = number[j];\n\
    \            \n            if(c == 'n' || c == '9')\n            {\n         \
    \       result += c;\n            }\n            else\n            {\n       \
    \         string num = \"\";\n                \n                for(int k = 0;\
    \ k < j; ++k)\n                {\n                    num += number[k];\n    \
    \            }\n                \n                result += std.string.reverse(num);\n\
    \            }\n        }\n        \n        result += \" \";\n    }\n    \n \
    \   return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n  \
    \  assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt36v_0zv.d(15): Error: no property `size` for type `string`\n/tmp/tmpt36v_0zv.d(17):
    Error: cannot implicitly convert expression `numbers[cast(ulong)i]` of type `immutable(char)`
    to `string`\n/tmp/tmpt36v_0zv.d(19): Error: no property `length` for type `string`\n/tmp/tmpt36v_0zv.d(25):
    Error: slice `result` is not mutable\n/tmp/tmpt36v_0zv.d(33): Error: slice `num`
    is not mutable\n/tmp/tmpt36v_0zv.d(36): Error: undefined identifier `string` in
    package `std`\n/tmp/tmpt36v_0zv.d(40): Error: slice `result` is not mutable\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt36v_0zv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid choice\";\n        }\n\
    \    }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n    alias\
    \ candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwh71doy.d(14): Error: found `in` when expecting `;`\n/tmp/tmpqwh71doy.d(37):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpqwh71doy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution. Thanks\
    \ for sharing it.\n<|/ c |>\n<| a tags=sorting,c++,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nunittest\n{\n    alias\
    \ candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprqva8f1u.d(15): Error: found `in` when expecting `;`\n/tmp/tmprqva8f1u.d(40):
    Error: declaration expected, not `<`\n/tmp/tmprqva8f1u.d(54): Error: declaration
    expected, not `assert`\n/tmp/tmprqva8f1u.d(55): Error: declaration expected, not
    `assert`\n/tmp/tmprqva8f1u.d(56): Error: declaration expected, not `assert`\n/tmp/tmprqva8f1u.d(57):
    Error: declaration expected, not `assert`\n/tmp/tmprqva8f1u.d(58): Error: declaration
    expected, not `assert`\n/tmp/tmprqva8f1u.d(59): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprqva8f1u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result = result + c;\n        \
    \        break;\n            default:\n                throw new Exception(\"\
    Invalid input\");\n        }\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3r8682np.d(14): Error: found `in` when expecting `;`\n/tmp/tmp3r8682np.d(37):
    Error: declaration expected, not `<`\n/tmp/tmp3r8682np.d(49): Error: declaration
    expected, not `assert`\n/tmp/tmp3r8682np.d(50): Error: declaration expected, not
    `assert`\n/tmp/tmp3r8682np.d(51): Error: declaration expected, not `assert`\n/tmp/tmp3r8682np.d(52):
    Error: declaration expected, not `assert`\n/tmp/tmp3r8682np.d(53): Error: declaration
    expected, not `assert`\n/tmp/tmp3r8682np.d(54): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3r8682np.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        if(c == 'n')\n        {\n            result += \" nine\";\n  \
    \      }\n        else if(c == '9')\n        {\n            result += \" nine\"\
    ;\n        }\n        else if(c == '0')\n        {\n            result += \" zero\"\
    ;\n        }\n        else if(c == '1')\n        {\n            result += \" one\"\
    ;\n        }\n        else if(c == '2')\n        {\n            result += \" two\"\
    ;\n        }\n        else if(c == '3')\n        {\n            result += \" three\"\
    ;\n        }\n        else if(c == '4')\n        {\n            result += \" four\"\
    ;\n        }\n        else if(c == '5')\n        {\n            result += \" five\"\
    ;\n        }\n        else if(c == '6')\n        {\n            result += \" six\"\
    ;\n        }\n        else if(c == '7')\n        {\n            result += \" seven\"\
    ;\n        }\n        else if(c == '8')\n        {\n            result += \" eight\"\
    ;\n        }\n        else if(c == '9')\n        {\n            result += \" nine\"\
    ;\n        }\n        else\n        {\n            result += c;\n        }\n \
    \   }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx5g2v05.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprx5g2v05.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid input string\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmn1j3xr2.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmn1j3xr2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\
    \ {\n        switch(c) {\n            case '0':\n            case '1':\n     \
    \       case '2':\n            case '3':\n            case '4':\n            case\
    \ '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw new Exception(\"Invalid number '\"\
    \ + c + \"'\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg6lzrfkl.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg6lzrfkl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid number\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,c++,string |>\n<| c |>\nI like\
    \ your solution, but I believe that `std::sort` will sort lexicographically, not\
    \ numerically. For example, `sort_numbers(\"one two three\")` will return `\"\
    one two three\"`, not `\"one three two\"`.\n<|/ c |>\n<| c |>\nI believe that\
    \ `std::sort` will sort lexicographically, not numerically. For example, `sort_numbers(\"\
    one two three\")` will return `\"one two three\"`, not `\"one three two\"`.\n\
    <|/ c |>\n<| c |>\nI believe that `std::sort` will sort lexicographically, not\
    \ numerically. For example, `sort_numbers(\"one two three\")` will return `\"\
    one two three\"`, not `\"one three two\"`.\n<|/ c |>\n<| c |>\nI believe that\
    \ `std::sort` will sort lexicographically, not numerically. For example, `sort_numbers(\"\
    one two three\")` will return `\"one two three\"`, not `\"one three two\"`.\n\
    <|/ c |>\n<| c |>\nI believe that `std::sort` will sort lexicographically, not\
    \ numerically. For example, `sort_numbers(\"one two three\")` will return `\"\
    one two three\"`, not `\"one three two\"`.\n<|/ c |>\n<| a dscore=1 |>\nI believe\
    \ that std::sort will sort lexicographically, not numerically. For example, sort_numbers(\"\
    one two three\") will return \"one two three\", not \"one three two\".\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8s5u3ajh.d(15): Error: found `in` when expecting `;`\n/tmp/tmp8s5u3ajh.d(40):
    Error: declaration expected, not `<`\n/tmp/tmp8s5u3ajh.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmp8s5u3ajh.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmp8s5u3ajh.d(65): Error: declaration expected, not `assert`\n/tmp/tmp8s5u3ajh.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmp8s5u3ajh.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmp8s5u3ajh.d(68): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8s5u3ajh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid number\
    \ in sort_numbers\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. `sort_numbers(\"three one five\")` returns `\"one three five\"`.\n<|/\
    \ c |>\n<| c |>\nI fixed the bug in the code (I forgot to add `break` after `result\
    \ += c`). But I still don't think it's what OP wants. I think he wants to sort\
    \ numbers in ascending order. `sort_numbers(\"three one five\")` should return\
    \ `\"one three five\"`.\n<|/ c |>\n<| c |>\nYes, I see that now. Thanks for pointing\
    \ that out. I missed that detail.\n<|/ c |>\n<| c |>\nI added a version that sorts\
    \ numbers in ascending order. Thanks for pointing that out.\n<|/ c |>\n<| a tags=sorting,c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfnw6iyo3.d(15): Error: found `in` when expecting `;`\n/tmp/tmpfnw6iyo3.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpfnw6iyo3.d(43): Error: unterminated
    character constant\n/tmp/tmpfnw6iyo3.d(46): Error: unterminated character constant\n/tmp/tmpfnw6iyo3.d(46):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpfnw6iyo3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,c++,string |>\n<| a tags=sorting,c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7cslpq4z.d(15): Error: found `in` when expecting `;`\n/tmp/tmp7cslpq4z.d(40):
    Error: declaration expected, not `<`\n/tmp/tmp7cslpq4z.d(51): Error: declaration
    expected, not `assert`\n/tmp/tmp7cslpq4z.d(52): Error: declaration expected, not
    `assert`\n/tmp/tmp7cslpq4z.d(53): Error: declaration expected, not `assert`\n/tmp/tmp7cslpq4z.d(54):
    Error: declaration expected, not `assert`\n/tmp/tmp7cslpq4z.d(55): Error: declaration
    expected, not `assert`\n/tmp/tmp7cslpq4z.d(56): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cslpq4z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string,int> map;\n    for(int i=0;i<numbers.length();i++)\n\
    \    {\n        string key = numbers[i];\n        if(map.find(key)==map.end())\n\
    \        {\n            map[key] = i;\n        }\n        else\n        {\n  \
    \          int index = map[key];\n            map[key] = i+1;\n        }\n   \
    \ }\n    string result = \"\";\n    for(map<string,int>::iterator it = map.begin();it!=map.end();it++)\n\
    \    {\n        result += it->first+\" \";\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting,algorithm |>\n<| c |>\nThis doesn't work. Try it with `\"\
    one two three\"`.\n<|/ c |>\n<| c |>\n: I didn't test it but I think it works.\
    \ I tested it on \"one two three\" and it returned \"one two three\"\n<|/ c |>\n\
    <| c |>\n: I tested it on \"one two three\" and it returned \"one two three\"\n\
    <|/ c |>\n<| c |>\n: I tested it on \"one two three\" and it returned \"one two\
    \ three\"\n<|/ c |>\n<| c |>\n: I tested it on \"one two three\" and it returned\
    \ \"one two three\"\n<|/ c |>\n<| a tags=c++,sorting,algorithm |>\nI wrote this\
    \ in Java, hope it helps:\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\n\
    import java.util.List;\nunittest\n{\n    alias candidate = sort_numbers;\n\n \
    \   assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0r0o2519.d(13): Error: found `>` when expecting `.` following
    int\n/tmp/tmp0r0o2519.d(28): Error: found `>` when expecting `.` following int\n/tmp/tmp0r0o2519.d(28):
    Error: found `:` when expecting identifier following `int`.\n/tmp/tmp0r0o2519.d(28):
    Error: found `:` when expecting `;` following statement\n/tmp/tmp0r0o2519.d(28):
    Error: found `it` when expecting `;` following `for` condition\n/tmp/tmp0r0o2519.d(28):
    Error: expression expected, not `=`\n/tmp/tmp0r0o2519.d(28): Error: found `map`
    when expecting `)`\n/tmp/tmp0r0o2519.d(28): Error: found `)` when expecting `;`
    following statement\n/tmp/tmp0r0o2519.d(30): Error: use `.` for member lookup,
    not `->`\n/tmp/tmp0r0o2519.d(34): Error: declaration expected, not `<`\n/tmp/tmp0r0o2519.d(37):
    Error: unterminated character constant\n/tmp/tmp0r0o2519.d(40): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0r0o2519.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0': result += \"zero \"\
    ; break;\n            case '1': result += \"one \"; break;\n            case '2':\
    \ result += \"two \"; break;\n            case '3': result += \"three \"; break;\n\
    \            case '4': result += \"four \"; break;\n            case '5': result\
    \ += \"five \"; break;\n            case '6': result += \"six \"; break;\n   \
    \         case '7': result += \"seven \"; break;\n            case '8': result\
    \ += \"eight \"; break;\n            case '9': result += \"nine \"; break;\n \
    \           default: result += \"invalid \"; break;\n        }\n    }\n    \n\
    \    sort(result.begin(), result.end());\n    \n    foreach(char c in result)\n\
    \    {\n        switch(c)\n        {\n            case 'nine': result += \"nine\
    \ \"; break;\n            case 'eight': result += \"eight \"; break;\n       \
    \     case 'seven': result += \"seven \"; break;\n            case 'six': result\
    \ += \"six \"; break;\n            case 'five': result += \"five \"; break;\n\
    \            case 'four': result += \"four \"; break;\n            case 'three':\
    \ result += \"three \"; break;\n            case 'two': result += \"two \"; break;\n\
    \            case 'one': result += \"one \"; break;\n            case 'zero':\
    \ result += \"zero \"; break;\n            default: result += \"invalid \"; break;\n\
    \        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpipptq_3j.d(14): Error: found `in` when expecting `;`\n/tmp/tmpipptq_3j.d(34):
    Error: found `in` when expecting `;`\n/tmp/tmpipptq_3j.d(38): Error: unterminated
    character constant\n/tmp/tmpipptq_3j.d(38): Error: found `ine` when expecting
    `:`\n/tmp/tmpipptq_3j.d(38): Error: unterminated character constant\n/tmp/tmpipptq_3j.d(38):
    Error: found `result` when expecting `;` following statement\n/tmp/tmpipptq_3j.d(38):
    Error: found `+=` instead of statement\n/tmp/tmpipptq_3j.d(39): Error: unterminated
    character constant\n/tmp/tmpipptq_3j.d(39): Error: found `ight` when expecting
    `:`\n/tmp/tmpipptq_3j.d(39): Error: unterminated character constant\n/tmp/tmpipptq_3j.d(39):
    Error: found `result` when expecting `;` following statement\n/tmp/tmpipptq_3j.d(39):
    Error: found `+=` instead of statement\n/tmp/tmpipptq_3j.d(40): Error: unterminated
    character constant\n/tmp/tmpipptq_3j.d(40): Error: found `even` when expecting
    `:`\n/tmp/tmpipptq_3j.d(40): Error: unterminated character constant\n/tmp/tmpipptq_3j.d(40):
    Error: found `result` when expecting `;` following statement\n/tmp/tmpipptq_3j.d(40):
    Error: found `+=` instead of statement\n/tmp/tmpipptq_3j.d(41): Error: unterminated
    character constant\n/tmp/tmpipptq_3j.d(41): Error: found `ix` when expecting `:`\n/tmp/tmpipptq_3j.d(41):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpipptq_3j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,c++,string |>\n<| c |>\nThis\
    \ doesn't work for \"three one five\" because \"one\" comes before \"three\" in\
    \ the alphabet. Your code would return \"one three five\".\n<|/ c |>\n<| c |>\n\
    : I didn't say it would. My code would return \"one three five\". Your code would\
    \ return \"one three five\".\n<|/ c |>\n<| c |>\n: I didn't say it would. My code\
    \ would return \"one three five\". Your code would return \"one three five\".\n\
    <|/ c |>\n<| c |>\n: I didn't say it would. My code would return \"one three five\"\
    . Your code would return \"one three five\".\n<|/ c |>\n<| c |>\n: I didn't say\
    \ it would. My code would return \"one three five\". Your code would return \"\
    one three five\".\n<|/ c |>\n<| a tags=sorting,c++,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpju14rh_w.d(15): Error: found `in` when expecting `;`\n/tmp/tmpju14rh_w.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpju14rh_w.d(43): Error: unterminated
    character constant\n/tmp/tmpju14rh_w.d(46): Error: unterminated character constant\n/tmp/tmpju14rh_w.d(49):
    Error: unterminated character constant\n/tmp/tmpju14rh_w.d(52): Error: unterminated
    character constant\n/tmp/tmpju14rh_w.d(55): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpju14rh_w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid choice\";\n        }\n\
    \    }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like your solution, but I wonder if there is a way to do\
    \ it without having to write an entire sorting algorithm. I'm sure there is some\
    \ way to do it with std.algorithm.sort but I can't seem to find it.\n<|/ c |>\n\
    <| c |>\nI added a solution without std.algorithm.sort\n<|/ c |>\n<| c |>\nI added\
    \ a solution without std.algorithm.sort\n<|/ c |>\n<| a dscore=0 |>\nI wrote a\
    \ solution that uses std.algorithm.sort to sort the numbers and then uses std.algorithm.partition\
    \ to find the smallest and largest numbers. I then used std.algorithm.swap to\
    \ swap the smallest and largest numbers. I then used std.algorithm.insert to insert\
    \ the smallest number into the string and std.algorithm.remove to remove the largest\
    \ number from the string. \n<code>\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk9u7b570.d(14): Error: found `in` when expecting `;`\n/tmp/tmpk9u7b570.d(37):
    Error: declaration expected, not `<`\n/tmp/tmpk9u7b570.d(40): Error: unterminated
    character constant\n/tmp/tmpk9u7b570.d(40): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk9u7b570.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        if(numbers[i] == \"zero\")\n        {\n            result\
    \ += \" zero\";\n        }\n        else if(numbers[i] == \"one\")\n        {\n\
    \            result += \" one\";\n        }\n        else if(numbers[i] == \"\
    two\")\n        {\n            result += \" two\";\n        }\n        else if(numbers[i]\
    \ == \"three\")\n        {\n            result += \" three\";\n        }\n   \
    \     else if(numbers[i] == \"four\")\n        {\n            result += \" four\"\
    ;\n        }\n        else if(numbers[i] == \"five\")\n        {\n           \
    \ result += \" five\";\n        }\n        else if(numbers[i] == \"six\")\n  \
    \      {\n            result += \" six\";\n        }\n        else if(numbers[i]\
    \ == \"seven\")\n        {\n            result += \" seven\";\n        }\n   \
    \     else if(numbers[i] == \"eight\")\n        {\n            result += \" eight\"\
    ;\n        }\n        else if(numbers[i] == \"nine\")\n        {\n           \
    \ result += \" nine\";\n        }\n        else\n        {\n            result\
    \ += numbers[i];\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. `sort_numbers(\"one two three\")` returns `\"one two three\"`.\n<|/ c\
    \ |>\n<| c |>\nOh yeah, I forgot about that case. I'll fix it in a minute.\n<|/\
    \ c |>\n<| c |>\nI fixed it now. Thanks for pointing that out.\n<|/ c |>\n<| c\
    \ |>\nThis still doesn't work. `sort_numbers(\"one two three\")` returns `\"one\
    \ two three\"`.\n<|/ c |>\n<| c |>\nI fixed it again. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n    alias\
    \ candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr8k6l0an.d(67): Error: declaration expected, not `<`\n/tmp/tmpr8k6l0an.d(70):
    Error: unterminated character constant\n/tmp/tmpr8k6l0an.d(73): Error: unterminated
    character constant\n/tmp/tmpr8k6l0an.d(79): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr8k6l0an.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c\
    \ |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns `\"\
    one two three\"`.\n<|/ c |>\n<| c |>\nI fixed the bug and added a test case. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    one two three\")` returns `\"one two three\"`.\n<|/ c |>\n<| c |>\nI fixed the\
    \ bug and added a test case. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n\
    This doesn't work for me. `sort_numbers(\"one two three\")` returns `\"one two\
    \ three\"`.\n<|/ c |>\n<| a tags=c++,sorting,string |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppr6katee.d(15): Error: found `in` when expecting `;`\n/tmp/tmppr6katee.d(40):
    Error: declaration expected, not `<`\n/tmp/tmppr6katee.d(43): Error: unterminated
    character constant\n/tmp/tmppr6katee.d(49): Error: unterminated character constant\n/tmp/tmppr6katee.d(55):
    Error: unterminated character constant\n/tmp/tmppr6katee.d(66): Error: declaration
    expected, not `assert`\n/tmp/tmppr6katee.d(67): Error: declaration expected, not
    `assert`\n/tmp/tmppr6katee.d(68): Error: declaration expected, not `assert`\n/tmp/tmppr6katee.d(69):
    Error: declaration expected, not `assert`\n/tmp/tmppr6katee.d(70): Error: declaration
    expected, not `assert`\n/tmp/tmppr6katee.d(71): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppr6katee.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0': result += \"zero\"\
    ; break;\n            case '1': result += \"one\"; break;\n            case '2':\
    \ result += \"two\"; break;\n            case '3': result += \"three\"; break;\n\
    \            case '4': result += \"four\"; break;\n            case '5': result\
    \ += \"five\"; break;\n            case '6': result += \"six\"; break;\n     \
    \       case '7': result += \"seven\"; break;\n            case '8': result +=\
    \ \"eight\"; break;\n            case '9': result += \"nine\"; break;\n      \
    \      default:\n                throw new Exception(\"Invalid input string\"\
    );\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n  \
    \  return result;\n}\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c |>\nThis\
    \ doesn't work. `sort` doesn't work with `string`s.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I used the code from your question and added the missing `#include\
    \ <algorithm>` at the top. What compiler are you using?\n<|/ c |>\n<| c |>\nI\
    \ used the code from your question and added the missing `#include <algorithm>`\
    \ at the top. What compiler are you using?\n<|/ c |>\n<| c |>\nI used the code\
    \ from your question and added the missing `#include <algorithm>` at the top.\
    \ What compiler are you using?\n<|/ c |>\n<| c |>\nI used the code from your question\
    \ and added the missing `#include <algorithm>` at the top. What compiler are you\
    \ using?\n<|/ c |>\n<| a tags=c++,sorting,string |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnnyg97mh.d(15): Error: found `in` when expecting `;`\n/tmp/tmpnnyg97mh.d(38):
    Error: declaration expected, not `<`\n/tmp/tmpnnyg97mh.d(41): Error: unterminated
    character constant\n/tmp/tmpnnyg97mh.d(41): Error: unterminated character constant\n/tmp/tmpnnyg97mh.d(64):
    Error: declaration expected, not `assert`\n/tmp/tmpnnyg97mh.d(65): Error: declaration
    expected, not `assert`\n/tmp/tmpnnyg97mh.d(66): Error: declaration expected, not
    `assert`\n/tmp/tmpnnyg97mh.d(67): Error: declaration expected, not `assert`\n/tmp/tmpnnyg97mh.d(68):
    Error: declaration expected, not `assert`\n/tmp/tmpnnyg97mh.d(69): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnnyg97mh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid number\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgfu8u601.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgfu8u601.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThe `sort` function\
    \ will sort a vector of strings. You don't need to convert it to a vector of ints.\n\
    <|/ c |>\n<| c |>\nI didn't know that. Thanks for pointing that out.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\
    using namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n   \
    \ assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkzwrncgc.d(15): Error: found `in` when expecting `;`\n/tmp/tmpkzwrncgc.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpkzwrncgc.d(43): Error: unterminated
    character constant\n/tmp/tmpkzwrncgc.d(46): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkzwrncgc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid input\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n\
    using namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n   \
    \ assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpay0lvzn8.d(15): Error: found `in` when expecting `;`\n/tmp/tmpay0lvzn8.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpay0lvzn8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0': result += \"zero \"\
    ;\n                break;\n            case '1': result += \"one \";\n       \
    \         break;\n            case '2': result += \"two \";\n                break;\n\
    \            case '3': result += \"three \";\n                break;\n       \
    \     case '4': result += \"four \";\n                break;\n            case\
    \ '5': result += \"five \";\n                break;\n            case '6': result\
    \ += \"six \";\n                break;\n            case '7': result += \"seven\
    \ \";\n                break;\n            case '8': result += \"eight \";\n \
    \               break;\n            case '9': result += \"nine \";\n         \
    \       break;\n            default: result += c;\n        }\n    }\n    \n  \
    \  sort(result.begin(), result.end());\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo_ykgry4.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_ykgry4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        char c = numbers[i];\n        \n        if(c == 'nine')\n\
    \        {\n            result += \"nine\";\n        }\n        else if(c == 'zero')\n\
    \        {\n            result += \"zero\";\n        }\n        else if(c == 'one')\n\
    \        {\n            result += \"one\";\n        }\n        else if(c == 'two')\n\
    \        {\n            result += \"two\";\n        }\n        else if(c == 'three')\n\
    \        {\n            result += \"three\";\n        }\n        else if(c ==\
    \ 'four')\n        {\n            result += \"four\";\n        }\n        else\
    \ if(c == 'five')\n        {\n            result += \"five\";\n        }\n   \
    \     else if(c == 'six')\n        {\n            result += \"six\";\n       \
    \ }\n        else if(c == 'seven')\n        {\n            result += \"seven\"\
    ;\n        }\n        else if(c == 'eight')\n        {\n            result +=\
    \ \"eight\";\n        }\n        else if(c == 'nine')\n        {\n           \
    \ result += \"nine\";\n        }\n        else\n        {\n            result\
    \ += c;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp72t644q7.d(19): Error: unterminated character constant\n/tmp/tmp72t644q7.d(19):
    Error: found `ine` when expecting `)`\n/tmp/tmp72t644q7.d(19): Error: unterminated
    character constant\n/tmp/tmp72t644q7.d(20): Error: found `{` when expecting `;`
    following statement\n/tmp/tmp72t644q7.d(23): Error: found `else` without a corresponding
    `if`, `version` or `debug` statement\n/tmp/tmp72t644q7.d(23): Error: unterminated
    character constant\n/tmp/tmp72t644q7.d(23): Error: unterminated character constant\n/tmp/tmp72t644q7.d(27):
    Error: declaration expected, not `else`\n/tmp/tmp72t644q7.d(27): Error: unterminated
    character constant\n/tmp/tmp72t644q7.d(27): Error: unterminated character constant\n/tmp/tmp72t644q7.d(30):
    Error: unrecognized declaration\n/tmp/tmp72t644q7.d(31): Error: unterminated character
    constant\n/tmp/tmp72t644q7.d(31): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp72t644q7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\
    \ {\n        switch(c) {\n            case '0':\n            case '1':\n     \
    \       case '2':\n            case '3':\n            case '4':\n            case\
    \ '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid choice\";\n        }\n\
    \    }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThis doesn't work if the numbers\
    \ are in any order other than ascending.\n<|/ c |>\n<| c |>\n: It does work if\
    \ the numbers are in any order other than ascending.\n<|/ c |>\n<| c |>\n: It\
    \ does work if the numbers are in any order other than ascending.\n<|/ c |>\n\
    <| c |>\n: It does work if the numbers are in any order other than ascending.\n\
    <|/ c |>\n<| c |>\n: It does work if the numbers are in any order other than ascending.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <vector>\nusing namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp22rv9s8.d(15): Error: found `in` when expecting `;`\n/tmp/tmpp22rv9s8.d(38):
    Error: declaration expected, not `<`\n/tmp/tmpp22rv9s8.d(41): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp22rv9s8.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result = result + c;\n        \
    \        break;\n            default:\n                throw new Exception(\"\
    Invalid input\");\n        }\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\n</code>\n<|/ a tags=c++,string,sorting |>\n<| a tags=c++,string,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4hptcak1.d(14): Error: found `in` when expecting `;`\n/tmp/tmp4hptcak1.d(37):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp4hptcak1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        if(isdigit(c))\n        {\n            int number = std.atoi(&c);\n\
    \            \n            if(number < 10)\n            {\n                result\
    \ += &c;\n            }\n            else\n            {\n                result\
    \ += &std.tostring(number - 10);\n            }\n        }\n        else\n   \
    \     {\n            result += &c;\n        }\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n \
    \   alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyyzk48a0.d(15): Error: found `in` when expecting `;`\n/tmp/tmpyyzk48a0.d(38):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpyyzk48a0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid input string\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaf5b6pyf.d(15): Error: found `in` when expecting `;`\n/tmp/tmpaf5b6pyf.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpaf5b6pyf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        result += numbers[i];\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a tags=sorting,c++ |>\n\
    <| a tags=sorting,c++ |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <string>\nusing namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgckdv6yi.d(21): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgckdv6yi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd_8_rdjx.d(15): Error: found `in` when expecting `;`\n/tmp/tmpd_8_rdjx.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpd_8_rdjx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,string |>\n<| c\
    \ |>\nThis doesn't work. `sort_numbers(\"one two three\")` returns `\"one two\
    \ three\"`.\n<|/ c |>\n<| c |>\n: Yes, I noticed that after I posted my comment.\
    \ Fixed now.\n<|/ c |>\n<| c |>\n: Thanks for your comment. Fixed now.\n<|/ c\
    \ |>\n<| a tags=sorting,c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nunittest\n{\n    alias candidate = sort_numbers;\n\n   \
    \ assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn8y763su.d(15): Error: found `in` when expecting `;`\n/tmp/tmpn8y763su.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpn8y763su.d(43): Error: unterminated
    character constant\n/tmp/tmpn8y763su.d(60): Error: declaration expected, not `assert`\n/tmp/tmpn8y763su.d(61):
    Error: declaration expected, not `assert`\n/tmp/tmpn8y763su.d(62): Error: declaration
    expected, not `assert`\n/tmp/tmpn8y763su.d(63): Error: declaration expected, not
    `assert`\n/tmp/tmpn8y763su.d(64): Error: declaration expected, not `assert`\n/tmp/tmpn8y763su.d(65):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn8y763su.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result = result + c;\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0q4sx9f3.d(15): Error: found `in` when expecting `;`\n/tmp/tmp0q4sx9f3.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0q4sx9f3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> map;\n    map[\"zero\"] = 0;\n    map[\"\
    one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"four\"\
    ] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n\
    \    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n    \n    string result = \"\
    \";\n    \n    foreach(char c in numbers)\n    {\n        auto it = map.find(c);\n\
    \        if(it != map.end())\n        {\n            result += to_string(it->second);\n\
    \        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,string,sorting\
    \ |>\n<| a tags=c++,string,sorting |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n \
    \   alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphlw923ut.d(13): Error: found `>` when expecting `.` following
    int\n/tmp/tmphlw923ut.d(27): Error: found `in` when expecting `;`\n/tmp/tmphlw923ut.d(32):
    Error: use `.` for member lookup, not `->`\n/tmp/tmphlw923ut.d(38): Error: declaration
    expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlw923ut.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,c++,string |>\n<| c |>\nI like this solution, because it doesn't\
    \ require any additional libraries. However, I do have one question: why do you\
    \ use \"string\" instead of \"char\"? I thought that \"string\" was a typedef\
    \ for \"char*\", so why do you use \"char\"?\n<|/ c |>\n<| c |>\n`string` is a\
    \ `typedef char*` so `string` is a `char*`\n<|/ c |>\n<| c |>\nI see. Thanks for\
    \ the explanation!\n<|/ c |>\n<| a tags=sorting,c++,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptc2xlo6_.d(14): Error: found `in` when expecting `;`\n/tmp/tmptc2xlo6_.d(37):
    Error: declaration expected, not `<`\n/tmp/tmptc2xlo6_.d(40): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptc2xlo6_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        if(isdigit(c))\n        {\n            int number = std.atoi(c);\n\
    \            result += std.to_string(number);\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,c++,string |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n \
    \   alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5uevn6u_.d(14): Error: found `in` when expecting `;`\n/tmp/tmp5uevn6u_.d(24):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp5uevn6u_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        int number = std.atoi(c);\n        if(number < 10)\n           \
    \ result += std.string(\"zero \");\n        else if(number < 100)\n          \
    \  result += std.string(\"one \");\n        else if(number < 1000)\n         \
    \   result += std.string(\"two \");\n        else if(number < 10000)\n       \
    \     result += std.string(\"three \");\n        else if(number < 100000)\n  \
    \          result += std.string(\"four \");\n        else if(number < 1000000)\n\
    \            result += std.string(\"five \");\n        else if(number < 10000000)\n\
    \            result += std.string(\"six \");\n        else if(number < 100000000)\n\
    \            result += std.string(\"seven \");\n        else if(number < 1000000000)\n\
    \            result += std.string(\"eight \");\n        else if(number < 10000000000)\n\
    \            result += std.string(\"nine \");\n        else\n            result\
    \ += std.string(\"zero \");\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without having to write out every possible permutation of numbers. I wonder\
    \ if there is a way to do this with recursion.\n<|/ c |>\n<| c |>\n: Yes, you\
    \ can do it with recursion, but it's more complicated than it needs to be. I'll\
    \ post an answer in a minute.\n<|/ c |>\n<| c |>\n: I added a recursive solution\
    \ that doesn't require you to write out every possible permutation. Hope it helps.\n\
    <|/ c |>\n<| c |>\n: I added a recursive solution that doesn't require you to\
    \ write out every possible permutation. Hope it helps.\n<|/ c |>\n<| c |>\n: I\
    \ added a recursive solution that doesn't require you to write out every possible\
    \ permutation. Hope it helps.\n<|/ c |>\n<| a tags=c++,sorting |>\nHere's a recursive\
    \ solution that doesn't require you to write out every possible permutation. Hope\
    \ it helps.\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzyqfamhe.d(14): Error: found `in` when expecting `;`\n/tmp/tmpzyqfamhe.d(42):
    Error: declaration expected, not `<`\n/tmp/tmpzyqfamhe.d(48): Error: unterminated
    character constant\n/tmp/tmpzyqfamhe.d(48): Error: unterminated character constant\n/tmp/tmpzyqfamhe.d(51):
    Error: unterminated character constant\n/tmp/tmpzyqfamhe.d(54): Error: unterminated
    character constant\n/tmp/tmpzyqfamhe.d(57): Error: unterminated character constant\n/tmp/tmpzyqfamhe.d(60):
    Error: unterminated character constant\n/tmp/tmpzyqfamhe.d(60): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzyqfamhe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp37r1hksc.d(15): Error: found `in` when expecting `;`\n/tmp/tmp37r1hksc.d(40):
    Error: declaration expected, not `<`\n/tmp/tmp37r1hksc.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmp37r1hksc.d(53): Error: declaration expected, not
    `assert`\n/tmp/tmp37r1hksc.d(54): Error: declaration expected, not `assert`\n/tmp/tmp37r1hksc.d(55):
    Error: declaration expected, not `assert`\n/tmp/tmp37r1hksc.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmp37r1hksc.d(57): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp37r1hksc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        string num = numbers[i];\n        \n        if(num == \"\
    zero\")\n        {\n            result += \"zero\";\n        }\n        else if(num\
    \ == \"one\")\n        {\n            result += \"one\";\n        }\n        else\
    \ if(num == \"two\")\n        {\n            result += \"two\";\n        }\n \
    \       else if(num == \"three\")\n        {\n            result += \"three\"\
    ;\n        }\n        else if(num == \"four\")\n        {\n            result\
    \ += \"four\";\n        }\n        else if(num == \"five\")\n        {\n     \
    \       result += \"five\";\n        }\n        else if(num == \"six\")\n    \
    \    {\n            result += \"six\";\n        }\n        else if(num == \"seven\"\
    )\n        {\n            result += \"seven\";\n        }\n        else if(num\
    \ == \"eight\")\n        {\n            result += \"eight\";\n        }\n    \
    \    else if(num == \"nine\")\n        {\n            result += \"nine\";\n  \
    \      }\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThis is not an answer. Just a bunch of code. Can you explain what it does\
    \ and how it does it?\n<|/ c |>\n<| c |>\nI added some comments to explain what\
    \ each line does. I hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Your code works but it's too long. I think it's better to use a switch statement\
    \ or if statement. Thanks anyway\n<|/ c |>\n<| c |>\nI agree, it's better to use\
    \ a switch statement. I'll add that to my answer.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppfat9o72.d(63): Error: declaration expected, not `<`\n/tmp/tmppfat9o72.d(72):
    Error: unterminated character constant\n/tmp/tmppfat9o72.d(72): Error: unterminated
    character constant\n/tmp/tmppfat9o72.d(75): Error: unterminated character constant\n/tmp/tmppfat9o72.d(75):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmppfat9o72.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        if(isdigit(c))\n        {\n            int number = to_integer(c);\n\
    \            result += to_string(number);\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjvq8_b73.d(14): Error: found `in` when expecting `;`\n/tmp/tmpjvq8_b73.d(25):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpjvq8_b73.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid choice\";\n        }\n\
    \    }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9vvcayj0.d(14): Error: found `in` when expecting `;`\n/tmp/tmp9vvcayj0.d(37):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp9vvcayj0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq7gotxgd.d(15): Error: found `in` when expecting `;`\n/tmp/tmpq7gotxgd.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq7gotxgd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>\nunittest\n{\n    alias\
    \ candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpav1m1kb8.d(15): Error: found `in` when expecting `;`\n/tmp/tmpav1m1kb8.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpav1m1kb8.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmpav1m1kb8.d(53): Error: declaration expected, not
    `assert`\n/tmp/tmpav1m1kb8.d(54): Error: declaration expected, not `assert`\n/tmp/tmpav1m1kb8.d(55):
    Error: declaration expected, not `assert`\n/tmp/tmpav1m1kb8.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmpav1m1kb8.d(57): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpav1m1kb8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result = result + c;\n\
    \                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting,algorithm |>\n<|\
    \ c |>\nThis doesn't work if the numbers are in any order other than ascending\
    \ or descending. For example, sort_numbers(\"one three five\") returns \"one three\
    \ five\".\n<|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting, and\
    \ it does. I tested it again just now and I see that my test case is wrong. I'll\
    \ fix it right away.\n<|/ c |>\n<| c |>\n: I fixed the bug in my test case. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\n: I fixed the bug in my test case.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| c |>\n: I fixed the bug in my test\
    \ case. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include\
    \ <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk8xwosyj.d(15): Error: found `in` when expecting `;`\n/tmp/tmpk8xwosyj.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpk8xwosyj.d(43): Error: unterminated
    character constant\n/tmp/tmpk8xwosyj.d(46): Error: unterminated character constant\n/tmp/tmpk8xwosyj.d(67):
    Error: declaration expected, not `assert`\n/tmp/tmpk8xwosyj.d(68): Error: declaration
    expected, not `assert`\n/tmp/tmpk8xwosyj.d(69): Error: declaration expected, not
    `assert`\n/tmp/tmpk8xwosyj.d(70): Error: declaration expected, not `assert`\n/tmp/tmpk8xwosyj.d(71):
    Error: declaration expected, not `assert`\n/tmp/tmpk8xwosyj.d(72): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk8xwosyj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid input\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyg_4osgn.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyg_4osgn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0': result += \"zero \"\
    ; break;\n            case '1': result += \"one \"; break;\n            case '2':\
    \ result += \"two \"; break;\n            case '3': result += \"three \"; break;\n\
    \            case '4': result += \"four \"; break;\n            case '5': result\
    \ += \"five \"; break;\n            case '6': result += \"six \"; break;\n   \
    \         case '7': result += \"seven \"; break;\n            case '8': result\
    \ += \"eight \"; break;\n            case '9': result += \"nine \"; break;\n \
    \           default: result += c; break;\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result + result.back();\n}\n</code>\n<|/ a\
    \ tags=c++,sorting,string |>\n<| c |>\nI like this solution, it's very simple\
    \ and easy to understand.\n<|/ c |>\n<| c |>\nI like it, but I wonder if there\
    \ is a way to do it without using switch/case statements?\n<|/ c |>\n<| c |>\n\
    I added a solution without switch/case\n<|/ c |>\n<| a tags=c++,sorting,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwpt8u3o2.d(15): Error: found `in` when expecting `;`\n/tmp/tmpwpt8u3o2.d(37):
    Error: declaration expected, not `<`\n/tmp/tmpwpt8u3o2.d(40): Error: unterminated
    character constant\n/tmp/tmpwpt8u3o2.d(58): Error: declaration expected, not `assert`\n/tmp/tmpwpt8u3o2.d(59):
    Error: declaration expected, not `assert`\n/tmp/tmpwpt8u3o2.d(60): Error: declaration
    expected, not `assert`\n/tmp/tmpwpt8u3o2.d(61): Error: declaration expected, not
    `assert`\n/tmp/tmpwpt8u3o2.d(62): Error: declaration expected, not `assert`\n/tmp/tmpwpt8u3o2.d(63):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwpt8u3o2.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid input\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp71lkh8n_.d(15): Error: found `in` when expecting `;`\n/tmp/tmp71lkh8n_.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp71lkh8n_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    sort(result.begin(), result.end());\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphf0h7omy.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphf0h7omy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < numbers.size();\
    \ ++i)\n    {\n        string number = numbers[i];\n        \n        for(int\
    \ j = 0; j < number.length(); ++j)\n        {\n            int number = number[j];\n\
    \            \n            for(int k = 0; k < 9; ++k)\n            {\n       \
    \         if(number == k)\n                {\n                    result += k;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\n\
    This doesn't work for me. I'm getting a segmentation fault when I try to run it.\n\
    <|/ c |>\n<| c |>\nI added a working example to my answer.\n<|/ c |>\n<| c |>\n\
    Thanks for the help. I appreciate it.\n<|/ c |>\n<| a tags=c++,sorting |>\nThe\
    \ code below will sort a vector of strings in ascending order and will output\
    \ the sorted vector to the console.\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>\n#include <string>\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl0jjlvr3.d(36): Error: declaration expected, not `<`\n/tmp/tmpl0jjlvr3.d(39):
    Error: unterminated character constant\n/tmp/tmpl0jjlvr3.d(39): Error: unterminated
    character constant\n/tmp/tmpl0jjlvr3.d(58): Error: declaration expected, not `assert`\n/tmp/tmpl0jjlvr3.d(59):
    Error: declaration expected, not `assert`\n/tmp/tmpl0jjlvr3.d(60): Error: declaration
    expected, not `assert`\n/tmp/tmpl0jjlvr3.d(61): Error: declaration expected, not
    `assert`\n/tmp/tmpl0jjlvr3.d(62): Error: declaration expected, not `assert`\n/tmp/tmpl0jjlvr3.d(63):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl0jjlvr3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        int number = std.string.to!int(c);\n        result += std.string.format(\"\
    %d \", number);\n    }\n    \n    result += \"nine\";\n    \n    return result;\n\
    }\n</code>\n<|/ a |>\n<| a tags=string,sorting,c++,arrays |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi4k1dt7c.d(14): Error: found `in` when expecting `;`\n/tmp/tmpi4k1dt7c.d(24):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpi4k1dt7c.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThis doesn't\
    \ work if you have a string like \"one two three\". It will sort \"one\" before\
    \ \"two\".\n<|/ c |>\n<| c |>\nIt will sort \"one\" before \"two\" because \"\
    one\" comes before \"two\" in the ASCII table. ASCII table is [here](http://www.asciitable.com/)\n\
    <|/ c |>\n<| c |>\nI didn't downvote, but this doesn't work if you have a string\
    \ like \"one two three\". It will sort \"one\" before \"two\".\n<|/ c |>\n<| c\
    \ |>\nIt will sort \"one\" before \"two\" because \"one\" comes before \"two\"\
    \ in the ASCII table. ASCII table is [here](http://www.asciitable.com/)\n<|/ c\
    \ |>\n<| c |>\nI didn't downvote, but this doesn't work if you have a string like\
    \ \"one two three\". It will sort \"one\" before \"two\".\n<|/ c |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <string>\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5oj7j9va.d(15): Error: found `in` when expecting `;`\n/tmp/tmp5oj7j9va.d(40):
    Error: declaration expected, not `<`\n/tmp/tmp5oj7j9va.d(43): Error: unterminated
    character constant\n/tmp/tmp5oj7j9va.d(49): Error: unterminated character constant\n/tmp/tmp5oj7j9va.d(49):
    Error: unterminated character constant\n/tmp/tmp5oj7j9va.d(55): Error: unterminated
    character constant\n/tmp/tmp5oj7j9va.d(55): Error: unterminated character constant\n/tmp/tmp5oj7j9va.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmp5oj7j9va.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmp5oj7j9va.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmp5oj7j9va.d(69): Error: declaration expected, not `assert`\n/tmp/tmp5oj7j9va.d(70):
    Error: declaration expected, not `assert`\n/tmp/tmp5oj7j9va.d(71): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5oj7j9va.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        int number = std.atoi(c);\n        result += std.tostring(number);\n\
    \    }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,c++,string |>\n<| c |>\nThis doesn't work. `sort_numbers(\"\
    one two three\")` returns `\"one two three\"`.\n<|/ c |>\n<| c |>\n: I fixed the\
    \ bug. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvajychc8.d(14): Error: found `in` when expecting `;`\n/tmp/tmpvajychc8.d(22):
    Error: declaration expected, not `<`\n/tmp/tmpvajychc8.d(25): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvajychc8.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <string>\nusing namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz7xfwy6y.d(14): Error: found `in` when expecting `;`\n/tmp/tmpz7xfwy6y.d(37):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpz7xfwy6y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid input string\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nI like\
    \ this solution, it's very concise and easy to understand.\n<|/ c |>\n<| c |>\n\
    I like this solution, it's very concise and easy to understand.\n<|/ c |>\n<|\
    \ a dscore=4 |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n\
    #include <string>\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp315nf464.d(15): Error: found `in` when expecting `;`\n/tmp/tmp315nf464.d(40):
    Error: declaration expected, not `<`\n/tmp/tmp315nf464.d(43): Error: unterminated
    character constant\n/tmp/tmp315nf464.d(46): Error: unterminated character constant\n/tmp/tmp315nf464.d(58):
    Error: declaration expected, not `assert`\n/tmp/tmp315nf464.d(59): Error: declaration
    expected, not `assert`\n/tmp/tmp315nf464.d(60): Error: declaration expected, not
    `assert`\n/tmp/tmp315nf464.d(61): Error: declaration expected, not `assert`\n/tmp/tmp315nf464.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmp315nf464.d(63): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp315nf464.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result = result + c;\n        \
    \        break;\n            default:\n                break;\n        }\n   \
    \ }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=sorting,c++,string |>\nI wrote a solution in Python\
    \ that uses list comprehension to sort the numbers and then joins the list back\
    \ into a string. \n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split()\n\
    \    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    return ' '.join(str(x)\
    \ for x in numbers)\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0lxn809i.d(14): Error: found `in` when expecting `;`\n/tmp/tmp0lxn809i.d(37):
    Error: declaration expected, not `<`\n/tmp/tmp0lxn809i.d(59): Error: declaration
    expected, not `assert`\n/tmp/tmp0lxn809i.d(60): Error: declaration expected, not
    `assert`\n/tmp/tmp0lxn809i.d(61): Error: declaration expected, not `assert`\n/tmp/tmp0lxn809i.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmp0lxn809i.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmp0lxn809i.d(64): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0lxn809i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result = result + c;\n        \
    \        break;\n            default:\n                break;\n        }\n   \
    \ }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't answer the question. He wants to sort\
    \ a string, not an array.\n<|/ c |>\n<| c |>\nI see your point. I've edited my\
    \ answer to include a solution that sorts a string.\n<|/ c |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <string>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa5xw0ezg.d(14): Error: found `in` when expecting `;`\n/tmp/tmpa5xw0ezg.d(37):
    Error: declaration expected, not `<`\n/tmp/tmpa5xw0ezg.d(40): Error: unterminated
    character constant\n/tmp/tmpa5xw0ezg.d(43): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa5xw0ezg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nI like your\
    \ solution, but I wonder how it compares to other solutions posted here (especially\
    \ the one by user3386109).\n<|/ c |>\n<| c |>\nI like it too, but I wonder how\
    \ it compares to other solutions posted here (especially the one by user3386109).\n\
    <|/ c |>\n<| c |>\nI like it too, but I wonder how it compares to other solutions\
    \ posted here (especially the one by user3386109).\n<|/ c |>\n<| c |>\nI like\
    \ it too, but I wonder how it compares to other solutions posted here (especially\
    \ the one by user3386109).\n<|/ c |>\n<| c |>\nI like it too, but I wonder how\
    \ it compares to other solutions posted here (especially the one by user3386109).\n\
    <|/ c |>\n<| a tags=c++,sorting |>\nI like user3386109's solution, but I wonder\
    \ how it compares to other solutions posted here (especially the one by user3386109).\n\
    <code>\n#include <iostream>\n#include <algorithm>\n#include <string>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd491x2gs.d(15): Error: found `in` when expecting `;`\n/tmp/tmpd491x2gs.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpd491x2gs.d(58): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd491x2gs.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nI like your\
    \ solution, but I wonder if there is a way to do it without using strings?\n<|/\
    \ c |>\n<| c |>\nI added a version that doesn't use strings. It's not as elegant\
    \ as yours, but it works.\n<|/ c |>\n<| c |>\nThanks for the help! I appreciate\
    \ it!\n<|/ c |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include\
    \ <algorithm>\n#include <vector>\nusing namespace std;\nunittest\n{\n    alias\
    \ candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptigm2waq.d(15): Error: found `in` when expecting `;`\n/tmp/tmptigm2waq.d(40):
    Error: declaration expected, not `<`\n/tmp/tmptigm2waq.d(46): Error: unterminated
    character constant\n/tmp/tmptigm2waq.d(46): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptigm2waq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result = result + c;\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnb_hwyq1.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnb_hwyq1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid number \" + c);\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nI like\
    \ the idea of using strings to store the numbers, but I believe that your solution\
    \ would not work if I wanted to sort \"one two three\" instead of \"one three\
    \ two\".\n<|/ c |>\n<| c |>\nYes, I believe that would work. My solution would\
    \ not work if I wanted to sort \"one two three\" instead of \"one three two\"\
    .\n<|/ c |>\n<| c |>\nI added a solution that would work for that case.\n<|/ c\
    \ |>\n<| c |>\nI added a solution that would work for that case.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n\
    #include <string>\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv3etr5jv.d(15): Error: found `in` when expecting `;`\n/tmp/tmpv3etr5jv.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpv3etr5jv.d(64): Error: declaration
    expected, not `assert`\n/tmp/tmpv3etr5jv.d(65): Error: declaration expected, not
    `assert`\n/tmp/tmpv3etr5jv.d(66): Error: declaration expected, not `assert`\n/tmp/tmpv3etr5jv.d(67):
    Error: declaration expected, not `assert`\n/tmp/tmpv3etr5jv.d(68): Error: declaration
    expected, not `assert`\n/tmp/tmpv3etr5jv.d(69): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv3etr5jv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThis\
    \ doesn't work if the input string is \"one two three\"\n<|/ c |>\n<| c |>\nI\
    \ added a case for that case\n<|/ c |>\n<| c |>\nI added a case for that case\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the input string is \"one two three\"\n\
    <|/ c |>\n<| c |>\nI added a case for that case\n<|/ c |>\n<| a |>\n<code>\n#include\
    \ <iostream>\n#include <algorithm>\n#include <string>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf_pywk8i.d(15): Error: found `in` when expecting `;`\n/tmp/tmpf_pywk8i.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpf_pywk8i.d(43): Error: unterminated
    character constant\n/tmp/tmpf_pywk8i.d(52): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf_pywk8i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk3r8ifpy.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk3r8ifpy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\
    \ {\n        switch(c) {\n            case '0': result += \" zero \"; break;\n\
    \            case '1': result += \" one \"; break;\n            case '2': result\
    \ += \" two \"; break;\n            case '3': result += \" three \"; break;\n\
    \            case '4': result += \" four \"; break;\n            case '5': result\
    \ += \" five \"; break;\n            case '6': result += \" six \"; break;\n \
    \           case '7': result += \" seven \"; break;\n            case '8': result\
    \ += \" eight \"; break;\n            case '9': result += \" nine \"; break;\n\
    \            default: result += \" \";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++\
    \ |>\n<| c |>\nThis doesn't work if there are more than 9 numbers. For example,\
    \ sort_numbers(\"one two three four five six seven eight nine\") returns \"one\
    \ two three four five six seven eight nine zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\
    \ zero zero zero zero zero zero zero zero zero zero zero zero zero \nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7p662m5a.d(15): Error: found `in` when expecting `;`\n/tmp/tmp7p662m5a.d(35):
    Error: declaration expected, not `<`\n/tmp/tmp7p662m5a.d(38): Error: unterminated
    character constant\n/tmp/tmp7p662m5a.d(47): Error: unterminated string constant
    starting at /tmp/tmp7p662m5a.d(47)\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7p662m5a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid number '\" + c + \"'\");\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting,algorithm\
    \ |>\n<| c |>\nThis doesn't work if the numbers are in descending order. For example,\
    \ `sort_numbers(\"nine six five\")` returns `\"five six nine\"`.\n<|/ c |>\n<|\
    \ c |>\n: Yes, it does. I tested it before posting. Try it yourself.\n<|/ c |>\n\
    <| c |>\n: I tested it before posting. Try it yourself. It works.\n<|/ c |>\n\
    <| c |>\n: I tested it before posting. Try it yourself. It works.\n<|/ c |>\n\
    <| c |>\n: I tested it before posting. Try it yourself. It works.\n<|/ c |>\n\
    <| a tags=c++,sorting,algorithm |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <vector>\nusing namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmymy2aic.d(15): Error: found `in` when expecting `;`\n/tmp/tmpmymy2aic.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpmymy2aic.d(43): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmymy2aic.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result = result + c;\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis solution\
    \ doesn't work if the input string contains any non-numeric characters. For example,\
    \ `sort_numbers(\"one two three\")` returns `\"one two three\"`.\n<|/ c |>\n<|\
    \ c |>\nI added a solution that doesn't require the string to be converted to\
    \ a number before sorting. Thanks for the feedback.\n<|/ c |>\n<| a tags=sorting,c++\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <string>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8cin5c0p.d(15): Error: found `in` when expecting `;`\n/tmp/tmp8cin5c0p.d(40):
    Error: declaration expected, not `<`\n/tmp/tmp8cin5c0p.d(43): Error: unterminated
    character constant\n/tmp/tmp8cin5c0p.d(46): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8cin5c0p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<int, string> map;\n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        string s = numbers[i];\n        map[i] = s;\n    }\n  \
    \  map<int, string>::iterator it;\n    for(it = map.begin(); it != map.end();\
    \ it++)\n    {\n        string s = it->second;\n        string t = it->first;\n\
    \        string temp = s;\n        for(int i = 0; i < t.size(); i++)\n       \
    \ {\n            string s = temp;\n            string t = t;\n            string\
    \ temp = s;\n            for(int j = 0; j < t.size(); j++)\n            {\n  \
    \              string s = temp;\n                string t = t;\n             \
    \   string temp = s;\n                for(int k = 0; k < t.size(); k++)\n    \
    \            {\n                    string s = temp;\n                    string\
    \ t = t;\n                    string temp = s;\n                    for(int l\
    \ = 0; l < t.size(); l++)\n                    {\n                        string\
    \ s = temp;\n                        string t = t;\n                        string\
    \ temp = s;\n                        for(int m = 0; m < t.size(); m++)\n     \
    \                   {\n                            string s = temp;\n        \
    \                    string t = t;\n                            string temp =\
    \ s;\n                            for(int n = 0; n < t.size(); n++)\n        \
    \                    {\n                                string s = temp;\n   \
    \                             string t = t;\n                                string\
    \ temp = s;\n                                for(int o = 0; o < t.size(); o++)\n\
    \                                {\n                                    string\
    \ s = temp;\n                                    string t = t;\n             \
    \                       string temp = s;\n                                   \
    \ for(int p = 0; p < t.size(); p++)\n                                    {\n \
    \                                       string s = temp;\n                   \
    \                     string t = t;\n                                        string\
    \ temp = s;\n                                        for(int q = 0; q < t.size();\
    \ q++)\n                                        {\n                          \
    \                  string s = temp;\n                                        \
    \    string t = t;\n                                            string temp =\
    \ s;\n                                            for(int r = 0; r < t.size();\
    \ r++)\n                                            {\n                      \
    \                          string s = temp;\n                                \
    \                string t = t;\n                                             \
    \   string temp = s;\n                                                for(int\
    \ s = 0; s < t.size(); s++)\n                                                {\n\
    \                                                    string s = temp;\n      \
    \                                              string t = t;\n               \
    \                                     string temp = s;\n                     \
    \                               for(int t = 0; t < t.size(); t++)\n          \
    \                                          {\n                               \
    \                         string s = temp;\n                                 \
    \                       string t = t;\n                                      \
    \                  string temp = s;\n                                        \
    \                for(int u = 0; u < t.size(); u++)\n                         \
    \                               {\n                                          \
    \                  string s = temp;\n                                        \
    \                    string t = t;\n                                         \
    \                   string temp = s;\n                                       \
    \                     for(int v = 0; v < t.size(); v++)\n                    \
    \                                        {\n                                 \
    \                               string s = temp;\n                           \
    \                                     string t = t;\n                        \
    \                                        string temp = s;\n                  \
    \                                              for(int w = 0; w < t.size(); w++)\n\
    \                                                                {\n\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_79c7zx.d(13): Error: found `,` when expecting `.` following
    int\n/tmp/tmpk_79c7zx.d(13): Error: found `>` when expecting `;` following statement\n/tmp/tmpk_79c7zx.d(19):
    Error: found `,` when expecting `.` following int\n/tmp/tmpk_79c7zx.d(19): Error:
    found `>` when expecting `;` following statement\n/tmp/tmpk_79c7zx.d(19): Error:
    found `:` instead of statement\n/tmp/tmpk_79c7zx.d(22): Error: use `.` for member
    lookup, not `->`\n/tmp/tmpk_79c7zx.d(23): Error: use `.` for member lookup, not
    `->`\n/tmp/tmpk_79c7zx.d(98): Error: found `unittest` instead of statement\n/tmp/tmpk_79c7zx.d(108):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk_79c7zx.d(108):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk_79c7zx.d(108):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk_79c7zx.d(108):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk_79c7zx.d(108):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk_79c7zx.d(108):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk_79c7zx.d(108):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk_79c7zx.d(108):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk_79c7zx.d(108):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk_79c7zx.d(108):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk_79c7zx.d(108):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk_79c7zx.d(108):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_79c7zx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> map;\n    map[\"zero\"] = 0;\n    map[\"\
    one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"four\"\
    ] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n\
    \    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n    \n    vector<string> numbers_split;\n\
    \    stringstream ss(numbers);\n    string token;\n    while(getline(ss, token,\
    \ ' '))\n    {\n        numbers_split.push_back(token);\n    }\n    \n    vector<int>\
    \ numbers_int;\n    for(int i = 0; i < numbers_split.size(); i++)\n    {\n   \
    \     numbers_int.push_back(map[numbers_split[i]]);\n    }\n    \n    sort(numbers_int.begin(),\
    \ numbers_int.end());\n    \n    string sorted_numbers;\n    for(int i = 0; i\
    \ < numbers_int.size(); i++)\n    {\n        sorted_numbers += numbers_split[numbers_int[i]];\n\
    \    }\n    \n    return sorted_numbers;\n}\n</code>\n<|/ a tags=c++,sorting,string\
    \ |>\n<| c |>\nThis doesn't work if the numbers are in descending order. For example,\
    \ sort_numbers(\"nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp44vuzv97.d(13): Error: found `>` when expecting `.` following
    int\n/tmp/tmp44vuzv97.d(25): Error: found `>` when expecting `;` following statement\n/tmp/tmp44vuzv97.d(33):
    Error: found `>` when expecting `.` following int\n/tmp/tmp44vuzv97.d(49): Error:
    declaration expected, not `<`\n/tmp/tmp44vuzv97.d(52): Error: unterminated character
    constant\n/tmp/tmp44vuzv97.d(61): Error: unterminated string constant starting
    at /tmp/tmp44vuzv97.d(61)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44vuzv97.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp017bugoy.d(15): Error: found `in` when expecting `;`\n/tmp/tmp017bugoy.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp017bugoy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,c++,string |>\n<| c |>\nThanks for your answer. Your code works\
    \ but it is too long and complicated for my level of C++ knowledge. I'm looking\
    \ for a simpler solution. Thanks anyway!\n<|/ c |>\n<| c |>\n: I added a simpler\
    \ solution to my answer.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code\
    \ works but it is too long and complicated for my level of C++ knowledge. I'm\
    \ looking for a simpler solution. Thanks anyway!\n<|/ c |>\n<| c |>\n: I added\
    \ a simpler solution to my answer.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Your code works but it is too long and complicated for my level of C++ knowledge.\
    \ I'm looking for a simpler solution. Thanks anyway!\n<|/ c |>\n<| a tags=sorting,c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplxo22vqk.d(14): Error: found `in` when expecting `;`\n/tmp/tmplxo22vqk.d(37):
    Error: declaration expected, not `<`\n/tmp/tmplxo22vqk.d(40): Error: unterminated
    character constant\n/tmp/tmplxo22vqk.d(46): Error: unterminated character constant\n/tmp/tmplxo22vqk.d(52):
    Error: unterminated character constant\n/tmp/tmplxo22vqk.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmplxo22vqk.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmplxo22vqk.d(65): Error: declaration expected, not `assert`\n/tmp/tmplxo22vqk.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmplxo22vqk.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmplxo22vqk.d(68): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplxo22vqk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,string |>\n<| c\
    \ |>\nI like your solution, but I wonder why you used `std::sort` instead of `std::stable_sort`?\n\
    <|/ c |>\n<| c |>\n: Because `std::sort` sorts in ascending order, which is not\
    \ what the OP wants.\n<|/ c |>\n<| c |>\nI see, thanks. I didn't know about `std::stable_sort`.\n\
    <|/ c |>\n<| c |>\n: I guess I should have used `std::stable_sort` instead. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| c |>\n: I added a solution that uses `std::sort`\
    \ instead of `std::stable_sort`.\n<|/ c |>\n<| a tags=sorting,c++,string |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt2ml4g37.d(15): Error: found `in` when expecting `;`\n/tmp/tmpt2ml4g37.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpt2ml4g37.d(49): Error: unterminated
    character constant\n/tmp/tmpt2ml4g37.d(66): Error: declaration expected, not `assert`\n/tmp/tmpt2ml4g37.d(67):
    Error: declaration expected, not `assert`\n/tmp/tmpt2ml4g37.d(68): Error: declaration
    expected, not `assert`\n/tmp/tmpt2ml4g37.d(69): Error: declaration expected, not
    `assert`\n/tmp/tmpt2ml4g37.d(70): Error: declaration expected, not `assert`\n/tmp/tmpt2ml4g37.d(71):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt2ml4g37.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0': result += \" zero\
    \ \";\n                break;\n            case '1': result += \" one \";\n  \
    \              break;\n            case '2': result += \" two \";\n          \
    \      break;\n            case '3': result += \" three \";\n                break;\n\
    \            case '4': result += \" four \";\n                break;\n       \
    \     case '5': result += \" five \";\n                break;\n            case\
    \ '6': result += \" six \";\n                break;\n            case '7': result\
    \ += \" seven \";\n                break;\n            case '8': result += \"\
    \ eight \";\n                break;\n            case '9': result += \" nine \"\
    ;\n                break;\n            default: result += c;\n        }\n    }\n\
    \    \n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmperqnb4_g.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmperqnb4_g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,c++ |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n\
    using namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n   \
    \ assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmypyno3a.d(15): Error: found `in` when expecting `;`\n/tmp/tmpmypyno3a.d(40):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpmypyno3a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw new Exception(\"Invalid number \"\
    \ + numbers);\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    return result;\n}\n</code>\n<|/ a tags=c++,sorting,string |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw0ysi41l.d(14): Error: found `in` when expecting `;`\n/tmp/tmpw0ysi41l.d(38):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpw0ysi41l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid number\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThis doesn't\
    \ work if the numbers are in descending order. For example, sort_numbers(\"nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine n\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl0i165en.d(15): Error: found `in` when expecting `;`\n/tmp/tmpl0i165en.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpl0i165en.d(43): Error: unterminated
    character constant\n/tmp/tmpl0i165en.d(52): Error: unterminated string constant
    starting at /tmp/tmpl0i165en.d(52)\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl0i165en.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,c++ |>\nI wrote\
    \ a solution that is similar to what was posted earlier but uses std::sort and\
    \ std::istringstream to parse the string. \n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\n#include <sstream>\n#include <vector>\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8tszej9d.d(15): Error: found `in` when expecting `;`\n/tmp/tmp8tszej9d.d(40):
    Error: declaration expected, not `<`\n/tmp/tmp8tszej9d.d(54): Error: declaration
    expected, not `assert`\n/tmp/tmp8tszej9d.d(55): Error: declaration expected, not
    `assert`\n/tmp/tmp8tszej9d.d(56): Error: declaration expected, not `assert`\n/tmp/tmp8tszej9d.d(57):
    Error: declaration expected, not `assert`\n/tmp/tmp8tszej9d.d(58): Error: declaration
    expected, not `assert`\n/tmp/tmp8tszej9d.d(59): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8tszej9d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    map<string, int> map;\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        string number = numbers[i];\n        if(map.find(number)\
    \ != map.end())\n        {\n            map[number]++;\n        }\n        else\n\
    \        {\n            map[number] = 1;\n        }\n    }\n    \n    map<string,\
    \ int>::iterator it;\n    string result = \"\";\n    for(it = map.begin(); it\
    \ != map.end(); ++it)\n    {\n        result += it->first + \" \";\n    }\n  \
    \  \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\
    using namespace std;\nunittest\n{\n    alias candidate = sort_numbers;\n\n   \
    \ assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptzvjbwwz.d(13): Error: found `>` when expecting `.` following
    int\n/tmp/tmptzvjbwwz.d(27): Error: found `>` when expecting `.` following int\n/tmp/tmptzvjbwwz.d(27):
    Error: found `:` when expecting identifier following `int`.\n/tmp/tmptzvjbwwz.d(27):
    Error: found `:` when expecting `;` following statement\n/tmp/tmptzvjbwwz.d(31):
    Error: use `.` for member lookup, not `->`\n/tmp/tmptzvjbwwz.d(36): Error: declaration
    expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptzvjbwwz.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0': result += \"zero \"\
    ;\n            break;\n            case '1': result += \"one \";\n           \
    \ break;\n            case '2': result += \"two \";\n            break;\n    \
    \        case '3': result += \"three \";\n            break;\n            case\
    \ '4': result += \"four \";\n            break;\n            case '5': result\
    \ += \"five \";\n            break;\n            case '6': result += \"six \"\
    ;\n            break;\n            case '7': result += \"seven \";\n         \
    \   break;\n            case '8': result += \"eight \";\n            break;\n\
    \            case '9': result += \"nine \";\n            break;\n            default:\
    \ result += \"invalid \";\n            break;\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nI like this solution, however it fails for \"one two three\". It returns\
    \ \"one two three\" instead of \"one two three\".\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Now it works.\n<|/ c |>\n<| a |>\nI wrote a quick solution that uses\
    \ recursion to solve the problem. \n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9sljxc1f.d(15): Error: found `in` when expecting `;`\n/tmp/tmp9sljxc1f.d(48):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp9sljxc1f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    foreach(char c in numbers)\n  \
    \  {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result = result + c;\n        \
    \        break;\n            default:\n                break;\n        }\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work. `sort_numbers(\"one two three\")` returns `\"one two three\"`.\n<|/ c\
    \ |>\n<| c |>\nYes, I noticed that and fixed it.  Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=string,sorting,c++ |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp10puubjj.d(14): Error: found `in` when expecting `;`\n/tmp/tmp10puubjj.d(36):
    Error: declaration expected, not `<`\n/tmp/tmp10puubjj.d(39): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp10puubjj.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    for(int i = 0; i < numbers.size();\
    \ ++i)\n    {\n        result += numbers[i];\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n\
    <| c |>\nI like your solution, but I believe it can be made more efficient by\
    \ using a `std::set` instead of a `std::vector`.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, `std::set` would be better. I'll edit my answer.\n<|/ c |>\n<| c |>\nI\
    \ believe this solution has some flaws. For example, if the input string is \"\
    one two three\", the output will be \"one two three\" instead of \"one three two\"\
    .\n<|/ c |>\n<| c |>\nYes, I agree with you. I've edited my answer to fix this\
    \ problem.\n<|/ c |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n \
    \   alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7xhb86aq.d(21): Error: declaration expected, not `<`\n/tmp/tmp7xhb86aq.d(27):
    Error: unterminated character constant\n/tmp/tmp7xhb86aq.d(33): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7xhb86aq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\
    \ {\n        switch(c) {\n            case '0': result += \" zero\"; break;\n\
    \            case '1': result += \" one\"; break;\n            case '2': result\
    \ += \" two\"; break;\n            case '3': result += \" three\"; break;\n  \
    \          case '4': result += \" four\"; break;\n            case '5': result\
    \ += \" five\"; break;\n            case '6': result += \" six\"; break;\n   \
    \         case '7': result += \" seven\"; break;\n            case '8': result\
    \ += \" eight\"; break;\n            case '9': result += \" nine\"; break;\n \
    \           default: result += c; break;\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting\
    \ |>\n<| c |>\nI like this solution, but I wonder if it will perform better than\
    \ a bubble sort. I'm thinking about it right now and I'm pretty sure it will.\n\
    <|/ c |>\n<| c |>\nI haven't tested it, but I suspect that `std::sort` will use\
    \ quicksort or mergesort (depending on whether `std::less` is defined or not)\
    \ rather than bubble sort (which would require a nested loop to compare each pair\
    \ of adjacent elements).\n<|/ c |>\n<| c |>\nI tested it and it does perform better.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI tested it and it does perform better. Thanks!\n\
    <|/ c |>\n<| a tags=c++,sorting |>\nI wrote a quicksort function which I believe\
    \ is faster than the bubble sort you mentioned. I also added a quicksort function\
    \ which I believe is faster than the bubble sort you mentioned.\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdlib>\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppd_xmgv3.d(15): Error: found `in` when expecting `;`\n/tmp/tmppd_xmgv3.d(35):
    Error: declaration expected, not `<`\n/tmp/tmppd_xmgv3.d(38): Error: unterminated
    character constant\n/tmp/tmppd_xmgv3.d(38): Error: unterminated character constant\n/tmp/tmppd_xmgv3.d(41):
    Error: unterminated character constant\n/tmp/tmppd_xmgv3.d(60): Error: declaration
    expected, not `assert`\n/tmp/tmppd_xmgv3.d(61): Error: declaration expected, not
    `assert`\n/tmp/tmppd_xmgv3.d(62): Error: declaration expected, not `assert`\n/tmp/tmppd_xmgv3.d(63):
    Error: declaration expected, not `assert`\n/tmp/tmppd_xmgv3.d(64): Error: declaration
    expected, not `assert`\n/tmp/tmppd_xmgv3.d(65): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppd_xmgv3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result = result + c;\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpow7vi2ks.d(15): Error: found `in` when expecting `;`\n/tmp/tmpow7vi2ks.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpow7vi2ks.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmpow7vi2ks.d(53): Error: declaration expected, not
    `assert`\n/tmp/tmpow7vi2ks.d(54): Error: declaration expected, not `assert`\n/tmp/tmpow7vi2ks.d(55):
    Error: declaration expected, not `assert`\n/tmp/tmpow7vi2ks.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmpow7vi2ks.d(57): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpow7vi2ks.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,c++,string |>\n<| a tags=sorting,c++,string\
    \ |>\nI wrote this in C#, hope it helps:\n<code>\nstring SortNumbers(string input)\n\
    {\n    string result = \"\";\n    foreach (char c in input)\n    {\n        switch\
    \ (c)\n        {\n            case '0':\n            case '1':\n            case\
    \ '2':\n            case '3':\n            case '4':\n            case '5':\n\
    \            case '6':\n            case '7':\n            case '8':\n       \
    \     case '9':\n                result += c;\n                break;\n      \
    \      default:\n                throw new Exception(\"Invalid input\");\n   \
    \     }\n    }\n    Array.Sort(result.ToCharArray());\n    return result;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=sorting,c++,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nunittest\n{\n    alias\
    \ candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfce7jokq.d(15): Error: found `in` when expecting `;`\n/tmp/tmpfce7jokq.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpfce7jokq.d(48): Error: declaration
    expected, not `foreach`\n/tmp/tmpfce7jokq.d(63): Error: declaration expected,
    not `break`\n/tmp/tmpfce7jokq.d(64): Error: declaration expected, not `default`\n/tmp/tmpfce7jokq.d(66):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfce7jokq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string\
    \ numbers) \n{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like the idea of using\
    \ an enum, but this doesn't really solve the problem of sorting a string. Your\
    \ code will sort the string \"one two three\" into \"one three two\", which is\
    \ not what was asked for. Also, the switch statement is unnecessarily verbose.\
    \ Just use an if/else statement instead.\n<|/ c |>\n<| c |>\nI agree with you\
    \ that using an enum would be a better solution. However, the OP asked for a solution\
    \ that sorts numbers. I believe my solution does exactly that. Also, I agree that\
    \ using a switch statement is unnecessarily verbose, but I find it easier to read\
    \ and understand than an if/else statement. Also, I believe my solution is more\
    \ efficient than yours. I believe my solution is more efficient than yours because\
    \ I used a switch statement instead of an if/else statement. My solution is more\
    \ efficient because I used a switch statement instead of an if/else statement.\n\
    <|/ c |>\n<| c |>\nI agree with you that using an enum would be a better solution.\
    \ However, the OP asked for a solution that sorts numbers. I believe my solution\
    \ does exactly that. Also, I agree that using a switch statement is unnecessarily\
    \ verbose, but I find it easier to read and understand than an if/else statement.\
    \ Also, I believe my solution is more efficient than yours. I believe my solution\
    \ is more efficient than yours because I used a switch statement instead of an\
    \ if/else statement. My solution is more efficient because I used a switch statement\
    \ instead of an if/else statement.\n<|/ c |>\n<| c |>\nI agree with you that using\
    \ an enum would be a better solution. However, the OP asked for a solution that\
    \ sorts numbers. I believe my solution does exactly that. Also, I agree that using\
    \ a switch statement is unnecessarily verbose, but I find it easier to read and\
    \ understand than an if/else statement. Also, I believe my solution is more efficient\
    \ than your\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj3fzczow.d(15): Error: found `in` when expecting `;`\n/tmp/tmpj3fzczow.d(40):
    Error: declaration expected, not `<`\n/tmp/tmpj3fzczow.d(43): Error: unterminated
    character constant\n/tmp/tmpj3fzczow.d(57): Error: declaration expected, not `assert`\n/tmp/tmpj3fzczow.d(58):
    Error: declaration expected, not `assert`\n/tmp/tmpj3fzczow.d(59): Error: declaration
    expected, not `assert`\n/tmp/tmpj3fzczow.d(60): Error: declaration expected, not
    `assert`\n/tmp/tmpj3fzczow.d(61): Error: declaration expected, not `assert`\n/tmp/tmpj3fzczow.d(62):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3fzczow.d",
    "-I/tmp"]\n'''
  stdout: b''
