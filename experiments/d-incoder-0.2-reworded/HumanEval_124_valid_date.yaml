name: HumanEval_124_valid_date
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nYou have to write a function\
  \ which validates a given date string and\n    returns true if the date is valid\
  \ otherwise false.\n    The date is valid if all of the following rules are satisfied:\n\
  \    1. The date string is not empty.\n    2. The number of days is not less than\
  \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is\
  \ not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of\
  \ days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
  \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
  \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
  \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n \
  \   false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
  06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n"
tests: "unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
  03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
  04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
  01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
  \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
  06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"\
  04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
  20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
  2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
  \ main(){}"
completions: ["{\n    \n    string months[12] = {\"January\", \"March\", \"May\",\
    \ \"July\", \"August\", \"October\", \"December\"};\n    string days[12] = {\"\
    01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    string years[12] =\
    \ {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\"\
    , \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"};\n    \n    int daysInMonth[12]\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int daysInYear[12]\
    \ = {365, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 31};\n    \n    int month;\n\
    \    int day;\n    int year;\n    \n    bool valid = true;\n    \n    for(int\
    \ i = 0; i < 12; i++)\n    {\n        month = stoi(months[i]);\n        day =\
    \ stoi(days[i]);\n        year = stoi(years[i]);\n        \n        if(month <\
    \ 1 || month > 12)\n        {\n            valid = false;\n        }\n       \
    \ \n        if(day < 1 || day > daysInMonth[month])\n        {\n            valid\
    \ = false;\n        }\n        \n        if(day < 1 || day > daysInYear[month])\n\
    \        {\n            valid = false;\n        }\n    }\n    \n    if(!valid)\n\
    \    {\n        return false;\n    }\n    \n    string dateFormat = \"%m-%d-%Y\"\
    ;\n    \n    try\n    {\n        strptime(date.c_str(), dateFormat.c_str(), nullptr);\n\
    \    }\n    catch(...)\n    {\n        return false;\n    }\n    \n    return\
    \ true;\n}", "{\n    \n    int day;\n    int month;\n    int year;\n    \n   \
    \ stringstream ss(date);\n    ss >> month;\n    ss >> day;\n    ss >> year;\n\
    \    \n    if(month < 1 || month > 12)\n    {\n        return false;\n    }\n\
    \    \n    if(day < 1 || day > 31)\n    {\n        return false;\n    }\n    \n\
    \    if(month == 2)\n    {\n        if(day > 29)\n        {\n            return\
    \ false;\n        }\n    }\n    \n    if(day > 30)\n    {\n        return false;\n\
    \    }\n    \n    if(day > 31)\n    {\n        return false;\n    }\n    \n  \
    \  if(month == 1)\n    {\n        if(day > 31)\n        {\n            return\
    \ false;\n        }\n    }\n    \n    if(month == 3)\n    {\n        if(day >\
    \ 30)\n        {\n            return false;\n        }\n    }\n    \n    if(month\
    \ == 5)\n    {\n        if(day > 31)\n        {\n            return false;\n \
    \       }\n    }\n    \n    if(month == 7)\n    {\n        if(day > 31)\n    \
    \    {\n            return false;\n        }\n    }\n    \n    if(month == 8)\n\
    \    {\n        if(day > 31)\n        {\n            return false;\n        }\n\
    \    }\n    \n    if(month == 10)\n    {\n        if(day > 31)\n        {\n  \
    \          return false;\n        }\n    }\n    \n    if(month == 12)\n    {\n\
    \        if(day > 31)\n        {\n            return false;\n        }\n    }\n\
    \    \n    return true;\n}\n</code>\n<|/ a tags=c++,date |>\n<| c |>\nI like your\
    \ solution, but I believe that `month > 12` should be `month > 11`\n<|/ c |>\n\
    <| c |>\nYes, you are right. Thanks for pointing out. Corrected the answer.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Can you please tell me why you used\
    \ `stringstream` here? I mean why not just use `if` statements?\n<|/ c |>\n<|\
    \ c |>\n`stringstream` is used to read input from string and convert it to `int`\
    \ variables. `if` statements are used to check conditions. `stringstream` is used\
    \ here to read input from string and convert it to `int` variables. `if` statements\
    \ are used to check conditions.\n<|/ c |>\n<| c |>\nThanks for your answer. Can\
    \ you please tell me why you used `stringstream` here? I mean why not just use\
    \ `if` statements?\n<|/ c |>", "{\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "{\n    string::size_type pos = 0;\n    string::size_type len = date.length();\n\
    \    \n    if(len == 0)\n        return false;\n    \n    pos = date.find_first_not_of(\"\
    -\");\n    if(pos != string::npos)\n        return false;\n    \n    pos = date.find_first_of(\"\
    -\");\n    if(pos != string::npos)\n        return false;\n    \n    pos = date.find_first_not_of(\"\
    /\");\n    if(pos != string::npos)\n        return false;\n    \n    pos = date.find_first_of(\"\
    /\");\n    if(pos != string::npos)\n        return false;\n    \n    pos = date.find_first_not_of(\"\
    \\\\\");\n    if(pos != string::npos)\n        return false;\n    \n    pos =\
    \ date.find_first_of(\"\\\\\");\n    if(pos != string::npos)\n        return false;\n\
    \    \n    pos = date.find_first_not_of(\"0\");\n    if(pos != string::npos)\n\
    \        return false;\n    \n    pos = date.find_first_of(\"0\");\n    if(pos\
    \ != string::npos)\n        return false;\n    \n    pos = date.find_first_not_of(\"\
    1\");\n    if(pos != string::npos)\n        return false;\n    \n    pos = date.find_first_of(\"\
    1\");\n    if(pos != string::npos)\n        return false;\n    \n    pos = date.find_first_not_of(\"\
    2\");\n    if(pos != string::npos)\n        return false;\n    \n    pos = date.find_first_of(\"\
    2\");\n    if(pos != string::npos)\n        return false;\n    \n    pos = date.find_first_not_of(\"\
    3\");\n    if(pos != string::npos)\n        return false;\n    \n    pos = date.find_first_of(\"\
    3\");\n    if(pos != string::npos)\n        return false;\n    \n    pos = date.find_first_not_of(\"\
    4\");\n    if(pos != string::npos)\n        return false;\n    \n    pos = date.find_first_of(\"\
    4\");\n    if(pos != string::npos)\n        return false;\n    \n    pos = date.find_first_not_of(\"\
    5\");\n    if(pos != string::npos)\n        return false;\n    \n    pos = date.find_first_of(\"\
    5\");\n    if(pos != string::npos)\n        return false;\n    \n    pos = date.find_first_not_of(\"\
    6\");\n    if(pos != string::npos)\n        return false;\n    \n    pos = date.find_first_of(\"\
    6\");\n    if(pos != string::npos)\n        return false;\n    \n    pos = date.find_first_not_of(\"\
    7\");\n    if(pos != string::npos)\n        return false;\n    \n    pos = date.find_first_of(\"\
    7\");\n    if(po", "{\n    \n    int day;\n    int month;\n    int year;\n   \
    \ \n    string months[12] = {\"January\", \"February\", \"March\", \"April\",\
    \ \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\"\
    , \"December\"};\n    \n    string date_str = date;\n    \n    size_t pos = date_str.find_first_not_of(\"\
    0123456789-\");\n    \n    if (pos != string::npos)\n    {\n        date_str =\
    \ date_str.substr(pos);\n    }\n    \n    pos = date_str.find_first_of(\"-\");\n\
    \    \n    if (pos != string::npos)\n    {\n        date_str = date_str.substr(0,\
    \ pos);\n    }\n    \n    pos = date_str.find_first_of(\"/\");\n    \n    if (pos\
    \ != string::npos)\n    {\n        date_str = date_str.substr(pos);\n    }\n \
    \   \n    pos = date_str.find_first_of(\",\");\n    \n    if (pos != string::npos)\n\
    \    {\n        date_str = date_str.substr(pos);\n    }\n    \n    pos = date_str.find_first_of(\"\
    \\\\\");\n    \n    if (pos != string::npos)\n    {\n        date_str = date_str.substr(pos);\n\
    \    }\n    \n    pos = date_str.find_first_of(\",\");\n    \n    if (pos != string::npos)\n\
    \    {\n        date_str = date_str.substr(pos);\n    }\n    \n    pos = date_str.find_first_of(\"\
    \\\\\");\n    \n    if (pos != string::npos)\n    {\n        date_str = date_str.substr(pos);\n\
    \    }\n    \n    pos = date_str.find_first_of(\",\");\n    \n    if (pos != string::npos)\n\
    \    {\n        date_str = date_str.substr(pos);\n    }\n    \n    pos = date_str.find_first_of(\"\
    \\\\\");\n    \n    if (pos != string::npos)\n    {\n        date_str = date_str.substr(pos);\n\
    \    }\n    \n    pos = date_str.find_first_of(\",\");\n    \n    if (pos != string::npos)\n\
    \    {\n        date_str = date_str.substr(pos);\n    }\n    \n    pos = date_str.find_first_of(\"\
    \\\\\");\n    \n    if (pos != string::npos)\n    {\n        date_str = date_str.substr(pos);\n\
    \    }\n    \n    pos = date_str.find_first_of(\",\");\n    \n    if (pos != string::npos)\n\
    \    {\n        date_str = date_str.substr(pos);\n    }\n    \n    pos = date_str.find_first_of(\"\
    \\\\\");\n    \n    if (pos != string", "{\n    \n    string months[12] = {\"\
    January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"\
    };\n    string days[12] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"\
    07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n    string years[12] = {\"2000\"\
    , \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\"\
    , \"2009\", \"2010\", \"2011\", \"2012\"};\n    \n    size_t days_count = date.size();\n\
    \    size_t months_count = days_count / 4;\n    size_t years_count = days_count\
    \ / 12;\n    \n    size_t month = 0;\n    size_t day = 0;\n    size_t year = 0;\n\
    \    \n    bool valid = true;\n    \n    for(size_t i = 0; i < months_count; i++)\n\
    \    {\n        if(months[i] != date.substr(month * 4, 4))\n        {\n      \
    \      valid = false;\n            break;\n        }\n        month++;\n    }\n\
    \    \n    for(size_t i = 0; i < days_count; i++)\n    {\n        if(days[i] !=\
    \ date.substr(day * 4, 2))\n        {\n            valid = false;\n          \
    \  break;\n        }\n        day++;\n    }\n    \n    for(size_t i = 0; i < years_count;\
    \ i++)\n    {\n        if(years[i] != date.substr(year * 12, 2))\n        {\n\
    \            valid = false;\n            break;\n        }\n        year++;\n\
    \    }\n    \n    return valid;\n}", "{\n    \n    int day;\n    int month;\n\
    \    int year;\n    \n    char months[12];\n    \n    months[0] = \"01\";\n  \
    \  months[1] = \"03\";\n    months[2] = \"05\";\n    months[3] = \"07\";\n   \
    \ months[4] = \"08\";\n    months[5] = \"10\";\n    months[6] = \"12\";\n    months[7]\
    \ = \"04\";\n    months[8] = \"06\";\n    months[9] = \"09\";\n    months[10]\
    \ = \"11\";\n    months[11] = \"02\";\n    \n    char days[31];\n    \n    days[0]\
    \ = \"01\";\n    days[1] = \"02\";\n    days[2] = \"03\";\n    days[31] = \"31\"\
    ;\n    \n    char years[10];\n    \n    years[0] = \"2000\";\n    years[1] = \"\
    2001\";\n    years[2] = \"2002\";\n    years[3] = \"2003\";\n    years[4] = \"\
    2004\";\n    years[5] = \"2005\";\n    years[6] = \"2006\";\n    years[7] = \"\
    2007\";\n    years[8] = \"2008\";\n    years[9] = \"2009\";\n    years[10] = \"\
    2010\";\n    years[11] = \"2011\";\n    years[12] = \"2012\";\n    years[13] =\
    \ \"2013\";\n    years[14] = \"2014\";\n    years[15] = \"2015\";\n    years[16]\
    \ = \"2016\";\n    years[17] = \"2017\";\n    years[18] = \"2018\";\n    years[19]\
    \ = \"2019\";\n    years[20] = \"2020\";\n    years[21] = \"2021\";\n    years[22]\
    \ = \"2022\";\n    years[23] = \"2023\";\n    years[24] = \"2024\";\n    years[25]\
    \ = \"2025\";\n    years[26] = \"2026\";\n    years[27] = \"2027\";\n    years[28]\
    \ = \"2028\";\n    years[29] = \"2029\";\n    years[30] = \"2030\";\n    years[31]\
    \ = \"2031\";\n    \n    string month;\n    string day;\n    string year;\n  \
    \  \n    month = date[date.size()-2];\n    day = date[date.size()-1];\n    year\
    \ = date[date.size()-3];\n    \n    for(int i=0; i<12; i++)\n    {\n        if(months[i]\
    \ == month)\n        {\n            for(int j=0; j<31; j++)\n", "{\n    if(!date.empty())\n\
    \    {\n        auto days_in_month = std.array<int, 12>{0,31,28,31,30,31,30,31,31,30,31,30,31};\n\
    \        auto days_in_year = 365;\n        auto days_in_century = std.array<int,\
    \ 12>{31,30,31,30,31,30,31,30,31,30,31,30};\n        auto days_in_decade = std.array<int,\
    \ 12>{31,30,31,30,31,30,31,30,31,30,31,30};\n        auto days_in_millennium =\
    \ std.array<int, 12>{31,30,31,30,31,30,31,30,31,30,31,30};\n        auto days_in_thousand\
    \ = std.array<int, 12>{31,30,31,30,31,30,31,30,31,30,31,30};\n        auto days_in_ten_thousand\
    \ = std.array<int, 12>{31,30,31,30,31,30,31,30,31,30,31,30};\n        auto days_in_hundred_thousand\
    \ = std.array<int, 12>{31,30,31,30,31,30,31,30,31,30,31,30};\n        auto days_in_ten_million\
    \ = std.array<int, 12>{31,30,31,30,31,30,31,30,31,30,31,30};\n        auto days_in_hundred_million\
    \ = std.array<int, 12>{31,30,31,30,31,30,31,30,31,30,31,30};\n        auto days_in_billion\
    \ = std.array<int, 12>{31,30,31,30,31,30,31,30,31,30,31,30};\n        auto days_in_trillion\
    \ = std.array<int, 12>{31,30,31,30,31,30,31,30,31,30,31,30};\n        auto days_in_quadrillion\
    \ = std.array<int, 12>{31,30,31,30,31,30,31,30,31,30,31,30};\n        auto days_in_quintillion\
    \ = std.array<int, 12>{31,30,31,30,31,30,31,30,31,30,31,30};\n        auto days_in_sextillion\
    \ = std.array<int, 12>{31,30,31,30,31,30,31,30,31,30,31,30};\n        auto days_in_septillion\
    \ = std.array<int, 12>{31,30,31,30,31,30,31,30,31,30,31,30};\n        auto days_in_octillion\
    \ = std.array<int, 12>{31,30,31,30,31,30,31,30,31,30,31,30};\n        auto days_in_nonillion\
    \ = std.array<int, 12>{31,30,31,", "{\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "{\n    \n    int day;\n    int month;\n    int year;\n    \n\
    \    stringstream ss(date);\n    ss >> month;\n    ss >> day;\n    ss >> year;\n\
    \    \n    if(month < 1 || month > 12)\n    {\n        return false;\n    }\n\
    \    \n    if(day < 1 || day > 31)\n    {\n        return false;\n    }\n    \n\
    \    if(month == 2)\n    {\n        if(day > 29)\n        {\n            return\
    \ false;\n        }\n    }\n    \n    if(day > 30)\n    {\n        return false;\n\
    \    }\n    \n    if(month == 4)\n    {\n        if(day > 30)\n        {\n   \
    \         return false;\n        }\n    }\n    \n    if(month == 6)\n    {\n \
    \       if(day > 30)\n        {\n            return false;\n        }\n    }\n\
    \    \n    if(month == 9)\n    {\n        if(day > 30)\n        {\n          \
    \  return false;\n        }\n    }\n    \n    if(month == 11)\n    {\n       \
    \ if(day > 30)\n        {\n            return false;\n        }\n    }\n    \n\
    \    if(month == 12)\n    {\n        if(day > 31)\n        {\n            return\
    \ false;\n        }\n    }\n    \n    return true;\n}", "{\n    \n    int day;\n\
    \    int month;\n    int year;\n    \n    char months[12] = {'JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC'};\n\
    \    \n    year = stoi(date);\n    month = stoi(date.substr(0,2));\n    day =\
    \ stoi(date.substr(3,2));\n    \n    if(year < 1 || year > 9999 || month < 1 ||\
    \ month > 12 || day < 1 || day > 31 || (month == 2 && day > 29))\n    {\n    \
    \    return false;\n    }\n    \n    for(int i = 0; i < 12; i++)\n    {\n    \
    \    if(month == 1 && day > 29)\n        {\n            return false;\n      \
    \  }\n        if(month == 2 && day > 28)\n        {\n            return false;\n\
    \        }\n        if(month == 3 && day > 31)\n        {\n            return\
    \ false;\n        }\n        if(month == 4 && day > 30)\n        {\n         \
    \   return false;\n        }\n        if(month == 5 && day > 31)\n        {\n\
    \            return false;\n        }\n        if(month == 6 && day > 30)\n  \
    \      {\n            return false;\n        }\n        if(month == 7 && day >\
    \ 31)\n        {\n            return false;\n        }\n        if(month == 8\
    \ && day > 30)\n        {\n            return false;\n        }\n        if(month\
    \ == 9 && day > 31)\n        {\n            return false;\n        }\n       \
    \ if(month == 10 && day > 30)\n        {\n            return false;\n        }\n\
    \        if(month == 11 && day > 31)\n        {\n            return false;\n \
    \       }\n    }\n    \n    return true;\n}\n</code>\n<|/ a tags=c++,date |>\n\
    <| c |>\nThis does not answer the question. OP asked for C++, not C. Also, the\
    \ OP asked for \"valid\" dates, not \"valid\" dates within a specific range. Your\
    \ code does not handle leap years, leap seconds, and leap minutes.\n<|/ c |>\n\
    <| c |>\nThe question was tagged C++. Also the code was written in C++. Also the\
    \ code was written to validate a date string and to validate a date within a specific\
    \ range. Also the code was written to validate a date string and to validate a\
    \ date within a specific range. Also the code was written to validate a date string\
    \ and to validate a date within a specific range. Also the code was written to\
    \ validate a date string and to validate a date within a specific range. Also\
    \ the code was written to validate a date string and to validate a date within\
    \ a specific range. Also the code was written to validate a date string ", "{\n\
    \    \n    string months[12] = {\"January\", \"March\", \"May\", \"July\", \"\
    August\", \"October\", \"December\"};\n    string days[12] = {\"01\", \"03\",\
    \ \"05\", \"07\", \"08\", \"10\", \"12\"};\n    string years[12] = {\"2000\",\
    \ \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\"\
    , \"2009\", \"2010\", \"2011\", \"2012\"};\n    \n    \n    \n    int daysInMonth\
    \ = 0;\n    int daysInYear = 0;\n    int month = 0;\n    int year = 0;\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "{\n    if(!date.empty())\n    {\n     \
    \   auto dateSplit = split(date, \"-\");\n        if(dateSplit.size() != 3)\n\
    \        {\n            return false;\n        }\n        auto monthSplit = split(dateSplit[0],\
    \ \"-\");\n        if(monthSplit.size() != 2)\n        {\n            return false;\n\
    \        }\n        auto daySplit = split(dateSplit[1], \"-\");\n        if(daySplit.size()\
    \ != 2)\n        {\n            return false;\n        }\n        auto year =\
    \ dateSplit[2];\n        if(!year.isdigit())\n        {\n            return false;\n\
    \        }\n        auto monthNum = std.string.to_integer(monthSplit[0]);\n  \
    \      if(monthNum < 1 || monthNum > 12)\n        {\n            return false;\n\
    \        }\n        auto dayNum = std.string.to_integer(daySplit[0]);\n      \
    \  if(dayNum < 1 || dayNum > 31)\n        {\n            return false;\n     \
    \   }\n        auto yearNum = std.string.to_integer(year);\n        if(yearNum\
    \ < 1 || yearNum > 9999)\n        {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n</code>\n<|/ a tags=c++,c++17 |>\n<| c |>\nI like your\
    \ solution, however it fails for dates like \"12-31-2000\" which should be valid.\
    \ Also it fails for dates like \"01-01-2000\" which should be valid. Also it fails\
    \ for dates like \"01-02-2000\" which should be valid. Also it fails for dates\
    \ like \"01-03-2000\" which should be valid. Also it fails for dates like \"01-04-2000\"\
    \ which should be valid. Also it fails for dates like \"01-05-2000\" which should\
    \ be valid. Also it fails for dates like \"01-06-2000\" which should be valid.\
    \ Also it fails for dates like \"01-07-2000\" which should be valid. Also it fails\
    \ for dates like \"01-08-2000\" which should be valid. Also it fails for dates\
    \ like \"01-09-2000\" which should be valid. Also it fails for dates like \"01-10-2000\"\
    \ which should be valid. Also it fails for dates like \"01-11-2000\" which should\
    \ be valid. Also it fails for dates like \"01-12-2000\" which should be valid.\
    \ Also it fails for dates like \"01-13-2000\" which should be valid. Also it fails\
    \ for dates like \"01-14-2000\" which should be valid. Also it fails for dates\
    \ like \"01-15-2000\" which should be valid. Also it fails for dates like \"01-16-2000\"\
    \ which should be valid. Also it fails for dates like \"", "{\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "{\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "{\n    string months[12] = {\"January\", \"February\",\
    \ \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n    string days[31] = {\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\",\
    \ \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\"\
    , \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n \
    \   string months[12] = {\"January\", \"February\", \"March\", \"April\", \"May\"\
    , \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"\
    December\"};\n    string days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\"};\n    string dateFormat = \"mm-dd-yyyy\"\
    ;\n    string dateString = \"\";\n    int day;\n    int month;\n    int year;\n\
    \    int daysInMonth;\n    bool validDate = false;\n    \n    stringstream ss(date);\n\
    \    ss >> dateString;\n    \n    stringstream ss2(dateString);\n    ss2 >> day\
    \ >> month >> year;\n    \n    daysInMonth = days[month];\n    \n    if (day <\
    \ 1 || day > daysInMonth)\n    {\n        validDate = false;\n    }\n    else\
    \ if (month < 1 || month > 12)\n    {\n        validDate = false;\n    }\n   \
    \ else if (year < 1000 || year > 9999)\n    {\n        validDate = false;\n  \
    \  }\n    else\n    {\n        validDate = true;\n    }\n    \n    return validDate;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code does not compile. `daysInMonth`\
    \ is undefined.\n<|/ c |>\n<| c |>\nI fixed the compilation errors. I tested it\
    \ and it works. I hope it helps.\n<|/ c |>\n<| c |>\nIt still does not compile.\
    \ `daysInMonth` is undefined.\n<|/ c |>\n<| c |>\nI fixed the compilation errors.\
    \ I tested it and it works. I hope it helps.\n<|/ c |>\n<| c |>\nI fixed the compilation\
    \ errors. I tested it and it works. I hope it helps.\n<|/ c |>\n<| a d", "{\n\
    \    if(date == \"\" || date.size() == 0)\n        return false;\n    \n    stringstream\
    \ ss(date);\n    \n    int day;\n    int month;\n    int year;\n    \n    ss >>\
    \ month;\n    ss >> day;\n    ss >> year;\n    \n    if(month < 1 || month > 12)\n\
    \        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n\
    \    \n    if(day > 30 && month == 2)\n        return false;\n    \n    if(day\
    \ > 29 && month == 12)\n        return false;\n    \n    if(month == 1)\n    {\n\
    \        if(day > 31)\n            return false;\n    }\n    \n    return true;\n\
    }", "{\n    \n    int days;\n    int months;\n    \n    string months[12] = {\"\
    January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"\
    August\", \"September\", \"October\", \"November\", \"December\"};\n    \n   \
    \ stringstream ss(date);\n    \n    ss >> months;\n    \n    ss >> days;\n   \
    \ \n    if(days > 31)\n    {\n        return false;\n    }\n    \n    if(months[0]\
    \ == \"January\" && months[1] == \"March\" && months[2] == \"May\" && months[3]\
    \ == \"July\" && months[4] == \"October\" && months[5] == \"December\" && months[6]\
    \ == \"April\" && months[7] == \"June\" && months[8] == \"September\" && months[9]\
    \ == \"November\" && months[10] == \"December\")\n    {\n        if(days > 29)\n\
    \        {\n            return false;\n        }\n    }\n    else if(months[0]\
    \ == \"April\" && months[1] == \"June\" && months[2] == \"September\" && months[3]\
    \ == \"November\" && months[4] == \"December\")\n    {\n        if(days > 30)\n\
    \        {\n            return false;\n        }\n    }\n    else if(months[0]\
    \ == \"February\" && months[1] == \"May\" && months[2] == \"July\" && months[3]\
    \ == \"October\" && months[4] == \"December\")\n    {\n        if(days > 28)\n\
    \        {\n            return false;\n        }\n    }\n    \n    return true;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "{\n    \n    int day;\n    int\
    \ month;\n    int year;\n    \n    char months[12];\n    \n    stringstream ss(date);\n\
    \    \n    ss >> month;\n    \n    ss >> day;\n    \n    ss >> year;\n    \n \
    \   months[month-1] = '\\0';\n    \n    for(int i = 0; i <= 12; i++)\n    {\n\
    \        if(months[i] != month)\n        {\n            return false;\n      \
    \  }\n    }\n    \n    for(int i = 0; i <= 12; i++)\n    {\n        if(months[i]\
    \ != month)\n        {\n            return false;\n        }\n    }\n    \n  \
    \  for(int i = 0; i <= 12; i++)\n    {\n        if(months[i] != month)\n     \
    \   {\n            return false;\n        }\n    }\n    \n    for(int i = 0; i\
    \ <= 12; i++)\n    {\n        if(months[i] != month)\n        {\n            return\
    \ false;\n        }\n    }\n    \n    for(int i = 0; i <= 12; i++)\n    {\n  \
    \      if(months[i] != month)\n        {\n            return false;\n        }\n\
    \    }\n    \n    for(int i = 0; i <= 12; i++)\n    {\n        if(months[i] !=\
    \ month)\n        {\n            return false;\n        }\n    }\n    \n    for(int\
    \ i = 0; i <= 12; i++)\n    {\n        if(months[i] != month)\n        {\n   \
    \         return false;\n        }\n    }\n    \n    for(int i = 0; i <= 12; i++)\n\
    \    {\n        if(months[i] != month)\n        {\n            return false;\n\
    \        }\n    }\n    \n    for(int i = 0; i <= 12; i++)\n    {\n        if(months[i]\
    \ != month)\n        {\n            return false;\n        }\n    }\n    \n  \
    \  for(int i = 0; i <= 12; i++)\n    {\n        if(months[i] != month)\n     \
    \   {\n            return false;\n        }\n    }\n    \n    for(int i = 0; i\
    \ <= 12; i++)\n    {\n        if(months[i] != month)\n        {\n            return\
    \ false;\n        }\n    }\n    \n    for(int i = 0; i <= 12; i++)\n    {\n  \
    \      if(months[i] != month)\n        {\n            return false;\n        }\n\
    \    }\n    \n    for(int i = 0; i <= 12; i++)\n    {\n        if(months[i] !=\
    \ month)\n        {\n            return false;\n        }\n    }\n    \n    for(int\
    \ i = 0; i <= 12; i++)\n    {\n        if(months[i] != month)\n        {\n   \
    \         return false;\n        }\n    }\n    \n    for(int i = 0; i <= 12; i++)\n\
    \    {\n        if(months[i] != month)\n        {\n            return false;\n\
    \        }\n    }\n    \n    for(int i = 0; i <= 12; i++)\n    {\n        if(months[i]\
    \ != month)\n        {\n            return false;", "{\n    if(!date.empty())\n\
    \    {\n        auto dateSplit = date.split('-');\n        if(dateSplit.size()\
    \ == 3)\n        {\n            auto dateParts = dateSplit[0].split('/');\n  \
    \          auto months = dateSplit[1].split('-');\n            auto days = dateSplit[2].split('-');\n\
    \            \n            if(months.size() == 1 && days.size() == 1 && days[0]\
    \ == \"01\" && months[0] == \"01\")\n            {\n                return true;\n\
    \            }\n            else if(months.size() == 1 && days.size() == 1 &&\
    \ days[0] == \"01\")\n            {\n                return false;\n         \
    \   }\n            else if(months.size() == 1 && days.size() == 1 && days[0] ==\
    \ \"01\" && months[0] == \"02\")\n            {\n                return false;\n\
    \            }\n            else if(months.size() == 1 && days.size() == 1 &&\
    \ days[0] == \"02\")\n            {\n                return false;\n         \
    \   }\n            else if(months.size() == 1 && days.size() == 1 && days[0] ==\
    \ \"03\")\n            {\n                return false;\n            }\n     \
    \       else if(months.size() == 1 && days.size() == 1 && days[0] == \"03\" &&\
    \ months[0] == \"01\")\n            {\n                return false;\n       \
    \     }\n            else if(months.size() == 1 && days.size() == 1 && days[0]\
    \ == \"03\" && months[0] == \"02\")\n            {\n                return false;\n\
    \            }\n            else if(months.size() == 1 && days.size() == 1 &&\
    \ days[0] == \"03\" && months[0] == \"03\")\n            {\n                return\
    \ false;\n            }\n            else if(months.size() == 1 && days.size()\
    \ == 1 && days[0] == \"04\")\n            {\n                return false;\n \
    \           }\n            else if(months.size() == 1 && days.size() == 1 && days[0]\
    \ == \"04\" && months[0] == \"01\")\n            {\n                return false;\n\
    \            }\n            else if(months.size() == 1 && days.size() == 1 &&\
    \ days[0] == \"04\" && months[0] == \"02\")\n            {\n                return\
    \ false;\n            }\n            else if(months.size() == 1 && days.size()\
    \ == 1 && days[0] == \"04\" && months[0] == \"03\")\n            {\n         \
    \       return false;\n            }\n            else if(months.size() == 1 &&\
    \ days.size() == 1 && days[0] == \"04\" && months[0] == \"04\")\n            {\n\
    \                return false;\n            }\n            else if(months.size()\
    \ == 1 && days.size() == 1 && days[0] == \"05\")\n            {\n            \
    \    return false;\n            }\n            else if(months.size() == 1 && days.size()\
    \ == 1 && days[0] == \"05\" && months[0] == \"01\")\n            {\n         \
    \       return false;\n            }\n            else if(months.size() == 1 &&\
    \ days.size() == 1 && days[0] == \"05\" && months[0] == \"02\")\n            {\n\
    \                return false;\n            }\n            else if(months.size()\
    \ == 1 && days.size() == 1 && days[0] == \"05\" && months[0] == \"03\")\n    \
    \        {\n                return false;\n", "{\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "{\n    \n    string months[12] = {\"January\", \"\
    March\", \"May\", \"July\", \"August\", \"October\", \"December\"};\n    string\
    \ days[12] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    10\", \"11\", \"12\"};\n    string years[12] = {\"2000\", \"2001\", \"2002\",\
    \ \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\"\
    , \"2011\", \"2012\"};\n    \n    int month = 0;\n    int day = 0;\n    int year\
    \ = 0;\n    \n    for(int i = 0; i < date.size(); i++)\n    {\n        if(date[i]\
    \ == '-')\n        {\n            month++;\n            day = 0;\n           \
    \ year++;\n        }\n        else if(date[i] == '/')\n        {\n           \
    \ month++;\n            day = 0;\n            year++;\n        }\n        else\
    \ if(date[i] == '-')\n        {\n            month++;\n            day = 0;\n\
    \            year++;\n        }\n        else if(date[i] == '/')\n        {\n\
    \            month++;\n            day = 0;\n            year++;\n        }\n\
    \        else if(date[i] == '-')\n        {\n            month++;\n          \
    \  day = 0;\n            year++;\n        }\n        else if(date[i] == '/')\n\
    \        {\n            month++;\n            day = 0;\n            year++;\n\
    \        }\n        else if(date[i] == '-')\n        {\n            month++;\n\
    \            day = 0;\n            year++;\n        }\n        else if(date[i]\
    \ == '/')\n        {\n            month++;\n            day = 0;\n           \
    \ year++;\n        }\n        else if(date[i] == '-')\n        {\n           \
    \ month++;\n            day = 0;\n            year++;\n        }\n        else\
    \ if(date[i] == '/')\n        {\n            month++;\n            day = 0;\n\
    \            year++;\n        }\n        else if(date[i] == '-')\n        {\n\
    \            month++;\n            day = 0;\n            year++;\n        }\n\
    \        else if(date[i] == '/')\n        {\n            month++;\n          \
    \  day = 0;\n            year++;\n        }\n        else if(date[i] == '-')\n\
    \        {\n            month++;\n            day = 0;\n            year++;\n\
    \        }\n        else if(date[i] == '/')\n        {\n            month++;\n\
    \            day = 0;\n            year++;\n        }\n        else if(date[i]\
    \ == '-')\n        {\n            month++;\n            day = 0;\n           \
    \ year++;\n        }\n        else if(date[i] == '/')\n        {\n           \
    \ month++;\n            day = 0;\n            year++;\n        }\n        else\
    \ if(date[i] == '-')\n        {\n            month++;\n            day = 0;\n\
    \            year++;\n        }\n        else if(date[i] == '/')", "{\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "{\n    string::size_type pos =\
    \ 0;\n    string::size_type len = date.length();\n    char month[12];\n    char\
    \ day[12];\n    char year[12];\n    char temp[12];\n    char temp2[12];\n    char\
    \ temp3[12];\n    char temp4[12];\n    char temp5[12];\n    char temp6[12];\n\
    \    char temp7[12];\n    char temp8[12];\n    char temp9[12];\n    char temp10[12];\n\
    \    char temp11[12];\n    char temp12[12];\n    char temp13[12];\n    char temp14[12];\n\
    \    char temp15[12];\n    char temp16[12];\n    char temp17[12];\n    char temp18[12];\n\
    \    char temp19[12];\n    char temp20[12];\n    char temp21[12];\n    char temp22[12];\n\
    \    char temp23[12];\n    char temp24[12];\n    char temp25[12];\n    char temp26[12];\n\
    \    char temp27[12];\n    char temp28[12];\n    char temp29[12];\n    char temp30[12];\n\
    \    char temp31[12];\n    char temp32[12];\n    char temp33[12];\n    char temp34[12];\n\
    \    char temp35[12];\n    char temp36[12];\n    char temp37[12];\n    char temp38[12];\n\
    \    char temp39[12];\n    char temp40[12];\n    char temp41[12];\n    char temp42[12];\n\
    \    char temp43[12];\n    char temp44[12];\n    char temp45[12];\n    char temp46[12];\n\
    \    char temp47[12];\n    char temp48[12];\n    char temp49[12];\n    char temp50[12];\n\
    \    char temp51[12];\n    char temp52[12];\n    char temp53[12];\n    char temp54[12];\n\
    \    char temp55[12];\n    char temp56[12];\n    char temp57[12];\n    char temp58[12];\n\
    \    char temp59[12];\n    char temp60[12];\n    char temp61[12];\n    char temp62[12];\n\
    \    char temp63[12];\n    char temp64[12];\n    char temp65[12];\n    char temp66[12];\n\
    \    char temp67[12];\n    char temp68", "{\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "{\n    if(!date.empty())\n    {\n        auto dateSplit\
    \ = split(date, \"-\");\n        if(dateSplit.size() == 3)\n        {\n      \
    \      auto dateParts = split(dateSplit[1], \"-\");\n            if(dateParts.size()\
    \ == 3)\n            {\n                auto datePart1 = to_string(dateParts[0]);\n\
    \                auto datePart2 = to_string(dateParts[1]);\n                auto\
    \ datePart3 = to_string(dateParts[2]);\n                \n                if(datePart1.size()\
    \ == 2 && datePart2.size() == 2 && datePart3.size() == 2)\n                {\n\
    \                    if(datePart1 == \"01\" && datePart2 == \"01\" && datePart3\
    \ == \"01\")\n                    {\n                        return true;\n  \
    \                  }\n                    else if(datePart1 == \"03\" && datePart2\
    \ == \"11\" && datePart3 == \"01\")\n                    {\n                 \
    \       return true;\n                    }\n                    else if(datePart1\
    \ == \"05\" && datePart2 == \"07\" && datePart3 == \"01\")\n                 \
    \   {\n                        return true;\n                    }\n         \
    \           else if(datePart1 == \"07\" && datePart2 == \"08\" && datePart3 ==\
    \ \"01\")\n                    {\n                        return true;\n     \
    \               }\n                    else if(datePart1 == \"08\" && datePart2\
    \ == \"09\" && datePart3 == \"01\")\n                    {\n                 \
    \       return true;\n                    }\n                    else if(datePart1\
    \ == \"10\" && datePart2 == \"12\" && datePart3 == \"01\")\n                 \
    \   {\n                        return true;\n                    }\n         \
    \           else if(datePart1 == \"12\" && datePart2 == \"01\" && datePart3 ==\
    \ \"01\")\n                    {\n                        return true;\n     \
    \               }\n                    else if(datePart1 == \"01\" && datePart2\
    \ == \"04\" && datePart3 == \"20\")\n                    {\n                 \
    \       return true;\n                    }\n                    else if(datePart1\
    \ == \"04\" && datePart2 == \"06\" && datePart3 == \"20\")\n                 \
    \   {\n                        return true;\n                    }\n         \
    \           else if(datePart1 == \"06\" && datePart2 == \"09\" && datePart3 ==\
    \ \"20\")\n                    {\n                        return true;\n     \
    \               }\n                    else if(datePart1 == \"09\" && datePart2\
    \ == \"11\" && datePart3 == \"20\")\n                    {\n                 \
    \       return true;\n                    }\n                    else if(datePart1\
    \ == \"11\" && datePart2 == \"12\" && datePart3 == \"20\")\n                 \
    \   {\n                        return true;\n                    }\n         \
    \           else if(datePart1 == \"12\" && datePart2 == \"01\" && datePart3 ==\
    \ \"20\")\n                    {\n                        return true;\n     \
    \               }\n                    else if(datePart1 == \"01\" && datePart2\
    \ == \"02\" && datePart3 == \"19\")\n                    {\n                 \
    \       return true;\n                    }\n                    else if(datePart1\
    \ == \"02", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n   \
    \ if(!date.empty())\n    {\n        auto daysInMonth = std.array<int, 12>{31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        auto daysInMonth = std.array<int,\
    \ 12>{31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        auto daysInMonth\
    \ = std.array<int, 12>{31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        auto\
    \ daysInMonth = std.array<int, 12>{31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        auto daysInMonth = std.array<int, 12>{31, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31};\n        auto daysInMonth = std.array<int, 12>{31, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        auto daysInMonth = std.array<int, 12>{31,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        auto daysInMonth = std.array<int,\
    \ 12>{31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        auto daysInMonth =\
    \ std.array<int, 12>{31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        auto\
    \ daysInMonth = std.array<int, 12>{31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        auto daysInMonth = std.array<int, 12>{31, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31};\n        auto daysInMonth = std.array<int, 12>{31, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        auto daysInMonth = std.array<int, 12>{31,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        auto daysInMonth = std.array<int,\
    \ 12>{31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        auto daysInMonth =\
    \ std.array<int, 12>{31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        auto\
    \ daysInMonth = std.array<int, 12>{31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        auto daysInMonth = std.array<int, 12>{31, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31};\n        auto daysInMonth = std.array<int, 12>{31, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        auto daysInMonth = std.array<int, 12>{31,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        auto daysInMonth = std.array<int,\
    \ 12>{31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        auto daysInMonth =\
    \ std.array<int, 12>{31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        auto\
    \ daysInMonth = std.array<int, 12>{31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        auto daysInMonth = std.array<int, 12>{31, 31, 30, ", "{\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "{\n    if(date.empty())\n    {\n    \
    \    return false;\n    }\n    int days[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n\
    \    int months[12] = {0,1,2,3,4,5,6,7,8,9,10,11};\n    int years[12] = {0,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};\n\
    \    int days_months[12][12] = {\n        {31,28,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n", "{\n    string months[12]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n    string\
    \ days[12] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\",\
    \ \"09\", \"10\", \"11\", \"12\"};\n    string years[12] = {\"2000\", \"2001\"\
    , \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\"\
    , \"2010\", \"2011\", \"2012\"};\n    int daysInMonth[12] = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n    int daysInMonthLeap[12] = {31, 29, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31};\n    int daysInMonthLeapLeap[12] = {31, 29,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int month;\n    int day;\n   \
    \ int year;\n    int leapYear;\n    int leapYearLeap;\n    int leapYearLeapLeap;\n\
    \    int leapYearLeapLeapLeap;\n    int leapYearLeapLeapLeapLeap;\n    int leapYearLeapLeapLeapLeap;\n\
    \    int leapYearLeapLeapLeapLeap;\n    int leapYearLeapLeapLeapLeapLeap;\n  \
    \  int leapYearLeapLeapLeapLeapLeap;\n    int leapYearLeapLeapLeapLeapLeap;\n\
    \    int leapYearLeapLeapLeapLeapLeap;\n    int leapYearLeapLeapLeapLeapLeap;\n\
    \    int leapYearLeapLeapLeapLeapLeap;\n    int leapYearLeapLeapLeapLeapLeap;\n\
    \    int leapYearLeapLeapLeapLeapLeap;\n    int leapYearLeapLeapLeapLeapLeap;\n\
    \    int leapYearLeapLeapLeapLeapLeap;\n    int leapYearLeapLeapLeapLeapLeap;\n\
    \    int leapYearLeapLeapLeapLeapLeap;\n    int leapYearLeapLeapLeapLeapLeap;\n\
    \    int leapYearLeapLeapLeapLeapLeap;\n    int leapYearLeapLeapLeapLeapLeap;\n\
    \    int leapYearLeapLeapLeapLeapLeap;\n    int leapYearLeapLeapLeapLeapLeap;\n\
    \    int leapYearLeapLeapLeapLeapLeap;\n    int leapYearLeapLeapLeapLeapLeap;\n\
    \    int leapYearLeapLeapLeapLeapLeap;\n    int leapYearLeapLeapLeapLeapLeap;\n\
    \    int leapYearLeapLeapLeapLeapLeap;\n    int leapYearLeapLeapLeapLeapLeap;\n\
    \    int leapYearLeapLeapLeapLeapLeap;\n    int leapYearLeapLeapLeapLeapLeap;\n\
    \    int leapYearLeapLeapLeapLeapLeap;\n    int leapYearLeapLeapLeapLeapLeap;\n\
    \    int leapYearLeapLeapLeapLeapLeap;\n    int leapYearLeapLeapLeapLeapLeap;\n\
    \    int leapYearLeapLeapLeap", "{\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "{\n    \n    string months[12] = {\"January\", \"March\", \"May\",\
    \ \"July\", \"August\", \"October\", \"December\"};\n    string days[31] = {\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\",\
    \ \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    };\n    string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\",\
    \ \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"\
    , \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\"\
    , \"2029\", \"2030\", \"2031\"};\n    \n    int month = 0;\n    int day = 0;\n\
    \    int year = 0;\n    \n    for(int i = 0; i < date.size(); i++)\n    {\n  \
    \      if(date[i] == '-')\n        {\n            month--;\n        }\n      \
    \  else if(date[i] == '/')\n        {\n            month++;\n        }\n     \
    \   else if(date[i] == '-')\n        {\n            day--;\n        }\n      \
    \  else if(date[i] == '/')\n        {\n            day++;\n        }\n       \
    \ else if(date[i] == '-')\n        {\n            year--;\n        }\n       \
    \ else if(date[i] == '/')\n        {\n            year++;\n        }\n    }\n\
    \    \n    if(month < 1 || month > 12)\n    {\n        return false;\n    }\n\
    \    \n    if(day < 1 || day > 31)\n    {\n        return false;\n    }\n    \n\
    \    if(year < 1 || year > 12)\n    {\n        return false;\n    }\n    \n  \
    \  if(month == 2)\n    {\n        if(day > 29)\n        {\n            return\
    \ false;\n        }\n    }\n    \n    return true;\n}\n</code>\n<|/ a tags=c++,string,date\
    \ |>\n<| c |>\nThank you so much for your answer! I really appreciate it!\n<|/\
    \ c |>\n<| c |>\nI added the function `valid_date` which I believe is what you\
    \ are looking for.\n<|/ c |>\n<| c |>\nThank you so much for your answer! I really\
    \ appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <sstream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    if(!date.empty())\n    {\n        auto dateSplit =\
    \ split(date, '-');\n        if(dateSplit.size() == 3)\n        {\n          \
    \  auto dateParts = split(dateSplit[0], '-');\n            if(dateParts.size()\
    \ == 2)\n            {\n                if(dateParts[0] == \"01\" && dateParts[1]\
    \ == \"01\")\n                {\n                    if(dateParts[2] == \"0000\"\
    )\n                    {\n                        return true;\n             \
    \       }\n                }\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    if(date == \"\"){\n        return false;\n    }\n    int daysInMonth[12]\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int daysInMonth_leap[12]\
    \ = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int daysInMonth_leap2[31]\
    \ = {
  "{\n    if(!date.empty())\n    {\n        auto [day, month, year] = date.split('-');\n\
    \        if(day < 1 || day > 31)\n        {\n            return false;\n     \
    \   }\n        if(month < 1 || month > 12)\n        {\n            return false;\n\
    \        }\n        if(year < 1900)\n        {\n            return false;\n  \
    \      }\n    }\n    return true;\n}", "{\n    if(date.empty())\n        return\
    \ false;\n    \n    int days;\n    int months;\n    \n    stringstream ss(date);\n\
    \    \n    ss >> days;\n    \n    if(days > 31 || days < 1)\n        return false;\n\
    \    \n    ss >> months;\n    \n    if(months > 12 || months < 1)\n        return\
    \ false;\n    \n    ss >> date;\n    \n    if(date != \"mm-dd-yyyy\")\n      \
    \  return false;\n    \n    return true;\n}\n</code>\n<|/ a tags=c++,c++11 |>\n\
    <| c |>\nI like your solution, but I still don't understand why my code didn't\
    \ work. Can you please explain why my code didn't work?\n<|/ c |>\n<| c |>\nI\
    \ added some explanation to the answer.\n<|/ c |>\n<| c |>\nI still don't understand\
    \ why my code didn't work. Can you please explain why my code didn't work?\n<|/\
    \ c |>\n<| c |>\nI added some explanation to the answer.\n<|/ c |>\n<| c |>\n\
    I still don't understand why my code didn't work. Can you please explain why my\
    \ code didn't work?\n<|/ c |>\n<| a tags=c++,c++11 |>\nThe problem is that the\
    \ stream extraction operator (>>) reads until the next whitespace character, which\
    \ is not what you want.\nThe easiest way to fix this is to read into a string\
    \ and use std::sscanf to parse the string into the desired values.\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <sstream>\n#include <cstdio>", "{\n\
    \    \n    string months[12] = {\"January\", \"March\", \"May\", \"July\", \"\
    August\", \"October\", \"December\"};\n    string days[12] = {\"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"};\n    string\
    \ years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"\
    2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"};\n    \n \
    \   int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    for(int i =\
    \ 0; i < date.size(); i++)\n    {\n        if(date[i] == '-')\n        {\n   \
    \         month++;\n            day = 0;\n            year++;\n        }\n   \
    \     else if(date[i] == '/')\n        {\n            month++;\n            day\
    \ = 0;\n            year++;\n        }\n        else if(date[i] == '-')\n    \
    \    {\n            month++;\n            day = 0;\n            year++;\n    \
    \    }\n        else if(date[i] == '/')\n        {\n            month++;\n   \
    \         day = 0;\n            year++;\n        }\n        else if(date[i] ==\
    \ '-')\n        {\n            month++;\n            day = 0;\n            year++;\n\
    \        }\n        else if(date[i] == '/')\n        {\n            month++;\n\
    \            day = 0;\n            year++;\n        }\n        else if(date[i]\
    \ == '-')\n        {\n            month++;\n            day = 0;\n           \
    \ year++;\n        }\n        else if(date[i] == '/')\n        {\n           \
    \ month++;\n            day = 0;\n            year++;\n        }\n        else\
    \ if(date[i] == '-')\n        {\n            month++;\n            day = 0;\n\
    \            year++;\n        }\n        else if(date[i] == '/')\n        {\n\
    \            month++;\n            day = 0;\n            year++;\n        }\n\
    \        else if(date[i] == '-')\n        {\n            month++;\n          \
    \  day = 0;\n            year++;\n        }\n        else if(date[i] == '/')\n\
    \        {\n            month++;\n            day = 0;\n            year++;\n\
    \        }\n        else if(date[i] == '-')\n        {\n            month++;\n\
    \            day = 0;\n            year++;\n        }\n        else if(date[i]\
    \ == '/')\n        {\n            month++;\n            day = 0;\n           \
    \ year++;\n        }\n        else if(date[i] == '-')\n        {\n           \
    \ month++;\n            day = 0;\n            year++;\n        }\n        else\
    \ if(date[i] == '/')\n        {\n            month++;\n            day = 0;\n\
    \            year++;\n        }\n        else if(date[i] == '-')\n        {\n\
    \            month++;\n            day = 0;\n            year++;\n        }\n\
    \        else if(date[i] == '/')", "{\n    bool valid = false;\n    \n    try\n\
    \    {\n        auto dateArray = date.split('-');\n        \n        if(dateArray.size()\
    \ != 3)\n        {\n            valid = false;\n        }\n        else\n    \
    \    {\n            int daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31};\n            int daysInMonth_leap[12] = {31, 29, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31};\n            int monthArray[12] = {1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12};\n            int monthArray_leap[12] = {1, 2, 3, 4, 6,\
    \ 5, 8, 9, 10, 11, 12};\n            \n            int dayArray[12];\n       \
    \     int dayArray_leap[12];\n            \n            for(int i = 0; i < 12;\
    \ i++)\n            {\n                dayArray[i] = dateArray[2 + i];\n     \
    \           dayArray_leap[i] = dateArray[2 + i];\n            }\n            \n\
    \            for(int i = 0; i < 12; i++)\n            {\n                if(dayArray[i]\
    \ < 1 || dayArray[i] > daysInMonth[i])\n                {\n                  \
    \  valid = false;\n                }\n            }\n            \n          \
    \  for(int i = 0; i < 12; i++)\n            {\n                if(dayArray_leap[i]\
    \ < 1 || dayArray_leap[i] > daysInMonth_leap[i])\n                {\n        \
    \            valid = false;\n                }\n            }\n            \n\
    \            for(int i = 0; i < 12; i++)\n            {\n                if(monthArray[i]\
    \ < 1 || monthArray[i] > 12)\n                {\n                    valid = false;\n\
    \                }\n            }\n            \n            for(int i = 0; i\
    \ < 12; i++)\n            {\n                if(monthArray_leap[i] < 1 || monthArray_leap[i]\
    \ > 12)\n                {\n                    valid = false;\n             \
    \   }\n            }\n            \n            for(int i = 0; i < 12; i++)\n\
    \            {\n                if(dayArray[i] < 1 || dayArray[i] > daysInMonth[i])\n\
    \                {\n                    valid = false;\n                }\n  \
    \          }\n            \n            for(int i = 0; i < 12; i++)\n        \
    \    {\n                if(dayArray_leap[i] < 1 || dayArray_leap[i] > daysInMonth_leap[i])\n\
    \                {\n                    valid = false;\n                }\n  \
    \          }\n            \n            for(int i = 0; i < 12; i++)\n        \
    \    {\n                if(monthArray[i] < 1 || monthArray[i] > 12)\n        \
    \        {\n                    valid = false;\n                }\n          \
    \  }\n            \n            for(int i = 0; i < 12; i++)\n            {\n \
    \               if(monthArray_leap[i] < 1 || monthArray_leap[i] > 12)\n      \
    \          {\n                    valid = false;\n                }\n        \
    \    }\n        }\n    }\n    catch(...)\n    {\n        valid = false;\n    }\n\
    \    \n    return valid;\n}", "{\n    \n    int day;\n    int month;\n    int\
    \ year;\n    \n    stringstream ss(date);\n    \n    ss >> month;\n    ss >> day;\n\
    \    ss >> year;\n    \n    if(month < 1 || month > 12)\n    {\n        return\
    \ false;\n    }\n    \n    if(day < 1 || day > 31)\n    {\n        return false;\n\
    \    }\n    \n    if(month == 2)\n    {\n        if(day > 29)\n        {\n   \
    \         return false;\n        }\n    }\n    \n    if(month == 4 || month ==\
    \ 6 || month == 9 || month == 11)\n    {\n        if(day > 30)\n        {\n  \
    \          return false;\n        }\n    }\n    \n    if(month == 1)\n    {\n\
    \        if(day > 31)\n        {\n            return false;\n        }\n    }\n\
    \    \n    return true;\n}", "{\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    \n    string months[12]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n    string\
    \ days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\
    \ \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    , \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\"\
    , \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\"\
    , \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\"\
    , \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\"\
    , \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\"\
    , \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\"\
    , \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\"\
    , \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\"\
    , \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\"\
    , \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\"\
    , \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\"\
    , \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\"\
    , \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\"\
    , \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\"\
    , \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\"\
    , \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\"\
    , \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\"\
    , \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\"\
    , \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\"\
    , \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\"\
    , \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\"\
    , \"226\", \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\"\
    , \"235\", \"236", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n\
    \    if(!date.empty())\n    {\n        int days;\n        string month;\n    \
    \    string year;\n        \n        auto dateParts = split(date, '-');\n    \
    \    days = std.atoi(dateParts[0]);\n        month = dateParts[1];\n        year\
    \ = dateParts[2];\n        \n        if(days > 31 || days < 1 || month > 12 ||\
    \ month < 1 || year > 9999 || year < 1900)\n        {\n            return false;\n\
    \        }\n        \n        auto monthParts = split(month, '-');\n        if(monthParts[0]\
    \ > 12 || monthParts[0] < 1 || monthParts[1] > 12 || monthParts[1] < 1)\n    \
    \    {\n            return false;\n        }\n        \n        auto yearParts\
    \ = split(year, '-');\n        if(yearParts[0] > 9999 || yearParts[0] < 1900)\n\
    \        {\n            return false;\n        }\n        \n        return true;\n\
    \    }\n    return false;\n}", "{\n    string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n    string days[12] = {\"01\", \"\
    02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\",\
    \ \"12\"};\n    string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"\
    2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\",\
    \ \"2012\"};\n    \n    size_t month = 0;\n    size_t day = 0;\n    size_t year\
    \ = 0;\n    \n    size_t daysInMonth = 0;\n    \n    size_t monthIndex = 0;\n\
    \    size_t dayIndex = 0;\n    size_t yearIndex = 0;\n    \n    size_t monthCount\
    \ = 0;\n    size_t dayCount = 0;\n    size_t yearCount = 0;\n    \n    size_t\
    \ monthCount2 = 0;\n    size_t dayCount2 = 0;\n    size_t yearCount2 = 0;\n  \
    \  \n    size_t monthCount3 = 0;\n    size_t dayCount3 = 0;\n    size_t yearCount3\
    \ = 0;\n    \n    size_t monthCount4 = 0;\n    size_t dayCount4 = 0;\n    size_t\
    \ yearCount4 = 0;\n    \n    size_t monthCount5 = 0;\n    size_t dayCount5 = 0;\n\
    \    size_t yearCount5 = 0;\n    \n    size_t monthCount6 = 0;\n    size_t dayCount6\
    \ = 0;\n    size_t yearCount6 = 0;\n    \n    size_t monthCount7 = 0;\n    size_t\
    \ dayCount7 = 0;\n    size_t yearCount7 = 0;\n    \n    size_t monthCount8 = 0;\n\
    \    size_t dayCount8 = 0;\n    size_t yearCount8 = 0;\n    \n    size_t monthCount9\
    \ = 0;\n    size_t dayCount9 = 0;\n    size_t yearCount9 = 0;\n    \n    size_t\
    \ monthCount10 = 0;\n    size_t dayCount10 = 0;\n    size_t yearCount10 = 0;\n\
    \    \n    size_t monthCount11 = 0;\n    size_t dayCount11 = 0;\n    size_t yearCount11\
    \ = 0;\n    \n    size_t monthCount12 = 0;\n    size_t dayCount12 = 0;\n    size_t\
    \ yearCount12 = 0;\n    \n    size_t monthCount13 = 0;\n    size_t dayCount13\
    \ = 0;\n    size_t yearCount13 = 0;\n    \n    size_t monthCount14 = 0;\n    size_t\
    \ dayCount14 = 0;\n    size_t yearCount14 = 0;\n    \n    size_t monthCount15\
    \ = 0;\n    size_t dayCount15 = 0;\n    size_t yearCount15 = 0;\n    \n    size_t\
    \ monthCount16 = 0;\n    size_t dayCount16 = 0;\n    size_t yearCount16 = 0;\n\
    \    \n    size_t monthCount17 = 0;\n    size_t day", "{\n    if(date.empty())\n\
    \        return false;\n    \n    int days[12] = { 31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31 };\n    int months[12] = { 0, 31, 59, 90, 120, 151, 181,\
    \ 212, 243, 273, 304, 334 };\n    \n    stringstream ss(date);\n    \n    int\
    \ day, month, year;\n    \n    ss >> month;\n    ss >> day;\n    ss >> year;\n\
    \    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day\
    \ < 1 || day > days[month])\n        return false;\n    \n    if(year < 1000 ||\
    \ year > 9999)\n        return false;\n    \n    return true;\n}\n</code>\n<|/\
    \ a tags=c++,c++11 |>\n<| c |>\n`month < 1 || month > 12` should be `month < 1\
    \ || month > 12 || month == 13`\n<|/ c |>\n<| c |>\n`month < 1 || month > 12 ||\
    \ month == 13` should be `month < 1 || month > 12 || month == 13 || month == 14`\n\
    <|/ c |>\n<| c |>\n`month < 1 || month > 12 || month == 13 || month == 14` should\
    \ be `month < 1 || month > 12 || month == 13 || month == 14 || month == 15`\n\
    <|/ c |>\n<| c |>\n`month < 1 || month > 12 || month == 13 || month == 14 || month\
    \ == 15` should be `month < 1 || month > 12 || month == 13 || month == 14 || month\
    \ == 15 || month == 16`\n<|/ c |>\n<| c |>\n`month < 1 || month > 12 || month\
    \ == 13 || month == 14 || month == 15 || month == 16` should be `month < 1 ||\
    \ month > 12 || month == 13 || month == 14 || month == 15 || month == 16 || month\
    \ == 17`\n<|/ c |>\n<| a tags=c++,c++11 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <sstream>\n#include <ctime>\n#include <cstdlib>\nusing namespace\
    \ std;", "{\n    stringstream ss(date);\n    string month;\n    int day;\n   \
    \ int year;\n    ss >> month;\n    ss >> day;\n    ss >> year;\n    \n    if (month.length()\
    \ != 2 || day.length() != 2 || year.length() != 4)\n        return false;\n  \
    \  \n    if (month[0] == '0' && month[1] == '0')\n        return false;\n    \n\
    \    if (month[0] < '1' || month[0] > '12')\n        return false;\n    \n   \
    \ if (month[1] < '1' || month[1] > '3')\n        return false;\n    \n    if (day\
    \ < '1' || day > '31')\n        return false;\n    \n    if (day < '1' || day\
    \ > '30')\n        return false;\n    \n    if (day < '1' || day > '29')\n   \
    \     return false;\n    \n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <sstream>\n\
    #include <vector>\n#include <algorithm>", "{\n    bool valid = true;\n    \n \
    \   if(!date.empty())\n    {\n        auto dateParts = date.split('-');\n    \
    \    if(dateParts.size() != 3)\n        {\n            valid = false;\n      \
    \  }\n        else\n        {\n            auto months = dateParts[0].split('-');\n\
    \            auto days = dateParts[1].split('-');\n            auto year = dateParts[2].split('-');\n\
    \            \n            int month1 = std.string.to_integer(months[0]);\n  \
    \          int month2 = std.string.to_integer(months[1]);\n            int day1\
    \ = std.string.to_integer(days[0]);\n            int day2 = std.string.to_integer(days[1]);\n\
    \            int year1 = std.string.to_integer(year[0]);\n            int year2\
    \ = std.string.to_integer(year[1]);\n            \n            if(month1 < 1 ||\
    \ month1 > 12)\n            {\n                valid = false;\n            }\n\
    \            else if(month2 < 1 || month2 > 12)\n            {\n             \
    \   valid = false;\n            }\n            else if(day1 < 1 || day1 > 31)\n\
    \            {\n                valid = false;\n            }\n            else\
    \ if(day2 < 1 || day2 > 30)\n            {\n                valid = false;\n \
    \           }\n            else if(year1 < 1 || year1 > 100)\n            {\n\
    \                valid = false;\n            }\n            else if(year2 < 1\
    \ || year2 > 100)\n            {\n                valid = false;\n           \
    \ }\n        }\n    }\n    \n    return valid;\n}", "{\n    if(!date.empty())\n\
    \    {\n        auto date_split = date.split('-');\n        if(date_split.size()\
    \ == 3)\n        {\n            auto year = std.atoi(date_split[0]);\n       \
    \     auto month = std.atoi(date_split[1]);\n            auto day = std.atoi(date_split[2]);\n\
    \            if(month < 1 || month > 12)\n            {\n                return\
    \ false;\n            }\n            if(day < 1 || day > 31)\n            {\n\
    \                return false;\n            }\n            if(month == 2 && day\
    \ > 29)\n            {\n                return false;\n            }\n       \
    \     if(month == 2 && day > 28)\n            {\n                return false;\n\
    \            }\n            if(month == 2 && day > 31)\n            {\n      \
    \          return false;\n            }\n            if(month == 2 && day > 30)\n\
    \            {\n                return false;\n            }\n            if(month\
    \ == 2 && day > 31)\n            {\n                return false;\n          \
    \  }\n            if(month == 2 && day > 30)\n            {\n                return\
    \ false;\n            }\n            if(month == 2 && day > 31)\n            {\n\
    \                return false;\n            }\n            if(month == 2 && day\
    \ > 30)\n            {\n                return false;\n            }\n       \
    \     if(month == 2 && day > 31)\n            {\n                return false;\n\
    \            }\n            if(month == 2 && day > 30)\n            {\n      \
    \          return false;\n            }\n            if(month == 2 && day > 31)\n\
    \            {\n                return false;\n            }\n            if(month\
    \ == 2 && day > 30)\n            {\n                return false;\n          \
    \  }\n            if(month == 2 && day > 31)\n            {\n                return\
    \ false;\n            }\n            if(month == 2 && day > 30)\n            {\n\
    \                return false;\n            }\n            if(month == 2 && day\
    \ > 31)\n            {\n                return false;\n            }\n       \
    \     if(month == 2 && day > 30)\n            {\n                return false;\n\
    \            }\n            if(month == 2 && day > 31)\n            {\n      \
    \          return false;\n            }\n            if(month == 2 && day > 30)\n\
    \            {\n                return false;\n            }\n            if(month\
    \ == 2 && day > 31)\n            {\n                return false;\n          \
    \  }\n            if(month == 2 && day > 30)\n            {\n                return\
    \ false;\n            }\n            if(month == 2 && day > 31)\n            {\n\
    \                return false;\n            }\n            if(month == 2 && day\
    \ > 30)\n            {\n                return false;\n            }\n       \
    \     if(month == 2 && day > 31)\n            {\n                return false;\n\
    \            }\n            if(month == 2 && day > 30)\n            {\n      \
    \          return false;\n            }\n            if(month == 2 && day > 31)\n\
    \            {\n                return false;\n            }\n            if(month\
    \ == 2 && day > 30)\n            {\n                return false;\n          \
    \  }\n            if(month == 2 && day > 31)\n            {\n                return\
    \ false;\n            }", "{\n    if(!date.empty())\n    {\n        auto dateSplit\
    \ = split(date, \"-\");\n        if(dateSplit.size() == 3)\n        {\n      \
    \      auto dateParts = split(dateSplit[1], \"-\");\n            if(dateParts.size()\
    \ == 3)\n            {\n                auto datePart1 = std.string::to_number(dateParts[0]);\n\
    \                auto datePart2 = std.string::to_number(dateParts[1]);\n     \
    \           auto datePart3 = std.string::to_number(dateParts[2]);\n          \
    \      if(datePart1 < 1 || datePart1 > 31 || datePart2 < 1 || datePart2 > 31)\n\
    \                {\n                    return false;\n                }\n   \
    \             if(datePart1 < 1 || datePart1 > 30 || datePart2 < 1 || datePart2\
    \ > 30)\n                {\n                    return false;\n              \
    \  }\n                if(datePart1 < 1 || datePart1 > 29 || datePart2 < 1 || datePart2\
    \ > 29)\n                {\n                    return false;\n              \
    \  }\n            }\n        }\n    }\n    return true;\n}", "{\n    stringstream\
    \ ss(date);\n    string month;\n    string day;\n    string year;\n    int months;\n\
    \    int days;\n    int years;\n    \n    ss >> month;\n    ss >> day;\n    ss\
    \ >> year;\n    \n    months = month.find_first_not_of(\"0123456789\");\n    days\
    \ = day.find_first_not_of(\"0123456789\");\n    years = year.find_first_not_of(\"\
    0123456789\");\n    \n    if (months.is_error() || days.is_error() || years.is_error())\n\
    \    {\n        return false;\n    }\n    \n    if (months == 1 && days == 1 &&\
    \ years == 12)\n    {\n        return true;\n    }\n    \n    if (months == 2\
    \ && days == 1 && years == 1)\n    {\n        return true;\n    }\n    \n    if\
    \ (months == 2 && days == 29 && years == 4)\n    {\n        return true;\n   \
    \ }\n    \n    if (months == 3 && days == 1 && years == 1)\n    {\n        return\
    \ true;\n    }\n    \n    if (months == 3 && days == 29 && years == 6)\n    {\n\
    \        return true;\n    }\n    \n    if (months == 4 && days == 1 && years\
    \ == 20)\n    {\n        return true;\n    }\n    \n    if (months == 4 && days\
    \ == 29 && years == 4)\n    {\n        return true;\n    }\n    \n    if (months\
    \ == 5 && days == 1 && years == 1)\n    {\n        return true;\n    }\n    \n\
    \    if (months == 5 && days == 29 && years == 5)\n    {\n        return true;\n\
    \    }\n    \n    if (months == 6 && days == 1 && years == 4)\n    {\n       \
    \ return true;\n    }\n    \n    if (months == 6 && days == 29 && years == 6)\n\
    \    {\n        return true;\n    }\n    \n    if (months == 7 && days == 1 &&\
    \ years == 1)\n    {\n        return true;\n    }\n    \n    if (months == 7 &&\
    \ days == 29 && years == 7)\n    {\n        return true;\n    }\n    \n    if\
    \ (months == 8 && days == 1 && years == 1)\n    {\n        return true;\n    }\n\
    \    \n    if (months == 8 && days == 29 && years == 8)\n    {\n        return\
    \ true;\n    }\n    \n    if (months == 9 && days == 1 && years == 1)\n    {\n\
    \        return true;\n    }\n    \n    if (months == 9 && days == 29 && years\
    \ == 9)\n    {\n        return true;\n    }\n    \n    if (months == 10 && days\
    \ == 1 && years == 1)\n    {\n        return true;\n    }\n    \n    if (months\
    \ == 10 && days == 29 && years == 10)\n    {\n        return true;\n    }\n  \
    \  \n    if (months == ", "{\n    \n    int day;\n    int month;\n    int year;\n\
    \    \n    stringstream ss(date);\n    \n    ss >> month;\n    \n    if(month\
    \ < 1 || month > 12)\n    {\n        return false;\n    }\n    \n    ss >> day;\n\
    \    \n    if(day < 1 || day > 31)\n    {\n        return false;\n    }\n    \n\
    \    ss >> year;\n    \n    if(year < 1 || year > 2020)\n    {\n        return\
    \ false;\n    }\n    \n    return true;\n}", "{\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "{\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "{\n    if(!date.empty())\n    {\n        int days[12] = { 31, 28, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31 };\n        int months[12] = { 0, 31, 60, 91, 121, 152,\
    \ 182, 213, 244, 274, 305, 335, 366 };\n        auto dateParts = date.split('-');\n\
    \        auto year = std.atoi(dateParts[0].c_str());\n        auto month = std.atoi(dateParts[1].c_str());\n\
    \        auto day = std.atoi(dateParts[2].c_str());\n        if(year < 1 || year\
    \ > 9999)\n            return false;\n        if(month < 1 || month > 12)\n  \
    \          return false;\n        if(day < 1 || day > days[month])\n         \
    \   return false;\n        if(month != 2 && day > 30)\n            return false;\n\
    \        if(month == 2)\n        {\n            if(day > 29)\n               \
    \ return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=c++,c++11\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any library other\
    \ than std.\n<|/ c |>\n<| c |>\nI added the code for the function which validates\
    \ the date string. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I am not allowed to use any library other than std.\n<|/ c |>\n<| c |>\nI added\
    \ the code for the function which validates the date string. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use any library\
    \ other than std.\n<|/ c |>\n<| a tags=c++,c++11 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n\
    #include <ctime>", "{\n    \n    bool valid = true;\n    \n    if(!date.empty())\n\
    \    {\n        auto [day, month, year] = date.split('-');\n        \n       \
    \ if(day == \"01\" || day == \"02\" || day == \"03\" || day == \"04\" || day ==\
    \ \"05\" || day == \"06\" || day == \"07\" || day == \"08\" || day == \"09\" ||\
    \ day == \"10\" || day == \"11\" || day == \"12\")\n        {\n            if(month\
    \ == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month\
    \ == \"08\" || month == \"10\" || month == \"12\")\n            {\n          \
    \      if(year == \"0000\" || year == \"0001\" || year == \"0002\" || year ==\
    \ \"0003\" || year == \"0004\" || year == \"0005\" || year == \"0006\" || year\
    \ == \"0007\" || year == \"0008\" || year == \"0009\" || year == \"0010\" || year\
    \ == \"0011\" || year == \"0012\" || year == \"0013\" || year == \"0014\" || year\
    \ == \"0015\" || year == \"0016\" || year == \"0017\" || year == \"0018\" || year\
    \ == \"0019\" || year == \"0020\" || year == \"0021\" || year == \"0022\" || year\
    \ == \"0023\" || year == \"0024\" || year == \"0025\" || year == \"0026\" || year\
    \ == \"0027\" || year == \"0028\" || year == \"0029\" || year == \"0030\" || year\
    \ == \"0031\")\n                {\n                    valid = true;\n       \
    \         }\n                else\n                {\n                    valid\
    \ = false;\n                }\n            }\n            else\n            {\n\
    \                valid = false;\n            }\n        }\n        else\n    \
    \    {\n            valid = false;\n        }\n    }\n    else\n    {\n      \
    \  valid = false;\n    }\n    \n    return valid;\n}", "{\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "{\n    stringstream ss(date);\n    string month;\n\
    \    int day;\n    int year;\n    ss >> month;\n    ss >> day;\n    ss >> year;\n\
    \    \n    bool valid = true;\n    \n    if(month.length() != 2)\n    {\n    \
    \    valid = false;\n    }\n    \n    if(day < 1 || day > 31)\n    {\n       \
    \ valid = false;\n    }\n    \n    if(month == \"01\" || month == \"03\" || month\
    \ == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month\
    \ == \"12\")\n    {\n        if(day < 1 || day > 30)\n        {\n            valid\
    \ = false;\n        }\n    }\n    else if(month == \"04\" || month == \"06\" ||\
    \ month == \"09\" || month == \"11\")\n    {\n        if(day < 1 || day > 29)\n\
    \        {\n            valid = false;\n        }\n    }\n    else if(month ==\
    \ \"02\")\n    {\n        if(day < 1 || day > 28)\n        {\n            valid\
    \ = false;\n        }\n    }\n    \n    if(!valid)\n    {\n        return false;\n\
    \    }\n    \n    if(year < 2000 || year > 2099)\n    {\n        return false;\n\
    \    }\n    \n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank\
    \ you for your answer. Unfortunately I cannot use any libraries other than std.\n\
    <|/ c |>\n<| c |>\nI added a solution without using any libraries.\n<|/ c |>\n\
    <| c |>\nThank you for your answer. Unfortunately I cannot use any libraries other\
    \ than std.\n<|/ c |>\n<| c |>\nI added a solution without using any libraries.\n\
    <|/ c |>\n<| a tags=c++,date |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <sstream>\n#include <vector>\n#include <algorithm>\n#include <ctime>\n\
    using namespace std;", "{\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "{\n    if(date.empty())\n        return false;\n    int daysInMonth[] = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int days[] = {0, 31, 28, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31};\n    int months[] = {0, 12, 31, 12, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n    stringstream ss(date);\n    int day, month,\
    \ year;\n    ss >> month;\n    ss >> day;\n    ss >> year;\n    for(int i = 0;\
    \ i < 12; i++)\n    {\n        if(months[i] > month)\n        {\n            months[i]\
    \ = month;\n            break;\n        }\n    }\n    for(int i = 0; i < 12; i++)\n\
    \    {\n        if(days[i] > day)\n        {\n            days[i] = day;\n   \
    \         break;\n        }\n    }\n    for(int i = 0; i < 12; i++)\n    {\n \
    \       if(daysInMonth[i] > month)\n        {\n            daysInMonth[i] = month;\n\
    \            break;\n        }\n    }\n    for(int i = 0; i < 12; i++)\n    {\n\
    \        if(year > 2000)\n        {\n            year += 2000;\n            break;\n\
    \        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thank you so much for your help. I really appreciate it. I will try this out and\
    \ let you know if it works.\n<|/ c |>\n<| c |>\nI tested it and it works. Thank\
    \ you so much!\n<|/ c |>\n<| c |>\nYou're welcome. I'm glad I could help.\n<|/\
    \ c |>\n<| a dscore=0 |>\nI wrote a small program to validate dates. I hope it\
    \ helps.\n<code>\n#include <iostream>\n#include <string>\n#include <sstream>\n\
    #include <vector>\n#include <ctime>\n#include <cstdlib>\n#include <cmath>\nusing\
    \ namespace std;", "{\n    \n    int day;\n    int month;\n    int year;\n   \
    \ \n    stringstream ss(date);\n    \n    ss >> month;\n    ss >> day;\n    ss\
    \ >> year;\n    \n    \n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    \n    if(day < 1 || day > 31){\n        return false;\n    }\n   \
    \ \n    if(month == 2){\n        if(day > 29){\n            return false;\n  \
    \      }\n    }\n    \n    if(day > 30){\n        return false;\n    }\n    \n\
    \    if(month == 4){\n        if(day > 30){\n            return false;\n     \
    \   }\n    }\n    \n    if(day > 29){\n        return false;\n    }\n    \n  \
    \  if(month == 6){\n        if(day > 30){\n            return false;\n       \
    \ }\n    }\n    \n    if(day > 30){\n        return false;\n    }\n    \n    if(month\
    \ == 9){\n        if(day > 30){\n            return false;\n        }\n    }\n\
    \    \n    if(day > 30){\n        return false;\n    }\n    \n    if(month ==\
    \ 11){\n        if(day > 30){\n            return false;\n        }\n    }\n \
    \   \n    if(day > 30){\n        return false;\n    }\n    \n    return true;\n\
    }", "{\n    stringstream ss(date);\n    string month;\n    int day;\n    int year;\n\
    \    ss >> month >> day >> year;\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    \n    int day;\n \
    \   int month;\n    int year;\n    \n    stringstream ss(date);\n    \n    ss\
    \ >> month;\n    ss >> day;\n    ss >> year;\n    \n    \n    if (month < 1 ||\
    \ month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if\
    \ (month == 2 && day > 29) return false;\n    if (month == 4 && day > 30) return\
    \ false;\n    if (month == 6 && day > 31) return false;\n    if (month == 9 &&\
    \ day > 30) return false;\n    if (month == 11 && day > 31) return false;\n  \
    \  if (month == 1 && day > 30) return false;\n    \n    return true;\n}", "{\n\
    \    \n    int day;\n    int month;\n    int year;\n    \n    stringstream ss(date);\n\
    \    \n    ss >> month;\n    ss >> day;\n    ss >> year;\n    \n    if(month <\
    \ 1 || month > 12)\n    {\n        return false;\n    }\n    \n    if(day < 1\
    \ || day > 31)\n    {\n        return false;\n    }\n    \n    if(month == 2)\n\
    \    {\n        if(day > 29)\n        {\n            return false;\n        }\n\
    \    }\n    \n    if(day > 30)\n    {\n        return false;\n    }\n    \n  \
    \  if(day > 31)\n    {\n        return false;\n    }\n    \n    if(month == 1)\n\
    \    {\n        if(day > 31)\n        {\n            return false;\n        }\n\
    \    }\n    \n    if(month == 3)\n    {\n        if(day > 30)\n        {\n   \
    \         return false;\n        }\n    }\n    \n    if(month == 5)\n    {\n \
    \       if(day > 31)\n        {\n            return false;\n        }\n    }\n\
    \    \n    if(month == 7)\n    {\n        if(day > 31)\n        {\n          \
    \  return false;\n        }\n    }\n    \n    if(month == 8)\n    {\n        if(day\
    \ > 31)\n        {\n            return false;\n        }\n    }\n    \n    if(month\
    \ == 10)\n    {\n        if(day > 31)\n        {\n            return false;\n\
    \        }\n    }\n    \n    if(month == 12)\n    {\n        if(day > 30)\n  \
    \      {\n            return false;\n        }\n    }\n    \n    return true;\n\
    }\n</code>\n<|/ a tags=c++,c++17 |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ I cannot use any library function like `std::stoi` or `std::to_string`\n<|/\
    \ c |>\n<| c |>\nI added a solution without `std::to_string`\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. Unfortunately I cannot use any library function like `std::stoi`\
    \ or `std::to_string`\n<|/ c |>\n<| c |>\nI added a solution without `std::to_string`\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use any library\
    \ function like `std::stoi` or `std::to_string`\n<|/ c |>\n<| a tags=c++,c++17\
    \ |>\nI suggest you to use std::chrono library to parse your date string. \n<code>\n\
    #include <iostream>\n#include <chrono>\n#include <sstream>", "{\n    if(!date.empty())\n\
    \    {\n        auto dateSplit = date.split('-');\n        if(dateSplit.size()\
    \ == 3)\n        {\n            auto day = std.atoi(dateSplit[1].c_str());\n \
    \           auto month = std.atoi(dateSplit[0].c_str());\n            auto year\
    \ = std.atoi(dateSplit[2].c_str());\n            \n            int daysInMonth\
    \ = std.monthdays(year, month);\n            if(day < 1 || day > daysInMonth)\n\
    \            {\n                return false;\n            }\n        }\n    \
    \    else\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    if(!date.empty())\n    {\n        auto days_count = date.size();\n\
    \        if(days_count < 1 || days_count > 31)\n        {\n            return\
    \ false;\n        }\n        auto months_count = date.size() - days_count;\n \
    \       if(months_count < 1 || months_count > 12)\n        {\n            return\
    \ false;\n        }\n        auto date_parts = date.split('-');\n        if(date_parts.size()\
    \ != 3)\n        {\n            return false;\n        }\n        auto months\
    \ = date_parts[1].to_ulong();\n        if(months < 1 || months > 12)\n       \
    \ {\n            return false;\n        }\n        auto days = date_parts[2].to_ulong();\n\
    \        if(days < 1 || days > 31)\n        {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI appreciate\
    \ your efforts, but I already have this solution and it works. I just want to\
    \ know if there is a way to do this without using any external libraries.\n<|/\
    \ c |>\n<| c |>\nI added a solution without using any external libraries.\n<|/\
    \ c |>\n<| c |>\nI appreciate your efforts, but I already have this solution and\
    \ it works. I just want to know if there is a way to do this without using any\
    \ external libraries.\n<|/ c |>\n<| c |>\nI added a solution without using any\
    \ external libraries.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but I already\
    \ have this solution and it works. I just want to know if there is a way to do\
    \ this without using any external libraries.\n<|/ c |>\n<| a tags=c++,date |>\n\
    I used the code from here to validate a date string in C++:\n<code>", "{\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    if(!date.empty())\n\
    \    {\n        auto dateSplit = split(date, \"-\");\n        if(dateSplit.size()\
    \ == 3)\n        {\n            auto dateParts = split(dateSplit[1], \"-\");\n\
    \            if(dateParts.size() == 3)\n            {\n                auto datePart1\
    \ = std.string::to_number(dateParts[0]);\n                auto datePart2 = std.string::to_number(dateParts[1]);\n\
    \                auto datePart3 = std.string::to_number(dateParts[2]);\n     \
    \           if(datePart1 < 1 || datePart1 > 31 || datePart2 < 1 || datePart2 >\
    \ 31 || datePart3 < 1 || datePart3 > 30)\n                {\n                \
    \    return false;\n                }\n                else if(datePart1 < 4 ||\
    \ datePart1 > 11 || datePart2 < 4 || datePart2 > 11 || datePart3 < 4 || datePart3\
    \ > 11)\n                {\n                    return false;\n              \
    \  }\n                else if(datePart1 < 2 || datePart1 > 12 || datePart2 < 2\
    \ || datePart2 > 12)\n                {\n                    return false;\n \
    \               }\n            }\n        }\n    }\n    return true;\n}", "{\n\
    \    if(!date.empty())\n    {\n        auto dateArray = date.split('-');\n   \
    \     if(dateArray.size() == 3)\n        {\n            int month = std.atoi(dateArray[0].c_str());\n\
    \            int day = std.atoi(dateArray[1].c_str());\n            int year =\
    \ std.atoi(dateArray[2].c_str());\n            if(month < 1 || month > 12)\n \
    \           {\n                return false;\n            }\n            if(day\
    \ < 1 || day > 31)\n            {\n                return false;\n           \
    \ }\n            if(year < 1 || year > 9999)\n            {\n                return\
    \ false;\n            }\n        }\n        else if(dateArray.size() == 2)\n \
    \       {\n            int month = std.atoi(dateArray[0].c_str());\n         \
    \   int day = std.atoi(dateArray[1].c_str());\n            if(month < 1 || month\
    \ > 12)\n            {\n                return false;\n            }\n       \
    \     if(day < 1 || day > 30)\n            {\n                return false;\n\
    \            }\n        }\n        else if(dateArray.size() == 1)\n        {\n\
    \            int month = std.atoi(dateArray[0].c_str());\n            if(month\
    \ < 1 || month > 12)\n            {\n                return false;\n         \
    \   }\n        }\n        else\n        {\n            return false;\n       \
    \ }\n    }\n    return true;\n}", "{\n    if(date == \"\"){\n        return false;\n\
    \    }\n    int day;\n    int month;\n    int year;\n    stringstream ss(date);\n\
    \    ss >> month >> day >> year;\n    \n    if(month < 1 || month > 12){\n   \
    \     return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n\
    \    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    if(month\
    \ == 4 && day > 30){\n        return false;\n    }\n    if(month == 6 && day >\
    \ 30){\n        return false;\n    }\n    if(month == 9 && day > 30){\n      \
    \  return false;\n    }\n    if(month == 11 && day > 30){\n        return false;\n\
    \    }\n    if(month == 1 && day > 29){\n        return false;\n    }\n    if(month\
    \ == 3 && day > 31){\n        return false;\n    }\n    if(month == 5 && day >\
    \ 31){\n        return false;\n    }\n    if(month == 7 && day > 31){\n      \
    \  return false;\n    }\n    if(month == 8 && day > 31){\n        return false;\n\
    \    }\n    if(month == 10 && day > 31){\n        return false;\n    }\n    if(month\
    \ == 12 && day > 31){\n        return false;\n    }\n    return true;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThank you so much! This helped a lot. I am new to programming\
    \ and I really appreciate your help.\n<|/ c |>\n<| c |>\nYou're welcome. Glad\
    \ I could help. If this answer solved your problem, please consider accepting\
    \ it by clicking the check mark to the left of the answer. Thanks!\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <sstream>\n\
    #include <ctime>\n#include <cstdlib>\nusing namespace std;", "{\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "{\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "{\n    if(!date.empty())\n    {\n        int day;\n   \
    \     int month;\n        int year;\n        char separator;\n        \n     \
    \   year = stoi(date.substr(0,4));\n        month = stoi(date.substr(4,2));\n\
    \        day = stoi(date.substr(6,2));\n        separator = date.at(6);\n    \
    \    \n        if(month<1 || month>12)\n        {\n            return false;\n\
    \        }\n        \n        if(day<1 || day>31)\n        {\n            return\
    \ false;\n        }\n        \n        if(month==2 && day>29)\n        {\n   \
    \         return false;\n        }\n        \n        if(month==4 || month==6\
    \ || month==9 || month==11)\n        {\n            if(day>30)\n            {\n\
    \                return false;\n            }\n        }\n        \n        if(month==1)\n\
    \        {\n            if(day>28)\n            {\n                return false;\n\
    \            }\n        }\n        \n        if(separator=='-')\n        {\n \
    \           if(day>31)\n            {\n                return false;\n       \
    \     }\n        }\n        \n        return true;\n    }\n    return false;\n\
    }", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    \n   \
    \ int day;\n    int month;\n    int year;\n    \n    stringstream ss(date);\n\
    \    ss >> month;\n    ss >> day;\n    ss >> year;\n    \n    if(month < 1 ||\
    \ month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n    \
    \    return false;\n    \n    if(day > 29)\n        return false;\n    \n    if(month\
    \ == 2)\n    {\n        if(day > 28)\n            return false;\n    }\n    \n\
    \    return true;\n}", "{\n    \n    int day;\n    int month;\n    int year;\n\
    \    \n    stringstream ss(date);\n    ss >> month;\n    ss >> day;\n    ss >>\
    \ year;\n    \n    bool valid = true;\n    \n    if (month < 1 || month > 12)\
    \ valid = false;\n    if (day < 1 || day > 31) valid = false;\n    if (day > 30)\
    \ valid = false;\n    if (month == 2) valid = (day > 29);\n    \n    if (valid)\
    \ {\n        \n        int daysInMonths[12] = {31, 28, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31};\n        \n        if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n           \
    \ \n            if (day > daysInMonths[month - 1]) valid = false;\n        }\n\
    \        \n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            \n            if (day > daysInMonths[month - 1]) valid = false;\n\
    \        }\n        \n        if (month == 2) {\n            \n            if\
    \ (day > daysInMonths[month - 1]) valid = false;\n        }\n        \n    }\n\
    \    \n    return valid;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your\
    \ answer. I am not allowed to use any library functions. I only need to use if,\
    \ else and switch statements.\n<|/ c |>\n<| c |>\nI updated my answer to include\
    \ a solution that uses only if, else and switch statements.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I tried your code, but I got an error: invalid conversion\
    \ from 'const char*' to 'int' [-fpermissive]\n<|/ c |>\n<| c |>\nI updated my\
    \ answer to include a solution that uses only if, else and switch statements.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I tried your code, but I got an error:\
    \ invalid conversion from 'const char*' to 'int' [-fpermissive]\n<|/ c |>\n<|\
    \ a |>\n<code>\n#include <iostream>\n#include <string>\n#include <sstream>\nusing\
    \ namespace std;", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n\
    \    \n    int day;\n    int month;\n    int year;\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    if(!date.empty())\n\
    \    {\n        int days[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\
    \ };\n        int months[12] = { 1, 3, 5, 7, 8, 10, 12, 4, 6, 9, 11 };\n     \
    \   int years[12] = { 0, 0 };\n        string month;\n        string date;\n \
    \       string year;\n        \n        date = date.replace(\"-\", \"\");\n  \
    \      month = date.replace(\"-\", \"\");\n        year = date.replace(\"-\",\
    \ \"\");\n        \n        for(int i = 0; i < 12; i++)\n        {\n         \
    \   if(months[i] <= month && months[i] > 0)\n            {\n                if(days[i]\
    \ <= month && days[i] > 0)\n                {\n                    if(years[i]\
    \ <= year && years[i] > 0)\n                    {\n                        return\
    \ true;\n                    }\n                    else\n                   \
    \ {\n                        return false;\n                    }\n          \
    \      }\n                else\n                {\n                    return\
    \ false;\n                }\n            }\n            else\n            {\n\
    \                return false;\n            }\n        }\n    }\n    else\n  \
    \  {\n        return false;\n    }\n}\n</code>\n<|/ a tags=c++,date |>\n<| c |>\n\
    This code is not working with dates like \"01-01-2000\"\n<|/ c |>\n<| c |>\nThis\
    \ code is not working with dates like \"01-01-2000\"\n<|/ c |>\n<| c |>\nThis\
    \ code is not working with dates like \"01-01-2000\"\n<|/ c |>\n<| c |>\nThis\
    \ code is not working with dates like \"01-01-2000\"\n<|/ c |>\n<| c |>\nThis\
    \ code is not working with dates like \"01-01-2000\"\n<|/ c |>\n<| a tags=c++,date\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <sstream>\n#include\
    \ <vector>\n#include <algorithm>\n#include <ctime>\n#include <cctype>", "{\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    \n    string months[12]\
    \ = {\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"\
    };\n    string days[12] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"10\", \"11\", \"12\"};\n    string years[12] = {\"2000\", \"2001\"\
    , \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\"\
    , \"2010\", \"2011\", \"2012\"};\n    \n    int month = 0;\n    int day = 0;\n\
    \    int year = 0;\n    \n    for(int i = 0; i < date.size(); i++)\n    {\n  \
    \      if(date[i] == '-')\n        {\n            month++;\n            day =\
    \ 0;\n            year = 0;\n        }\n        else if(date[i] == '/')\n    \
    \    {\n            month++;\n            day = 0;\n            year = 0;\n  \
    \      }\n        else if(date[i] == '-')\n        {\n            month++;\n \
    \           day = 0;\n            year = 0;\n        }\n        else if(date[i]\
    \ == '/')\n        {\n            month++;\n            day = 0;\n           \
    \ year = 0;\n        }\n        else if(date[i] == '-')\n        {\n         \
    \   month++;\n            day = 0;\n            year = 0;\n        }\n       \
    \ else if(date[i] == '/')\n        {\n            month++;\n            day =\
    \ 0;\n            year = 0;\n        }\n        else if(date[i] == '-')\n    \
    \    {\n            month++;\n            day = 0;\n            year = 0;\n  \
    \      }\n        else if(date[i] == '/')\n        {\n            month++;\n \
    \           day = 0;\n            year = 0;\n        }\n        else if(date[i]\
    \ == '-')\n        {\n            month++;\n            day = 0;\n           \
    \ year = 0;\n        }\n        else if(date[i] == '/')\n        {\n         \
    \   month++;\n            day = 0;\n            year = 0;\n        }\n       \
    \ else if(date[i] == '-')\n        {\n            month++;\n            day =\
    \ 0;\n            year = 0;\n        }\n        else if(date[i] == '/')\n    \
    \    {\n            month++;\n            day = 0;\n            year = 0;\n  \
    \      }\n        else if(date[i] == '-')\n        {\n            month++;\n \
    \           day = 0;\n            year = 0;\n        }\n        else if(date[i]\
    \ == '/')\n        {\n            month++;\n            day = 0;\n           \
    \ year = 0;\n        }\n        else if(date[i] == '-')\n        {\n         \
    \   month++;\n            day = 0;\n            year = 0;\n        }\n       \
    \ else if(date[i] == '/')\n        {\n            month++;\n            day =\
    \ 0;\n            year = 0;\n        }\n        else if(date[i] == '-')\n    \
    \    {\n            month++;\n            day = 0;\n            year = 0;\n  \
    \      }\n        else if(date[i] == '/')", "{\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "{\n    if(!date.empty())\n    {\n        auto days_count\
    \ = days_in_month(month(date), year(date));\n        if(days_count < 1 || days_count\
    \ > 31)\n            return false;\n        auto days_count_2 = days_in_month(month(date),\
    \ year(date));\n        if(days_count_2 < 1 || days_count_2 > 30)\n          \
    \  return false;\n        auto days_count_3 = days_in_month(month(date), year(date));\n\
    \        if(days_count_3 < 1 || days_count_3 > 29)\n            return false;\n\
    \        auto days_count_4 = days_in_month(month(date), year(date));\n       \
    \ if(days_count_4 < 1 || days_count_4 > 28)\n            return false;\n    }\n\
    \    return true;\n}\n</code>\n<|/ a tags=c++,c++11 |>\n<| c |>\nThis does not\
    \ answer the question. OP wants to know if there is a way to check if a date string\
    \ is valid without using any library functions. Your answer uses library functions\
    \ to do that.\n<|/ c |>\n<| c |>\nI agree with you. My answer was to show how\
    \ you can do that without using any library functions. But I agree with you that\
    \ my answer is not the best way to do that. I'll edit my answer with another solution\n\
    <|/ c |>\n<| c |>\nI edited my answer with another solution. Hope it helps :)\n\
    <|/ c |>\n<| c |>\nThis does not answer the question. OP wants to know if there\
    \ is a way to check if a date string is valid without using any library functions.\
    \ Your answer uses library functions to do that.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer with another solution. Hope it helps :)\n<|/ c |>\n<| a tags=c++,c++11\
    \ |>\nThe best way is to use Boost Date Time Library. \n<code>\n#include <iostream>\n\
    #include <boost/date_time/posix_time/posix_time.hpp>\n#include <boost/date_time/local_time/local_time.hpp>\n\
    #include <boost/date_time/local_time/local_time_io.hpp>\n#include <boost/date_time/local_time/conversion.hpp>\n\
    #include <boost/date_time/period.hpp>\n#include <boost/date_time/period_parser.hpp>\n\
    #include <boost/date_time/special_values_parser.hpp>\n#include <boost/date_time/time_zone.hpp>\n\
    #include <boost/date_time/time_zone_base.hpp>\n#include <boost/date_time/time_par",
  "{\n    if(!date.empty())\n    {\n        auto days_count = date.size();\n     \
    \   if(days_count < 1 || days_count > 31)\n            return false;\n       \
    \ auto months_count = days_count / 30;\n        if(months_count < 1 || months_count\
    \ > 12)\n            return false;\n        auto year = date.substr(4,4);\n  \
    \      if(year < \"01\" || year > \"12\")\n            return false;\n    }\n\
    \    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to know if there is a library function which can do that\
    \ for him. He doesn't want to write his own function.\n<|/ c |>\n<| c |>\nI didn't\
    \ know that there is a library function which can do that for him. Thanks for\
    \ pointing out.\n<|/ c |>\n<| a tags=c++,date |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n\
    #include <ctime>\n#include <cstdlib>\n#include <cctype>\n#include <cassert>",
  "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    \n    string\
    \ months[12] = {\"January\", \"March\", \"May\", \"July\", \"August\", \"October\"\
    , \"December\"};\n    string days[12] = {\"01\", \"02\", \"03\", \"04\", \"05\"\
    , \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n    string years[12]\
    \ = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"\
    2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"};\n    \n    int daysInMonth[12]\
    \ = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n    int daysInYear[12]\
    \ = { 365, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 };\n    \n    int\
    \ month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n \
    \   int year = stoi(date.substr(6, 4));\n    \n    if (date.empty())\n       \
    \ return false;\n    \n    if (month < 1 || month > 12)\n        return false;\n\
    \    \n    if (day < 1 || day > daysInMonth[month])\n        return false;\n \
    \   \n    if (year < 1 || year > years[month])\n        return false;\n    \n\
    \    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer.\
    \ I am not allowed to use any libraries. I only have to write my own functions.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that does not use\
    \ any libraries.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not allowed\
    \ to use any libraries. I only have to write my own functions.\n<|/ c |>\n<| c\
    \ |>\nI edited my answer to include a solution that does not use any libraries.\n\
    <|/ c |>\n<| a tags=c++ |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <ctime>\nusing namespace std;", "{\n    if(!date.empty())\n    {\n        auto\
    \ date_split = date.split('-');\n        if(date_split.size() == 3)\n        {\n\
    \            auto year = date_split[2];\n            auto month = date_split[0];\n\
    \            auto day = date_split[1];\n            \n            auto month_days[12]\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            \n        \
    \    auto month_days_count = month_days[month];\n            \n            if(day\
    \ < 1 || day > month_days_count)\n            {\n                return false;\n\
    \            }\n            \n            if(month < 1 || month > 12)\n      \
    \      {\n                return false;\n            }\n            \n       \
    \     if(year < 1900)\n            {\n                return false;\n        \
    \    }\n        }\n    }\n    \n    return true;\n}", "{\n    stringstream ss(date);\n\
    \    string month;\n    string day;\n    string year;\n    ss >> month >> day\
    \ >> year;\n    int months = std.math.remainder(month.size()-1, 12);\n    int\
    \ days = std.math.remainder(day.size()-1, 30);\n    int years = std.math.remainder(year.size()-1,\
    \ 12);\n    if (months == 0 && days == 0 && years == 0) return true;\n    if (months\
    \ == 0 && days == 0 && years == 0) return false;\n    if (months == 0 && days\
    \ == 0) return false;\n    if (months == 0 && years == 0) return false;\n    if\
    \ (months == 0 && years == 0) return false;\n    if (months == 0 && years == 0)\
    \ return false;\n    if (months == 0 && years == 0) return false;\n    if (months\
    \ == 0 && years == 0) return false;\n    if (months == 0 && years == 0) return\
    \ false;\n    if (months == 0 && years == 0) return false;\n    if (months ==\
    \ 0 && years == 0) return false;\n    if (months == 0 && years == 0) return false;\n\
    \    if (months == 0 && years == 0) return false;\n    if (months == 0 && years\
    \ == 0) return false;\n    if (months == 0 && years == 0) return false;\n    if\
    \ (months == 0 && years == 0) return false;\n    if (months == 0 && years == 0)\
    \ return false;\n    if (months == 0 && years == 0) return false;\n    if (months\
    \ == 0 && years == 0) return false;\n    if (months == 0 && years == 0) return\
    \ false;\n    if (months == 0 && years == 0) return false;\n    if (months ==\
    \ 0 && years == 0) return false;\n    if (months == 0 && years == 0) return false;\n\
    \    if (months == 0 && years == 0) return false;\n    if (months == 0 && years\
    \ == 0) return false;\n    if (months == 0 && years == 0) return false;\n    if\
    \ (months == 0 && years == 0) return false;\n    if (months == 0 && years == 0)\
    \ return false;\n    if (months == 0 && years == 0) return false;\n    if (months\
    \ == 0 && years == 0) return false;\n    if (months == 0 && years == 0) return\
    \ false;\n    if (months == 0 && years == 0) return false;\n    if (months ==\
    \ 0 && years == 0) return false;\n    if (months == 0 && years == 0) return false;\n\
    \    if (months == 0 && years == 0) return false;\n    if (months == 0 && years\
    \ == 0) return false;\n    if (months == 0 && years == 0) return false;\n    if\
    \ (months == 0 && years == 0) return false;\n    if (months == 0 && years == 0)\
    \ return false;\n    if (months == 0 && years == 0) return false;\n    if (months\
    \ == 0 && years == 0) return false;\n    if (months == 0 && years == 0) return\
    \ false;\n    if (months == 0 && years == 0) return false;", "{\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "{\n    \n    string months[12] = {\"\
    January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"\
    August\", \"September\", \"October\", \"November\", \"December\"};\n    \n   \
    \ int days[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n    \n \
    \   int months[12] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n\
    \    \n    int years[12] = { 0, 31, 12, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\
    \ };\n    \n    string date_str = date;\n    \n    int day;\n    int month;\n\
    \    int year;\n    \n    bool valid = true;\n    \n    for(int i = 0; i < date_str.size();\
    \ i++)\n    {\n        if(date_str[i] != ' ')\n        {\n            valid =\
    \ false;\n        }\n    }\n    \n    if(!valid)\n    {\n        return false;\n\
    \    }\n    \n    for(int i = 0; i < date_str.size(); i++)\n    {\n        if(date_str[i]\
    \ != ' ')\n        {\n            valid = false;\n        }\n    }\n    \n   \
    \ for(int i = 0; i < date_str.size(); i++)\n    {\n        if(date_str[i] != '\
    \ ')\n        {\n            valid = false;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < date_str.size(); i++)\n    {\n        if(date_str[i] != ' ')\n  \
    \      {\n            valid = false;\n        }\n    }\n    \n    for(int i =\
    \ 0; i < date_str.size(); i++)\n    {\n        if(date_str[i] != ' ')\n      \
    \  {\n            valid = false;\n        }\n    }\n    \n    for(int i = 0; i\
    \ < date_str.size(); i++)\n    {\n        if(date_str[i] != ' ')\n        {\n\
    \            valid = false;\n        }\n    }\n    \n    for(int i = 0; i < date_str.size();\
    \ i++)\n    {\n        if(date_str[i] != ' ')\n        {\n            valid =\
    \ false;\n        }\n    }\n    \n    for(int i = 0; i < date_str.size(); i++)\n\
    \    {\n        if(date_str[i] != ' ')\n        {\n            valid = false;\n\
    \        }\n    }\n    \n    for(int i = 0; i < date_str.size(); i++)\n    {\n\
    \        if(date_str[i] != ' ')\n        {\n            valid = false;\n     \
    \   }\n    }\n    \n    for(int i = 0; i < date_str.size(); i++)\n    {\n    \
    \    if(date_str[i] != ' ')\n        {\n            valid = false;\n        }\n\
    \    }\n    \n    for(int i = 0; i < date_str.size(); i++)\n    {\n        if(date_str[i]\
    \ != ' ')\n        {\n            valid = false;\n        }\n    }\n    \n   \
    \ for(int i = 0; i < date_str.size(); i++)\n    {\n        if(date_str[i] != '\
    \ ')\n        {\n            valid = false;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < date_str.size(); i++)\n    {\n        if(date_str[i] != ' ')\n  \
    \      {\n            valid = false;\n        }\n", "{\n    if(!date.empty())\n\
    \    {\n        auto daysInMonth = months[month];\n        auto daysInYear = daysInMonth[year];\n\
    \        auto daysInYear30 = daysInYear[month];\n        auto daysInYear29 = daysInYear30[month];\n\
    \        auto daysInYear28 = daysInYear29[month];\n        auto daysInYear27 =\
    \ daysInYear28[month];\n        auto daysInYear26 = daysInYear27[month];\n   \
    \     auto daysInYear25 = daysInYear26[month];\n        auto daysInYear24 = daysInYear25[month];\n\
    \        auto daysInYear23 = daysInYear24[month];\n        auto daysInYear22 =\
    \ daysInYear23[month];\n        auto daysInYear21 = daysInYear22[month];\n   \
    \     auto daysInYear20 = daysInYear21[month];\n        auto daysInYear19 = daysInYear20[month];\n\
    \        auto daysInYear18 = daysInYear19[month];\n        auto daysInYear17 =\
    \ daysInYear18[month];\n        auto daysInYear16 = daysInYear17[month];\n   \
    \     auto daysInYear15 = daysInYear16[month];\n        auto daysInYear14 = daysInYear15[month];\n\
    \        auto daysInYear13 = daysInYear14[month];\n        auto daysInYear12 =\
    \ daysInYear13[month];\n        auto daysInYear11 = daysInYear12[month];\n   \
    \     auto daysInYear10 = daysInYear11[month];\n        auto daysInYear9 = daysInYear10[month];\n\
    \        auto daysInYear8 = daysInYear9[month];\n        auto daysInYear7 = daysInYear8[month];\n\
    \        auto daysInYear6 = daysInYear7[month];\n        auto daysInYear5 = daysInYear6[month];\n\
    \        auto daysInYear4 = daysInYear5[month];\n        auto daysInYear3 = daysInYear4[month];\n\
    \        auto daysInYear2 = daysInYear3[month];\n        auto daysInYear1 = daysInYear2[month];\n\
    \        auto daysInYear0 = daysInYear1[month];\n        \n        if(daysInYear\
    \ < 1 || daysInYear > 31)\n        {\n            return false;\n        }\n \
    \       \n        if(daysInYear30 < 1 || ", "{\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "{\n    if(!date.empty())\n    {\n        auto dateSplit\
    \ = date.split('-');\n        auto dateDays = dateSplit[0];\n        auto dateMonths\
    \ = dateSplit[1];\n        auto dateYears = dateSplit[2];\n        \n        if(dateDays.empty()\
    \ || dateMonths.empty() || dateYears.empty())\n        {\n            return false;\n\
    \        }\n        \n        auto dateDaysValue = std.string::to_number(dateDays);\n\
    \        auto dateMonthsValue = std.string::to_number(dateMonths);\n        auto\
    \ dateYearsValue = std.string::to_number(dateYears);\n        \n        if(dateDaysValue\
    \ < 1 || dateDaysValue > 31)\n        {\n            return false;\n        }\n\
    \        \n        if(dateMonthsValue < 1 || dateMonthsValue > 12)\n        {\n\
    \            return false;\n        }\n        \n        if(dateYearsValue < 1\
    \ || dateYearsValue > std.string::to_number(dateYears))\n        {\n         \
    \   return false;\n        }\n        \n        if(dateDaysValue == dateMonthsValue\
    \ && dateDaysValue == dateYearsValue)\n        {\n            return true;\n \
    \       }\n        \n        return false;\n    }\n    \n    return false;\n}",
  "{\n    string::iterator it;\n    bool valid = false;\n    \n    for(it = date.begin();\
    \ it != date.end(); ++it)\n    {\n        if(*it == '-')\n        {\n        \
    \    ++it;\n        }\n        else if(*it < '0' || *it > '9')\n        {\n  \
    \          valid = false;\n            break;\n        }\n        else\n     \
    \   {\n            int num = (int)*it - '0';\n            if(num < 1 || num >\
    \ 31)\n            {\n                valid = false;\n                break;\n\
    \            }\n            else if(num < 4 || num > 11)\n            {\n    \
    \            valid = false;\n                break;\n            }\n         \
    \   else if(num < 2 || num > 29)\n            {\n                valid = false;\n\
    \                break;\n            }\n        }\n    }\n    \n    if(valid)\n\
    \    {\n        vector<string> dateParts = split(date, \"-\");\n        if(dateParts.size()\
    \ == 3)\n        {\n            int month = std.atoi(dateParts[0].c_str());\n\
    \            int day = std.atoi(dateParts[1].c_str());\n            int year =\
    \ std.atoi(dateParts[2].c_str());\n            valid = (month > 0 && month < 12)\
    \ && (day > 0 && day < 31) && (year > 0 && year < 100);\n        }\n        else\
    \ if(dateParts.size() == 2)\n        {\n            int month = std.atoi(dateParts[0].c_str());\n\
    \            int day = std.atoi(dateParts[1].c_str());\n            valid = (month\
    \ > 0 && month < 12) && (day > 0 && day < 30);\n        }\n    }\n    \n    return\
    \ valid;\n}", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n   \
    \ if(!date.empty())\n    {\n        int day;\n        int month;\n        int\
    \ year;\n        char sep;\n        string date_str = date;\n        \n      \
    \  sep = date_str.find_first_of(\"-\");\n        month = std.atoi(date_str.substr(0,sep));\n\
    \        date_str = date_str.substr(sep+1);\n        sep = date_str.find_first_of(\"\
    -\");\n        day = std.atoi(date_str.substr(0,sep));\n        date_str = date_str.substr(sep+1);\n\
    \        sep = date_str.find_first_of(\"-\");\n        year = std.atoi(date_str.substr(0,sep));\n\
    \        date_str = date_str.substr(sep+1);\n        \n        if(month<1 || month>12\
    \ || day<1 || day>31 || (month==2 && day>29))\n        {\n            return false;\n\
    \        }\n        \n        if(month==2 && day>29)\n        {\n            return\
    \ false;\n        }\n        \n        if(month==4 || month==6 || month==9 ||\
    \ month==11)\n        {\n            return day>30;\n        }\n        \n   \
    \     if(month==1)\n        {\n            return day>29;\n        }\n       \
    \ \n        return true;\n    }\n    return false;\n}", "{\n    \n    int day;\n\
    \    int month;\n    int year;\n    \n    char months[12];\n    \n    months[0]\
    \ = \"01\";\n    months[1] = \"03\";\n    months[2] = \"05\";\n    months[3] =\
    \ \"07\";\n    months[4] = \"08\";\n    months[5] = \"10\";\n    months[6] = \"\
    12\";\n    months[7] = \"04\";\n    months[8] = \"06\";\n    months[9] = \"09\"\
    ;\n    months[10] = \"11\";\n    months[11] = \"02\";\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "{\n    \n    string months[12]\
    \ = {\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"\
    };\n    string days[12] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"\
    07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n    string years[12] = {\"2000\"\
    , \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\"\
    , \"2009\", \"2010\", \"2011\", \"2012\"};\n    \n    int daysInMonth[12] = {31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    \n    int month = 0;\n   \
    \ int day = 0;\n    int year = 0;\n    \n    for(int i = 0; i < date.size(); i++)\n\
    \    {\n        if(date[i] == '-')\n        {\n            month--;\n        }\n\
    \        else if(date[i] == '/')\n        {\n            month++;\n        }\n\
    \        else if(date[i] == '-')\n        {\n            day--;\n        }\n \
    \       else if(date[i] == '/')\n        {\n            day++;\n        }\n  \
    \      else if(date[i] == '-')\n        {\n            year--;\n        }\n  \
    \      else if(date[i] == '/')\n        {\n            year++;\n        }\n  \
    \  }\n    \n    if(month < 1 || month > 12)\n    {\n        return false;\n  \
    \  }\n    \n    if(day < 1 || day > daysInMonth[month])\n    {\n        return\
    \ false;\n    }\n    \n    if(year < 1 || year > 12)\n    {\n        return false;\n\
    \    }\n    \n    return true;\n}", "{\n    string months[12] = {\"January\",\
    \ \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"};\n    string\
    \ days[12] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    10\", \"11\", \"12\"};\n    string years[12] = {\"2000\", \"2001\", \"2002\",\
    \ \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\"\
    , \"2011\", \"2012\"};\n    \n    int month;\n    int day;\n    int year;\n  \
    \  \n    month = stoi(date.substr(0, 2));\n    day = stoi(date.substr(3, 2));\n\
    \    year = stoi(date.substr(6, 4));\n    \n    if (month < 1 || month > 12)\n\
    \    {\n        return false;\n    }\n    \n    if (day < 1 || day > 31)\n   \
    \ {\n        return false;\n    }\n    \n    if (month == 2 && day > 29)\n   \
    \ {\n        return false;\n    }\n    \n    if (month == 2 && day > 28)\n   \
    \ {\n        return false;\n    }\n    \n    if (day < 1 || day > 30)\n    {\n\
    \        return false;\n    }\n    \n    if (month < 1 || month > 12)\n    {\n\
    \        return false;\n    }\n    \n    if (day < 1 || day > 31)\n    {\n   \
    \     return false;\n    }\n    \n    if (month == 2 && day > 29)\n    {\n   \
    \     return false;\n    }\n    \n    if (month == 2 && day > 28)\n    {\n   \
    \     return false;\n    }\n    \n    if (day < 1 || day > 30)\n    {\n      \
    \  return false;\n    }\n    \n    if (month < 1 || month > 12)\n    {\n     \
    \   return false;\n    }\n    \n    if (day < 1 || day > 31)\n    {\n        return\
    \ false;\n    }\n    \n    if (month == 2 && day > 29)\n    {\n        return\
    \ false;\n    }\n    \n    if (month == 2 && day > 28)\n    {\n        return\
    \ false;\n    }\n    \n    if (day < 1 || day > 30)\n    {\n        return false;\n\
    \    }\n    \n    if (month < 1 || month > 12)\n    {\n        return false;\n\
    \    }\n    \n    if (day < 1 || day > 31)\n    {\n        return false;\n   \
    \ }\n    \n    if (month == 2 && day > 29)\n    {\n        return false;\n   \
    \ }\n    \n    if (month == 2 && day > 28)\n    {\n        return false;\n   \
    \ }\n    \n    if (day < 1 || day > 30)\n    {\n        return false;\n    }\n\
    \    \n    if (month < 1 || month > 12)\n    {\n        return false;\n    }\n\
    \    \n    if (day < 1 || day > 31)\n    {\n        return false;\n    }\n   \
    \ \n    if (month == 2 && day > 29)\n    {\n        return false;", "{\n    string\
    \ months[12] = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"\
    , \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\
    };\n    string days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"\
    18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\",\
    \ \"28\", \"29\", \"30\", \"31\"};\n    string years[12] = {\"2000\", \"2001\"\
    , \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\"\
    , \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\"\
    , \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\"\
    , \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\"};\n    string month;\n\
    \    string day;\n    string year;\n    \n    size_t pos = 0;\n    \n    pos =\
    \ date.find(\"-\");\n    month = date.substr(0, pos);\n    day = date.substr(pos\
    \ + 1, 2);\n    pos = date.find(\"/\");\n    year = date.substr(pos + 1, 4);\n\
    \    \n    pos = month.find(\"0\");\n    if (pos != string::npos)\n    {\n   \
    \     month = month.substr(0, pos);\n    }\n    pos = month.find(\"1\");\n   \
    \ if (pos != string::npos)\n    {\n        month = month.substr(0, pos);\n   \
    \ }\n    pos = month.find(\"2\");\n    if (pos != string::npos)\n    {\n     \
    \   month = month.substr(0, pos);\n    }\n    pos = month.find(\"3\");\n    if\
    \ (pos != string::npos)\n    {\n        month = month.substr(0, pos);\n    }\n\
    \    pos = month.find(\"4\");\n    if (pos != string::npos)\n    {\n        month\
    \ = month.substr(0, pos);\n    }\n    pos = month.find(\"5\");\n    if (pos !=\
    \ string::npos)\n    {\n        month = month.substr(0, pos);\n    }\n    pos\
    \ = month.find(\"6\");\n    if (pos != string::npos)\n    {\n        month = month.substr(0,\
    \ pos);\n    }\n    pos = month.find(\"7\");\n    if (pos != string::npos)\n \
    \   {\n        month = month.substr(0, pos);\n    }\n    pos = month.find(\"8\"\
    );\n    if (pos != string::npos)\n    {\n        month = month.substr(0, pos);\n\
    \    }\n    pos = month.find(\""]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
