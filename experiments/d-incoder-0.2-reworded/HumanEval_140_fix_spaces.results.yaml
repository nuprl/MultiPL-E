language: d
name: HumanEval_140_fix_spaces
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            for(int j\
    \ = i + 1; j < result.length(); j++)\n            {\n                if(result[j]\
    \ == ' ')\n                {\n                    result[j] = '_';\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsgygbqnx.d(22): Error: no property `length` for type `string`\n/tmp/tmpsgygbqnx.d(26):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpsgygbqnx.d(29):
    Error: no property `length` for type `string`\n/tmp/tmpsgygbqnx.d(33): Error:
    no property `length` for type `string`\n/tmp/tmpsgygbqnx.d(37): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpsgygbqnx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxi_uij1z.d(27): Error: slice `result` is not mutable\n/tmp/tmpxi_uij1z.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpxi_uij1z.d(39): Error: slice `result` is not mutable\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxi_uij1z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcjm187m3.d(23): Error: no property `length` for type `string`\n/tmp/tmpcjm187m3.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpcjm187m3.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpcjm187m3.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpcjm187m3.d(37): Error:
    no property `length` for type `string`\n/tmp/tmpcjm187m3.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcjm187m3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm7_6za45.d(23): Error: no property `length` for type `string`\n/tmp/tmpm7_6za45.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpm7_6za45.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpm7_6za45.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpm7_6za45.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpm7_6za45.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i =\
    \ 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n   \
    \         result += text[i];\n        }\n        else\n        {\n           \
    \ result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.size();\
    \ ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp77xaci0_.d(22): Error: no property `size` for type `string`\n/tmp/tmp77xaci0_.d(26):
    Error: slice `result` is not mutable\n/tmp/tmp77xaci0_.d(30): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp77xaci0_.d(34):
    Error: no property `size` for type `string`\n/tmp/tmp77xaci0_.d(38): Error: slice
    `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp77xaci0_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy71glc0w.d(23): Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpy71glc0w.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpy71glc0w.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(37): Error: no
    property `size` for type `string`\n/tmp/tmpy71glc0w.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy71glc0w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += \"_\";\n        }\n        else\n        {\n          \
    \  result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq_zhqbzy.d(23): Error: no property `length` for type `string`\n/tmp/tmpq_zhqbzy.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpq_zhqbzy.d(31): Error: slice `result`
    is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_zhqbzy.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + '_';\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + '-';\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpghz_v7cp.d(27): Error: slice `result` is not mutable\n/tmp/tmpghz_v7cp.d(31):
    Error: incompatible types for `(result) += (cast(int)text[cast(ulong)i] + 95)`:
    `string` and `int`\n/tmp/tmpghz_v7cp.d(35): Error: no property `length` for type
    `string`\n/tmp/tmpghz_v7cp.d(37): Error: no property `length` for type `string`\n/tmp/tmpghz_v7cp.d(39):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpghz_v7cp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpknt4srdi.d(27): Error: slice `result` is not mutable\n/tmp/tmpknt4srdi.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpknt4srdi.d(35): Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(37):
    Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(39): Error:
    incompatible types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and
    `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpknt4srdi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n\
    \            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            text = temp;\n        }\n    }\n    \n    for(int i\
    \ = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            string temp = text;\n            temp = temp.replace(text[i], \"\
    _\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n\
    \        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7o7l9gc5.d(21): Error: no property `length` for type `string`\n/tmp/tmp7o7l9gc5.d(26):
    Error: no property `replace` for type `string`\n/tmp/tmp7o7l9gc5.d(27): Error:
    no property `replace` for type `string`\n/tmp/tmp7o7l9gc5.d(32): Error: no property
    `length` for type `string`\n/tmp/tmp7o7l9gc5.d(37): Error: no property `replace`
    for type `string`\n/tmp/tmp7o7l9gc5.d(38): Error: no property `replace` for type
    `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7o7l9gc5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    \n  \
    \  for(int i = 0; i < len; i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            string s = text.substr(0, i);\n            string t = text.substr(i\
    \ + 1, len - i - 1);\n            \n            if(s.length() > 2)\n         \
    \   {\n                string s2 = s.substr(0, s.length() - 2);\n            \
    \    string t2 = t.substr(0, t.length() - 2);\n                \n            \
    \    string result = s2 + t2;\n                \n                text = result;\n\
    \            }\n            else\n            {\n                string result\
    \ = s + \"-\" + t;\n                \n                text = result;\n       \
    \     }\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8y4_56gi.d(21): Error: no property `length` for type `string`\n/tmp/tmp8y4_56gi.d(27):
    Error: no property `substr` for type `string`\n/tmp/tmp8y4_56gi.d(28): Error:
    no property `substr` for type `string`\n/tmp/tmp8y4_56gi.d(30): Error: no property
    `length` for type `string`\n/tmp/tmp8y4_56gi.d(32): Error: no property `substr`
    for type `string`\n/tmp/tmp8y4_56gi.d(33): Error: no property `substr` for type
    `string`\n/tmp/tmp8y4_56gi.d(35): Error: invalid array operation `s2 + t2` (possible
    missing [])\n/tmp/tmp8y4_56gi.d(41): Error: invalid array operation `s + "-"`
    (possible missing [])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8y4_56gi.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    size_t\
    \ i;\n    \n    for(i = 0; i < len; ++i)\n    {\n        if(text[i] == ' ')\n\
    \        {\n            if(i + 1 < len && text[i + 1] == ' ')\n            {\n\
    \                text[i] = '_';\n                ++i;\n            }\n       \
    \     else\n            {\n                text[i] = '_';\n            }\n   \
    \     }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate =\
    \ fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6n9fdv3h.d(21): Error: no property `length` for type `string`\n/tmp/tmp6n9fdv3h.d(30):
    Error: cannot modify `immutable` expression `text[i]`\n/tmp/tmp6n9fdv3h.d(35):
    Error: cannot modify `immutable` expression `text[i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp6n9fdv3h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1wd4v9v1.d(23): Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp1wd4v9v1.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp1wd4v9v1.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(37): Error:
    no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wd4v9v1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    size_t pos\
    \ = 0;\n    size_t len = result.size();\n    \n    while (pos < len) {\n     \
    \   char c = result[pos];\n        \n        if (c == ' ') {\n            size_t\
    \ next = pos+1;\n            while (next < len && result[next] == ' ') {\n   \
    \             next++;\n            }\n            if (next < len) {\n        \
    \        result[pos] = '_';\n                pos = next;\n            } else {\n\
    \                result[pos] = '-';\n                pos++;\n            }\n \
    \       } else {\n            pos++;\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz970dcis.d(23): Error: no property `size` for type `string`\n/tmp/tmpz970dcis.d(34):
    Error: cannot modify `immutable` expression `result[pos]`\n/tmp/tmpz970dcis.d(37):
    Error: cannot modify `immutable` expression `result[pos]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpz970dcis.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0efiau0v.d(23): Error: no property `size` for type `string`\n/tmp/tmp0efiau0v.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp0efiau0v.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp0efiau0v.d(35):
    Error: no property `size` for type `string`\n/tmp/tmp0efiau0v.d(39): Error: slice
    `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0efiau0v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    size_t\
    \ i;\n    string result = \"\";\n    \n    for (i = 0; i < len; ++i)\n    {\n\
    \        if (text[i] == ' ')\n        {\n            result += text[i];\n    \
    \    }\n        else if (text[i] == ' ' && text[i+1] == ' ')\n        {\n    \
    \        result += \"-\";\n        }\n        else\n        {\n            result\
    \ += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsargpzl5.d(21): Error: no property `length` for type `string`\n/tmp/tmpsargpzl5.d(29):
    Error: slice `result` is not mutable\n/tmp/tmpsargpzl5.d(33): Error: slice `result`
    is not mutable\n/tmp/tmpsargpzl5.d(37): Error: slice `result` is not mutable\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsargpzl5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n      \
    \      result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppn26n7vt.d(23): Error: no property `length` for type `string`\n/tmp/tmppn26n7vt.d(27):
    Error: slice `result` is not mutable\n/tmp/tmppn26n7vt.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmppn26n7vt.d(35):
    Error: no property `length` for type `string`\n/tmp/tmppn26n7vt.d(39): Error:
    slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppn26n7vt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length; ++i)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            string replacement\
    \ = string(\"_\");\n            for(int j = i; j < text.length; ++j)\n       \
    \     {\n                if(text[j] == ' ')\n                {\n             \
    \       replacement = string(\"_\") + replacement;\n                }\n      \
    \          else\n                {\n                    break;\n             \
    \   }\n            }\n            text = replace(text, i, i + 1, replacement);\n\
    \            i += replacement.length() - 1;\n        }\n    }\n    return text;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3g99jq52.d(25): Error: function expected before `()`, not `string`
    of type `string`\n/tmp/tmp3g99jq52.d(30): Error: function expected before `()`,
    not `string` of type `string`\n/tmp/tmp3g99jq52.d(37): Error: undefined identifier
    `replace`\n/tmp/tmp3g99jq52.d(38): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3g99jq52.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n      \
    \      result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6jybvwx_.d(23): Error: no property `length` for type `string`\n/tmp/tmp6jybvwx_.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp6jybvwx_.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp6jybvwx_.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp6jybvwx_.d(39): Error:
    slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6jybvwx_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1wd4v9v1.d(23): Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp1wd4v9v1.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp1wd4v9v1.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(37): Error:
    no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wd4v9v1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpknt4srdi.d(27): Error: slice `result` is not mutable\n/tmp/tmpknt4srdi.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpknt4srdi.d(35): Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(37):
    Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(39): Error:
    incompatible types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and
    `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpknt4srdi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpknt4srdi.d(27): Error: slice `result` is not mutable\n/tmp/tmpknt4srdi.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpknt4srdi.d(35): Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(37):
    Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(39): Error:
    incompatible types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and
    `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpknt4srdi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int\
    \ i = 0; i < text.length(); i++) {\n        char c = text[i];\n        \n    \
    \    if (c == ' ') {\n            result += c;\n        }\n        else if (c\
    \ != ' ' && c != '\\t') {\n            result += c;\n        }\n    }\n    \n\
    \    if (result.length() > 2) {\n        string temp = \"\";\n        \n     \
    \   for (int i = 0; i < result.length() - 2; i++) {\n            temp += \"_\"\
    ;\n        }\n        \n        result += temp;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwmc2efr7.d(23): Error: no property `length` for type `string`\n/tmp/tmpwmc2efr7.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpwmc2efr7.d(30): Error: slice `result`
    is not mutable\n/tmp/tmpwmc2efr7.d(34): Error: no property `length` for type `string`\n/tmp/tmpwmc2efr7.d(37):
    Error: no property `length` for type `string`\n/tmp/tmpwmc2efr7.d(38): Error:
    slice `temp` is not mutable\n/tmp/tmpwmc2efr7.d(41): Error: slice `result` is
    not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwmc2efr7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            for(int j\
    \ = i + 1; j < result.length(); j++)\n            {\n                if(result[j]\
    \ == ' ')\n                {\n                    result[j] = '_';\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsgygbqnx.d(22): Error: no property `length` for type `string`\n/tmp/tmpsgygbqnx.d(26):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpsgygbqnx.d(29):
    Error: no property `length` for type `string`\n/tmp/tmpsgygbqnx.d(33): Error:
    no property `length` for type `string`\n/tmp/tmpsgygbqnx.d(37): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpsgygbqnx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int\
    \ i = 0; i < text.length(); i++)\n    {\n        if (text[i] == ' ')\n       \
    \ {\n            result += text[i];\n        }\n        else\n        {\n    \
    \        result += text[i] + \"_\";\n        }\n    }\n    \n    if (result.length()\
    \ > 2)\n    {\n        result = result.substr(0, result.length() - 2);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpijdkpj9p.d(23): Error: no property `length` for type `string`\n/tmp/tmpijdkpj9p.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpijdkpj9p.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpijdkpj9p.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpijdkpj9p.d(37): Error:
    no property `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpijdkpj9p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i].toChar();\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wridt7m.d(23): Error: no property `length` for type `string`\n/tmp/tmp7wridt7m.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp7wridt7m.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp7wridt7m.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp7wridt7m.d(37): Error:
    no property `length` for type `string`\n/tmp/tmp7wridt7m.d(39): Error: no property
    `toChar` for type `immutable(char)`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wridt7m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n\
    \            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            text = temp;\n        }\n    }\n    for(int i = 0;\
    \ i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n    \
    \        string temp = text;\n            temp = temp.replace(text[i], \"-\");\n\
    \            temp = temp.replace(\" \", \"-\");\n            text = temp;\n  \
    \      }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqd_v2fz1.d(21): Error: no property `length` for type `string`\n/tmp/tmpqd_v2fz1.d(26):
    Error: no property `replace` for type `string`\n/tmp/tmpqd_v2fz1.d(27): Error:
    no property `replace` for type `string`\n/tmp/tmpqd_v2fz1.d(31): Error: no property
    `length` for type `string`\n/tmp/tmpqd_v2fz1.d(36): Error: no property `replace`
    for type `string`\n/tmp/tmpqd_v2fz1.d(37): Error: no property `replace` for type
    `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqd_v2fz1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n        else\n        {\n            result\
    \ += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnvrr43jq.d(23): Error: no property `size` for type `string`\n/tmp/tmpnvrr43jq.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpnvrr43jq.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpnvrr43jq.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpnvrr43jq.d(39): Error: slice
    `result` is not mutable\n/tmp/tmpnvrr43jq.d(43): Error: slice `result` is not
    mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnvrr43jq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + '_';\n        }\n    }\n    \n    if(result.size() >\
    \ 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n \
    \           result[i] = result[i] + '-';\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqjxjmqai.d(23): Error: no property `size` for type `string`\n/tmp/tmpqjxjmqai.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpqjxjmqai.d(31): Error: incompatible
    types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmpqjxjmqai.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpqjxjmqai.d(37): Error: no
    property `size` for type `string`\n/tmp/tmpqjxjmqai.d(39): Error: cannot modify
    `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpqjxjmqai.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxi_uij1z.d(27): Error: slice `result` is not mutable\n/tmp/tmpxi_uij1z.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpxi_uij1z.d(39): Error: slice `result` is not mutable\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxi_uij1z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += '_';\n        }\n        else\n        {\n            result\
    \ += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkm2vmff5.d(23): Error: no property `length` for type `string`\n/tmp/tmpkm2vmff5.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpkm2vmff5.d(31): Error: slice `result`
    is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkm2vmff5.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for (int\
    \ i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n   \
    \     {\n            result[i] = '_';\n        }\n        else if (i > 0 && result[i-1]\
    \ == ' ')\n        {\n            result[i-1] = '_';\n        }\n    }\n    \n\
    \    for (int i = 0; i < result.length(); i++)\n    {\n        if (result[i] ==\
    \ ' ')\n        {\n            result[i] = '_';\n        }\n        else if (i\
    \ > 0 && result[i-1] == ' ')\n        {\n            result[i-1] = '_';\n    \
    \    }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzz9i1afx.d(23): Error: no property `length` for type `string`\n/tmp/tmpzz9i1afx.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpzz9i1afx.d(31):
    Error: cannot modify `immutable` expression `result[cast(ulong)(i - 1)]`\n/tmp/tmpzz9i1afx.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpzz9i1afx.d(39): Error:
    cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpzz9i1afx.d(43):
    Error: cannot modify `immutable` expression `result[cast(ulong)(i - 1)]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzz9i1afx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i =\
    \ 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n \
    \           result += text[i];\n        }\n        else\n        {\n         \
    \   result += text[i] + '_';\n        }\n    }\n    \n    if(result.length() >\
    \ 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i].toChar();\n        }\n        result[result.length()\
    \ - 2] = '-';\n        result[result.length() - 1] = '-';\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppr_ub6_s.d(22): Error: no property `length` for type `string`\n/tmp/tmppr_ub6_s.d(26):
    Error: slice `result` is not mutable\n/tmp/tmppr_ub6_s.d(30): Error: incompatible
    types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmppr_ub6_s.d(34):
    Error: no property `length` for type `string`\n/tmp/tmppr_ub6_s.d(36): Error:
    no property `length` for type `string`\n/tmp/tmppr_ub6_s.d(38): Error: no property
    `toChar` for type `immutable(char)`\n/tmp/tmppr_ub6_s.d(40): Error: no property
    `length` for type `string`\n/tmp/tmppr_ub6_s.d(41): Error: no property `length`
    for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppr_ub6_s.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += \"_\";\n        }\n        else if(text[i] == ' ')\n  \
    \      {\n            result += \"-\";\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhqtuxty.d(23): Error: no property `length` for type `string`\n/tmp/tmpjhqtuxty.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpjhqtuxty.d(31): Error: slice `result`
    is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhqtuxty.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n        else if(result[i] ==\
    \ ' ')\n        {\n            result[i] = '-';\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp93ql0um.d(23): Error: no property `length` for type `string`\n/tmp/tmpp93ql0um.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpp93ql0um.d(31):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpp93ql0um.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < result.length(); i++)\n    {\n        if(result[i] == '_')\n        {\n  \
    \          result += \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg2bps9e3.d(23): Error: no property `length` for type `string`\n/tmp/tmpg2bps9e3.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpg2bps9e3.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpg2bps9e3.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpg2bps9e3.d(39): Error:
    slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg2bps9e3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0efiau0v.d(23): Error: no property `size` for type `string`\n/tmp/tmp0efiau0v.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp0efiau0v.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp0efiau0v.d(35):
    Error: no property `size` for type `string`\n/tmp/tmp0efiau0v.d(39): Error: slice
    `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0efiau0v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy71glc0w.d(23): Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpy71glc0w.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpy71glc0w.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(37): Error: no
    property `size` for type `string`\n/tmp/tmpy71glc0w.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy71glc0w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcawiiof9.d(23): Error: no property `length` for type `string`\n/tmp/tmpcawiiof9.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpcawiiof9.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpcawiiof9.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpcawiiof9.d(37): Error:
    no property `length` for type `string`\n/tmp/tmpcawiiof9.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcawiiof9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + '_';\n        }\n    }\n    \n    for(int i = 0; i <\
    \ text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n          \
    \  result += text[i];\n        }\n        else\n        {\n            result\
    \ += text[i] + '-';\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuopn118i.d(23): Error: no property `size` for type `string`\n/tmp/tmpuopn118i.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpuopn118i.d(31): Error: incompatible
    types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmpuopn118i.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpuopn118i.d(39): Error: slice
    `result` is not mutable\n/tmp/tmpuopn118i.d(43): Error: incompatible types for
    `(result) += (cast(int)text[cast(ulong)i] + 45)`: `string` and `int`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuopn118i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    \n  \
    \  for(int i = 0; i < len; i++)\n    {\n        char c = text[i];\n        if(c\
    \ == ' ')\n        {\n            string s = text;\n            s.erase(i, 1);\n\
    \            s.insert(i, '_');\n            s.insert(i+1, \"_\");\n          \
    \  \n            text = s;\n        }\n    }\n    \n    if(text.find_first_not_of(\"\
    _\") != string::npos)\n    {\n        string s = text;\n        size_t pos = text.find_first_not_of(\"\
    _\");\n        \n        while(pos != string::npos)\n        {\n            s.erase(pos,\
    \ 1);\n            s.insert(pos, '-');\n            pos = text.find_first_not_of(\"\
    _\", pos+1);\n        }\n        \n        text = s;\n    }\n    \n    return\
    \ text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv2j6j_h4.d(37): Error: found `:` when expecting `)`\n/tmp/tmpv2j6j_h4.d(37):
    Error: found `:` instead of statement\n/tmp/tmpv2j6j_h4.d(42): Error: found `:`
    when expecting `)`\n/tmp/tmpv2j6j_h4.d(42): Error: found `:` instead of statement\n/tmp/tmpv2j6j_h4.d(49):
    Error: no identifier for declarator `text`\n/tmp/tmpv2j6j_h4.d(49): Error: declaration
    expected, not `=`\n/tmp/tmpv2j6j_h4.d(50): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv2j6j_h4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i].toLower();\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa3xmrdfm.d(23): Error: no property `length` for type `string`\n/tmp/tmpa3xmrdfm.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpa3xmrdfm.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpa3xmrdfm.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpa3xmrdfm.d(37): Error:
    no property `length` for type `string`\n/tmp/tmpa3xmrdfm.d(39): Error: no property
    `toLower` for type `immutable(char)`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpa3xmrdfm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n \
    \           if(result[i] == ' ')\n            {\n                result[i] = '_';\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8nco5pe0.d(23): Error: no property `length` for type `string`\n/tmp/tmp8nco5pe0.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp8nco5pe0.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp8nco5pe0.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp8nco5pe0.d(37): Error:
    no property `length` for type `string`\n/tmp/tmp8nco5pe0.d(41): Error: cannot
    modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp8nco5pe0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i =\
    \ 0; i < text.length(); i++)\n    {\n        char c = text[i];\n        if(c ==\
    \ ' ')\n        {\n            result += c;\n        }\n        else\n       \
    \ {\n            result += c;\n        }\n    }\n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            result +=\
    \ '_';\n        }\n    }\n    for(int i = 0; i < result.length(); i++)\n    {\n\
    \        if(result[i] == ' ')\n        {\n            result += '-';\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6zyc4uhy.d(22): Error: no property `length` for type `string`\n/tmp/tmp6zyc4uhy.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp6zyc4uhy.d(31): Error: slice `result`
    is not mutable\n/tmp/tmp6zyc4uhy.d(34): Error: no property `length` for type `string`\n/tmp/tmp6zyc4uhy.d(38):
    Error: slice `result` is not mutable\n/tmp/tmp6zyc4uhy.d(41): Error: no property
    `length` for type `string`\n/tmp/tmp6zyc4uhy.d(45): Error: slice `result` is not
    mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zyc4uhy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n \
    \           if(result[i] == ' ')\n            {\n                result[i] = '_';\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8nco5pe0.d(23): Error: no property `length` for type `string`\n/tmp/tmp8nco5pe0.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp8nco5pe0.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp8nco5pe0.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp8nco5pe0.d(37): Error:
    no property `length` for type `string`\n/tmp/tmp8nco5pe0.d(41): Error: cannot
    modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp8nco5pe0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i =\
    \ 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n   \
    \         result += text[i];\n        }\n        else\n        {\n           \
    \ result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size() > 2)\n\
    \    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n      \
    \      result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpslqmw6c7.d(22): Error: no property `size` for type `string`\n/tmp/tmpslqmw6c7.d(26):
    Error: slice `result` is not mutable\n/tmp/tmpslqmw6c7.d(30): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpslqmw6c7.d(34):
    Error: no property `size` for type `string`\n/tmp/tmpslqmw6c7.d(36): Error: no
    property `size` for type `string`\n/tmp/tmpslqmw6c7.d(38): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpslqmw6c7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    stringstream ss(text);\n    string s;\n\
    \    while (getline(ss, s, ' '))\n        s = replace_all(s, \"_\", \" \");\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2stf7vmw.d(21): Error: undefined identifier `stringstream`\n/tmp/tmp2stf7vmw.d(21):
    Error: `text` is used as a type\n/tmp/tmp2stf7vmw.d(23): Error: undefined identifier
    `getline`\n/tmp/tmp2stf7vmw.d(24): Error: undefined identifier `replace_all`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2stf7vmw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < result.length(); i++) {\n        if(result[i] == ' ') {\n           \
    \ result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length();\
    \ i++) {\n        if(result[i] == ' ' && result[i+1] == ' ') {\n            result[i]\
    \ = '-';\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo1xj4ind.d(22): Error: no property `length` for type `string`\n/tmp/tmpo1xj4ind.d(24):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpo1xj4ind.d(27):
    Error: no property `length` for type `string`\n/tmp/tmpo1xj4ind.d(29): Error:
    cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpo1xj4ind.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0efiau0v.d(23): Error: no property `size` for type `string`\n/tmp/tmp0efiau0v.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp0efiau0v.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp0efiau0v.d(35):
    Error: no property `size` for type `string`\n/tmp/tmp0efiau0v.d(39): Error: slice
    `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0efiau0v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    stringstream ss(text);\n    string word;\n\
    \    while(getline(ss, word, ' '))\n    {\n        replace(word, ' ', '_');\n\
    \        replace(word, '\\t', '_');\n        replace(word, '\\n', '_');\n    \
    \    replace(word, '\\r', '_');\n        replace(word, '\\f', '_');\n        replace(word,\
    \ '\\v', '_');\n        replace(word, '\\000', '_');\n    }\n    return ss.str();\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5ekr7ri2.d(21): Error: undefined identifier `stringstream`\n/tmp/tmp5ekr7ri2.d(21):
    Error: `text` is used as a type\n/tmp/tmp5ekr7ri2.d(23): Error: undefined identifier
    `getline`\n/tmp/tmp5ekr7ri2.d(25): Error: undefined identifier `replace`\n/tmp/tmp5ekr7ri2.d(26):
    Error: undefined identifier `replace`\n/tmp/tmp5ekr7ri2.d(27): Error: undefined
    identifier `replace`\n/tmp/tmp5ekr7ri2.d(28): Error: undefined identifier `replace`\n/tmp/tmp5ekr7ri2.d(29):
    Error: undefined identifier `replace`\n/tmp/tmp5ekr7ri2.d(30): Error: undefined
    identifier `replace`\n/tmp/tmp5ekr7ri2.d(31): Error: undefined identifier `replace`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ekr7ri2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy71glc0w.d(23): Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpy71glc0w.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpy71glc0w.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(37): Error: no
    property `size` for type `string`\n/tmp/tmpy71glc0w.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy71glc0w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ') \n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1tt1cxma.d(27): Error: slice `result` is not mutable\n/tmp/tmp1tt1cxma.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmp1tt1cxma.d(35): Error: no property `length` for type `string`\n/tmp/tmp1tt1cxma.d(37):
    Error: no property `length` for type `string`\n/tmp/tmp1tt1cxma.d(39): Error:
    incompatible types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and
    `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1tt1cxma.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0efiau0v.d(23): Error: no property `size` for type `string`\n/tmp/tmp0efiau0v.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp0efiau0v.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp0efiau0v.d(35):
    Error: no property `size` for type `string`\n/tmp/tmp0efiau0v.d(39): Error: slice
    `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0efiau0v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ') \n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj_7vas_9.d(23): Error: no property `size` for type `string`\n/tmp/tmpj_7vas_9.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpj_7vas_9.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpj_7vas_9.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpj_7vas_9.d(37): Error: no
    property `size` for type `string`\n/tmp/tmpj_7vas_9.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_7vas_9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n        else if(result[i] ==\
    \ ' ')\n        {\n            result[i] = '-';\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp93ql0um.d(23): Error: no property `length` for type `string`\n/tmp/tmpp93ql0um.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpp93ql0um.d(31):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpp93ql0um.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n \
    \           if(result[i] == ' ')\n            {\n                result[i] = '_';\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8nco5pe0.d(23): Error: no property `length` for type `string`\n/tmp/tmp8nco5pe0.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp8nco5pe0.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp8nco5pe0.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp8nco5pe0.d(37): Error:
    no property `length` for type `string`\n/tmp/tmp8nco5pe0.d(41): Error: cannot
    modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp8nco5pe0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    stringstream ss(text);\n    string word;\n\
    \    while(getline(ss, word, ' '))\n    {\n        replace(word, 1, word.length()\
    \ - 1, \" \");\n        replace(word, word.length() - 1, word.length(), \" \"\
    );\n    }\n    return ss.str();\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdkqdw9h7.d(21): Error: undefined identifier `stringstream`\n/tmp/tmpdkqdw9h7.d(21):
    Error: `text` is used as a type\n/tmp/tmpdkqdw9h7.d(23): Error: undefined identifier
    `getline`\n/tmp/tmpdkqdw9h7.d(25): Error: undefined identifier `replace`\n/tmp/tmpdkqdw9h7.d(26):
    Error: undefined identifier `replace`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpdkqdw9h7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    stringstream ss(text);\n    string word;\n\
    \    while(getline(ss, word, ' '))\n    {\n        replace(word,\" \",\"_\");\n\
    \        replace(word,\" \",\"-\");\n    }\n    return ss.str();\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpin77pwt1.d(21): Error: undefined identifier `stringstream`\n/tmp/tmpin77pwt1.d(21):
    Error: `text` is used as a type\n/tmp/tmpin77pwt1.d(23): Error: undefined identifier
    `getline`\n/tmp/tmpin77pwt1.d(25): Error: undefined identifier `replace`\n/tmp/tmpin77pwt1.d(26):
    Error: undefined identifier `replace`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpin77pwt1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    \n  \
    \  for(size_t i = 0; i < len; ++i)\n    {\n        char c = text[i];\n       \
    \ if(c == ' ')\n        {\n            if(i + 1 < len && text[i + 1] == ' ')\n\
    \                text[i] = '_';\n            else\n                text[i] = '_';\n\
    \        }\n    }\n    \n    for(size_t i = 0; i < len; ++i)\n    {\n        char\
    \ c = text[i];\n        if(c == ' ')\n        {\n            if(i + 1 < len &&\
    \ text[i + 1] == ' ')\n            {\n                text[i] = '_';\n       \
    \         ++i;\n            }\n        }\n    }\n    \n    return text;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6mjtloke.d(21): Error: no property `length` for type `string`\n/tmp/tmp6mjtloke.d(29):
    Error: cannot modify `immutable` expression `text[i]`\n/tmp/tmp6mjtloke.d(31):
    Error: cannot modify `immutable` expression `text[i]`\n/tmp/tmp6mjtloke.d(42):
    Error: cannot modify `immutable` expression `text[i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp6mjtloke.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpknt4srdi.d(27): Error: slice `result` is not mutable\n/tmp/tmpknt4srdi.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpknt4srdi.d(35): Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(37):
    Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(39): Error:
    incompatible types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and
    `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpknt4srdi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxi_uij1z.d(27): Error: slice `result` is not mutable\n/tmp/tmpxi_uij1z.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpxi_uij1z.d(39): Error: slice `result` is not mutable\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxi_uij1z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n        else if(result[i] ==\
    \ ' ')\n        {\n            result[i] = '-';\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp93ql0um.d(23): Error: no property `length` for type `string`\n/tmp/tmpp93ql0um.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpp93ql0um.d(31):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpp93ql0um.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    size_t\
    \ i;\n    string result = \"\";\n    \n    for(i = 0; i < len; ++i)\n    {\n \
    \       if(text[i] == ' ')\n        {\n            result += text[i];\n      \
    \  }\n        else\n        {\n            result += text[i] + \"_\";\n      \
    \  }\n    }\n    \n    for(i = len - 1; i >= 0; --i)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            result += text[i];\n        }\n        else\n\
    \        {\n            result += \"-\";\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbq23zgik.d(21): Error: no property `length` for type `string`\n/tmp/tmpbq23zgik.d(29):
    Error: slice `result` is not mutable\n/tmp/tmpbq23zgik.d(33): Error: incompatible
    types for `(text[i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpbq23zgik.d(41):
    Error: slice `result` is not mutable\n/tmp/tmpbq23zgik.d(45): Error: slice `result`
    is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbq23zgik.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    string result = \"\";\n    \n    while (i < len)\
    \ {\n        char c = text[i];\n        \n        if (c == ' ') {\n          \
    \  result += c;\n            i += 1;\n        }\n        else if (c == '\\n')\
    \ {\n            result += c;\n            i += 1;\n        }\n        else if\
    \ (c == '\\t') {\n            result += c;\n            i += 1;\n        }\n \
    \       else {\n            result += c;\n            i += 1;\n        }\n   \
    \ }\n    \n    while (i < len) {\n        char c = text[i];\n        \n      \
    \  if (c == ' ') {\n            result += c;\n            i += 1;\n        }\n\
    \        else if (c == '\\n') {\n            result += c;\n            i += 1;\n\
    \        }\n        else if (c == '\\t') {\n            result += c;\n       \
    \     i += 1;\n        }\n        else {\n            result += c;\n         \
    \   i += 1;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8hz5zzus.d(21): Error: no property `length` for type `string`\n/tmp/tmp8hz5zzus.d(30):
    Error: slice `result` is not mutable\n/tmp/tmp8hz5zzus.d(34): Error: slice `result`
    is not mutable\n/tmp/tmp8hz5zzus.d(38): Error: slice `result` is not mutable\n/tmp/tmp8hz5zzus.d(42):
    Error: slice `result` is not mutable\n/tmp/tmp8hz5zzus.d(51): Error: slice `result`
    is not mutable\n/tmp/tmp8hz5zzus.d(55): Error: slice `result` is not mutable\n/tmp/tmp8hz5zzus.d(59):
    Error: slice `result` is not mutable\n/tmp/tmp8hz5zzus.d(63): Error: slice `result`
    is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8hz5zzus.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            for(int j = i; j <\
    \ text.length(); j++)\n            {\n                if(text[j] == ' ')\n   \
    \             {\n                    text[j] = '_';\n                }\n     \
    \       }\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            for(int j = i; j <\
    \ text.length(); j++)\n            {\n                if(text[j] != ' ')\n   \
    \             {\n                    text[j] = '-';\n                }\n     \
    \       }\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias\
    \ candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyakp7le9.d(21): Error: no property `length` for type `string`\n/tmp/tmpyakp7le9.d(25):
    Error: no property `length` for type `string`\n/tmp/tmpyakp7le9.d(29): Error:
    cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmpyakp7le9.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpyakp7le9.d(39): Error:
    no property `length` for type `string`\n/tmp/tmpyakp7le9.d(43): Error: cannot
    modify `immutable` expression `text[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpyakp7le9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n      \
    \      result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk63ivym3.d(23): Error: no property `length` for type `string`\n/tmp/tmpk63ivym3.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpk63ivym3.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpk63ivym3.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpk63ivym3.d(39): Error:
    slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk63ivym3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n\
    \            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"-\");\n            text\
    \ = temp;\n        }\n    }\n    return text;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\nI like your solution, however it only replaces spaces with underscores\
    \ if they are adjacent to each other. For example, it doesn't replace `\" Example\"\
    ` with `\"Example\"`.\n<|/ c |>\n<| c |>\nYes, that's true. I was thinking about\
    \ that and I edited my answer. Thanks for pointing out.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp02i_ik_u.d(34): Error: declaration expected, not `<`\n/tmp/tmp02i_ik_u.d(37):
    Error: unterminated character constant\n/tmp/tmp02i_ik_u.d(40): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp02i_ik_u.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i\
    \ + 1;\n            while(j < result.length() && result[j] == ' ')\n         \
    \   {\n                result[j] = '_';\n                j++;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplv7ey9ol.d(22): Error: no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(26):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmplv7ey9ol.d(29):
    Error: no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(34): Error:
    no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(36): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmplv7ey9ol.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i\
    \ + 1;\n            while(j < result.length() && result[j] == ' ')\n         \
    \   {\n                result[j] = '_';\n                j++;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplv7ey9ol.d(22): Error: no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(26):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmplv7ey9ol.d(29):
    Error: no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(34): Error:
    no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(36): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmplv7ey9ol.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n      \
    \      result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6jybvwx_.d(23): Error: no property `length` for type `string`\n/tmp/tmp6jybvwx_.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp6jybvwx_.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp6jybvwx_.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp6jybvwx_.d(39): Error:
    slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6jybvwx_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    size_t\
    \ i;\n    \n    for(i = 0; i < len; ++i)\n    {\n        if(text[i] == ' ')\n\
    \        {\n            if(i+1 < len && text[i+1] == ' ')\n            {\n   \
    \             text[i] = '_';\n                ++i;\n            }\n          \
    \  else\n            {\n                text[i] = '_';\n            }\n      \
    \  }\n    }\n    \n    for(i = 0; i < len; ++i)\n    {\n        if(text[i] ==\
    \ ' ')\n        {\n            if(i+1 < len && text[i+1] == ' ')\n           \
    \ {\n                text[i] = '_';\n                ++i;\n            }\n   \
    \         else\n            {\n                text[i] = '_';\n            }\n\
    \        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplmzdroi4.d(21): Error: no property `length` for type `string`\n/tmp/tmplmzdroi4.d(30):
    Error: cannot modify `immutable` expression `text[i]`\n/tmp/tmplmzdroi4.d(35):
    Error: cannot modify `immutable` expression `text[i]`\n/tmp/tmplmzdroi4.d(46):
    Error: cannot modify `immutable` expression `text[i]`\n/tmp/tmplmzdroi4.d(51):
    Error: cannot modify `immutable` expression `text[i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmplmzdroi4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if (text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if (result.size()\
    \ > 2)\n    {\n        string last_space = result.find_last_of(\" \");\n     \
    \   string first_space = result.find_first_of(\" \");\n        \n        if (last_space\
    \ == string::npos)\n        {\n            result += \"_\";\n        }\n     \
    \   else\n        {\n            result += result.substr(0, first_space) + \"\
    -\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxg40w_o0.d(40): Error: found `:` when expecting `)`\n/tmp/tmpxg40w_o0.d(40):
    Error: found `:` instead of statement\n/tmp/tmpxg40w_o0.d(50): Error: declaration
    expected, not `return`\n/tmp/tmpxg40w_o0.d(51): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxg40w_o0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy71glc0w.d(23): Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpy71glc0w.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpy71glc0w.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(37): Error: no
    property `size` for type `string`\n/tmp/tmpy71glc0w.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy71glc0w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            if(result.length() - i > 1)\n            {\n                result[result.length()\
    \ - i - 1] = '-';\n            }\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcizkp6du.d(23): Error: no property `length` for type `string`\n/tmp/tmpcizkp6du.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpcizkp6du.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpcizkp6du.d(35): Error:
    no property `length` for type `string`\n/tmp/tmpcizkp6du.d(37): Error: no property
    `length` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcizkp6du.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpknt4srdi.d(27): Error: slice `result` is not mutable\n/tmp/tmpknt4srdi.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpknt4srdi.d(35): Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(37):
    Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(39): Error:
    incompatible types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and
    `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpknt4srdi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + '_';\n        }\n    }\n    \n    for(int i = 0; i <\
    \ text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc3einohe.d(23): Error: no property `length` for type `string`\n/tmp/tmpc3einohe.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpc3einohe.d(31): Error: incompatible
    types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmpc3einohe.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpc3einohe.d(39): Error:
    slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3einohe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpknt4srdi.d(27): Error: slice `result` is not mutable\n/tmp/tmpknt4srdi.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpknt4srdi.d(35): Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(37):
    Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(39): Error:
    incompatible types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and
    `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpknt4srdi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i\
    \ + 1;\n            while(j < result.length() && result[j] == ' ')\n         \
    \   {\n                result[j] = '_';\n                j++;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplv7ey9ol.d(22): Error: no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(26):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmplv7ey9ol.d(29):
    Error: no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(34): Error:
    no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(36): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmplv7ey9ol.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            for(int j = i; j <\
    \ text.length(); j++)\n            {\n                if(text[j] == ' ')\n   \
    \             {\n                    text[j] = '_';\n                }\n     \
    \       }\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            for(int j = i; j <\
    \ text.length(); j++)\n            {\n                if(text[j] != ' ')\n   \
    \             {\n                    text[j] = '-';\n                }\n     \
    \       }\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias\
    \ candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyakp7le9.d(21): Error: no property `length` for type `string`\n/tmp/tmpyakp7le9.d(25):
    Error: no property `length` for type `string`\n/tmp/tmpyakp7le9.d(29): Error:
    cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmpyakp7le9.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpyakp7le9.d(39): Error:
    no property `length` for type `string`\n/tmp/tmpyakp7le9.d(43): Error: cannot
    modify `immutable` expression `text[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpyakp7le9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n\
    \            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            text = temp;\n        }\n    }\n    return text;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpazx08dl8.d(21): Error: no property `length` for type `string`\n/tmp/tmpazx08dl8.d(26):
    Error: no property `replace` for type `string`\n/tmp/tmpazx08dl8.d(27): Error:
    no property `replace` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpazx08dl8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + '_';\n        }\n    }\n    \n    for(int i = 0; i <\
    \ text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcqrtvw5e.d(23): Error: no property `length` for type `string`\n/tmp/tmpcqrtvw5e.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpcqrtvw5e.d(31): Error: incompatible
    types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmpcqrtvw5e.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpcqrtvw5e.d(39): Error:
    slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcqrtvw5e.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxi_uij1z.d(27): Error: slice `result` is not mutable\n/tmp/tmpxi_uij1z.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpxi_uij1z.d(39): Error: slice `result` is not mutable\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxi_uij1z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + '_';\n        }\n    }\n    \n    for(int i = 0; i <\
    \ text.length() - 1; i++)\n    {\n        if(text[i] == ' ')\n        {\n    \
    \        result += text[i];\n        }\n        else\n        {\n            result\
    \ += text[i] + '-';\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp557yhsft.d(23): Error: no property `length` for type `string`\n/tmp/tmp557yhsft.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp557yhsft.d(31): Error: incompatible
    types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmp557yhsft.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp557yhsft.d(39): Error:
    slice `result` is not mutable\n/tmp/tmp557yhsft.d(43): Error: incompatible types
    for `(result) += (cast(int)text[cast(ulong)i] + 45)`: `string` and `int`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp557yhsft.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for (int\
    \ i = 0; i < text.length(); i++)\n    {\n        if (text[i] == ' ')\n       \
    \ {\n            result += text[i];\n        }\n        else\n        {\n    \
    \        result += text[i] + '_';\n        }\n    }\n    \n    for (int i = 0;\
    \ i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n\
    \            result = result.substr(0, i) + \"-\";\n        }\n    }\n    \n \
    \   return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5o6o2dw1.d(23): Error: no property `length` for type `string`\n/tmp/tmp5o6o2dw1.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp5o6o2dw1.d(31): Error: incompatible
    types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmp5o6o2dw1.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp5o6o2dw1.d(39): Error:
    no property `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp5o6o2dw1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    size_t\
    \ i;\n    \n    for(i = 0; i < len; ++i)\n    {\n        if(text[i] == ' ')\n\
    \        {\n            char c = text[i];\n            \n            for(++i;\
    \ i < len; ++i)\n            {\n                if(text[i] == ' ')\n         \
    \       {\n                    text[i] = '_';\n                }\n           \
    \ }\n        }\n    }\n    \n    for(i = 0; i < len; ++i)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            char c = text[i];\n            \n          \
    \  for(++i; i < len; ++i)\n            {\n                if(text[i] == ' ')\n\
    \                {\n                    text[i] = '-';\n                }\n  \
    \          }\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias\
    \ candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj0qqkox8.d(21): Error: no property `length` for type `string`\n/tmp/tmpj0qqkox8.d(34):
    Error: cannot modify `immutable` expression `text[i]`\n/tmp/tmpj0qqkox8.d(50):
    Error: cannot modify `immutable` expression `text[i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpj0qqkox8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < result.length(); i++) {\n        if(result[i] == ' ') {\n           \
    \ result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length();\
    \ i++) {\n        if(result[i] == ' ' && result[i+1] == ' ') {\n            result[i]\
    \ = '-';\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo1xj4ind.d(22): Error: no property `length` for type `string`\n/tmp/tmpo1xj4ind.d(24):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpo1xj4ind.d(27):
    Error: no property `length` for type `string`\n/tmp/tmpo1xj4ind.d(29): Error:
    cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpo1xj4ind.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1wd4v9v1.d(23): Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp1wd4v9v1.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp1wd4v9v1.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(37): Error:
    no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wd4v9v1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n \
    \           result += '_';\n        }\n        else\n        {\n            result\
    \ += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp44572iek.d(22): Error: no property `length` for type `string`\n/tmp/tmp44572iek.d(26):
    Error: slice `result` is not mutable\n/tmp/tmp44572iek.d(30): Error: slice `result`
    is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44572iek.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy71glc0w.d(23): Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpy71glc0w.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpy71glc0w.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(37): Error: no
    property `size` for type `string`\n/tmp/tmpy71glc0w.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy71glc0w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + '-';\n        }\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu44qo4rd.d(23): Error: no property `length` for type `string`\n/tmp/tmpu44qo4rd.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpu44qo4rd.d(31): Error: incompatible
    types for `(result) += (cast(int)text[cast(ulong)i] + 45)`: `string` and `int`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu44qo4rd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n \
    \           result += text[i];\n        }\n        else\n        {\n         \
    \   result += text[i] + '_';\n        }\n    }\n    \n    if(result.length() >\
    \ 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + '-';\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqktvu6xo.d(22): Error: no property `length` for type `string`\n/tmp/tmpqktvu6xo.d(26):
    Error: slice `result` is not mutable\n/tmp/tmpqktvu6xo.d(30): Error: incompatible
    types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmpqktvu6xo.d(34):
    Error: no property `length` for type `string`\n/tmp/tmpqktvu6xo.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpqktvu6xo.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpqktvu6xo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            int j = i;\n      \
    \      while(j < text.length() && text[j] == ' ')\n                j++;\n    \
    \        string s = text.substr(0, i) + \"_\" + text.substr(j);\n            text\
    \ = s;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn04u_3oe.d(21): Error: no property `length` for type `string`\n/tmp/tmpn04u_3oe.d(26):
    Error: no property `length` for type `string`\n/tmp/tmpn04u_3oe.d(28): Error:
    no property `substr` for type `string`\n/tmp/tmpn04u_3oe.d(28): Error: no property
    `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn04u_3oe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i =\
    \ 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n \
    \           result += text[i];\n        }\n        else\n        {\n         \
    \   result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ro7ofo1.d(22): Error: no property `length` for type `string`\n/tmp/tmp4ro7ofo1.d(26):
    Error: slice `result` is not mutable\n/tmp/tmp4ro7ofo1.d(30): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp4ro7ofo1.d(34):
    Error: no property `length` for type `string`\n/tmp/tmp4ro7ofo1.d(36): Error:
    no property `length` for type `string`\n/tmp/tmp4ro7ofo1.d(38): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ro7ofo1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    size_t len\
    \ = result.size();\n    size_t i;\n    for(i = 0; i < len; ++i)\n    {\n     \
    \   char c = result[i];\n        if(c == ' ')\n        {\n            result[i]\
    \ = '_';\n        }\n        else if(c == ' ')\n        {\n            result[i]\
    \ = '-';\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbbxi6k_u.d(22): Error: no property `size` for type `string`\n/tmp/tmpbbxi6k_u.d(29):
    Error: cannot modify `immutable` expression `result[i]`\n/tmp/tmpbbxi6k_u.d(33):
    Error: cannot modify `immutable` expression `result[i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpbbxi6k_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    size_t pos\
    \ = 0;\n    size_t len = result.size();\n    while(pos < len) {\n        size_t\
    \ next = find_if(text.begin() + pos, text.end(), space);\n        if(next == text.end())\
    \ {\n            break;\n        }\n        \n        string replacement = \"\
    \ \";\n        size_t prev = find_if(text.begin() + pos, text.end(), space);\n\
    \        if(prev != text.end()) {\n            replacement = \"-\";\n        }\n\
    \        \n        result += text.substr(pos, next - pos);\n        result +=\
    \ replacement;\n        pos = next + 1;\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppb3sy27s.d(23): Error: no property `size` for type `string`\n/tmp/tmppb3sy27s.d(25):
    Error: undefined identifier `find_if`\n/tmp/tmppb3sy27s.d(26): Error: no property
    `end` for type `string`\n/tmp/tmppb3sy27s.d(31): Error: undefined identifier `find_if`\n/tmp/tmppb3sy27s.d(32):
    Error: no property `end` for type `string`\n/tmp/tmppb3sy27s.d(36): Error: no
    property `substr` for type `string`\n/tmp/tmppb3sy27s.d(37): Error: slice `result`
    is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppb3sy27s.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + '-';\n        }\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu44qo4rd.d(23): Error: no property `length` for type `string`\n/tmp/tmpu44qo4rd.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpu44qo4rd.d(31): Error: incompatible
    types for `(result) += (cast(int)text[cast(ulong)i] + 45)`: `string` and `int`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu44qo4rd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n           \
    \ result += text[i];\n        }\n        else {\n            result += text[i]\
    \ + '_';\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++) {\n\
    \        if(text[i] == ' ' && text[i+1] == ' ') {\n            result += text[i];\n\
    \        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp3fzs2ou.d(23): Error: no property `length` for type `string`\n/tmp/tmpp3fzs2ou.d(25):
    Error: slice `result` is not mutable\n/tmp/tmpp3fzs2ou.d(28): Error: incompatible
    types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmpp3fzs2ou.d(32):
    Error: no property `length` for type `string`\n/tmp/tmpp3fzs2ou.d(34): Error:
    slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp3fzs2ou.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ') \n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj_7vas_9.d(23): Error: no property `size` for type `string`\n/tmp/tmpj_7vas_9.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpj_7vas_9.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpj_7vas_9.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpj_7vas_9.d(37): Error: no
    property `size` for type `string`\n/tmp/tmpj_7vas_9.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_7vas_9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length() - 1; i++)\n    {\n        if(text[i] == ' ')\n        {\n  \
    \          result += text[i];\n        }\n        else\n        {\n          \
    \  result += text[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphadnqg9i.d(23): Error: no property `length` for type `string`\n/tmp/tmphadnqg9i.d(27):
    Error: slice `result` is not mutable\n/tmp/tmphadnqg9i.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmphadnqg9i.d(35):
    Error: no property `length` for type `string`\n/tmp/tmphadnqg9i.d(39): Error:
    slice `result` is not mutable\n/tmp/tmphadnqg9i.d(43): Error: incompatible types
    for `(text[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphadnqg9i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            char c = text[i+1];\n\
    \            if(c == ' ')\n            {\n                text[i+1] = '_';\n \
    \           }\n            else\n            {\n                text[i+1] = '-';\n\
    \            }\n        }\n    }\n    return text;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\nThis code does not work if there are more than 2 consecutive spaces.\
    \ Try it with `\" Example 1 \"`.\n<|/ c |>\n<| c |>\nYes, I missed that case.\
    \ Thanks for pointing it out. I've updated my answer.\n<|/ c |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg1coh43l.d(38): Error: declaration expected, not `<`\n/tmp/tmpg1coh43l.d(44):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpg1coh43l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i].toChar();\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wridt7m.d(23): Error: no property `length` for type `string`\n/tmp/tmp7wridt7m.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp7wridt7m.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp7wridt7m.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp7wridt7m.d(37): Error:
    no property `length` for type `string`\n/tmp/tmp7wridt7m.d(39): Error: no property
    `toChar` for type `immutable(char)`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wridt7m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    string result = \"\";\n  \
    \  \n    while (i < len) {\n        char c = text[i];\n        \n        if (c\
    \ == ' ') {\n            result += c;\n            i += 1;\n        }\n      \
    \  else if (c == '\\n') {\n            result += c;\n            i += 1;\n   \
    \     }\n        else if (c == ' ' && i < len-1) {\n            result += c;\n\
    \            i += 1;\n        }\n        else if (c == '\\n') {\n            result\
    \ += c;\n            i += 1;\n        }\n        else {\n            result +=\
    \ c;\n            i += 1;\n        }\n    }\n    \n    while (j < len) {\n   \
    \     char c = text[j];\n        \n        if (c == ' ') {\n            result\
    \ += c;\n            i += 1;\n        }\n        else if (c == '\\n') {\n    \
    \        result += c;\n            i += 1;\n        }\n        else if (c == '\
    \ ' && i < len-1) {\n            result += c;\n            i += 1;\n        }\n\
    \        else if (c == '\\n') {\n            result += c;\n            i += 1;\n\
    \        }\n        else {\n            result += c;\n            i += 1;\n  \
    \      }\n        \n        ++j;\n    }\n    \n    while (i < len) {\n       \
    \ char c = text[i];\n        \n        if (c == ' ') {\n            result +=\
    \ c;\n            i += 1;\n        }\n        else if (c == '\\n') {\n       \
    \     result += c;\n            i += 1;\n        }\n        else if (c == ' '\
    \ && i < len-1) {\n            result += c;\n            i += 1;\n        }\n\
    \        else if (c == '\\n') {\n            result += c;\n            i += 1;\n\
    \        }\n        else {\n            result += c;\n            i += 1;\n  \
    \      }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp58d7j_u1.d(21): Error: no property `length` for type `string`\n/tmp/tmp58d7j_u1.d(31):
    Error: slice `result` is not mutable\n/tmp/tmp58d7j_u1.d(35): Error: slice `result`
    is not mutable\n/tmp/tmp58d7j_u1.d(39): Error: slice `result` is not mutable\n/tmp/tmp58d7j_u1.d(43):
    Error: slice `result` is not mutable\n/tmp/tmp58d7j_u1.d(47): Error: slice `result`
    is not mutable\n/tmp/tmp58d7j_u1.d(56): Error: slice `result` is not mutable\n/tmp/tmp58d7j_u1.d(60):
    Error: slice `result` is not mutable\n/tmp/tmp58d7j_u1.d(64): Error: slice `result`
    is not mutable\n/tmp/tmp58d7j_u1.d(68): Error: slice `result` is not mutable\n/tmp/tmp58d7j_u1.d(72):
    Error: slice `result` is not mutable\n/tmp/tmp58d7j_u1.d(83): Error: slice `result`
    is not mutable\n/tmp/tmp58d7j_u1.d(87): Error: slice `result` is not mutable\n/tmp/tmp58d7j_u1.d(91):
    Error: slice `result` is not mutable\n/tmp/tmp58d7j_u1.d(95): Error: slice `result`
    is not mutable\n/tmp/tmp58d7j_u1.d(99): Error: slice `result` is not mutable\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp58d7j_u1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1wd4v9v1.d(23): Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp1wd4v9v1.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp1wd4v9v1.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(37): Error:
    no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wd4v9v1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    stringstream ss(text);\n    string word;\n\
    \    while(getline(ss, word, ' '))\n    {\n        replace(word, \" \", \"_\"\
    );\n        replace(word, \"  \", \"_\");\n    }\n    return ss.str();\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if it would be\
    \ possible to do this without using stringstream. I'm thinking about using regex\
    \ to replace all spaces with underscores and then replace all consecutive spaces\
    \ with dashes.\n<|/ c |>\n<| c |>\nI added a regex solution as well. Hope it helps.\n\
    <|/ c |>\n<| a tags=c++,string,replace,regex |>\nI like Jason's solution, but\
    \ I wonder if it would be possible to do this without using stringstream. I'm\
    \ thinking about using regex to replace all spaces with underscores and then replace\
    \ all consecutive spaces with dashes.\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm6ffe1ki.d(30): Error: declaration expected, not `<`\n/tmp/tmpm6ffe1ki.d(33):
    Error: unterminated character constant\n/tmp/tmpm6ffe1ki.d(39): Error: unterminated
    character constant\n/tmp/tmpm6ffe1ki.d(39): Error: unterminated character constant\n/tmp/tmpm6ffe1ki.d(44):
    Error: declaration expected, not `assert`\n/tmp/tmpm6ffe1ki.d(45): Error: declaration
    expected, not `assert`\n/tmp/tmpm6ffe1ki.d(46): Error: declaration expected, not
    `assert`\n/tmp/tmpm6ffe1ki.d(47): Error: declaration expected, not `assert`\n/tmp/tmpm6ffe1ki.d(48):
    Error: declaration expected, not `assert`\n/tmp/tmpm6ffe1ki.d(49): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm6ffe1ki.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i].toChar();\n        }\n        \n        result[result.length()\
    \ - 2] = '-';\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0sg2fkhl.d(27): Error: slice `result` is not mutable\n/tmp/tmp0sg2fkhl.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmp0sg2fkhl.d(35): Error: no property `length` for type `string`\n/tmp/tmp0sg2fkhl.d(37):
    Error: no property `length` for type `string`\n/tmp/tmp0sg2fkhl.d(39): Error:
    no property `toChar` for type `immutable(char)`\n/tmp/tmp0sg2fkhl.d(42): Error:
    no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0sg2fkhl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if (text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if (result.size()\
    \ > 2)\n    {\n        result = result.substr(0, result.size() - 2);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2bb7l3r0.d(23): Error: no property `size` for type `string`\n/tmp/tmp2bb7l3r0.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp2bb7l3r0.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp2bb7l3r0.d(35):
    Error: no property `size` for type `string`\n/tmp/tmp2bb7l3r0.d(37): Error: no
    property `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2bb7l3r0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy71glc0w.d(23): Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpy71glc0w.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpy71glc0w.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(37): Error: no
    property `size` for type `string`\n/tmp/tmpy71glc0w.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy71glc0w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcawiiof9.d(23): Error: no property `length` for type `string`\n/tmp/tmpcawiiof9.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpcawiiof9.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpcawiiof9.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpcawiiof9.d(37): Error:
    no property `length` for type `string`\n/tmp/tmpcawiiof9.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcawiiof9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0efiau0v.d(23): Error: no property `size` for type `string`\n/tmp/tmp0efiau0v.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp0efiau0v.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp0efiau0v.d(35):
    Error: no property `size` for type `string`\n/tmp/tmp0efiau0v.d(39): Error: slice
    `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0efiau0v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpknt4srdi.d(27): Error: slice `result` is not mutable\n/tmp/tmpknt4srdi.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpknt4srdi.d(35): Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(37):
    Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(39): Error:
    incompatible types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and
    `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpknt4srdi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    \n  \
    \  for(int i = 0; i < len; i++)\n    {\n        char c = text[i];\n        \n\
    \        if(c == ' ')\n        {\n            string s = text.substr(0, i);\n\
    \            \n            for(int j = i; j < len; j++)\n            {\n     \
    \           char d = text[j];\n                \n                if(d != ' ')\n\
    \                {\n                    s += \"_\";\n                }\n     \
    \           else\n                {\n                    break;\n            \
    \    }\n            }\n            \n            text += s;\n            \n  \
    \          i = len;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n\
    \    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptiid_d7m.d(21): Error: no property `length` for type `string`\n/tmp/tmptiid_d7m.d(29):
    Error: no property `substr` for type `string`\n/tmp/tmptiid_d7m.d(37): Error:
    slice `s` is not mutable\n/tmp/tmptiid_d7m.d(45): Error: slice `text` is not mutable\n/tmp/tmptiid_d7m.d(47):
    Error: cannot implicitly convert expression `len` of type `ulong` to `int`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptiid_d7m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + '_';\n        }\n    }\n    \n    for(int i = 0; i <\
    \ text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n          \
    \  result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb5wateeh.d(27): Error: slice `result` is not mutable\n/tmp/tmpb5wateeh.d(31):
    Error: incompatible types for `(result) += (cast(int)text[cast(ulong)i] + 95)`:
    `string` and `int`\n/tmp/tmpb5wateeh.d(39): Error: slice `result` is not mutable\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb5wateeh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i =\
    \ 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n   \
    \         result += text[i];\n        }\n        else\n        {\n           \
    \ result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size() > 2)\n\
    \    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n      \
    \      result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpslqmw6c7.d(22): Error: no property `size` for type `string`\n/tmp/tmpslqmw6c7.d(26):
    Error: slice `result` is not mutable\n/tmp/tmpslqmw6c7.d(30): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpslqmw6c7.d(34):
    Error: no property `size` for type `string`\n/tmp/tmpslqmw6c7.d(36): Error: no
    property `size` for type `string`\n/tmp/tmpslqmw6c7.d(38): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpslqmw6c7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy71glc0w.d(23): Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpy71glc0w.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpy71glc0w.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(37): Error: no
    property `size` for type `string`\n/tmp/tmpy71glc0w.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy71glc0w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy71glc0w.d(23): Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpy71glc0w.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpy71glc0w.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(37): Error: no
    property `size` for type `string`\n/tmp/tmpy71glc0w.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy71glc0w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy71glc0w.d(23): Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpy71glc0w.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpy71glc0w.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(37): Error: no
    property `size` for type `string`\n/tmp/tmpy71glc0w.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy71glc0w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy71glc0w.d(23): Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpy71glc0w.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpy71glc0w.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(37): Error: no
    property `size` for type `string`\n/tmp/tmpy71glc0w.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy71glc0w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            if(result.length() > i + 1)\n            {\n                if(result[i\
    \ + 1] == ' ')\n                {\n                    result[i] = '-';\n    \
    \            }\n            }\n        }\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn74645p3.d(23): Error: no property `length` for type `string`\n/tmp/tmpn74645p3.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpn74645p3.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpn74645p3.d(35): Error:
    no property `length` for type `string`\n/tmp/tmpn74645p3.d(39): Error: cannot
    modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpn74645p3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy71glc0w.d(23): Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpy71glc0w.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpy71glc0w.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(37): Error: no
    property `size` for type `string`\n/tmp/tmpy71glc0w.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy71glc0w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    size_t\
    \ i;\n    \n    for (i = 0; i < len; ++i)\n    {\n        if (text[i] == ' ')\n\
    \        {\n            string s = text.substr(0, i);\n            string t =\
    \ text.substr(i + 1);\n            \n            if (s.length() > 2)\n       \
    \     {\n                string s2 = s.substr(0, s.length() - 2);\n          \
    \      string t2 = t.substr(0, t.length() - 2);\n                \n          \
    \      s = s2;\n                t = t2;\n            }\n            \n       \
    \     text = s + \"_\" + t;\n        }\n    }\n    \n    return text;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0dzsb3qz.d(21): Error: no property `length` for type `string`\n/tmp/tmp0dzsb3qz.d(28):
    Error: no property `substr` for type `string`\n/tmp/tmp0dzsb3qz.d(29): Error:
    no property `substr` for type `string`\n/tmp/tmp0dzsb3qz.d(31): Error: no property
    `length` for type `string`\n/tmp/tmp0dzsb3qz.d(33): Error: no property `substr`
    for type `string`\n/tmp/tmp0dzsb3qz.d(34): Error: no property `substr` for type
    `string`\n/tmp/tmp0dzsb3qz.d(40): Error: invalid array operation `s + "_"` (possible
    missing [])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0dzsb3qz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == \" \")\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnub6u_yd.d(25): Error: incompatible types for `(text[cast(ulong)i])
    == (" ")`: `immutable(char)` and `string`\n/tmp/tmpnub6u_yd.d(27): Error: slice
    `result` is not mutable\n/tmp/tmpnub6u_yd.d(31): Error: incompatible types for
    `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpnub6u_yd.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpnub6u_yd.d(37): Error:
    no property `length` for type `string`\n/tmp/tmpnub6u_yd.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnub6u_yd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + '_';\n        }\n    }\n    \n    for(int i = 0; i <\
    \ text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc3einohe.d(23): Error: no property `length` for type `string`\n/tmp/tmpc3einohe.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpc3einohe.d(31): Error: incompatible
    types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmpc3einohe.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpc3einohe.d(39): Error:
    slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3einohe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n      \
    \  {\n            result += text[i];\n        }\n        else\n        {\n   \
    \         result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i].toChar();\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz4rz7s0c.d(23): Error: no property `length` for type `string`\n/tmp/tmpz4rz7s0c.d(25):
    Error: incompatible types for `(text[cast(ulong)i]) == (" ")`: `immutable(char)`
    and `string`\n/tmp/tmpz4rz7s0c.d(27): Error: slice `result` is not mutable\n/tmp/tmpz4rz7s0c.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpz4rz7s0c.d(35): Error: no property `length` for type `string`\n/tmp/tmpz4rz7s0c.d(37):
    Error: no property `length` for type `string`\n/tmp/tmpz4rz7s0c.d(39): Error:
    no property `toChar` for type `immutable(char)`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpz4rz7s0c.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1wd4v9v1.d(23): Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp1wd4v9v1.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp1wd4v9v1.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(37): Error:
    no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wd4v9v1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i\
    \ + 1;\n            while(j < result.length() && result[j] == ' ')\n         \
    \   {\n                result[j] = '_';\n                j++;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplv7ey9ol.d(22): Error: no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(26):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmplv7ey9ol.d(29):
    Error: no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(34): Error:
    no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(36): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmplv7ey9ol.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int\
    \ i = 0; i < text.length(); i++) {\n        char c = text[i];\n        \n    \
    \    if (c == ' ') {\n            result += c;\n        } else {\n           \
    \ result += c;\n        }\n    }\n    \n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result.charAt(i) == ' ') {\n            result += '_';\n\
    \        }\n    }\n    \n    for (int i = 0; i < result.length(); i++) {\n   \
    \     if (result.charAt(i) == ' ' && result.charAt(i + 1) == ' ') {\n        \
    \    result += '-';\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppyo65ude.d(23): Error: no property `length` for type `string`\n/tmp/tmppyo65ude.d(27):
    Error: slice `result` is not mutable\n/tmp/tmppyo65ude.d(29): Error: slice `result`
    is not mutable\n/tmp/tmppyo65ude.d(33): Error: no property `length` for type `string`\n/tmp/tmppyo65ude.d(34):
    Error: no property `charAt` for type `string`\n/tmp/tmppyo65ude.d(35): Error:
    slice `result` is not mutable\n/tmp/tmppyo65ude.d(39): Error: no property `length`
    for type `string`\n/tmp/tmppyo65ude.d(40): Error: no property `charAt` for type
    `string`\n/tmp/tmppyo65ude.d(40): Error: no property `charAt` for type `string`\n/tmp/tmppyo65ude.d(41):
    Error: slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmppyo65ude.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n\
    \            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            \nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdsumr_rd.d(81): Error: found `unittest` instead of statement\n/tmp/tmpdsumr_rd.d(91):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpdsumr_rd.d(91):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdsumr_rd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int\
    \ i = 0; i < text.length(); i++)\n    {\n        char c = text[i];\n        \n\
    \        if (c != ' ' && c != '\\t' && c != '\\n')\n        {\n            result\
    \ += c;\n        }\n        else\n        {\n            result += \" \";\n  \
    \      }\n    }\n    \n    for (int i = 0; i < result.length(); i++)\n    {\n\
    \        if (result.at(i) == \" \")\n        {\n            if (result.at(i +\
    \ 1) == \" \")\n            {\n                result += \"-\";\n            }\n\
    \            else\n            {\n                result += \" \";\n         \
    \   }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq9dmd5n5.d(23): Error: no property `length` for type `string`\n/tmp/tmpq9dmd5n5.d(29):
    Error: slice `result` is not mutable\n/tmp/tmpq9dmd5n5.d(33): Error: slice `result`
    is not mutable\n/tmp/tmpq9dmd5n5.d(37): Error: no property `length` for type `string`\n/tmp/tmpq9dmd5n5.d(39):
    Error: no property `at` for type `string`\n/tmp/tmpq9dmd5n5.d(41): Error: no property
    `at` for type `string`\n/tmp/tmpq9dmd5n5.d(43): Error: slice `result` is not mutable\n/tmp/tmpq9dmd5n5.d(47):
    Error: slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq9dmd5n5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    size_t spaces\
    \ = text.find_first_of(' ');\n    size_t spaces_2 = text.find_first_of(' '+1);\n\
    \    \n    if(spaces != string::npos)\n    {\n        for(size_t i = 0; i < spaces;\
    \ i++)\n        {\n            result[i] = '_';\n        }\n    }\n    \n    if(spaces_2\
    \ != string::npos)\n    {\n        for(size_t i = 0; i < spaces_2; i++)\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9e4cho9b.d(25): Error: found `:` when expecting `)`\n/tmp/tmp9e4cho9b.d(25):
    Error: found `:` instead of statement\n/tmp/tmp9e4cho9b.d(27): Error: found `)`
    when expecting `;` following statement\n/tmp/tmp9e4cho9b.d(33): Error: declaration
    expected, not `if`\n/tmp/tmp9e4cho9b.d(35): Error: no identifier for declarator
    `i`\n/tmp/tmp9e4cho9b.d(35): Error: declaration expected, not `<`\n/tmp/tmp9e4cho9b.d(35):
    Error: no identifier for declarator `i`\n/tmp/tmp9e4cho9b.d(35): Error: declaration
    expected, not `++`\n/tmp/tmp9e4cho9b.d(38): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9e4cho9b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for (int\
    \ i = 0; i < result.size(); ++i)\n    {\n        if (result[i] == ' ')\n     \
    \   {\n            result[i] = '_';\n        }\n        else if (result[i] ==\
    \ ' ')\n        {\n            result[i] = '-';\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx8se0d9.d(23): Error: no property `size` for type `string`\n/tmp/tmprx8se0d9.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmprx8se0d9.d(31):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmprx8se0d9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int\
    \ i = 0; i < text.length(); i++)\n    {\n        if (text[i] == ' ')\n       \
    \ {\n            result += text[i];\n        }\n        else\n        {\n    \
    \        result += text[i] + \"_\";\n        }\n    }\n    \n    if (result.length()\
    \ > 2)\n    {\n        string last = \"\";\n        \n        for (int i = 0;\
    \ i < result.length(); i++)\n        {\n            if (result[i] == ' ')\n  \
    \          {\n                result += last + \"-\";\n            }\n       \
    \     else\n            {\n                last = result[i];\n            }\n\
    \        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf88v5uvh.d(23): Error: no property `length` for type `string`\n/tmp/tmpf88v5uvh.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpf88v5uvh.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpf88v5uvh.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpf88v5uvh.d(39): Error:
    no property `length` for type `string`\n/tmp/tmpf88v5uvh.d(43): Error: invalid
    array operation `last + "-"` (possible missing [])\n/tmp/tmpf88v5uvh.d(47): Error:
    cannot implicitly convert expression `result[cast(ulong)i]` of type `immutable(char)`
    to `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf88v5uvh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for (int\
    \ i = 0; i < text.length(); i++) {\n        char c = text[i];\n        \n    \
    \    if (c == ' ') {\n            result = result + \"_\";\n        }\n      \
    \  else if (c == ' ' && i + 1 < text.length() && text[i + 1] == ' ') {\n     \
    \       result = result + \"-\";\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsgda_m3e.d(23): Error: no property `length` for type `string`\n/tmp/tmpsgda_m3e.d(27):
    Error: invalid array operation `result + "_"` (possible missing [])\n/tmp/tmpsgda_m3e.d(29):
    Error: no property `length` for type `string`\n/tmp/tmpsgda_m3e.d(30): Error:
    invalid array operation `result + "-"` (possible missing [])\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpsgda_m3e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    size_t len\
    \ = result.size();\n    size_t i;\n    \n    for(i = 0; i < len; ++i)\n    {\n\
    \        if(result[i] == ' ')\n        {\n            result[i] = '_';\n     \
    \   }\n        else if(result[i] == ' ')\n        {\n            result[i] = '-';\n\
    \        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgozhbqwr.d(22): Error: no property `size` for type `string`\n/tmp/tmpgozhbqwr.d(29):
    Error: cannot modify `immutable` expression `result[i]`\n/tmp/tmpgozhbqwr.d(33):
    Error: cannot modify `immutable` expression `result[i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpgozhbqwr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1wd4v9v1.d(23): Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp1wd4v9v1.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp1wd4v9v1.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(37): Error:
    no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wd4v9v1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy71glc0w.d(23): Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpy71glc0w.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpy71glc0w.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(37): Error: no
    property `size` for type `string`\n/tmp/tmpy71glc0w.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy71glc0w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i =\
    \ 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n   \
    \         result += text[i];\n        }\n        else\n        {\n           \
    \ result += text[i] + '_';\n        }\n    }\n    \n    for(int i = 0; i < text.length;\
    \ ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp_a6x1ao.d(26): Error: slice `result` is not mutable\n/tmp/tmpp_a6x1ao.d(30):
    Error: incompatible types for `(result) += (cast(int)text[cast(ulong)i] + 95)`:
    `string` and `int`\n/tmp/tmpp_a6x1ao.d(38): Error: slice `result` is not mutable\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp_a6x1ao.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            text += \"_\";\n  \
    \      }\n        else if(text[i] == ' ')\n        {\n            text += \"-\"\
    ;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptt8bc339.d(21): Error: no property `length` for type `string`\n/tmp/tmptt8bc339.d(25):
    Error: slice `text` is not mutable\n/tmp/tmptt8bc339.d(29): Error: slice `text`
    is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptt8bc339.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpknt4srdi.d(27): Error: slice `result` is not mutable\n/tmp/tmpknt4srdi.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpknt4srdi.d(35): Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(37):
    Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(39): Error:
    incompatible types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and
    `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpknt4srdi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for (int\
    \ i = 0; i < text.length(); i++)\n    {\n        if (text[i] == ' ')\n       \
    \ {\n            result += '_';\n        }\n        else if (text[i] == ' ')\n\
    \        {\n            result += '-';\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3rgear0g.d(23): Error: no property `length` for type `string`\n/tmp/tmp3rgear0g.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp3rgear0g.d(31): Error: slice `result`
    is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3rgear0g.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpknt4srdi.d(27): Error: slice `result` is not mutable\n/tmp/tmpknt4srdi.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpknt4srdi.d(35): Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(37):
    Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(39): Error:
    incompatible types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and
    `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpknt4srdi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n        if(result[i] == ' ')\n     \
    \   {\n            result[i] = '_';\n        }\n    }\n    for(int i = 0; i <\
    \ result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n    \
    \        result[i] = '_';\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2wu0u2ff.d(22): Error: no property `length` for type `string`\n/tmp/tmp2wu0u2ff.d(26):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmp2wu0u2ff.d(30):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmp2wu0u2ff.d(33):
    Error: no property `length` for type `string`\n/tmp/tmp2wu0u2ff.d(37): Error:
    cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp2wu0u2ff.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy71glc0w.d(23): Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpy71glc0w.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpy71glc0w.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(37): Error: no
    property `size` for type `string`\n/tmp/tmpy71glc0w.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy71glc0w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int\
    \ i = 0; i < text.length(); i++) {\n        char c = text[i];\n        \n    \
    \    if (c == ' ') {\n            if (result.length() > 0) {\n               \
    \ result += \"_\";\n            }\n        } else {\n            result += c;\n\
    \        }\n    }\n    \n    if (result.length() > 2) {\n        result = result.substr(0,\
    \ result.length() - 2);\n    }\n    \n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxm2o4rdk.d(23): Error: no property `length` for type `string`\n/tmp/tmpxm2o4rdk.d(27):
    Error: no property `length` for type `string`\n/tmp/tmpxm2o4rdk.d(28): Error:
    slice `result` is not mutable\n/tmp/tmpxm2o4rdk.d(31): Error: slice `result` is
    not mutable\n/tmp/tmpxm2o4rdk.d(35): Error: no property `length` for type `string`\n/tmp/tmpxm2o4rdk.d(36):
    Error: no property `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpxm2o4rdk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + '_';\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i+1];\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp76s9moxi.d(23): Error: no property `length` for type `string`\n/tmp/tmp76s9moxi.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp76s9moxi.d(31): Error: incompatible
    types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmp76s9moxi.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp76s9moxi.d(37): Error:
    no property `length` for type `string`\n/tmp/tmp76s9moxi.d(39): Error: cannot
    modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp76s9moxi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i].toChar();\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo6p2wpf9.d(27): Error: slice `result` is not mutable\n/tmp/tmpo6p2wpf9.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpo6p2wpf9.d(35): Error: no property `length` for type `string`\n/tmp/tmpo6p2wpf9.d(37):
    Error: no property `length` for type `string`\n/tmp/tmpo6p2wpf9.d(39): Error:
    no property `toChar` for type `immutable(char)`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpo6p2wpf9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n\
    \            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            \nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdsumr_rd.d(81): Error: found `unittest` instead of statement\n/tmp/tmpdsumr_rd.d(91):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpdsumr_rd.d(91):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdsumr_rd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < result.size(); ++i)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.size();\
    \ ++i)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i\
    \ + 1;\n            while(j < result.size() && result[j] == ' ')\n           \
    \ {\n                result[j] = '_';\n                ++j;\n            }\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcqn04t_d.d(22): Error: no property `size` for type `string`\n/tmp/tmpcqn04t_d.d(26):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpcqn04t_d.d(29):
    Error: no property `size` for type `string`\n/tmp/tmpcqn04t_d.d(34): Error: no
    property `size` for type `string`\n/tmp/tmpcqn04t_d.d(36): Error: cannot modify
    `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpcqn04t_d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for (int\
    \ i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n   \
    \     {\n            result[i] = '_';\n        }\n        else if (result[i] ==\
    \ ' ' && result[i+1] == ' ')\n        {\n            result[i] = '-';\n      \
    \  }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgze0g7nk.d(23): Error: no property `length` for type `string`\n/tmp/tmpgze0g7nk.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpgze0g7nk.d(31):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpgze0g7nk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n      \
    \      result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6jybvwx_.d(23): Error: no property `length` for type `string`\n/tmp/tmp6jybvwx_.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp6jybvwx_.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp6jybvwx_.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp6jybvwx_.d(39): Error:
    slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6jybvwx_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i].toChar();\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo6p2wpf9.d(27): Error: slice `result` is not mutable\n/tmp/tmpo6p2wpf9.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpo6p2wpf9.d(35): Error: no property `length` for type `string`\n/tmp/tmpo6p2wpf9.d(37):
    Error: no property `length` for type `string`\n/tmp/tmpo6p2wpf9.d(39): Error:
    no property `toChar` for type `immutable(char)`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpo6p2wpf9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1wd4v9v1.d(23): Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp1wd4v9v1.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp1wd4v9v1.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(37): Error:
    no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wd4v9v1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if (text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if (result.size()\
    \ > 2)\n    {\n        string temp = result;\n        result = \"\";\n       \
    \ \n        for (int i = 0; i < temp.size(); ++i)\n        {\n            if (temp[i]\
    \ == ' ')\n            {\n                result += temp[i];\n            }\n\
    \            else\n            {\n                result += temp[i] + \"-\";\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmjbad2jc.d(23): Error: no property `size` for type `string`\n/tmp/tmpmjbad2jc.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpmjbad2jc.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpmjbad2jc.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpmjbad2jc.d(40): Error: no
    property `size` for type `string`\n/tmp/tmpmjbad2jc.d(44): Error: slice `result`
    is not mutable\n/tmp/tmpmjbad2jc.d(48): Error: incompatible types for `(temp[cast(ulong)i])
    + ("-")`: `immutable(char)` and `string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpmjbad2jc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n  \
    \          result += \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv3wd1_f8.d(23): Error: no property `length` for type `string`\n/tmp/tmpv3wd1_f8.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpv3wd1_f8.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpv3wd1_f8.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpv3wd1_f8.d(39): Error:
    slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv3wd1_f8.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            for(int j = i; j <\
    \ text.length(); j++)\n            {\n                if(text[j] == ' ')\n   \
    \             {\n                    text[j] = '_';\n                }\n     \
    \       }\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            for(int j = i; j <\
    \ text.length(); j++)\n            {\n                if(text[j] == ' ')\n   \
    \             {\n                    text[j] = '-';\n                }\n     \
    \       }\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias\
    \ candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdpf771kv.d(21): Error: no property `length` for type `string`\n/tmp/tmpdpf771kv.d(25):
    Error: no property `length` for type `string`\n/tmp/tmpdpf771kv.d(29): Error:
    cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmpdpf771kv.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpdpf771kv.d(39): Error:
    no property `length` for type `string`\n/tmp/tmpdpf771kv.d(43): Error: cannot
    modify `immutable` expression `text[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpdpf771kv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string::iterator it = text.begin();\n\
    \    string::iterator end = text.end();\n    \n    for(; it != end; ++it)\n  \
    \  {\n        if(*it == ' ')\n            *it = '_';\n        else if(*it == '\
    \ ')\n            *it = '-';\n    }\n    \n    return text;\n}\nunittest\n{\n\
    \    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppa75ecrt.d(21): Error: use `.` for member lookup, not `::`\n/tmp/tmppa75ecrt.d(22):
    Error: use `.` for member lookup, not `::`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmppa75ecrt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n\
    \            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\"\
    );\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp\
    \ = temp.replace(\" \", \"_\");\n            \nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdsumr_rd.d(81): Error: found `unittest` instead of statement\n/tmp/tmpdsumr_rd.d(91):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpdsumr_rd.d(91):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdsumr_rd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxi_uij1z.d(27): Error: slice `result` is not mutable\n/tmp/tmpxi_uij1z.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpxi_uij1z.d(39): Error: slice `result` is not mutable\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxi_uij1z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1wd4v9v1.d(23): Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp1wd4v9v1.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp1wd4v9v1.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(37): Error:
    no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wd4v9v1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < result.size(); ++i)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.size();\
    \ ++i)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i\
    \ + 1;\n            while(j < result.size() && result[j] == ' ')\n           \
    \ {\n                result[j] = '_';\n                ++j;\n            }\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcqn04t_d.d(22): Error: no property `size` for type `string`\n/tmp/tmpcqn04t_d.d(26):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpcqn04t_d.d(29):
    Error: no property `size` for type `string`\n/tmp/tmpcqn04t_d.d(34): Error: no
    property `size` for type `string`\n/tmp/tmpcqn04t_d.d(36): Error: cannot modify
    `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpcqn04t_d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i\
    \ + 1;\n            while(j < result.length() && result[j] == ' ')\n         \
    \   {\n                result[j] = '_';\n                j++;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplv7ey9ol.d(22): Error: no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(26):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmplv7ey9ol.d(29):
    Error: no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(34): Error:
    no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(36): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmplv7ey9ol.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    size_t\
    \ i;\n    string result = \"\";\n    \n    for(i = 0; i < len; ++i)\n    {\n \
    \       if(text[i] == ' ')\n        {\n            result += text[i];\n      \
    \  }\n        else\n        {\n            result += text[i] + \"_\";\n      \
    \  }\n    }\n    \n    size_t j;\n    for(j = i; j < len; ++j)\n    {\n      \
    \  if(text[j] == ' ')\n        {\n            result += text[j];\n        }\n\
    \        else\n        {\n            result += text[j];\n        }\n    }\n \
    \   \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n\
    \    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir\
    \ Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa\
    \   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp98c_as0v.d(21): Error: no property `length` for type `string`\n/tmp/tmp98c_as0v.d(29):
    Error: slice `result` is not mutable\n/tmp/tmp98c_as0v.d(33): Error: incompatible
    types for `(text[i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp98c_as0v.d(42):
    Error: slice `result` is not mutable\n/tmp/tmp98c_as0v.d(46): Error: slice `result`
    is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp98c_as0v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1wd4v9v1.d(23): Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp1wd4v9v1.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp1wd4v9v1.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(37): Error:
    no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wd4v9v1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    string result = \"\";\n    \n    while (i < len)\
    \ {\n        if (text[i] == ' ') {\n            result += text[i];\n         \
    \   i++;\n        }\n        else if (text[i] == ' ' && text[i+1] == ' ') {\n\
    \            result += text[i];\n            i += 2;\n        }\n        else\
    \ {\n            result += text[i];\n            i++;\n        }\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n   \
    \ assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir\
    \ Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa\
    \   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpodmaqqgj.d(21): Error: no property `length` for type `string`\n/tmp/tmpodmaqqgj.d(28):
    Error: slice `result` is not mutable\n/tmp/tmpodmaqqgj.d(32): Error: slice `result`
    is not mutable\n/tmp/tmpodmaqqgj.d(36): Error: slice `result` is not mutable\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpodmaqqgj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy71glc0w.d(23): Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpy71glc0w.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpy71glc0w.d(35):
    Error: no property `size` for type `string`\n/tmp/tmpy71glc0w.d(37): Error: no
    property `size` for type `string`\n/tmp/tmpy71glc0w.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy71glc0w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    size_t\
    \ i;\n    string result = \"\";\n    \n    for (i = 0; i < len; ++i)\n    {\n\
    \        char c = text[i];\n        \n        if (c == ' ')\n        {\n     \
    \       if (i < len - 1 && text[i + 1] == ' ')\n                result += \"_\"\
    ;\n            else\n                result += c;\n        }\n        else\n \
    \           result += c;\n    }\n    \n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa9igr0yl.d(21): Error: no property `length` for type `string`\n/tmp/tmpa9igr0yl.d(32):
    Error: slice `result` is not mutable\n/tmp/tmpa9igr0yl.d(34): Error: slice `result`
    is not mutable\n/tmp/tmpa9igr0yl.d(37): Error: slice `result` is not mutable\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa9igr0yl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n \
    \           result += text[i];\n        }\n        else\n        {\n         \
    \   result += text[i] + '_';\n        }\n    }\n    \n    if(result.length() >\
    \ 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + '-';\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqktvu6xo.d(22): Error: no property `length` for type `string`\n/tmp/tmpqktvu6xo.d(26):
    Error: slice `result` is not mutable\n/tmp/tmpqktvu6xo.d(30): Error: incompatible
    types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmpqktvu6xo.d(34):
    Error: no property `length` for type `string`\n/tmp/tmpqktvu6xo.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpqktvu6xo.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpqktvu6xo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    \n  \
    \  for(size_t i = 0; i < len; ++i)\n    {\n        char c = text[i];\n       \
    \ \n        if(c == ' ')\n        {\n            if(i+1 < len && text[i+1] ==\
    \ ' ')\n                text[i] = '_';\n            else\n                text[i]\
    \ = '_';\n        }\n    }\n    \n    for(size_t i = 0; i < len; ++i)\n    {\n\
    \        char c = text[i];\n        \n        if(c == ' ')\n        {\n      \
    \      if(i+1 < len && text[i+1] == ' ')\n                text[i] = '_';\n   \
    \         else\n                text[i] = '_';\n        }\n    }\n    \n    return\
    \ text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa9gsc_7x.d(21): Error: no property `length` for type `string`\n/tmp/tmpa9gsc_7x.d(30):
    Error: cannot modify `immutable` expression `text[i]`\n/tmp/tmpa9gsc_7x.d(32):
    Error: cannot modify `immutable` expression `text[i]`\n/tmp/tmpa9gsc_7x.d(43):
    Error: cannot modify `immutable` expression `text[i]`\n/tmp/tmpa9gsc_7x.d(45):
    Error: cannot modify `immutable` expression `text[i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpa9gsc_7x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length; ++i)\n\
    \    {\n        if(text[i] == ' ') \n        {\n            string temp = text;\n\
    \            int j = i;\n            while(j < text.length && text[j] == ' ')\n\
    \            {\n                ++j;\n            }\n            string result\
    \ = temp.substr(0, j) + \"_\" + temp.substr(j);\n            for(int k = i; k\
    \ < j; ++k)\n            {\n                text[k] = result[k];\n           \
    \ }\n        }\n    }\n    return text;\n}\n</code>\n<|/ a tags=c++,string |>\n\
    <| c |>\nI didn't downvote, but I suspect it's because you didn't explain what\
    \ your code does. It's not obvious to me how this answers the question.\n<|/ c\
    \ |>\n<| c |>\nI added some explanation.\n<|/ c |>\n<| c |>\nI didn't downvote,\
    \ but I suspect it's because you didn't explain what your code does. It's not\
    \ obvious to me how this answers the question.\n<|/ c |>\n<| c |>\nI added some\
    \ explanation.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_8gemyfo.d(40): Error: declaration expected, not `<`\n/tmp/tmp_8gemyfo.d(43):
    Error: unterminated character constant\n/tmp/tmp_8gemyfo.d(43): Error: unterminated
    character constant\n/tmp/tmp_8gemyfo.d(43): Error: unterminated character constant\n/tmp/tmp_8gemyfo.d(43):
    Error: unterminated character constant\n/tmp/tmp_8gemyfo.d(49): Error: unterminated
    character constant\n/tmp/tmp_8gemyfo.d(49): Error: unterminated character constant\n/tmp/tmp_8gemyfo.d(49):
    Error: unterminated character constant\n/tmp/tmp_8gemyfo.d(49): Error: unterminated
    character constant\n/tmp/tmp_8gemyfo.d(63): Error: declaration expected, not `assert`\n/tmp/tmp_8gemyfo.d(64):
    Error: declaration expected, not `assert`\n/tmp/tmp_8gemyfo.d(65): Error: declaration
    expected, not `assert`\n/tmp/tmp_8gemyfo.d(66): Error: declaration expected, not
    `assert`\n/tmp/tmp_8gemyfo.d(67): Error: declaration expected, not `assert`\n/tmp/tmp_8gemyfo.d(68):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_8gemyfo.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    size_t\
    \ i;\n    \n    for(i = 0; i < len; ++i)\n    {\n        if(text[i] == ' ')\n\
    \        {\n            string s = text.substr(0, i);\n            string e =\
    \ text.substr(i + 1);\n            \n            if(s.length() > 2 && e.length()\
    \ > 2)\n            {\n                string t = s;\n                \n     \
    \           for(size_t j = 0; j < s.length() - 1; ++j)\n                {\n  \
    \                  if(s[j] == ' ')\n                    {\n                  \
    \      t += '_';\n                    }\n                    else\n          \
    \          {\n                        t += s[j];\n                    }\n    \
    \            }\n                \n                t += '-';\n                \n\
    \                for(size_t j = 0; j < e.length() - 1; ++j)\n                {\n\
    \                    if(e[j] == ' ')\n                    {\n                \
    \        t += '_';\n                    }\n                    else\n        \
    \            {\n                        t += e[j];\n                    }\n  \
    \              }\n                \n                t += '-';\n              \
    \  \n                text += t;\n            }\n        }\n    }\n    \n    return\
    \ text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8j_b4gab.d(21): Error: no property `length` for type `string`\n/tmp/tmp8j_b4gab.d(28):
    Error: no property `substr` for type `string`\n/tmp/tmp8j_b4gab.d(29): Error:
    no property `substr` for type `string`\n/tmp/tmp8j_b4gab.d(31): Error: no property
    `length` for type `string`\n/tmp/tmp8j_b4gab.d(31): Error: no property `length`
    for type `string`\n/tmp/tmp8j_b4gab.d(35): Error: no property `length` for type
    `string`\n/tmp/tmp8j_b4gab.d(39): Error: slice `t` is not mutable\n/tmp/tmp8j_b4gab.d(43):
    Error: slice `t` is not mutable\n/tmp/tmp8j_b4gab.d(47): Error: slice `t` is not
    mutable\n/tmp/tmp8j_b4gab.d(49): Error: no property `length` for type `string`\n/tmp/tmp8j_b4gab.d(53):
    Error: slice `t` is not mutable\n/tmp/tmp8j_b4gab.d(57): Error: slice `t` is not
    mutable\n/tmp/tmp8j_b4gab.d(61): Error: slice `t` is not mutable\n/tmp/tmp8j_b4gab.d(63):
    Error: slice `text` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8j_b4gab.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int\
    \ i = 0; i < text.length(); i++) {\n        char c = text[i];\n        \n    \
    \    if (c == ' ') {\n            result += \"_\";\n        } else {\n       \
    \     result += c;\n        }\n    }\n    \n    if (result.length() > 2) {\n \
    \       string last = \"\";\n        \n        for (int i = 0; i < result.length();\
    \ i++) {\n            char c = result[i];\n            \n            if (c ==\
    \ ' ') {\n                if (last == \" \") {\n                    result +=\
    \ \"-\";\n                } else {\n                    result += last;\n    \
    \            }\n            } else {\n                last = c;\n            }\n\
    \        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxj4gupni.d(23): Error: no property `length` for type `string`\n/tmp/tmpxj4gupni.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpxj4gupni.d(29): Error: slice `result`
    is not mutable\n/tmp/tmpxj4gupni.d(33): Error: no property `length` for type `string`\n/tmp/tmpxj4gupni.d(36):
    Error: no property `length` for type `string`\n/tmp/tmpxj4gupni.d(41): Error:
    slice `result` is not mutable\n/tmp/tmpxj4gupni.d(43): Error: slice `result` is
    not mutable\n/tmp/tmpxj4gupni.d(46): Error: cannot implicitly convert expression
    `c` of type `char` to `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxj4gupni.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpknt4srdi.d(27): Error: slice `result` is not mutable\n/tmp/tmpknt4srdi.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpknt4srdi.d(35): Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(37):
    Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(39): Error:
    incompatible types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and
    `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpknt4srdi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    stringstream ss(text);\n    string s;\n\
    \    while (ss >> s)\n    {\n        replace(s, \" \", \"_\");\n        replace(s,\
    \ \" \", \"_\");\n    }\n    return ss.str();\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\nThis doesn't work for \"Example 3\" because it doesn't replace\
    \ consecutive spaces with \"-\".\n<|/ c |>\n<| c |>\n: Yes, it does. Try it yourself.\n\
    <|/ c |>\n<| c |>\n: It does for me. Try it yourself.\n<|/ c |>\n<| c |>\n: I\
    \ see what you mean. I've updated my answer to fix that.\n<|/ c |>\n<| c |>\n\
    : I see what you mean. I've updated my answer to fix that.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6z4s4qv6.d(30): Error: declaration expected, not `<`\n/tmp/tmp6z4s4qv6.d(33):
    Error: unterminated character constant\n/tmp/tmp6z4s4qv6.d(33): Error: unterminated
    character constant\n/tmp/tmp6z4s4qv6.d(42): Error: unterminated character constant\n/tmp/tmp6z4s4qv6.d(45):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp6z4s4qv6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i\
    \ + 1;\n            while(j < result.length() && result[j] == ' ')\n         \
    \   {\n                result[j] = '_';\n                j++;\n            }\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't work if there are more than 2 consecutive spaces.\n<|/ c |>\n<| c\
    \ |>\nIt does. Try it yourself.\n<|/ c |>\n<| c |>\nIt doesn't work if there are\
    \ more than 2 consecutive spaces. Try it yourself. It doesn't work if there are\
    \ more than 2 consecutive spaces.\n<|/ c |>\n<| c |>\nIt doesn't work if there\
    \ are more than 2 consecutive spaces. Try it yourself. It doesn't work if there\
    \ are more than 2 consecutive spaces.\n<|/ c |>\n<| c |>\nIt doesn't work if there\
    \ are more than 2 consecutive spaces. Try it yourself. It doesn't work if there\
    \ are more than 2 consecutive spaces.\n<|/ c |>\n<| a tags=string,c++ |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdfjwoiuh.d(43): Error: declaration expected, not `<`\n/tmp/tmpdfjwoiuh.d(46):
    Error: unterminated character constant\n/tmp/tmpdfjwoiuh.d(52): Error: unterminated
    character constant\n/tmp/tmpdfjwoiuh.d(52): Error: unterminated character constant\n/tmp/tmpdfjwoiuh.d(55):
    Error: unterminated character constant\n/tmp/tmpdfjwoiuh.d(55): Error: unterminated
    character constant\n/tmp/tmpdfjwoiuh.d(58): Error: unterminated character constant\n/tmp/tmpdfjwoiuh.d(58):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpdfjwoiuh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxi_uij1z.d(27): Error: slice `result` is not mutable\n/tmp/tmpxi_uij1z.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpxi_uij1z.d(39): Error: slice `result` is not mutable\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxi_uij1z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n        else if(result[i] ==\
    \ ' ')\n        {\n            result[i] = '-';\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp93ql0um.d(23): Error: no property `length` for type `string`\n/tmp/tmpp93ql0um.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpp93ql0um.d(31):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpp93ql0um.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpofmlfbg6.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpofmlfbg6.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpofmlfbg6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int\
    \ i = 0; i < text.length; ++i)\n    {\n        if (text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if (result.length()\
    \ > 2)\n    {\n        result = result.substr(0, result.length() - 2);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4scnlcza.d(27): Error: slice `result` is not mutable\n/tmp/tmp4scnlcza.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmp4scnlcza.d(35): Error: no property `length` for type `string`\n/tmp/tmp4scnlcza.d(37):
    Error: no property `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4scnlcza.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1wd4v9v1.d(23): Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp1wd4v9v1.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp1wd4v9v1.d(35):
    Error: no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(37): Error:
    no property `length` for type `string`\n/tmp/tmp1wd4v9v1.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wd4v9v1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i\
    \ + 1;\n            while(j < result.length() && result[j] == ' ')\n         \
    \   {\n                result[j] = '_';\n                j++;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplv7ey9ol.d(22): Error: no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(26):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmplv7ey9ol.d(29):
    Error: no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(34): Error:
    no property `length` for type `string`\n/tmp/tmplv7ey9ol.d(36): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmplv7ey9ol.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpknt4srdi.d(27): Error: slice `result` is not mutable\n/tmp/tmpknt4srdi.d(31):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmpknt4srdi.d(35): Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(37):
    Error: no property `length` for type `string`\n/tmp/tmpknt4srdi.d(39): Error:
    incompatible types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and
    `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpknt4srdi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i =\
    \ 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n \
    \           result += text[i];\n        }\n        else\n        {\n         \
    \   result += text[i] + '_';\n        }\n    }\n    \n    if(result.length() >\
    \ 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + '-';\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9b1be_7g.d(22): Error: no property `length` for type `string`\n/tmp/tmp9b1be_7g.d(26):
    Error: slice `result` is not mutable\n/tmp/tmp9b1be_7g.d(30): Error: incompatible
    types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmp9b1be_7g.d(34):
    Error: no property `length` for type `string`\n/tmp/tmp9b1be_7g.d(36): Error:
    no property `length` for type `string`\n/tmp/tmp9b1be_7g.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp9b1be_7g.d", "-I/tmp"]\n'''
  stdout: b''
