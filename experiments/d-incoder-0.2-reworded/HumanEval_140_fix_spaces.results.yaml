name: HumanEval_140_fix_spaces
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            for(int j\
    \ = i + 1; j < result.length(); j++)\n            {\n                if(result[j]\
    \ == ' ')\n                {\n                    result[j] = '_';\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsgygbqnx.d(22): Error: no property `length` for type `string`\\\
    n/tmp/tmpsgygbqnx.d(26): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\\\
    n/tmp/tmpsgygbqnx.d(29): Error: no property `length` for type `string`\\n/tmp/tmpsgygbqnx.d(33):\
    \ Error: no property `length` for type `string`\\n/tmp/tmpsgygbqnx.d(37): Error:\
    \ cannot modify `immutable` expression `result[cast(ulong)j]`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsgygbqnx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxi_uij1z.d(27): Error: slice `result` is not mutable\\n/tmp/tmpxi_uij1z.d(31):\
    \ Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)`\
    \ and `string`\\n/tmp/tmpxi_uij1z.d(39): Error: slice `result` is not mutable\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxi_uij1z.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcjm187m3.d(23): Error: no property `length` for type `string`\\\
    n/tmp/tmpcjm187m3.d(27): Error: slice `result` is not mutable\\n/tmp/tmpcjm187m3.d(31):\
    \ Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)`\
    \ and `string`\\n/tmp/tmpcjm187m3.d(35): Error: no property `length` for type\
    \ `string`\\n/tmp/tmpcjm187m3.d(37): Error: no property `length` for type `string`\\\
    n/tmp/tmpcjm187m3.d(39): Error: incompatible types for `(result[cast(ulong)i])\
    \ + (\"-\")`: `immutable(char)` and `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcjm187m3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm7_6za45.d(23): Error: no property `length` for type `string`\\\
    n/tmp/tmpm7_6za45.d(27): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\\\
    n/tmp/tmpm7_6za45.d(31): Error: no property `length` for type `string`\\n/tmp/tmpm7_6za45.d(36):\
    \ Error: no property `length` for type `string`\\n/tmp/tmpm7_6za45.d(38): Error:\
    \ cannot modify `immutable` expression `result[cast(ulong)j]`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm7_6za45.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i =\
    \ 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n   \
    \         result += text[i];\n        }\n        else\n        {\n           \
    \ result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.size();\
    \ ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp77xaci0_.d(22): Error: no property `size` for type `string`\\\
    n/tmp/tmp77xaci0_.d(26): Error: slice `result` is not mutable\\n/tmp/tmp77xaci0_.d(30):\
    \ Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)`\
    \ and `string`\\n/tmp/tmp77xaci0_.d(34): Error: no property `size` for type `string`\\\
    n/tmp/tmp77xaci0_.d(38): Error: slice `result` is not mutable\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp77xaci0_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy71glc0w.d(23): Error: no property `size` for type `string`\\\
    n/tmp/tmpy71glc0w.d(27): Error: slice `result` is not mutable\\n/tmp/tmpy71glc0w.d(31):\
    \ Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)`\
    \ and `string`\\n/tmp/tmpy71glc0w.d(35): Error: no property `size` for type `string`\\\
    n/tmp/tmpy71glc0w.d(37): Error: no property `size` for type `string`\\n/tmp/tmpy71glc0w.d(39):\
    \ Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)`\
    \ and `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy71glc0w.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += \"_\";\n        }\n        else\n        {\n          \
    \  result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq_zhqbzy.d(23): Error: no property `length` for type `string`\\\
    n/tmp/tmpq_zhqbzy.d(27): Error: slice `result` is not mutable\\n/tmp/tmpq_zhqbzy.d(31):\
    \ Error: slice `result` is not mutable\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpq_zhqbzy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + '_';\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + '-';\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpghz_v7cp.d(27): Error: slice `result` is not mutable\\n/tmp/tmpghz_v7cp.d(31):\
    \ Error: incompatible types for `(result) += (cast(int)text[cast(ulong)i] + 95)`:\
    \ `string` and `int`\\n/tmp/tmpghz_v7cp.d(35): Error: no property `length` for\
    \ type `string`\\n/tmp/tmpghz_v7cp.d(37): Error: no property `length` for type\
    \ `string`\\n/tmp/tmpghz_v7cp.d(39): Error: cannot modify `immutable` expression\
    \ `result[cast(ulong)i]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpghz_v7cp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpknt4srdi.d(27): Error: slice `result` is not mutable\\n/tmp/tmpknt4srdi.d(31):\
    \ Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)`\
    \ and `string`\\n/tmp/tmpknt4srdi.d(35): Error: no property `length` for type\
    \ `string`\\n/tmp/tmpknt4srdi.d(37): Error: no property `length` for type `string`\\\
    n/tmp/tmpknt4srdi.d(39): Error: incompatible types for `(result[cast(ulong)i])\
    \ + (\"-\")`: `immutable(char)` and `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpknt4srdi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n\
    \            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\"\
    \ \", \"_\");\n            text = temp;\n        }\n    }\n    \n    for(int i\
    \ = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            string temp = text;\n            temp = temp.replace(text[i], \"\
    _\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n\
    \        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7o7l9gc5.d(21): Error: no property `length` for type `string`\\\
    n/tmp/tmp7o7l9gc5.d(26): Error: no property `replace` for type `string`\\n/tmp/tmp7o7l9gc5.d(27):\
    \ Error: no property `replace` for type `string`\\n/tmp/tmp7o7l9gc5.d(32): Error:\
    \ no property `length` for type `string`\\n/tmp/tmp7o7l9gc5.d(37): Error: no property\
    \ `replace` for type `string`\\n/tmp/tmp7o7l9gc5.d(38): Error: no property `replace`\
    \ for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7o7l9gc5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpofmlfbg6.d(23): Error: no property `length` for type `string`\\\
    n/tmp/tmpofmlfbg6.d(27): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\\\
    n/tmp/tmpofmlfbg6.d(31): Error: no property `length` for type `string`\\n/tmp/tmpofmlfbg6.d(36):\
    \ Error: no property `length` for type `string`\\n/tmp/tmpofmlfbg6.d(38): Error:\
    \ cannot modify `immutable` expression `result[cast(ulong)j]`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpofmlfbg6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    \n  \
    \  for(int i = 0; i < len; i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            string s = text.substr(0, i);\n            string t = text.substr(i\
    \ + 1, len - i - 1);\n            \n            if(s.length() > 2)\n         \
    \   {\n                string s2 = s.substr(0, s.length() - 2);\n            \
    \    string t2 = t.substr(0, t.length() - 2);\n                \n            \
    \    string result = s2 + t2;\n                \n                text = result;\n\
    \            }\n            else\n            {\n                string result\
    \ = s + \"-\" + t;\n                \n                text = result;\n       \
    \     }\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8y4_56gi.d(21): Error: no property `length` for type `string`\\\
    n/tmp/tmp8y4_56gi.d(27): Error: no property `substr` for type `string`\\n/tmp/tmp8y4_56gi.d(28):\
    \ Error: no property `substr` for type `string`\\n/tmp/tmp8y4_56gi.d(30): Error:\
    \ no property `length` for type `string`\\n/tmp/tmp8y4_56gi.d(32): Error: no property\
    \ `substr` for type `string`\\n/tmp/tmp8y4_56gi.d(33): Error: no property `substr`\
    \ for type `string`\\n/tmp/tmp8y4_56gi.d(35): Error: invalid array operation `s2\
    \ + t2` (possible missing [])\\n/tmp/tmp8y4_56gi.d(41): Error: invalid array operation\
    \ `s + \"-\"` (possible missing [])\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8y4_56gi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    size_t\
    \ i;\n    \n    for(i = 0; i < len; ++i)\n    {\n        if(text[i] == ' ')\n\
    \        {\n            if(i + 1 < len && text[i + 1] == ' ')\n            {\n\
    \                text[i] = '_';\n                ++i;\n            }\n       \
    \     else\n            {\n                text[i] = '_';\n            }\n   \
    \     }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate =\
    \ fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6n9fdv3h.d(21): Error: no property `length` for type `string`\\\
    n/tmp/tmp6n9fdv3h.d(30): Error: cannot modify `immutable` expression `text[i]`\\\
    n/tmp/tmp6n9fdv3h.d(35): Error: cannot modify `immutable` expression `text[i]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6n9fdv3h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1wd4v9v1.d(23): Error: no property `length` for type `string`\\\
    n/tmp/tmp1wd4v9v1.d(27): Error: slice `result` is not mutable\\n/tmp/tmp1wd4v9v1.d(31):\
    \ Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)`\
    \ and `string`\\n/tmp/tmp1wd4v9v1.d(35): Error: no property `length` for type\
    \ `string`\\n/tmp/tmp1wd4v9v1.d(37): Error: no property `length` for type `string`\\\
    n/tmp/tmp1wd4v9v1.d(39): Error: incompatible types for `(result[cast(ulong)i])\
    \ + (\"-\")`: `immutable(char)` and `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp1wd4v9v1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    size_t pos\
    \ = 0;\n    size_t len = result.size();\n    \n    while (pos < len) {\n     \
    \   char c = result[pos];\n        \n        if (c == ' ') {\n            size_t\
    \ next = pos+1;\n            while (next < len && result[next] == ' ') {\n   \
    \             next++;\n            }\n            if (next < len) {\n        \
    \        result[pos] = '_';\n                pos = next;\n            } else {\n\
    \                result[pos] = '-';\n                pos++;\n            }\n \
    \       } else {\n            pos++;\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz970dcis.d(23): Error: no property `size` for type `string`\\\
    n/tmp/tmpz970dcis.d(34): Error: cannot modify `immutable` expression `result[pos]`\\\
    n/tmp/tmpz970dcis.d(37): Error: cannot modify `immutable` expression `result[pos]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz970dcis.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0efiau0v.d(23): Error: no property `size` for type `string`\\\
    n/tmp/tmp0efiau0v.d(27): Error: slice `result` is not mutable\\n/tmp/tmp0efiau0v.d(31):\
    \ Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)`\
    \ and `string`\\n/tmp/tmp0efiau0v.d(35): Error: no property `size` for type `string`\\\
    n/tmp/tmp0efiau0v.d(39): Error: slice `result` is not mutable\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0efiau0v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    size_t\
    \ i;\n    string result = \"\";\n    \n    for (i = 0; i < len; ++i)\n    {\n\
    \        if (text[i] == ' ')\n        {\n            result += text[i];\n    \
    \    }\n        else if (text[i] == ' ' && text[i+1] == ' ')\n        {\n    \
    \        result += \"-\";\n        }\n        else\n        {\n            result\
    \ += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsargpzl5.d(21): Error: no property `length` for type `string`\\\
    n/tmp/tmpsargpzl5.d(29): Error: slice `result` is not mutable\\n/tmp/tmpsargpzl5.d(33):\
    \ Error: slice `result` is not mutable\\n/tmp/tmpsargpzl5.d(37): Error: slice\
    \ `result` is not mutable\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpsargpzl5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n      \
    \      result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppn26n7vt.d(23): Error: no property `length` for type `string`\\\
    n/tmp/tmppn26n7vt.d(27): Error: slice `result` is not mutable\\n/tmp/tmppn26n7vt.d(31):\
    \ Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)`\
    \ and `string`\\n/tmp/tmppn26n7vt.d(35): Error: no property `length` for type\
    \ `string`\\n/tmp/tmppn26n7vt.d(39): Error: slice `result` is not mutable\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppn26n7vt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length; ++i)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            string replacement\
    \ = string(\"_\");\n            for(int j = i; j < text.length; ++j)\n       \
    \     {\n                if(text[j] == ' ')\n                {\n             \
    \       replacement = string(\"_\") + replacement;\n                }\n      \
    \          else\n                {\n                    break;\n             \
    \   }\n            }\n            text = replace(text, i, i + 1, replacement);\n\
    \            i += replacement.length() - 1;\n        }\n    }\n    return text;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3g99jq52.d(25): Error: function expected before `()`, not `string`\
    \ of type `string`\\n/tmp/tmp3g99jq52.d(30): Error: function expected before `()`,\
    \ not `string` of type `string`\\n/tmp/tmp3g99jq52.d(37): Error: undefined identifier\
    \ `replace`\\n/tmp/tmp3g99jq52.d(38): Error: no property `length` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3g99jq52.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n      \
    \      result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6jybvwx_.d(23): Error: no property `length` for type `string`\\\
    n/tmp/tmp6jybvwx_.d(27): Error: slice `result` is not mutable\\n/tmp/tmp6jybvwx_.d(31):\
    \ Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)`\
    \ and `string`\\n/tmp/tmp6jybvwx_.d(35): Error: no property `length` for type\
    \ `string`\\n/tmp/tmp6jybvwx_.d(39): Error: slice `result` is not mutable\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6jybvwx_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
