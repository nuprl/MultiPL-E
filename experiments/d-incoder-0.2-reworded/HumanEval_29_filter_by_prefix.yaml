name: HumanEval_29_filter_by_prefix
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of strings\
  \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"\
  a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
  a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings,\
  \ string prefix) \n"
tests: "unittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
  \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
  , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
completions: ["{\n    string[] result = new string[strings.length];\n    for(int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nI like this solution, however it seems\
    \ that it only works with strings. I tried to change it to work with ints and\
    \ it didn't work. Do you know why it wouldn't work with ints?\n<|/ c |>\n<| c\
    \ |>\nIt should work with ints, as long as you change `string` to `int`. What\
    \ error are you getting?\n<|/ c |>\n<| c |>\nI changed it to work with ints and\
    \ it didn't work. I'm getting an error saying \"Cannot implicitly convert type\
    \ 'int' to 'string'\" on the line where I set result[i] = strings[i];\n<|/ c |>\n\
    <| c |>\nAh, I see what you're saying. You're trying to assign an `int` to a `string`.\
    \ You can't do that. I'll update my answer.\n<|/ c |>\n<| c |>\nI updated my answer\
    \ to show you how to fix that error. Let me know if that helps.\n<|/ c |>\n<|\
    \ a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];\nfor(int\
    \ i = 0; i < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\nThe above code will throw an exception\
    \ because you are trying to assign an int to a string array. \n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].StartsWith(prefix))\n        result[i] = strings[i].ToString();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=2 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\nThis code will throw an exception because you are trying to assign an\
    \ int to a string array. \n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i].ToString();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < string", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic static string[] FilterByPrefix(this\
    \ string[] strings, string prefix)\n{\n    var result = new List<string>();\n\
    \    foreach (var s in strings)\n    {\n        if (s.StartsWith(prefix))\n  \
    \      {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,linq dscore=0 |>\n<| a tags=c#,linq |>\n<code>\npublic\
    \ static string[] FilterByPrefix(this string[] strings, string prefix)\n{\n  \
    \  return strings.Where(s => s.StartsWith(prefix)).ToArray();\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=c#,linq |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=0 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).To",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].StartsWith(prefix)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,.net,linq,string |>\n<|\
    \ a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,.net,linq,string dscore=5 |>\n<| a tags=c#,.net,linq,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=5 |>\n<| a tags=c#,.net,linq,string |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=5\
    \ |>\n<| a dscore=5 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq,string |>\n<| a tags=c#,.net,linq,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=5 |>\n<| a dscore=5 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq,string\
    \ |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=5 tags=c#,.net,linq,string |>\n<| a tags=c#,.net,linq,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=5 |>\n<| a tags=c#,.net,linq,string |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=c#,.net,linq,string |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nI like your solution\
    \ but I think it would be better to use a `for` loop to iterate through the array\
    \ instead of `foreach`.\n<|/ c |>\n<| c |>\n: I agree that `for` loops are better,\
    \ but I wanted to keep it close to the OP's original code. `foreach` would also\
    \ work, but I find it more readable and easier to understand when you're not used\
    \ to the syntax of `foreach`.\n<|/ c |>\n<| c |>\nI agree with you that `foreach`\
    \ is more readable, but I find it more readable when you're not used to the syntax\
    \ of `foreach`. `for` loops are more readable and easier to understand when you're\
    \ used to the syntax of `for` loops.\n<|/ c |>\n<| c |>\n: I agree with you that\
    \ `for` loops are more readable, but I find it more readable when you're not used\
    \ to the syntax of `for` loops. `for` loops are more readable and easier to understand\
    \ when you're used to the syntax of `for` loops.\n<|/ c |>\n<| c |>\n: I agree\
    \ with you that `for` loops are more readable, but I find it more readable when\
    \ you're not used to the syntax of `for` loops. `for` loops are more readable\
    \ and easier to understand when you're used to the syntax of `for` loops.\n<|/\
    \ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\" };\nstring[] result =\
    \ strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. No need to use LINQ and no\
    \ need for extra variables. Just a one liner.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. No need to use LINQ and no need for extra variables.\
    \ Just a one liner.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No\
    \ need to use LINQ and no need for extra variables. Just a one liner.\n<|/ c |>\n\
    <| c ", "{\n    string[] result = new string[strings.length];\n    for(int i =\
    \ 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain a given substring.\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings) {\n        if(s.StartsWith(prefix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI like your solution. I'm going to try it out and see how it works. Thanks!\n\
    <|/ c |>\n<| c |>\nI added a version that uses `string[]` instead of `IEnumerable<string>`.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| c |>\nThis doesn't compile.\
    \ `Where` returns an `IEnumerable<string>`, not an `IEnumerable<string[]>`.\n\
    <|/ c |>\n<| c |>\n: It compiles fine for me. `string[]` is implicitly convertible\
    \ to `IEnumerable<string>`.\n<|/ c |>\n<| c |>\n: It compiles fine for me too.\
    \ `string[]` is implicitly convertible to `IEnumerable<string>`.\n<|/ c |>\n<|\
    \ c |>\n: It compiles fine for me too. `string[]` is implicitly convertible to\
    \ `IEnumerable<string>`.\n<|/ c |>\n<| c |>\n: It compiles fine for me too. `string[]`\
    \ is implicitly convertible to `IEnumerable<string>`.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=2 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=2\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nstring[] result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2\
    \ |>", "{\n    string[] result = new string[strings.length];\n    for(int i =\
    \ 0; i < strings.length; i++)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like your solution, however it would be better to use a `for`\
    \ loop instead of `foreach` since it would be more efficient and more readable.\n\
    <|/ c |>\n<| c |>\nI agree with you. I'll edit my answer to include a for loop.\n\
    <|/ c |>\n<| c |>\nI added a for loop to my answer. Thanks for your suggestion.\n\
    <|/ c |>\n<| c |>\nI added a for loop to my answer. Thanks for your suggestion.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_prefix(string[] strings,\
    \ string prefix)\n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; i++)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays |>\n<| c |>\nI like your solution, however it would be better\
    \ to use a `for` loop instead of `foreach` since it would be more efficient and\
    \ more readable.\n<|/ c |>\n<| a tags=c#,arrays |>\n<code>\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,arrays |>\n<code>\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,arrays |>\n<code>\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring\
    \ prefix = \"a\";\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"\
    a\";\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nstring[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a\
    \ tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"\
    a\";\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nstring[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a\
    \ tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"\
    a\";\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"\
    a\";\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n        {\n        \
    \    result[i] = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input array of strings only for ones that contain\
    \ a given substring.\n    >>> filter_by_substring([], \"a\")\n    []\n    >>>\
    \ filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"\
    abc\"]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input array of strings only for ones that contain\
    \ a given substring in a given order.\n    >>> filter_by_substring_order([], \"\
    a\", \"b\")\n    []\n    >>> filter_by_substring_order([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"a\", \"b\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_substring_order(string[]\
    \ strings, string substring, string order) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring)\
    \ && strings[i].Contains(order))\n        {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that contain a given substring in a given order.\n    >>> filter_by_substring_order_and_prefix([],\
    \ \"a\", \"b\")\n    []\n    >>> filter_by_substring_order_and_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\", \"b\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring_order_and_prefix(string[] strings, string substring, string\
    \ order) \n{\n    string[] result = new string[strings.length];\n    for(int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if(strings[i].", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"\
    a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not start with a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_not_prefix(string[] strings, string prefix) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not end with a given suffix.\n    >>> filter_by_not_",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"\
    a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain a given substring.\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.StartsWith(prefix))\n        {\n            result[i++] =\
    \ s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nI like your answer, but I think it would be better to use a `foreach`\
    \ loop to avoid the extra array allocations.\n<|/ c |>\n<| c |>\nI agree, I'll\
    \ update my answer with your suggestion.\n<|/ c |>\n<| c |>\nI added a version\
    \ that uses `foreach` instead of `for` loops.\n<|/ c |>\n<| c |>\nI like your\
    \ answer too, but I prefer my answer because it is more concise and easier to\
    \ read. :)\n<|/ c |>\n<| a dscore=2 |>\nI like your answer, but I think it would\
    \ be better to use a foreach loop to avoid the extra array allocations.\n<code>\n\
    string[] filter_by_prefix(string[] strings, string prefix) \n{\n    List<string>\
    \ result = new List<string>();\n    foreach(string s in strings)\n    {\n    \
    \    if(s.StartsWith(prefix))\n        {\n            result.Add(s);\n       \
    \ }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nI like your answer, but I think it would be better to use a `foreach`\
    \ loop to avoid the extra array allocations.\n<|/ c |>\n<| c |>\nI agree, I'll\
    \ update my answer with your suggestion.\n<|/ c |>\n<| c |>\nI added a version\
    \ that uses `foreach` instead of `for` loops.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_prefix(string[] strings, string prefix)\n{\n\
    \    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.StartsWith(prefix))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_prefix(string[] strings,\
    \ string prefix)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.StartsWith(prefix))\n        {\n\
    \            result.Add(s);\n        }\n    }\n    return result.", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\
    \ {\n        if (s.StartsWith(prefix)) {\n            result[i++] = s;\n     \
    \   }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,arrays |>\n\
    <| a tags=c#,linq,.net,arrays |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,arrays |>\n<| a tags=c#,linq,.net,arrays |>\n\
    <code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net,arrays |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=c#,linq,.net,arrays |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n\
    string[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=2 tags=c#,linq,.net,arrays |>\n<| a tags=c#,linq,.net,arrays |>\n\
    <code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,arrays\
    \ |>\n<| a tags=c#,linq,.net,arrays |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net,arrays\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.Starts", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"\
    a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"abc\", \"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring in a\
    \ given order.\n    >>> filter_by_substring_order([], \"a\", \"b\")\n    []\n\
    \    >>> filter_by_substring_order([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\", \"b\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring_order(string[]\
    \ strings, string substring, string order) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Contains(order))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input array of strings only for ones that\
    \ do not ", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I was able to get it working\
    \ with your help. I appreciate it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix)\n{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c# |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a tags=c# |>\n<code>\nstring[] filter_by_prefix(string[] strings, string prefix)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n  \
    \          result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question improves its\
    \ long-term value.\n<|/ c |>\n<| a tags=c# |>\n<code>\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c# |>\n<| a |>\n<code>\nstring[] filter_by_prefix(string[] strings,\
    \ string prefix)\n{\n    string[] result = ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nI came up with this:\n<code>\npublic static\
    \ IEnumerable<string> FilterByPrefix(this IEnumerable<string> strings, string\
    \ prefix)\n{\n    return strings.Where(s => s.StartsWith(prefix));\n}\n</code>\n\
    <|/ a tags=c#,linq,.net,string |>\n<| a dscore=2 |>\n<code>\npublic static IEnumerable<string>\
    \ FilterByPrefix(this IEnumerable<string> strings, string prefix)\n{\n    return\
    \ strings.Where(s => s.StartsWith(prefix));\n}\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\npublic static IEnumerable<string>\
    \ FilterByPrefix(this IEnumerable<string> strings, string prefix)\n{\n    return\
    \ strings.Where(s => s.StartsWith(prefix));\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=c#,linq,.net,string |>\n<code>\npublic static IEnumerable<string> FilterByPrefix(this\
    \ IEnumerable<string> strings, string prefix)\n{\n    return strings.Where(s =>\
    \ s.StartsWith(prefix));\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\npublic static IEnumerable<string> FilterByPrefix(this IEnumerable<string>\
    \ strings, string prefix)\n{\n    return strings.Where(s => s.StartsWith(prefix));\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\npublic static IEnumerable<string>\
    \ FilterByPrefix(this IEnumerable<string> strings, string prefix)\n{\n    return\
    \ strings.Where(s => s.StartsWith(prefix));\n}\n</code>\n<|/ a dscore=2 tags=c#,linq,.net,string\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\npublic static IEnumerable<string>\
    \ FilterByPrefix(this IEnumerable<string> strings, string prefix)\n{\n    return\
    \ strings.Where(s => s.StartsWith(", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a tags=c#,linq dscore=0 |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 ", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThanks for your answer! I tried to implement it but I'm getting an error\
    \ on `string[] result = new string[strings.length];` saying `Cannot implicitly\
    \ convert type 'string[]' to 'string'`. Any ideas?\n<|/ c |>\n<| c |>\nOops, I\
    \ forgot to change that line to `string[] result = new string[strings.length];`.\
    \ Fixed now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix)\n{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nstring[] filter_by_prefix(string[] strings, string prefix)\n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = string", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.StartsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work if you have a string like \"a_b_c\"\
    \n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. The OP didn't\
    \ specify what should happen if there are multiple matches. I assumed that there\
    \ would be only one match. I'll add that to the answer.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it doesn't work. Try it with this input: \n`[\"abc\", \"bcd\"\
    , \"cde\", \"array\", \"a_b_c\"]`\n<|/ c |>\n<| c |>\nI tested it and it does\
    \ work. Try it with this input: `[\"abc\", \"bcd\", \"cde\", \"array\", \"a_b_c\"\
    ]`\n<|/ c |>\n<| c |>\nI tested it and it does work. Try it with this input: `[\"\
    abc\", \"bcd\", \"cde\", \"array\", \"a_b_c\"]`\n<|/ c |>\n<| a tags=c#,string,arrays,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if you have a string like\
    \ \"a_b_c\"\n<|/ c |>\n<| c |>\nIt does work. Try it with this input: `[\"abc\"\
    , \"bcd\", \"cde\", \"array\", \"a_b_c\"]`\n<|/ c |>\n<| c |>\nI tested it and\
    \ it does work. Try it with this input: `[\"abc\", \"bcd\", \"cde\", \"array\"\
    , \"a_b_c\"]`\n<|/ c |>\n<| c |>\nI tested it and it does work. Try it with this\
    \ input: `[\"abc\", \"bcd\", \"cde\", \"array\", \"a_b_c\"]`\n<|/ c |>\n<| c |>\n\
    I tested it and it does work. Try it with this input: `[\"abc\", \"bcd\", \"cde\"\
    , \"array\", \"a_b_c\"]`\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bcd\", \"cde\", \"array\", \"a_b_c\" };\nvar result\
    \ = strings.Where(s => s.Star", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    for (; i\
    \ < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain a given substring.\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    for (; i\
    \ < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not start with a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"array\"]\n    \n*/\nstring[]\
    \ filter_by_not_prefix(string[] strings, string prefix) \n{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].StartsWith(prefix))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter ", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI believe\
    \ this would fail if you had a prefix of \"a\" in the middle of the string. For\
    \ example, if you had \"abca\" it would return \"abca\" instead of \"abc\".\n\
    <|/ c |>\n<| c |>\n: I believe that would fail if you had a prefix of \"a\" in\
    \ the middle of the string. For example, if you had \"abca\" it would return \"\
    abca\" instead of \"abc\".\n<|/ c |>\n<| c |>\n: I believe that would fail if\
    \ you had a prefix of \"a\" in the middle of the string. For example, if you had\
    \ \"abca\" it would return \"abca\" instead of \"abc\".\n<|/ c |>\n<| c |>\n:\
    \ I believe that would fail if you had a prefix of \"a\" in the middle of the\
    \ string. For example, if you had \"abca\" it would return \"abca\" instead of\
    \ \"abc\".\n<|/ c |>\n<| c |>\n: I believe that would fail if you had a prefix\
    \ of \"a\" in the middle of the string. For example, if you had \"abca\" it would\
    \ return \"abca\" instead of \"abc\".\n<|/ c |>\n<| a dscore=2 |>\n<code>\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix)\n{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=2\
    \ |>\n<code>\nstring[] filter_by_prefix(string[] strings, string prefix)\n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach(string s in\
    \ strings) {\n        if(s.StartsWith(prefix)) {\n            result[i++] = s;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a dscore=2 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\nvar ",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static string[] FilterByPrefix(this\
    \ string[] strings, string prefix)\n{\n    var result = new List<string>();\n\
    \    foreach (var s in strings)\n    {\n        if (s.StartsWith(prefix))\n  \
    \      {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a dscore=1 |>\n<code>\nstring[] result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a dscore=1 |>\n<code>\nstring[] result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a\
    \ tags=c#,linq,.net |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net |>\n<code>\nstring[] result\
    \ = ", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n\
    \    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n \
    \       {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,arrays,linq |>\n<| c |>\nI like your solution, however\
    \ it seems like it would be more efficient to just use a foreach loop and a boolean\
    \ flag to determine if the string starts with the prefix.\n<|/ c |>\n<| c |>\n\
    I agree, that would be more efficient. However, the OP asked for a LINQ solution.\
    \ He didn't ask for a more efficient solution, just one that uses LINQ. Also,\
    \ if you wanted to use LINQ, you would have to do `strings.Where(s => s.StartsWith(prefix))`\
    \ instead of `strings.Where(s => s.StartsWith(prefix)).ToArray()`\n<|/ c |>\n\
    <| c |>\nI agree that your solution is more efficient, but I believe that your\
    \ solution is more readable and easier to understand.\n<|/ c |>\n<| c |>\nI agree\
    \ that your solution is more readable, but I believe that your solution is more\
    \ efficient and easier to understand.\n<|/ c |>\n<| c |>\nI agree that your solution\
    \ is more efficient, but I believe that your solution is more readable and easier\
    \ to understand.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,arrays,linq |>\n\
    <| c |>\nThis doesn't answer the question. He asked for a LINQ solution. He didn't\
    \ ask for a more efficient solution, just one that uses LINQ.\n<|/ c |>\n<| c\
    \ |>\nI agree, that would be more efficient. However, the OP asked for a LINQ\
    \ solution. He didn't ask for a more efficient solution, just one that uses LINQ.\
    \ Also, if you wanted to use LINQ, you would have to do `strings.Where(s => s.StartsWith(prefix))`\
    \ instead of `strings.Where(s => s.StartsWith(prefix)).ToArray()`\n<|/ c |>\n\
    <| c |>\nI agree that your solution is more efficient, but I believe that your\
    \ solution is more readable and easier to understand.\n<|/ c |>\n<| c |>\nI agree\
    \ that your solution is more efficient", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"\
    a\";\nstring[] result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nstring[] stringArray = new string[]\
    \ { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n\
    <|/ a dscore=2 tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] stringArray = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\n\
    string prefix = \"a\";\nstring[] result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"\
    a\";\nstring[] result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"\
    a\";\nstring[] result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"\
    a\";\nstring[] result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = new\
    \ string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\n\
    string[] result = stringArray.Where(s => ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThanks so much! This was exactly what\
    \ I needed. I'm new to C# and I didn't know about this method. Thanks again!\n\
    <|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n\
    \    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=c#,arrays,string |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. `result` will be `null` after the `for` loop. `result` needs to\
    \ be initialized before the loop.\n<|/ c |>\n<| c |>\n: Yes, I missed that part.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a tags=c#,arrays,string |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,arrays,string |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,arrays,string |>\n\
    <| a tags=c#,arrays,string |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,arrays,string\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,arrays,string |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain a given substring.\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n\
    \    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].StartsWith(prefix)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ array of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i) {\n        if (strings[i].EndsWith(suffix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input array of strings only for ones that contain a given substring.\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        if (strings[i].Contains(substring)) {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (!strings[i].Contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input array of strings only for ones that do not contain a given\
    \ substring.\n    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (!strings[i].Contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ array of strings only for ones that do not contain a given substring.\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"\
    a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; i++)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring in a\
    \ given order.\n    >>> filter_by_substring_order([], \"a\", \"b\")\n    []\n\
    \    >>> filter_by_substring_order([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\", \"b\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring_order(string[]\
    \ strings, string substring, string order) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].Contains(substring)\
    \ && strings[i].Contains(order))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input array of strings only for ones that\
    \ do not contain a ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar input = \"abc def\
    \ ghi jkl mno pqr stu\";\nvar result = input.Split(' ').Where(x => x.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string |>\n<| a dscore=0 |>\n<code>\n\
    string input = \"abc def ghi jkl mno pqr stu\";\nstring prefix = \"a\";\nstring[]\
    \ result = input.Split(' ').Where(x => x.StartsWith(prefix)).ToArray();\n</code>\n\
    <|/ a tags=c#,string |>\n<| a dscore=0 |>\n<code>\nstring input = \"abc def ghi\
    \ jkl mno pqr stu\";\nstring prefix = \"a\";\nstring[] result = input.Split('\
    \ ').Where(x => x.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,string\
    \ |>\n<| a tags=c#,string |>\n<code>\nstring input = \"abc def ghi jkl mno pqr\
    \ stu\";\nstring prefix = \"a\";\nstring[] result = input.Split(' ').Where(x =>\
    \ x.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring input = \"abc def ghi jkl mno pqr stu\";\nstring prefix =\
    \ \"a\";\nstring[] result = input.Split(' ').Where(x => x.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,string |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation of what your code does and how it solves the\
    \ problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<|\
    \ c |>\nWhile this code may provide a solution to the question, it's better to\
    \ add context as to why/how it works. This can help future users learn, and apply\
    \ that knowledge to their own code. You are also likely to have positive feedback\
    \ from users in the form of upvotes, when the code is explained.\n<|/ c |>\n<| ",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach\
    \ (string s in strings) {\n        if (s.StartsWith(prefix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq |>\n\
    <| c |>\nThis doesn't answer the question. OP wants something that uses LINQ,\
    \ not loops.\n<|/ c |>\n<| c |>\n: I added a LINQ version. Thanks for pointing\
    \ out the mistake.\n<|/ c |>\n<| c |>\n: I added a LINQ version. Thanks for pointing\
    \ out the mistake.\n<|/ c |>\n<| c |>\n: I added a LINQ version. Thanks for pointing\
    \ out the mistake.\n<|/ c |>\n<| c |>\n: I added a LINQ version. Thanks for pointing\
    \ out the mistake.\n<|/ c |>\n<| a tags=c#,linq |>\n<code>\nstring[] result =\
    \ strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants something that uses\
    \ LINQ, not loops.\n<|/ c |>\n<| c |>\n: I added a LINQ version. Thanks for pointing\
    \ out the mistake.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=c#,linq |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=2 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"\
    a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that match a regular expression.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_regex(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (Regex.Match(strings[i],\
    \ regex).Success)\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input array of strings only for ones that match a regular expression.\n\
    \    >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[]\
    \ filter_by_regex(string[] strings, string regex, RegexOptions options) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (Regex.Match(strings[i], regex, options).Success)\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that match a regular expression.\n \
    \   >>> filter_by_regex([], \"a\")", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    for (; i\
    \ < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain a given substring.\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    for (; i\
    \ < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not start with a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_not_prefix(string[] strings, string prefix) \n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].StartsWith(prefix))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n/*\n", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,arrays |>\n<|\
    \ c |>\nI like your solution, however it only works if you know that the prefix\
    \ is always going to be the same length. Otherwise you would have to do something\
    \ like `string[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();`\n\
    <|/ c |>\n<| c |>\nYes, that's true. That's why I said \"if you know that the\
    \ prefix is always going to be the same length\"\n<|/ c |>\n<| c |>\nI like your\
    \ solution, however it only works if you know that the prefix is always going\
    \ to be the same length. Otherwise you would have to do something like `string[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();`\n<|/ c |>\n<|\
    \ c |>\nI like your solution, however it only works if you know that the prefix\
    \ is always going to be the same length. Otherwise you would have to do something\
    \ like `string[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();`\n\
    <|/ c |>\n<| c |>\nI like your solution, however it only works if you know that\
    \ the prefix is always going to be the same length. Otherwise you would have to\
    \ do something like `string[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();`\n\
    <|/ c |>\n<| a tags=c#,linq,.net,arrays |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI\
    \ like your solution, however it only works if you know that the prefix is always\
    \ going to be the same length. Otherwise you would have to do something like `string[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();`\n<|/ c |>\n<|\
    \ a tags=c#,linq,.net,arrays |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like\
    \ your solution, however it only works if you know that the prefix is always going\
    \ to be the same length. Otherwise you would have to do something like `string[]\
    \ result = strings.Where(s => s.Starts", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that match a given regex.\n    >>> filter_by_regex([], \"a\")\n    []\n\
    \    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"\
    abc\"]\n    \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(Regex.Match(strings[i], regex))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that match a given regex.\n    >>> filter_by_regex([], \"a\")\n\
    \    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \n*/\nstring[] filter_by_regex(string[] strings, Regex regex)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(regex.Match(strings[i]))\n       \
    \     result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ array of strings only for ones that match a given regex.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays,string\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] filterByPrefix(string[] strings, string\
    \ prefix)\n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays,string |>\n<| c |>\nPlease add some explanation to your answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] filterByPrefix(string[] strings,\
    \ string prefix)\n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays,string |>\n<| c |>\nPlease add some explanation to your answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] filterByPrefix(string[] strings,\
    \ string prefix)\n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays,string |>\n<| c |>\nPlease add some explanation to your answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] filterByPrefix(string[] strings,\
    \ string prefix)\n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays,string |>\n<| a tags=c#,arrays,string |>\n<code>\nstring[]\
    \ filterByPrefix(string[] strings, string prefix)\n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,arrays,string\
    \ |>", "{\n    string[] result = new string[strings.length];\n    for(int i =\
    \ 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\n\
    string[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays dscore=0\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n", "{\n  \
    \  string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThanks for your answer! I didn't know about `StartsWith`. However, I still\
    \ don't understand why my code doesn't work. Could you please explain why my code\
    \ doesn't work?\n<|/ c |>\n<| c |>\nI added some explanation to my answer. Hope\
    \ it helps.\n<|/ c |>\n<| a dscore=1 |>\nThe problem is with your if statement.\
    \ You're comparing strings with == instead of StartsWith. \n<code>\nif (strings[i]\
    \ == \"a\") \n</code>\nshould be\n<code>\nif (strings[i].StartsWith(\"a\"))\n\
    </code>\n<|/ a tags=c#,linq |>\n<| c |>\nThanks for your answer! I didn't know\
    \ about `StartsWith`. However, I still don't understand why my code doesn't work.\
    \ Could you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\nBecause\
    \ you're comparing strings with `==` instead of `StartsWith`. `StartsWith` returns\
    \ a boolean value that tells you if the string starts with the given prefix.\n\
    <|/ c |>\n<| a tags=c#,linq |>\n<code>\nstring[] strings = new string[] { \"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\" };\nstring[] result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer! I didn't know about `StartsWith`. However,\
    \ I still don't understand why my code doesn't work. Could you please explain\
    \ why my code doesn't work?\n<|/ c |>\n<| c |>\nBecause you're comparing strings\
    \ with `==` instead of `StartsWith`. `StartsWith` returns a boolean value that\
    \ tells you if the string starts with the given prefix.\n<|/ c |>\n<| a |>\n<code>\n\
    string[] strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\" };\nstring[] result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=1 tags=c#,linq |>\n<| c |>\nThanks for\
    \ your ", "{\n    string[] result = new string[strings.length];\n    for(int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq,.net,string,arrays |>\n<| c |>\nThanks for your answer. I will\
    \ try this out and let you know how it goes.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I will try this out and let you know how it goes.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I will try this out and let you know how it goes.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. I will try this out and let you know\
    \ how it goes.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string,arrays\
    \ |>\n<| c |>\nThanks for your answer. I will try this out and let you know how\
    \ it goes.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bcd\", \"cde\", \"array\" };\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string,arrays |>\n<| c |>\n\
    Thanks for your answer. I will try this out and let you know how it goes.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bcd\", \"cde\", \"array\" };\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string,arrays |>\n<| c |>\n\
    Thanks for your answer. I will try this out and let you know how it goes.\n<|/\
    \ c |>\n<| a tags=c#,linq,.net,string,arrays |>\n<code>\nstring[] strings = new\
    \ string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI really like this solution, but I really don't understand\
    \ how it works. Can you explain it a little bit?\n<|/ c |>\n<| c |>\nI added some\
    \ comments to the code. Hope it helps.\n<|/ c |>\n<| c |>\nI added some comments\
    \ to the code. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ bool IsPrefix(string input, string prefix)\n{\n    if (input.Length < prefix.Length)\n\
    \        return false;\n    return input.StartsWith(prefix);\n}\n</code>\n<|/\
    \ a tags=c#,string,prefix |>\n<| c |>\nThis doesn't work. Try it with `IsPrefix(\"\
    ab\", \"ab\")`\n<|/ c |>\n<| c |>\nIt doesn't work because `StartsWith` doesn't\
    \ consider `prefix` as a prefix of `input`\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ static bool IsPrefix(string input, string prefix)\n{\n    if (input.Length <\
    \ prefix.Length)\n        return false;\n    return input.StartsWith(prefix);\n\
    }\n</code>\n<|/ a tags=c#,string,prefix |>\n<| c |>\nThis doesn't work. Try it\
    \ with `IsPrefix(\"ab\", \"ab\")`\n<|/ c |>\n<| c |>\nIt doesn't work because\
    \ `StartsWith` doesn't consider `prefix` as a prefix of `input`\n<|/ c |>\n<|\
    \ a tags=c#,string,prefix |>\n<code>\npublic static bool IsPrefix(string input,\
    \ string prefix)\n{\n    if (input.Length < prefix.Length)\n        return false;\n\
    \    return input.StartsWith(prefix);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. Try it with `IsPrefix(\"ab\", \"ab\")`\n<|/ c |>\n<| c |>\n\
    It doesn't work because `StartsWith` doesn't consider `prefix` as a prefix of\
    \ `input`\n<|/ c |>\n<| a tags=c#,string,prefix |>\n<code>\npublic static bool\
    \ IsPrefix(string input, string prefix)\n{\n", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"\
    a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bcd\", \"cde\"]\n\
    \    \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain a given suffix.\n    >>> filter_by_not_suffix([],\
    \ \"a\")", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\"));\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\"));\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\"));\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\"));\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\"));\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\"));\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\"));\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\"));\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\"));\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\"));\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\"));\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => ", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\
    \ {\n        if (s.StartsWith(prefix)) {\n            result[i++] = s;\n     \
    \   }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't work. `string[] result = new string[strings.length];` will throw an\
    \ `IndexOutOfRangeException` because `strings.length` is `0`.\n<|/ c |>\n<| c\
    \ |>\nThanks, I fixed the code - I missed the fact that string[] strings is passed\
    \ in.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.StartsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=2 |>\n<code>\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.StartsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result =\
    \ new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n\
    \        if (s.StartsWith(prefix)) {\n            result[i++] = s;\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\
    \ {\n        if (s.StartsWith(prefix)) {\n            result[i++] = s;\n     \
    \   }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_prefix(string[] strings,\
    \ string prefix) \n{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    for (string s : strings) {\n        if (s.StartsWith(prefix)) {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,.net,string,arrays\
    \ |>\n<| a tags=c#,.net,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,.net,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,.net,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,.net,string,arrays |>\n<| a tags=c#,.net,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,.net,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,.net,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work. `string[] result = new string[strings.length];`\
    \ will throw an `IndexOutOfRangeException` because `strings.length` is `0` at\
    \ this point. `strings[strings.length]` will throw an `IndexOutOfRangeException`\
    \ because `strings.length` is `0` at this point. `strings[strings.length]` will\
    \ throw an `IndexOutOfRangeException` because `strings.length` is `0` at this\
    \ point. `strings[strings.length]` will throw an `IndexOutOfRangeException` because\
    \ `strings.length` is `0` at this point. `strings[strings.length]` will throw\
    \ an `IndexOutOfRangeException` because `strings.length` is `0` at this point.\
    \ `strings[strings.length]` will throw an `IndexOutOfRangeException` because `strings.length`\
    \ is `0` at this point. `strings[strings.length]` will throw an `IndexOutOfRangeException`\
    \ because `strings.length` is `0` at this point. `strings[strings.length]` will\
    \ throw an `IndexOutOfRangeException` because `strings.length` is `0` at this\
    \ point. `strings[strings.length]` will throw an `IndexOutOfRangeException` because\
    \ `strings.length` is `0` at this point. `strings[strings.length]` will throw\
    \ an `IndexOutOfRangeException` because `strings.length` is `0` at this point.\
    \ `strings[strings.length]` will throw an `IndexOutOfRangeException` because `strings.length`\
    \ is `0` at this point. `strings[strings.length]` will throw an `IndexOutOfRangeException`\
    \ because `strings.length` is `0` at this point. `strings[strings.length]` will\
    \ throw an `IndexOutOfRangeException` because `strings.length` is `0` at this\
    \ point. `strings[strings.length]` will throw an `IndexOutOfRangeException` because\
    \ `strings.length` is `0` at this point. `strings[strings.length]` will throw\
    \ an `IndexOutOfRangeException` because `strings.length` is `0` at this point.\
    \ `strings[strings.length]` will throw an `IndexOutOfRangeException` because `strings.length`\
    \ is `0` at this point. `string", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\nI used the code from and added a little bit of error\
    \ handling.\n<code>\npublic static string[] filter_by_prefix(string[] strings,\
    \ string prefix)\n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\npublic static string[] FilterByPrefix(this string[]\
    \ strings, string prefix)\n{\n    var result = new List<string>();\n    foreach\
    \ (var s in strings)\n    {\n        if (s.StartsWith(prefix))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ doesn't work for me. `string[] result = new string[strings.length];` throws\
    \ an error saying `Cannot implicitly convert type 'string[]' to 'string'`\n<|/\
    \ c |>\n<| c |>\nI fixed the code in the answer. Sorry for the confusion.\n<|/\
    \ c |>\n<| c |>\nI fixed the code in the answer. Sorry for the confusion.\n<|/\
    \ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings is an array of strings. You can't assign\
    \ it to an array of strings. You have to assign it to an array of strings.\n<code>\n\
    string[] result = new string[strings.Length];\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];\n</code>\n\
    This line is wrong. strings is an array of strings. You can't assign it to an\
    \ array of strings. You have to assign it to an array of strings.\n<code>\nstring[]\
    \ result = new string[strings.Length];\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings is an array of strings. You can't assign\
    \ it to an array of strings. You have to assign it to an array of strings.\n<code>\n\
    string[] result = new string[strings.Length];\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings is an array of strings. You can't assign\
    \ it to an array of strings. You have to assign it to an array of strings.\n<code>\n\
    string[] result = new string[strings.Length];\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings is an array of strings. You can't assign\
    \ it to an array of strings. You have to assign it to an array of strings.\n<code>\n\
    string[] result = new string[strings.Length];\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=c#,string,arrays |>\n<code>\nstring[] result = ", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n  \
    \  []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings, string\
    \ suffix) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring in a\
    \ given order.\n    >>> filter_by_substring_order([], \"a\", true)\n    []\n \
    \   >>> filter_by_substring_order([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    , true)\n    [\"abc\"]\n    \n*/\nstring[] filter_by_substring_order(string[]\
    \ strings, string substring, bool in_order) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(in_order)\n  \
    \      {\n            if(strings[i].Contains(substring))\n                result[i]\
    \ = strings[i];\n        }\n        else\n        {\n            bool found =\
    \ false;\n            for(int j = 0; j < i; ++j)", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i) {\n  \
    \      if (strings[i].StartsWith(prefix)) {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a tags=c#,linq,arrays\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't answer the question, which is\
    \ about LINQ, not LINQ-to-Objects.\n<|/ c |>\n<| c |>\n: It does. `Where` returns\
    \ an `IEnumerable<string>`, which is then converted to an `Array` via `ToArray`.\n\
    <|/ c |>\n<| c |>\n: It does answer the question as asked, which is about LINQ,\
    \ not LINQ-to-Objects. `Where` returns an `IEnumerable<string>`, which is then\
    \ converted to an `Array` via `ToArray`.\n<|/ c |>\n<| c |>\n: It does answer\
    \ the question as asked, which is about LINQ, not LINQ-to-Objects. `Where` returns\
    \ an `IEnumerable<string>`, which is then converted to an `Array` via `ToArray`.\n\
    <|/ c |>\n<| c |>\n: It does answer the question as asked, which is about LINQ,\
    \ not LINQ-to-Objects. `Where` returns an `IEnumerable<string>`, which is then\
    \ converted to an `Array` via `ToArray`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    string[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=c#,linq,arrays |>\n<| a dscore=2 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,arrays |>\n\
    <| a dscore=2 |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,arrays |>\n<| a |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a\
    \ tags=c#,linq,arrays dscore=2 |>\n<| a |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.Star", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string ", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis doesn't answer the question. He wants to filter out all strings\
    \ that don't start with a given prefix.\n<|/ c |>\n<| c |>\n: I see your point.\
    \ I edited my answer to reflect that.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays,string |>\n<| a tags=c#,arrays,string |>\n<code>\nstring[]\
    \ array = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\" };\nstring prefix = \"a\";\nvar result = array.Where(x => x.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Simple\
    \ and effective.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Simple\
    \ and effective.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Simple\
    \ and effective.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Simple\
    \ and effective.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Simple\
    \ and effective.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nstring[] array = new string[]\
    \ { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\" };\n\
    string prefix = \"a\";\nvar result = array.Where(x => x.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,arrays,string |>\n<| a dscore=5 |>\n<code>\nstring[] array\
    \ = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\" };\nstring prefix = \"a\";\nvar result = array.Where(x => x.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,arrays,string |>\n<| a dscore=5 |>\n<code>\nstring[] array\
    \ = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\" };\nstring prefix = \"a\";\nvar result = array.Where(x => x.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,arrays,string |>\n<| a tags=c#,arrays,string |>\n<code>\n\
    string[] array = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\" };\nstring prefix = \"a", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.StartsWith(prefix))\n        {\n            result[i++] =\
    \ s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].StartsWith(prefix))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i) {\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i) {\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\
    \ {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] result =\
    \ new string[strings.length];\nfor (int i = 0; i < strings.length; ++i) {\n  \
    \  if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a dscore=0 tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i) {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\
    \ {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].StartsWith(prefix)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].StartsWith(prefix))\
    \ {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i) {\n    if (strings[i].StartsWith(prefix)) {\n\
    \        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].StartsWith(prefix))\
    \ {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i) {\n    if (strings[i].StartsWith(prefix)) {\n\
    \        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].StartsWith(prefix))\
    \ {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].StartsWith(prefix))\
    \ {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0;\
    \ i < strings.length; ++i) {\n    if (strings[i].StartsWith(prefix)) {\n     \
    \   result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].StartsWith(prefix))\
    \ {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore", "{\n \
    \   string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings) {\n        if (s.StartsWith(prefix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result\
    \ = strings.Where(s => s.StartsWith(\"a", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.StartsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify\
    \ that I'm looking for a solution that doesn't use LINQ. I'm looking for a solution\
    \ that doesn't use LINQ at all. I've edited my question to reflect this.\n<|/\
    \ c |>\n<| c |>\nI added a solution without LINQ\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. I'm sorry I didn't specify that I'm looking for a solution that\
    \ doesn't use LINQ. I'm looking for a solution that doesn't use LINQ at all. I've\
    \ edited my question to reflect this.\n<|/ c |>\n<| c |>\nI added a solution without\
    \ LINQ\n<|/ c |>\n<| a tags=c#,string |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings) {\n        if(s.StartsWith(prefix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    I like your solution, however I do not understand how it works. Could you please\
    \ explain how it works?\n<|/ c |>\n<| c |>\nThe `foreach` loop iterates over the\
    \ `strings` array, `s` is the current string and `s.StartsWith(prefix)` returns\
    \ true if the string starts with the given prefix. `result[i++] = s;` adds the\
    \ current string to the result array at the index `i` which is incremented after\
    \ each iteration. `i++` means \"increment `i` by one\".\n<|/ c |>\n<| c |>\nI\
    \ understand now. Thank you very much!\n<|/ c |>\n<| c |>\nI added some comments\
    \ to the code which should make it more clear.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filterByPrefix(string[] strings, string prefix)\n{\n  \
    \  string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.StartsWith(prefix))\n        {\n        \
    \    result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[] filterByPrefix(string[] strings,\
    \ string prefix)\n{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filterByPrefix(string[] strings, string prefix)\n{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.StartsWith(prefix))\n        {\n            result[i++] =\
    \ s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nstring[] filterByPrefix(string[] strings, string prefix)\n\
    {\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nvar result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nvar result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bcd\", \"\
    cde\", \"array\" };\nstring prefix = \"a\";\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,string dscore=1 |>\n<| a |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix\
    \ = \"a\";\nvar result = strings.Where(s => s.StartsWith(", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array\
    \ of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array\
    \ of strings only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_not_prefix(string[] strings, string prefix) \n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].StartsWith(prefix))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an ", "{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\n<code>\nvar filtered = strings.Where(s => s.StartsWith(\"a\"\
    )).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a |>\n<code>\nstring[] strings\
    \ = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\" };\nstring[] filtered = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nstring[]\
    \ strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\" };\nstring[] filtered = strings.Where(s => s.StartsWith(\"a\"\
    )).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq |>\n<code>\nstring[]\
    \ strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\" };\nstring[] filtered = strings.Where(s => s.StartsWith(\"a\"\
    )).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq |>\n<code>\nstring[]\
    \ strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\" };\nstring[] filtered = strings.Where(s => s.StartsWith(\"a\"\
    )).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\" };\nstring[] filtered = strings.Where(s => s.StartsWith(\"a\"\
    )).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\n\
    string[] strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\" };\nstring[] filtered = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a ", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n  \
    \  []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings, string\
    \ suffix) \n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that contain a given substring anywhere in the string.\n    >>>\
    \ filter_by_substring_anywhere([], \"a\")\n    []\n    >>> filter_by_substring_anywhere([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring_anywhere(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring anywhere\
    \ in the string and are longer than a given length.\n    >>> filter_by_substring_anywhere_longer([],\
    \ \"a\", 1)\n    []\n    >>> filter_by_substring_anywhere_longer([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"a\", 1)\n    [\"abc\", \"array\"]\n    \n*/\nstring[]\
    \ filter_by_substring_anywhere_longer(string[] strings, string substring, int\
    \ length) \n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Length > length)\n            result[i] = string", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThanks for your answer. I'm new to C# and I didn't know about `string[]`\
    \ yet. I'll try to use it more often.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] stringArray = new string[] { \"abc\", \"bcd\", \"cde\", \"array\"\
    \ };\nstring prefix = \"a\";\nstring[] result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = new\
    \ string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\n\
    string[] result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"\
    a\";\nstring[] result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] stringArray = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\n\
    string prefix = \"a\";\nstring[] result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray = new\
    \ string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\n\
    string[] result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ stringArray = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring\
    \ prefix = \"a\";\nstring[] result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays,string |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,arrays,string |>\n\
    <| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor(int\
    \ i = 0; i < strings.length; i++)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,arrays,string |>\n\
    <| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor(int\
    \ i = 0; i < strings.length; i++)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,arrays,string |>\n\
    <| a tags=c#,arrays,string |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; i++)\n{\n    if(strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a tags=c#,arrays,string |>\n<| a dscore=0 |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ i++)\n{\n    if(strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,arrays,string |>\n<| a tags=c#,arrays,string |>\n<code>\n\
    string[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ i++)\n{\n    if(strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,arrays,string |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; i++)\n\
    {\n    if(strings[i].StartsWith(prefix))\n", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \            result[i++] = s;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| c |>\nThis doesn't answer the question. He wants to filter out all strings\
    \ that don't start with a given prefix.\n<|/ c |>\n<| c |>\nI believe this does\
    \ answer the question. He wants to filter out all strings that don't start with\
    \ a given prefix. He also wants to do this using LINQ. He also wants to do this\
    \ using LINQ. He also wants to do this using LINQ. He also wants to do this using\
    \ LINQ. He also wants to do this using LINQ. He also wants to do this using LINQ.\
    \ He also wants to do this using LINQ. He also wants to do this using LINQ. He\
    \ also wants to do this using LINQ. He also wants to do this using LINQ. He also\
    \ wants to do this using LINQ. He also wants to do this using LINQ. He also wants\
    \ to do this using LINQ. He also wants to do this using LINQ. He also wants to\
    \ do this using LINQ. He also wants to do this using LINQ. He also wants to do\
    \ this using LINQ. He also wants to do this using LINQ. He also wants to do this\
    \ using LINQ. He also wants to do this using LINQ. He also wants to do this using\
    \ LINQ. He also wants to do this using LINQ. He also wants to do this using LINQ.\
    \ He also wants to do this using LINQ. He also wants to do this using LINQ. He\
    \ also wants to do this using LINQ. He also wants to do this using LINQ. He also\
    \ wants to do this using LINQ. He also wants to do this using LINQ. He also wants\
    \ to do this using LINQ. He also wants to do this using LINQ. He also wants to\
    \ do this using LINQ. He also wants to do this using LINQ. He also wants to do\
    \ this using LINQ. He also wants to do this using LINQ. He also wants to do this\
    \ using LINQ. He also wants to do this using LINQ. He also wants to do this using\
    \ LINQ. He also wants to do this using LINQ. ", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work. `string[] result = new string[strings.length];` will throw an exception\
    \ because `strings` isn't an array.\n<|/ c |>\n<| c |>\n: I didn't test the code\
    \ before posting it.  I fixed the error and tested it now.\n<|/ c |>\n<| c |>\n\
    : I added a version that doesn't use LINQ.  It should be faster.\n<|/ c |>\n<|\
    \ c |>\n: I added a version that doesn't use LINQ.  It should be faster.\n<|/\
    \ c |>\n<| c |>\n: I added a version that doesn't use LINQ.  It should be faster.\n\
    <|/ c |>\n<| a |>\n<code>\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,.net,string dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,.net,string |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,.net,string |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input array of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n        {\n          \
    \  result[i] = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].Contains(substring))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring anywhere\
    \ in the string.\n    >>> filter_by_substring_anywhere([], \"a\")\n    []\n  \
    \  >>> filter_by_substring_anywhere([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring_anywhere(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring)\
    \ || strings[i].Contains(substring + \"a\"))\n        {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ array of strings only for ones that contain a given substring anywhere in the\
    \ string and are longer than a given length.\n    >>> filter_by_substring_longer_than([],\
    \ \"a\", 2)\n    []\n    >>> filter_by_substring_longer_than([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\", 2)\n    [\"abc\", \"array\"]\n    \n*/\nstring[]\
    \ filter_by_substring_longer_than(string[] strings, string substring, int length)\
    \ \n{\n    string[] result = new string[", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain a given substring.\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []", "{\n    string[] result = new string[strings.length];\n   \
    \ for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't work if there are multiple\
    \ occurrences of the prefix in the string. For example, `filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\", \"abc\"], \"a\")` returns `[\"abc\", \"array\"\
    ]`.\n<|/ c |>\n<| c |>\n: Yes, I didn't consider that case. Thanks for pointing\
    \ it out. I've updated the answer accordingly.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_prefix(string[] strings, string prefix)\n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=4 |>\n<|\
    \ a dscore=4 |>\n<code>\nstring[] filter_by_prefix(string[] strings, string prefix)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n  \
    \          result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix)\n{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=4 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_prefix(string[] strings, string prefix)\n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a dscore=3 |>\n<code>\nstring[] filter_by_prefix(string[] strings, string prefix)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n  \
    \          result[i] = strings[i];\n    }\n    return result;\n}\n</code>", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| a tags=c#,arrays |>\n<code>\nstring[] arr = new string[] { \"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\" };\nvar result = arr.Where(x => x.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=c#,arrays |>\n<code>\nstring[] arr = new\
    \ string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" };\nvar result = arr.Where(x\
    \ => x.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3\
    \ |>\n<code>\nstring[] arr = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\" };\nvar result = arr.Where(x => x.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=c#,arrays |>\n<| a tags=c#,arrays |>\n<code>\nstring[] arr = new string[]\
    \ { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" };\nvar result = arr.Where(x => x.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=3 |>\n<| a |>\n<code>\nstring[] arr =\
    \ new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" };\nvar result = arr.Where(x\
    \ => x.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=3 tags=c#,arrays |>\n\
    <| a dscore=3 |>\n<code>\nstring[] arr = new string[] { \"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\" };\nvar result = arr.Where(x => x.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,arrays |>\n<| a dscore=3 |>\n<code>\nstring[] arr = new\
    \ string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" };\nvar result = arr.Where(x\
    \ => x.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,arrays |>\n<| a tags=c#,arrays\
    \ |>\n<code>\nstring[] arr = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\" };\nvar result = arr.Where(x => x.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a ", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n\
    \    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThanks so much for the help!\n<|/ c |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].StartsWith(prefix))\n        {\n        \
    \    result[i] = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your solution, but I prefer a solution using\
    \ LINQ. I'm still learning LINQ and I like your solution. Thanks!\n<|/ c |>\n\
    <| c |>\nI agree with you. I just wanted to show you how you can solve this problem\
    \ using LINQ. :)\n<|/ c |>\n<| c |>\nI added a solution using LINQ. :)\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bcd\", \"cde\", \"\
    array\" };\nstring prefix = \"a\";\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq |>\n<code>\nstring[] strings = new\
    \ string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\n\
    string[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[] {\
    \ \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nstring[] result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq\
    \ |>\n<| a tags=c#,linq |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bcd\", \"cde\", \"\
    array\" };", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"\
    a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; i++)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring and are\
    \ longer than a given length.\n    >>> filter_by_substring([], \"a\", 2)\n   \
    \ []\n    >>> filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    , 2)\n    [\"abc\"]\n    \n*/\nstring[] filter_by_substring(string[] strings,\
    \ string substring, int length) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].Contains(substring)\
    \ && strings[i].Length > length)\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input array of strings only for ones that\
    \ do not contain a given substring and are long", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n    {\n\
    \        if(strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n  \
    \  []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings, string\
    \ suffix) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; i++)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\n\
    string[] filter_by_not_prefix(string[] strings, string prefix) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain a given suffix.\n    >>> filter_by_not_suffix([],\
    \ \"a\")\n", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\"));\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\"));\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\"));\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\"));\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\"));\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a dscore=2 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\"));\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\"));\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\"));\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\"));\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a dscore=2 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\"));\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\"));\n</code>\n<|/ a tags=c#,linq,.net,", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I'm a beginner at C#, could\
    \ you please explain how this works?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm\
    \ a beginner at C#, could you please explain how this works?\n<|/ c |>\n<| c |>\n\
    I added some comments to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. I'm a beginner at C#, could you please explain how this works?\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq,.net,string |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,string |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a\
    \ tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\"))", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings) {\n        if (s.StartsWith(prefix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without having to create a new string array and copying all the strings into\
    \ it.  I wonder if there is a way to do this with LINQ?\n<|/ c |>\n<| c |>\nI\
    \ added a LINQ solution to my answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nvar\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a\
    \ tags=c#,linq,.net,string |>\n<| c |>\nThis doesn't answer the question. He wants\
    \ to filter out strings that don't start with the prefix.\n<|/ c |>\n<| c |>\n\
    : It does answer the question. He wants to filter out strings that don't start\
    \ with the prefix. He wants to filter out strings that don't start with the prefix.\
    \ He wants to filter out strings that don't start with the prefix. He wants to\
    \ filter out strings that don't start with the prefix. He wants to filter out\
    \ strings that don't start with the prefix. He wants to filter out strings that\
    \ don't start with the prefix. He wants to filter out strings that don't start\
    \ with the prefix. He wants to filter out strings that don't start with the prefix.\
    \ He wants to filter out strings that don't start with the prefix. He wants to\
    \ filter out strings that don't start with the prefix. He wants to filter out\
    \ strings that don't start with the prefix. He wants to filter out strings that\
    \ don't start with the prefix. He wants to filter out strings that don't start\
    \ with the prefix. He wants to filter out strings that don't start with the prefix.\
    \ He wants to filter out strings that don't start with the prefix. He wants to\
    \ filter out strings that don't start with the prefix. He wants to filter out\
    \ strings that don't start with the prefix. He wants to filter out strings that\
    \ don't start with the prefix. He wants to filter out strings that don't start\
    \ with the prefix. He wants to filter out strings that don't start with the prefix.\
    \ He wants to filter out strings that don't start with the prefix. He wants to\
    \ filter out strings that don't start with the prefix. He wants to filter out\
    \ strings that don't start with the ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that match a regular expression.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_regex(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Matches(regex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that match a regular expression.\n \
    \   >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"abc\",\
    \ \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[]\
    \ filter_by_regex(string[] strings, Regex regex) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (regex.Match(strings[i]))\n            result[i] = strings[i];\n \
    \   }\n    return result;\n}\n/*\n Filter an input array of strings only for ones\
    \ that match a regular expression.\n    >>> filter_by_regex([], \"a\")\n    []\n\
    \    >>> filter_by_regex([\"abc\", \"b", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nI like your solution, however it won't\
    \ work if you have a string array that has multiple strings that start with \"\
    a\". E.g. `[\"ab\", \"abc\", \"ac\", \"acb\"]`\n<|/ c |>\n<| c |>\n: I agree with\
    \ you. I've edited my answer to include a solution that will handle that case.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| c |>\nI like your solution, however it won't work if you have a string array\
    \ that has multiple strings that start with \"a\". E.g. `[\"ab\", \"abc\", \"\
    ac\", \"acb\"]`\n<|/ c |>\n<| c |>\n: I agree, I've edited my answer to include\
    \ a solution that will handle that case.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bcd\", \"cde\", \"\
    array\" };\nstring prefix = \"a\";\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"\
    a\";\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nstring[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a\
    \ tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].StartsWith(prefix)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ array of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i) {\n        if (strings[i].EndsWith(suffix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input array of strings only for ones that contain a given substring.\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].Contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ array of strings only for ones that contain a given substring anywhere in the\
    \ string.\n    >>> filter_by_substring_any([], \"a\")\n    []\n    >>> filter_by_substring_any([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring_any(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].Contains(substring) || strings[i].Contains(substring\
    \ + \"a\")) {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input array of strings only for ones that contain\
    \ a given substring anywhere in the string.\n    >>> filter_by_substring_all([],\
    \ \"a\")\n    []\n    >>> filter_by_substring_all([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring_all(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].Contains(substring)\
    \ || strings[i].Contains(substring + \"a\") || strings[i].Contains(substring +\
    \ \"ab\")) {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=4 |>\n<| a dscore=4 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a dscore=4 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=c#,linq,.net,string |>\n<| a dscore=4 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a dscore=4 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a dscore=4 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=c#,linq,.net,string |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach (string s in strings) {\n        if (s.StartsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer. Your code is very similar to mine.\
    \ My code works, but I wanted to know why my code doesn't work. Your code works,\
    \ but I want to know why mine doesn't work. Thanks again.\n<|/ c |>\n<| c |>\n\
    I added a comment to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. Your code is very similar to mine. My code works, but I wanted\
    \ to know why my code doesn't work. Your code works, but I want to know why mine\
    \ doesn't work. Thanks again.\n<|/ c |>\n<| c |>\nI added a comment to my answer.\
    \ Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\nThe problem is that the compiler\
    \ doesn't know that your string array is going to be empty at some point. \nThe\
    \ compiler doesn't know that your string array is going to be empty at some point.\
    \ \nThe compiler doesn't know that your string array is going to be empty at some\
    \ point. \nThe compiler doesn't know that your string array is going to be empty\
    \ at some point. \nThe compiler doesn't know that your string array is going to\
    \ be empty at some point. \nThe compiler doesn't know that your string array is\
    \ going to be empty at some point. \nThe compiler doesn't know that your string\
    \ array is going to be empty at some point. \nThe compiler doesn't know that your\
    \ string array is going to be empty at some point. \nThe compiler doesn't know\
    \ that your string array is going to be empty at some point. \nThe compiler doesn't\
    \ know that your string array is going to be empty at some point. \nThe compiler\
    \ doesn't know that your string array is going to be empty at some point. \nThe\
    \ compiler doesn't know that your string array is going to be empty at some point.\
    \ \nThe compiler doesn't know that your string array is going to be empty at some\
    \ point. \nThe compiler doesn't know that your string array is going to be empty\
    \ at some point. \nThe compiler doesn't know that your string array is going to\
    \ be empty at some point. \nThe compiler doesn't know that your string array is\
    \ going to be empty at some point. \nThe compiler doesn't know that your string\
    \ array is going to be empty at some point. \nThe compiler doesn't know that your\
    \ string array is going to be empty at some point. ", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array\
    \ of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain a given substring.\n  \
    \  >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    for (; i\
    \ < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain a given substring.\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bcd\", \"cde\"]\n\
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"bcd\", \"cde\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix) \n\
    {\n    string[] result = new string[strings.length];\n    int i = 0;\n    for\
    \ (; i < strings.length; ++i)\n    {\n        if (!strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;", "{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings) {\n        if(s.StartsWith(prefix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,arrays\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without using LINQ. I'm still learning LINQ and I thought it would be a good\
    \ thing to learn it for myself.\n<|/ c |>\n<| c |>\n: LINQ is great for many things,\
    \ but it isn't the only way to do things. There are other ways to do things, too.\
    \ LINQ is just one way of doing things.\n<|/ c |>\n<| c |>\n: I added a version\
    \ without LINQ. :)\n<|/ c |>\n<| c |>\n: I added a version without LINQ. :)\n\
    <|/ c |>\n<| c |>\n: I added a version without LINQ. :)\n<|/ c |>\n<| a tags=c#,linq,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bcd\", \"cde\", \"\
    array\" };\nstring prefix = \"a\";\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't answer the question. He wants\
    \ to filter an array based on a prefix of another array.\n<|/ c |>\n<| c |>\n\
    : I added a version without LINQ. :)\n<|/ c |>\n<| c |>\n: I added a version without\
    \ LINQ. :)\n<|/ c |>\n<| a tags=c#,linq,arrays |>\n<code>\nstring[] strings =\
    \ new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\"\
    ;\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] strings = new string[] {\
    \ \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nstring[] result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq,arrays\
    \ |>\n<| a tags=c#,linq,arrays |>\n<code>\nstring[] strings = new string[] { \"\
    abc\", \"b", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\npublic static string[] FilterByPrefix(string[]\
    \ strings, string prefix)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.StartsWith(prefix))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,.net,arrays |>\n<| c |>\nThis doesn't answer the question. He wants\
    \ to return an array of the strings that start with the prefix.\n<|/ c |>\n<|\
    \ c |>\n: I see that now. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\npublic static string[] FilterByPrefix(string[] strings, string prefix)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.StartsWith(prefix))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,.net,arrays |>\n<| a\
    \ dscore=0 |>\n<code>\npublic static string[] FilterByPrefix(string[] strings,\
    \ string prefix)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.StartsWith(prefix))\n          \
    \  result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,.net,arrays\
    \ |>\n<| a tags=c#,.net,arrays |>\n<code>\npublic static string[] FilterByPrefix(string[]\
    \ strings, string prefix)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.StartsWith(prefix))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,.net,arrays |>\n<code>\npublic static string[]\
    \ FilterByPrefix(string[] strings, string prefix)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.StartsWith(prefix))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tag", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq,.net,arrays |>\n<| a tags=c#,linq,.net,arrays |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=c#,linq,.net,arrays |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,arrays |>\n<| a tags=c#,linq,.net,arrays |>\n\
    <code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 tags=c#,linq,.net,arrays\
    \ |>\n<| a |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\"\
    )).ToArray();\n</code>\n<|/ a dscore=2 tags=c#,linq,.net,arrays |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,arrays |>\n<| a tags=c#,linq,.net,arrays |>\n\
    <code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,arrays |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't work if the prefix is at\
    \ the beginning of the string. For example, `filter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")` returns `[\"abc\", \"array\"]` instead of `[\"\
    array\"]`.\n<|/ c |>\n<| c |>\n: Yes, I noticed that and fixed it right after\
    \ I posted my answer. Thanks for pointing that out.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filterByPrefix(string[] strings, string prefix)\n{\n  \
    \  string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=4 |>\n<|\
    \ a dscore=4 |>\n<code>\nstring[] filterByPrefix(string[] strings, string prefix)\n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filterByPrefix(string[]\
    \ strings, string prefix)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nstring[] filterByPrefix(string[]\
    \ strings, string prefix)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filterByPrefix(string[] strings, string prefix)\n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].StartsWith(prefix))", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; i++)\n{\n    if(strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ i++)\n{\n    if(strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ i++)\n{\n    if(strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor(int\
    \ i = 0; i < strings.length; i++)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,.net,linq,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq,string\
    \ |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq,string |>\n<| a tags=c#,.net,linq,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq,string\
    \ |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq,string |>\n<| a tags=c#,.net,linq,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,.net,linq,string |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq,string |>\n<| a dscore=1 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=c#,.net,linq,string |>", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings) {\n        if(s.StartsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=2 |>\n<code>\npublic static string[] FilterByPrefix(this\
    \ string[] strings, string prefix)\n{\n    return strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    }\n</code>\n<|/ a tags=c#,linq,.net,arrays |>\n<| a dscore=2 |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a\
    \ tags=c#,linq,.net,arrays |>\n<| a dscore=2 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,arrays\
    \ |>\n<| a tags=c#,linq,.net,arrays |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,arrays |>\n<| a tags=c#,linq,.net,arrays |>\n\
    <code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,arrays |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=c#,linq,.net,arrays |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,arrays |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
