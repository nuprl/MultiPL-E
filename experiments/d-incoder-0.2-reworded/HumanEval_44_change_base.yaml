name: HumanEval_44_change_base
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
  \ number x to base.\n    return string representation after the conversion.\n  \
  \  base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n   \
  \ >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\
  \n    \n*/\nstring change_base(long x, long base) \n"
tests: "unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
  \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
  \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
  \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
  \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
  \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
  \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n\
    \    \n    while (temp > 0)\n    {\n        temp = temp / base;\n        result\
    \ = to_string(temp) + result;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x\
    \ % base;\n        result += to_string(temp);\n        x /= base;\n    }\n   \
    \ return result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n  \
    \  while (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x = x / base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0) {\n        long mod = temp\
    \ % base;\n        temp = temp / base;\n        if(mod != 0) {\n            result\
    \ += char((mod + '0'));\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        long\
    \ rem = temp % base;\n        temp = temp / base;\n        if(rem > 0)\n     \
    \   {\n            result += char(rem);\n        }\n    }\n    return result;\n\
    }", "{\n    long temp;\n    string result = \"\";\n    \n    temp = x / base;\n\
    \    \n    while (temp > 0)\n    {\n        result = to_string(temp % base) +\
    \ result;\n        temp = temp / base;\n    }\n    \n    return result;\n}", "{\n\
    \tstring result = \"\";\n\t\n\twhile(x != 0)\n\t{\n\t\tlong temp = x % base;\n\
    \t\tresult += to_string(temp);\n\t\tx = x / base;\n\t}\n\t\n\treturn result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp > 0) {\n        temp = temp / base;\n        result += to_string(temp);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp\
    \ / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\ttemp = x / base;\n\
    \t\n\twhile (temp > 0) {\n\t\tresult = to_string(temp % base) + result;\n\t\t\
    temp = temp / base;\n\t}\n\t\n\twhile (result != \"\") {\n\t\tresult = to_string(base\
    \ * long(result.back())) + result;\n\t}\n\t\n\treturn result;\n}", "{\n\tstring\
    \ result = \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\twhile (temp > 0) {\n\t\tresult\
    \ = to_string(temp % base) + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n\
    }", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp\
    \ > 0) {\n\t\ttemp = temp / base;\n\t\tresult = to_string(temp) + result;\n\t\
    }\n\t\n\treturn result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\t\
    temp = x / base;\n\t\n\twhile (temp > 0) {\n\t\tresult = temp % base + result;\n\
    \t\ttemp = temp / base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long d = 1;\n    while(n > 0)\n    {\n       \
    \ long r = n % base;\n        result += char(r + '0');\n        n = n / base;\n\
    \        d++;\n    }\n    while(d > 0)\n    {\n        result += \"0\";\n    \
    \    d--;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp = x;\n    while(temp != 0)\n    {\n        int digit = temp % base;\n \
    \       temp = temp / base;\n        if(digit > 9)\n        {\n            digit\
    \ = digit - 9;\n            result += char(digit + '0');\n        }\n        else\n\
    \        {\n            result += char(digit + '0');\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x / base;\n    \n    while (temp > 0) {\n        result = temp % base + result;\n\
    \        temp = temp / base;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long tmp = x;\n    long tmp2 = base;\n    \n    while(tmp\
    \ != 0)\n    {\n        long digit = tmp % base;\n        tmp = tmp / base;\n\
    \        \n        if(digit > 0)\n        {\n            result += digit;\n  \
    \      }\n    }\n    \n    while(tmp2 != 0)\n    {\n        long digit = tmp2\
    \ % base;\n        tmp2 = tmp2 / base;\n        \n        if(digit > 0)\n    \
    \    {\n            result += digit;\n        }\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp > 0) {\n        long r = temp % base;\n        temp = temp /\
    \ base;\n        result = to_string(r) + result;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x / base;\n\
    \    \n    while (temp > 0) {\n        result = to_string(temp % base) + result;\n\
    \        temp = temp / base;\n    }\n    \n    if (x < base) {\n        result\
    \ = to_string(x - base) + result;\n    }\n    \n    return result;\n}", "{\n \
    \   string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n      \
    \  temp = x % base;\n        result += to_string(temp);\n        x /= base;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp != 0) {\n        temp = temp / base;\n\
    \        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n\
    \        temp = x % base;\n        result += to_string(temp);\n        x = x /\
    \ base;\n    }\n    \n    return result;\n}\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, int base) \n{\n    string result =\
    \ \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\n/*\nChange numerical base of input number x to base.\n    return\
    \ string representation after the conversion.\n    base numbers are less than\
    \ 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n\
    \    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring change_base(long\
    \ x, short base) \n{\n    string result = \"\";\n    long temp;\n    \n    while\
    \ (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n \
    \       x = x / base;\n    }\n    \n    return result;\n}\n/*\nChange numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n\
    \    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, char base) \n{\n    string\
    \ result = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x\
    \ % base;\n        result += to_string(temp);\n        x = x / base;\n    }\n\
    \    \n    return result;\n}\n/*\nChange numerical base of input number x to base.\n\
    \    return string representation after the conversion.\n    base numbers are\
    \ less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L,\
    \ 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ change_base(long x, float base) \n{\n    string result = \"\";\n    long temp;\n\
    \    \n    while (x != 0) {\n        temp = x % base;\n        result += ", "{\n\
    \    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        long rem = temp % base;\n        temp = temp / base;\n\
    \        result = char(rem) + result;\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp != 0) {\n        temp = temp / base;\n        result += to_string(temp);\n\
    \    }\n    \n    return result;\n}\n/*\n    Convert number x to string representation\
    \ in base base using \n    radix base.\n    \n    base numbers are less than 10.\n\
    \    >>> to_string(8L, 3L)\n    \"22\"\n    >>> to_string(8L, 2L)\n    \"1000\"\
    \n    >>> to_string(7L, 2L)\n    \"111\"\n    \n*/\nstring to_string(long x, long\
    \ base)\n{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n \
    \   \n    while (temp != 0) {\n        temp = temp / base;\n        result +=\
    \ to_string(temp);\n    }\n    \n    return result;\n}\n/*\n    Convert number\
    \ x to string representation in base base using \n    radix base.\n    \n    base\
    \ numbers are less than 10.\n    >>> to_string(8L, 3L)\n    \"22\"\n    >>> to_string(8L,\
    \ 2L)\n    \"1000\"\n    >>> to_string(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ to_string(double x, long base)\n{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp != 0) {\n        temp = temp / base;\n\
    \        result += to_string(temp);\n    }\n    \n    return result;\n}\n/*\n\
    \    Convert number x to string representation in base base using \n    radix\
    \ base.\n    \n    base numbers are less than 10.\n    >>> to_string(8L, 3L)\n\
    \    \"22\"\n    >>> to_string(8L, 2L)\n    \"1000\"\n    >>> to_string(7L, 2L)\n\
    \    \"111\"\n    \n*/\nstring to_string(float x, long base)\n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\n/*\n    Convert number x to string representation in base\
    \ base using \n    radix base.\n    \n    base numbers are less than 10.\n   \
    \ >>> to_string(8L, 3L)\n    \"22\"\n    >>> to_string(8L, 2L)\n    \"1000\"\n\
    \    >>> to_string(7L, 2L)\n    \"111\"\n    \n*/\nstring to_string(double x,\
    \ int base)\n{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n\
    \    \n", "{\n\tstring result = \"\";\n\t\n\twhile (x != 0)\n\t{\n\t\tlong rem\
    \ = x % base;\n\t\tstring s = to_string(rem);\n\t\tresult += s;\n\t\tx = x / base;\n\
    \t}\n\t\n\treturn result;\n}", "{\n\tstring result = \"\";\n\t\n\tlong tmp = x;\n\
    \t\n\twhile (tmp > 0) {\n\t\tlong rem = tmp % base;\n\t\ttmp = tmp / base;\n\t\
    \tresult = to_string(base) + result;\n\t}\n\t\n\treturn result;\n}", "{\n    string\
    \ result = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int digit\
    \ = temp % base;\n        temp = temp / base;\n        result = digits[digit]\
    \ + result;\n    }\n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long temp;\n    \n    temp = x / base;\n    \n    while (temp > 0)\n    {\n\
    \        result = to_string(temp % base) + result;\n        temp = temp / base;\n\
    \    }\n    \n    if (temp == 0)\n    {\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    while (x > 0) {\n        temp = x % base;\n        result +=\
    \ to_string(temp);\n        x /= base;\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp > 0)\n  \
    \  {\n        result = temp % base + result;\n        temp = temp / base;\n  \
    \  }\n    \n    return result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\
    \t\n\ttemp = x;\n\t\n\twhile (temp > 0) {\n\t\ttemp = temp / base;\n\t\tresult\
    \ = to_string(temp) + result;\n\t}\n\t\n\treturn result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0)\n\
    \    {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}", "{\n    long xx = x;\n    long xx_div_base\
    \ = x / base;\n    long xx_mod_base = x % base;\n    string result = \"\";\n \
    \   \n    while (xx_div_base != 0)\n    {\n        long xx_div_base2 = xx_div_base\
    \ / base;\n        long xx_mod_base2 = xx_mod_base % base;\n        \n       \
    \ if (xx_mod_base2 == 0)\n        {\n            result += to_string(xx_div_base2);\n\
    \        }\n        else\n        {\n            result += to_string(xx_mod_base2)\
    \ + \"0\";\n        }\n        \n        xx_div_base = xx_div_base2;\n       \
    \ xx_mod_base = xx_mod_base2;\n    }\n    \n    if (xx_mod_base == 0)\n    {\n\
    \        result += to_string(xx_div_base);\n    }\n    else\n    {\n        result\
    \ += to_string(xx_mod_base);\n    }\n    \n    return result;\n}", "{\n    long\
    \ res = 0;\n    string result = \"\";\n    while(x != 0)\n    {\n        res +=\
    \ x / base;\n        x %= base;\n    }\n    while(base > 0)\n    {\n        res\
    \ /= base;\n        base--;\n    }\n    while(base > 0)\n    {\n        res *=\
    \ base;\n        base--;\n    }\n    while(base > 0)\n    {\n        res %= base;\n\
    \        base--;\n    }\n    while(base > 0)\n    {\n        res /= base;\n  \
    \      base--;\n    }\n    while(base > 0)\n    {\n        res *= base;\n    \
    \    base--;\n    }\n    while(base > 0)\n    {\n        res %= base;\n      \
    \  base--;\n    }\n    while(base > 0)\n    {\n        res /= base;\n        base--;\n\
    \    }\n    while(base > 0)\n    {\n        res *= base;\n        base--;\n  \
    \  }\n    while(base > 0)\n    {\n        res %= base;\n        base--;\n    }\n\
    \    while(base > 0)\n    {\n        res /= base;\n        base--;\n    }\n  \
    \  while(base > 0)\n    {\n        res *= base;\n        base--;\n    }\n    while(base\
    \ > 0)\n    {\n        res %= base;\n        base--;\n    }\n    while(base >\
    \ 0)\n    {\n        res /= base;\n        base--;\n    }\n    while(base > 0)\n\
    \    {\n        res *= base;\n        base--;\n    }\n    while(base > 0)\n  \
    \  {\n        res %= base;\n        base--;\n    }\n    while(base > 0)\n    {\n\
    \        res /= base;\n        base--;\n    }\n    while(base > 0)\n    {\n  \
    \      res *= base;\n        base--;\n    }\n    while(base > 0)\n    {\n    \
    \    res %= base;\n        base--;\n    }\n    while(base > 0)\n    {\n      \
    \  res /= base;\n        base--;\n    }\n    while(base > 0)\n    {\n        res\
    \ *= base;\n        base--;\n    }\n    while(base > 0)\n    {\n        res %=\
    \ base;\n        base--;\n    }\n    while(base > 0)\n    {\n        res /= base;\n\
    \        base--;\n    }\n    while(base > 0)\n    {\n        res *= base;\n  \
    \      base--;\n    }\n    while(base > 0)\n    {\n        res %= base;\n    \
    \    base--;\n    }\n    while(base > 0)\n    {\n        res /= base;\n      \
    \  base--;\n    }\n    while(base ", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp != 0) {\n        if (temp % base ==\
    \ 0) {\n            result += to_string(temp / base);\n        } else {\n    \
    \        result += to_string(temp % base);\n        }\n        temp = temp / base;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n    {\n        temp\
    \ = temp / base;\n        result = to_string(temp) + result;\n    }\n    \n  \
    \  return result;\n}\n/*\n    Convert binary number to decimal number.\n    \n\
    \    Input string must be in binary form.\n    \n    Output decimal number in\
    \ base 10.\n    \n    >>> to_decimal(\"1001\")\n    10\n    >>> to_decimal(\"\
    1010\")\n    16\n    \n*/\nlong to_decimal(string x)\n{\n    long result = 0;\n\
    \    \n    for (auto i : x)\n    {\n        result *= 2;\n        result += i\
    \ - '0';\n    }\n    \n    return result;\n}\n/*\n    Convert decimal number to\
    \ binary number.\n    \n    Input decimal number in base 10.\n    \n    Output\
    \ binary number in base 2.\n    \n    >>> to_binary(\"10\")\n    \"1010\"\n  \
    \  >>> to_binary(\"16\")\n    \"1010\"\n    \n*/\nstring to_binary(long x)\n{\n\
    \    string result = \"\";\n    \n    while (x > 0)\n    {\n        result = to_string(x\
    \ % 2) + result;\n        x /= 2;\n    }\n    \n    return result;\n}\n/*\n  \
    \  Convert decimal number to hexadecimal number.\n    \n    Input decimal number\
    \ in base 10.\n    \n    Output hexadecimal number in base 16.\n    \n    >>>\
    \ to_hex(\"10\")\n    \"A\"\n    >>> to_hex(\"16\")\n    \"10\"\n    \n*/\nstring\
    \ to_hex(long x)\n{\n    string result = \"\";\n    \n    while (x > 0)\n    {\n\
    \        result = to_string(x % 16) + result;\n        x /= 16;\n    }\n    \n\
    \    return result;\n}\n/*\n    Convert hexadecimal number to decimal number.\n\
    \    \n    Input hexadecimal number in base 16.\n    \n    Output decimal number\
    \ in base 10.\n    \n    >>> to_decimal(\"A\")\n    10\n    >>> to_decimal(\"\
    10\")\n    16\n    \n*/\nlong to_decimal(string x)\n{\n    long result = 0;\n\
    \    \n    for (auto i : x)\n    {\n        result *= 16;\n        result += i\
    \ - '0';\n    }\n    \n    return result;\n}\n/*\n    Convert binary number to\
    \ octal number.\n    \n    Input string must be in binary form.\n    \n    Output\
    \ octal number in base 8.\n    \n    >>> to_octal(\"1001\")\n    3\n    >>> to_octal(\"\
    1010\")\n    7\n    \n", "{\n    long temp;\n    string result = \"\";\n    \n\
    \    temp = x;\n    while (temp > 0) {\n        temp = temp / base;\n        result\
    \ = to_string(temp) + result;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long n = x;\n    long d = 1;\n    long r = 1;\n    long\
    \ m = 1;\n    long temp;\n    \n    while (n > 0)\n    {\n        temp = n % base;\n\
    \        n = n / base;\n        d = d * temp;\n        r = r * temp;\n       \
    \ m = m * temp;\n    }\n    \n    long temp2 = d;\n    long temp3 = r;\n    long\
    \ temp4 = m;\n    \n    while (temp4 > 0)\n    {\n        result = result + to_string(temp4);\n\
    \        temp4 = temp4 / 10;\n    }\n    \n    while (temp3 > 0)\n    {\n    \
    \    result = result + to_string(temp3);\n        temp3 = temp3 / 10;\n    }\n\
    \    \n    while (temp2 > 0)\n    {\n        result = result + to_string(temp2);\n\
    \        temp2 = temp2 / 10;\n    }\n    \n    while (n > 0)\n    {\n        result\
    \ = result + to_string(n % base);\n        n = n / base;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    \n    while (temp > 0)\n    {\n        temp = temp / base;\n       \
    \ result = to_string(temp) + result;\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long tmp = x;\n    long power = 1;\n    \n   \
    \ while (power < base)\n    {\n        tmp = tmp * power;\n        power *= base;\n\
    \    }\n    \n    long tmp = tmp / power;\n    \n    while (tmp > 0)\n    {\n\
    \        result = to_string(tmp % base) + result;\n        tmp = tmp / base;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    while (x != 0) {\n        temp = x % base;\n        result\
    \ += to_string(temp);\n        x = x / base;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x / base;\n\
    \    \n    while (temp > 0) {\n        result = to_string(temp % base) + result;\n\
    \        temp = temp / base;\n    }\n    \n    if (temp == 0)\n        result\
    \ = to_string(temp) + result;\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}", "{\n    long temp;\n    string result = \"\"\
    ;\n    \n    temp = x / base;\n    \n    if (temp > 0)\n    {\n        result\
    \ = temp.to_string() + result;\n    }\n    \n    while (temp > 0)\n    {\n   \
    \     temp = temp / base;\n        result = base.to_string() + result;\n    }\n\
    \    \n    return result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\
    \twhile(x > 0) {\n\t\ttemp = x % base;\n\t\tresult = to_string(temp) + result;\n\
    \t\tx = x / base;\n\t}\n\t\n\treturn result;\n}", "{\n\tstring result = \"\";\n\
    \tlong temp;\n\t\n\ttemp = x;\n\twhile (temp > 0) {\n\t\ttemp = temp / base;\n\
    \t\tresult = to_string(temp) + result;\n\t}\n\t\n\treturn result;\n}", "{\n\t\
    string result = \"\";\n\tlong temp;\n\t\n\twhile(x != 0) {\n\t\ttemp = x % base;\n\
    \t\tresult = to_string(temp) + result;\n\t\tx = x / base;\n\t}\n\t\n\treturn result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n\
    \        temp = x % base;\n        result += (char)('0' + temp);\n        x /=\
    \ base;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x / base;\n    \n    while (temp > 0)\n    {\n     \
    \   result = to_string(temp % base) + result;\n        temp = temp / base;\n \
    \   }\n    \n    if (result == \"0\")\n    {\n        result = \"1\";\n    }\n\
    \    \n    return result;\n}", "{\n    long res = 0;\n    string s = \"\";\n \
    \   while(x > 0) {\n        res += (x % base);\n        x /= base;\n    }\n  \
    \  while(x > 0) {\n        res -= (x % base);\n        x /= base;\n    }\n   \
    \ while(x > 0) {\n        res *= base;\n        x /= base;\n    }\n    while(x\
    \ > 0) {\n        res /= base;\n        x /= base;\n    }\n    return to_string(res);\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    while\
    \ (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n       \
    \ temp = temp / base;\n        result = to_string(temp) + result;\n    }\n   \
    \ \n    return result;\n}\n/*\nChange numerical base of input number x to base.\n\
    \    return string representation after the conversion.\n    base numbers are\
    \ less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L,\
    \ 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ change_base(long x, int base) \n{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n\
    \        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, short base) \n{\n   \
    \ string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}\n/*\nChange numerical base of\
    \ input number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, char base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\n/*\nChange numerical base of input number x\
    \ to base.\n    return string representation after the conversion.\n    base numbers\
    \ are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L,\
    \ 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ change_base(long x, double base) \n{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp > 0) {", "{\n    string result = \"\
    \";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n    \
    \    temp = temp / base;\n        result += to_string(temp);\n    }\n    \n  \
    \  return result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\ttemp =\
    \ x;\n\t\n\twhile (temp != 0)\n\t{\n\t\tresult = to_string(temp % base) + result;\n\
    \t\ttemp /= base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n      \
    \  temp = temp / base;\n        result = to_string(temp) + result;\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long tmp = x;\n\
    \    long tmp2 = base;\n    \n    while(tmp2 > 0)\n    {\n        tmp = tmp /\
    \ tmp2;\n        tmp2 = tmp % tmp2;\n        result += char(tmp + '0');\n    }\n\
    \    \n    return result;\n}", "{\n    long r = x;\n    string s = \"\";\n   \
    \ while(base > 0)\n    {\n        r = r / base;\n        s = to_string(base) +\
    \ s;\n        base = base * 10;\n    }\n    while(base > 0)\n    {\n        r\
    \ = r / base;\n        s = to_string(base) + s;\n        base = base * 10;\n \
    \   }\n    return to_string(r) + s;\n}", "{\n    long temp;\n    string result\
    \ = \"\";\n    \n    temp = x;\n    \n    while (temp != 0) {\n        temp =\
    \ temp / base;\n        result += to_string(temp);\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp > 0)\n    {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    while (x != 0)\n    {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    while (temp > 0)\n    {\n        result = to_string(temp % base) + result;\n\
    \        temp = temp / base;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x\
    \ % base;\n        result += to_string(temp);\n        x = x / base;\n    }\n\
    \    \n    return result;\n}", "{\n    long result = 0;\n    long remainder;\n\
    \    string result = \"\";\n    \n    while (x != 0) {\n        remainder = x\
    \ % base;\n        result += (char)('0' + remainder);\n        x /= base;\n  \
    \  }\n    \n    return result;\n}", "{\n\tstring result = \"\";\n\t\n\twhile(x\
    \ != 0)\n\t{\n\t\tlong temp = x % base;\n\t\tresult += to_string(temp);\n\t\t\
    x = x / base;\n\t}\n\t\n\treturn result;\n}", "{\n\tstring result = \"\";\n\t\n\
    \tlong temp;\n\t\n\ttemp = x / base;\n\t\n\twhile (temp > 0)\n\t{\n\t\tresult\
    \ = to_string(temp % base) + result;\n\t\ttemp = temp / base;\n\t}\n\t\n\treturn\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    \n    while (temp > 0) {\n        long rem = temp % base;\n        temp\
    \ = temp / base;\n        result = to_string(base) + result;\n    }\n    \n  \
    \  return result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n \
    \   temp = x / base;\n    \n    while(temp > 0)\n    {\n        result = to_string(temp\
    \ % base) + result;\n        temp = temp / base;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp != 0)\n    {\n        if (temp % base == 0)\n        {\n    \
    \        result += (char)('0' + temp % base);\n        }\n        \n        temp\
    \ = temp / base;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    while (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n\tstring result = \"\";\n\
    \tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp > 0)\n\t{\n\t\tlong rem = temp\
    \ % base;\n\t\tresult = to_string(base) + result;\n\t\ttemp = temp / base;\n\t\
    }\n\t\n\treturn result;\n}", "{\n    string result = \"\";\n    long temp = x;\n\
    \    long temp2 = base;\n    while(temp != 0)\n    {\n        long mod = temp\
    \ % temp2;\n        temp = temp / temp2;\n        result = to_string(mod) + result;\n\
    \        temp2 = temp2;\n    }\n    return result;\n}\n/*\n    Convert string\
    \ representation of number to long integer.\n    \n    string representation of\
    \ number must be in base 10\n    \n    return long integer representation of number\n\
    \    \n    example\n    >>> to_long(\"22\")\n    22\n    >>> to_long(\"1000\"\
    )\n    1000\n    >>> to_long(\"111\")\n    111\n    \n*/\nlong to_long(string\
    \ s)\n{\n    long result = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        long digit = s[i] - '0';\n        result = result * 10 + digit;\n   \
    \ }\n    return result;\n}\n/*\n    Convert long integer representation of number\
    \ to string representation.\n    \n    long integer representation of number must\
    \ be in base 10\n    \n    return string representation of number\n    \n    example\n\
    \    >>> to_string(1)\n    \"1\"\n    >>> to_string(22)\n    \"22\"\n    >>> to_string(1000)\n\
    \    \"1000\"\n    >>> to_string(111)\n    \"111\"\n    \n*/\nstring to_string(long\
    \ x)\n{\n    string result = \"\";\n    while(x != 0)\n    {\n        result =\
    \ to_string(x%10) + result;\n        x = x / 10;\n    }\n    return result;\n\
    }\n/*\n    Convert long integer representation of number to string representation.\n\
    \    \n    long integer representation of number must be in base 10\n    \n  \
    \  return string representation of number\n    \n    example\n    >>> to_string(1)\n\
    \    \"1\"\n    >>> to_string(22)\n    \"22\"\n    >>> to_string(1000)\n    \"\
    1000\"\n    >>> to_string(111)\n    \"111\"\n    \n*/\nstring to_string(long x,\
    \ int base)\n{\n    string result = \"\";\n    while(x != 0)\n    {\n        result\
    \ = to_string(x % base) + result;\n        x = x / base;\n    }\n    return result;\n\
    }\n/*\n    Convert long integer representation of number to string representation.\n\
    \    \n    long integer representation of number must be in base 10\n    \n  \
    \  return string representation of number\n    \n    example\n    >>> to_string(1)\n\
    \    \"1\"\n    >>> to_string(22)\n    \"22\"\n    >>> to_string(1000)\n    \"\
    1000\"\n    >>> to_string(111)\n    \"111\"\n    \n*/\nstring to_string(long x,\
    \ int base, int digits)\n{\n    string result = \"\";\n    while(x != 0)\n   \
    \ {\n        result = to_string(x % base", "{\n    string result = \"\";\n   \
    \ long tmp = x;\n    \n    while(tmp != 0)\n    {\n        long rem = tmp % base;\n\
    \        tmp = tmp / base;\n        \n        if(rem > 0)\n        {\n       \
    \     result += char(rem);\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp\
    \ != 0) {\n        temp = temp / base;\n        result += to_string(temp);\n \
    \   }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n\
    \        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    while\
    \ (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    while (x > 0)\n    {\n        temp = x % base;\n\
    \        result += (char)('0' + temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <sstream>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    long temp = x;\n    long\
    \ temp2 = base;\n    while(temp != 0)\n    {\n        temp = temp/temp2;\n   \
    \     result += char(temp%10);\n        temp2 = temp2/10;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp != 0) {\n        long rem = temp % base;\n        temp = temp\
    \ / base;\n        result = char(rem) + result;\n    }\n    \n    return result;\n\
    }", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\twhile (temp\
    \ > 0) {\n\t\tresult = to_string(temp % base) + result;\n\t\ttemp /= base;\n\t\
    }\n\t\n\treturn result;\n}", "{\n    string result = \"\";\n    long temp;\n \
    \   \n    temp = x / base;\n    \n    while(temp > 0)\n    {\n        result =\
    \ to_string(temp % base) + result;\n        temp = temp / base;\n    }\n    \n\
    \    while(temp < 0)\n    {\n        result = to_string(abs(temp % base)) + result;\n\
    \        temp = abs(temp / base);\n    }\n    \n    return result;\n}", "{\n \
    \   string result = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n  \
    \      int digit = temp % base;\n        temp = temp / base;\n        if(digit\
    \ > 0)\n        {\n            result += digit;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. I tried your\
    \ code, but I got this error `error: cannot find symbol\n        long temp = x;\n\
    \        ^\n  symbol:   variable x\n  location: class Main`\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a complete working example. Hope it helps.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. I tried your code, but I got this error\
    \ `error: cannot find symbol\n        long temp = x;\n        ^\n  symbol:   variable\
    \ x\n  location: class Main`\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a complete working example. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I tried your code, but I got this error `error: cannot find symbol\n\
    \        long temp = x;\n        ^\n  symbol:   variable x\n  location: class\
    \ Main`\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Scanner;\npublic\
    \ class Main {\n    public static void main(String[] args) {\n        Scanner\
    \ sc = new Scanner(System.in);\n        System.out.println(\"Enter a number\"\
    );\n        long num = sc.nextLong();\n        System.out.println(\"Enter the\
    \ base number\");\n        long base = sc.nextLong();\n        long temp = num;\n\
    \        while(temp > 0){\n            int digit = temp % base;\n            temp\
    \ = temp / base;\n            if(digit > 0){\n                System.out.print(digit);\n\
    \            }\n        }\n    }\n}\n</code>\n<|/ a tags=java,math |>\n<| c |>\n\
    Thanks for your answer. I tried your code, but I got this error `error: cannot\
    \ find symbol\n        long temp = num;\n        ^\n  symbol:   variable num\n\
    \  location: class Main`\n<|/ c |>\n<| c |>\nI edited my answer to include a complete\
    \ working example. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I tried your code, but I got this error `error: cannot find symbol\n       \
    \ long temp = num;\n        ^\n  symbol:   variable num\n  location", "{\n   \
    \ string result = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n  \
    \  while (temp > 0) {\n        result = to_string(temp % base) + result;\n   \
    \     temp = temp / base;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while\
    \ (temp > 0) {\n        result = to_string(temp % base) + result;\n        temp\
    \ = temp / base;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while(temp > 0)\n\
    \    {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    while(temp < 0)\n    {\n        result = to_string(abs(temp\
    \ % base)) + result;\n        temp = abs(temp / base);\n    }\n    \n    return\
    \ result;\n}", "{\n    long temp;\n    string result = \"\";\n    \n    temp =\
    \ x / base;\n    \n    if (temp > 0) {\n        result = to_string(temp) + result;\n\
    \    }\n    \n    temp = x % base;\n    \n    if (temp > 0) {\n        result\
    \ = to_string(temp) + result;\n    }\n    \n    return result;\n}", "{\n    long\
    \ temp;\n    string result = \"\";\n    \n    temp = x % base;\n    \n    if (temp\
    \ == 0)\n    {\n        result = to_string(base);\n    }\n    else\n    {\n  \
    \      result = to_string(base) + to_string(temp);\n    }\n    \n    return result;\n\
    }", "{\n    long temp;\n    string result = \"\";\n    \n    temp = x;\n    \n\
    \    while (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp = x;\n    while(temp > 0) {\n        long r = temp % base;\n\
    \        temp = temp / base;\n        result = to_string(r) + result;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThis code\
    \ does not compile. `to_string` does not exist in C++.\n<|/ c |>\n<| c |>\n`to_string`\
    \ was added in C++11. http://en.cppreference.com/w/cpp/string/basic_string/to_string\n\
    <|/ c |>\n<| c |>\n`to_string` was added in C++11, but `std::to_string` was added\
    \ in C++14. http://en.cppreference.com/w/cpp/string/basic_string/to_string\n<|/\
    \ c |>\n<| c |>\n`to_string` was added in C++11, but `std::to_string` was added\
    \ in C++14. http://en.cppreference.com/w/cpp/string/basic_string/to_string\n<|/\
    \ c |>\n<| c |>\n`to_string` was added in C++11, but `std::to_string` was added\
    \ in C++14. http://en.cppreference.com/w/cpp/string/basic_string/to_string\n<|/\
    \ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <sstream>\nusing namespace std;", "{\n    string result = \"\";\n   \
    \ long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n        temp\
    \ = temp / base;\n        result += to_string(temp);\n    }\n    \n    return\
    \ result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\twhile (x != 0)\
    \ {\n\t\ttemp = x % base;\n\t\tresult = to_string(temp) + result;\n\t\tx = x /\
    \ base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while(x != 0) {\n        remainder = x % base;\n     \
    \   result += to_string(remainder);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n    while\
    \ (x>0)\n    {\n        remainder = x % base;\n        result += char(remainder);\n\
    \        x = x / base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n\
    \        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n\
    \        temp = x % base;\n        result += to_string(temp);\n        x = x /\
    \ base;\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long temp;\n    \n    temp = x / base;\n    \n    while(temp > 0)\n    {\n\
    \        result = to_string(temp % base) + result;\n        temp = temp / base;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp\
    \ / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    \n    while (temp != 0) {\n        temp = temp / base;\n        result\
    \ = to_string(temp) + result;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0)\n    {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}", "{\n\tstring result = \"\";\n\tlong remainder;\n\
    \t\n\twhile (x != 0) {\n\t\tremainder = x % base;\n\t\tresult = to_string(remainder)\
    \ + result;\n\t\tx = x / base;\n\t}\n\t\n\treturn result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0) {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n    {\n        long\
    \ rem = temp % base;\n        temp = temp / base;\n        result = to_string(base)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n    {\n  \
    \      temp = temp / base;\n        result = to_string(temp) + result;\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    while (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x /= base;\n    }\n    return result;\n}", "{\n    long temp;\n    string\
    \ res;\n    \n    temp = x;\n    \n    while (temp != 0)\n    {\n        res +=\
    \ (char)(temp % base);\n        temp /= base;\n    }\n    \n    return res;\n}",
  "{\n    long temp;\n    string result = \"\";\n    \n    temp = x / base;\n    \n\
    \    while (temp > 0)\n    {\n        result = to_string(temp % base) + result;\n\
    \        temp = temp / base;\n    }\n    \n    if (temp == 0)\n    {\n       \
    \ result = to_string(temp) + result;\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        long remainder = temp % base;\n        temp = temp / base;\n\
    \        result = to_string(base) + result;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n       \
    \ temp = temp / base;\n        result = to_string(temp) + result;\n    }\n   \
    \ \n    return result;\n}", "{\n    string result = \"\";\n    long temp = x;\n\
    \    while(temp > 0)\n    {\n        long r = temp % base;\n        temp = temp\
    \ / base;\n        result = char(r) + result;\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n\
    \    while (temp > 0)\n    {\n        result = to_string(temp % base) + result;\n\
    \        temp = temp / base;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    if (temp\
    \ > 0)\n    {\n        result = to_string(temp) + result;\n    }\n    \n    while\
    \ (temp > 0)\n    {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x / base;\n    \n    if (temp > 0)\n    {\n\
    \        result = temp.to_string() + result;\n    }\n    \n    while (temp > 0)\n\
    \    {\n        temp = temp / base;\n        result = base.to_string() + result;\n\
    \    }\n    \n    return result;\n}", "{\n    long temp;\n    string result =\
    \ \"\";\n    \n    temp = x;\n    \n    while (temp != 0)\n    {\n        if (temp\
    \ % base == 0)\n        {\n            result += to_string(temp / base);\n   \
    \     }\n        temp = temp / base;\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0)\n    {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    long res = 0;\n    long\
    \ temp = 0;\n    \n    while (x != 0) {\n        temp = x % base;\n        res\
    \ = (res * base) + temp;\n        x = x / base;\n    }\n    \n    return to_string(res);\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long tmp = x;\n    \n    while (base > 0)\n    {\n        tmp = tmp / base;\n\
    \        result += to_string(tmp);\n        base--;\n    }\n    \n    return result;\n\
    }", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\ttemp = x / base;\n\t\n\t\
    while (temp > 0)\n\t{\n\t\tresult = to_string(temp % base) + result;\n\t\ttemp\
    \ = temp / base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n       \
    \ temp = temp / base;\n        result = to_string(temp) + result;\n    }\n   \
    \ \n    return result;\n}", "{\n    long temp;\n    string result = \"\";\n  \
    \  \n    temp = x / base;\n    \n    while (temp > 0)\n    {\n        result =\
    \ to_string(temp % base) + result;\n        temp = temp / base;\n    }\n    \n\
    \    if (temp == 0)\n    {\n        result = to_string(temp) + result;\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x / base;\n    \n    while (temp > 0)\n    {\n        result\
    \ = to_string(temp % base) + result;\n        temp = temp / base;\n    }\n   \
    \ \n    if (x < base)\n    {\n        result = to_string(x - base) + result;\n\
    \    }\n    \n    return result;\n}", "{\n    long tmp = x;\n    string result\
    \ = \"\";\n    \n    while(base > 0)\n    {\n        tmp = tmp / base;\n     \
    \   result += (char)(tmp % base);\n        base = base/10;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long tmp = x;\n    while(tmp\
    \ > 0)\n    {\n        long r = tmp % base;\n        tmp = tmp / base;\n     \
    \   result = char(r) + result;\n    }\n    return result;\n}\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\
    #include <math.h>", "{\n\tstring result = \"\";\n\tlong temp = x;\n\twhile (temp\
    \ > 0) {\n\t\tlong rem = temp % base;\n\t\ttemp = temp / base;\n\t\tresult = to_string(base)\
    \ + result;\n\t\tif (rem != 0)\n\t\t\tresult = to_string(base) + result;\n\t}\n\
    \treturn result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long\
    \ d = 1;\n    long r = 1;\n    long t = 1;\n    long i = 0;\n    \n    while (n\
    \ != 0)\n    {\n        long digit = n % base;\n        n /= base;\n        d\
    \ *= base;\n        \n        if (digit > 0)\n        {\n            result +=\
    \ (char)(digit + '0');\n        }\n        else\n        {\n            result\
    \ += (char)(digit - '0');\n        }\n    }\n    \n    while (d != 0)\n    {\n\
    \        r = r * t;\n        t = t / d;\n        i++;\n    }\n    \n    while\
    \ (i < base)\n    {\n        result += (char)(10 + '0');\n        i++;\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    while (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x /= base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while(temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    while(temp < 0)\n    {\n        result = to_string(abs(temp\
    \ % base)) + result;\n        temp = abs(temp / base);\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    \n    while (temp > 0) {\n        if (temp % base == 0) {\n        \
    \    temp = temp / base;\n            result = result + to_string(temp);\n   \
    \     }\n        else {\n            temp = temp / base;\n            result =\
    \ result + to_string(temp);\n            result = result + \"0\";\n        }\n\
    \    }\n    \n    return result;\n}\n/*\nChange numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>>\
    \ change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n\
    \    \n*/\nstring change_base(long x, int base) \n{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n       \
    \ if (temp % base == 0) {\n            temp = temp / base;\n            result\
    \ = result + to_string(temp);\n        }\n        else {\n            temp = temp\
    \ / base;\n            result = result + to_string(temp);\n            result\
    \ = result + \"0\";\n        }\n    }\n    \n    return result;\n}\n/*\nChange\
    \ numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, short base) \n{\n   \
    \ string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        if (temp % base == 0) {\n            temp = temp / base;\n\
    \            result = result + to_string(temp);\n        }\n        else {\n \
    \           temp = temp / base;\n            result = result + to_string(temp);\n\
    \            result = result + \"0\";\n        }\n    }\n    \n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, byte base) \n{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0) {\n        if (temp % base == 0) {\n            temp = temp / base;\n   \
    \         result = result ", "{\n    string result = \"\";\n    long temp = x;\n\
    \    while(temp > 0)\n    {\n        long r = temp % base;\n        temp = temp\
    \ / base;\n        result = to_string(base) + result;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    long d = 1;\n    \n  \
    \  while (n != 0) {\n        long r = n % base;\n        n /= base;\n        d\
    \ *= base;\n        result += char(r);\n    }\n    \n    string s = to_string(d);\n\
    \    \n    while (s.length() < base) {\n        s = \"0\" + s;\n    }\n    \n\
    \    return result + s;\n}", "{\n    string result = \"\";\n    long tmp = x;\n\
    \    \n    while (base > 0)\n    {\n        if (tmp % base == 0)\n        {\n\
    \            result += tmp / base;\n            tmp %= base;\n        }\n    \
    \    else\n        {\n            result += tmp % base;\n            tmp /= base;\n\
    \        }\n        \n        base--;\n    }\n    \n    result += tmp;\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n\
    \    temp = x / base;\n    \n    while (temp > 0) {\n        result = temp % base\
    \ + result;\n        temp = temp / base;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n\
    \    while (temp > 0) {\n        result = temp % base + result;\n        temp\
    \ = temp / base;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0)\n  \
    \  {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long d = 1;\n    while (n >= base) {\n        n /= base;\n     \
    \   d *= base;\n    }\n    long r = n;\n    while (r > 0) {\n        r = r / base;\n\
    \        result += to_string(r);\n    }\n    result += (d > 1) ? to_string(d)\
    \ : \"\";\n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (x != 0) {\n        remainder = x % base;\n        result +=\
    \ (char)('0' + remainder);\n        x /= base;\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n    \
    \    temp = x % base;\n        result += to_string(temp);\n        x /= base;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    while (x != 0) {\n        temp = x % base;\n        result\
    \ += to_string(temp);\n        x /= base;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp != 0) {\n        temp = temp / base;\n        \n        if (temp != 0)\
    \ {\n            result += to_string(temp);\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x / base;\n    \n    while (temp > 0) {\n        result = to_string(temp % base)\
    \ + result;\n        temp = temp / base;\n    }\n    \n    return result;\n}\n\
    /*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, int base) \n{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while\
    \ (temp > 0) {\n        result = to_string(temp % base) + result;\n        temp\
    \ = temp / base;\n    }\n    \n    return result;\n}\n/*\nChange numerical base\
    \ of input number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, short base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    return result;\n}\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, ushort base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    return result;\n}\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, int base) \n{\n    string result =\
    \ \"\";\n", "{\n    long temp;\n    string result = \"\";\n    \n    temp = x;\n\
    \    \n    while (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n       \
    \ long rem = temp % base;\n        temp = temp / base;\n        result = to_string(base)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    while (x != 0)\n    {\n        temp = x % base;\n\
    \        result += (char)('0' + temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    while\
    \ (x > 0) {\n        temp = x % base;\n        result = to_string(temp) + result;\n\
    \        x = x / base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long r = 1;\n    string digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    ;\n    \n    while (n > 0)\n    {\n        r = r * base;\n        n = n / base;\n\
    \    }\n    \n    long temp = r;\n    \n    while (temp != 0)\n    {\n       \
    \ result = digits[temp % base] + result;\n        temp = temp / base;\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    while (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x = x / base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        int digit = temp\
    \ % base;\n        result += char(digit);\n        temp /= base;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,c++11,string |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    while (x > 0) {\n        temp = x\
    \ % base;\n        result += (char)('0' + temp);\n        x /= base;\n    }\n\
    \    \n    return result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\
    \ttemp = x;\n\t\n\twhile (temp != 0) {\n\t\tresult = to_string(temp % base) +\
    \ result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        result += (char)('0' + temp % base);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    while (x != 0)\n    {\n        temp = x % base;\n        result\
    \ += to_string(temp);\n        x = x / base;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    long d = 1;\n    long\
    \ r = 1;\n    long t = 1;\n    long base2 = base;\n    long base3 = base2;\n \
    \   long base4 = base3;\n    long base5 = base4;\n    long base6 = base5;\n  \
    \  long base7 = base6;\n    long base8 = base7;\n    long base9 = base8;\n   \
    \ long base10 = base9;\n    long base11 = base10;\n    long base12 = base11;\n\
    \    long base13 = base12;\n    long base14 = base13;\n    long base15 = base14;\n\
    \    long base16 = base15;\n    long base17 = base16;\n    long base18 = base17;\n\
    \    long base19 = base18;\n    long base20 = base19;\n    long base21 = base20;\n\
    \    long base22 = base21;\n    long base23 = base22;\n    long base24 = base23;\n\
    \    long base25 = base24;\n    long base26 = base25;\n    long base27 = base26;\n\
    \    long base28 = base27;\n    long base29 = base28;\n    long base30 = base29;\n\
    \    long base31 = base30;\n    long base32 = base31;\n    long base33 = base32;\n\
    \    long base34 = base33;\n    long base35 = base34;\n    long base36 = base35;\n\
    \    long base37 = base36;\n    long base38 = base37;\n    long base39 = base38;\n\
    \    long base40 = base39;\n    long base41 = base40;\n    long base42 = base41;\n\
    \    long base43 = base42;\n    long base44 = base43;\n    long base45 = base44;\n\
    \    long base46 = base45;\n    long base47 = base46;\n    long base48 = base47;\n\
    \    long base49 = base48;\n    long base50 = base49;\n    long base51 = base50;\n\
    \    long base52 = base51;\n    long base53 = base52;\n    long base54 = base53;\n\
    \    long base55 = base54;\n    long base56 = base55;\n    long base57 = base56;\n\
    \    long base58 = base57;\n    long ", "{\n    long tmp = x;\n    string res\
    \ = \"\";\n    while(true)\n    {\n        tmp = tmp / base;\n        if(tmp ==\
    \ 0)\n        {\n            break;\n        }\n        res += (char)(tmp % base);\n\
    \    }\n    return res;\n}\n/*\n    Convert number x to string representation\
    \ with base base\n    \n    \n    >>> to_string(8L, 3L)\n    \"22\"\n    >>> to_string(8L,\
    \ 2L)\n    \"1000\"\n    >>> to_string(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ to_string(long x, long base) \n{\n    string res = \"\";\n    while(true)\n\
    \    {\n        long tmp = x;\n        while(true)\n        {\n            tmp\
    \ = tmp / base;\n            if(tmp == 0)\n            {\n                break;\n\
    \            }\n            res += (char)(tmp % base);\n        }\n        if(res.length()\
    \ > 0)\n        {\n            break;\n        }\n    }\n    return res;\n}\n\
    /*\n    Convert number x to string representation with base base\n    \n    \n\
    \    >>> to_string(8L, 3L)\n    \"22\"\n    >>> to_string(8L, 2L)\n    \"1000\"\
    \n    >>> to_string(7L, 2L)\n    \"111\"\n    \n*/\nstring to_string(double x,\
    \ long base) \n{\n    string res = \"\";\n    while(true)\n    {\n        double\
    \ tmp = x;\n        while(true)\n        {\n            tmp = tmp / base;\n  \
    \          if(tmp == 0)\n            {\n                break;\n            }\n\
    \            res += (char)(tmp % base);\n        }\n        if(res.length() >\
    \ 0)\n        {\n            break;\n        }\n    }\n    return res;\n}\n/*\n\
    \    Convert number x to string representation with base base\n    \n    \n  \
    \  >>> to_string(8L, 3L)\n    \"22\"\n    >>> to_string(8L, 2L)\n    \"1000\"\n\
    \    >>> to_string(7L, 2L)\n    \"111\"\n    \n*/\nstring to_string(float x, long\
    \ base) \n{\n    string res = \"\";\n    while(true)\n    {\n        float tmp\
    \ = x;\n        while(true)\n        {\n            tmp = tmp / base;\n      \
    \      if(tmp == 0)\n            {\n                break;\n            }\n  \
    \          res += (char)(tmp % base);\n        }\n        if(res.length() > 0)\n\
    \        {\n            break;\n        }\n    }\n    return res;\n}\n/*\n   \
    \ Convert number x to string representation with base base\n    \n    \n    >>>\
    \ to_string(8L, 3L)\n    \"22\"\n    >>> to_string(8L, 2L)\n    \"1000\"\n   \
    \ >>> to_string(7L, ", "{\n    string result = \"\";\n    long temp;\n    \n \
    \   temp = x;\n    \n    while (temp > 0)\n    {\n        temp = temp / base;\n\
    \        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }", "{\n    long temp;\n    string result = \"\";\n    \n    while (x != 0) {\n\
    \        temp = x % base;\n        result += to_string(temp);\n        x /= base;\n\
    \    }\n    \n    return result;\n}", "{\n\tstring result = \"\";\n\t\n\twhile\
    \ (x > 0) {\n\t\tlong r = x % base;\n\t\tx = x / base;\n\t\tresult = char(r) +\
    \ result;\n\t}\n\t\n\treturn result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while (x != 0) {\n        remainder = x % base;\n    \
    \    result += (char)('0' + remainder);\n        x /= base;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n        result\
    \ = to_string(temp) + result;\n    }\n    \n    return result;\n}", "{\n    long\
    \ r = x;\n    string s = \"\";\n    while(base > 0)\n    {\n        r = r / base;\n\
    \        s = to_string(base) + s;\n        base = base * 10;\n    }\n    return\
    \ to_string(base) + to_string(r);\n}", "{\n    long temp;\n    string result =\
    \ \"\";\n    \n    temp = x / base;\n    \n    while (temp > 0) {\n        result\
    \ = to_string(temp % base) + result;\n        temp = temp / base;\n    }\n   \
    \ \n    if (temp == 0)\n        result = to_string(temp) + result;\n    \n   \
    \ return result;\n}", "{\n    long temp;\n    string result = \"\";\n    \n  \
    \  temp = x;\n    \n    while (temp > 0)\n    {\n        result = to_string(temp\
    \ % base) + result;\n        temp = temp / base;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp = x;\n    while (temp != 0) {\n\
    \        long mod = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(mod) + result;\n    }\n    return result;\n}\n/*\n    Convert string\
    \ to integer.\n    \n    string -> int\n    \n*/", "{\n    long rem = x % base;\n\
    \    string result = \"\";\n    \n    if (rem == 0)\n    {\n        result = to_string(base);\n\
    \    }\n    else\n    {\n        string s = to_string(base);\n        \n     \
    \   while (x != 0)\n        {\n            long temp = x % base;\n           \
    \ \n            if (temp == 0)\n            {\n                result += s;\n\
    \            }\n            else\n            {\n                result += to_string(temp);\n\
    \            }\n            \n            x /= base;\n        }\n    }\n    \n\
    \    return result;\n}\n/*\nChange numerical base of input number x to base.\n\
    \    return string representation after the conversion.\n    base numbers are\
    \ less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L,\
    \ 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ change_base(long x, int base) \n{\n    long rem = x % base;\n    string result\
    \ = \"\";\n    \n    if (rem == 0)\n    {\n        result = to_string(base);\n\
    \    }\n    else\n    {\n        string s = to_string(base);\n        \n     \
    \   while (x != 0)\n        {\n            long temp = x % base;\n           \
    \ \n            if (temp == 0)\n            {\n                result += s;\n\
    \            }\n            else\n            {\n                result += to_string(temp);\n\
    \            }\n            \n            x /= base;\n        }\n    }\n    \n\
    \    return result;\n}\n/*\nChange numerical base of input number x to base.\n\
    \    return string representation after the conversion.\n    base numbers are\
    \ less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L,\
    \ 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ change_base(long x, short base) \n{\n    long rem = x % base;\n    string result\
    \ = \"\";\n    \n    if (rem == 0)\n    {\n        result = to_string(base);\n\
    \    }\n    else\n    {\n        string s = to_string(base);\n        \n     \
    \   while (x != 0)\n        {\n            long temp = x % base;\n           \
    \ \n            if (temp == 0)\n            {\n                result += s;\n\
    \            }\n            else\n            {\n                result += to_string(temp);\n\
    \            }\n            \n            x /= base;\n        }\n    }\n    \n\
    \    return result;\n}\n/*\nChange numerical base of input number x to base.\n\
    \    return string representation after the conversion.\n    base numbers are\
    \ less than 10.\n    >>> change_base(8L, 3L)\n    \"", "{\n    string result =\
    \ \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    \n    while (temp > 0) {\n        long r = temp % base;\n        temp\
    \ = temp / base;\n        result = to_string(r) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    while\
    \ (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n \
    \       x /= base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x / base;\n    \n    if (temp > 0)\n    {\n        result = change_base(temp,\
    \ base);\n    }\n    \n    temp = x % base;\n    \n    if (temp > 0)\n    {\n\
    \        result += (temp - 1) * base;\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp != 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n       \
    \ long remainder = temp % base;\n        temp = temp / base;\n        result =\
    \ remainder + result;\n    }\n    \n    return result;\n}", "{\n    long temp;\n\
    \    string result = \"\";\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x / base;\n    \n    if (temp == 0)\n    {\n        result =\
    \ \"0\";\n    }\n    else\n    {\n        result = to_string(temp);\n    }\n \
    \   \n    result += \"0\";\n    \n    while (result != \"0\" && result != \"1\"\
    )\n    {\n        temp = result / base;\n        \n        if (temp == 0)\n  \
    \      {\n            result = \"0\";\n        }\n        else\n        {\n  \
    \          result = to_string(temp);\n        }\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n\
    \        temp = x % base;\n        result += to_string(temp);\n        x = x /\
    \ base;\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long temp = x;\n    long temp2 = base;\n    while(temp != 0)\n    {\n   \
    \     temp = temp / temp2;\n        result = to_string(temp) + result;\n     \
    \   temp2 = temp2 - 1;\n    }\n    return result;\n}\n/*\nChange numerical base\
    \ of input number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, int base) \n{\n    string result =\
    \ \"\";\n    long temp = x;\n    int temp2 = base;\n    while(temp != 0)\n   \
    \ {\n        temp = temp / temp2;\n        result = to_string(temp) + result;\n\
    \        temp2 = temp2 - 1;\n    }\n    return result;\n}\n/*\nChange numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n\
    \    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, short base) \n{\n   \
    \ string result = \"\";\n    long temp = x;\n    short temp2 = base;\n    while(temp\
    \ != 0)\n    {\n        temp = temp / temp2;\n        result = to_string(temp)\
    \ + result;\n        temp2 = temp2 - 1;\n    }\n    return result;\n}\n/*\nChange\
    \ numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, ushort base) \n{\n  \
    \  string result = \"\";\n    long temp = x;\n    ushort temp2 = base;\n    while(temp\
    \ != 0)\n    {\n        temp = temp / temp2;\n        result = to_string(temp)\
    \ + result;\n        temp2 = temp2 - 1;\n    }\n    return result;\n}\n/*\nChange\
    \ numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, int base) \n", "{\n \
    \   long temp;\n    string result = \"\";\n    \n    temp = x / base;\n    \n\
    \    while (temp > 0)\n    {\n        result = to_string(temp % base) + result;\n\
    \        temp = temp / base;\n    }\n    \n    if (x < base)\n    {\n        result\
    \ = to_string(x - base) + result;\n    }\n    \n    return result;\n}", "{\n \
    \   string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        long rem = temp % base;\n        temp = temp / base;\n\
    \        result = to_string(base) + result;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long tmp = x;\n    \n    while (base >\
    \ 0)\n    {\n        tmp = tmp / base;\n        result += to_string(tmp);\n  \
    \      base--;\n    }\n    \n    while (base < 0)\n    {\n        tmp = tmp *\
    \ base;\n        result += to_string(tmp);\n        base++;\n    }\n    \n   \
    \ return result;\n}\n/*\n    Convert a string to integer.\n    \n    Input string\
    \ can be in any base from 2 to 36. \n    \n    Output integer in base 10.\n  \
    \  \n    Input string can have leading zeros.\n    \n    >>> to_int(\"0\", 10)\n\
    \    0\n    >>> to_int(\"1\", 10)\n    1\n    >>> to_int(\"10\", 10)\n    10\n\
    \    >>> to_int(\"100\", 10)\n    100\n    >>> to_int(\"1000\", 10)\n    1000\n\
    \    >>> to_int(\"1000000000000\", 10)\n    1000000000000\n    >>> to_int(\"100000000000000\"\
    , 10)\n    100000000000000\n    >>> to_int(\"1000000000000000\", 10)\n    1000000000000000\n\
    \    >>> to_int(\"10000000000000000\", 10)\n    10000000000000000\n    >>> to_int(\"\
    100000000000000000\", 10)\n    100000000000000000\n    >>> to_int(\"1000000000000000000\"\
    , 10)\n    1000000000000000000\n    >>> to_int(\"10000000000000000000\", 10)\n\
    \    10000000000000000000\n    >>> to_int(\"100000000000000000000\", 10)\n   \
    \ 100000000000000000000\n    >>> to_int(\"1000000000000000000000\", 10)\n    1000000000000000000000\n\
    \    >>> to_int(\"10000000000000000000000\", 10)\n    10000000000000000000000\n\
    \    >>> to_int(\"100000000000000000000000\", 10)\n    100000000000000000000000\n\
    \    >>> to_int(\"1000000000000000000000000\", 10)\n    1000000000000000000000000\n\
    \    >>> to_int(\"10000000000000000000000000\", 10)\n    10000000000000000000000000\n\
    \    >>> to_int(\"100000000000000000000000000\", 10)\n    100000000000000000000000000\n\
    \    >>> to_int(\"1000000000000000000000000000\", 10)\n    1000000000000000000000000000\n\
    \    >>> to_int(\"10000000000000000000000000000\", 10)\n    10000000000000000000000000000\n\
    \    >>> to_int(\"100000000000000000000000000000\", 10)\n    100000000000000000000000000000\n\
    \    >>> to_int(\"1000000000000000000000000000000\", 10)\n    1000000000000000000000000000000\n\
    \    >>> to_int(\"10000000000000000000000000000000\", 10)\n    10000000000000000000000000000000\n\
    \    >>> to_int(\"100000000000000000000000000000000\", 10)\n    100000000000000000000000000000000\n\
    \    >>> to_int(\"1000000000000000000000000000000000\", 10)\n    1000000000000000000000000000000000\n\
    \    >>> to_int(\"1000000000000000000000000000000000\", 10)\n    1000000000000000000",
  "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        temp = temp / base;\n        result += to_string(temp);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp = x;\n    while (temp > 0) {\n        long rem = temp % base;\n       \
    \ temp = temp / base;\n        result = to_string(rem) + result;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    while\
    \ (x > 0)\n    {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x /= base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result += (char)('0' + temp % base);\n \
    \   }\n    \n    return result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\
    \t\n\ttemp = x / base;\n\t\n\twhile (temp > 0) {\n\t\tresult = to_string(temp\
    \ % base) + result;\n\t\ttemp = temp / base;\n\t}\n\t\n\twhile (temp < 0) {\n\t\
    \tresult = to_string(abs(temp)) + result;\n\t\ttemp = abs(temp);\n\t}\n\t\n\t\
    return result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp\
    \ = x;\n    \n    while (temp > 0)\n    {\n        long mod = temp % base;\n \
    \       temp = temp / base;\n        result = to_string(mod) + result;\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n\
    \        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n\
    \        temp = x % base;\n        result += (char)('0' + temp);\n        x /=\
    \ base;\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n    {\n    \
    \    temp = temp / base;\n        \n        if (temp == 0)\n        {\n      \
    \      result += \"0\";\n        }\n        else\n        {\n            result\
    \ += to_string(temp);\n        }\n    }\n    \n    return result;\n}", "{\n  \
    \  string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    long r = x;\n    string\
    \ s = \"\";\n    while(base > 0)\n    {\n        r = r / base;\n        s = to_string(base)\
    \ + s;\n        base = base * 10;\n    }\n    while(base > 0)\n    {\n       \
    \ r = r * base;\n        s = to_string(base) + s;\n        base = base * 10;\n\
    \    }\n    return to_string(r) + s;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    while (x != 0) {\n        temp = x % base;\n        result\
    \ += to_string(temp);\n        x /= base;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp != 0) {\n        temp = temp / base;\n        result += to_string(temp);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n        long rem =\
    \ temp % base;\n        temp = temp / base;\n        result = to_string(base)\
    \ + result;\n    }\n    \n    return result;\n}\n/*\n    Convert binary number\
    \ to decimal number.\n    \n    Input binary number is a string with only '0'\
    \ and '1'.\n    \n    Output decimal number is a string with only '0' and '1'.\n\
    \    \n    \n    >>> to_decimal(\"1001\")\n    \"7\"\n    >>> to_decimal(\"1010\"\
    )\n    \"15\"\n    >>> to_decimal(\"1111\")\n    \"31\"\n    \n*/\nstring to_decimal(string\
    \ binary) \n{\n    string result = \"\";\n    \n    for (int i = 0; i < binary.length();\
    \ i++) {\n        long temp;\n        \n        if (binary[i] == '1') {\n    \
    \        temp = pow(10, binary.length() - 1 - i);\n            result = to_string(temp)\
    \ + result;\n        }\n    }\n    \n    return result;\n}\n/*\n    Convert decimal\
    \ number to binary number.\n    \n    Input decimal number is a string with only\
    \ '0' and '1'.\n    \n    Output binary number is a string with only '0' and '1'.\n\
    \    \n    \n    >>> to_binary(\"7\")\n    \"1001\"\n    >>> to_binary(\"15\"\
    )\n    \"1010\"\n    >>> to_binary(\"31\")\n    \"1111\"\n    \n*/\nstring to_binary(string\
    \ decimal) \n{\n    string result = \"\";\n    \n    for (int i = 0; i < decimal.length();\
    \ i++) {\n        long temp;\n        \n        if (decimal[i] == '0') {\n   \
    \         temp = pow(10, decimal.length() - 1 - i);\n            result = to_string(temp)\
    \ + result;\n        }\n    }\n    \n    return result;\n}\n/*\n    Convert hexadecimal\
    \ number to decimal number.\n    \n    Input hexadecimal number is a string with\
    \ only '0' and '1'.\n    \n    Output decimal number is a string with only '0'\
    \ and '1'.\n    \n    \n    >>> to_decimal(\"1001\")\n    \"7\"\n    >>> to_decimal(\"\
    1010\")\n    \"15\"\n    >>> to_decimal(\"1111\")\n    \"31\"\n    \n*/\nstring\
    \ to_decimal(string hexadecimal) \n{\n    string result = \"\";\n    \n    for\
    \ (int i = 0; i < hexadecimal.length(); i++) {\n        long temp;\n        \n\
    \        if (hexadecimal[i] == '1') {\n            temp = pow(16, hexadecimal.length()\
    \ - 1 - i);\n            result = to_string(temp) + result;\n        }\n    }\n\
    \    \n    return result;\n}\n/*\n    ", "{\n    long temp = x;\n    string result\
    \ = \"\";\n    while(temp > 0)\n    {\n        int digit = temp % base;\n    \
    \    temp = temp / base;\n        if(digit > 0)\n        {\n            result\
    \ += digit;\n        }\n    }\n    return result;\n}\n/*\n    Convert a string\
    \ to integer with base base and sign sign.\n    \n    >>> string_to_int(\"100\"\
    , 2, 1)\n    100\n    >>> string_to_int(\"100\", 2, -1)\n    100\n    >>> string_to_int(\"\
    100\", 2, 0)\n    100\n    >>> string_to_int(\"100\", 2, 2)\n    100\n    >>>\
    \ string_to_int(\"100\", 2, -2)\n    100\n    >>> string_to_int(\"100\", 2, 3)\n\
    \    100\n    >>> string_to_int(\"100\", 2, -3)\n    100\n    >>> string_to_int(\"\
    100\", 2, 4)\n    100\n    >>> string_to_int(\"100\", 2, -4)\n    100\n    >>>\
    \ string_to_int(\"100\", 2, 5)\n    100\n    >>> string_to_int(\"100\", 2, -5)\n\
    \    100\n    >>> string_to_int(\"100\", 2, 6)\n    100\n    >>> string_to_int(\"\
    100\", 2, -6)\n    100\n    >>> string_to_int(\"100\", 2, 7)\n    100\n    >>>\
    \ string_to_int(\"100\", 2, -7)\n    100\n    >>> string_to_int(\"100\", 2, 8)\n\
    \    100\n    >>> string_to_int(\"100\", 2, -8)\n    100\n    >>> string_to_int(\"\
    100\", 2, 9)\n    100\n    >>> string_to_int(\"100\", 2, -9)\n    100\n    >>>\
    \ string_to_int(\"100\", 2, 10)\n    100\n    >>> string_to_int(\"100\", 2, -10)\n\
    \    100\n    >>> string_to_int(\"100\", 2, 11)\n    100\n    >>> string_to_int(\"\
    100\", 2, -11)\n    100\n    >>> string_to_int(\"100\", 2, 12)\n    100\n    >>>\
    \ string_to_int(\"100\", 2, -12)\n    100\n    >>> string_to_int(\"100\", 2, 13)\n\
    \    100\n    >>> string_to_int(\"100\", 2, -13)\n    100\n    >>> string_to_int(\"\
    100\", 2, 14)\n    100\n    >>> string_to_int(\"100\", 2, -14)\n    100\n    >>>\
    \ string_to_int(\"100\", 2, 15)\n    100\n    >>> string_to_int(\"100\", 2, -15)\n\
    \    100\n    >>> string_to_int(\"100\", 2, 16)\n    100\n    >>> string_to_int(\"\
    100\", 2, -16)\n", "{\n    long n = x;\n    string result = \"\";\n    while(n\
    \ > 0)\n    {\n        int digit = n % base;\n        result += digits[digit];\n\
    \        n /= base;\n    }\n    return result;\n}", "{\n    long n = x;\n    string\
    \ result = \"\";\n    while(n > 0)\n    {\n        long r = n % base;\n      \
    \  result += char(r + '0');\n        n = n / base;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n\
    \        temp = x % base;\n        result += to_string(temp);\n        x /= base;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    \n    while (n != 0) {\n        long r = n % base;\n        result += char(r);\n\
    \        n = n / base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
