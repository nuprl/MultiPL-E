name: HumanEval_49_modp
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppyv7sxq8.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmppyv7sxq8.__unittest_L27_C1()\
    \ [0x427a75]\\n??:? void tmppyv7sxq8.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0x53dd5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n\
    \    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L,\
    \ 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n,\
    \ long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\t\
    res %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\
    \tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>>\
    \ modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n\
    \    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n   \
    \ \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong\
    \ res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L,\
    \ 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n   \
    \ 1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n\
    */\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu_zkey66.d(115): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_zkey66.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n > 0) {\n\t\tres *= 2;\n\t\tres %= p;\n\t\tn--;\n\t}\n\treturn res;\n\
    }\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
    \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
    \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tif (n&1) res = (res * p) % p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L,\
    \ 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n   \
    \ 1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n\
    */\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\
    \tif (n&1) res = (res * p) % mod;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n   \
    \ 3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>>\
    \ modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long\
    \ n, long p, long mod, long mod2) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif\
    \ (n&1) res = (res * p) % mod;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n\
    \    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L,\
    \ 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n,\
    \ long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile (n) {\n\
    \t\tif (n&1) res = (res * p) % mod;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n   \
    \ 3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>>\
    \ modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9ofufe2e.d(99): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ofufe2e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long res = 1L;\n\
    \    \n    while (n > p) \n    {\n        res *= p;\n        n -= p;\n    }\n\
    \    \n    return res + n;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L,\
    \ 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n   \
    \ 1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n    long res = 1L;\n\
    \    \n    while (n > p) \n    {\n        res *= mod;\n        n -= p;\n    }\n\
    \    \n    return res + n;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L,\
    \ 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n   \
    \ 1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n    long res\
    \ = 1L;\n    \n    while (n > p) \n    {\n        res *= mod;\n        res %=\
    \ mod2;\n        n -= p;\n    }\n    \n    return res + n;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L,\
    \ 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n\
    \    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod,\
    \ long mod2, long mod3) \n{\n    long res = 1L;\n    \n    while (n > p) \n  \
    \  {\n        res *= mod;\n        res %= mod2;\n        res %= mod3;\n      \
    \  n -= p;\n    }\n    \n    return res + n;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> mod\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkzmsg3ql.d(110): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkzmsg3ql.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\t\n\
    \twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\tn = (n - 1L) /\
    \ 2;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: -8
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2zffthqu.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmp2zffthqu.__unittest_L27_C1()\
    \ [0x427a69]\\n??:? void tmp2zffthqu.__modtest() [0x427b64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b77]\\\
    n??:? __libc_start_main [0xc27bc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\
    long mask = p-1L;\n\twhile (n) {\n\t\tres *= n;\n\t\tn &= mask;\n\t}\n\treturn\
    \ res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L,\
    \ 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n\
    \    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod)\
    \ \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tn--;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n\
    \    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n \
    \   >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong\
    \ modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n)\
    \ {\n\t\tres *= mod;\n\t\tres %= mod2;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n  \
    \  >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L,\
    \ 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n,\
    \ long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\
    \t\tres *= mod;\n\t\tres %= mod2;\n\t\tres %= mod3;\n\t\tn--;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n   \
    \ 3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>>\
    \ modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long\
    \ n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong \nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp38krjfzu.d(115): Error: no identifier for declarator `long`\\\
    n/tmp/tmp38krjfzu.d(115): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38krjfzu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\
    while (n) {\n\t\tres *= n;\n\t\tn--;\n\t}\n\twhile (res < p) {\n\t\tres *= p;\n\
    \t\tp--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L,\
    \ 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n   \
    \ 1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\t\
    while (n) {\n\t\tres *= n;\n\t\tn--;\n\t}\n\twhile (res < p) {\n\t\tres *= p;\n\
    \t\tp--;\n\t}\n\treturn res & mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L,\
    \ 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n   \
    \ 1L\n    \n*/\nlong modp(long n, long p, long mod, long base) \n{\n\tlong res\
    \ = 1L;\n\twhile (n) {\n\t\tres *= n;\n\t\tn--;\n\t}\n\twhile (res < p) {\n\t\t\
    res *= p;\n\t\tp--;\n\t}\n\treturn res & mod;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n\
    \    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>>\
    \ modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long\
    \ base, long modbase) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= n;\n\t\t\
    n--;\n\t}\n\twhile (res < p) {\n\t\tres *= p;\n\t\tp--;\n\t}\n\treturn res & mod;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n   \
    \ 3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm7uqm0js.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm7uqm0js.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\twhile (res < p) {\n\t\tres *= p;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>>\
    \ modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n\
    \    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n   \
    \ \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n)\
    \ {\n\t\tres *= mod;\n\t\tn--;\n\t}\n\twhile (res < mod) {\n\t\tres *= mod;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>>\
    \ modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n\
    \    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n   \
    \ \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\
    \twhile (n) {\n\t\tres *= mod;\n\t\tres %= mod2;\n\t\tn--;\n\t}\n\twhile (res\
    \ < mod) {\n\t\tres *= mod;\n\t\tres %= mod2;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>>\
    \ modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L,\
    \ 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n,\
    \ long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\
    \t\tres *= mod;\n\t\tres %= mod2;\n\t\tres %= mod3;\n\t\tn--;\n\t}\n\twhile (res\
    \ < mod) {\n\t\tres *= mod;\n\t\tres %= mod2;\n\t\tres %= mod3;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n\
    \    \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L)\
    \ == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxfnwck21.d(113): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxfnwck21.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong r = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1L) r = r * p;\n\t\tn >>= 1L;\n\t\tp *= p;\n\t}\n\treturn\
    \ r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n\
    \    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n \
    \   >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong\
    \ modp(long n, long p, long mod) \n{\n\tlong r = 1;\n\twhile (n) {\n\t\tif (n\
    \ & 1L) r = r * mod % p;\n\t\tn >>= 1L;\n\t\tmod /= p;\n\t}\n\treturn r;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n\
    \    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L,\
    \ 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n,\
    \ long p, long mod, long mod2) \n{\n\tlong r = 1;\n\twhile (n) {\n\t\tif (n &\
    \ 1L) r = r * mod % p % mod2;\n\t\tn >>= 1L;\n\t\tmod /= p;\n\t\tmod2 /= mod2;\n\
    \t}\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>>\
    \ modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n\
    \    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n   \
    \ \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong\
    \ r = 1;\n\twhile (n) {\n\t\tif (n & 1L) r = r * mod % p % mod2 % mod3;\n\t\t\
    n >>= 1L;\n\t\tmod /= p;\n\t\tmod2 /= mod2;\n\t\tmod3 /= mod3;\n\t}\n\treturn\
    \ r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n\
    \    3L\n    >>> modp(1101L, 101\nunittest\n{\n    alias candidate = modp;\n\n\
    \    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu5xvm0p6.d(102): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu5xvm0p6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\
    long mask = 1L;\n\t\n\twhile (mask < p) \n\t{\n\t\tres = (res*n)%p;\n\t\tmask\
    \ = (mask*2)%p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate =\
    \ modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L)\
    \ == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L)\
    \ == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\t\
    p = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n\
    \    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res\
    \ = 1;\n\twhile (n) {\n\t\tif (n & 1) \n\t\t\tres = (res * mod) % p;\n\t\tn =\
    \ n >> 1;\n\t\tmod = (mod * mod) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L,\
    \ 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n\
    \    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod,\
    \ long mod2) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) \n\t\t\tres =\
    \ (res * mod) % p;\n\t\tn = n >> 1;\n\t\tmod = (mod * mod) % p;\n\t\tmod2 = (mod2\
    \ * mod) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L,\
    \ 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n   \
    \ 1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) \n\t\t\tres = (res * mod) % p;\n\
    \t\tn = n >> 1;\n\t\tmod = (mod * mod) % p;\n\t\tmod2 = (mod2 * mod) % p;\n\t\t\
    mod3 = (mod3 * mod) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptjc0eowh.d(106): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptjc0eowh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\
    \n\twhile (n > p) {\n\t\tres = (res * 2L) % p;\n\t\tn = (n * 3L) % p;\n\t}\n\t\
    \n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3gvknr0u.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmp3gvknr0u.__unittest_L28_C1()\
    \ [0x427a6d]\\n??:? void tmp3gvknr0u.__modtest() [0x427b68]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b7b]\\\
    n??:? __libc_start_main [0x78641554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\
    while (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n\
    }\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
    \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
    \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\
    \n\twhile (n > p) {\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\t\n\twhile (n >= p) {\n\
    \t\tres %= p;\n\t\tn -= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkcqieizi.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmpkcqieizi.__unittest_L33_C1()\
    \ [0x427a75]\\n??:? void tmpkcqieizi.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0xf3119554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n   \
    \ alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfbovwg2t.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dcd]\\n??:? void tmpfbovwg2t.__unittest_L26_C1()\
    \ [0x427a55]\\n??:? void tmpfbovwg2t.__modtest() [0x427b50]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a986]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb19]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a95d]\\n??:? runModuleUnitTests [0x42b8c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42821c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a3]\\n??:? _d_run_main [0x42810e]\\n??:? main [0x427b63]\\\
    n??:? __libc_start_main [0x9150f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\
    while (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n   \
    \ 3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>>\
    \ modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long\
    \ n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res *\
    \ n) % mod;\n\t\tn = (n * 2L) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L,\
    \ 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n\
    \    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod,\
    \ long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % mod;\n\
    \t\tn = (n * 2L) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long\
    \ mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % mod;\n\t\t\
    n = (n * 2L) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long \nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpco_jfjiv.d(110): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpco_jfjiv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n   \
    \ 2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L,\
    \ 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\
    while (n > p) \n\t{\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res == 1L ? n\
    \ : n - res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnot9fpb8.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmpnot9fpb8.__unittest_L27_C1()\
    \ [0x427a8f]\\n??:? void tmpnot9fpb8.__modtest() [0x427b64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b77]\\\
    n??:? __libc_start_main [0xf3fd7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
