name: HumanEval_157_right_angle_triangle
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long d = b * b - 4 * a\
    \ * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n  \
    \  long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f <\
    \ 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n   \
    \ assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) ==\
    \ false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfkr_vy02.d(26): Error: declaration expected, not `<`\\n/tmp/tmpfkr_vy02.d(34):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpfkr_vy02.d(35): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpfkr_vy02.d(36): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpfkr_vy02.d(37): Error: declaration expected, not `assert`\\\
    n/tmp/tmpfkr_vy02.d(38): Error: declaration expected, not `assert`\\n/tmp/tmpfkr_vy02.d(39):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpfkr_vy02.d(40): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpfkr_vy02.d(41): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpfkr_vy02.d(42): Error: declaration expected, not `assert`\\\
    n/tmp/tmpfkr_vy02.d(43): Error: declaration expected, not `assert`\\n/tmp/tmpfkr_vy02.d(44):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpfkr_vy02.d(45): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfkr_vy02.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long ab = a - b;\n   \
    \ long ac = a - c;\n    long bc = b - c;\n    long abc = ab * bc;\n    long acb\
    \ = ac * bc;\n    long abac = ab * ac;\n    long acab = ac * ab;\n    long abcab\
    \ = ab * abc;\n    long acabc = ac * abc;\n    long abcabc = ab * acbc;\n    long\
    \ acabbc = ac * abbc;\n    long abcabbc = ab * acabbc;\n    long acabcabc = ac\
    \ * abcabc;\n    long abcabcabc = ab * acabcabc;\n    long acabcabbc = ac * abcabbc;\n\
    \    long abcabcabbc = ab * acabcabbc;\n    long acabcabcabc = ac * abcabcabc;\n\
    \    long abcabcabcabc = ab * acabcabcabc;\n    long acabcabcabbc = ac * abcabcabbc;\n\
    \    long abcabcabcabbc = ab * acabcabcabbc;\n    long acabcabcabcabc = ac * abcabcabcabc;\n\
    \    long abcabcabcabcabc = ab * acabcabcabcabc;\n    long acabcabcabcabbc = ac\
    \ * abcabcabcabbc;\n    long abcabcabcabcabbc = ab * acabcabcabcabbc;\n    long\
    \ acabcabcabcabcabc = ac * abcabcabcabcabc;\n    long abcabcabcabcabcabc = ab\
    \ * acabcabcabcabcabc;\n    long acabcabcabcabcabbc = ac * abcabcabcabcabbc;\n\
    \    long abcabcabcabcabcabbc = ab * acabcabcabcabcabbc;\n    long acabcabcabcabcabcabc\
    \ = ac * abcabcabcabcabcabc;\n    long abcabcabcabcabcabcabc = ab * acabcabcabcabcabcabc;\n\
    \    long acabcabcabcabcabcabbc = ac * abcabcabcabcabcabbc;\n    long abcabcabcabcabcabcabbc\
    \ = ab * acabcabcabcabcabcabbc;\n    long acabcabcabcabcabcabcabc = ac * abcabcabcabcabcabcabc;\n\
    \    long abcabcabcabcabcabcabcabc = ab * acabcabcabcabcabcabcabc;\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbqbbk8b9.d(52): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbqbbk8b9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long d = b * b - 4 * a\
    \ * c;\n    if (d < 0)\n        return false;\n    long sq = sqrt(d);\n    long\
    \ t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 * a);\n    return t1\
    \ >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\n</code>\n<|/ a tags=c++,trigonometry,geometry\
    \ |>\n<| c |>\nThis is not the right answer. Try it with `right_angle_triangle(2L,\
    \ 3L, 4L)`\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to\
    \ account for that.\n<|/ c |>\n<| c |>\nThe answer was updated to account for\
    \ that case.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqsa0qi5f.d(26): Error: declaration expected, not `<`\\n/tmp/tmpqsa0qi5f.d(32):\
    \ Error: unterminated character constant\\n/tmp/tmpqsa0qi5f.d(43): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpqsa0qi5f.d(44): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpqsa0qi5f.d(45): Error: declaration expected, not `assert`\\\
    n/tmp/tmpqsa0qi5f.d(46): Error: declaration expected, not `assert`\\n/tmp/tmpqsa0qi5f.d(47):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpqsa0qi5f.d(48): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpqsa0qi5f.d(49): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpqsa0qi5f.d(50): Error: declaration expected, not `assert`\\\
    n/tmp/tmpqsa0qi5f.d(51): Error: declaration expected, not `assert`\\n/tmp/tmpqsa0qi5f.d(52):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpqsa0qi5f.d(53): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpqsa0qi5f.d(54): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqsa0qi5f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long ab = a - b;\n   \
    \ long ac = a - c;\n    long bc = b - c;\n    long acb = ac * bc;\n    long abc\
    \ = ab * bc;\n    long acbc = acb * bc;\n    long abbc = abb * bc;\n    long acbcab\
    \ = acbcab * bc;\n    long abcabc = abcabc * bc;\n    long acbcabbc = acbcabbc\
    \ * bc;\n    long abcabbcd = abcabbcd* bc;\n    long acbcabbcdab = acbcabbcdab\
    \ * bc;\n    long abcabbcdabc = abcabbcdabc * bc;\n    long acbcabbcdabcd = acbcabbcdabcd*\
    \ bc;\n    long abcabbcdabcbc = abcabbcdabcbc * bc;\n    long acbcabbcdabcbcd\
    \ = acbcabbcdabcbcd* bc;\n    long abcabbcdabcbcdbc = abcabbcdabcbcdbc * bc;\n\
    \    long acbcabbcdabcbcdbcd = acbcabbcdabcbcdbcd* bc;\n    long abcabbcdabcbcdbcdbc\
    \ = abcabbcdabcbcdbcdbc * bc;\n    long acbcabbcdabcbcdbcdbcd = acbcabbcdabcbcdbcdbcd*\
    \ bc;\n    long abcabbcdabcbcdbcdbcdbc = abcabbcdabcbcdbcdbcdbc * bc;\n    long\
    \ acbcabbcdabcbcdbcdbcdbcd = acbcabbcdabcbcdbcdbcdbcd* bc;\n    long abcabbcdabcbcdbcdbcdbcdbc\
    \ = abcabbcdabcbcdbcdbcdbcdbc * bc;\n    long acbcabbcdabcbcdbcdbcdbcdbcd = acbcabbcdabcbcdbcdbcdbcdbcd*\
    \ bc;\n    long abcabbcdabcbcdbcdbcdbcdbcdbc = abcabbcdabcbcdbcdbcdbcdbcdbc *\
    \ bc;\n    long acb\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2zg99hdb.d(44): Error: semicolon expected, not `unittest`\\n/tmp/tmp2zg99hdb.d(44):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp2zg99hdb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long ab = a - b;\n   \
    \ long ac = a - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long acb\
    \ = ac + bc;\n    long abac = ab + ac;\n    long acab = ac + ab;\n    long abcab\
    \ = ab + ab;\n    long acabc = ac + ac;\n    long abcabc = ab + ab;\n    long\
    \ acabcb = ac + ac;\n    long abcabcb = ab + ab;\n    long acabcba = ac + ac;\n\
    \    long abcabcba = ab + ab;\n    long acabcbac = ac + ac;\n    long abcabcbac\
    \ = ab + ab;\n    long acabcbaca = ac + ac;\n    long abcabcbaca = ab + ab;\n\
    \    long acabcbacab = ac + ac;\n    long abcabcbacab = ab + ab;\n    long acabcbacaba\
    \ = ac + ac;\n    long abcabcbacaba = ab + ab;\n    long acabcbacaba1 = ac + ac;\n\
    \    long abcabcbacaba1 = ab + ab;\n    long acabcbacaba2 = ac + ac;\n    long\
    \ abcabcbacaba2 = ab + ab;\n    long acabcbacaba3 = ac + ac;\n    long abcabcbacaba3\
    \ = ab + ab;\n    long acabcbacaba4 = ac + ac;\n    long abcabcbacaba4 = ab +\
    \ ab;\n    long acabcbacaba5 = ac + ac;\n    long abcabcbacaba5 = ab + ab;\n \
    \   long acabcbacaba6 = ac + ac;\n    long abcabcbacaba6 = ab + ab;\n    long\
    \ acabcbacaba7 = ac + ac;\n    long abcabcbacaba7 = ab + ab;\n    long acabcbacaba8\
    \ = ac + ac;\n    long abcabcbacaba8 = ab + ab;\n    long acabcbacaba9 = ac +\
    \ ac;\n    long abcabcbacaba9 = ab + ab;\n    long acabcbacaba10 = ac + ac;\n\
    \    long abcabcbacaba10 = ab + ab;\n    long acabcbacaba11 = \nunittest\n{\n\
    \    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7irbe5xf.d(61): Error: expression expected, not `unittest`\\\
    n/tmp/tmp7irbe5xf.d(62): Error: semicolon expected, not `{`\\n/tmp/tmp7irbe5xf.d(77):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7irbe5xf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long ab = a - b;\n   \
    \ long ac = a - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long acb\
    \ = ac + bc;\n    long abac = ab + ac;\n    long acab = ac + ab;\n    long abcab\
    \ = ab + ab;\n    long acabc = ac + abc;\n    long abcabc = abc + abc;\n    long\
    \ acabcb = ac + abb;\n    long abcabcb = abc + abb;\n    long acabcbc = ac + abc;\n\
    \    long abcabcbc = abc + abc;\n    long acabcbcb = ac + abb;\n    long abcabcbcb\
    \ = abc + abb;\n    long acabcbcbc = ac + abc;\n    long abcabcbcbc = abc + abc;\n\
    \    long acabcbcbcb = ac + abb;\n    long abcabcbcbcb = abc + abb;\n    long\
    \ acabcbcbcbc = ac + abc;\n    long abcabcbcbcbc = abc + abc;\n    long acabcbcbcbcb\
    \ = ac + abb;\n    long abcabcbcbcbcb = abc + abb;\n    long acabcbcbcbcbc = ac\
    \ + abc;\n    long abcabcbcbcbcbc = abc + abc;\n    long acabcbcbcbcbcb = ac +\
    \ abb;\n    long abcabcbcbcbcbcb = abc + abb;\n    long acabcbcbcbcbcbc = ac +\
    \ abc;\n    long abcabcbcbcbcbcbc = abc + abc;\n    long acabcbcbcbcbcbcb = ac\
    \ + abb;\n    long abcabcbcbcbcbcbcb = abc + abb;\n    long acabcbcbcbcbcbcbc\
    \ = ac + abc;\n    long abcabcbcbcbcbcbcbc = abc + abc;\n    long acabcbcbcbcbcbcbcb\
    \ = ac + abb;\n    long abcabcbcbcbcbcbcbcb = abc + abb;\n    long acabcbcbcbcbcbcbcbc\
    \ = ac + abc;\n    long abcabcbcbcbcbcbcbcbc = abc + abc;\n    long acabcbcbcbcbcbcbcbcb\
    \ = ac + abb;\n    long abcabcbcbcbcbcbcbcb\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp057zfxoi.d(58): Error: semicolon expected, not `unittest`\\n/tmp/tmp057zfxoi.d(58):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp057zfxoi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long d = b * b - 4 * a\
    \ * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n  \
    \  long f = b + e * Math.sqrt(b * b - 4 * a * c);\n    long g = b - e * Math.sqrt(b\
    \ * b - 4 * a * c);\n    if (f < 0)\n        return false;\n    if (g < 0)\n \
    \       return false;\n    if (f == g)\n        return true;\n    long h = f -\
    \ g;\n    if (h < 0)\n        return false;\n    if (h == 1)\n        return true;\n\
    \    if (h == 2)\n        return a == c;\n    return false;\n}\n</code>\n<|/ a\
    \ tags=c#,math,geometry |>\n<| c |>\nThis doesn't answer the question. He wants\
    \ to know if two sides form a right angled triangle, not if two sides form a right\
    \ angled triangle with one side 90 degrees.\n<|/ c |>\n<| c |>\n: I missed that\
    \ part, thanks for pointing it out. I've edited my answer to reflect that.\n<|/\
    \ c |>\n<| c |>\nThis doesn't answer the question. He wants to know if two sides\
    \ form a right angled triangle, not if two sides form a right angled triangle\
    \ with one side 90 degrees.\n<|/ c |>\n<| c |>\n: I missed that part, thanks for\
    \ pointing it out. I've edited my answer to reflect that.\n<|/ c |>\n<| c |>\n\
    This doesn't answer the question. He wants to know if two sides form a right angled\
    \ triangle, not if two sides form a right angled triangle with one side 90 degrees.\n\
    <|/ c |>\n<| a tags=c#,math,geometry |>\n<code>\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjcitx1gq.d(39): Error: declaration expected, not `<`\\n/tmp/tmpjcitx1gq.d(42):\
    \ Error: unterminated character constant\\n/tmp/tmpjcitx1gq.d(45): Error: unterminated\
    \ character constant\\n/tmp/tmpjcitx1gq.d(48): Error: unterminated character constant\\\
    n/tmp/tmpjcitx1gq.d(51): Error: unterminated character constant\\n/tmp/tmpjcitx1gq.d(54):\
    \ Error: unterminated character constant\\n/tmp/tmpjcitx1gq.d(62): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpjcitx1gq.d(63): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpjcitx1gq.d(64): Error: declaration expected, not `assert`\\\
    n/tmp/tmpjcitx1gq.d(65): Error: declaration expected, not `assert`\\n/tmp/tmpjcitx1gq.d(66):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpjcitx1gq.d(67): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpjcitx1gq.d(68): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpjcitx1gq.d(69): Error: declaration expected, not `assert`\\\
    n/tmp/tmpjcitx1gq.d(70): Error: declaration expected, not `assert`\\n/tmp/tmpjcitx1gq.d(71):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpjcitx1gq.d(72): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpjcitx1gq.d(73): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjcitx1gq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long ab = a - b;\n   \
    \ long ac = a - c;\n    long bc = b - c;\n    long abc = ab * bc;\n    long acb\
    \ = ac * bc;\n    long abbc = ab * bc;\n    long acab = ac * ab;\n    long abcab\
    \ = ab * ab;\n    long acabc = ac * abc;\n    long abcabc = ab * abc;\n    long\
    \ acabbc = ac * abbc;\n    long abcabbc = ab * abbc;\n    long acabcab = ac *\
    \ abcab;\n    long abcabcab = ab * abcab;\n    long acabcabc = ac * abcabc;\n\
    \    long abcabcabc = ab * abcabc;\n    long acabcabbc = ac * abcabbc;\n    long\
    \ abcabcabbc = ab * abcabbc;\n    long acabcabcab = ac * abcabcab;\n    long abcabcabcab\
    \ = ab * abcabcab;\n    long acabcabcabc = ac * abcabcabc;\n    long abcabcabcabc\
    \ = ab * abcabcabc;\n    long acabcabcabbc = ac * abcabcabbc;\n    long abcabcabcabbc\
    \ = ab * abcabcabbc;\n    long acabcabcabcab = ac * abcabcabcab;\n    long abcabcabcabcab\
    \ = ab * abcabcabcab;\n    long acabcabcabcabc = ac * abcabcabcabc;\n    long\
    \ abcabcabcabcabc = ab * abcabcabcabc;\n    long acabcabcabcabbc = ac * abcabcabcabbc;\n\
    \    long abcabcabcabcabbc = ab * abcabcabcabbc;\n    long acabcabcabcabcab =\
    \ ac * abcabcabcabcab;\n    long abcabcabcabcabcab = ab * abcabcabcabcab;\n  \
    \  long acabcabcabcabcabc = ac * abcabcabcabcabc;\n    long abcabcabcabcabcabc\
    \ = ab * abcabcabcabcabc;\n    long acabcabcabcabcabbc = ac * abcabcabcabcabbc;\n\
    \    long abcabcabcabcabcabbc = ab * abcabcabcabcabbc;\n    long acabcabcabcabcabcab\
    \ = ac * abcabcabcabcabcab;\n\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo35ml71e.d(56): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo35ml71e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long ab = a - b;\n   \
    \ long ac = a - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long acb\
    \ = ac - bc;\n    long abac = ab * ac;\n    long acab = ac * ab;\n    long abcab\
    \ = ab * bc;\n    long acbcab = ac * bc;\n    long abcabc = abcab + acbcab;\n\
    \    long acbcabc = acbcab + abcabc;\n    long abcabcb = abcabc + acbcabc;\n \
    \   long acbcabcb = acbcabc + abcabcb;\n    long abcabcbc = abcabcb + acbcabcb;\n\
    \    long acbcabcbc = acbcabcb + abcabcbc;\n    long abcabcbcd = abcabcbc + acbcabcbc;\n\
    \    long acbcabcbcd = acbcabcbc + abcabcbcd;\n    long abcabcbcde = abcabcbcd\
    \ + acbcabcbcd;\n    long acbcabcbcde = acbcabcbcd + abcabcbcde;\n    long abcabcbcdef\
    \ = abcabcbcde + acbcabcbcde;\n    long acbcabcbcdef = acbcabcbcde + abcabcbcdef;\n\
    \    long abcabcbcdefg = abcabcbcdef + acbcabcbcdef;\n    long acbcabcbcdefg =\
    \ acbcabcbcdef + abcabcbcdefg;\n    long abcabcbcdefgh = abcabcbcdefg + acbcabcbcdefg;\n\
    \    long acbcabcbcdefgh = acbcabcbcdefg + abcabcbcdefgh;\n    long abcabcbcdefghi\
    \ = abcabcbcdefgh + acbcabcbcdefgh;\n    long acbcabcbcdefghi = acbcabcbcdefgh\
    \ + abcabcbcdefghi;\n    long abcabcbcdefghij = abcabcbcdefghi + acbcabcbcdefghi;\n\
    \    long acbcabcbcdefghij = acbcabcbcdefghi + abcabcbcdefghij;\n    long abcabcbcdefghijk\
    \ = abcabcbcdefgh\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwls7dne2.d(48): Error: semicolon expected, not `unittest`\\n/tmp/tmpwls7dne2.d(48):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpwls7dne2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long d = b * b - 4 * a\
    \ * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n  \
    \  long f = b + e * c;\n    long g = a + e * b;\n    return ((f < 0 && g > 0)\
    \ || (f > 0 && g < 0));\n}\n</code>\n<|/ a tags=c#,math,geometry |>\n<| c |>\n\
    This doesn't work. Try it with `right_angle_triangle(1,1,1)`\n<|/ c |>\n<| c |>\n\
    : I tested it and it works. I added a test case to my answer.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I added a test case to my answer.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I added a test case to my answer.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I added a test case to my answer.\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps66zavh0.d(26): Error: declaration expected, not `<`\\n/tmp/tmps66zavh0.d(29):\
    \ Error: unterminated character constant\\n/tmp/tmps66zavh0.d(49): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmps66zavh0.d(50): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmps66zavh0.d(51): Error: declaration expected, not `assert`\\\
    n/tmp/tmps66zavh0.d(52): Error: declaration expected, not `assert`\\n/tmp/tmps66zavh0.d(53):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmps66zavh0.d(54): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmps66zavh0.d(55): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmps66zavh0.d(56): Error: declaration expected, not `assert`\\\
    n/tmp/tmps66zavh0.d(57): Error: declaration expected, not `assert`\\n/tmp/tmps66zavh0.d(58):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmps66zavh0.d(59): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmps66zavh0.d(60): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps66zavh0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long d = b * b - 4 * a\
    \ * c;\n    if (d < 0)\n        return false;\n    long e = ((b * b) - 4 * a *\
    \ c) / d;\n    if (e < 0)\n        return false;\n    long f = ((b * b) - 4 *\
    \ a * c) / d;\n    if (f < 0)\n        return false;\n    long g = Math.sqrt(f);\n\
    \    if (g < a)\n        return false;\n    return true;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for me. `right_angle_triangle(2L, 3L, 4L)` returns\
    \ `true` instead of `false`. `right_angle_triangle(2L, 3L, 2L)` returns `false`\
    \ instead of `true`.\n<|/ c |>\n<| c |>\nI tested it on ideone.com. Works fine.\
    \ http://ideone.com/eJhqz\n<|/ c |>\n<| c |>\nIt doesn't work for me on ideone.com.\
    \ `right_angle_triangle(2L, 3L, 4L)` returns `true` instead of `false`. `right_angle_triangle(2L,\
    \ 3L, 2L)` returns `false` instead of `true`.\n<|/ c |>\n<| c |>\nI tested it\
    \ on ideone.com. Works fine. http://ideone.com/eJhqz\n<|/ c |>\n<| c |>\nI tested\
    \ it on ideone.com. Works fine. http://ideone.com/eJhqz\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n   \
    \ assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) ==\
    \ false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcqls5o88.d(32): Error: declaration expected, not `<`\\n/tmp/tmpcqls5o88.d(35):\
    \ Error: unterminated character constant\\n/tmp/tmpcqls5o88.d(41): Error: unterminated\
    \ character constant\\n/tmp/tmpcqls5o88.d(55): Error: declaration expected, not\
    \ `assert`\\n/tmp/tmpcqls5o88.d(56): Error: declaration expected, not `assert`\\\
    n/tmp/tmpcqls5o88.d(57): Error: declaration expected, not `assert`\\n/tmp/tmpcqls5o88.d(58):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpcqls5o88.d(59): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpcqls5o88.d(60): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpcqls5o88.d(61): Error: declaration expected, not `assert`\\\
    n/tmp/tmpcqls5o88.d(62): Error: declaration expected, not `assert`\\n/tmp/tmpcqls5o88.d(63):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpcqls5o88.d(64): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpcqls5o88.d(65): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpcqls5o88.d(66): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcqls5o88.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long d = b * b - 4 * a\
    \ * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n  \
    \  long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return (f < 0\
    \ && g < 0);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work. `right_angle_triangle(3,\
    \ 4, 5)` returns `true` while `right_angle_triangle(1, 4, 5)` returns `false`.\n\
    <|/ c |>\n<| c |>\nI tested it on `right_angle_triangle(3, 4, 5)` returns `true`\
    \ while `right_angle_triangle(1, 4, 5)` returns `false`\n<|/ c |>\n<| c |>\nI\
    \ tested it on `right_angle_triangle(3, 4, 5)` returns `true` while `right_angle_triangle(1,\
    \ 4, 5)` returns `false`\n<|/ c |>\n<| c |>\nI tested it on `right_angle_triangle(3,\
    \ 4, 5)` returns `true` while `right_angle_triangle(1, 4, 5)` returns `false`\n\
    <|/ c |>\n<| c |>\nI tested it on `right_angle_triangle(3, 4, 5)` returns `true`\
    \ while `right_angle_triangle(1, 4, 5)` returns `false`\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n   \
    \ assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) ==\
    \ false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1h04er73.d(26): Error: declaration expected, not `<`\\n/tmp/tmp1h04er73.d(29):\
    \ Error: unterminated character constant\\n/tmp/tmp1h04er73.d(49): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp1h04er73.d(50): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp1h04er73.d(51): Error: declaration expected, not `assert`\\\
    n/tmp/tmp1h04er73.d(52): Error: declaration expected, not `assert`\\n/tmp/tmp1h04er73.d(53):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp1h04er73.d(54): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp1h04er73.d(55): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp1h04er73.d(56): Error: declaration expected, not `assert`\\\
    n/tmp/tmp1h04er73.d(57): Error: declaration expected, not `assert`\\n/tmp/tmp1h04er73.d(58):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp1h04er73.d(59): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp1h04er73.d(60): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1h04er73.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long angle;\n    \n  \
    \  // Calculate the angle between the three sides\n    angle = atan2(b,a) - atan2(c,a);\n\
    \    \n    // Check if angle is between -90 and 90 degrees\n    if (angle > PI)\n\
    \        angle -= PI;\n    else if (angle < -PI)\n        angle += PI;\n    \n\
    \    // Check if angle is between -180 and 180 degrees\n    if (angle > PI)\n\
    \        angle -= PI;\n    else if (angle < -PI)\n        angle += PI;\n    \n\
    \    // Check if angle is between -180 and 180 degrees\n    if (angle > PI)\n\
    \        angle -= PI;\n    else if (angle < -PI)\n        angle += PI;\n    \n\
    \    // Check if angle is between -180 and 180 degrees\n    if (angle > PI)\n\
    \        angle -= PI;\n    else if (angle < -PI)\n        angle += PI;\n    \n\
    \    // Check if angle is between -180 and 180 degrees\n    if (angle > PI)\n\
    \        angle -= PI;\n    else if (angle < -PI)\n        angle += PI;\n    \n\
    \    // Check if angle is between -180 and 180 degrees\n    if (angle > PI)\n\
    \        angle -= PI;\n    else if (angle < -PI)\n        angle += PI;\n    \n\
    \    // Check if angle is between -180 and 180 degrees\n    if (angle > PI)\n\
    \        angle -= PI;\n    else if (angle < -PI)\n        angle += PI;\n    \n\
    \    // Check if angle is between -180 and 180 degrees\n    if (angle > PI)\n\
    \        angle -= PI;\n    else if (angle < -PI)\n        angle += PI;\n    \n\
    \    // Check if angle is between -180 and 180 degrees\n    if (angle > PI)\n\
    \        angle -= PI;\n    else if (angle < -PI)\n        angle += PI;\n    \n\
    \    // Check if angle is between -180 and 180 degrees\n    if (angle > PI)\n\
    \        angle -= PI;\n    else if (angle < -PI)\n        angle += PI;\n    \n\
    \    // Check if angle is between -180 and 180 degrees\n    if (angle > PI)\n\
    \        angle -= PI;\n    else if (angle < -PI)\n        angle += PI;\n    \n\
    \    // Check if angle is between -180 and 180 degrees\n    if (angle > PI)\n\
    \        angle -= PI;\n    else if (angle < -PI)\n        angle += PI;\n    \n\
    \    // Check if angle is between -180 and 180 degrees\n\nunittest\n{\n    alias\
    \ candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n\
    \    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L)\
    \ == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6yi4173m.d(97): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6yi4173m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long d = b * b - 4 * a\
    \ * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n  \
    \  long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f <\
    \ 0 && g < 0) || (f > 0 && g > 0));\n}\n</code>\n<|/ a tags=c#,math,geometry |>\n\
    <| a |>\n<code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpen3w9_o6.d(26): Error: declaration expected, not `<`\\n/tmp/tmpen3w9_o6.d(34):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpen3w9_o6.d(35): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpen3w9_o6.d(36): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpen3w9_o6.d(37): Error: declaration expected, not `assert`\\\
    n/tmp/tmpen3w9_o6.d(38): Error: declaration expected, not `assert`\\n/tmp/tmpen3w9_o6.d(39):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpen3w9_o6.d(40): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpen3w9_o6.d(41): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpen3w9_o6.d(42): Error: declaration expected, not `assert`\\\
    n/tmp/tmpen3w9_o6.d(43): Error: declaration expected, not `assert`\\n/tmp/tmpen3w9_o6.d(44):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpen3w9_o6.d(45): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpen3w9_o6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long angle;\n    \n  \
    \  angle = acos((b * b + c * c - a * a) / (2 * b * c));\n    \n    if (angle <\
    \ 0)\n    {\n        angle = -angle;\n    }\n    \n    if (angle < pi / 2)\n \
    \   {\n        return true;\n    }\n    \n    return false;\n}\nunittest\n{\n\
    \    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ttz55yv.d(20): Error: `std.math.acos` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1195):\
    \     `std.math.acos(real x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1204):\
    \     `std.math.acos(float x)`\\n/tmp/tmp3ttz55yv.d(27): Error: undefined identifier\
    \ `pi`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ttz55yv.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long d = b * b - 4 * a\
    \ * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n  \
    \  return ((b * b - 4 * a * c) >= 0 && (b * b + 4 * a * c) <= e && (b * b - 4\
    \ * a * c) >= -e);\n}\n</code>\n<|/ a tags=c#,math |>\n<| c |>\nThis code does\
    \ not work. Try it with a = b = c = 1\n<|/ c |>\n<| c |>\nI tested it with a =\
    \ b = c = 1 and it works. I used the code from [here](http://www.mathsisfun.com/geometry/right-angle-triangle.html)\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n\
    <| c |>\nI tested it with a = b = c = 1 and it works. I used the code from [here](http://www.mathsisfun.com/geometry/right-angle-triangle.html)\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>\npublic static bool IsRightAngleTriangle(long a, long\
    \ b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return\
    \ false;\n    long e = Math.Sqrt(d);\n    return ((b * b - 4 * a * c) >= 0 &&\
    \ (b * b + 4 * a * c) <= e && (b * b - 4 * a * c) >= -e);\n}\n</code>\n<|/ a tags=c#,math\
    \ |>\n<| c |>\nThis code does not work. Try it with a = b = c = 1\n<|/ c |>\n\
    <| c |>\nI tested it with a = b = c = 1 and it works. I used the code from [here](http://www.mathsisfun.com/geometry/right-angle-triangle.html)\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n\
    <| c |>\nIt doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n<| c |>\n\
    It doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>\npublic static bool IsRightAngleTriangle(long a, long b, long c)\n{\n \
    \   long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = Math.Sqrt(d);\n\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeju2ugzr.d(24): Error: declaration expected, not `<`\\n/tmp/tmpeju2ugzr.d(33):\
    \ Error: unterminated character constant\\n/tmp/tmpeju2ugzr.d(39): Error: unterminated\
    \ character constant\\n/tmp/tmpeju2ugzr.d(46): Error: declaration expected, not\
    \ `if`\\n/tmp/tmpeju2ugzr.d(49): Error: declaration expected, not `return`\\n/tmp/tmpeju2ugzr.d(50):\
    \ Error: unrecognized declaration\\n/tmp/tmpeju2ugzr.d(60): Error: unterminated\
    \ character constant\\n/tmp/tmpeju2ugzr.d(63): Error: unterminated character constant\\\
    n/tmp/tmpeju2ugzr.d(66): Error: unterminated character constant\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeju2ugzr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long d = b * b - 4 * a\
    \ * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n  \
    \  long f = b + e * Math.sqrt(b * b - 4 * a * c);\n    if (f < 0)\n        return\
    \ false;\n    long g = Math.sqrt(f);\n    return ((b * b - 4 * a * c) == (e *\
    \ g));\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe this would only work\
    \ if you had the sides ordered from largest to smallest.  If you had the sides\
    \ ordered from smallest to largest, then the triangle would not be a right angle\
    \ triangle (ie. the sides would not be in order).\n<|/ c |>\n<| c |>\nYes, you\
    \ are right. I missed that part in the question. Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=c#,geometry,math |>\n<code>\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxr93d2v3.d(28): Error: declaration expected, not `<`\\n/tmp/tmpxr93d2v3.d(42):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpxr93d2v3.d(43): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpxr93d2v3.d(44): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpxr93d2v3.d(45): Error: declaration expected, not `assert`\\\
    n/tmp/tmpxr93d2v3.d(46): Error: declaration expected, not `assert`\\n/tmp/tmpxr93d2v3.d(47):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpxr93d2v3.d(48): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpxr93d2v3.d(49): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpxr93d2v3.d(50): Error: declaration expected, not `assert`\\\
    n/tmp/tmpxr93d2v3.d(51): Error: declaration expected, not `assert`\\n/tmp/tmpxr93d2v3.d(52):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpxr93d2v3.d(53): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxr93d2v3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long ab = a - b;\n   \
    \ long ac = a - c;\n    long bc = b - c;\n    long acb = ac * bc;\n    long abc\
    \ = ab * bc;\n    long acbc = acb * bc;\n    long abbc = abb * bc;\n    long abcbc\
    \ = abcb * bc;\n    long abcbcb = abcbcb * bc;\n    long abcbcbc = abcbcbc * bc;\n\
    \    long abcbcbcb = abcbcbcb * bc;\n    long abcbcbcbc = abcbcbcbc * bc;\n  \
    \  long abcbcbcbcb = abcbcbcbcb * bc;\n    long abcbcbcbcbc = abcbcbcbcbc * bc;\n\
    \    long abcbcbcbcbcb = abcbcbcbcbcb * bc;\n    long abcbcbcbcbcbc = abcbcbcbcbcbc\
    \ * bc;\n    long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n    long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n\
    \    long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n    long abcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb\
    \ * bc;\n    long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n    long abcbcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcbcb\
    \ * bc;\n    long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbc * bc;\n    long\
    \ abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcbcbcb * bc;\n    long ab\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp380abd3l.d(47): Error: semicolon expected, not `unittest`\\n/tmp/tmp380abd3l.d(47):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp380abd3l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long side1 = abs(b - c);\n\
    \    long side2 = abs(a - c);\n    long side3 = abs(b - a);\n    long side4 =\
    \ abs(a - b);\n    \n    if (side1 == side2 && side2 == side3 && side3 == side4)\n\
    \        return true;\n    else\n        return false;\n}\nunittest\n{\n    alias\
    \ candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n\
    \    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L)\
    \ == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2o937k2m.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f25]\\n??:? void tmp2o937k2m.__unittest_L28_C1()\
    \ [0x427ae6]\\n??:? void tmp2o937k2m.__modtest() [0x427ca4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc71]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430120]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbfd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aab5]\\n??:? runModuleUnitTests [0x42ba21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428374]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282fb]\\n??:? _d_run_main [0x428266]\\n??:? main [0x427cb7]\\\
    n??:? __libc_start_main [0x91c9d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long d = b * b - 4 * a\
    \ * c;\n    if (d < 0)\n        return false;\n    long e = ((b * b) - 4 * a *\
    \ c) / d;\n    if (e < 0)\n        return false;\n    long f = (b * b) - 4 * a\
    \ * c;\n    if (f < 0)\n        return false;\n    long g = (b * b) - 4 * a *\
    \ c;\n    if (g < 0)\n        return false;\n    long h = (b * b) - 4 * a * c;\n\
    \    if (h < 0)\n        return false;\n    long i = (b * b) - 4 * a * c;\n  \
    \  if (i < 0)\n        return false;\n    long j = (b * b) - 4 * a * c;\n    if\
    \ (j < 0)\n        return false;\n    long k = (b * b) - 4 * a * c;\n    if (k\
    \ < 0)\n        return false;\n    long l = (b * b) - 4 * a * c;\n    if (l <\
    \ 0)\n        return false;\n    long m = (b * b) - 4 * a * c;\n    if (m < 0)\n\
    \        return false;\n    long n = (b * b) - 4 * a * c;\n    if (n < 0)\n  \
    \      return false;\n    long o = (b * b) - 4 * a * c;\n    if (o < 0)\n    \
    \    return false;\n    long p = (b * b) - 4 * a * c;\n    if (p < 0)\n      \
    \  return false;\n    long q = (b * b) - 4 * a * c;\n    if (q < 0)\n        return\
    \ false;\n    long r = (b * b) - 4 * a * c;\n    if (r < 0)\n        return false;\n\
    \    long s = (b * b) - 4 * a * c;\n    if (s < 0)\n        return false;\n  \
    \  long t = (b * b) - 4 * a * c;\n    if (t < 0)\n        return false;\n    long\
    \ u = (b * b) - 4 * a * c;\n    if (u < 0)\n        return false;\n    long v\
    \ = (b * b) - 4 * a * c;\n    if (v < 0)\n        return false;\n    long w =\
    \ (b * b) - 4 * a * c;\n    if (w < 0)\n        return false;\n    long x = (b\
    \ * b) - 4 * a * c;\n    if (x < 0)\n        return false;\n    long y = (b *\
    \ b) - 4 * a * c;\n    if (y < 0)\n        return false;\n    long z = (b * b)\
    \ - 4 * a * c;\n    if (z < 0)\n        return false;\n    long a = (b * b) -\
    \ 4 * a * c;\n    if (a < 0)\n        return false;\n    long b = (b * b) - 4\
    \ * a * c;\n    if (b < 0)\n        return false;\n    long c = (b * b) - 4 *\
    \ a * c;\n    if (c < 0)\n        return false;\n    long d = (b * b) - 4 * a\
    \ * c;\n    if (d < 0)\n        return false;\n    long e = (b * b) - 4\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnl38ckfm.d(100): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmpnl38ckfm.d(100): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnl38ckfm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
