name: HumanEval_30_get_positive
language: d
prompt: "import std.math;\n/*\nReturn only positive numbers in the array.\n    >>>\
  \ get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
  \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
  \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n"
tests: "unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
  \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L,\
  \ 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
  \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
completions: ["{\n    long[] r = new long[l.length];\n    int i = 0;\n    for(; i\
    \ < l.length; ++i)\n    {\n        if(l[i] > 0)\n            r[i] = l[i];\n  \
    \  }\n    return r;\n}", "{\n    long[] r = new long[l.length];\n    for(int i\
    \ = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n            r[i] = l[i];\n\
    \    }\n    return r;\n}\n</code>\n<|/ a tags=arrays,c# |>\n<| a dscore=0 |>\n\
    <code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result = new\
    \ int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n    \
    \    if (array[i] > 0)\n            result[i] = array[i];\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,c# |>\n<| a tags=arrays,c# |>\n<code>\npublic static\
    \ int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n\
    \            result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for (int i = 0; i\
    \ < array.Length; i++)\n    {\n        if (array[i] > 0)\n            result[i]\
    \ = array[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c# |>\n\
    <| a tags=arrays,c# |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n            result[i] = array[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't\
    \ post only code as an answer, but also provide an explanation of what your code\
    \ does and how it solves the problem of the question. Answers with an explanation\
    \ are usually more helpful and of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c |>\n<| c |>\nThis answer was flagged as low-quality because\
    \ of its length and content. While I agree that it is an answer, it would be better\
    \ if you could add some explanation as to why it is the correct answer.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n            result[i] = array[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c# |>\n<| a ", "{\n\
    \    long[] result = new long[l.length];\n    int i = 0;\n    for(; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > 0)\n            result[i] = l[i];\n    }\n  \
    \  return result;\n}\n</code>\n<|/ a tags=arrays,c# |>\n<| a tags=arrays,c# |>\n\
    <code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result = new\
    \ int[array.Length];\n    int i = 0;\n    foreach (int item in array)\n    {\n\
    \        if (item > 0)\n            result[i++] = item;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c# |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \            result[i++] = item;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n            result[i++] =\
    \ item;\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c# |>\n<| a\
    \ dscore=1 |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[]\
    \ result = new int[array.Length];\n    int i = 0;\n    foreach (int item in array)\n\
    \    {\n        if (item > 0)\n            result[i++] = item;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=arrays,c# |>\n<| a dscore=1 |>\n<code>\npublic\
    \ static int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \            result[i++] = item;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=arrays,c# |>\n<| a |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int\
    \ item in array)\n    {\n        if (item > 0)\n            result[i++] = item;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c# dscore=1 |>\n<| a\
    \ tags=arrays,c# |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n\
    \    int", "{\n    long[] result = new long[l.length];\n    int i;\n    for (i\
    \ = 0; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[l.length];\n    int i = 0;\n    for(; i < l.length; ++i)\n    {\n\
    \        if(l[i] > 0)\n            result[i] = l[i];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ ++i)\n    {\n        if (l[i] > 0)\n            result[i] = l[i];\n    }\n \
    \   return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| c |>\nThis doesn't\
    \ work if you have a negative number in the array. Try it with `get_positive([-1L,\
    \ 2L, -4L, 5L, 6L])`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it.  Thanks.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\npublic static int[] GetPositives(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n            result[i] = array[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a dscore=2\
    \ |>\n<code>\npublic static int[] GetPositives(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n\
    \        if (array[i] > 0)\n            result[i] = array[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a tags=c#,arrays |>\n<code>\n\
    public static int[] GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n\
    \            result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for (int i = 0; i\
    \ < array.Length; i++)\n    {\n        if (array[i] > 0)\n            result[i]\
    \ = array[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ |>\n<code>\npublic static int[] GetPositives(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n\
    \        if (array[i] > 0)\n            result[i] = array[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,arrays dscore=2 |>\n<| a tags=c#,arrays |>\n\
    <code>\npublic static int[] GetPositives(int[] array)\n{\n    int[] result = new\
    \ int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n    \
    \    if (array[i] > 0)", "{\n    long[] result = new long[l.length];\n    int\
    \ j = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0)\
    \ \n        {\n            result[j++] = l[i];\n        }\n    }\n    return result;\n\
    }", "{\n    long[] r = new long[l.length];\n    for(int i = 0; i < l.length; i++)\
    \ \n    {\n        if(l[i] > 0) \n            r[i] = l[i];\n    }\n    return\
    \ r;\n}\n</code>\n<|/ a tags=arrays,c#,sorting,algorithm |>\n<| c |>\nThis is\
    \ not the best solution. Try sorting an array of 1000 elements and you will see\
    \ that your algorithm will take more than 10 seconds to complete.\n<|/ c |>\n\
    <| c |>\nI agree with you, this is just a simple solution. But the OP asked for\
    \ a solution in C#, so I posted this solution. Anyway, I edited my answer to add\
    \ an alternative solution in C#.\n<|/ c |>\n<| c |>\nThe OP asked for a solution\
    \ in C#, so I posted this solution. Anyway, I edited my answer to add an alternative\
    \ solution in C#.\n<|/ c |>\n<| c |>\nThe OP asked for a solution in C#, so I\
    \ posted this solution. Anyway, I edited my answer to add an alternative solution\
    \ in C#.\n<|/ c |>\n<| c |>\nI see that you have added a C# solution, but you\
    \ haven't added a C# solution to the question. Your C# solution doesn't even compile.\n\
    <|/ c |>\n<| a |>\n<code>\npublic static void Main(string[] args)\n{\n    int[]\
    \ arr = new int[] { 1, -4, 2, 5, 6, -9, 3, -7, 8, 10, -12, 4 };\n    Array.Sort(arr);\n\
    \    Console.WriteLine(string.Join(\",\", arr));\n}\n</code>\n<|/ a tags=arrays,c#,sorting,algorithm\
    \ dscore=2 |>\n<| c |>\nThis is not the best solution. Try sorting an array of\
    \ 1000 elements and you will see that your algorithm will take more than 10 seconds\
    \ to complete.\n<|/ c |>\n<| c |>\nI agree with you, this is just a simple solution.\
    \ But the OP asked for a solution in C#, so I posted this solution. Anyway, I\
    \ edited my answer to add an alternative solution in C#.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\npublic static void Main(string[] args)\n{\n    int[] arr = new int[]\
    \ { 1, -4, 2, 5, 6, -9, 3, -7, 8, 10, -12, 4 };\n    Array.Sort(arr);\n    Console.WriteLine(string.Join(\"\
    ,\", arr));\n}", "{\n    long[] result = new long[l.length];\n    int i = 0;\n\
    \    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n/*\nReturn only negative numbers in the\
    \ array.\n    >>> get_negative([-1L, 2L, -4L, 5L, 6L])\n    []\n    >>> get_negative([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [-5L, -3L, 2L, 3L, 9L, 0L,\
    \ 123L, 1L]\n    \n*/\nlong[] get_negative(long[] l) \n{\n    long[] result =\
    \ new long[l.length];\n    int i = 0;\n    for (; i < l.length; ++i)\n    {\n\
    \        if (l[i] < 0)\n            result[i] = l[i];\n    }\n    return result;\n\
    }\n/*\nReturn only positive and negative numbers in the array.\n    >>> get_positive_negative([-1L,\
    \ 2L, -4L, 5L, 6L])\n    []\n    >>> get_positive_negative([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    [-5L, -3L, 2L, 3L, 9L, 0L, 123L, 1L]\n   \
    \ \n*/\nlong[] get_positive_negative(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0 &&\
    \ l[i] < 0)\n            result[i] = l[i];\n    }\n    return result;\n}\n/*\n\
    Return only positive numbers in the array.\n    >>> get_positive_positive([-1L,\
    \ 2L, -4L, 5L, 6L])\n    []\n    >>> get_positive_positive([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L, 1L]\n    \n*/\n\
    long[] get_positive_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0 &&\
    \ l[i] > 0)\n            result[i] = l[i];\n    }\n    return result;\n}\n/*\n\
    Return only numbers in the array that are divisible by 3.\n    >>> get_divisible_by_three([-1L,\
    \ 2L, -4L, 5L, 6L])\n    []\n    >>> get_divisible_by_three([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n", "{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \      r[i] = l[i];\n    }\n    return r;\n}", "{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}", "{\n\
    \    long[] result = new long[l.length];\n    int j = 0;\n    for(int i = 0; i\
    \ < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n            result[j++]\
    \ = l[i];\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[l.length];\n    int i = 0;\n    for(; i < l.length; ++i)\n    {\n     \
    \   if(l[i] > 0)\n            result[i] = l[i];\n    }\n    return result;\n}",
  "{\n    long[] result = new long[l.length];\n    int i;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        if(l[i] > 0) \n        {\n            result[i] = l[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int\
    \ item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a tags=c#,arrays |>\n<code>\npublic static\
    \ int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \        {\n            result[i] = item;\n            i++;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    int i = 0;\n    foreach (int item in array)\n\
    \    {\n        if (item > 0)\n        {\n            result[i] = item;\n    \
    \        i++;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n", "{\n    long[] r = new long[l.length];\n    int i =\
    \ 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n          \
    \  r[i] = l[i];\n    }\n    return r;\n}\n</code>\n<|/ a tags=arrays,c#,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with the input `[-3L, 2L, -5L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]`\n<|/ c |>\n<| c |>\n: I missed the negative numbers. I\
    \ edited the answer to include them.\n<|/ c |>\n<| c |>\n: I added a second solution\
    \ that doesn't require any additional libraries.\n<|/ c |>\n<| c |>\n: I added\
    \ a third solution that doesn't require any additional libraries.\n<|/ c |>\n\
    <| c |>\n: I added a fourth solution that doesn't require any additional libraries.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic static void Main(string[] args)\n{\n\
    \    int[] arr = new int[] { -1, 2, -4, 5, 6 };\n    int[] result = new int[arr.Length];\n\
    \    int i = 0;\n    foreach (int item in arr)\n    {\n        if (item > 0)\n\
    \        {\n            result[i++] = item;\n        }\n    }\n    Console.WriteLine(string.Join(\"\
    ,\", result));\n}\n</code>\n<|/ a tags=arrays,c#,algorithm |>\n<| c |>\nThis doesn't\
    \ work. Try it with the input `[-3L, 2L, -5L, 3L, 9L, 0L, 123L, 1L, -10L]`\n<|/\
    \ c |>\n<| c |>\n: I missed the negative numbers. I edited the answer to include\
    \ them.\n<|/ c |>\n<| c |>\n: I added a second solution that doesn't require any\
    \ additional libraries.\n<|/ c |>\n<| a tags=arrays,c#,algorithm |>\n<code>",
  "{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(; i < l.length;\
    \ i++)\n    {\n        if(l[i] > 0)\n            result[i] = l[i];\n    }\n  \
    \  return result;\n}", "{\n    long[] res = new long[l.length];\n    for(int i\
    \ = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n        \
    \    res[i] = l[i];\n        }\n    }\n    return res;\n}", "{\n    long[] res\
    \ = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n        if(l[i]\
    \ > 0)\n            res[i] = l[i];\n    return res;\n}\n</code>\n<|/ a tags=arrays,c#,algorithm\
    \ |>\n<| c |>\nThis doesn't work. `get_positive([-1L, 2L, -4L, 5L, 6L])` returns\
    \ `[-4L, 2L, 5L, 6L]` instead of `[2L, 5L, 6L]`.\n<|/ c |>\n<| c |>\n: I fixed\
    \ the bug. Thanks.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks.\n<|/ c |>\n<|\
    \ c |>\n: I fixed the bug. Thanks.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic\
    \ static int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n\
    \            result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,c#,algorithm |>\n<| c |>\nThis doesn't work. `GetPositive([-1L,\
    \ 2L, -4L, 5L, 6L])` returns `[-4L, 2L, 5L, 6L]` instead of `[2L, 5L, 6L]`.\n\
    <|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/ c |>\n<| a tags=arrays,c#,algorithm\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n\
    \        if (array[i] > 0)\n            result[i] = array[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,algorithm |>\n<code>\n\
    public static int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n\
    \            result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for (int i = 0; i\
    \ < array.Length; i++)\n    {\n        if (array[i] > 0)\n            result[i]\
    \ = array[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=array", "{\n\
    \    long[] result = new long[l.length];\n    int i = 0;\n    for (; i < l.length;\
    \ ++i)\n    {\n        if (l[i] > 0)\n            result[i] = l[i];\n    }\n \
    \   return result;\n}", "{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n            result[i]\
    \ = l[i];\n    }\n    return result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[l.length];\n    int i = 0;\n    for (; i < l.length; ++i)\n    {\n\
    \        if (l[i] > 0)\n            result[i] = l[i];\n    }\n    return result;\n\
    }", "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        if (l[i] > 0) \n            r[i] = l[i];\n    }\n    return\
    \ r;\n}\n/*\nReturn only negative numbers in the array.\n    >>> get_negative([-1L,\
    \ 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_negative([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L, 1L]\n    \n\
    */\nlong[] get_negative(long[] l) \n{\n    long[] r = new long[l.length];\n  \
    \  for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] < 0) \n      \
    \      r[i] = l[i];\n    }\n    return r;\n}\n/*\nReturn only numbers in the array\
    \ that are even.\n    >>> get_even([2L, 4L, 6L, 8L, 10L])\n    [4L, 8L]\n    >>>\
    \ get_even([2L, 4L, 6L, 8L, 10L, -12L])\n    [4L, 8L]\n    \n*/\nlong[] get_even(long[]\
    \ l) \n{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        if (l[i] % 2 == 0) \n            r[i] = l[i];\n    }\n\
    \    return r;\n}\n/*\nReturn only numbers in the array that are odd.\n    >>>\
    \ get_odd([2L, 4L, 6L, 8L, 10L])\n    [6L, 10L]\n    >>> get_odd([2L, 4L, 6L,\
    \ 8L, 10L, -12L])\n    [6L, 10L]\n    \n*/\nlong[] get_odd(long[] l) \n{\n   \
    \ long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n  \
    \  {\n        if (l[i] % 2 != 0) \n            r[i] = l[i];\n    }\n    return\
    \ r;\n}\n/*\nReturn only numbers in the array that are divisible by 3.\n    >>>\
    \ get_divisible_by_3([2L, 4L, 6L, 8L, 10L])\n    [6L, 8L]\n    >>> get_divisible_by_3([2L,\
    \ 4L, 6L, 8L, 10L, -12L])\n    [6L, 8L]\n    \n*/\nlong[] get_divisible_by_3(long[]\
    \ l) \n{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        if (l[i] % 3 == 0) \n            r", "{\n    long[] result\
    \ = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n      \
    \  if(l[i] > 0)\n            result[i] = l[i];\n    }\n    return result;\n}",
  "{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] > 0)\n            result[i] = l[i];\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[l.length];\n    for(int i = 0;\
    \ i < l.length; i++) \n    {\n        if(l[i] > 0) \n            result[i] = l[i];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[l.length];\n    int i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] > 0)\n            result[i] = l[i];\n    }\n    return\
    \ result;\n}", "{\n\tlong[] res = new long[l.length];\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t{\n\t\tif (l[i] > 0)\n\t\t\tres[i] = l[i];\n\t}\n\treturn res;\n}",
  "{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (; i < l.length;\
    \ ++i)\n    {\n        if (l[i] > 0)\n            result[i] = l[i];\n    }\n \
    \   return result;\n}", "{\n    long[] r = new long[l.length];\n    for (int i\
    \ = 0; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n            r[i] = l[i];\n\
    \    }\n    return r;\n}", "{\n    long[] r = new long[l.length];\n    int i =\
    \ 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        {\n \
    \           r[i] = l[i];\n        }\n    }\n    return r;\n}\n</code>\n<|/ a tags=arrays,c#,algorithm\
    \ |>\n<| c |>\nThis code doesn't work. `get_positive` returns `null` if the array\
    \ is empty.\n<|/ c |>\n<| c |>\nYes, it returns null if the array is empty. That's\
    \ what the OP asked for. He didn't ask for an empty array to be returned though.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to account for\
    \ that.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to account\
    \ for that.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to\
    \ account for that.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c#,algorithm |>\n<| c |>\nThis code doesn't work. `GetPositive`\
    \ returns `null` if the array is empty.\n<|/ c |>\n<| c |>\nIt returns an empty\
    \ array if the array is empty. That's what the OP asked for. He didn't ask for\
    \ an empty array to be returned though.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ I've updated the answer to account for that.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    public static int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \        {\n            result[i] = item;\n            i++;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,c#,algorithm |>\n<| c |>\n\
    This code doesn't work. `GetPositive` returns `null` if the array is empty.\n\
    <|/ c |>\n<| a tags=arrays,c#,algorithm |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = ", "{\n    long[] r = new long[l.length];\n  \
    \  int i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n  \
    \          r[i] = l[i];\n    }\n    return r;\n}", "{\n    long[] result = new\
    \ long[l.length];\n    int i = 0;\n    for(; i < l.length; ++i)\n    {\n     \
    \   if(l[i] > 0)\n            result[i] = l[i];\n    }\n    return result;\n}",
  "{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > 0)\n            result[i] = l[i];\n    }\n  \
    \  return result;\n}", "{\n    long[] res = new long[l.length];\n    int i = 0;\n\
    \    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            break;\n\
    \    }\n    for(; i < l.length; ++i)\n    {\n        if(l[i] < 0)\n        {\n\
    \            res[i] = -l[i];\n        }\n        else\n        {\n           \
    \ res[i] = l[i];\n        }\n    }\n    return res;\n}\n</code>\n<|/ a tags=arrays,c#\
    \ |>\n<| c |>\nThis doesn't work if you have a negative number in the array and\
    \ you want the negative number to be positive.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that does work if you have negative numbers in the array.\n<|/ c |>\n<| c |>\n\
    This doesn't work if you have a negative number in the array and you want the\
    \ negative number to be positive.\n<|/ c |>\n<| c |>\nThis doesn't work if you\
    \ have a negative number in the array and you want the negative number to be positive.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a negative number in the array\
    \ and you want the negative number to be positive.\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>\npublic static int[] GetPositives(int[] array)\n{\n    int[] positives\
    \ = new int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n\
    \        if (array[i] > 0)\n        {\n            positives[i] = array[i];\n\
    \        }\n    }\n    return positives;\n}\n</code>\n<|/ a tags=arrays,c# |>\n\
    <| c |>\nThis doesn't work if you have a negative number in the array and you\
    \ want the negative number to be positive.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if you have a negative number in the array and you want the negative number\
    \ to be positive.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a negative\
    \ number in the array and you want the negative number to be positive.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if you have a negative number in the array and\
    \ you want the negative number to be positive.\n<|/ c |>\n<| a |>\n<code>", "{\n\
    \    long[] result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] > 0)\n            result[i] = l[i];\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[l.length];\n    int i = 0;\n \
    \   for (; i < l.length; i++)\n    {\n        if (l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    int i = 0;\n    foreach (int item in array)\n\
    \    {\n        if (item > 0)\n            result[i] = item;\n        i++;\n \
    \   }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,arrays\
    \ |>\n<code>", "{\n    long[] result = new long[l.length];\n    for(int i = 0;\
    \ i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n            result[i]\
    \ = l[i];\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[l.length];\n    int i = 0;\n    for (; i < l.length; ++i)\n    {\n    \
    \    if (l[i] > 0)\n            result[i] = l[i];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(; i <\
    \ l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i] = l[i];\n\
    \    }\n    return result;\n}", "{\n    long[] res = new long[l.length];\n   \
    \ for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n        {\n\
    \            res[i] = l[i];\n        }\n    }\n    return res;\n}", "{\n    long[]\
    \ r = new long[l.length];\n    int i = 0;\n    for(; i < l.length; ++i)\n    {\n\
    \        if(l[i] > 0)\n            r[i] = l[i];\n    }\n    return r;\n}", "{\n\
    \    long[] res = new long[l.length];\n    for (int i = 0; i < l.length; i++)\
    \ \n    {\n        if (l[i] > 0) \n        {\n            res[i] = l[i];\n   \
    \     }\n    }\n    return res;\n}", "{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] > 0)\n            result[i] = l[i];\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[l.length];\n    int i = 0;\n \
    \   for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,.net |>\n\
    <| c |>\nThis doesn't work. `get_positive` returns a `long[]` but `Array.Copy`\
    \ expects an `int[]`.\n<|/ c |>\n<| c |>\n: I fixed the return type. Thanks.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n            result[i] = array[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,.net |>\n<| c |>\n\
    This doesn't work. `GetPositive` returns a `int[]` but `Array.Copy` expects an\
    \ `int[]`.\n<|/ c |>\n<| c |>\n: I fixed the return type. Thanks.\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>", "{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for (; i < l.length; i++)\n    {\n        if (l[i] > 0)\n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int\
    \ item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c# |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \        {\n            result[i] = item;\n            i++;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,c# |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n  \
    \  int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int item\
    \ in array)\n    {\n        if (item > 0)\n        {\n            result[i] =\
    \ item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c# |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \        {\n            result[i] = item;\n            i++;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,c# |>\n<| a |>\n<code>\npublic\
    \ static int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int i = 0;\n    ", "{\n\tlong[] result = new long[l.length];\n\tfor (int\
    \ i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] > 0) \n\t\t\tresult[i] = l[i];\n\
    \t}\n\treturn result;\n}", "{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post.\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/11186752)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/11186752)\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/11186752)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/11186752)\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\npublic class ArrayUtils {\n    public static int[] getPositives(int[]\
    \ arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0;\
    \ i < arr.length; i++) {\n            if (arr[i] > 0) {\n                result[i]\
    \ = arr[i];\n            }\n        }\n        return result;\n    }\n}\n</code>\n\
    <|/ a tags=java,arrays |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post.\n<|/ c |>\n<| a tags=java,arrays |>\n<code>\n", "{\n    long[] r = new\
    \ long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > 0)\n            r[i] = l[i];\n    }\n    return r;\n}", "{\n    long[] result\
    \ = new long[l.length];\n    int i = 0;\n    for(; i < l.length; ++i)\n    {\n\
    \        if(l[i] > 0)\n            result[i] = l[i];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[l.length];\n    int i;\n    for(i = 0; i\
    \ < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i] = l[i];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \      result[i] = l[i];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[l.length];\n    int i = 0;\n    for(; i < l.length; ++i)\n    {\n\
    \        if(l[i] > 0)\n            result[i] = l[i];\n    }\n    return result;\n\
    }", "{\n\tlong[] result = new long[l.length];\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t{\n\t\tif (l[i] > 0)\n\t\t\tresult[i] = l[i];\n\t}\n\treturn result;\n\
    }", "{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++) \n    {\n        if(l[i] > 0) \n        {\n            result[i] = l[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only\
    \ negative numbers in the array.\n    >>> get_negative([-1L, 2L, -4L, 5L, 6L])\n\
    \    [2L, 5L, 6L]\n    >>> get_negative([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L, 1L]\n    \n*/\nlong[] get_negative(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (;\
    \ i < l.length; ++i)\n    {\n        if (l[i] < 0)\n            result[i] = l[i];\n\
    \    }\n    return result;\n}\n/*\nReturn only positive numbers in the array.\n\
    \    >>> get_positive_int([-5L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive_int([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/", "{\n    long[] res = new long[l.length];\n    for (int i = 0;\
    \ i < l.length; ++i)\n    {\n        if (l[i] > 0)\n            res[i] = l[i];\n\
    \    }\n    return res;\n}", "{\n    long[] result = new long[l.length];\n   \
    \ int i = 0;\n    for (; i < l.length; ++i)\n        if (l[i] > 0)\n         \
    \   result[i] = l[i];\n        else\n            break;\n    return result.slice(0,\
    \ i);\n}", "{\n    long[] result = new long[l.length];\n    for (int i = 0; i\
    \ < l.length; i++)\n    {\n        if (l[i] > 0)\n            result[i] = l[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a tags=c#,arrays |>\n<code>\n\
    public static int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n\
    \            result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for (int i = 0; i\
    \ < array.Length; i++)\n    {\n        if (array[i] > 0)\n            result[i]\
    \ = array[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=2 |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[]\
    \ result = new int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n\
    \    {\n        if (array[i] > 0)\n            result[i] = array[i];\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n\
    \        if (array[i] > 0)\n            result[i] = array[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,arrays |>\n<code>\npublic\
    \ static int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n\
    \            result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for (int i = 0; i\
    \ < array.Length; i++)\n    {\n        if (array[i] > 0)\n            result[i]\
    \ = array[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| a dscore=2 |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n  \
    \  int[] result = new int[array.Length];\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n            result[i] = array[i];\n\
    \    }\n    return result;", "{\n    long[] result = new long[l.length];\n   \
    \ for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n           \
    \ result[i] = l[i];\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[l.length];\n    int i = 0;\n    for(; i < l.length; ++i)\n    {\n     \
    \   if(l[i] > 0)\n            result[i] = l[i];\n    }\n    return result;\n}\n\
    /*\nReturn only negative numbers in the array.\n    >>> get_negative([-1L, 2L,\
    \ -4L, 5L, 6L])\n    []\n    >>> get_negative([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    [-5L, -3L, -2L, -3L, -9L, -123L, -1L]\n    \n*/\nlong[]\
    \ get_negative(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] < 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only numbers\
    \ in the array that are divisible by 3.\n    >>> get_divisible_by_3([-1L, 2L,\
    \ -4L, 5L, 6L])\n    []\n    >>> get_divisible_by_3([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L, 1L]\n    \n*/\nlong[]\
    \ get_divisible_by_3(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] % 3 == 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only\
    \ numbers in the array that are divisible by 5.\n    >>> get_divisible_by_5([-1L,\
    \ 2L, -4L, 5L, 6L])\n    []\n    >>> get_divisible_by_5([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L, 1L]\n    \n*/\n\
    long[] get_divisible_by_5(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] % 5 == 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only\
    \ numbers in the array that are divisible by 7.\n    >>> get_divisible_by_7([-1L,\
    \ 2L, -4L, 5L, 6L])\n    []\n    >>> get_divisible_by_7([5L, 3L, -5L, 2L, -3L, ",
  "{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > 0)\n            result[i] = l[i];\n    }\n  \
    \  return result;\n}", "{\n    long[] result = new long[l.length];\n    int i\
    \ = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n          \
    \  result[i] = l[i];\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[l.length];\n    int j = 0;\n    for (int i = 0; i < l.length; i++)\n  \
    \  {\n        if (l[i] > 0)\n        {\n            result[j++] = l[i];\n    \
    \    }\n    }\n    return result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[l.length];\n    int i = 0;\n    for(; i < l.length; ++i)\n    {\n\
    \        if(l[i] > 0)\n            result[i] = l[i];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(; i <\
    \ l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i] = l[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,algorithm |>\n<|\
    \ c |>\nThis doesn't work if there are negative numbers in the array. Try it with\
    \ `get_positive([-1L, 2L, -4L, 5L, 6L])`.\n<|/ c |>\n<| c |>\n: Yes, I realized\
    \ that after I posted it. I edited my answer to fix it.\n<|/ c |>\n<| c |>\n:\
    \ I edited my answer to fix the negative numbers problem.\n<|/ c |>\n<| c |>\n\
    : I edited my answer to fix the negative numbers problem.\n<|/ c |>\n<| c |>\n\
    : I edited my answer to fix the negative numbers problem.\n<|/ c |>\n<| a tags=arrays,c#,algorithm\
    \ |>\n<code>\npublic static int[] GetPositives(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    int i = 0;\n    foreach (int item in array)\n\
    \    {\n        if (item > 0)\n        {\n            result[i++] = item;\n  \
    \      }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work if there are negative numbers in the array. Try it with `GetPositives([-1L,\
    \ 2L, -4L, 5L, 6L])`.\n<|/ c |>\n<| c |>\n: Yes, I realized that after I posted\
    \ it. I edited my answer to fix it.\n<|/ c |>\n<| a tags=arrays,c#,algorithm |>\n\
    <code>\npublic static int[] GetPositives(int[] array)\n{\n    int[] result = new\
    \ int[array.Length];\n    int i = 0;\n    foreach (int item in array)\n    {\n\
    \        if (item > 0)\n        {\n            result[i++] = item;\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if there are negative numbers in the array. Try it with `GetPositives([-1L,\
    \ 2L, -4L, 5L, 6L])`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static int[]\
    \ GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n  \
    \  int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n",
  "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++)\
    \ \n    {\n        if (l[i] > 0) \n        {\n            result[i] = l[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}", "{\n    long[] result =\
    \ new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n       \
    \ if(l[i] > 0) \n        {\n            result[i] = l[i];\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.ArrayList;\nimport java.util.List;", "{\n    long[] result =\
    \ new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > 0)\n            result[i] = l[i];\n    }\n    return result;\n}", "{\n   \
    \ long[] r = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n   \
    \ {\n        if(l[i] > 0) \n            r[i] = l[i];\n    }\n    return r;\n}",
  "{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] > 0)\n            result[i] = l[i];\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[l.length];\n    for(int i = 0;\
    \ i < l.length; i++)\n    {\n        if(l[i] > 0)\n            result[i] = l[i];\n\
    \    }\n    return result;\n}", "{\n    long[] res = new long[l.length];\n   \
    \ int i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n   \
    \     {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}", "{\n\
    \    long[] res = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n\
    \    {\n        if (l[i] > 0)\n        {\n            res[i] = l[i];\n       \
    \ }\n    }\n    return res;\n}", "{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositives(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int\
    \ item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays |>\n<| a dscore=0 |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;", "{\n    long[] result = new long[l.length];\n  \
    \  int i = 0;\n    for (; i < l.length; i++)\n    {\n        if (l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.List;",
  "{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > 0)\n            result[i] = l[i];\n    }\n  \
    \  return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `get_positive([-1L, 2L, -4L, 5L, 6L])`.\n<|/ c |>\n<| c |>\nI see\
    \ what you mean. I've updated the answer accordingly.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work. Try it with `get_positive([-1L, 2L, -4L, 5L, 6L])`.\n<|/ c |>\n\
    <| c |>\nI see what you mean. I've updated the answer accordingly.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\npublic static int[] getPositive(int[] arr) {\n    int[]\
    \ result = new int[arr.length];\n    int i = 0;\n    for(; i < arr.length; ++i)\n\
    \    {\n        if(arr[i] > 0)\n            result[i] = arr[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=arrays,java |>\n<| c |>\nThis doesn't work.\
    \ Try it with `getPositive([-1L, 2L, -4L, 5L, 6L])`.\n<|/ c |>\n<| c |>\nI see\
    \ what you mean. I've updated the answer accordingly.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\npublic static int[] getPositive(int[] arr) {\n    int[] result =\
    \ new int[arr.length];\n    int i = 0;\n    for(; i < arr.length; ++i)\n    {\n\
    \        if(arr[i] > 0)\n            result[i] = arr[i];\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,java |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ int[] getPositive(int[] arr) {\n    int[] result = new int[arr.length];\n  \
    \  int i = 0;\n    for(; i < arr.length; ++i)\n    {\n        if(arr[i] > 0)\n\
    \            result[i] = arr[i];\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=arrays,java |>\n<| c |>\nThis doesn't work. Try it with `getPositive([-1L,\
    \ 2L, -4L, 5L, 6L])`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the\
    \ answer accordingly.\n<|/ c |>\n<| a tags=arrays,java |>\n<code>\npublic static\
    \ int[] getPositive(int[] arr) {\n    int", "{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n      \
    \  if(l[i] > 0)\n            result[i] = l[i];\n    }\n    return result;\n}",
  "{\n    long[] res = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n\
    \    {\n        if (l[i] > 0)\n        {\n            res[i] = l[i];\n       \
    \ }\n    }\n    return res;\n}", "{\n    long[] res = new long[l.length];\n  \
    \  for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n      \
    \  {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\n</code>\n\
    <|/ a tags=arrays,c# |>\n<| a |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for(int i = 0; i <\
    \ array.Length; i++)\n    {\n        if(array[i] > 0)\n        {\n           \
    \ result[i] = array[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=2 tags=arrays,c# |>\n<| a dscore=2 |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ for(int i = 0; i < array.Length; i++)\n    {\n        if(array[i] > 0)\n   \
    \     {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,c# |>\n<| a tags=arrays,c# |>\n<code>\npublic static\
    \ int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for(int i = 0; i < array.Length; i++)\n    {\n        if(array[i] > 0)\n\
    \        {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,c# |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ for(int i = 0; i < array.Length; i++)\n    {\n        if(array[i] > 0)\n   \
    \     {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for(int i = 0; i <\
    \ array.Length; i++)\n    {\n        if(array[i] > 0)\n        {\n           \
    \ result[i] = array[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,c# |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for(int i = 0; i <\
    \ array.Length; i++)\n    {\n        if(array[i] > 0)\n        {\n           \
    \ result[i] = array[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,c# |>\n<| a |>\n<code>\npublic static int[] GetPositive", "{\n\
    \    long[] res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n\
    \    {\n        if(l[i] > 0) \n        {\n            res[i] = l[i];\n       \
    \ }\n    }\n    return res;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| c |>\nThis\
    \ doesn't work if the array is empty or contains only negative numbers. Try it\
    \ with `get_positive(new long[0])`.\n<|/ c |>\n<| c |>\n: Yes, I know. That's\
    \ why I wrote \"Return only positive numbers in the array.\" The OP didn't specify\
    \ what should happen with empty arrays or arrays with only negative numbers. I\
    \ assumed that he would want to return an empty array in this case.\n<|/ c |>\n\
    <| c |>\nI see, I missed that part. Thanks for pointing that out.\n<|/ c |>\n\
    <| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n        {\n            result[i] = array[i];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n\
    \        if (array[i] > 0)\n        {\n            result[i] = array[i];\n   \
    \     }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n\
    \        if (array[i] > 0)\n        {\n            result[i] = array[i];\n   \
    \     }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n\
    \        if (array[i] > 0)\n        {\n            result[i] = array[i];\n   \
    \     }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n\
    \        if (array[i] ", "{\n    long[] res = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n        {\n     \
    \       res[i] = l[i];\n        }\n    }\n    return res;\n}", "{\n    long[]\
    \ result = new long[l.length];\n    int i = 0;\n    for (; i < l.length; ++i)\n\
    \    {\n        if (l[i] > 0)\n            result[i] = l[i];\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[l.length];\n    int i = 0;\n \
    \   for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}", "{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    r[i] = l[i];\n    }\n    return r;\n}", "{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}", "{\n    long[] result =\
    \ new long[l.length];\n    int i = 0;\n    for(; i < l.length; ++i)\n    {\n \
    \       if(l[i] > 0)\n            result[i] = l[i];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++)\n    {\n        if (l[i] > 0)\n            result[i] = l[i];\n    }\n \
    \   return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ Your code works fine but i want to know why my code is not working and why it\
    \ gives me wrong output. Can you please explain me the reason behind this ?\n\
    <|/ c |>\n<| c |>\nI added some explanation to the answer\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. Your code works fine but i want to know why my code is\
    \ not working and why it gives me wrong output. Can you please explain me the\
    \ reason behind this ?\n<|/ c |>\n<| c |>\nThe reason is that you were trying\
    \ to find the first positive number in the array and you were not doing it correctly.\
    \ My code does exactly what you asked for: it finds the first positive number\
    \ in the array. Your code was trying to find all the positive numbers in the array\
    \ and you were not doing it correctly. My code does exactly what you asked for:\
    \ it finds the first positive number in the array. Your code was trying to find\
    \ all the positive numbers in the array and you were not doing it correctly. My\
    \ code does exactly what you asked for: it finds the first positive number in\
    \ the array. Your code was trying to find all the positive numbers in the array\
    \ and you were not doing it correctly.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Your code works fine but i want to know why my code is not working and why it\
    \ gives me wrong output. Can you please explain me the reason behind this ?\n\
    <|/ c |>\n<| a tags=arrays,java |>\n<code>\npublic static void main(String[] args)\
    \ {\n    int[] arr = {1, -4, -5, 6, -7, 8, -9, 10, -11, 12, 13, -14, 15};\n  \
    \  System.out.println(Arrays.toString(arr));\n    System.out.println(getFirstPositive(arr));\n\
    }", "{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(; i <\
    \ l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i] = l[i];\n\
    \    }\n    return result;\n}", "{\n    long[] res = new long[l.length];\n   \
    \ for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n\
    \            res[i] = l[i];\n        }\n    }\n    return res;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't work if you have a negative number in the\
    \ array. For example, `get_positive([-1L, 2L, -4L, 5L, 6L])` returns `[-4L, 5L,\
    \ 6L]` instead of `[2L, 5L, 6L]`.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ doesn't require the array to be sorted.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't require the array to be sorted.\n<|/ c |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    int j = 0;\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n        {\n            result[j++] =\
    \ array[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int j = 0;\n    for (int i =\
    \ 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n        {\n   \
    \         result[j++] = array[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int j = 0;\n    for\
    \ (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n     \
    \   {\n            result[j++] = array[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,arrays |>\n<| a dscore=1 |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ int j = 0;\n    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i]\
    \ > 0)\n        {\n            result[j++] = array[i];\n        }\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a dscore=1 |>\n<code>\n\
    public static int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int j = 0;\n    for (int i = 0; i < array.", "{\n    long[] r = new long[l.length];\n\
    \    for (int i = 0; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n      \
    \      r[i] = l[i];\n    }\n    return r;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThis doesn't work. Try it with the example in the question.\n<|/ c |>\n\
    <| c |>\nI tested it with the example in the question and it works. I added a\
    \ test case to my answer.\n<|/ c |>\n<| c |>\nI tested it with the example in\
    \ the question and it works. I added a test case to my answer.\n<|/ c |>\n<| c\
    \ |>\nI tested it with the example in the question and it works. I added a test\
    \ case to my answer.\n<|/ c |>\n<| c |>\nI tested it with the example in the question\
    \ and it works. I added a test case to my answer.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.ArrayList;\nimport java.util.List;", "{\n    long[] result\
    \ = new long[l.length];\n    int i = 0;\n    for(; i < l.length; ++i)\n    {\n\
    \        if(l[i] > 0)\n            result[i] = l[i];\n    }\n    return result;\n\
    }\n/*\nReturn only negative numbers in the array.\n    >>> get_negative([-1L,\
    \ 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_negative([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L, 1L]\n    \n\
    */\nlong[] get_negative(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] < 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only zeros\
    \ in the array.\n    >>> get_zero([-1L, 2L, -4L, 5L, 6L])\n    []\n    >>> get_zero([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [0L, 123L, 1L]\n    \n*/\n\
    long[] get_zero(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] == 0)\n       \
    \     result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only positive\
    \ numbers in the array.\n    >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L,\
    \ 5L, 6L]\n    >>> get_positive([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    [5L, 3L, 2L, 3L, 9L, 123L, 1L]\n    \n*/\ndouble[] get_positive(double[]\
    \ l) \n{\n    double[] result = new double[l.length];\n    int i = 0;\n    for(;\
    \ i < l.length; ++i)\n    {\n        if(l[i] > 0)\n            result[i] = l[i];\n\
    \    }\n    return result;\n}\n/*\nReturn only negative numbers in the array.\n\
    \    >>> get_negative([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_negative([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    ", "{\n    long[] res = new long[l.length];\n    for(int i = 0; i <\
    \ l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n            res[i] =\
    \ l[i];\n        }\n    }\n    return res;\n}", "{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
  "{\n\tlong[] result = new long[l.length];\n\tfor (int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tif (l[i] > 0) \n\t\t{\n\t\t\tresult[i] = l[i];\n\t\t}\n\t}\n\treturn\
    \ result;\n}", "{\n    long[] result = new long[l.length];\n    int i = 0;\n \
    \   for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,sorting,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `get_positive([-1L, 2L, -4L, 5L,\
    \ 6L])`\n<|/ c |>\n<| c |>\n: I see what you mean. I've updated the code accordingly.\n\
    <|/ c |>\n<| c |>\n: I see what you mean. I've updated the code accordingly.\n\
    <|/ c |>\n<| c |>\n: I see what you mean. I've updated the code accordingly.\n\
    <|/ c |>\n<| c |>\n: I see what you mean. I've updated the code accordingly.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int\
    \ item in array)\n    {\n        if (item > 0)\n            result[i++] = item;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,sorting,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `GetPositive([-1L, 2L, -4L, 5L,\
    \ 6L])`\n<|/ c |>\n<| c |>\n: I see what you mean. I've updated the code accordingly.\n\
    <|/ c |>\n<| a tags=arrays,c#,sorting,algorithm |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \            result[i++] = item;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=arrays,c#,sorting,algorithm |>\n<code>\npublic static\
    \ int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \            result[i++] = item;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int\
    \ item in array)\n    {\n        if (item ", "{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \      r[i] = l[i];\n    }\n    return r;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
