name: HumanEval_6_parse_nested_parens
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long\
    \ max_level = 0;\n    long level = 0;\n    long level_stack[MAX_LEVELS];\n   \
    \ long level_stack_pointer = 0;\n    long level_count = 0;\n    long paren_level\
    \ = 0;\n    long paren_level_stack[MAX_LEVELS];\n    long paren_level_stack_pointer\
    \ = 0;\n    long paren_level_count = 0;\n    long paren_level_counter = 0;\n \
    \   long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n    long\
    \ paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long paren_level_counter6\
    \ = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8 = 0;\n\
    \    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n   \
    \ long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n    long\
    \ paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long paren_level_counter15\
    \ = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17 =\
    \ 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 = 0;\n\
    \    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n  \
    \  long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n    long\
    \ paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long paren_level_counter26\
    \ = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28 =\
    \ 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 = 0;\n\
    \    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n  \
    \  long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n    long\
    \ paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long paren_level_counter37\
    \ = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39 =\
    \ 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 = 0;\n\
    \    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n  \
    \  long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n    long\
    \ paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long paren_level_counter48\
    \ = 0;\n    long paren_level_counter49 = 0;\n    long paren_\nunittest\n{\n  \
    \  alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqhjzbxcp.d(16): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[MAX_LEVELS] level_stack`\\n/tmp/tmpqhjzbxcp.d(20): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[MAX_LEVELS] paren_level_stack`\\\
    n/tmp/tmpqhjzbxcp.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpqhjzbxcp.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpqhjzbxcp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long\
    \ max_level = 0;\n    long level = 0;\n    long max_level2 = 0;\n    long level2\
    \ = 0;\n    long max_level3 = 0;\n    long level3 = 0;\n    long max_level4 =\
    \ 0;\n    long level4 = 0;\n    long max_level5 = 0;\n    long level5 = 0;\n \
    \   long max_level6 = 0;\n    long level6 = 0;\n    long max_level7 = 0;\n   \
    \ long level7 = 0;\n    long max_level8 = 0;\n    long level8 = 0;\n    long max_level9\
    \ = 0;\n    long level9 = 0;\n    long max_level10 = 0;\n    long level10 = 0;\n\
    \    long max_level11 = 0;\n    long level11 = 0;\n    long max_level12 = 0;\n\
    \    long level12 = 0;\n    long max_level13 = 0;\n    long level13 = 0;\n   \
    \ long max_level14 = 0;\n    long level14 = 0;\n    long max_level15 = 0;\n  \
    \  long level15 = 0;\n    long max_level16 = 0;\n    long level16 = 0;\n    long\
    \ max_level17 = 0;\n    long level17 = 0;\n    long max_level18 = 0;\n    long\
    \ level18 = 0;\n    long max_level19 = 0;\n    long level19 = 0;\n    long max_level20\
    \ = 0;\n    long level20 = 0;\n    long max_level21 = 0;\n    long level21 = 0;\n\
    \    long max_level22 = 0;\n    long level22 = 0;\n    long max_level23 = 0;\n\
    \    long level23 = 0;\n    long max_level24 = 0;\n    long level24 = 0;\n   \
    \ long max_level25 = 0;\n    long level25 = 0;\n    long max_level26 = 0;\n  \
    \  long level26 = 0;\n    long max_level27 = 0;\n    long level27 = 0;\n    long\
    \ max_level28 = 0;\n    long level28 = 0;\n    long max_level29 = 0;\n    long\
    \ level29 = 0;\n    long max_level30 = 0;\n    long level30 = 0;\n    long max_level31\
    \ = 0;\n    long level31 = 0;\n    long max_level32 = 0;\n    long level32 = 0;\n\
    \    long max_level33 = 0;\n    long level33 = 0;\n    long max_level34 = 0;\n\
    \    long level34 = 0;\n    long max_level35 = 0;\n    long level35 = 0;\n   \
    \ long max_level36 = 0;\n    long level36 = 0;\n    long max_level37 = 0;\n  \
    \  long level37 = 0;\n    long max_level38 = 0;\n    long level38 = 0;\n    long\
    \ max_level39 = 0;\n    long level39 = 0;\n    long max_level40 = 0;\n    long\
    \ level40 = 0;\n\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n\
    \    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp48vu_3pr.d(95): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48vu_3pr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long\
    \ max_level = 0;\n    long level = 0;\n    long levels[] = new long[paren_string.length()];\n\
    \    long index = 0;\n    long current_level = 0;\n    long current_levels[] =\
    \ new long[paren_string.length()];\n    bool is_open = false;\n    bool is_closed\
    \ = false;\n    bool is_opening = false;\n    bool is_closing = false;\n    bool\
    \ is_opening_paren = false;\n    bool is_closing_paren = false;\n    bool is_opening_curly_bracket_or_paren\
    \ = false;\n    bool is_closing_curly_bracket_or_paren = false;\n    bool is_opening_curly_bracket_or_paren_or_space\
    \ = false;\n    bool is_closing_curly_bracket_or_paren_or_space = false;\n   \
    \ bool is_opening_curly_bracket_or_paren_or_space = false;\n    bool is_closing_curly_bracket_or_paren_or_space\
    \ = false;\n    bool is_opening_curly_bracket_or_paren_or_space = false;\n   \
    \ bool is_closing_curly_bracket_or_paren_or_space = false;\n    bool is_opening_curly_bracket_or_paren_or_space\
    \ = false;\n    bool is_closing_curly_bracket_or_paren_or_space = false;\n   \
    \ bool is_opening_curly_bracket_or_paren_or_space = false;\n    bool is_closing_curly_bracket_or_paren_or_space\
    \ = false;\n    bool is_opening_curly_bracket_or_paren_or_space = false;\n   \
    \ bool is_closing_curly_bracket_or_paren_or_space = false;\n    bool is_opening_curly_bracket_or_paren_or_space\
    \ = false;\n    bool is_closing_curly_bracket_or_paren_or_space = false;\n   \
    \ bool is_opening_curly_bracket_or_paren_or_space = false;\n    bool is_closing_curly_bracket_or_paren_or_space\
    \ = false;\n    bool is_opening_curly_bracket_or_paren_or_space = false;\n   \
    \ bool is_closing_curly_bracket_or_paren_or_space = false;\n    bool is_opening_curly_bracket_or_paren_or_space\
    \ = false;\n    bool is_closing_curly_bracket_or_paren_or_space = false;\n   \
    \ bool is_opening_curly_bracket_or_paren_or_space = false;\n    bool is_closing_curly_bracket_or_paren_or_space\
    \ = false;\n    bool is_opening_curly_bracket_or_paren_or_space = false;\n   \
    \ \nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkizpup1j.d(16): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] levels`\\n/tmp/tmpkizpup1j.d(19): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[] current_levels`\\n/tmp/tmpkizpup1j.d(52):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpkizpup1j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long\
    \ max_level = 0;\n    long level = 0;\n    long levels[] = new long[paren_string.length()];\n\
    \    long index = 0;\n    bool in_paren = false;\n    bool in_paren_group = false;\n\
    \    bool in_paren_group_open = false;\n    bool in_paren_group_close = false;\n\
    \    bool in_paren_group_open_brace = false;\n    bool in_paren_group_close_brace\
    \ = false;\n    bool in_paren_group_open_brace_close = false;\n    bool in_paren_group_close_brace_close\
    \ = false;\n    bool in_paren_group_open_brace_open = false;\n    bool in_paren_group_close_brace_open\
    \ = false;\n    bool in_paren_group_open_brace_close_brace = false;\n    bool\
    \ in_paren_group_close_brace_close_brace = false;\n    bool in_paren_group_open_brace_open_brace\
    \ = false;\n    bool in_paren_group_close_brace_open_brace = false;\n    bool\
    \ in_paren_group_open_brace_close_brace_close = false;\n    bool in_paren_group_open_brace_open_brace_close\
    \ = false;\n    bool in_paren_group_close_brace_open_brace_close = false;\n  \
    \  bool in_paren_group_open_brace_open_brace_close_brace_close = false;\n    bool\
    \ in_paren_group_open_brace_open_brace_close_brace_close = false;\n    bool in_paren_group_open_brace_open_brace_close_brace_close\
    \ = false;\n    bool in_paren_group_open_brace_open_brace_close_brace_close =\
    \ false;\n    bool in_paren_group_open_brace_open_brace_close_brace_close = false;\n\
    \    bool in_paren_group_open_brace_open_brace_close_brace_close = false;\n  \
    \  bool in_paren_group_open_brace_open_brace_close_brace_close = false;\n    bool\
    \ in_paren_group_open_brace_open_brace_close_brace_close = false;\n    bool in_paren_group_open_brace_open_brace_close_brace_close\
    \ = false;\n    bool in_paren_group_open_brace_open_brace_close_brace_close =\
    \ false;\n    bool in_paren_group_open_brace_open_brace_close_brace_close = false;\n\
    \    bool in_paren_group_open_brace_open_brace_close_brace_close = false;\n  \
    \  bool in_paren_group_open_brace_open_b\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmporrof8_0.d(16): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] levels`\\n/tmp/tmporrof8_0.d(48): Error: semicolon expected,\
    \ not `unittest`\\n/tmp/tmporrof8_0.d(48): Error: found `unittest` instead of\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmporrof8_0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    string\
    \ paren_groups = paren_string;\n    long[] max_levels = new long[paren_groups.size()];\n\
    \    long max_level = 0;\n    long level = 0;\n    long level_count = 0;\n   \
    \ long paren_count = 0;\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_max = 0;\n    long paren_level_max_count = 0;\n \
    \   long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n   \
    \ long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1zef9ouh.d(79): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1zef9ouh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long\
    \ max_level = 0;\n    long level = 0;\n    long levels[] = new long[paren_string.length()];\n\
    \    long pos = 0;\n    bool in_parens = false;\n    bool in_group = false;\n\
    \    bool in_group_open = false;\n    bool in_group_close = false;\n    bool in_group_open_brace\
    \ = false;\n    bool in_group_close_brace = false;\n    bool in_group_open_brace_or_close_brace\
    \ = false;\n    bool in_group_open_brace_or_close_paren = false;\n    bool in_group_close_brace_or_close_paren\
    \ = false;\n    bool in_group_open_brace_or_close_paren_brace = false;\n    bool\
    \ in_group_open_brace_or_close_paren_brace_or_close_paren = false;\n    bool in_group_close_brace_or_close_paren_brace_or_close_paren\
    \ = false;\n    bool in_group_open_brace_or_close_paren_brace_or_close_paren_brace\
    \ = false;\n    bool in_group_open_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren\
    \ = false;\n    bool in_group_close_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren\
    \ = false;\n    bool in_group_open_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren_brace\
    \ = false;\n    bool in_group_open_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren\
    \ = false;\n    bool in_group_close_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren\
    \ = false;\n    bool in_group_open_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren_brace\
    \ = false;\n    bool in_group_open_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren\
    \ = false;\n    bool in_group_close_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren\
    \ = false;\n    bool in_group_open_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren_brace\
    \ = false;\n    bool in_group_open_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren_brace_or_close_paren_bra\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprq2u00hy.d(16): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] levels`\\n/tmp/tmprq2u00hy.d(41): Error: semicolon expected,\
    \ not `unittest`\\n/tmp/tmprq2u00hy.d(41): Error: found `unittest` instead of\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprq2u00hy.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long\
    \ max_level = 0;\n    long level = 0;\n    long levels[] = new long[paren_string.length()];\n\
    \    long index = 0;\n    long levels_index = 0;\n    long parens_index = 0;\n\
    \    long parens_level = 0;\n    long parens_level_max = 0;\n    bool is_open\
    \ = false;\n    bool is_closed = false;\n    bool is_opening_paren = false;\n\
    \    bool is_closing = false;\n    bool is_opening_paren_closed = false;\n   \
    \ bool is_opening_paren_open = false;\n    bool is_closing_bracket = false;\n\
    \    bool is_closing_bracket_closed = false;\n    bool is_closing_bracket_open\
    \ = false;\n    bool is_opening_square = false;\n    bool is_opening_curly_bracket\
    \ = false;\n    bool is_opening_curly_bracket_closed = false;\n    bool is_opening_curly_bracket_open\
    \ = false;\n    bool is_closing_square = false;\n    bool is_closing_curly_bracket\
    \ = false;\n    bool is_closing_curly_bracket_closed = false;\n    bool is_closing_curly_bracket_open\
    \ = false;\n    bool is_closing_brace = false;\n    bool is_closing_curly_brace\
    \ = false;\n    bool is_closing_square_bracket = false;\n    bool is_closing_curly_brace_closed\
    \ = false;\n    bool is_closing_curly_brace_open = false;\n    bool is_closing_curly_brace_bracket\
    \ = false;\n    bool is_closing_square_brace_closed = false;\n    bool is_closing_square_brace_open\
    \ = false;\n    bool is_closing_square_brace_bracket = false;\n    bool is_closing_square_brace_closed\
    \ = false;\n    bool is_closing_square_brace_open = false;\n    bool is_closing_square_brace_bracket\
    \ = false;\n    bool is_closing_square_brace_closed = false;\n    bool is_closing_square_brace_open\
    \ = false;\n    bool is_closing_square_brace_bracket = false;\n    bool is_closing_square_brace_closed\
    \ = false;\n    bool is_closing_square_brace_open = false;\n    bool is_closing_square_brace_bracket\
    \ = false;\n    bool is_closing_square_brace_closed = false;\n    bool is_closing_square_brace_open\
    \ = false;\n    bool is_closing_square_brace_bracket = false;\n    bool is_closing_square_brace_closed\
    \ = false;\n    bool is_closing_square_brace_open = false;\n    bool is_closing_square_brace_bracket\
    \ = false;\n    \nunittest\n{\n    alias candidate = parse_nested_parens;\n\n\
    \    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1fuvdxeq.d(16): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] levels`\\n/tmp/tmp1fuvdxeq.d(64): Error: found `unittest` instead\
    \ of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fuvdxeq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ levels = new long[paren_string.length()];\n    long level = 0;\n    for(int\
    \ i = 0; i < paren_string.length(); i++)\n    {\n        char c = paren_string[i];\n\
    \        if(c == '(')\n        {\n            level++;\n        }\n        else\
    \ if(c == ')')\n        {\n            level--;\n        }\n        levels[i]\
    \ = level;\n    }\n    return levels;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2agid4h6.d(31): Error: declaration expected, not `<`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2agid4h6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long\
    \ max_level = 0;\n    long level = 0;\n    long levels[] = new long[paren_string.length()];\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long levels_index = 0;\n\
    \    long levels_index_max = 0;\n    bool is_open = false;\n    bool is_closed\
    \ = false;\n    bool is_opening_paren = false;\n    bool is_closing = false;\n\
    \    bool is_opening_paren_or_closing = false;\n    bool is_opening_paren_or_closing_or_opening\
    \ = false;\n    bool is_opening_paren_or_closing_or_opening_or_closing = false;\n\
    \    bool is_opening_paren_or_closing_or_opening_or_closing_or_opening = false;\n\
    \    bool is_opening_paren_or_closing_or_opening_or_closing_or_opening_or_closing\
    \ = false;\n    bool is_opening_paren_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening\
    \ = false;\n    bool is_opening_paren_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing\
    \ = false;\n    bool is_opening_paren_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening\
    \ = false;\n    bool is_opening_paren_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing\
    \ = false;\n    bool is_opening_paren_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening\
    \ = false;\n    bool is_opening_paren_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing\
    \ = false;\n    bool is_opening_paren_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing\
    \ = false;\n    bool is_opening_paren_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing\
    \ = false;\n    bool is_opening_paren_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzzyoinfr.d(16): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] levels`\\n/tmp/tmpzzyoinfr.d(40): Error: semicolon expected,\
    \ not `unittest`\\n/tmp/tmpzzyoinfr.d(40): Error: found `unittest` instead of\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzzyoinfr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    string\
    \ paren_groups = paren_string.trim();\n    long[] levels = new long[paren_groups.length()];\n\
    \    long[] levels_stack = new long[paren_groups.length()];\n    long level =\
    \ 0;\n    long level_stack = 0;\n    long max_level = 0;\n    long max_level_stack\
    \ = 0;\n    long max_level_group = 0;\n    long max_level_group_stack = 0;\n \
    \   long max_level_group_length = 0;\n    long max_level_group_length_stack =\
    \ 0;\n    long max_level_group_length_group = 0;\n    long max_level_group_length_group_stack\
    \ = 0;\n    long max_level_group_length_group_length = 0;\n    long max_level_group_length_group_length_stack\
    \ = 0;\n    long max_level_group_length_group_length_group = 0;\n    long max_level_group_length_group_length_group_stack\
    \ = 0;\n    long max_level_group_length_group_length_group_length = 0;\n    long\
    \ max_level_group_length_group_length_group_length_stack = 0;\n    long max_level_group_length_group_length_group_length_group\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_stack\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length_stack\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length_group\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length_group_stack\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length_group_length\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length_group_length_stack\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length_group_length\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length_group_length_stack\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length_group_length\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length_group_length_stack\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length_group_length_group\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length_group_length_group_stack\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length_group_length_group_length\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length_group_length_stack\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length_group_length_group_length\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length_group_length_group_length_stack\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length_group_length_group_length\
    \ = 0;\n    long max_level_group_length_group_length_group_length_group_length_group_length_group_\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsle99no5.d(53): Error: semicolon expected, not `unittest`\\n/tmp/tmpsle99no5.d(53):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpsle99no5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long\
    \ max_level = 0;\n    long level = 0;\n    long levels[] = new long[paren_string.length()];\n\
    \    long levels_index = 0;\n    long levels_index2 = 0;\n    long levels_index3\
    \ = 0;\n    long levels_index4 = 0;\n    long levels_index5 = 0;\n    long levels_index6\
    \ = 0;\n    long levels_index7 = 0;\n    long levels_index8 = 0;\n    long levels_index9\
    \ = 0;\n    long levels_index10 = 0;\n    long levels_index11 = 0;\n    long levels_index12\
    \ = 0;\n    long levels_index13 = 0;\n    long levels_index14 = 0;\n    long levels_index15\
    \ = 0;\n    long levels_index16 = 0;\n    long levels_index17 = 0;\n    long levels_index18\
    \ = 0;\n    long levels_index19 = 0;\n    long levels_index20 = 0;\n    long levels_index21\
    \ = 0;\n    long levels_index22 = 0;\n    long levels_index23 = 0;\n    long levels_index24\
    \ = 0;\n    long levels_index25 = 0;\n    long levels_index26 = 0;\n    long levels_index27\
    \ = 0;\n    long levels_index28 = 0;\n    long levels_index29 = 0;\n    long levels_index30\
    \ = 0;\n    long levels_index31 = 0;\n    long levels_index32 = 0;\n    long levels_index33\
    \ = 0;\n    long levels_index34 = 0;\n    long levels_index35 = 0;\n    long levels_index36\
    \ = 0;\n    long levels_index37 = 0;\n    long levels_index38 = 0;\n    long levels_index39\
    \ = 0;\n    long levels_index40 = 0;\n    long levels_index41 = 0;\n    long levels_index42\
    \ = 0;\n    long levels_index43 = 0;\n    long levels_index44 = 0;\n    long levels_index45\
    \ = 0;\n    long levels_index46 = 0;\n    long levels_index47 = 0;\n    long levels_index48\
    \ = 0;\n    long levels_index49 = 0;\n    long levels_index50 = 0;\n    long levels_index51\
    \ = 0;\n    long levels_index52 = 0;\n    long levels_index53 = 0;\n    long levels_index54\
    \ = 0;\n    long levels_index55 = 0;\n    long levels_index56 = 0;\n    long levels_index57\
    \ = 0;\n    long levels_index58 = 0;\n    long levels_index59 = 0;\n    long levels_index60\
    \ = 0;\n    long levels_index61 = 0;\n    long level\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe8f6xczn.d(16): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] levels`\\n/tmp/tmpe8f6xczn.d(79): Error: semicolon expected,\
    \ not `unittest`\\n/tmp/tmpe8f6xczn.d(79): Error: found `unittest` instead of\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8f6xczn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ levels = new long[paren_string.length()];\n    long level = 0;\n    bool in_paren\
    \ = false;\n    bool in_paran = false;\n    bool in_paran2 = false;\n    bool\
    \ in_paran3 = false;\n    bool in_paran4 = false;\n    bool in_paran5 = false;\n\
    \    bool in_paran6 = false;\n    bool in_paran7 = false;\n    bool in_paran8\
    \ = false;\n    bool in_paran9 = false;\n    bool in_paran10 = false;\n    bool\
    \ in_paran11 = false;\n    bool in_paran12 = false;\n    bool in_paran13 = false;\n\
    \    bool in_paran14 = false;\n    bool in_paran15 = false;\n    bool in_paran16\
    \ = false;\n    bool in_paran17 = false;\n    bool in_paran18 = false;\n    bool\
    \ in_paran19 = false;\n    bool in_paran20 = false;\n    bool in_paran21 = false;\n\
    \    bool in_paran22 = false;\n    bool in_paran23 = false;\n    bool in_paran24\
    \ = false;\n    bool in_paran25 = false;\n    bool in_paran26 = false;\n    bool\
    \ in_paran27 = false;\n    bool in_paran28 = false;\n    bool in_paran29 = false;\n\
    \    bool in_paran30 = false;\n    bool in_paran31 = false;\n    bool in_paran32\
    \ = false;\n    bool in_paran33 = false;\n    bool in_paran34 = false;\n    bool\
    \ in_paran35 = false;\n    bool in_paran36 = false;\n    bool in_paran37 = false;\n\
    \    bool in_paran38 = false;\n    bool in_paran39 = false;\n    bool in_paran40\
    \ = false;\n    bool in_paran41 = false;\n    bool in_paran42 = false;\n    bool\
    \ in_paran43 = false;\n    bool in_paran44 = false;\n    bool in_paran45 = false;\n\
    \    bool in_paran46 = false;\n    bool in_paran47 = false;\n    bool in_paran48\
    \ = false;\n    bool in_paran49 = false;\n    bool in_paran50 = false;\n    bool\
    \ in_paran51 = false;\n    bool in_paran52 = false;\n    bool in_paran53 = false;\n\
    \    bool in_paran54 = false;\n    bool in_paran55 = false;\n    bool in_paran56\
    \ = false;\n    bool in_paran57 = false;\n    bool in_paran58 = false;\n    bool\
    \ in_paran59 = false;\n    bool in_paran60\nunittest\n{\n    alias candidate =\
    \ parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvv1dwv1b.d(77): Error: semicolon expected, not `unittest`\\n/tmp/tmpvv1dwv1b.d(77):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvv1dwv1b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long\
    \ max_level = 0;\n    long level = 0;\n    long levels[] = new long[paren_string.length()];\n\
    \    long level_counter = 0;\n    long level_counters[] = new long[paren_string.length()];\n\
    \    long level_counters_index = 0;\n    long level_counters_index2 = 0;\n   \
    \ long level_counters_index3 = 0;\n    long level_counters_index4 = 0;\n    long\
    \ level_counters_index5 = 0;\n    long level_counters_index6 = 0;\n    long level_counters_index7\
    \ = 0;\n    long level_counters_index8 = 0;\n    long level_counters_index9 =\
    \ 0;\n    long level_counters_index10 = 0;\n    long level_counters_index11 =\
    \ 0;\n    long level_counters_index12 = 0;\n    long level_counters_index13 =\
    \ 0;\n    long level_counters_index14 = 0;\n    long level_counters_index15 =\
    \ 0;\n    long level_counters_index16 = 0;\n    long level_counters_index17 =\
    \ 0;\n    long level_counters_index18 = 0;\n    long level_counters_index19 =\
    \ 0;\n    long level_counters_index20 = 0;\n    long level_counters_index21 =\
    \ 0;\n    long level_counters_index22 = 0;\n    long level_counters_index23 =\
    \ 0;\n    long level_counters_index24 = 0;\n    long level_counters_index25 =\
    \ 0;\n    long level_counters_index26 = 0;\n    long level_counters_index27 =\
    \ 0;\n    long level_counters_index28 = 0;\n    long level_counters_index29 =\
    \ 0;\n    long level_counters_index30 = 0;\n    long level_counters_index31 =\
    \ 0;\n    long level_counters_index32 = 0;\n    long level_counters_index33 =\
    \ 0;\n    long level_counters_index34 = 0;\n    long level_counters_index35 =\
    \ 0;\n    long level_counters_index36 = 0;\n    long level_counters_index37 =\
    \ 0;\n    long level_counters_index38 = 0;\n    long level_counters_index39 =\
    \ 0;\n    long level_counters_index40 = 0;\n    long level_counters_index41 =\
    \ 0;\n    long level_counters_index42 = 0;\n    long level_counters_index43 =\
    \ 0;\n    long level_counters_index44 = 0;\n    long level_counters_index45 =\
    \ 0;\n    long level_counters_index46 = 0;\n    long level_counters_index47 =\
    \ 0;\n    long level_counters_index48 = 0;\n    long level_counters_index49 =\
    \ 0;\n    long level_counters_index50 = 0;\n    long level_counters_index51 =\
    \ 0;\n    long level_counters_index52 = 0;\n    long level_\nunittest\n{\n   \
    \ alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpntl0fdpe.d(16): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] levels`\\n/tmp/tmpntl0fdpe.d(18): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[] level_counters`\\n/tmp/tmpntl0fdpe.d(72):\
    \ Error: semicolon expected, not `unittest`\\n/tmp/tmpntl0fdpe.d(72): Error: found\
    \ `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpntl0fdpe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long\
    \ max_level = 0;\n    long level = 0;\n    long levels[] = new long[paren_string.length()];\n\
    \    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            level++;\n            levels[i] = level;\n        }\n\
    \        else if(paren_string[i] == ')') {\n            level--;\n           \
    \ levels[i] = level;\n        }\n    }\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            level++;\n       \
    \ }\n        else if(paren_string[i] == ')') {\n            level--;\n       \
    \ }\n    }\n    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            level++;\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            level--;\n        }\n    }\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            level++;\n       \
    \ }\n        else if(paren_string[i] == ')') {\n            level--;\n       \
    \ }\n    }\n    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            level++;\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            level--;\n        }\n    }\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            level++;\n       \
    \ }\n        else if(paren_string[i] == ')') {\n            level--;\n       \
    \ }\n    }\n    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            level++;\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            level--;\n        }\n    }\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            level++;\n       \
    \ }\n        else if(paren_string[i] == ')') {\n            level--;\n       \
    \ }\n    }\n    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            level++;\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            level--;\n        }\n    }\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            level++;\n       \
    \ }\n        else if(paren_string[i] == ')') {\n            level--;\n       \
    \ }\n    }\n    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            level++;\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            level--;\n        }\n    }\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            level++;\n       \
    \ }\n        else if(paren_string[i] == ')') {\n            level--;\n       \
    \ }\n    }\n    for(int i = 0; i < paren_string.length\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvz0n4raj.d(16): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] levels`\\n/tmp/tmpvz0n4raj.d(116): Error: found `unittest` when\
    \ expecting `;` following `for` condition\\n/tmp/tmpvz0n4raj.d(124): Error: found\
    \ `void` when expecting `)`\\n/tmp/tmpvz0n4raj.d(124): Error: found `{` when expecting\
    \ `;` following statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpvz0n4raj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long\
    \ max_level = 0;\n    long level = 0;\n    long levels[] = new long[paren_string.length()];\n\
    \    long levels_index = 0;\n    long levels_index2 = 0;\n    long levels_index3\
    \ = 0;\n    long levels_index4 = 0;\n    long levels_index5 = 0;\n    long levels_index6\
    \ = 0;\n    long levels_index7 = 0;\n    long levels_index8 = 0;\n    long levels_index9\
    \ = 0;\n    long levels_index10 = 0;\n    long levels_index11 = 0;\n    long levels_index12\
    \ = 0;\n    long levels_index13 = 0;\n    long levels_index14 = 0;\n    long levels_index15\
    \ = 0;\n    long levels_index16 = 0;\n    long levels_index17 = 0;\n    long levels_index18\
    \ = 0;\n    long levels_index19 = 0;\n    long levels_index20 = 0;\n    long levels_index21\
    \ = 0;\n    long levels_index22 = 0;\n    long levels_index23 = 0;\n    long levels_index24\
    \ = 0;\n    long levels_index25 = 0;\n    long levels_index26 = 0;\n    long levels_index27\
    \ = 0;\n    long levels_index28 = 0;\n    long levels_index29 = 0;\n    long levels_index30\
    \ = 0;\n    long levels_index31 = 0;\n    long levels_index32 = 0;\n    long levels_index33\
    \ = 0;\n    long levels_index34 = 0;\n    long levels_index35 = 0;\n    long levels_index36\
    \ = 0;\n    long levels_index37 = 0;\n    long levels_index38 = 0;\n    long levels_index39\
    \ = 0;\n    long levels_index40 = 0;\n    long levels_index41 = 0;\n    long levels_index42\
    \ = 0;\n    long levels_index43 = 0;\n    long levels_index44 = 0;\n    long levels_index45\
    \ = 0;\n    long levels_index46 = 0;\n    long levels_index47 = 0;\n    long levels_index48\
    \ = 0;\n    long levels_index49 = 0;\n    long levels_index50 = 0;\n    long levels_index51\
    \ = 0;\n    long levels_index52 = 0;\n    long levels_index53 = 0;\n    long levels_index54\
    \ = 0;\n    long levels_index55 = 0;\n    long levels_index56 = 0;\n    long levels_index57\
    \ = 0;\n    long levels_index58 = 0;\n    long levels_index59 = 0;\n    long levels_index60\
    \ = 0;\n    long levels_index61 = 0;\n    long level\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc22gckro.d(16): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] levels`\\n/tmp/tmpc22gckro.d(79): Error: semicolon expected,\
    \ not `unittest`\\n/tmp/tmpc22gckro.d(79): Error: found `unittest` instead of\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc22gckro.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ levels = new long[paren_string.length()];\n    long level = 0;\n    long paren_level\
    \ = 0;\n    long paren_level_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count_index = 0;\n    long paren_level_max_count_index2\
    \ = 0;\n    long paren_level_max_count_index3 = 0;\n    long paren_level_max_count_index4\
    \ = 0;\n    long paren_level_max_count_index5 = 0;\n    long paren_level_max_count_index6\
    \ = 0;\n    long paren_level_max_count_index7 = 0;\n    long paren_level_max_count_index8\
    \ = 0;\n    long paren_level_max_count_index9 = 0;\n    long paren_level_max_count_index10\
    \ = 0;\n    long paren_level_max_count_index11 = 0;\n    long paren_level_max_count_index12\
    \ = 0;\n    long paren_level_max_count_index13 = 0;\n    long paren_level_max_count_index14\
    \ = 0;\n    long paren_level_max_count_index15 = 0;\n    long paren_level_max_count_index16\
    \ = 0;\n    long paren_level_max_count_index17 = 0;\n    long paren_level_max_count_index18\
    \ = 0;\n    long paren_level_max_count_index19 = 0;\n    long paren_level_max_count_index20\
    \ = 0;\n    long paren_level_max_count_index21 = 0;\n    long paren_level_max_count_index22\
    \ = 0;\n    long paren_level_max_count_index23 = 0;\n    long paren_level_max_count_index24\
    \ = 0;\n    long paren_level_max_count_index25 = 0;\n    long paren_level_max_count_index26\
    \ = 0;\n    long paren_level_max_count_index27 = 0;\n    long paren_level_max_count_index28\
    \ = 0;\n    long paren_level_max_count_index29 = 0;\n    long paren_level_max_count_index30\
    \ = 0;\n    long paren_level_max_count_index31 = 0;\n    long paren_level_max_count_index32\
    \ = 0;\n    long paren_level_max_count_index33 = 0;\n    long paren_level_max_count_index34\
    \ = 0;\n    long paren_level_max_count_index35 = 0;\n    long paren_level_max_count_index36\
    \ = 0;\n    long paren_level_max_count_index37 = 0;\n    long paren_level_max_count_index38\
    \ = 0;\n    long paren_level_max_count_index39 = 0;\n    long paren_level_max_count_index40\
    \ = 0;\n    long paren_level_max_count_index41 = 0;\n    long paren_level_max_count_index42\
    \ = 0;\n    long paren_level_max_count_index43 = 0;\n    long \nunittest\n{\n\
    \    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzk3grmex.d(63): Error: no identifier for declarator `long`\\\
    n/tmp/tmpzk3grmex.d(63): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzk3grmex.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    string\
    \ paren_group;\n    long max_level = 0;\n    long level = 0;\n    long levels[]\
    \ = new long[MAX_GROUPS];\n    long groups[] = new long[MAX_GROUPS];\n    long\
    \ group_index = 0;\n    long index = 0;\n    bool in_group = false;\n    bool\
    \ in_paren = false;\n    bool in_group_bracket = false;\n    bool in_group_paren\
    \ = false;\n    bool in_group_paren_bracket = false;\n    bool in_group_paren_paren\
    \ = false;\n    bool in_group_paren_paren_bracket = false;\n    bool in_group_paren_paren_paren\
    \ = false;\n    bool in_group_paren_paren_paren_bracket = false;\n    bool in_group_paren_paren_paren_paren\
    \ = false;\n    bool in_group_paren_paren_paren_paren_bracket = false;\n    bool\
    \ in_group_paren_paren_paren_paren_paren = false;\n    bool in_group_paren_paren_paren_paren_paren_bracket\
    \ = false;\n    bool in_group_paren_paren_paren_paren_paren_paren = false;\n \
    \   bool in_group_paren_paren_paren_paren_paren_paren_bracket = false;\n    bool\
    \ in_group_paren_paren_paren_paren_paren_paren_paren = false;\n    bool in_group_paren_paren_paren_paren_paren_paren_paren_bracket\
    \ = false;\n    bool in_group_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = false;\n    bool in_group_paren_paren_paren_paren_paren_paren_paren_paren_bracket\
    \ = false;\n    bool in_group_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = false;\n    bool in_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_bracket\
    \ = false;\n    bool in_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = false;\n    bool in_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_bracket\
    \ = false;\n    bool in_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = false;\n    bool in_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_bracket\
    \ = false;\n    bool in_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphwzs242e.d(17): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] levels`\\n/tmp/tmphwzs242e.d(18): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[] groups`\\n/tmp/tmphwzs242e.d(47): Error:\
    \ semicolon expected, not `unittest`\\n/tmp/tmphwzs242e.d(47): Error: found `unittest`\
    \ instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmphwzs242e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    string\
    \ paren_char = \"()\";\n    string paren_group = \"\";\n    string paren_group_str\
    \ = \"\";\n    string paren_group_str2 = \"\";\n    string paren_group_str3 =\
    \ \"\";\n    string paren_group_str4 = \"\";\n    string paren_group_str5 = \"\
    \";\n    string paren_group_str6 = \"\";\n    string paren_group_str7 = \"\";\n\
    \    string paren_group_str8 = \"\";\n    string paren_group_str9 = \"\";\n  \
    \  string paren_group_str10 = \"\";\n    string paren_group_str11 = \"\";\n  \
    \  string paren_group_str12 = \"\";\n    string paren_group_str13 = \"\";\n  \
    \  string paren_group_str14 = \"\";\n    string paren_group_str15 = \"\";\n  \
    \  string paren_group_str16 = \"\";\n    string paren_group_str17 = \"\";\n  \
    \  string paren_group_str18 = \"\";\n    string paren_group_str19 = \"\";\n  \
    \  string paren_group_str20 = \"\";\n    string paren_group_str21 = \"\";\n  \
    \  string paren_group_str22 = \"\";\n    string paren_group_str23 = \"\";\n  \
    \  string paren_group_str24 = \"\";\n    string paren_group_str25 = \"\";\n  \
    \  string paren_group_str26 = \"\";\n    string paren_group_str27 = \"\";\n  \
    \  string paren_group_str28 = \"\";\n    string paren_group_str29 = \"\";\n  \
    \  string paren_group_str30 = \"\";\n    string paren_group_str31 = \"\";\n  \
    \  string paren_group_str32 = \"\";\n    string paren_group_str33 = \"\";\n  \
    \  string paren_group_str34 = \"\";\n    string paren_group_str35 = \"\";\n  \
    \  string paren_group_str36 = \"\";\n    string paren_group_str37 = \"\";\n  \
    \  string paren_group_str38 = \"\";\n    string paren_group_str39 = \"\";\n  \
    \  string paren_group_str40 = \"\";\n    string paren_group_str41 = \"\";\n  \
    \  string paren_group_str42 = \"\";\n    string paren_group_str43 = \"\";\n  \
    \  string paren_group_str44 = \"\";\n    string paren_group_str45 = \"\";\n  \
    \  string paren_group_str46 = \"\";\n    string paren_group_str47 = \"\";\n  \
    \  string paren_group_str48 = \"\";\n    string paren_group_str49 = \"\";\n  \
    \  string paren_group_str50 = \"\";\n    string paren_group_str51 = \"\";\n  \
    \  string paren_group_str52 = \"\";\n    string paren_group_str53 = \"\";\n  \
    \  string paren_group_str54 = \"\";\n\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxy_pdx6y.d(71): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxy_pdx6y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long\
    \ max_level = 0;\n    long level = 0;\n    long max_level2 = 0;\n    long level2\
    \ = 0;\n    long max_level3 = 0;\n    long level3 = 0;\n    long max_level4 =\
    \ 0;\n    long level4 = 0;\n    long max_level5 = 0;\n    long level5 = 0;\n \
    \   long max_level6 = 0;\n    long level6 = 0;\n    long max_level7 = 0;\n   \
    \ long level7 = 0;\n    long max_level8 = 0;\n    long level8 = 0;\n    long max_level9\
    \ = 0;\n    long level9 = 0;\n    long max_level10 = 0;\n    long level10 = 0;\n\
    \    long max_level11 = 0;\n    long level11 = 0;\n    long max_level12 = 0;\n\
    \    long level12 = 0;\n    long max_level13 = 0;\n    long level13 = 0;\n   \
    \ long max_level14 = 0;\n    long level14 = 0;\n    long max_level15 = 0;\n  \
    \  long level15 = 0;\n    long max_level16 = 0;\n    long level16 = 0;\n    long\
    \ max_level17 = 0;\n    long level17 = 0;\n    long max_level18 = 0;\n    long\
    \ level18 = 0;\n    long max_level19 = 0;\n    long level19 = 0;\n    long max_level20\
    \ = 0;\n    long level20 = 0;\n    long max_level21 = 0;\n    long level21 = 0;\n\
    \    long max_level22 = 0;\n    long level22 = 0;\n    long max_level23 = 0;\n\
    \    long level23 = 0;\n    long max_level24 = 0;\n    long level24 = 0;\n   \
    \ long max_level25 = 0;\n    long level25 = 0;\n    long max_level26 = 0;\n  \
    \  long level26 = 0;\n    long max_level27 = 0;\n    long level27 = 0;\n    long\
    \ max_level28 = 0;\n    long level28 = 0;\n    long max_level29 = 0;\n    long\
    \ level29 = 0;\n    long max_level30 = 0;\n    long level30 = 0;\n    long max_level31\
    \ = 0;\n    long level31 = 0;\n    long max_level32 = 0;\n    long level32 = 0;\n\
    \    long max_level33 = 0;\n    long level33 = 0;\n    long max_level34 = 0;\n\
    \    long level34 = 0;\n    long max_level35 = 0;\n    long level35 = 0;\n   \
    \ long max_level36 = 0;\n    long level36 = 0;\n    long max_level37 = 0;\n  \
    \  long level37 = 0;\n    long max_level38 = 0;\n    long level38 = 0;\n    long\
    \ max_level39 = 0;\n    long level39 = 0;\n    long max_level40 = 0;\n    long\
    \ level40 = 0;\n\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n\
    \    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa41lq_td.d(95): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa41lq_td.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2L, 3L, 1L,\
    \ 3L]\n    \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ levels = new long[paren_string.length()];\n    long[] levels_stack = new long[paren_string.length()];\n\
    \    long[] levels_stack_top = new long[paren_string.length()];\n    long levels_stack_index\
    \ = 0;\n    long levels_stack_top_index = 0;\n    long levels_stack_top_value\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_value_count = 0;\n    long levels_stack_top_value_index\
    \ = 0;\n    long levels_stack_top_\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp96r29pbe.d(67): Error: semicolon expected, not `unittest`\\n/tmp/tmp96r29pbe.d(67):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp96r29pbe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
