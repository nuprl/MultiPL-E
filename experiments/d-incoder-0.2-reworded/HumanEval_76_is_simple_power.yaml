name: HumanEval_76_is_simple_power
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nYour task is to write a function\
  \ that returns true if a number x is a simple\n    power of n and false in other\
  \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L,\
  \ 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L,\
  \ 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L,\
  \ 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long\
  \ x, long n) \n"
tests: "unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
  \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
  \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
  \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
  \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
  \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
completions: ["{\n    if (x == 1L) return true;\n    if (x == 0L) return false;\n\
    \    if (n == 0L) return false;\n    if (n == 1L) return true;\n    if (n % 2\
    \ == 0L) return false;\n    long a = x;\n    long b = n;\n    long c = 1L;\n \
    \   long d = 1L;\n    long e = 1L;\n    long f = 1L;\n    long g = 1L;\n    long\
    \ h = 1L;\n    long i = 1L;\n    long j = 1L;\n    long k = 1L;\n    long l =\
    \ 1L;\n    long m = 1L;\n    long n = 2L;\n    long o = 2L;\n    long p = 2L;\n\
    \    long q = 2L;\n    long r = 2L;\n    long s = 2L;\n    long t = 2L;\n    long\
    \ u = 2L;\n    long v = 2L;\n    long w = 2L;\n    long x = 2L;\n    long y =\
    \ 2L;\n    long z = 2L;\n    long A = 2L;\n    long B = 2L;\n    long C = 2L;\n\
    \    long D = 2L;\n    long E = 2L;\n    long F = 2L;\n    long G = 2L;\n    long\
    \ H = 2L;\n    long I = 2L;\n    long J = 2L;\n    long K = 2L;\n    long L =\
    \ 2L;\n    long M = 2L;\n    long N = 2L;\n    long O = 2L;\n    long P = 2L;\n\
    \    long Q = 2L;\n    long R = 2L;\n    long S = 1L;\n    long T = 1L;\n    long\
    \ U = 1L;\n    long V = 1L;\n    long W = 1L;\n    long X = 1L;\n    long Y =\
    \ 1L;\n    long Z = 1L;\n    long A = 1L;\n    long B = 1L;\n    long C = 1L;\n\
    \    long D = 1L;\n    long E = 1L;\n    long F = 1L;\n    long G = 1L;\n    long\
    \ H = 1L;\n    long I = 1L;\n    long J = 1L;\n    long K = 1L;\n    long L =\
    \ 1L;\n    long M = 1L;\n    long N = 1L;\n    long O = 1L;\n    long P = 1L;\n\
    \    long Q = 1L", "{\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = ", "{\n    long power = 1;\n  \
    \  long result = 1;\n    while(n > 0)\n    {\n        power *= n;\n        result\
    \ *= x;\n        n /= 2;\n    }\n    return result == power;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work. `is_simple_power(3L, 3L)` returns\
    \ `true` when it should return `false`.\n<|/ c |>\n<| c |>\n: I fixed the bug,\
    \ thanks. I didn't test the code so I didn't notice that bug. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long power = 1;\n    long\
    \ result = 1;\n    \n    while (n > 1) {\n        if (n % 2 == 0) {\n        \
    \    power *= x;\n        }\n        n /= 2;\n        x *= x;\n    }\n    \n \
    \   if (n == 1) {\n        if (power * x == x) {\n            return true;\n \
    \       }\n    }\n    return false;\n}", "{\n    long result = 1;\n    long power\
    \ = 1;\n    \n    while (power < n)\n    {\n        result *= x;\n        power\
    \ *= x;\n    }\n    \n    if (result == x)\n    {\n        return true;\n    }\n\
    \    else\n    {\n        return false;\n    }\n}", "{\n    long power = 1;\n\
    \    long result = 1;\n    \n    while (n > 1) {\n        if (n % 2 == 0) {\n\
    \            power *= x;\n        }\n        n /= 2;\n        x *= x;\n    }\n\
    \    \n    if (n == 1) {\n        if (power * x == x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  if (power * x == x) {\n            return false;\n        } else {\n      \
    \      return true;\n        }\n    }\n}", "{\n    long result = 1;\n    long\
    \ power = 1;\n    \n    while (n > 0)\n    {\n        if (n % 2 == 0)\n      \
    \  {\n            result *= x;\n            power *= n;\n        }\n        n\
    \ /= 2;\n        x *= x;\n    }\n    \n    return (result == power);\n}", "{\n\
    \    long r = 1;\n    long i = 1L;\n    while(i<n)\n    {\n        r *= x;\n \
    \       i++;\n    }\n    return r == x;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThe question says \"Write a function that returns true if a number\
    \ x is a simple power of n and false in other cases\"\n<|/ c |>\n<| c |>\nYes,\
    \ I know. But I thought that maybe the OP wants to know how this algorithm works.\
    \ So I wrote a code snippet that shows how it works.\n<|/ c |>\n<| c |>\nI guess\
    \ you missed the part where OP said \"Write a function that returns true if a\
    \ number x is a simple power of n and false in other cases\"\n<|/ c |>\n<| c |>\n\
    Yes, I missed that part. Thanks for pointing out. I've edited my answer.\n<|/\
    \ c |>\n<| c |>\nThe question says \"Write a function that returns true if a number\
    \ x is a simple power of n and false in other cases\"\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>", "{\n    long long power = 1;\n    long long result = 1;\n    \n\
    \    while(n > 0)\n    {\n        power = power * n;\n        \n        if(power\
    \ == x)\n        {\n            return true;\n        }\n        \n        result\
    \ = result * n;\n        \n        if(result > x)\n        {\n            return\
    \ false;\n        }\n    }\n    \n    return false;\n}", "{\n    if (n == 0) return\
    \ true;\n    if (n == 1) return true;\n    if (x == 1) return true;\n    if (x\
    \ == n) return true;\n    \n    long r = 1;\n    \n    long d = 1;\n    \n   \
    \ long t = 1;\n    \n    long m = 1;\n    \n    long r = 1;\n    \n    long c\
    \ = 1;\n    \n    long a = 1;\n    \n    long b = 1;\n    \n    long d = 1;\n\
    \    \n    long t = 1;\n    \n    long m = 1;\n    \n    long r = 1;\n    \n \
    \   long c = 1;\n    \n    long a = 1;\n    \n    long b = 1;\n    \n    long\
    \ d = 1;\n    \n    long t = 1;\n    \n    long m = 1;\n    \n    long r = 1;\n\
    \    \n    long c = 1;\n    \n    long a = 1;\n    \n    long b = 1;\n    \n \
    \   long d = 1;\n    \n    long t = 1;\n    \n    long m = 1;\n    \n    long\
    \ r = 1;\n    \n    long c = 1;\n    \n    long a = 1;\n    \n    long b = 1;\n\
    \    \n    long d = 1;\n    \n    long t = 1;\n    \n    long m = 1;\n    \n \
    \   long r = 1;\n    \n    long c = 1;\n    \n    long a = 1;\n    \n    long\
    \ b = 1;\n    \n    long d = 1;\n    \n    long t = 1;\n    \n    long m = 1;\n\
    \    \n    long r = 1;\n    \n    long c = 1;\n    \n    long a = 1;\n    \n \
    \   long b = 1;\n    \n    long d = 1;\n    \n    long t = 1;\n    \n    long\
    \ m = 1;\n    \n    long r = 1;\n    \n    long c = 1;\n    \n    long a = 1;\n\
    \    \n    long b = 1;\n    \n    long d = 1;\n    \n    long t = 1;\n    \n \
    \   long m = 1;\n    \n    long r = 1;\n    \n    long c = 1;\n    \n    long\
    \ a = 1;\n    \n    long b = 1;\n    \n    long d = 1;\n    \n    long t = 1;\n\
    \    \n    long m = 1;\n    \n    long r = 1;\n    \n    long c = 1;\n    \n \
    \   long a = 1;\n    \n    long b = 1;\n    \n    long d = 1;\n    \n    long\
    \ t = 1;\n    \n    long m = 1;\n    \n    long r = 1;\n    \n    long c = 1;\n\
    \    \n    ", "{\n    long result = 1;\n    long power = n;\n    long power2 =\
    \ power;\n    \n    while (power2 > 1) {\n        if (power2 % 2 == 1) {\n   \
    \         result *= x;\n        }\n        power2 /= 2;\n        x *= x;\n   \
    \ }\n    \n    if (power2 == 1) {\n        result *= x;\n    }\n    \n    if (result\
    \ == power) {\n        return true;\n    } else {\n        return false;\n   \
    \ }\n}", "{\n    long pow_of_n = pow(n, x);\n    return pow_of_n == x;\n}", "{\n\
    \    if (n == 0)\n        return true;\n    if (n == 1)\n        return (x ==\
    \ 1);\n    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n\
    \        return is_simple_power(x * x, n / 2);\n}", "{\n    long power = 1;\n\
    \    long result = 1;\n    \n    while(n > 0)\n    {\n        power *= x;\n  \
    \      result *= power;\n        n--;\n    }\n    \n    return result == x;\n}",
  "{\n    long r = 1;\n    long m = n;\n    while(m > 1)\n    {\n        if((m & 1)\
    \ == 1)\n        {\n            if((x & m) == 0)\n            {\n            \
    \    return false;\n            }\n            else\n            {\n         \
    \       x >>= m;\n            }\n        }\n        else\n        {\n        \
    \    if((x & m) == 0)\n            {\n                return false;\n        \
    \    }\n            else\n            {\n                x >>= m;\n          \
    \  }\n        }\n        m *= n;\n    }\n    return true;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI appreciate your efforts, but the question was about how to solve\
    \ this problem using only `if` and `else` statements.\n<|/ c |>\n<| c |>\nI didn't\
    \ know that `if` and `else` statements could be used only with `if` statements.\
    \ I thought that `if` and `else` statements could be used only with `while` statements.\
    \ Thank you for pointing this out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    if (x == 1L) return true;\n    if\
    \ (x == 0L) return false;\n    if (n == 0L) return false;\n    if (n == 1L) return\
    \ true;\n    if (n % 2 == 0L) return false;\n    if (n % 3 == 0L) return false;\n\
    \    if (n % 5 == 0L) return false;\n    long res = 1L;\n    long d = 1L;\n  \
    \  while (d <= n) \n    {\n        if (x % d == 0L) \n        {\n            res\
    \ = false;\n            break;\n        }\n        d = d * 2L;\n    }\n    return\
    \ res;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis fails for `is_simple_power(1L,\
    \ 0L)` which should return `true`.\n<|/ c |>\n<| c |>\nYes, I noticed that and\
    \ fixed it\n<|/ c |>\n<| c |>\nThis fails for `is_simple_power(1L, 1L)` which\
    \ should return `true`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it\n\
    <|/ c |>\n<| c |>\nThis fails for `is_simple_power(1L, 2L)` which should return\
    \ `true`.\n<|/ c |>\n<| a tags=c++,algorithm |>\nI believe this can be solved\
    \ using logarithms. \n<code>", "{\n    long r = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n", "{\n    if (x == 1L) return true;\n    if (n == 0L) return false;\n\
    \    if (n % 2 == 1L) return is_simple_power(x, n / 2L);\n    long r = x;\n  \
    \  while (r != 1L) {\n        if (n % r == 0L) return true;\n        r /= 2L;\n\
    \    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| c\
    \ |>\nThis doesn't work for `is_simple_power(2L, 3L)` which returns `true` but\
    \ should return `false`.\n<|/ c |>\n<| c |>\nI see what you mean. I've fixed the\
    \ code.\n<|/ c |>\n<| c |>\nThis doesn't work for `is_simple_power(2L, 3L)` which\
    \ returns `true` but should return `false`.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. I've fixed the code.\n<|/ c |>\n<| c |>\nThis doesn't work for `is_simple_power(2L,\
    \ 3L)` which returns `true` but should return `false`.\n<|/ c |>\n<| a |>\n<code>",
  "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n \
    \       power *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return\
    \ (result == power);\n}", "{\n    long power = 1;\n    long result = 1;\n    \n\
    \    while (n > 1) {\n        if (n % 2 == 0) {\n            power *= x;\n   \
    \         result *= power;\n        }\n        n /= 2;\n        x *= x;\n    }\n\
    \    \n    if (n == 1) {\n        return result == x;\n    }\n    \n    return\
    \ false;\n}", "{\n    if (x == 1L) return true;\n    if (x == 0L) return false;\n\
    \    if (n == 0L) return false;\n    if (n == 1L) return true;\n    if (n % 2\
    \ == 1L) return false;\n    if (n % 3 == 1L) return false;\n    if (n % 5 == 1L)\
    \ return false;\n    long r = 1L;\n    long m = n / 2;\n    while (m > 1L) {\n\
    \        if (m % 2 == 1L) r = r * x;\n        if (m % 3 == 1L) r = r * x * x;\n\
    \        if (m % 5 == 1L) r = r * x * x * x;\n        m = m / 2;\n    }\n    return\
    \ r == x;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `is_simple_power(1L,\
    \ 4L)` returns `true` but `is_simple_power(2L, 2L)` returns `false`.\n<|/ c |>\n\
    <| c |>\n: I fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>", "{\n    long result = 1;\n    long power = 1;\n    \n    while\
    \ (n > 0)\n    {\n        result *= x;\n        power *= n;\n        n--;\n  \
    \  }\n    \n    if (result == x)\n    {\n        return true;\n    }\n    else\n\
    \    {\n        return false;\n    }\n}", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        n /= x;\n    }\n    \n    return result == power;\n}", "{\n    long\
    \ r = 1;\n    long d = 1;\n    long m = 1;\n    long e = 1;\n    long e2 = 1;\n\
    \    long e3 = 1;\n    long e4 = 0;\n    long e5 = 0;\n    long e6 = 1;\n    long\
    \ e7 = 1;\n    long e8 = 1;\n    long e9 = 1;\n    long e10 = 1;\n    long e11\
    \ = 1;\n    long e12 = 1;\n    long e13 = 1;\n    long e14 = 1;\n    long e15\
    \ = 1;\n    long e16 = 1;\n    long e17 = 1;\n    long e18 = 1;\n    long e19\
    \ = 1;\n    long e20 = 1;\n    long e21 = 1;\n    long e22 = 1;\n    long e23\
    \ = 1;\n    long e24 = 1;\n    long e25 = 1;\n    long e26 = 1;\n    long e27\
    \ = 1;\n    long e28 = 1;\n    long e29 = 1;\n    long e30 = 1;\n    long e31\
    \ = 1;\n    long e32 = 1;\n    long e33 = 1;\n    long e34 = 1;\n    long e35\
    \ = 1;\n    long e36 = 1;\n    long e37 = 1;\n    long e38 = 1;\n    long e39\
    \ = 1;\n    long e40 = 1;\n    long e41 = 1;\n    long e42 = 0;\n    long e43\
    \ = 0;\n    long e44 = 0;\n    long e45 = 0;\n    long e46 = 1;\n    long e47\
    \ = 1;\n    long e48 = 1;\n    long e49 = 1;\n    long e50 = 1;\n    long e51\
    \ = 1;\n    long e52 = 0;\n    long e53 = 0;\n    long e54 = 0;\n    long e55\
    \ = 0;\n    long e56 = 1;\n    long e57 = 1;\n    long e58 = 1;\n    long e59\
    \ = 1;\n    long e60 = 1;\n    long e61 = 1;\n    long e62 = 1;\n    long e63\
    \ = 1;\n    long e64 = 1;\n    long e65 = 1;\n    long e66 = 1;\n    long e67\
    \ = 1;\n    long e68 = 1;\n    long e69 = 1;\n    long e70 = 1;\n    long e71\
    \ = 1;\n    long e72 = 0;\n    long e73 = 1;\n    long e74 = 1;\n    long e75\
    \ = 1;\n    long e76 = 1;\n    long e77 = 1;\n    long e78 = 1;\n    long e79\
    \ = 1;\n    long e80 = 1;\n    long e81 = 1;\n    long e82 = 1;\n    long e83\
    \ = 1;\n    long e84 = 1;\n    long e85 = 1;\n", "{\n    long result = 1;\n  \
    \  long power = 1;\n    \n    while(power < n)\n    {\n        result *= x;\n\
    \        power *= x;\n    }\n    \n    return result == x;\n}", "{\n    if (x\
    \ == 1L)\n        return true;\n    if (x == 0L)\n        return false;\n    if\
    \ (n == 0L)\n        return false;\n    if (n % 2 == 0L)\n        return is_simple_power(x,\
    \ n / 2L);\n    if (n % 2 == 1L)\n        return is_simple_power(x, n / 2L) &&\
    \ is_simple_power(x, n / 2L);\n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis does not work. `is_simple_power(1L, 4L)` returns `true` but `is_simple_power(2L,\
    \ 2L)` returns `false`\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "{\n    long result = 1;\n    long power = 1;\n   \
    \ \n    while(n > 0)\n    {\n        power *= n;\n        result *= x;\n     \
    \   n /= x;\n    }\n    \n    return (result == power);\n}", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while (power < n)\n    {\n        power\
    \ *= x;\n        result *= power;\n    }\n    \n    return (result == x);\n}",
  "{\n    if (x == 1L) return true;\n    if (x == 0L) return false;\n    if (n ==\
    \ 0L) return false;\n    if (n == 1L) return true;\n    long res = 1L;\n    long\
    \ d = 1L;\n    long r = 1L;\n    while (n > 1L) {\n        if (n % 2L == 1L) {\n\
    \            res = res * x;\n            if (res == x) return true;\n        }\n\
    \        d = d * n;\n        n = n / 2L;\n    }\n    return res == x;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\n`is_simple_power(3L, 2L)` returns `true`\
    \ but `is_simple_power(3L, 1L)` returns `false`\n<|/ c |>\n<| c |>\nI fixed the\
    \ bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n`is_simple_power(3L, 1L)`\
    \ returns `true` but `is_simple_power(3L, 2L)` returns `false`\n<|/ c |>\n<| c\
    \ |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n`is_simple_power(3L,\
    \ 1L)` returns `true` but `is_simple_power(3L, 2L)` returns `false`\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\n<code>", "{\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = ", "{\n  \
    \  long r = 1;\n    long temp = 1;\n    \n    while(n > 0)\n    {\n        if(n%2\
    \ == 1)\n        {\n            temp *= x;\n        }\n        n /= 2;\n     \
    \   x *= x;\n    }\n    \n    return temp == x;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `is_simple_power(-4, 2)`\
    \ returns `true` instead of `false`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `is_simple_power(-4, 2)` returns `true` instead of `false`.\n<|/ c |>\n<| c\
    \ |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `is_simple_power(-4, 2)` returns `true` instead of\
    \ `false`.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *=\
    \ n;\n        result *= x;\n        n /= x;\n    }\n    \n    return result ==\
    \ power;\n}", "{\n    if (n == 0)\n        return true;\n    if (n == 1)\n   \
    \     return (x == 1);\n    if (n % 2 == 0)\n        return is_simple_power(x,\
    \ n / 2);\n    else\n        return is_simple_power(x * x, n / 2);\n}\n</code>\n\
    <|/ a tags=c++,algorithm,math |>\n<| c |>\nThis doesn't work for negative exponents.\
    \ `is_simple_power(-1, 2)` returns `true` instead of `false`.\n<|/ c |>\n<| c\
    \ |>\nI fixed the negative exponent issue. Thanks for pointing it out.\n<|/ c\
    \ |>\n<| a tags=c++,algorithm,math |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long power = 1;\n    while(n > power) {\n     \
    \   power *= n;\n    }\n    return x == power;\n}", "{\n    long power = 1;\n\
    \    long result = 1;\n    \n    while (power < n)\n    {\n        power *= x;\n\
    \        result *= power;\n    }\n    \n    return result == x;\n}", "{\n    long\
    \ result = 1;\n    long power = 1;\n    \n    while(power < n)\n    {\n      \
    \  result *= x;\n        power *= x;\n    }\n    \n    return (result == x);\n\
    }", "{\n    if (x == 1L)\n        return true;\n    if (n == 0L)\n        return\
    \ false;\n    if (n % 2 == 0L)\n        return is_simple_power(x, n / 2L);\n \
    \   else\n        return is_simple_power(x, n / 2L) && is_simple_power(x, n /\
    \ 2L);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI appreciate your efforts, but\
    \ the question was about a recursive solution, not a iterative one.\n<|/ c |>\n\
    <| c |>\nI didn't say it was iterative, just recursive. Recursion is just a way\
    \ of thinking about a problem in terms of smaller problems. In this case, a recursive\
    \ solution would be a recursive solution. Recursion is just a way of thinking\
    \ about a problem in terms of smaller problems. In this case, a recursive solution\
    \ would be a recursive solution.\n<|/ c |>\n<| c |>\nI understand that, but I\
    \ thought that iterative solutions are more efficient than recursive ones. I guess\
    \ I should rephrase my question then.\n<|/ c |>\n<| c |>\nI rephrased my question\
    \ to make it more clear.\n<|/ c |>\n<| c |>\nI added a recursive solution to my\
    \ answer. Hope it helps.\n<|/ c |>\n<| a dscore=1 |>\nI believe this can be done\
    \ with recursion. \n<code>", "{\n    if (x == 1L) return true;\n    if (n == 0L)\
    \ return false;\n    if (n == 1L) return true;\n    if (x == 0L) return false;\n\
    \    if (x == -1L) return false;\n    if (x == -2L) return false;\n    if (x ==\
    \ -3L) return false;\n    if (x == -4L) return false;\n    if (x == -5L) return\
    \ false;\n    if (x == -6L) return false;\n    if (x == -7L) return false;\n \
    \   if (x == -8L) return false;\n    if (x == -9L) return false;\n    if (x ==\
    \ -10L) return false;\n    if (x == -11L) return false;\n    if (x == -12L) return\
    \ false;\n    if (x == -13L) return false;\n    if (x == -14L) return false;\n\
    \    if (x == -15L) return false;\n    if (x == -16L) return false;\n    if (x\
    \ == -17L) return false;\n    if (x == -18L) return false;\n    if (x == -19L)\
    \ return false;\n    if (x == -20L) return false;\n    if (x == -21L) return false;\n\
    \    if (x == -22L) return false;\n    if (x == -23L) return false;\n    if (x\
    \ == -24L) return false;\n    if (x == -25L) return false;\n    if (x == -26L)\
    \ return false;\n    if (x == -27L) return false;\n    if (x == -28L) return false;\n\
    \    if (x == -29L) return false;\n    if (x == -30L) return false;\n    if (x\
    \ == -31L) return false;\n    if (x == -32L) return false;\n    if (x == -33L)\
    \ return false;\n    if (x == -34L) return false;\n    if (x == -35L) return false;\n\
    \    if (x == -36L) return false;\n    if (x == -37L) return false;\n    if (x\
    \ == -38L) return false;\n    if (x == -39L) return false;\n    if (x == -40L)\
    \ return false;\n    if (x == -41L) return false;\n    if (x == -42L) return false;\n\
    \    if (x == -43L) return false;\n    if (x == -44L) return false;\n    if (x\
    \ == -45L) return false;\n    if (x == -46L) return false;\n    if (x == -47L)\
    \ return false;\n    if (x == -48L) return false;\n    if (x == -49L) return false;\n\
    \    if (x == -50L) return false;\n    if (x == -51L) return false;\n    if (x\
    \ == -52L) return false;\n    if (x == -53L) return false;\n    if (x == -54L)\
    \ return false;\n    if (x == -55L) return false;\n    if (x == -56L) return false;\n\
    \    if (x == -57L) return false;\n    if (x == -58L) return false;\n    if (x\
    \ == -59L) return false;\n    if (x == -60L) return false;\n    if (x == -61L)\
    \ return false;\n    if (x == -62L) return false;\n    if (x == -63L) return false;\n\
    \    if (x == -64L) return false;\n    if (x == -65L) return false;\n    if (x\
    \ == -66L) return false;\n    if (x == -67L) return false;\n    if (x == -68L)\
    \ return false;\n    if (x == -69L) return false;\n    if (x == -70L) return false;\n\
    \    if (x == -71L) return false;\n    if (x == -72L) return false;\n    if (x\
    \ == ", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n\
    \    {\n        power = power * x;\n        result = result * n;\n        n =\
    \ n - 1;\n    }\n    \n    return (result == power);\n}", "{\n    if (x == 1L)\n\
    \        return true;\n    if (n == 0L)\n        return false;\n    if (n % 2\
    \ == 0L)\n        return is_simple_power(x, n / 2L);\n    else\n        return\
    \ is_simple_power(x, n / 2L) && is_simple_power(x, n / 2L);\n}", "{\n    if (n\
    \ == 1L) return true;\n    if (n == 0L) return false;\n    if (x == 0L) return\
    \ false;\n    if (x == 1L) return true;\n    \n    long r = 1L;\n    long d =\
    \ 1L;\n    long t = 1L;\n    \n    while (d < n) {\n        if (x % d == 0) {\n\
    \            r = r * x;\n            t *= d;\n        }\n        d *= 2L;\n  \
    \  }\n    \n    return r == x;\n}", "{\n    long power = 1;\n    long result =\
    \ 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *= x;\n\
    \        n /= x;\n    }\n    \n    return result == power;\n}", "{\n    if (x\
    \ == 1L)\n        return true;\n    if (x == 0L)\n        return false;\n    if\
    \ (n == 0L)\n        return false;\n    if (n % 2 == 1L)\n        return false;\n\
    \    long r = 1L;\n    while (n > 1L) {\n        if ((n % 4 == 0L) && (n % n ==\
    \ 0L))\n            return false;\n        r <<= 1L;\n        n >>= 1L;\n    }\n\
    \    return (r == x);\n}\n</code>\n<|/ a |>\n<| c |>\nI like the idea of using\
    \ bitwise operators to solve this problem. Thanks!\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I believe that it is wrong. For example, `is_simple_power(3L,\
    \ 2L)` returns `true` while `3L**2 == 9L` returns `false`. So your solution returns\
    \ `true` when it should return `false`.\n<|/ c |>\n<| c |>\nI believe that `3L**2\
    \ == 9L` returns `false` because `3L` is `3L` and not `9L`.\n<|/ c |>\n<| c |>\n\
    Yes, you're right. My mistake. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n\
    I believe that `3L**2 == 9L` returns `false` because `3L` is `3L` and not `9L`.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "{\n    long result = 1;\n    long power\
    \ = n;\n    while (power > 1) {\n        if (power % 2 == 0) {\n            result\
    \ *= x;\n        }\n        power /= 2;\n        x *= x;\n    }\n    if (power\
    \ == 1) {\n        return result == x;\n    }\n    return false;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long power = 1;\n\
    \    long result = 1;\n    while(n > 0)\n    {\n        power *= n;\n        result\
    \ *= x;\n        n /= x;\n    }\n    return (result == power);\n}\n</code>\n<|/\
    \ a tags=c++,algorithm |>\n<| c |>\nThis is not the fastest solution, since it\
    \ uses exponentiation by squaring which is O(n^2). Also it uses integer division,\
    \ which is not the fastest solution, since it uses integer division.\n<|/ c |>\n\
    <| c |>\nI agree, it's O(n^2) but it's also O(n) since it uses integer division\
    \ which is O(n). So the total complexity is O(n).\n<|/ c |>\n<| c |>\nThe question\
    \ asks for an algorithm that can solve this problem in O(log n) time. Your algorithm\
    \ is O(n).\n<|/ c |>\n<| c |>\n: O(log n) is the same as O(n), since log n grows\
    \ faster than n. O(log n) is also O(n), since log n grows faster than n.\n<|/\
    \ c |>\n<| c |>\n: O(log n) is the same as O(n), since log n grows faster than\
    \ n. O(log n) is also O(n), since log n grows faster than n.\n<|/ c |>\n<| a |>\n\
    <code>", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n\
    \    {\n        power = power * n;\n        result = result * x;\n        n =\
    \ n - 1;\n    }\n    \n    return (result == power);\n}", "{\n    long power =\
    \ 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n\
    \        result *= x;\n        n /= x;\n    }\n    \n    return result == power;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\n`is_simple_power(3L, 3L)` returns\
    \ `true` but `is_simple_power(3L, 2L)` returns `false`\n<|/ c |>\n<| c |>\nYes,\
    \ I forgot about that case. Fixed now.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n\
    \    long power = 1;\n    long result = 1;\n    \n    while (n > 1) {\n      \
    \  power *= n;\n        result *= x;\n        n /= 2;\n    }\n    \n    return\
    \ (result == power);\n}", "{\n    long power = 1;\n    long result = 1;\n    \n\
    \    while(n > 0)\n    {\n        power *= n;\n        result *= x;\n        n\
    \ /= x;\n    }\n    \n    return (result == power);\n}", "{\n    long power =\
    \ 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *= x;\n\
    \        result *= power;\n        n--;\n    }\n    \n    return result == x;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but the question\
    \ was about a specific language and I wanted to know why my code didn't work.\
    \ Your code doesn't work because you didn't use any language features. I wanted\
    \ to know why my code didn't work and how to fix it.\n<|/ c |>\n<| c |>\nI didn't\
    \ say that my code doesn't work. I said that your question was about a specific\
    \ language and I wanted to know why my code didn't work. Your code doesn't work\
    \ because you didn't use any language features. I wanted to know why my code didn't\
    \ work and how to fix it.\n<|/ c |>\n<| c |>\nI didn't say that my code doesn't\
    \ work. I said that your question was about a specific language and I wanted to\
    \ know why my code didn't work. Your code doesn't work because you didn't use\
    \ any language features. I wanted to know why my code didn't work and how to fix\
    \ it.\n<|/ c |>\n<| c |>\nI didn't say that my code doesn't work. I said that\
    \ your question was about a specific language and I wanted to know why my code\
    \ didn't work. Your code doesn't work because you didn't use any language features.\
    \ I wanted to know why my code didn't work and how to fix it.\n<|/ c |>\n<| c\
    \ |>\nI didn't say that my code doesn't work. I said that your question was about\
    \ a specific language and I wanted to know why my code didn't work. Your code\
    \ doesn't work because you didn't use any language features. I wanted to know\
    \ why my code didn't work and how to fix it.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long result\
    \ = 1;\n    long power = 1;\n    \n    while(n > 0)\n    {\n        result *=\
    \ x;\n        power *= n;\n        n--;\n    }\n    \n    return result == power;\n\
    }", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n  \
    \  {\n        power *= n;\n        result *= x;\n        n /= x;\n    }\n    \n\
    \    return (result == power);\n}", "{\n    long res = 1;\n    while(n > 0)\n\
    \    {\n        if(n & 1)\n            res = res * x;\n        n = n >> 1;\n \
    \       x = x * x;\n    }\n    return res == x;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try is_simple_power(3L, 3L).\n<|/ c |>\n<| c\
    \ |>\nIt works. Try is_simple_power(3L, 3L). You will get false\n<|/ c |>\n<|\
    \ c |>\nIt works. Try is_simple_power(3L, 3L). You will get false\n<|/ c |>\n\
    <| c |>\nIt works. Try is_simple_power(3L, 3L). You will get false\n<|/ c |>\n\
    <| c |>\nIt works. Try is_simple_power(3L, 3L). You will get false\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\n<code>", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        n /= x;\n    }\n    \n    return result == power;\n}", "{\n    long\
    \ power = 1;\n    long result = 1;\n    while(n > 0)\n    {\n        power *=\
    \ n;\n        result *= x;\n        n /= x;\n    }\n    return result == power;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "{\n    long power =\
    \ 1;\n    long result = 1;\n    while(n > 0)\n    {\n        power *= n;\n   \
    \     result *= x;\n        n /= x;\n    }\n    return result == power;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work for negative numbers. Try `is_simple_power(-1L,\
    \ 4L)`.\n<|/ c |>\n<| c |>\nI believe that `is_simple_power(-1L, 4L)` should return\
    \ `false` because `-1L**4` is `-1L` and not `0`.\n<|/ c |>\n<| c |>\nYes, but\
    \ `-1L**4` isn't `-1L`, it's `-1L` **raised to the fourth power**.\n<|/ c |>\n\
    <| c |>\nYes, you are right. I misunderstood your question. Sorry.\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\n<code>", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        n /= x;\n    }\n    \n    return result == power;\n}", "{\n    long\
    \ power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power\
    \ *= n;\n        result *= x;\n        n -= 1;\n    }\n    \n    return result\
    \ == power;\n}", "{\n    long r = 1;\n    long m = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long\
    \ D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n\
    \    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long\
    \ M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n\
    \    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long\
    \ V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n\
    \    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long\
    \ E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n\
    \    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long\
    \ N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n\
    \    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long\
    \ W", "{\n    long long power = 1;\n    long long result = 1;\n    \n    while\
    \ (n > 1) {\n        if (n % 2 == 0) {\n            power *= x;\n        }\n \
    \       result *= x;\n        n /= 2;\n        x *= x;\n    }\n    \n    if (n\
    \ == 1) {\n        if (power == result) {\n            return true;\n        }\n\
    \    }\n    \n    return false;\n}", "{\n    long power = 1;\n    long result\
    \ = 1;\n    while(n > 0)\n    {\n        power = power * n;\n        result +=\
    \ power;\n        n--;\n    }\n    return (result == x);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work for `is_simple_power(3L, 3L)` which should return\
    \ `true`.\n<|/ c |>\n<| c |>\nI didn't see that case. Thanks for pointing it out.\
    \ I've edited my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *=\
    \ n;\n        result *= x;\n        n /= x;\n    }\n    \n    return result ==\
    \ power;\n}", "{\n    long res = 1;\n    long power = 1;\n    \n    while (power\
    \ < n)\n    {\n        res *= x;\n        power *= x;\n    }\n    \n    return\
    \ res == x;\n}", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power = power * n;\n        \n        if(power == x)\n\
    \        {\n            result = true;\n            break;\n        }\n      \
    \  \n        power = power/n;\n    }\n    \n    return result;\n}", "{\n    long\
    \ power = 1;\n    long result = 1;\n    \n    while (n > 1) {\n        if (n %\
    \ 2 == 0) {\n            power *= x;\n        }\n        n /= 2;\n        x *=\
    \ x;\n    }\n    \n    if (n == 1) {\n        if (power == x) {\n            return\
    \ true;\n        }\n    }\n    \n    return false;\n}", "{\n    long r = 1;\n\
    \    long tmp = 1;\n    \n    while (tmp < n)\n    {\n        r *= x;\n      \
    \  tmp++;\n    }\n    \n    return r == x;\n}", "{\n    long long power = 1;\n\
    \    long long result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n\
    \        result *= x;\n        n -= 1;\n    }\n    \n    return (result == power);\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThe question was about C++,\
    \ not C. Also, your solution doesn't work for `is_simple_power(3L, 3L)`.\n<|/\
    \ c |>\n<| c |>\nI added a C++ solution. Thanks for pointing out.\n<|/ c |>\n\
    <| c |>\nYour C++ solution doesn't work for `is_simple_power(3L, 3L)` because\
    \ `pow` returns a `double` which is not precise enough to represent `3L`.\n<|/\
    \ c |>\n<| c |>\nI added a C++ solution. Thanks for pointing out.\n<|/ c |>\n\
    <| c |>\nThe C++ solution doesn't work for `is_simple_power(3L, 3L)` because `pow`\
    \ returns a `double` which is not precise enough to represent `3L`.\n<|/ c |>\n\
    <| a |>\n<code>", "{\n    long r = 1;\n    long m = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n", "{\n \
    \   long r = 1;\n    long m = n;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l\
    \ = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u\
    \ = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n \
    \   long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d\
    \ = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n \
    \   long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 1;\n    long m\
    \ = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v\
    \ = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n \
    \   long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e\
    \ = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 0;\n \
    \   long j = 0;\n    long k = 0;\n    long l = 1;\n    long m = 1;\n    long n\
    \ = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w\
    \ = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n \
    \   long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f\
    \ = 0;\n    long g = 1;\n    long h = 1;\n    long i = 0;\n    long j = 0;\n \
    \   long k = 0;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o\
    \ = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n \
    \   long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;", "{\n    if\
    \ (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work for negative numbers. `is_simple_power(-1, 2)` returns `true`,\
    \ but `is_simple_power(-1, -2)` returns `false`.\n<|/ c |>\n<| c |>\nIt works\
    \ for negative numbers. `is_simple_power(-1, 2)` returns `true`, but `is_simple_power(-1,\
    \ -2)` returns `false`.\n<|/ c |>\n<| c |>\nIt works for negative numbers. `is_simple_power(-1,\
    \ 2)` returns `true`, but `is_simple_power(-1, -2)` returns `false`.\n<|/ c |>\n\
    <| c |>\nIt works for negative numbers. `is_simple_power(-1, 2)` returns `true`,\
    \ but `is_simple_power(-1, -2)` returns `false`.\n<|/ c |>\n<| c |>\nIt works\
    \ for negative numbers. `is_simple_power(-1, 2)` returns `true`, but `is_simple_power(-1,\
    \ -2)` returns `false`.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *=\
    \ n;\n        result *= x;\n        n /= x;\n    }\n    \n    return (result ==\
    \ power);\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. `is_simple_power(-1L, 4L)` returns `true`.\n<|/ c |>\n\
    <| c |>\nYes, I forgot about negative numbers. I fixed my answer. Thanks.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for negative numbers. `is_simple_power(-1L,\
    \ 4L)` returns `true`.\n<|/ c |>\n<| c |>\nYes, I forgot about negative numbers.\
    \ I fixed my answer. Thanks.\n<|/ c |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `is_simple_power(-1L, 4L)` returns `true`.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "{\n    long result = 1;\n    long power = 1;\n    \n    while(power\
    \ < n)\n    {\n        result *= x;\n        power *= x;\n    }\n    \n    return\
    \ result == x;\n}", "{\n    if (x == 1L) return true;\n    if (x == 0L) return\
    \ false;\n    if (n == 0L) return false;\n    if (n == 1L) return true;\n    if\
    \ (n < 0L) return false;\n    if (n < 1L) return false;\n    if (x == 1L) return\
    \ true;\n    if (x == 0L) return false;\n    if (n == 1L) return true;\n    if\
    \ (n == 0L) return false;\n    long res = 1L;\n    long power = 1L;\n    while\
    \ (power < n)\n    {\n        res = res * x;\n        power = power + 1;\n   \
    \ }\n    if (res == x) return true;\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis code doesn't work for negative numbers. Try it with `is_simple_power(-1L,\
    \ 2L)`.\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers. Try it with\
    \ `is_simple_power(-1L, 2L)`.\n<|/ c |>\n<| c |>\nIt doesn't work for negative\
    \ numbers. Try it with `is_simple_power(-1L, 2L)`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for negative numbers. Try it with `is_simple_power(-1L, 2L)`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work for negative numbers. Try it with `is_simple_power(-1L,\
    \ 2L)`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long power = 1;\n    long result = 1;\n    \n \
    \   while(n > 0)\n    {\n        power *= n;\n        result *= x;\n        n\
    \ /= x;\n    }\n    \n    return (result == power);\n}", "{\n    long r = 1;\n\
    \    long m = n;\n    long d = 1;\n    long e = 1;\n    long e2 = 1;\n    long\
    \ e3 = 1;\n    long e4 = 1;\n    long e5 = 1;\n    long e6 = 1;\n    long e7 =\
    \ 1;\n    long e8 = 1;\n    long e9 = 1;\n    long e10 = 1;\n    long e11 = 1;\n\
    \    long e12 = 1;\n    long e13 = 1;\n    long e14 = 1;\n    long e15 = 1;\n\
    \    long e16 = 1;\n    long e17 = 1;\n    long e18 = 1;\n    long e19 = 1;\n\
    \    long e20 = 1;\n    long e21 = 1;\n    long e22 = 1;\n    long e23 = 1;\n\
    \    long e24 = 1;\n    long e25 = 1;\n    long e26 = 1;\n    long e27 = 1;\n\
    \    long e28 = 1;\n    long e29 = 1;\n    long e30 = 1;\n    long e31 = 1;\n\
    \    long e32 = 1;\n    long e33 = 1;\n    long e34 = 1;\n    long e35 = 1;\n\
    \    long e36 = 1;\n    long e37 = 1;\n    long e38 = 1;\n    long e39 = 1;\n\
    \    long e40 = 1;\n    long e41 = 1;\n    long e42 = 0;\n    long e43 = 0;\n\
    \    long e44 = 0;\n    long e45 = 0;\n    long e46 = 0;\n    long e47 = 0;\n\
    \    long e48 = 0;\n    long e49 = 0;\n    long e50 = 0;\n    long e51 = 1;\n\
    \    long e52 = 0;\n    long e53 = 0;\n    long e54 = 0;\n    long e55 = 0;\n\
    \    long e56 = 0;\n    long e57 = 0;\n    long e58 = 0;\n    long e59 = 0;\n\
    \    long e60 = 0;\n    long e61 = 1;\n    long e62 = 0;\n    long e63 = 0;\n\
    \    long e64 = 0;\n    long e65 = 0;\n    long e66 = 0;\n    long e67 = 0;\n\
    \    long e68 = 0;\n    long e69 = 0;\n    long e70 = 0;\n    long e71 = 1;\n\
    \    long e72 = 0;\n    long e73 = 0;\n    long e74 = 0;\n    long e75 = 0;\n\
    \    long e76 = 0;\n    long e77 = 0;\n    long e78 = 0;\n    long e79 = 0;\n\
    \    long e80 = 0;\n    long e81 = 1;\n    long e82 = 0;\n    long e83 = 0;\n\
    \    long e84 = 0;\n    long e85", "{\n    if (x == 1L) return true;\n    if (x\
    \ == 0L) return false;\n    long r = 1L;\n    long m = 1L;\n    while (m <= n)\
    \ \n    {\n        if (x == m) return true;\n        long r = r * x;\n       \
    \ long m = m * x;\n    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis is not the correct solution. `is_simple_power(1L, 4L)` returns\
    \ `true` but `is_simple_power(2L, 2L)` returns `false`.\n<|/ c |>\n<| c |>\nI\
    \ tested it on ideone and it returns `true` for `is_simple_power(1L, 4L)` and\
    \ `is_simple_power(2L, 2L)`\n<|/ c |>\n<| c |>\nYes, it returns true for 1L and\
    \ 4L, but false for 2L and 2L. Your code returns true for 1L and 4L, but false\
    \ for 2L and 2L.\n<|/ c |>\n<| c |>\nI tested it on ideone and it returns `true`\
    \ for `is_simple_power(1L, 4L)` and `is_simple_power(2L, 2L)`\n<|/ c |>\n<| c\
    \ |>\nI tested it on ideone and it returns `true` for `is_simple_power(1L, 4L)`\
    \ and `is_simple_power(2L, 2L)`\n<|/ c |>\n<| a tags=c++,algorithm |>\nI believe\
    \ this can be solved using logarithms. \n<code>", "{\n    long power = 1;\n  \
    \  long result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n    \
    \    result *= x;\n        n -= 1;\n    }\n    \n    return result == power;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ I cannot use any library functions. I must use only basic functions like pow,\
    \ sqrt, log, etc.\n<|/ c |>\n<| c |>\nI edited my answer, I hope it helps you.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use any library\
    \ functions. I must use only basic functions like pow, sqrt, log, etc.\n<|/ c\
    \ |>\n<| c |>\nI edited my answer, I hope it helps you.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Unfortunately I cannot use any library functions. I must use\
    \ only basic functions like pow, sqrt, log, etc.\n<|/ c |>\n<| a |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long power = 1;\n    long\
    \ result = 1;\n    \n    while (power < n)\n    {\n        power *= x;\n     \
    \   result *= power;\n    }\n    \n    return result == x;\n}", "{\n    long power\
    \ = 1;\n    long result = 1;\n    while(n > 0)\n    {\n        power *= n;\n \
    \       if(power == x)\n        {\n            return true;\n        }\n     \
    \   result *= n;\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work for `is_simple_power(3L, 3L)`\n<|/ c |>\n<| c |>\nIt\
    \ works for me. `is_simple_power(3L, 3L)` returns `false`\n<|/ c |>\n<| c |>\n\
    It works for me too. `is_simple_power(3L, 3L)` returns `false`\n<|/ c |>\n<| c\
    \ |>\nIt works for me too. `is_simple_power(3L, 3L)` returns `false`\n<|/ c |>\n\
    <| c |>\nIt works for me too. `is_simple_power(3L, 3L)` returns `false`\n<|/ c\
    \ |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while (power < n)\n    {\n        power *= x;\n        result\
    \ *= power;\n    }\n    \n    return (result == x);\n}", "{\n    long res = 1;\n\
    \    for(int i=1; i<=n; i++)\n    {\n        res = res * x;\n    }\n    return\
    \ res == x;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an\
    \ answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/10278156)\n\
    <|/ c |>\n<| c |>\nI believe it does answer the question. He asked how to check\
    \ if a number is a power of another number. He also asked how to do that in O(1)\
    \ time. He also asked how to do that in O(1) space. He also asked how to do that\
    \ in O(1) time AND O(1) space. He also asked how to do that in O(1) time AND O(1)\
    \ space. He also asked how to do that in O(1) time AND O(1) space. He also asked\
    \ how to do that in O(1) time AND O(1) space. He also asked how to do that in\
    \ O(1) time AND O(1) space. He also asked how to do that in O(1) time AND O(1)\
    \ space. He also asked how to do that in O(1) time AND O(1) space. He also asked\
    \ how to do that in O(1) time AND O(1) space. He also asked how to do that in\
    \ O(1) time AND O(1) space. He also asked how to do that in O(1) time AND O(1)\
    \ space. He also asked how to do that in O(1) time AND O(1) space. He also asked\
    \ how to do that in O(1) time AND O(1) space. He also asked how to do that in\
    \ O(1) time AND O(1) space. He also asked how to do that in O(1) time AND O(1)\
    \ space. He also asked how to do that in O(1) time AND O(1) space. He also asked\
    \ how to do that in O(1) time AND O(1) space. He also asked how to do that in\
    \ O(1) time AND O(1) space. He also asked how to do that in O(1) time AND O(1)\
    \ space. He also asked how to do that in O(1) time AND O(1) space. He also asked\
    \ how to do that in O(1) time AND O(1) space. He also asked how to do that in\
    \ O(1) time AND O(1) space. He also ", "{\n    long power = 1;\n    while(n >\
    \ power) {\n        power *= n;\n    }\n    return (x == power);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work. Try `is_simple_power(3L, 3L)`.\n\
    <|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out. I edited\
    \ my answer to fix the problem.\n<|/ c |>\n<| c |>\nI see what you mean. Thanks\
    \ for pointing that out. I edited my answer to fix the problem.\n<|/ c |>\n<|\
    \ a |>\n<code>", "{\n    if (n == 0)\n        return true;\n    if (n == 1)\n\
    \        return (x == 1);\n    if (x == 1)\n        return is_simple_power(x,\
    \ n - 1);\n    if (x < n)\n        return is_simple_power(x, n);\n    return false;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| c |>\nI believe this fails for\
    \ `is_simple_power(3L, 3L)` which should return `true`.\n<|/ c |>\n<| c |>\nYes,\
    \ I missed that case. Thanks for pointing out. I've updated my answer.\n<|/ c\
    \ |>\n<| a tags=c++,algorithm,math |>\n<code>", "{\n    long result = 1;\n   \
    \ long power = 1;\n    \n    while (power < n)\n    {\n        result *= x;\n\
    \        power *= x;\n    }\n    \n    return result == x;\n}", "{\n    if (x\
    \ == 1L)\n        return true;\n    if (x == 0L)\n        return false;\n    if\
    \ (n == 0L)\n        return false;\n    if (n % 2L == 0L)\n        return is_simple_power(x\
    \ / 2L, n/2L);\n    else\n        return is_simple_power(x * x, n/2L);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <cmath>\nusing namespace std;", "{\n    long r = 1;\n    long m = n;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n", "{\n    long r = 1;\n    long m = 1;\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 0;\n    long j = 1;\n    long k\
    \ = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n \
    \   long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t\
    \ = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 0;\n    long j = 1;\n    long k = 1;\n    long l\
    \ = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u\
    \ = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n \
    \   long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d\
    \ = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n \
    \   long i = 0;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m\
    \ = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v\
    \ = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n \
    \   long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e\
    \ = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 0;\n \
    \   long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n\
    \ = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w\
    \ = 1;", "{\n    long power = 1;\n    long result = 1;\n    \n    while (power\
    \ < n)\n    {\n        power *= x;\n        result *= power;\n    }\n    \n  \
    \  if (result == x)\n    {\n        return true;\n    }\n    else\n    {\n   \
    \     return false;\n    }\n}", "{\n    if (x == 1L) return true;\n    if (n ==\
    \ 0L) return false;\n    if (n == 1L) return true;\n    if (n % 2 == 0L) return\
    \ false;\n    long m = n / 2L;\n    long r = 1L;\n    while (r < m) r = r * 2L;\n\
    \    return (r == x);\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThanks\
    \ for your answer. I tried it but my code is not working. Can you please check\
    \ my code once again?\n<|/ c |>\n<| c |>\nI checked your code. Your code is not\
    \ working because you didn't implement the function is_simple_power. I've edited\
    \ my answer to include it.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried\
    \ it but my code is not working. Can you please check my code once again?\n<|/\
    \ c |>\n<| c |>\nI checked your code. Your code is not working because you didn't\
    \ implement the function is_simple_power. I've edited my answer to include it.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long result = 1;\n    long power = 1;\n    \n \
    \   while (power < n)\n    {\n        result *= x;\n        power *= x;\n    }\n\
    \    \n    return (result == x);\n}", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        n /= x;\n    }\n    \n    return (result == power);\n}", "{\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return false;\n    if (n % 2 == 0)\n        return is_simple_power(x,\
    \ n / 2);\n    else\n        return is_simple_power(x * x, n / 2);\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nI believe this fails for `is_simple_power(3L,\
    \ 3L)`\n<|/ c |>\n<| c |>\nI believe this fails for `is_simple_power(3L, 3L)`\n\
    <|/ c |>\n<| c |>\nIt fails for `is_simple_power(3L, 3L)` because 3L is not a\
    \ power of 3\n<|/ c |>\n<| c |>\nI believe this fails for `is_simple_power(3L,\
    \ 3L)`\n<|/ c |>\n<| c |>\nIt fails for `is_simple_power(3L, 3L)` because 3L is\
    \ not a power of 3\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n    if (n == 0) return\
    \ true;\n    if (n == 1) return false;\n    if (x == 1) return false;\n    if\
    \ (x == n) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0)\
    \ return false;\n    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return\
    \ false;\n    if (n % 11 == 0) return false;\n    if (n % 13 == 0) return false;\n\
    \    if (n % 17 == 0) return false;\n    if (n % 19 == 0) return false;\n    if\
    \ (n % 23 == 0) return false;\n    if (n % 29 == 0) return false;\n    if (n %\
    \ 37 == 0) return false;\n    if (n % 53 == 0) return false;\n    if (n % 59 ==\
    \ 0) return false;\n    if (n % 67 == 0) return false;\n    if (n % 73 == 0) return\
    \ false;\n    if (n % 79 == 0) return false;\n    if (n % 83 == 0) return false;\n\
    \    if (n % 89 == 0) return false;\n    if (n % 97 == 0) return false;\n    if\
    \ (n % 103 == 0) return false;\n    if (n % 109 == 0) return false;\n    if (n\
    \ % 113 == 0) return false;\n    if (n % 127 == 0) return false;\n    if (n %\
    \ 131 == 0) return false;\n    if (n % 137 == 0) return false;\n    if (n % 147\
    \ == 0) return false;\n    if (n % 151 == 0) return false;\n    if (n % 157 ==\
    \ 0) return false;\n    if (n % 163 == 0) return false;\n    if (n % 169 == 0)\
    \ return false;\n    if (n % 173 == 0) return false;\n    if (n % 177 == 0) return\
    \ false;\n    if (n % 181 == 0) return false;\n    if (n % 187 == 0) return false;\n\
    \    if (n % 191 == 0) return false;\n    if (n % 197 == 0) return false;\n  \
    \  if (n % 201 == 0) return false;\n    if (n % 207 == 0) return false;\n    if\
    \ (n % 211 == 0) return false;\n    if (n % 217 == 0) return false;\n    if (n\
    \ % 221 == 0) return false;\n    if (n % 227 == 0) return false;\n    if (n %\
    \ 231 == 0) return false;\n    if (n % 237 == 0) return false;\n    if (n % 241\
    \ == 0) return false;\n    if (n % 247 == 0) return false;\n    if (n % 251 ==\
    \ 0) return false;\n    if (n % 257 == 0) return false;\n    if (n % 263 == 0)\
    \ return false;\n    if (n % 269 == 0) return false;\n    if (n % 273 == 0) return\
    \ false;\n    if (n % 277 == 0) return false;\n    if (n % 281 == 0) return false;\n\
    \    if (n % 287 == 0) return false;\n    if (n % 291 == 0) return false;\n  \
    \  if (n % 297 == 0) return false;\n    if (n % 301 == 0) return false;\n    if\
    \ (n % 307 == 0) return false;\n    if (n % 311 == 0) return false;\n    if (n\
    \ % 317 == 0) return false;\n    if (n % 321 == 0) return false;\n", "{\n    long\
    \ power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power\
    \ *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return (result\
    \ == power);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer!\
    \ I understand your solution and it works perfectly! However, I cannot use any\
    \ loops or conditionals. I only can use basic functions like `pow`, `sqrt`, `log`,\
    \ `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`,\
    \ `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`,\
    \ `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`,\
    \ `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`,\
    \ `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`,\
    \ `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`,\
    \ `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`,\
    \ `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`,\
    \ `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`,\
    \ `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`,\
    \ `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`,\
    \ `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`,\
    \ `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`,\
    \ `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`,\
    \ `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`,\
    \ `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`,\
    \ `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`,\
    \ `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`,\
    \ `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `log`, `sqrt`, `", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while (n > 1) {\n        if (n % 2 ==\
    \ 1) {\n            power *= x;\n        }\n        result *= x;\n        n /=\
    \ 2;\n        x *= x;\n    }\n    \n    if (n == 1) {\n        power *= x;\n \
    \   }\n    \n    return (result == power);\n}", "{\n    long res = 1;\n    for(long\
    \ i = 1; i < n; i++){\n        res = res * x;\n    }\n    return res == x;\n}",
  "{\n    long result = 1;\n    long power = 1;\n    long power = n;\n    \n    while(power\
    \ > 1)\n    {\n        if(power % 2 == 1)\n        {\n            result *= x;\n\
    \        }\n        power /= 2;\n        x *= x;\n    }\n    \n    if(result ==\
    \ x)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n\
    \    }\n}", "{\n    long result = 1;\n    long power = 1;\n    \n    while(power\
    \ < n)\n    {\n        result *= x;\n        power *= x;\n    }\n    \n    return\
    \ result == x;\n}", "{\n    long power = 1;\n    long result = 1;\n    \n    while\
    \ (n > 1) {\n        power = power * n;\n        result = result * x;\n      \
    \  n = n - 1;\n    }\n    \n    if (result == power) {\n        return true;\n\
    \    }\n    \n    return false;\n}", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        n /= 2;\n    }\n    \n    return (result == power);\n}", "{\n  \
    \  long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n    \
    \    power *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return\
    \ (result == power);\n}", "{\n    long power = 1;\n    long result = 1;\n    \n\
    \    while(n > 0)\n    {\n        power = power * n;\n        result = result\
    \ * x;\n        n = n - 1;\n    }\n    \n    return result == power;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work. Try `is_simple_power(1L, 4L)`.\n<|/ c |>\n\
    <| c |>\nI edited my answer. Now it works. Thanks for pointing out.\n<|/ c |>\n\
    <| c |>\nThis doesn't work. Try `is_simple_power(1L, 4L)`.\n<|/ c |>\n<| c |>\n\
    I edited my answer. Now it works. Thanks for pointing out.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long power =\
    \ 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n\
    \        result *= x;\n        n /= x;\n    }\n    \n    return result == power;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work. `is_simple_power(3L,\
    \ 3L)` returns true.\n<|/ c |>\n<| c |>\n: I fixed the bug, thank you. Now it\
    \ works.\n<|/ c |>\n<| c |>\nI believe this fails for `is_simple_power(3L, 2L)`\
    \ returning `true` when it should return `false`.\n<|/ c |>\n<| c |>\n: Yes, I\
    \ fixed it too.\n<|/ c |>\n<| c |>\nI believe this fails for `is_simple_power(3L,\
    \ 1L)` returning `true` when it should return `false`.\n<|/ c |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <cmath>\nusing namespace std;", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *=\
    \ n;\n        result *= x;\n        n /= x;\n    }\n    \n    return result ==\
    \ power;\n}", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n /= x;\n  \
    \  }\n    \n    return result == power;\n}\n</code>\n<|/ a tags=c++,algorithm,math,c\
    \ |>\n<| c |>\nThis is not the right answer. `is_simple_power(1L, 4L)` returns\
    \ `true` while it should be `false`.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n\
    <|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/ c |>\n<| c |>\n: I fixed the\
    \ bug. Thanks.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/ c |>\n<| a\
    \ dscore=2 |>\nThis can be done in O(log(n)) time using binary search. \n<code>",
  "{\n    if (n == 0)\n        return true;\n    if (n == 1)\n        return (x ==\
    \ 1);\n    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n\
    \        return is_simple_power(x * x, n / 2);\n}", "{\n    long power = 1;\n\
    \    long result = 1;\n    long temp;\n    \n    while(n > 0)\n    {\n       \
    \ temp = power;\n        power = temp * x;\n        result += power;\n       \
    \ n--;\n    }\n    \n    return (result == x);\n}", "{\n    long power = 1;\n\
    \    long result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n  \
    \      result *= x;\n        n /= x;\n    }\n    \n    return result == power;\n\
    }", "{\n    long long power = 1;\n    long long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n /= x;\n  \
    \  }\n    \n    return (result == power);\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. Try `is_simple_power(-1L,\
    \ 3L)`.\n<|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out.\
    \ I edited my answer to include a check for negative numbers.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work for negative numbers. Try `is_simple_power(-1L, 3L)`.\n\
    <|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out. I edited\
    \ my answer to include a check for negative numbers.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    if (n == 0) \n    {\n        return true;\n    }\n    long r = 1;\n    while\
    \ (n) \n    {\n        if ((n % 2) == 0) \n        {\n            r *= x;\n  \
    \      }\n        n /= 2;\n        x *= x;\n    }\n    return r == x;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,math |>\n<| c |>\nThis doesn't work for `is_simple_power(3L,\
    \ 2L)` which returns `true` but should return `false`.\n<|/ c |>\n<| c |>\nI guess\
    \ I misunderstood the question. I'll edit my answer.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for `is_simple_power(3L, 2L)` which returns `true` but should return\
    \ `false`.\n<|/ c |>\n<| c |>\nI guess I misunderstood the question. I'll edit\
    \ my answer.\n<|/ c |>\n<| c |>\nThis doesn't work for `is_simple_power(3L, 2L)`\
    \ which returns `true` but should return `false`.\n<|/ c |>\n<| a tags=c++,algorithm,math\
    \ |>\n<code>", "{\n    long power = 1;\n    long result = 1;\n    \n    while\
    \ (n > 0)\n    {\n        if (n % 2 == 0)\n        {\n            power *= x;\n\
    \        }\n        \n        result *= x;\n        n /= 2;\n    }\n    \n   \
    \ return result == power;\n}", "{\n    long result = 1;\n    long power = 1;\n\
    \    long power2 = 1;\n    long power3 = 1;\n    long power4 = 1;\n    long power5\
    \ = 1;\n    long power6 = 1;\n    long power7 = 1;\n    long power8 = 1;\n   \
    \ long power9 = 1;\n    long power10 = 1;\n    long power11 = 1;\n    long power12\
    \ = 1;\n    long power13 = 1;\n    long power14 = 1;\n    long power15 = 1;\n\
    \    long power16 = 1;\n    long power17 = 1;\n    long power18 = 1;\n    long\
    \ power19 = 1;\n    long power20 = 1;\n    long power21 = 1;\n    long power22\
    \ = 1;\n    long power23 = 1;\n    long power24 = 1;\n    long power25 = 1;\n\
    \    long power26 = 1;\n    long power27 = 1;\n    long power28 = 1;\n    long\
    \ power29 = 1;\n    long power30 = 1;\n    long power31 = 1;\n    long power32\
    \ = 1;\n    long power33 = 1;\n    long power34 = 1;\n    long power35 = 1;\n\
    \    long power36 = 1;\n    long power37 = 1;\n    long power38 = 1;\n    long\
    \ power39 = 1;\n    long power40 = 1;\n    long power41 = 1;\n    long power42\
    \ = 1;\n    long power43 = 1;\n    long power44 = 1;\n    long power45 = 1;\n\
    \    long power46 = 1;\n    long power47 = 1;\n    long power48 = 1;\n    long\
    \ power49 = 1;\n    long power50 = 1;\n    long power51 = 1;\n    long power52\
    \ = 1;\n    long power53 = 1;\n    long power54 = 1;\n    long power55 = 1;\n\
    \    long power56 = 1;\n    long power57 = 1;\n    long power58 = 1;\n    long\
    \ power59 = 1;\n    long power60 = 1;\n    long power61 = 1;\n    long power62\
    \ = 1;\n    long power63 = 1;\n    long power64 = 1;\n    long power65 = 1;\n\
    \    long power66 = 1;\n    long power67 = 1;\n    long power68 = 1;\n    long\
    \ power69 = 1;\n    long power70 = 1;\n    long power71 = 1;\n    long power72\
    \ = 1;\n    long power73 = 1;\n    long power74 = 1;\n    long power75 = 1;\n\
    \    long power76 = 1;\n    long power77 = 1;\n    long power78 = 1;\n    long\
    \ power79 = 1;\n    long power80 = 1;\n    long power81 = 1;\n    long power82\
    \ = 1;\n    long power83 = 1;\n", "{\n    long long power = 1;\n    long long\
    \ result = 1;\n    \n    while(n > 0)\n    {\n        power *= x;\n        result\
    \ *= power;\n        n--;\n    }\n    \n    return result == x;\n}", "{\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = ", "{\n    long power = 1;\n    long result = 1;\n    long limit\
    \ = n;\n    long counter = 1;\n    while(power < limit)\n    {\n        counter\
    \ *= x;\n        power += 1;\n        result += counter;\n    }\n    if(result\
    \ != x)\n    {\n        return false;\n    }\n    else\n    {\n        return\
    \ true;\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work for\
    \ `is_simple_power(3L, 2L)` which returns `true` but should return `false`.\n\
    <|/ c |>\n<| c |>\nI believe this should return false for 3L and 2L. Can you please\
    \ check again?\n<|/ c |>\n<| c |>\nIt returns false for 3L and 2L because 3L**2L\
    \ is 8L and 8L is not equal to 3L. 3L**3L is 27L and 27L is not equal to 3L. 3L**4L\
    \ is 81L and 81L is not equal to 3L. 3L**5L is 3840L and 3840L is not equal to\
    \ 3L.\n<|/ c |>\n<| c |>\nYes, you are right. I missed that case. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\nI believe this should return false for 3L and 2L.\
    \ Can you please check again?\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long\
    \ pow_of_n = pow(n, x);\n    return pow_of_n == x;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. `pow` returns `double`, so `pow_of_n == x` will\
    \ never be true.\n<|/ c |>\n<| c |>\nI didn't know that. Thanks for the info.\
    \ I'll update my answer.\n<|/ c |>\n<| c |>\nI updated my answer with a solution\
    \ that works with `long`s.\n<|/ c |>\n<| c |>\nThe question was about `long`s,\
    \ not `double`s. `pow` returns a `double`, so `pow_of_n == x` will never be true.\n\
    <|/ c |>\n<| c |>\nI updated my answer with a solution that works with `long`s.\n\
    <|/ c |>\n<| a |>\n<code>", "{\n    if (n == 0)\n        return true;\n    if\
    \ (n == 1)\n        return (x == 1);\n    if (n % 2 == 0)\n        return is_simple_power(x,\
    \ n / 2);\n    else\n        return is_simple_power(x * x, n / 2);\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work. Try is_simple_power(3L,\
    \ 3L).\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to include\
    \ a check for that case.\n<|/ c |>\n<| c |>\nThis doesn't work for `is_simple_power(3L,\
    \ 3L)`\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to include\
    \ a check for that case.\n<|/ c |>\n<| c |>\nThis doesn't work for `is_simple_power(3L,\
    \ 3L)`\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = ", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n\
    \    {\n        power *= n;\n        result *= x;\n        n /= x;\n    }\n  \
    \  \n    return (result == power);\n}", "{\n    long result = 1;\n    for(long\
    \ i = 1; i < n; i++)\n    {\n        result = result * x;\n    }\n    return result\
    \ == x;\n}", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n /= x;\n  \
    \  }\n    \n    return result == power;\n}", "{\n    long pow_of_n = pow(n, x);\n\
    \    return pow_of_n == x;\n}", "{\n    if (x == 1L) return true;\n    if (x ==\
    \ 0L) return false;\n    if (n == 0L) return false;\n    if (n == 1L) return true;\n\
    \    if (n % 2 == 0L) return false;\n    long r = 1L;\n    while (n-- != 0L) r\
    \ *= x;\n    return r == x;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for\
    \ your answer. I am not allowed to use any library functions. I only have to use\
    \ basic math functions like pow, sqrt, log, sin, cos, etc.\n<|/ c |>\n<| c |>\n\
    I added a solution that does not use any library functions.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I am not allowed to use any library functions. I only\
    \ have to use basic math functions like pow, sqrt, log, sin, cos, etc.\n<|/ c\
    \ |>\n<| c |>\nI added a solution that does not use any library functions.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. I am not allowed to use any library functions.\
    \ I only have to use basic math functions like pow, sqrt, log, sin, cos, etc.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    if (n == 0)\n        return true;\n\
    \    if (x == 1)\n        return false;\n    if (n % 2 == 0)\n        return is_simple_power(x,\
    \ n / 2);\n    else\n        return is_simple_power(x * x, n / 2);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c++,algorithm,math,c |>\n<code>\n#include <stdio.h>\n\
    #include <math.h>", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= x;\n        result *= power;\n        n /= 2;\n\
    \    }\n    \n    return (result == x);\n}", "{\n    long power = 1;\n    long\
    \ result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result\
    \ *= x;\n        n /= x;\n    }\n    \n    return (result == power);\n}", "{\n\
    \    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n  \
    \      power = power * n;\n        \n        if(power == x)\n        {\n     \
    \       return true;\n        }\n        \n        result = result * n;\n    }\n\
    \    \n    return false;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try\
    \ is_simple_power(1L, 4L).\n<|/ c |>\n<| c |>\nIt does work. Try it yourself.\
    \ It returns true for 1L, 4L and false for 2L, 2L and 8L, 2L and 3L, 2L and 3L,\
    \ 1L and 5L, 3L. Which is exactly what OP wanted.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for `is_simple_power(1L, 4L)`. It returns false for 1L, 4L and true for\
    \ 2L, 2L and 8L, 2L and 3L, 2L and 3L, 1L and 5L, 3L.\n<|/ c |>\n<| c |>\nYes,\
    \ it does work. Try it yourself. It returns true for 1L, 4L and false for 2L,\
    \ 2L and 8L, 2L and 3L, 2L and 3L, 1L and 5L, 3L. Which is exactly what OP wanted.\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `is_simple_power(1L, 4L)`. It returns false\
    \ for 1L, 4L and true for 2L, 2L and 8L, 2L and 3L, 2L and 3L, 1L and 5L, 3L.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\nThe algorithm is as follows:", "{\n    if\
    \ (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nI believe that `is_simple_power(3L, 2L)` should be `false` and\
    \ not `true`.\n<|/ c |>\n<| c |>\nI believe that `is_simple_power(3L, 2L)` should\
    \ be `false` and not `true`.\n<|/ c |>\n<| c |>\nI believe that `is_simple_power(3L,\
    \ 2L)` should be `false` and not `true`.\n<|/ c |>\n<| c |>\nI believe that `is_simple_power(3L,\
    \ 2L)` should be `false` and not `true`.\n<|/ c |>\n<| c |>\nI believe that `is_simple_power(3L,\
    \ 2L)` should be `false` and not `true`.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n \
    \       power *= n;\n        result *= x;\n        n /= 2;\n    }\n    \n    return\
    \ (result == power);\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis is\
    \ not correct. `is_simple_power(3L, 3L)` returns `true` but `is_simple_power(3L,\
    \ 2L)` returns `false`\n<|/ c |>\n<| c |>\nYes, I forgot about that case. Fixed\
    \ now.\n<|/ c |>\n<| c |>\nThis is not correct. `is_simple_power(3L, 3L)` returns\
    \ `true` but `is_simple_power(3L, 2L)` returns `false`\n<|/ c |>\n<| c |>\nFixed\
    \ again. Thanks.\n<|/ c |>\n<| c |>\nThis is not correct. `is_simple_power(3L,\
    \ 3L)` returns `true` but `is_simple_power(3L, 2L)` returns `false`\n<|/ c |>\n\
    <| a dscore=1 |>\nThe algorithm is simple and straightforward.\n<code>", "{\n\
    \    long r = 1;\n    long m = 1;\n    long y = 1;\n    long z = 1;\n    \n  \
    \  while(n > 0)\n    {\n        if(n%2 == 1)\n        {\n            r *= x;\n\
    \        }\n        \n        m += 1;\n        n /= 2;\n    }\n    \n    while(m\
    \ > 0)\n    {\n        if(m%2 == 1)\n        {\n            y *= x;\n        }\n\
    \        \n        z += 1;\n        m /= 2;\n    }\n    \n    if(r == y)\n   \
    \ {\n        if(z == n)\n        {\n            return true;\n        }\n    }\n\
    \    \n    return false;\n}", "{\n    long long power = 1;\n    long long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        if(n % 2 == 1)\n        {\n   \
    \         power *= x;\n        }\n        \n        result *= x;\n        n /=\
    \ 2;\n    }\n    \n    return (result == power);\n}", "{\n    if (x == 1L) return\
    \ true;\n    if (x == 0L) return false;\n    if (n == 0L) return false;\n    if\
    \ (n == 1L) return true;\n    if (n % 2 == 0L) return false;\n    if (n % 3 ==\
    \ 0L) return false;\n    long r = 1L;\n    long m = n / 2;\n    while (m != 0L)\
    \ {\n        if (m % 2 == 1L) r = r * x;\n        m /= 2;\n        x *= x;\n \
    \   }\n    return r == x;\n}\n</code>\n<|/ a |>\n<| c |>\nI believe this fails\
    \ for `is_simple_power(3L, 3L)`\n<|/ c |>\n<| c |>\nYes, it fails for `is_simple_power(3L,\
    \ 3L)`\n<|/ c |>\n<| c |>\nIt fails for `is_simple_power(3L, 3L)`\n<|/ c |>\n\
    <| c |>\nIt fails for `is_simple_power(3L, 3L)`\n<|/ c |>\n<| c |>\nIt fails for\
    \ `is_simple_power(3L, 3L)`\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n\
    \    long r = 1;\n    long p = 1;\n    long q = 1;\n    long m = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n", "{\n    long power = 1;\n\
    \    long result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n  \
    \      result *= x;\n        n /= x;\n    }\n    \n    return (result == power);\n\
    }", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n  \
    \  {\n        power *= n;\n        result *= x;\n        n /= x;\n    }\n    \n\
    \    return result == power;\n}", "{\n    long pow_of_n = pow(n, x);\n    return\
    \ pow_of_n == x;\n}", "{\n    long power = 1;\n    long result = 1;\n    \n  \
    \  while (n > 1) {\n        if (n % 2 == 0) {\n            power *= x;\n     \
    \   }\n        x /= 2;\n        n /= 2;\n    }\n    \n    if (n == 1) {\n    \
    \    power *= x;\n    }\n    \n    if (power == x) {\n        result = true;\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<|\
    \ c |>\nThis code doesn't work. `is_simple_power(1L, 4L)` returns `true` instead\
    \ of `false`. `is_simple_power(3L, 2L)` returns `true` instead of `false`.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I used the code from your question\
    \ and added the missing `is_simple_power(3L, 2L)` case.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works. I used the code from your question and added the missing\
    \ `is_simple_power(3L, 2L)` case.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I used the code from your question and added the missing `is_simple_power(3L,\
    \ 2L)` case.\n<|/ c |>\n<| c |>\nI tested it and it works. I used the code from\
    \ your question and added the missing `is_simple_power(3L, 2L)` case.\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\nI wrote this in Python:\n<code>\ndef is_simple_power(x,\
    \ n):\n    power = 1\n    result = 1\n    while n > 1:\n        if n % 2 == 1:\n\
    \            power *= x\n        x /= 2\n        n /= 2\n    if n == 1 and power\
    \ == x:\n        return True\n    return False\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=c++,algorithm |>\n<code>", "{\n    long power = 1;\n    long result =\
    \ 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *= x;\n\
    \        n /= x;\n    }\n    \n    return (result == power);\n}", "{\n    long\
    \ power = 1;\n    long result = 1;\n    long limit = (long) pow(x, n);\n    long\
    \ temp = 1;\n    while(temp <= limit)\n    {\n        temp = temp * x;\n     \
    \   power++;\n    }\n    while(power < n)\n    {\n        result = result * x;\n\
    \        power++;\n    }\n    if(result == x)\n    {\n        return true;\n \
    \   }\n    else\n    {\n        return false;\n    }\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try is_simple_power(2L, 4L).\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try it yourself. It returns true for 2L and 4L. 2L**4=8L.\
    \ 8L**2=16L. 16L**2=32L. 32L**2=64L. 64L**2=128L. 128L**2=256L. 256L**2=512L.\
    \ 512L**2=1024L. 1024L**2=2048L. 2048L**2=4096L. 4096L**2=8192L. 8192L**2=16384L.\
    \ 16384L**2=32768L. 32768L**2=65536L. 65536L**2=131072L. 131072L**2=262144L. 262144L**2=524288L.\
    \ 524288L**2=1048576L. 1048576L**2=2097152L. 2097152L**2=4194304L. 4194304L**2=8388608L.\
    \ 8388608L**2=16777216L. 16777216L**2=33554432L. 33554432L**2=67108864L. 67108864L**2=134217728L.\
    \ 134217728L**2=268435456L. 268435456L**2=536870912L. 536870912L**2=1073741824L.\
    \ 1073741824L**2=2147483648L. 2147483648L**2=4294967296L. 4294967296L**2=8589934592L.\
    \ 8589934592L**2=17179869184L. 17179869184L**2=34359738368L. 34359738368L**2=68719476736L.\
    \ 68719476736L**2=", "{\n    long power = 1;\n    long result = 1;\n    \n   \
    \ while (power < n)\n    {\n        power *= x;\n        result *= power;\n  \
    \  }\n    \n    return (result == x);\n}", "{\n    long r = 1;\n    long m = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n", "{\n    if (n == 0) return true;\n    if (n == 1) return\
    \ true;\n    if (n % 2 == 0) return false;\n    long a = 1;\n    long b = x;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    ", "{\n    long result = 1;\n    long power = 1;\n\
    \    long counter = 1;\n    \n    while (counter <= n) {\n        power = power\
    \ * x;\n        counter++;\n    }\n    \n    if (power == x) {\n        return\
    \ true;\n    }\n    else {\n        return false;\n    }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis is not an answer. Explain what your code does, and how it\
    \ does it.\n<|/ c |>\n<| c |>\nI added some explanation.\n<|/ c |>\n<| c |>\n\
    This doesn't work. Try it with `is_simple_power(2L, 3L)`.\n<|/ c |>\n<| c |>\n\
    I fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n /= x;\n  \
    \  }\n    \n    return (result == power);\n}", "{\n    if (n == 0) return true;\n\
    \    if (n == 1) return true;\n    if (n % 2 == 0) return false;\n    long a =\
    \ 1;\n    long b = x;\n    long c = 1;\n    while (b != 0) {\n        if (b %\
    \ 2 == 0) {\n            long d = b / 2;\n            if (d == 0) return false;\n\
    \            long e = (b - d) / 2;\n            if (e == 0) return false;\n  \
    \          long f = a * e * c;\n            if (f == 0) return false;\n      \
    \      a = f;\n            c += 1;\n        } else {\n            long d = b /\
    \ 2;\n            if (d == 0) return false;\n            long e = (b - d) / 2;\n\
    \            if (e == 0) return false;\n            long f = a * e * c;\n    \
    \        if (f == 0) return false;\n            a = f;\n            c += 1;\n\
    \        }\n        b -= 1;\n    }\n    return true;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nI believe this fails for `is_simple_power(1L, 2L)` because `1L`\
    \ isn't a power of `2L`.\n<|/ c |>\n<| c |>\nYes, I forgot to add that case. Thanks\
    \ for pointing out.\n<|/ c |>\n<| c |>\nThis fails for `is_simple_power(1L, 3L)`\
    \ because `1L` isn't a power of `3L`.\n<|/ c |>\n<| c |>\nYes, I forgot to add\
    \ that case. Thanks for pointing out.\n<|/ c |>\n<| c |>\nThis fails for `is_simple_power(1L,\
    \ 4L)` because `1L` isn't a power of `4L`.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "{\n    long power = 1;\n    long result = 1;\n    long remainder;\n    \n    while(n\
    \ > 0)\n    {\n        remainder = x % n;\n        power = power * n;\n      \
    \  x = remainder;\n        result = result * power;\n        n = n - remainder;\n\
    \    }\n    \n    return (result == x);\n}", "{\n    long power = 1;\n    long\
    \ result = 1;\n    while(n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        if(power == result)\n        {\n            return true;\n     \
    \   }\n        n /= x;\n    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work for negative powers. `is_simple_power(-1L, 4L)`\
    \ returns `true`, but `is_simple_power(-1L, 2L)` returns `false`.\n<|/ c |>\n\
    <| c |>\nI thought that negative powers are also simple. Anyway, I added a solution\
    \ that works for negative powers.\n<|/ c |>\n<| c |>\nThe OP said \"simple power\"\
    , not \"simple exponent\"\n<|/ c |>\n<| c |>\nI added a solution that works for\
    \ negative powers.\n<|/ c |>\n<| c |>\nI added a solution that works for negative\
    \ powers.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long result = 1;\n    long power = n;\n    \n \
    \   while(power != 0)\n    {\n        if(power % 2 == 1)\n        {\n        \
    \    result *= x;\n        }\n        power /= 2;\n        x *= x;\n    }\n  \
    \  \n    return result == x;\n}", "{\n    long power = 1;\n    long result = 1;\n\
    \    \n    while(n > 0)\n    {\n        power = power * n;\n        result = result\
    \ * x;\n        n = n - 1;\n    }\n    \n    return (result == power);\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis fails for `is_simple_power(3L, 3L)`\
    \ which returns true.\n<|/ c |>\n<| c |>\nYes, I missed that case. Thanks for\
    \ pointing it out. Fixed now.\n<|/ c |>\n<| c |>\nThis fails for `is_simple_power(3L,\
    \ 3L)` which returns true.\n<|/ c |>\n<| c |>\nYes, I missed that case. Thanks\
    \ for pointing it out. Fixed now.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>",
  "{\n    long power = 1;\n    long result = 1;\n    while(n > 0)\n    {\n       \
    \ power *= n;\n        result *= x;\n        n /= x;\n    }\n    return (result\
    \ == power);\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis fails for\
    \ `is_simple_power(3L, 2L)`\n<|/ c |>\n<| c |>\nYes, I forgot about that case.\
    \ Thanks for pointing it out. I've updated the answer.\n<|/ c |>\n<| c |>\nThis\
    \ fails for `is_simple_power(3L, 2L)`\n<|/ c |>\n<| c |>\nYes, I forgot about\
    \ that case. Thanks for pointing it out. I've updated the answer.\n<|/ c |>\n\
    <| c |>\nThis fails for `is_simple_power(3L, 2L)`\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>", "{\n    if (n == 0)\n        return true;\n    if (n == 1)\n        return\
    \ (x == 1);\n    if (x < 0)\n        return false;\n    if (x == 1)\n        return\
    \ true;\n    if (x == 2)\n        return (n == 1);\n    if (n % 2 == 0)\n    \
    \    return is_simple_power(x, n / 2);\n    if (n % 3 == 0)\n        return is_simple_power(x,\
    \ n / 3);\n    return false;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI believe\
    \ this fails for `is_simple_power(3L, 3L)`\n<|/ c |>\n<| c |>\nYes, it fails for\
    \ 3L and 3L. 3L**3L should be true but it is false because 3L**3L is not a power\
    \ of 3.\n<|/ c |>\n<| c |>\nI believe this fails for `is_simple_power(3L, 2L)`\n\
    <|/ c |>\n<| c |>\nYes, it fails for 3L and 2L. 3L**2L should be true but it is\
    \ false because 3L**2L is not a power of 2.\n<|/ c |>\n<| c |>\nI believe this\
    \ fails for `is_simple_power(3L, 1L)`\n<|/ c |>\n<| a tags=c++,algorithm |>\n\
    <code>", "{\n    long r = 1;\n    long m = n;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n", "{\n    long result\
    \ = 1;\n    long power = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n\
    \        result *= x;\n        x /= n;\n    }\n    \n    return result == power;\n\
    }", "{\n    long power = 1;\n    long result = 1;\n    while(n > 0)\n    {\n \
    \       power *= n;\n        result *= x;\n        n /= 2;\n    }\n    return\
    \ result == power;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks so much for\
    \ the help. I appreciate it!\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>\nusing namespace std;", "{\n    if (n == 0)\n \
    \       return true;\n    if (n == 1)\n        return (x == 1);\n    if (x < 0)\n\
    \        return false;\n    if (x == 1)\n        return true;\n    if (x < n)\n\
    \        return false;\n    long res = 1;\n    while (n > 0)\n    {\n        if\
    \ (n % 2 == 0)\n        {\n            if (res * x == x)\n                return\
    \ true;\n        }\n        res *= x;\n        n /= 2;\n    }\n    return false;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nI believe that `is_simple_power(1L,\
    \ 4L)` should return `true` because `1L**4 == 1L`\n<|/ c |>\n<| c |>\nYes, you\
    \ are right. Thanks for pointing out. Fixed now.\n<|/ c |>\n<| c |>\n`is_simple_power(1L,\
    \ 4L)` should return `true` because `1L**4 == 1L`\n<|/ c |>\n<| c |>\n`is_simple_power(1L,\
    \ 4L)` should return `true` because `1L**4 == 1L`\n<|/ c |>\n<| c |>\n`is_simple_power(1L,\
    \ 4L)` should return `true` because `1L**4 == 1L`\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>", "{\n    long power = 1;\n    long result = 1;\n    long limit =\
    \ n;\n    long counter = 0;\n    while(power < limit)\n    {\n        counter++;\n\
    \        power *= x;\n    }\n    if(counter == limit)\n    {\n        result =\
    \ true;\n    }\n    else\n    {\n        result = false;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <cmath>\nusing namespace std;", "{\n    if (x == 1L) return true;\n \
    \   if (x == 0L) return false;\n    if (n == 0L) return false;\n    if (n == 1L)\
    \ return true;\n    if (n % 2 == 0L) return false;\n    long d = n % 2 == 1L ?\
    \ n / 2L : n / 2L + 1;\n    long r = pow(x, d);\n    return r == x;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work for `is_simple_power(3L, 2L)` which\
    \ returns `true` but should return `false`.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. Thanks for pointing that out. I updated the answer accordingly.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>", "{\n    long power = 1;\n    long result = 1;\n\
    \    \n    while(n > 0)\n    {\n        power *= n;\n        result *= x;\n  \
    \      n /= x;\n    }\n    \n    return result == power;\n}", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power = power\
    \ * n;\n        \n        if(power == x)\n        {\n            return true;\n\
    \        }\n        \n        result = result * n;\n        \n        if(result\
    \ > x)\n        {\n            return false;\n        }\n    }\n    \n    return\
    \ false;\n}", "{\n    long power = 1;\n    long result = 1;\n    long power =\
    \ 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = ", "{\n    if (n == 0) return true;\n\
    \    if (n == 1) return true;\n    if (x == 1) return true;\n    if (x == n) return\
    \ true;\n    if (n % 2 == 0) return false;\n    long a = n / 2;\n    long b =\
    \ n - a;\n    long c = x;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = n;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long A = 1;\n    long B = 1;\n    long\
    \ C = 1;\n    long D = 1;\n    long E = 1;\n    long F = 1;\n    long G = 1;\n\
    \    long H = 1;\n    long I = 1;\n    long J = 1;\n    long K = 1;\n    long\
    \ L = 1;\n    long M = 1;\n    long N = 1;\n    long O = 1;\n    long P = 1;\n\
    \    long Q = 1;\n    long R = 1;\n    long S = 1;\n    long T = 1;\n    long\
    \ U = 1;\n    long V = 1;\n    long W = 1;\n    long X = 1;\n    long Y = 1;\n\
    \    long Z = 1;\n    long A1 = 1;\n    long B1 = 1;\n    long C1 = 1;\n    long\
    \ D1 = 1;\n    long E1 = 1;\n    long F1 = 1;\n    long G1 = 1;\n    long H1 =\
    \ 1;\n    long I1 = 1;\n    long J1 = 1;\n    long K1 = 1;\n    long L1 = 1;\n\
    \    long M1 = 1;\n    long N1 = 1;\n    long O1 = 1;\n    long P1 = 1;\n    long\
    \ Q1 = 1;\n    long R1 = 1;\n    long S1 = 1;\n    long T1 = 1;\n    long U1 =\
    \ 1;\n    long V1 = 1;\n    long W1 = 1;\n    long X1 = 1;\n    long Y1 = 1;\n\
    \    long Z1 = 1;\n    long A2 = 1;\n    long B2 = 1;\n    long C2 = 1;\n    long\
    \ D2 = 1;\n    long E2 = 1;\n    long F2 = 1;\n    long G2 = 1;\n    long H2 =\
    \ 1;\n    long I2 = 1;\n    long J2 = 1;\n    long K2 = 1;\n    long L2 = 1;\n\
    \    long M2 = 1;\n    long N2 = 1;\n    long ", "{\n    long power = 1;\n   \
    \ long result = 1;\n    \n    while(n > 0)\n    {\n        power *= x;\n     \
    \   result *= power;\n        n--;\n    }\n    \n    return (result == x);\n}",
  "{\n    long power = 1;\n    long result = 1;\n    \n    while (n > 1) {\n     \
    \   power *= n;\n        result *= x;\n        n /= 2;\n    }\n    \n    if (result\
    \ == power) {\n        return true;\n    } else {\n        return false;\n   \
    \ }\n}", "{\n    if (x == 1L) {\n        return true;\n    }\n    if (x == 0L)\
    \ {\n        return false;\n    }\n    if (n == 0L) {\n        return false;\n\
    \    }\n    if (n == 1L) {\n        return true;\n    }\n    if (n % 2 == 0L)\
    \ {\n        return is_simple_power(x, n / 2L);\n    }\n    return is_simple_power(x,\
    \ n / 2L) && is_simple_power(x, n / 2L);\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=c++,algorithm,math |>\n<code>", "{\n    long power = 1;\n    while(n >\
    \ power) {\n        power *= n;\n    }\n    return x == power;\n}\n</code>\n<|/\
    \ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work. Try `is_simple_power(3L,\
    \ 3L)`\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. The function\
    \ returns true for 3L and 3L.\n<|/ c |>\n<| c |>\nI tested it on `3L` before posting\
    \ it. I get `true` for `3L` and `3L`.\n<|/ c |>\n<| c |>\nI tested it on `3L`\
    \ before posting it. I get `true` for `3L` and `3L`.\n<|/ c |>\n<| c |>\nI tested\
    \ it on `3L` before posting it. I get `true` for `3L` and `3L`.\n<|/ c |>\n<|\
    \ a dscore=2 |>\n<code>", "{\n    long power = 1;\n    long result = 1;\n    \n\
    \    while(n > 0)\n    {\n        power *= n;\n        result *= x;\n        n\
    \ /= x;\n    }\n    \n    return result == power;\n}", "{\n    long power = 1;\n\
    \    long result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n  \
    \      result *= x;\n        n /= x;\n    }\n    \n    return (result == power);\n\
    }", "{\n    if (n == 0) return true;\n    if (n == 1) return true;\n    if (x\
    \ == 1) return true;\n    if (x == n) return true;\n    if (x < n) return is_simple_power(x,\
    \ n-1);\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| c\
    \ |>\nThis doesn't work. Try is_simple_power(1L, 4L).\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it yourself. It returns true for 1L and 4L. Try is_simple_power(1L,\
    \ 4L).\n<|/ c |>\n<| c |>\nIt returns true for 1L and 4L. Try is_simple_power(1L,\
    \ 4L).\n<|/ c |>\n<| c |>\nIt returns true for 1L and 4L. Try is_simple_power(1L,\
    \ 4L).\n<|/ c |>\n<| c |>\nIt returns true for 1L and 4L. Try is_simple_power(1L,\
    \ 4L).\n<|/ c |>\n<| a tags=c++,algorithm,math |>\n<code>", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *=\
    \ n;\n        result *= x;\n        n /= x;\n    }\n    \n    return result ==\
    \ power;\n}", "{\n    long result = 1;\n    long power = 1;\n    \n    while(n\
    \ > 0)\n    {\n        result *= x;\n        power *= n;\n        n--;\n    }\n\
    \    \n    return (result == power);\n}\n</code>\n<|/ a tags=c++,algorithm |>\n\
    <| c |>\nThe question was about C++, not C. `pow` isn't available in C++.\n<|/\
    \ c |>\n<| c |>\nYes, I know, but I thought that maybe the OP can use some of\
    \ his knowledge to solve the problem in C++.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, but I thought that maybe the OP can use some of his knowledge to solve\
    \ the problem in C++.\n<|/ c |>\n<| c |>\nThe OP didn't specify that he was using\
    \ C++. He did specify that he was using C. He also specified that he was using\
    \ C. He also specified that he was using C. He also specified that he was using\
    \ C. He also specified that he was using C. He also specified that he was using\
    \ C. He also specified that he was using C. He also specified that he was using\
    \ C. He also specified that he was using C. He also specified that he was using\
    \ C. He also specified that he was using C. He also specified that he was using\
    \ C. He also specified that he was using C. He also specified that he was using\
    \ C. He also specified that he was using C. He also specified that he was using\
    \ C. He also specified that he was using C. He also specified that he was using\
    \ C. He also specified that he was using C. He also specified that he was using\
    \ C. He also specified that he was using C. He also specified that he was using\
    \ C. He also specified that he was using C. He also specified that he was using\
    \ C. He also specified that he was using C. He also specified that he was using\
    \ C. He also specified that he was using C. He also specified that he was using\
    \ C. He also specified that he was using C. He also specified that he was using\
    \ C. He also specified that he was using C. He also specified that he was using\
    \ C. He also specified that he was using C. He also specified that he was ", "{\n\
    \    long power = 1;\n    long result = 1;\n    \n    while (n > 1) {\n      \
    \  power *= n;\n        result *= x;\n        n /= 2;\n    }\n    \n    if (result\
    \ == power) {\n        return true;\n    } else {\n        return false;\n   \
    \ }\n}", "{\n    long power = 1;\n    long result = 1;\n    long temp;\n    \n\
    \    while(n > 0)\n    {\n        temp = power;\n        power = power * x;\n\
    \        temp = temp / n;\n        result = result && temp == power;\n       \
    \ n = n - 1;\n    }\n    \n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This code is not correct. Try is_simple_power(3L, 3L).\n<|/ c |>\n<| c |>\nYes,\
    \ you are right. I've corrected my answer. Thank you!\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n /= x;\n  \
    \  }\n    \n    return result == power;\n}", "{\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = ",
  "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n \
    \       power *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return\
    \ result == power;\n}", "{\n    if (n == 0)\n        return true;\n    if (n ==\
    \ 1)\n        return (x == 1);\n    if (n % 2 == 0)\n        return is_simple_power(x,\
    \ n / 2);\n    else\n        return is_simple_power(x * x, n / 2);\n}", "{\n \
    \   long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n   \
    \     power *= n;\n        result *= x;\n        n /= 2;\n    }\n    \n    return\
    \ result == power;\n}", "{\n    long pow_of_n = pow(n, x);\n    return pow_of_n\
    \ == x;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not work. Try is_simple_power(3L,\
    \ 2L).\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my\
    \ answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test case to\
    \ my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test case\
    \ to my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test case\
    \ to my answer.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <cmath>\n#include <cstdlib>\nusing namespace std;", "{\n    if (n ==\
    \ 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n    if\
    \ (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n        return\
    \ is_simple_power(x * x, n / 2);\n}\n</code>\n<|/ a |>\n<| c |>\nI didn't know\
    \ that `pow` was a function in C++. Thanks for pointing that out!\n<|/ c |>\n\
    <| c |>\n: It's a function in C and C++. `pow` is a function in C and C++.\n<|/\
    \ c |>\n<| c |>\n: I didn't know that `pow` was a function in C++. Thanks for\
    \ pointing that out!\n<|/ c |>\n<| c |>\n: I didn't know that `pow` was a function\
    \ in C++. Thanks for pointing that out!\n<|/ c |>\n<| c |>\n: I didn't know that\
    \ `pow` was a function in C++. Thanks for pointing that out!\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>", "{\n    long power = 1;\n    long result = 1;\n    \n    while\
    \ (n > 1) {\n        power *= n;\n        result *= x;\n        n /= 2;\n    }\n\
    \    \n    if (n == 1) {\n        if (result == x) {\n            return true;\n\
    \        }\n    }\n    \n    return false;\n}", "{\n    long r = 1;\n    long\
    \ m = n;\n    long c = 1;\n    while(m > 0)\n    {\n        if(m & 1)\n      \
    \  {\n            r *= x;\n        }\n        x *= x;\n        m >>= 1;\n    \
    \    c++;\n    }\n    return c == n;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n\
    <| c |>\nI believe this fails for `is_simple_power(1L, 4L)` which returns `true`\
    \ but should return `false`.\n<|/ c |>\n<| c |>\n: Yes, you are right. I've fixed\
    \ my answer. Thanks.\n<|/ c |>\n<| c |>\nI believe this fails for `is_simple_power(1L,\
    \ 4L)` which returns `true` but should return `false`.\n<|/ c |>\n<| c |>\n: Yes,\
    \ you are right. I've fixed my answer. Thanks.\n<|/ c |>\n<| c |>\nI believe this\
    \ fails for `is_simple_power(1L, 4L)` which returns `true` but should return `false`.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>", "{\n    long power = 1;\n    long result\
    \ = 1;\n    long temp;\n    \n    while(n > 0)\n    {\n        temp = power;\n\
    \        power = temp * x;\n        result += power;\n        n--;\n    }\n  \
    \  \n    if (result == x)\n        return true;\n    else\n        return false;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code does not work. For example,\
    \ `is_simple_power(1L, 4L)` returns `true` but `is_simple_power(3L, 2L)` returns\
    \ `false`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you please explain\
    \ why it returns true for 1L and 4L but false for 3L and 2L?\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine. Can you please explain why it returns true for\
    \ 1L and 4L but false for 3L and 2L?\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine. Can you please explain why it returns true for 1L and 4L but false for\
    \ 3L and 2L?\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you please\
    \ explain why it returns true for 1L and 4L but false for 3L and 2L?\n<|/ c |>\n\
    <| a tags=c++,algorithm,math |>\n<code>", "{\n    if (n==0) return true;\n   \
    \ if (n==1) return true;\n    if (x==0) return false;\n    if (x==1) return true;\n\
    \    if (x==n) return true;\n    long r = 1;\n    long m = n;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        n /= x;\n    }\n    \n    return (result == power);\n}", "{\n  \
    \  long power = 1;\n    long result = 1;\n    \n    while (n > 1) {\n        if\
    \ (n % 2 == 1) {\n            power *= x;\n        }\n        result *= x;\n \
    \       n /= 2;\n        x *= x;\n    }\n    \n    return (result == power);\n\
    }", "{\n    long long power = 1;\n    long long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n /= 10;\n \
    \   }\n    \n    return result == power;\n}", "{\n    long result = 1;\n    for(long\
    \ i = 1; i < n; i++)\n    {\n        result = result * x;\n    }\n    return result\
    \ == x;\n}", "{\n    long power = 1;\n    long result = 1;\n    \n    while (power\
    \ < n)\n    {\n        power *= x;\n        result *= power;\n    }\n    \n  \
    \  if (result == x)\n    {\n        return true;\n    }\n    \n    return false;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/26839439)\n<|/ c\
    \ |>\n<| c |>\nThe question was \"Write a function that returns true if a number\
    \ x is a simple power of n and false in other cases.\" The answer is \"Write a\
    \ function that returns true if a number x is a simple power of n and false in\
    \ other cases.\" I provided a solution that is simple and straightforward.\n<|/\
    \ c |>\n<| c |>\nThe question was \"Write a function that returns true if a number\
    \ x is a simple power of n and false in other cases.\" The answer is \"Write a\
    \ function that returns true if a number x is a simple power of n and false in\
    \ other cases.\" I provided a solution that is simple and straightforward.\n<|/\
    \ c |>\n<| c |>\nThe question was \"Write a function that returns true if a number\
    \ x is a simple power of n and false in other cases.\" The answer is \"Write a\
    \ function that returns true if a number x is a simple power of n and false in\
    \ other cases.\" I provided a solution that is simple and straightforward.\n<|/\
    \ c |>\n<| c |>\nThe question was \"Write a function that returns true if a number\
    \ x is a simple power of n and false in other cases.\" The answer is \"Write a\
    \ function that returns true if a number x is a simple power of n and false in\
    \ other cases.\" I provided a solution that is simple and straightforward.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>", "{\n    long power = 1;\n    long result =\
    \ 1;\n    \n    while(n > 0)\n    {\n        power *= x;\n        result *= power;\n\
    \        n /= 2;\n    }\n    \n    return result == x;\n}", "{\n    long long\
    \ power = 1;\n    \n    while(n > 0)\n    {\n        power = power * x;\n    \
    \    n--;\n    }\n    \n    return power==x;\n}", "{\n    if (n == 0)\n      \
    \  return true;\n    if (n == 1)\n        return (x == 1);\n    if (n % 2 == 0)\n\
    \        return is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x\
    \ * x, n / 2);\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution. Thank you!\n\
    <|/ c |>\n<| a |>\n<code>", "{\n    long pow_of_n = pow(n, x);\n    return pow_of_n\
    \ == x;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <cmath>\nusing namespace std;", "{\n    if (n==0)\n        return true;\n\
    \    if (n==1)\n        return (x==1);\n    if (x==1)\n        return is_simple_power(x,\
    \ n-1);\n    if (x%n==0)\n        return is_simple_power(x, n-1);\n    return\
    \ false;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis code doesn't\
    \ work for negative numbers. `is_simple_power(-1L, 2L)` returns `true` instead\
    \ of `false`.\n<|/ c |>\n<| c |>\nI tested it on `-1L` and `2L` and it returns\
    \ `false` as expected.\n<|/ c |>\n<| c |>\nI tested it on `-1L` and `2L` and it\
    \ returns `false` as expected.\n<|/ c |>\n<| c |>\nI tested it on `-1L` and `2L`\
    \ and it returns `false` as expected.\n<|/ c |>\n<| c |>\nI tested it on `-1L`\
    \ and `2L` and it returns `false` as expected.\n<|/ c |>\n<| a |>\n<code>", "{\n\
    \    if (n == 0)\n        return true;\n    if (n == 1)\n        return (x ==\
    \ 1);\n    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n\
    \        return is_simple_power(x * x, n / 2);\n}", "{\n    long power = 1;\n\
    \    long result = 1;\n    long temp = 1;\n    \n    while(n > 0)\n    {\n   \
    \     temp = power;\n        power = temp * x;\n        result *= power;\n   \
    \     n--;\n    }\n    \n    if(result == x)\n    {\n        return true;\n  \
    \  }\n    else\n    {\n        return false;\n    }\n}", "{\n    long power =\
    \ 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n\
    \        result *= x;\n        n /= x;\n    }\n    \n    return result == power;\n\
    }", "{\n    if (n == 0)\n        return true;\n    if (n == 1)\n        return\
    \ (x == 1);\n    if (x == 1)\n        return is_simple_power(x, n-1);\n    if\
    \ (x == 0)\n        return false;\n    long r = 1;\n    while (n > 0)\n    {\n\
    \        if (x%n == 0)\n        {\n            r = r*x;\n            x /= n;\n\
    \        }\n        else\n            break;\n    }\n    return (r == x);\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "{\n    long r = 1;\n \
    \   long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    ",
  "{\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = ", "{\n    long power = 1;\n    long result = 1;\n  \
    \  \n    while(n > 0)\n    {\n        power *= n;\n        result *= x;\n    \
    \    n /= x;\n    }\n    \n    return (result == power);\n}\n</code>\n<|/ a tags=c++,algorithm,c\
    \ |>\n<| c |>\nI like your solution, but I believe that `pow` function will overflow\
    \ for large numbers. I believe that `long long` should be used instead.\n<|/ c\
    \ |>\n<| c |>\nYes, `pow` function will overflow for large numbers. I believe\
    \ that `long long` should be used instead. I've edited my answer to include this\
    \ information.\n<|/ c |>\n<| c |>\nI believe that `long long` should be used instead.\
    \ I've edited my answer to include this information.\n<|/ c |>\n<| c |>\nI believe\
    \ that `long long` should be used instead. I've edited my answer to include this\
    \ information.\n<|/ c |>\n<| c |>\nI believe that `long long` should be used instead.\
    \ I've edited my answer to include this information.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n#include <stdio.h>\n#include <math.h>"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
