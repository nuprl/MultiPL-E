language: d
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > __digits__) \n  \
    \  {\n        shift = __digits__ - shift;\n    }\n    \n    while (shift >= __digits__)\
    \ \n    {\n        remainder = __digits__ - shift;\n        result += __digits__\
    \ - remainder;\n        shift -= __digits__;\n    }\n    \n    while (shift >=\
    \ 0) \n    {\n        remainder = x % __digits__;\n        result += __digits__\
    \ - remainder;\n        x /= __digits__;\n        shift -= __digits__;\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkjporze3.d(18): Error: undefined identifier `__digits__`\n/tmp/tmpkjporze3.d(20):
    Error: undefined identifier `__digits__`\n/tmp/tmpkjporze3.d(23): Error: undefined
    identifier `__digits__`\n/tmp/tmpkjporze3.d(25): Error: undefined identifier `__digits__`\n/tmp/tmpkjporze3.d(26):
    Error: undefined identifier `__digits__`\n/tmp/tmpkjporze3.d(27): Error: undefined
    identifier `__digits__`\n/tmp/tmpkjporze3.d(32): Error: undefined identifier `__digits__`\n/tmp/tmpkjporze3.d(33):
    Error: undefined identifier `__digits__`\n/tmp/tmpkjporze3.d(34): Error: undefined
    identifier `__digits__`\n/tmp/tmpkjporze3.d(35): Error: undefined identifier `__digits__`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkjporze3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x > 0)\n\
    \        {\n            remainder = x % 10;\n            x /= 10;\n          \
    \  result += to_string(remainder);\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8q3bgiu0.d(22): Error: undefined identifier `to_string`\n/tmp/tmp8q3bgiu0.d(32):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8q3bgiu0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x > 0)\n\
    \        {\n            remainder = x % 10;\n            x /= 10;\n          \
    \  result += to_string(remainder);\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq207u05t.d(22): Error: undefined identifier `to_string`\n/tmp/tmpq207u05t.d(32):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq207u05t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = 1;\n    long tmp;\n    \n    while\
    \ (shift > 0)\n    {\n        tmp = (n >> shift);\n        m <<= shift;\n    \
    \    m |= tmp;\n        shift -= (shift & 1);\n    }\n    \n    while (m != 0)\n\
    \    {\n        result += (char)(m % 10);\n        m /= 10;\n    }\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n  \
    \  assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"\
    12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L)\
    \ == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplowwa6wh.d(30): Error: C style cast illegal, use `cast(char)(m
    % 10)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplowwa6wh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        shift = digits(x);\n    }\n    \n    remainder = x % 10;\n    \n    while\
    \ (shift > 0)\n    {\n        result += remainder;\n        x /= 10;\n       \
    \ shift -= 1;\n        remainder = x % 10;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ycish1p.d(18): Error: undefined identifier `digits`\n/tmp/tmp4ycish1p.d(20):
    Error: undefined identifier `digits`\n/tmp/tmp4ycish1p.d(27): Error: incompatible
    types for `(result) += (remainder)`: `string` and `long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4ycish1p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n\
    \        {\n            result += to_string(-x);\n            x /= 10;\n     \
    \   }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2fcn2tam.d(22): Error: undefined identifier `to_string`\n/tmp/tmp2fcn2tam.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2fcn2tam.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long carry = 0;\n    \n    while(n > 0)\n\
    \    {\n        long digit = n % 10;\n        result += digits[digit];\n     \
    \   carry = digit * 10 + carry;\n        n /= 10;\n    }\n    \n    if(carry >\
    \ 0)\n    {\n        result += digits[carry];\n    }\n    \n    for(int i = 0;\
    \ i < shift; i++)\n    {\n        result += \"0\";\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe1f2ymew.d(22): Error: undefined identifier `digits`, did you
    mean variable `digit`?\n/tmp/tmpe1f2ymew.d(29): Error: undefined identifier `digits`\n/tmp/tmpe1f2ymew.d(34):
    Error: slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpe1f2ymew.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n\
    \        {\n            result += to_string(-x);\n            x /= 10;\n     \
    \   }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplqyy2owh.d(22): Error: undefined identifier `to_string`\n/tmp/tmplqyy2owh.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmplqyy2owh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (x) {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        if (remainder >= shift) {\n           \
    \ result += remainder;\n            x -= remainder;\n        }\n    }\n    \n\
    \    if (result != \"\") {\n        result += remainder;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1rkijg56.d(22): Error: incompatible types for `(result) += (remainder)`:
    `string` and `long`\n/tmp/tmp1rkijg56.d(28): Error: incompatible types for `(result)
    += (remainder)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1rkijg56.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = shift\
    \ / n;\n    \n    while(m != 0)\n    {\n        result += n % 10;\n        n /=\
    \ 10;\n        m /= 10;\n    }\n    \n    while(n > 0)\n    {\n        result\
    \ += n % 10;\n        n /= 10;\n    }\n    \n    while(m > 0)\n    {\n       \
    \ result += n % 10;\n        n /= 10;\n        m /= 10;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4uqktp7f.d(22): Error: incompatible types for `(result) += (n
    % 10L)`: `string` and `long`\n/tmp/tmp4uqktp7f.d(29): Error: incompatible types
    for `(result) += (n % 10L)`: `string` and `long`\n/tmp/tmp4uqktp7f.d(35): Error:
    incompatible types for `(result) += (n % 10L)`: `string` and `long`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp4uqktp7f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long remainder;\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += char(remainder);\n        shift -= 1;\n    }\n    \n    while\
    \ (shift < 0)\n    {\n        remainder = digit % 10;\n        digit = digit /\
    \ 10;\n        result += char(remainder);\n        shift += 1;\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n\
    \    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx1vl48q0.d(23): Error: cannot implicitly convert expression
    `remainder` of type `long` to `char`\n/tmp/tmpx1vl48q0.d(31): Error: cannot implicitly
    convert expression `remainder` of type `long` to `char`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpx1vl48q0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        remainder = x % 10;\n        x /= 10;\n        shift -= digits(x);\n\
    \        result += remainder;\n    }\n    \n    while (shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        shift -= digits(x);\n   \
    \     result += remainder;\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4qvv7hze.d(18): Error: undefined identifier `digits`\n/tmp/tmp4qvv7hze.d(22):
    Error: undefined identifier `digits`\n/tmp/tmp4qvv7hze.d(23): Error: incompatible
    types for `(result) += (remainder)`: `string` and `long`\n/tmp/tmp4qvv7hze.d(30):
    Error: undefined identifier `digits`\n/tmp/tmp4qvv7hze.d(31): Error: incompatible
    types for `(result) += (remainder)`: `string` and `long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4qvv7hze.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiru7s1f9.d(22): Error: undefined identifier `to_string`\n/tmp/tmpiru7s1f9.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpiru7s1f9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while ((remainder = x % 10) !=\
    \ 0)\n    {\n        result = to_string(remainder) + result;\n        x = x /\
    \ 10;\n    }\n    \n    while (shift > 0)\n    {\n        if (shift > result.length())\n\
    \        {\n            result += to_string(x);\n        }\n        else\n   \
    \     {\n            result += to_string(x % 10) + result;\n            x /= 10;\n\
    \            shift -= 1;\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf8phu1kz.d(20): Error: undefined identifier `to_string`\n/tmp/tmpf8phu1kz.d(26):
    Error: no property `length` for type `string`\n/tmp/tmpf8phu1kz.d(28): Error:
    undefined identifier `to_string`\n/tmp/tmpf8phu1kz.d(32): Error: undefined identifier
    `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8phu1kz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > __digits.length)\n\
    \    {\n        shift = __digits.length - shift;\n    }\n    \n    remainder =\
    \ __digits.length - shift;\n    \n    while (remainder > 0)\n    {\n        result\
    \ += __digits[__digits.length - remainder];\n        remainder--;\n    }\n   \
    \ \n    result += __digits[shift];\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprdanv30h.d(18): Error: undefined identifier `__digits`\n/tmp/tmprdanv30h.d(20):
    Error: undefined identifier `__digits`\n/tmp/tmprdanv30h.d(23): Error: undefined
    identifier `__digits`\n/tmp/tmprdanv30h.d(27): Error: undefined identifier `__digits`\n/tmp/tmprdanv30h.d(31):
    Error: undefined identifier `__digits`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprdanv30h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit;\n    \n    while (shift > 0)\n    {\n      \
    \  digit = x % 10;\n        x /= 10;\n        result += digit;\n        shift\
    \ -= 1;\n    }\n    \n    while (x > 0)\n    {\n        digit = x % 10;\n    \
    \    x /= 10;\n        result += digit;\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpru5h35o5.d(22): Error: incompatible types for `(result) += (digit)`:
    `string` and `long`\n/tmp/tmpru5h35o5.d(30): Error: incompatible types for `(result)
    += (digit)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpru5h35o5.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpobt4l70f.d(22): Error: undefined identifier `to_string`\n/tmp/tmpobt4l70f.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpobt4l70f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = 1;\n    long r = 1;\n    long\
    \ temp;\n    \n    while (n > 0)\n    {\n        temp = r * m;\n        result\
    \ += to_string(temp % 10);\n        m += 1;\n        r /= 10;\n        n -= temp;\n\
    \    }\n    \n    if (shift > result.length())\n    {\n        string reversed\
    \ = \"\";\n        \n        for (long i = result.length() - 1; i > shift; i--)\n\
    \        {\n            reversed = reversed + result[i];\n        }\n        \n\
    \        return reversed;\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3qpu84k_.d(24): Error: undefined identifier `to_string`\n/tmp/tmp3qpu84k_.d(30):
    Error: no property `length` for type `string`\n/tmp/tmp3qpu84k_.d(34): Error:
    no property `length` for type `string`\n/tmp/tmp3qpu84k_.d(36): Error: incompatible
    types for `(reversed) + (result[cast(ulong)i])`: `string` and `immutable(char)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3qpu84k_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        remainder = x % 10;\n        x /= 10;\n        shift -= digits(x);\n\
    \        result += remainder * pow(10, shift);\n    }\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        shift -=\
    \ digits(x);\n        result += remainder * pow(10, shift);\n    }\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n  \
    \  assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"\
    12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L)\
    \ == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyjc53p60.d(18): Error: undefined identifier `digits`\n/tmp/tmpyjc53p60.d(22):
    Error: undefined identifier `digits`\n/tmp/tmpyjc53p60.d(23): Error: incompatible
    types for `(result) += (remainder * pow(10, shift))`: `string` and `long`\n/tmp/tmpyjc53p60.d(30):
    Error: undefined identifier `digits`\n/tmp/tmpyjc53p60.d(31): Error: incompatible
    types for `(result) += (remainder * pow(10, shift))`: `string` and `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyjc53p60.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long remainder;\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += string(remainder);\n        shift--;\n    }\n    \n    while\
    \ (shift < 0)\n    {\n        remainder = digit % 10;\n        digit = digit /\
    \ 10;\n        result += string(remainder);\n        shift++;\n    }\n    \n \
    \   return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n\
    \    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjfdtwcv5.d(23): Error: function expected before `()`, not `string`
    of type `string`\n/tmp/tmpjfdtwcv5.d(31): Error: function expected before `()`,
    not `string` of type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjfdtwcv5.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n\
    \        {\n            remainder = x % 10;\n            x /= 10;\n          \
    \  result += to_string(remainder);\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppbl_2657.d(22): Error: undefined identifier `to_string`\n/tmp/tmppbl_2657.d(32):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmppbl_2657.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        remainder = x;\n        x = remainder % 10;\n        shift = shift -\
    \ digits(x);\n    }\n    \n    while (shift > 0)\n    {\n        remainder = x\
    \ % 10;\n        x = x / 10;\n        result = remainder + result;\n        shift\
    \ = shift - 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx_6i6i12.d(18): Error: undefined identifier `digits`\n/tmp/tmpx_6i6i12.d(22):
    Error: undefined identifier `digits`\n/tmp/tmpx_6i6i12.d(29): Error: incompatible
    types for `(remainder) + (result)`: `long` and `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpx_6i6i12.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % 10;\n    long r = shift\
    \ / 10;\n    \n    while(n > 0)\n    {\n        result += n % 10 + m;\n      \
    \  n /= 10;\n        m += r;\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2j3diumw.d(22): Error: incompatible types for `(result) += (n
    % 10L + m)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2j3diumw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > numeric_limits<long>::digits)\n\
    \        shift = numeric_limits<long>::digits;\n    \n    remainder = x % shift;\n\
    \    \n    while (remainder != 0) {\n        result = to_string(remainder) + result;\n\
    \        remainder = x % shift;\n        x /= shift;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi2dfocte.d(18): Error: found `<` when expecting `)`\n/tmp/tmpi2dfocte.d(18):
    Error: no identifier for declarator `long`\n/tmp/tmpi2dfocte.d(18): Error: found
    `>` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi2dfocte.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = 1;\n    while(m <= shift)\n  \
    \  {\n        n += m;\n        m <<= 1;\n    }\n    while(n >= 1)\n    {\n   \
    \     result += char(n%10);\n        n /= 10;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp675sg7qw.d(25): Error: cannot implicitly convert expression
    `n % 10L` of type `long` to `char`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp675sg7qw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = shift\
    \ / n;\n    string digits = to_string(n);\n    string reversed = \"\";\n    \n\
    \    while (m > 0) {\n        reversed = digits[r] + reversed;\n        m--;\n\
    \        r--;\n    }\n    \n    if (shift > n) {\n        reversed = digits[r]\
    \ + reversed;\n    }\n    \n    result = digits + reversed;\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1byh1n0n.d(19): Error: undefined identifier `to_string`\n/tmp/tmp1byh1n0n.d(23):
    Error: incompatible types for `(digits[cast(ulong)r]) + (reversed)`: `immutable(char)`
    and `string`\n/tmp/tmp1byh1n0n.d(29): Error: incompatible types for `(digits[cast(ulong)r])
    + (reversed)`: `immutable(char)` and `string`\n/tmp/tmp1byh1n0n.d(32): Error:
    invalid array operation `digits + reversed` (possible missing [])\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp1byh1n0n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digits = digits(x);\n    long remainder = x % 10;\n\
    \    long shift = shift % digits;\n    long shift2 = shift / digits;\n    long\
    \ shift3 = shift / digits;\n    long shift4 = shift / digits;\n    long shift5\
    \ = shift / digits;\n    long shift6 = shift / digits;\n    long shift7 = shift\
    \ / digits;\n    long shift8 = shift / digits;\n    long shift9 = shift / digits;\n\
    \    long shift10 = shift / digits;\n    long shift11 = shift / digits;\n    long\
    \ shift12 = shift / digits;\n    long shift13 = shift / digits;\n    long shift14\
    \ = shift / digits;\n    long shift15 = shift / digits;\n    long shift16 = shift\
    \ / digits;\n    long shift17 = shift / digits;\n    long shift18 = shift / digits;\n\
    \    long shift19 = shift / digits;\n    long shift20 = shift / digits;\n    long\
    \ shift21 = shift / digits;\n    long shift22 = shift / digits;\n    long shift23\
    \ = shift / digits;\n    long shift24 = shift / digits;\n    long shift25 = shift\
    \ / digits;\n    long shift26 = shift / digits;\n    long shift27 = shift / digits;\n\
    \    long shift28 = shift / digits;\n    long shift29 = shift / digits;\n    long\
    \ shift30 = shift / digits;\n    long shift31 = shift / digits;\n    long shift32\
    \ = shift / digits;\n    long shift33 = shift / digits;\n    long shift34 = shift\
    \ / digits;\n    long shift35 = shift / digits;\n    long shift36 = shift / digits;\n\
    \    long shift37 = shift / digits;\n    long shift38 = shift / digits;\n    long\
    \ shift39 = shift / digits;\n    long shift40 = shift / digits;\n    long shift41\
    \ = shift / digits;\n    long shift42 = shift / digits;\n    long shift43 = shift\
    \ / digits;\n    long shift44 = shift / digits;\n    long shift45 = shift / digits;\n\
    \    long shift46 = shift / digits;\n    long shift47 = shift / digits;\n    long\
    \ shift48 = shift / digits;\n    long shift49 = shift / digits;\n    long shift50\
    \ = shift / digits;\n    long \nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph8c0xtem.d(69): Error: no identifier for declarator `long`\n/tmp/tmph8c0xtem.d(69):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmph8c0xtem.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = n;\n    long temp;\n    \n   \
    \ while(m > 0)\n    {\n        temp = m % 10;\n        m = m / 10;\n        result\
    \ = temp + result;\n    }\n    \n    while(shift > 0)\n    {\n        temp = n\
    \ % 10;\n        n = n / 10;\n        result = temp + result;\n        shift--;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpypbed7d9.d(24): Error: incompatible types for `(temp) + (result)`:
    `long` and `string`\n/tmp/tmpypbed7d9.d(31): Error: incompatible types for `(temp)
    + (result)`: `long` and `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpypbed7d9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += char(remainder);\n        shift -= 1;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += char(remainder);\n        shift -= 1;\n    }\n    \n    return\
    \ result;\n}\n/*\nReturn the number of digits in x\n*/\nlong digits(long x) \n\
    {\n    long digits = 0;\n    \n    while(x > 0)\n    {\n        x /= 10;\n   \
    \     digits += 1;\n    }\n    \n    return digits;\n}\n/*\nReturn the number\
    \ of digits in x\n*/\nlong digits(long x) \n{\n    long digits = 0;\n    \n  \
    \  while(x > 0)\n    {\n        x /= 10;\n        digits += 1;\n    }\n    \n\
    \    return digits;\n}\n/*\nReturn the number of digits in x\n*/\nlong digits(long\
    \ x) \n{\n    long digits = 0;\n    \n    while(x > 0)\n    {\n        x /= 10;\n\
    \        digits += 1;\n    }\n    \n    return digits;\n}\n/*\nReturn the number\
    \ of digits in x\n*/\nlong digits(long x) \n{\n    long digits = 0;\n    \n  \
    \  while(x > 0)\n    {\n        x /= 10;\n        digits += 1;\n    }\n    \n\
    \    return digits;\n}\n/*\nReturn the number of digits in x\n*/\nlong digits(long\
    \ x) \n{\n    long digits = 0;\n    \n    while(x > 0)\n    {\n        x /= 10;\n\
    \        digits += 1;\n    }\n    \n    return digits;\n}\n/*\nReturn the number\
    \ of digits in x\n*/\nlong digits(long x) \n{\n    long digits = 0;\n    \n  \
    \  while(x > 0)\n    {\n        x /= 10;\n        digits += 1;\n    }\n    \n\
    \    return digits;\n}\n/*\nReturn the number of digits in x\n*/\nlong digits(long\
    \ x) \n{\n    long digits = 0;\n    \n    while(x > 0)\n    {\n        x /= 10;\n\
    \        digits += 1;\n    }\n    \n    return digits;\n}\n/*\nReturn the number\
    \ of digits in x\n*/\nlong digits(long x) \n{\n    long digits = 0;\n    \n  \
    \  while(x > 0)\n    {\n        x /= 10;\n        digits += 1;\n    }\n    \n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpype_z7x3.d(155): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpype_z7x3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprwzg2b3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmprwzg2b3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprwzg2b3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long carry = 0;\n    \n    for(long i =\
    \ 0; i < shift; i++)\n    {\n        long digit = n % 10;\n        result += digits[digit];\n\
    \        carry = n / 10;\n        n = carry;\n    }\n    \n    if(carry > 0)\n\
    \        result += digits[carry];\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmwdu8dmx.d(22): Error: undefined identifier `digits`, did you
    mean variable `digit`?\n/tmp/tmpmwdu8dmx.d(28): Error: undefined identifier `digits`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwdu8dmx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj8n7mo6j.d(22): Error: undefined identifier `to_string`\n/tmp/tmpj8n7mo6j.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpj8n7mo6j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        remainder = x;\n        \n        while (shift > digits(remainder))\n\
    \        {\n            remainder = remainder % 10;\n            shift--;\n  \
    \      }\n        \n        result = to_string(remainder);\n    }\n    else\n\
    \    {\n        while (shift > 0)\n        {\n            remainder = x % 10;\n\
    \            x = x / 10;\n            \n            if (shift > digits(x))\n \
    \           {\n                remainder = x;\n                \n            \
    \    while (shift > digits(remainder))\n                {\n                  \
    \  remainder = remainder % 10;\n                    shift--;\n               \
    \ }\n                \n                result = to_string(remainder) + result;\n\
    \            }\n            else\n            {\n                result = to_string(remainder)\
    \ + result;\n                shift--;\n            }\n        }\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n\
    \    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe0wy1wdn.d(18): Error: undefined identifier `digits`\n/tmp/tmpe0wy1wdn.d(22):
    Error: undefined identifier `digits`\n/tmp/tmpe0wy1wdn.d(28): Error: undefined
    identifier `to_string`\n/tmp/tmpe0wy1wdn.d(37): Error: undefined identifier `digits`\n/tmp/tmpe0wy1wdn.d(41):
    Error: undefined identifier `digits`\n/tmp/tmpe0wy1wdn.d(47): Error: undefined
    identifier `to_string`\n/tmp/tmpe0wy1wdn.d(51): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe0wy1wdn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprwzg2b3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmprwzg2b3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprwzg2b3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit;\n    \n    while (shift > 0)\n    {\n      \
    \  digit = x % 10;\n        x /= 10;\n        result += digit;\n        shift\
    \ -= 1;\n    }\n    \n    while (x > 0)\n    {\n        digit = x % 10;\n    \
    \    x /= 10;\n        result += digit;\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpru5h35o5.d(22): Error: incompatible types for `(result) += (digit)`:
    `string` and `long`\n/tmp/tmpru5h35o5.d(30): Error: incompatible types for `(result)
    += (digit)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpru5h35o5.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long remainder;\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   while (shift < 0)\n    {\n        remainder = digit % 10;\n        digit =\
    \ digit / 10;\n        result += to_string(remainder);\n        shift += 1;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpagx8_1pl.d(23): Error: undefined identifier `to_string`\n/tmp/tmpagx8_1pl.d(31):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpagx8_1pl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        shift = digits(x);\n    }\n    \n    while (shift > 0)\n    {\n     \
    \   remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift--;\n    }\n    \n    while (shift < digits(x))\n    {\n       \
    \ remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift++;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n\
    \    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"\
    79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L)\
    \ == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9tiiq10_.d(18): Error: undefined identifier `digits`\n/tmp/tmp9tiiq10_.d(20):
    Error: undefined identifier `digits`\n/tmp/tmp9tiiq10_.d(27): Error: undefined
    identifier `to_string`\n/tmp/tmp9tiiq10_.d(31): Error: undefined identifier `digits`\n/tmp/tmp9tiiq10_.d(35):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp9tiiq10_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj8n7mo6j.d(22): Error: undefined identifier `to_string`\n/tmp/tmpj8n7mo6j.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpj8n7mo6j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = n;\n    long i = shift;\n    \n\
    \    while(m > 0)\n    {\n        result += (char)(n % 10 + 10);\n        n /=\
    \ 10;\n        m /= 10;\n        i -= 1;\n    }\n    \n    while(i > 0)\n    {\n\
    \        result += (char)(n % 10 + 10);\n        n /= 10;\n        i -= 1;\n \
    \   }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpovthe_5v.d(22): Error: C style cast illegal, use `cast(char)(n
    % 10 + 10)`\n/tmp/tmpovthe_5v.d(30): Error: C style cast illegal, use `cast(char)(n
    % 10 + 10)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovthe_5v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long d = n % m;\n\
    \    long r = m / d;\n    long s = shift / d;\n    \n    for(long i = 0; i < s;\
    \ i++)\n    {\n        result += to_string(r);\n        r *= 10;\n    }\n    \n\
    \    for(long i = 0; i < d; i++)\n    {\n        result += to_string(n);\n   \
    \     n *= 10;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxuh2fe4x.d(24): Error: undefined identifier `to_string`\n/tmp/tmpxuh2fe4x.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpxuh2fe4x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift < 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift += 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcwwjmmse.d(22): Error: undefined identifier `to_string`\n/tmp/tmpcwwjmmse.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpcwwjmmse.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n\
    \    long s = n - m;\n    \n    for(long i = 0; i < s; i++)\n    {\n        result\
    \ += char(r % 10);\n        r = r / 10;\n    }\n    \n    for(long i = 0; i <\
    \ m; i++)\n    {\n        result += char(r % 10);\n        r = r / 10;\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpothnbwa9.d(23): Error: cannot implicitly convert expression
    `r % 10L` of type `long` to `char`\n/tmp/tmpothnbwa9.d(29): Error: cannot implicitly
    convert expression `r % 10L` of type `long` to `char`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpothnbwa9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        shift = digits(x);\n    }\n    \n    for(long i = shift; i > 0; i--)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += remainder;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpul5eebob.d(18): Error: undefined identifier `digits`\n/tmp/tmpul5eebob.d(20):
    Error: undefined identifier `digits`\n/tmp/tmpul5eebob.d(27): Error: incompatible
    types for `(result) += (remainder)`: `string` and `long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpul5eebob.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (x) {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    if (shift > result.length()) {\n        shift = result.length();\n\
    \    }\n    \n    string reversed = \"\";\n    \n    for (long i = 0; i < shift;\
    \ i++) {\n        reversed += result[i];\n    }\n    \n    return reversed + result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp127g0szk.d(21): Error: undefined identifier `to_string`\n/tmp/tmp127g0szk.d(24):
    Error: no property `length` for type `string`\n/tmp/tmp127g0szk.d(25): Error:
    no property `length` for type `string`\n/tmp/tmp127g0szk.d(31): Error: slice `reversed`
    is not mutable\n/tmp/tmp127g0szk.d(34): Error: invalid array operation `reversed
    + result` (possible missing [])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp127g0szk.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprwzg2b3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmprwzg2b3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprwzg2b3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n\
    \    long s = n - m;\n    \n    for(long i = m; i > 0; i--)\n    {\n        result\
    \ += char(r % 10);\n        r = r / 10;\n    }\n    \n    for(long i = s; i >\
    \ 0; i--)\n    {\n        result += char(r % 10);\n        r = r / 10;\n    }\n\
    \    \n    result += char(r % 10);\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9fil63qq.d(23): Error: cannot implicitly convert expression
    `r % 10L` of type `long` to `char`\n/tmp/tmp9fil63qq.d(29): Error: cannot implicitly
    convert expression `r % 10L` of type `long` to `char`\n/tmp/tmp9fil63qq.d(33):
    Error: cannot implicitly convert expression `r % 10L` of type `long` to `char`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9fil63qq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digits = digits(x);\n    long shift = shift % digits;\n\
    \    long remainder = x % digits;\n    long digit = x;\n    long carry = 0;\n\
    \    \n    while (shift > 0) {\n        digit = digit * 10 + remainder;\n    \
    \    remainder = digit % 10;\n        digit = digit / 10;\n        carry = carry\
    \ + remainder;\n        shift = shift - 1;\n    }\n    \n    if (carry > 0) {\n\
    \        result = to_string(carry) + result;\n    }\n    \n    while (shift <\
    \ digits) {\n        digit = digit / 10;\n        carry = carry + digit;\n   \
    \     shift = shift + 1;\n    }\n    \n    if (carry > 0) {\n        result =\
    \ to_string(carry) + result;\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoa2q2w7v.d(16): Error: undefined identifier `digits`\n/tmp/tmpoa2q2w7v.d(17):
    Error: variable `shift` is shadowing variable `tmpoa2q2w7v.circular_shift.shift`\n/tmp/tmpoa2q2w7v.d(31):
    Error: undefined identifier `to_string`\n/tmp/tmpoa2q2w7v.d(41): Error: undefined
    identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoa2q2w7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp__a5uz3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmp__a5uz3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp__a5uz3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        shift = digits(x);\n    }\n    \n    while (shift > 0)\n    {\n     \
    \   remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n\
    \    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"\
    79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L)\
    \ == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp435y0jqk.d(18): Error: undefined identifier `digits`\n/tmp/tmp435y0jqk.d(20):
    Error: undefined identifier `digits`\n/tmp/tmp435y0jqk.d(27): Error: undefined
    identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp435y0jqk.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += to_string(remainder);\n        shift--;\n    }\n    \n    while(shift\
    \ < 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += to_string(remainder);\n        shift++;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplgqt809_.d(23): Error: undefined identifier `to_string`\n/tmp/tmplgqt809_.d(31):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmplgqt809_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        shift = digits(x);\n    }\n    \n    while (shift > 0)\n    {\n     \
    \   remainder = x % 10;\n        x /= 10;\n        result += char(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += char(remainder);\n    }\n   \
    \ \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmskwn1p7.d(18): Error: undefined identifier `digits`\n/tmp/tmpmskwn1p7.d(20):
    Error: undefined identifier `digits`\n/tmp/tmpmskwn1p7.d(27): Error: cannot implicitly
    convert expression `remainder` of type `long` to `char`\n/tmp/tmpmskwn1p7.d(35):
    Error: cannot implicitly convert expression `remainder` of type `long` to `char`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmskwn1p7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long d = 1;\n    long shift2 = shift;\n\
    \    \n    while (n > 0)\n    {\n        long r = n % 10;\n        result += r\
    \ + d;\n        n /= 10;\n        d *= 10;\n        shift2--;\n    }\n    \n \
    \   while (shift2 > 0)\n    {\n        result += n % 10;\n        n /= 10;\n \
    \       shift2--;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n\
    \    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"\
    79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L)\
    \ == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnygw3lkx.d(23): Error: incompatible types for `(result) += (r
    + d)`: `string` and `long`\n/tmp/tmpnygw3lkx.d(31): Error: incompatible types
    for `(result) += (n % 10L)`: `string` and `long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpnygw3lkx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long carry = 0;\n    \n    while (shift\
    \ > 0)\n    {\n        digit = digit * 10 + carry;\n        carry = digit / 10;\n\
    \        digit = digit % 10;\n        \n        result += digit;\n        shift\
    \ -= 1;\n    }\n    \n    if (carry > 0)\n        result += carry;\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n  \
    \  assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"\
    12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L)\
    \ == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgj0pk4ij.d(25): Error: incompatible types for `(result) += (digit)`:
    `string` and `long`\n/tmp/tmpgj0pk4ij.d(30): Error: incompatible types for `(result)
    += (carry)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgj0pk4ij.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = n;\n    long r = shift;\n    \n\
    \    while (r > 0)\n    {\n        long t = m;\n        m = n;\n        n = t;\n\
    \        r /= 10;\n    }\n    \n    while (m != 0)\n    {\n        result += (char)\
    \ ('0' + m % 10);\n        m /= 10;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmx2d9iae.d(30): Error: C style cast illegal, use `cast(char)(\''0\''
    + m % 10)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmx2d9iae.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long remainder = 0;\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = n % 10;\n        n /= 10;\n        result +=\
    \ char(remainder);\n        shift -= 1;\n    }\n    \n    while (n > 0)\n    {\n\
    \        remainder = n % 10;\n        n /= 10;\n        result += char(remainder);\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzhsgf8zx.d(23): Error: cannot implicitly convert expression
    `remainder` of type `long` to `char`\n/tmp/tmpzhsgf8zx.d(31): Error: cannot implicitly
    convert expression `remainder` of type `long` to `char`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpzhsgf8zx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (x) {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    while (shift) {\n        remainder = shift % 10;\n        shift /=\
    \ 10;\n        result += to_string(remainder);\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzysoan3e.d(21): Error: undefined identifier `to_string`\n/tmp/tmpzysoan3e.d(27):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpzysoan3e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > numeric_limits<long>::digits)\
    \ {\n        shift = numeric_limits<long>::digits;\n    }\n    \n    while (shift\
    \ > 0) {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (shift < 0) {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift += 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5fan8rpx.d(18): Error: found `<` when expecting `)`\n/tmp/tmp5fan8rpx.d(18):
    Error: no identifier for declarator `long`\n/tmp/tmp5fan8rpx.d(18): Error: found
    `>` instead of statement\n/tmp/tmp5fan8rpx.d(22): Error: declaration expected,
    not `while`\n/tmp/tmp5fan8rpx.d(24): Error: no identifier for declarator `x`\n/tmp/tmp5fan8rpx.d(24):
    Error: declaration expected, not `/=`\n/tmp/tmp5fan8rpx.d(25): Error: no identifier
    for declarator `result`\n/tmp/tmp5fan8rpx.d(25): Error: declaration expected,
    not `+=`\n/tmp/tmp5fan8rpx.d(26): Error: no identifier for declarator `shift`\n/tmp/tmp5fan8rpx.d(26):
    Error: declaration expected, not `-=`\n/tmp/tmp5fan8rpx.d(27): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5fan8rpx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > numeric_digits(x))\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        shift -= numeric_digits(x);\n\
    \        result += to_string(remainder);\n    }\n    \n    while (shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        shift -= numeric_digits(x);\n\
    \        result += to_string(remainder);\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkexnjy9w.d(18): Error: undefined identifier `numeric_digits`\n/tmp/tmpkexnjy9w.d(22):
    Error: undefined identifier `numeric_digits`\n/tmp/tmpkexnjy9w.d(23): Error: undefined
    identifier `to_string`\n/tmp/tmpkexnjy9w.d(30): Error: undefined identifier `numeric_digits`\n/tmp/tmpkexnjy9w.d(31):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpkexnjy9w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digits = digits(x);\n    long shift = shift % digits;\n\
    \    long remainder = x % digits;\n    long digit = remainder;\n    \n    while\
    \ (shift > 0)\n    {\n        digit = digit * 10L + remainder;\n        remainder\
    \ = digit % digits;\n        shift = shift - 1;\n    }\n    \n    result += to_string(digit);\n\
    \    \n    if (shift > 0)\n    {\n        result += to_string(digits);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsshb1ywp.d(16): Error: undefined identifier `digits`\n/tmp/tmpsshb1ywp.d(17):
    Error: variable `shift` is shadowing variable `tmpsshb1ywp.circular_shift.shift`\n/tmp/tmpsshb1ywp.d(28):
    Error: undefined identifier `to_string`\n/tmp/tmpsshb1ywp.d(32): Error: undefined
    identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsshb1ywp.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = 1;\n    long shift2 = shift;\n\
    \    long carry = 0;\n    \n    while(n > 0)\n    {\n        long digit = n %\
    \ 10;\n        result += digits[digit];\n        n /= 10;\n        \n        long\
    \ digit2 = n % 10;\n        result += digits[digit2];\n        n /= 10;\n    \
    \    \n        long digit3 = n % 10;\n        result += digits[digit3];\n    \
    \    n /= 10;\n        \n        long digit4 = n % 10;\n        result += digits[digit4];\n\
    \        n /= 10;\n        \n        long digit5 = n % 10;\n        result +=\
    \ digits[digit5];\n        n /= 10;\n        \n        long digit6 = n % 10;\n\
    \        result += digits[digit6];\n        n /= 10;\n        \n        long digit7\
    \ = n % 10;\n        result += digits[digit7];\n        n /= 10;\n        \n \
    \       long digit8 = n % 10;\n        result += digits[digit8];\n        n /=\
    \ 10;\n        \n        long digit9 = n % 10;\n        result += digits[digit9];\n\
    \        n /= 10;\n        \n        long digit10 = n % 10;\n        result +=\
    \ digits[digit10];\n        n /= 10;\n        \n        long digit11 = n % 10;\n\
    \        result += digits[digit11];\n        n /= 10;\n        \n        long\
    \ digit12 = n % 10;\n        result += digits[digit12];\n        n /= 10;\n  \
    \      \n        long digit13 = n % 10;\n        result += digits[digit13];\n\
    \        n /= 10;\n        \n        long digit14 = n % 10;\n        result +=\
    \ digits[digit14];\n        n /= 10;\n        \n        long digit15 = n % 10;\n\
    \        result += digits[digit15];\n        n /= 10;\n        \n        long\
    \ digit16 = n % 10;\n        result += digits[digit16];\n        n /= 10;\n  \
    \      \n        long digit17 = n % 10;\n        result += digits[digit17];\n\
    \        n /= 10;\n        \n        long digit18 = n % 10;\n        result +=\
    \ digits[digit18];\n        n /= 10;\n        \n        long digit19 = n % 10;\n\
    \        result += digits[digit19];\n        n /= 10;\n        \n        long\
    \ digit20 = n % 10;\n        result += digits[digit20];\n        n /= 10;\n  \
    \      \n        long digit21 = n % 10;\n        result += digits[digit21];\n\
    \        n /= 10;\n        \n        long digit22 = \nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpacswxmca.d(108): Error: expression expected, not `unittest`\n/tmp/tmpacswxmca.d(109):
    Error: semicolon expected, not `{`\n/tmp/tmpacswxmca.d(118): Error: found `End
    of File` when expecting `}` following compound statement\n/tmp/tmpacswxmca.d(118):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpacswxmca.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long carry = 0;\n    long i = 0;\n    \n\
    \    while (n != 0) {\n        long digit = n % 10;\n        result += char((digit\
    \ + carry) % 10);\n        carry = digit / 10;\n        n /= 10;\n        ++i;\n\
    \    }\n    \n    if (carry != 0) {\n        result += char(carry);\n    }\n \
    \   \n    while (i < shift) {\n        result += \"0\";\n        ++i;\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf_yu2j0a.d(22): Error: cannot implicitly convert expression
    `(digit + carry) % 10L` of type `long` to `char`\n/tmp/tmpf_yu2j0a.d(29): Error:
    cannot implicitly convert expression `carry` of type `long` to `char`\n/tmp/tmpf_yu2j0a.d(33):
    Error: slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpf_yu2j0a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long remainder;\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += to_string(remainder);\n        shift--;\n    }\n    \n    while\
    \ (shift < 0)\n    {\n        remainder = digit % 10;\n        digit = digit /\
    \ 10;\n        result += to_string(remainder);\n        shift++;\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n\
    \    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpepgxosos.d(23): Error: undefined identifier `to_string`\n/tmp/tmpepgxosos.d(31):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpepgxosos.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj8n7mo6j.d(22): Error: undefined identifier `to_string`\n/tmp/tmpj8n7mo6j.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpj8n7mo6j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp__a5uz3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmp__a5uz3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp__a5uz3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digits = (int)x.digits;\n    long shift = shift % digits;\n\
    \    long remainder = x % digits;\n    \n    if (shift > digits)\n    {\n    \
    \    shift = digits;\n    }\n    \n    for(long i = shift; i > 0; i--)\n    {\n\
    \        result += digits[remainder % digits];\n        remainder = remainder\
    \ / digits;\n    }\n    \n    result += digits[remainder];\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi9pfi2g1.d(16): Error: C style cast illegal, use `cast(int)x.digits`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi9pfi2g1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp__a5uz3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmp__a5uz3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp__a5uz3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long carry = 0;\n    \n    while (shift\
    \ > 0)\n    {\n        long digit = n % 10;\n        result += digits[digit];\n\
    \        n /= 10;\n        shift -= 1;\n    }\n    \n    if (n != 0)\n    {\n\
    \        result += digits[n % 10];\n    }\n    \n    if (carry > 0)\n    {\n \
    \       result += digits[carry];\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg6s8n7s5.d(22): Error: undefined identifier `digits`, did you
    mean variable `digit`?\n/tmp/tmpg6s8n7s5.d(29): Error: undefined identifier `digits`\n/tmp/tmpg6s8n7s5.d(34):
    Error: undefined identifier `digits`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpg6s8n7s5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprwzg2b3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmprwzg2b3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprwzg2b3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   while(shift < 0)\n    {\n        remainder = digit % 10;\n        digit =\
    \ digit / 10;\n        result += to_string(remainder);\n        shift += 1;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprprjsshk.d(23): Error: undefined identifier `to_string`\n/tmp/tmprprjsshk.d(31):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprprjsshk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long carry = 0;\n    long i = 0;\n    \n\
    \    while (i < shift) {\n        long digit = n % 10;\n        result += digits[digit];\n\
    \        carry = digit + carry;\n        n /= 10;\n        ++i;\n    }\n    \n\
    \    if (carry != 0) {\n        result += digits[carry];\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7lmgrxnx.d(22): Error: undefined identifier `digits`, did you
    mean variable `digit`?\n/tmp/tmp7lmgrxnx.d(29): Error: undefined identifier `digits`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7lmgrxnx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += char(remainder);\n        shift -= 1;\n    }\n    \n    while(shift\
    \ < 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += char(remainder);\n        shift += 1;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbrmp8byc.d(23): Error: cannot implicitly convert expression
    `remainder` of type `long` to `char`\n/tmp/tmpbrmp8byc.d(31): Error: cannot implicitly
    convert expression `remainder` of type `long` to `char`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpbrmp8byc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (x) {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    if (shift > result.length()) {\n        string reversed = result;\n\
    \        reversed.reverse();\n        result = reversed;\n    }\n    \n    result\
    \ += to_string(shift);\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvi7rgn6u.d(21): Error: undefined identifier `to_string`\n/tmp/tmpvi7rgn6u.d(24):
    Error: no property `length` for type `string`\n/tmp/tmpvi7rgn6u.d(26): Error:
    template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`,
    candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\n/tmp/tmpvi7rgn6u.d(30): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvi7rgn6u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (x) {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    if (shift > result.length()) {\n        shift %= result.length();\n\
    \    }\n    \n    result += to_string(shift);\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpohd_gwlh.d(21): Error: undefined identifier `to_string`\n/tmp/tmpohd_gwlh.d(24):
    Error: no property `length` for type `string`\n/tmp/tmpohd_gwlh.d(25): Error:
    no property `length` for type `string`\n/tmp/tmpohd_gwlh.d(28): Error: undefined
    identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpohd_gwlh.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n\
    \    long s = m / n;\n    long t = m % n;\n    \n    while(s > 0)\n    {\n   \
    \     result += to_string(r % 10);\n        r = r / 10;\n        s = s - 1;\n\
    \    }\n    \n    while(t > 0)\n    {\n        result += to_string(r % 10);\n\
    \        r = r / 10;\n        t = t - 1;\n    }\n    \n    result += to_string(r\
    \ % 10);\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy_llkb83.d(24): Error: undefined identifier `to_string`\n/tmp/tmpy_llkb83.d(31):
    Error: undefined identifier `to_string`\n/tmp/tmpy_llkb83.d(36): Error: undefined
    identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_llkb83.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long d = 1;\n    long shift2 = shift;\n\
    \    \n    while (shift2 > 0)\n    {\n        n /= 10;\n        d *= 10;\n   \
    \     shift2 -= 1;\n    }\n    \n    while (n > 0)\n    {\n        result += (char)(n\
    \ % d);\n        n /= d;\n    }\n    \n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\"\
    );\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) ==\
    \ \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph62t28ty.d(29): Error: C style cast illegal, use `cast(char)(n
    % d)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph62t28ty.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        remainder = x % 10;\n        x /= 10;\n        shift -= digits(x);\n\
    \    }\n    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n    \
    \    x /= 10;\n        shift -= 1;\n        result += to_string(remainder);\n\
    \    }\n    \n    if (remainder > 0)\n        result += to_string(remainder);\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpavhel3yn.d(18): Error: undefined identifier `digits`\n/tmp/tmpavhel3yn.d(22):
    Error: undefined identifier `digits`\n/tmp/tmpavhel3yn.d(30): Error: undefined
    identifier `to_string`\n/tmp/tmpavhel3yn.d(34): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpavhel3yn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digits = digits(x);\n    long shift = shift % digits;\n\
    \    long remainder = x % digits;\n    long digit = remainder % 10;\n    long\
    \ shift = shift % 10;\n    long digit2 = remainder / 10;\n    long digit3 = remainder\
    \ / 100;\n    long digit4 = remainder / 1000;\n    long digit5 = remainder / 100000;\n\
    \    long digit6 = remainder / 1000000;\n    long digit7 = remainder / 10000000;\n\
    \    long digit8 = remainder / 1000000000;\n    long digit9 = remainder / 10000000000;\n\
    \    long digit10 = remainder / 100000000000;\n    long digit11 = remainder /\
    \ 100000000000000;\n    long digit12 = remainder / 1000000000000000;\n    long\
    \ digit13 = remainder / 100000000000000000;\n    long digit14 = remainder / 100000000000000000;\n\
    \    long digit15 = remainder / 100000000000000000;\n    long digit16 = remainder\
    \ / 100000000000000000;\n    long digit17 = remainder / 100000000000000000;\n\
    \    long digit18 = remainder / 100000000000000000;\n    long digit19 = remainder\
    \ / 100000000000000000;\n    long digit20 = remainder / 100000000000000000;\n\
    \    long digit21 = remainder / 100000000000000000;\n    long digit22 = remainder\
    \ / 100000000000000000;\n    long digit23 = remainder / 100000000000000000;\n\
    \    long digit24 = remainder / 100000000000000000;\n    long digit25 = remainder\
    \ / 100000000000000000;\n    long digit26 = remainder / 100000000000000000;\n\
    \    long digit27 = remainder / 100000000000000000;\n    long digit28 = remainder\
    \ / 100000000000000000;\n    long digit29 = remainder / 100000000000000000;\n\
    \    long digit30 = remainder / 100000000000000000;\n    long digit31 = remainder\
    \ / 100000000000000000;\n    long digit32 = remainder / 100000000000000000;\n\
    \    long digit33 = remainder / 100000000000000000;\n    long digit34 = remainder\
    \ / 100000000000000000;\n    long digit35 = remainder / 100000000000000000;\n\
    \    long digit36 = remainder / 100000000000000000;\n    long digit37 = remainder\
    \ / 100000000000000000;\n    long digit38 = remainder / 100000000000000000;\n\
    \    long digit39 = remainder / 10000000000000000\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6fa3frn3.d(59): Error: semicolon expected, not `unittest`\n/tmp/tmp6fa3frn3.d(59):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6fa3frn3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = (x % 10);\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder\
    \ = (x % 10);\n        x /= 10;\n        result += to_string(remainder);\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphg5i7_y9.d(22): Error: undefined identifier `to_string`\n/tmp/tmphg5i7_y9.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmphg5i7_y9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   while(shift < 0)\n    {\n        remainder = digit % 10;\n        digit =\
    \ digit / 10;\n        result += to_string(remainder);\n        shift += 1;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprprjsshk.d(23): Error: undefined identifier `to_string`\n/tmp/tmprprjsshk.d(31):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprprjsshk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = 1;\n    long tmp = 0;\n    \n\
    \    while (n > 0)\n    {\n        tmp = (n % 10);\n        result += tmp;\n \
    \       n = n / 10;\n    }\n    \n    long shift2 = shift;\n    \n    while (shift2\
    \ > 0)\n    {\n        tmp = (n % 10);\n        result += tmp;\n        n = n\
    \ / 10;\n        shift2--;\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjvwxnka_.d(23): Error: incompatible types for `(result) += (tmp)`:
    `string` and `long`\n/tmp/tmpjvwxnka_.d(32): Error: incompatible types for `(result)
    += (tmp)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjvwxnka_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n >>\
    \ m;\n    long s = n - (r<<m);\n    string digits = to_string(r);\n    string\
    \ digits_reversed = to_string(s);\n    result += digits;\n    result += digits_reversed;\n\
    \    return result;\n}\n/*\nReturn the number of digits in the integer x.\n  \
    \  >>> count_digits(12L)\n    2\n    >>> count_digits(12L)\n    2\n    \n*/\n\
    long count_digits(long x) \n{\n    long n = 0;\n    while (x > 0) {\n        ++n;\n\
    \        x /= 10;\n    }\n    return n;\n}\n/*\nReturn the number of digits in\
    \ the integer x, including leading zeros.\n    >>> count_digits(12L)\n    2\n\
    \    >>> count_digits(12L)\n    2\n    \n*/\nlong count_digits(long x, long base)\
    \ \n{\n    long n = 0;\n    while (x > 0) {\n        ++n;\n        x /= base;\n\
    \    }\n    return n;\n}\n/*\nReturn the number of digits in the integer x, including\
    \ leading zeros.\n    >>> count_digits(12L, 10)\n    2\n    >>> count_digits(12L,\
    \ 10)\n    2\n    \n*/\nlong count_digits(long x, long base, long radix) \n{\n\
    \    long n = 0;\n    while (x > 0) {\n        ++n;\n        x /= radix;\n   \
    \ }\n    return n;\n}\n/*\nReturn the number of digits in the integer x, including\
    \ leading zeros.\n    >>> count_digits(12L, 10)\n    2\n    >>> count_digits(12L,\
    \ 10)\n    2\n    \n*/\nlong count_digits(long x, long radix) \n{\n    return\
    \ count_digits(x, radix, 10);\n}\n/*\nReturn the number of digits in the integer\
    \ x, including leading zeros.\n    >>> count_digits(12L, 10)\n    2\n    >>> count_digits(12L,\
    \ 10)\n    2\n    \n*/\nlong count_digits(long x) \n{\n    return count_digits(x,\
    \ 10);\n}\n/*\nReturn the number of digits in the integer x, including leading\
    \ zeros.\n    >>> count_digits(12L)\n    2\n    >>> count_digits(12L)\n    2\n\
    \    \n*/\nlong count_digits(long x, long radix) \n{\n    return count_digits(x,\
    \ radix, 10);\n}\n/*\nReturn the number of digits in the integer x, including\
    \ leading zeros.\n    >>> count_digits(12L)\n    2\n    >>> count_digits(12L)\n\
    \    2\n    \n*/\nlong count_digits(long x) \n{\n    return count_digits(x, 10);\n\
    }\n/*\nReturn the number of digits in the \nunittest\n{\n    alias candidate =\
    \ circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwm78tl7v.d(125): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwm78tl7v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = n;\n    long r = 1;\n    long\
    \ digit;\n    \n    while(m > 0)\n    {\n        digit = m % 10;\n        result\
    \ += digit;\n        m /= 10;\n    }\n    \n    while(shift > 0)\n    {\n    \
    \    digit = n % 10;\n        result += digit;\n        n /= 10;\n        shift\
    \ -= 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmnkrbfyu.d(24): Error: incompatible types for `(result) += (digit)`:
    `string` and `long`\n/tmp/tmpmnkrbfyu.d(31): Error: incompatible types for `(result)
    += (digit)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnkrbfyu.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n\
    \        {\n            result += to_string(-x % 10);\n            x /= 10;\n\
    \        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1lqzpc9s.d(22): Error: undefined identifier `to_string`\n/tmp/tmp1lqzpc9s.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1lqzpc9s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = 1;\n    long carry = 0;\n    \n\
    \    while (shift > 0)\n    {\n        long digit = n % m;\n        result +=\
    \ (char) digit;\n        n /= m;\n        shift -= 1;\n        m /= 10;\n    }\n\
    \    \n    if (n != 0)\n    {\n        result += (char) n;\n    }\n    \n    if\
    \ (carry > 0)\n    {\n        result += (char) carry;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplhscmwfp.d(23): Error: C style cast illegal, use `cast(char)digit`\n/tmp/tmplhscmwfp.d(31):
    Error: C style cast illegal, use `cast(char)n`\n/tmp/tmplhscmwfp.d(36): Error:
    C style cast illegal, use `cast(char)carry`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmplhscmwfp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(shift >\
    \ 0)\n        {\n            remainder = x % 10;\n            x /= 10;\n     \
    \       result += to_string(remainder);\n            shift -= 1;\n        }\n\
    \        \n        result += \"0\";\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8ihax3u3.d(22): Error: undefined identifier `to_string`\n/tmp/tmp8ihax3u3.d(32):
    Error: undefined identifier `to_string`\n/tmp/tmp8ihax3u3.d(36): Error: slice
    `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ihax3u3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = 1;\n    long carry = 0;\n    \n\
    \    while (n > 0)\n    {\n        long digit = n % 10;\n        result += digits[digit];\n\
    \        n /= 10;\n        m += digit;\n        carry = m / 10;\n        m %=\
    \ 10;\n    }\n    \n    if (shift > result.length())\n    {\n        shift = result.length();\n\
    \    }\n    \n    string reversed = \"\";\n    \n    for (long i = result.length()\
    \ - 1; i >= shift; i--)\n    {\n        reversed += digits[result[i]];\n    }\n\
    \    \n    if (carry)\n    {\n        reversed += digits[carry];\n    }\n    \n\
    \    return reversed;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbdyjz4od.d(23): Error: undefined identifier `digits`, did you
    mean variable `digit`?\n/tmp/tmpbdyjz4od.d(30): Error: no property `length` for
    type `string`\n/tmp/tmpbdyjz4od.d(32): Error: no property `length` for type `string`\n/tmp/tmpbdyjz4od.d(37):
    Error: no property `length` for type `string`\n/tmp/tmpbdyjz4od.d(39): Error:
    undefined identifier `digits`\n/tmp/tmpbdyjz4od.d(44): Error: undefined identifier
    `digits`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbdyjz4od.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp__a5uz3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmp__a5uz3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp__a5uz3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long d = shift;\n    \n    while (d > 0)\n\
    \    {\n        long r = n % 10;\n        result += char(r);\n        n /= 10;\n\
    \        d -= 1;\n    }\n    \n    while (n > 0)\n    {\n        result += char(n\
    \ % 10);\n        n /= 10;\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwcnvk8q6.d(22): Error: cannot implicitly convert expression
    `r` of type `long` to `char`\n/tmp/tmpwcnvk8q6.d(29): Error: cannot implicitly
    convert expression `n % 10L` of type `long` to `char`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpwcnvk8q6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = 1;\n    long shift2 = shift;\n\
    \    \n    while (n > 0)\n    {\n        long digit = n % 10;\n        result\
    \ += digit;\n        n /= 10;\n        m += shift2;\n        shift2 -= 1;\n  \
    \  }\n    \n    while (m > 0)\n    {\n        result += \"0\";\n        m -= 1;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuyb2pk_k.d(23): Error: incompatible types for `(result) += (digit)`:
    `string` and `long`\n/tmp/tmpuyb2pk_k.d(31): Error: slice `result` is not mutable\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuyb2pk_k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n\
    \    long s = m / r;\n    long t = m % r;\n    \n    for(long i = 0; i < s; i++)\n\
    \    {\n        result += x;\n    }\n    \n    for(long i = 0; i < t; i++)\n \
    \   {\n        result -= x;\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp85_zou5c.d(24): Error: incompatible types for `(result) += (x)`:
    `string` and `long`\n/tmp/tmp85_zou5c.d(29): Error: incompatible types for `(result)
    -= (x)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp85_zou5c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = n % 10;\n        n /= 10;\n        result +=\
    \ remainder;\n        shift--;\n    }\n    \n    if(n < 0)\n    {\n        result\
    \ += n % 10;\n        n /= 10;\n        while(n > 0)\n        {\n            result\
    \ += n % 10;\n            n /= 10;\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpna5_zr5_.d(23): Error: incompatible types for `(result) += (remainder)`:
    `string` and `long`\n/tmp/tmpna5_zr5_.d(29): Error: incompatible types for `(result)
    += (n % 10L)`: `string` and `long`\n/tmp/tmpna5_zr5_.d(33): Error: incompatible
    types for `(result) += (n % 10L)`: `string` and `long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpna5_zr5_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n\
    \    long s = m / r;\n    long t = m % r;\n    \n    for(long i = 0; i < s; i++)\n\
    \    {\n        result += to_string(t);\n        t += r;\n    }\n    \n    for(long\
    \ i = 0; i < r; i++)\n    {\n        result += to_string(n);\n        n -= r;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp49_5ogzi.d(24): Error: undefined identifier `to_string`\n/tmp/tmp49_5ogzi.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp49_5ogzi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digits = (int)std::log10(x);\n    long shift = std::abs(shift);\n\
    \    long shift2 = shift / 2;\n    long shift3 = shift - shift2;\n    long shift4\
    \ = shift - shift3;\n    long shift5 = shift - shift4;\n    long shift6 = shift\
    \ - shift5;\n    long shift7 = shift - shift6;\n    long shift8 = shift - shift7;\n\
    \    long shift9 = shift - shift8;\n    long shift10 = shift - shift9;\n    long\
    \ shift11 = shift - shift10;\n    long shift12 = shift - shift11;\n    long shift13\
    \ = shift - shift12;\n    long shift14 = shift - shift13;\n    long shift15 =\
    \ shift - shift14;\n    long shift16 = shift - shift15;\n    long shift17 = shift\
    \ - shift16;\n    long shift18 = shift - shift17;\n    long shift19 = shift -\
    \ shift18;\n    long shift20 = shift - shift19;\n    long shift21 = shift - shift20;\n\
    \    long shift22 = shift - shift21;\n    long shift23 = shift - shift22;\n  \
    \  long shift24 = shift - shift23;\n    long shift25 = shift - shift24;\n    long\
    \ shift26 = shift - shift25;\n    long shift27 = shift - shift26;\n    long shift28\
    \ = shift - shift27;\n    long shift29 = shift - shift28;\n    long shift30 =\
    \ shift - shift29;\n    long shift31 = shift - shift30;\n    long shift32 = shift\
    \ - shift31;\n    long shift33 = shift - shift32;\n    long shift34 = shift -\
    \ shift33;\n    long shift35 = shift - shift34;\n    long shift36 = shift - shift35;\n\
    \    long shift37 = shift - shift36;\n    long shift38 = shift - shift37;\n  \
    \  long shift39 = shift - shift38;\n    long shift40 = shift - shift39;\n    long\
    \ shift41 = shift - shift40;\n    long shift42 = shift - shift41;\n    long shift43\
    \ = shift - shift42;\n    long shift44 = shift - shift43;\n    long shift45 =\
    \ shift - shift44;\n    long shift46 = shift - shift45;\n    long shift47 = shift\
    \ - shift46;\n    long shift48 = shift - shift47;\n    long \nunittest\n{\n  \
    \  alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\"\
    );\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) ==\
    \ \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjez7f35r.d(16): Error: C style cast illegal, use `cast(int)std`\n/tmp/tmpjez7f35r.d(16):
    Error: semicolon expected, not `:`\n/tmp/tmpjez7f35r.d(16): Error: found `:` instead
    of statement\n/tmp/tmpjez7f35r.d(17): Error: semicolon expected, not `:`\n/tmp/tmpjez7f35r.d(17):
    Error: found `:` instead of statement\n/tmp/tmpjez7f35r.d(66): Error: no identifier
    for declarator `long`\n/tmp/tmpjez7f35r.d(66): Error: found `unittest` instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjez7f35r.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long remainder;\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = n % 10;\n        n /= 10;\n        result +=\
    \ remainder;\n        shift--;\n    }\n    \n    while (n > 0)\n    {\n      \
    \  remainder = n % 10;\n        n /= 10;\n        result += remainder;\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbbn2pn88.d(23): Error: incompatible types for `(result) += (remainder)`:
    `string` and `long`\n/tmp/tmpbbn2pn88.d(31): Error: incompatible types for `(result)
    += (remainder)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpbbn2pn88.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > 64) \n    {\n   \
    \     shift = 64;\n    }\n    \n    remainder = (x % shift);\n    \n    while\
    \ (shift > 0)\n    {\n        result += (char)((remainder % 10) + '0');\n    \
    \    remainder = (remainder / 10);\n        shift--;\n    }\n    \n    if (remainder\
    \ > 0)\n    {\n        result += (char)((remainder % 10) + '0');\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n\
    \    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe39f_tl1.d(27): Error: C style cast illegal, use `cast(char)(remainder
    % 10 + \''0\'')`\n/tmp/tmpe39f_tl1.d(34): Error: C style cast illegal, use `cast(char)(remainder
    % 10 + \''0\'')`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe39f_tl1.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        remainder = x;\n        x = digits(x);\n        shift = digits(shift);\n\
    \    }\n    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n    \
    \    x /= 10;\n        x <<= 1;\n        x |= remainder;\n        shift -= 1;\n\
    \    }\n    \n    while (x != 0)\n    {\n        remainder = x % 10;\n       \
    \ x /= 10;\n        result += remainder;\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptq94h1fl.d(18): Error: undefined identifier `digits`\n/tmp/tmptq94h1fl.d(21):
    Error: undefined identifier `digits`\n/tmp/tmptq94h1fl.d(22): Error: undefined
    identifier `digits`\n/tmp/tmptq94h1fl.d(38): Error: incompatible types for `(result)
    += (remainder)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmptq94h1fl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n\
    \    long s = m / r;\n    long t = m % r;\n    \n    for(long i = 0; i < s; ++i)\n\
    \    {\n        result += char(x);\n        x /= 10;\n    }\n    \n    for(long\
    \ i = 0; i < t; ++i)\n    {\n        result += (char)(x * 10);\n        x %= 10;\n\
    \    }\n    \n    result += char(x);\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9ip8ubtf.d(30): Error: C style cast illegal, use `cast(char)(x
    * 10)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ip8ubtf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long digits = 1;\n    while(shift >\
    \ digits) {\n        shift -= digits;\n        result += digit;\n        digit\
    \ = x % 10;\n        digits++;\n    }\n    while(shift < digits) {\n        result\
    \ += digit;\n        digit = x % 10;\n        digits--;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgzwnutev.d(20): Error: incompatible types for `(result) += (digit)`:
    `string` and `long`\n/tmp/tmpgzwnutev.d(25): Error: incompatible types for `(result)
    += (digit)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgzwnutev.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n\
    \        {\n            result += to_string(-x);\n            x /= 10;\n     \
    \   }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplqyy2owh.d(22): Error: undefined identifier `to_string`\n/tmp/tmplqyy2owh.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmplqyy2owh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n\
    \        {\n            result += to_string(-x);\n            x /= 10;\n     \
    \   }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplqyy2owh.d(22): Error: undefined identifier `to_string`\n/tmp/tmplqyy2owh.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmplqyy2owh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digits = x;\n    long shift = shift % digits;\n   \
    \ long remain = digits - shift;\n    \n    while (remain > 0) {\n        long\
    \ temp = digits;\n        digits = remain;\n        remain = temp;\n        result\
    \ += to_string(digits);\n    }\n    \n    if (shift > digits) {\n        string\
    \ reversed = reverse(result.c_str());\n        result += reversed.substr(shift,\
    \ reversed.length() - shift);\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnevavr87.d(17): Error: variable `shift` is shadowing variable
    `tmpnevavr87.circular_shift.shift`\n/tmp/tmpnevavr87.d(24): Error: undefined identifier
    `to_string`\n/tmp/tmpnevavr87.d(28): Error: no property `c_str` for type `string`\n/tmp/tmpnevavr87.d(29):
    Error: no property `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpnevavr87.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj8n7mo6j.d(22): Error: undefined identifier `to_string`\n/tmp/tmpj8n7mo6j.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpj8n7mo6j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = shift\
    \ / n;\n    \n    for(long i = r; i > 0; i--)\n    {\n        result += to_string(n);\n\
    \        n = m % n;\n        m = m / n;\n    }\n    \n    result += to_string(n);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n\
    \    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphyed7y_l.d(22): Error: undefined identifier `to_string`\n/tmp/tmphyed7y_l.d(27):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmphyed7y_l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long carry = 0;\n    \n    while(shift\
    \ > 0)\n    {\n        carry = n % 10;\n        n /= 10;\n        result += to_string(carry);\n\
    \        shift -= 1;\n    }\n    \n    if(n == 0)\n    {\n        result += to_string(carry);\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0i1zw_zg.d(23): Error: undefined identifier `to_string`\n/tmp/tmp0i1zw_zg.d(29):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0i1zw_zg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digits = (int)std::log10(x);\n    long shiftDigits\
    \ = (int)std::log10(shift);\n    long shiftRemainder = (shiftDigits - digits);\n\
    \    long remainder;\n    long digit;\n    \n    if (shiftRemainder == 0)\n  \
    \  {\n        digits = shiftDigits;\n        shiftRemainder = 1;\n    }\n    \n\
    \    for (long i = 0; i < digits; i++)\n    {\n        digit = (x % 10);\n   \
    \     x /= 10;\n        result += char(digit);\n    }\n    \n    for (long i =\
    \ 0; i < shiftRemainder; i++)\n    {\n        digit = (x % 10);\n        x /=\
    \ 10;\n        result += char(digit);\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsyealzc3.d(16): Error: C style cast illegal, use `cast(int)std`\n/tmp/tmpsyealzc3.d(16):
    Error: semicolon expected, not `:`\n/tmp/tmpsyealzc3.d(16): Error: found `:` instead
    of statement\n/tmp/tmpsyealzc3.d(17): Error: C style cast illegal, use `cast(int)std`\n/tmp/tmpsyealzc3.d(17):
    Error: semicolon expected, not `:`\n/tmp/tmpsyealzc3.d(17): Error: found `:` instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsyealzc3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprwzg2b3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmprwzg2b3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprwzg2b3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj8n7mo6j.d(22): Error: undefined identifier `to_string`\n/tmp/tmpj8n7mo6j.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpj8n7mo6j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = shift\
    \ / n;\n    \n    for(long i = 0; i < r; ++i)\n    {\n        result += to_string(n);\n\
    \        n /= 10;\n    }\n    \n    for(long i = 0; i < m; ++i)\n    {\n     \
    \   result += to_string(n);\n        n /= 10;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwwqjd8c_.d(22): Error: undefined identifier `to_string`\n/tmp/tmpwwqjd8c_.d(28):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpwwqjd8c_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        shift = digits(x);\n    }\n    \n    while (shift > 0)\n    {\n     \
    \   remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift--;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n\
    \    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"\
    79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L)\
    \ == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp453xv0ux.d(18): Error: undefined identifier `digits`\n/tmp/tmp453xv0ux.d(20):
    Error: undefined identifier `digits`\n/tmp/tmp453xv0ux.d(27): Error: undefined
    identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp453xv0ux.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (x) {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    if (shift > result.length())\n        result = to_string(result.length()\
    \ - shift) + result;\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptio3bpan.d(21): Error: undefined identifier `to_string`\n/tmp/tmptio3bpan.d(24):
    Error: no property `length` for type `string`\n/tmp/tmptio3bpan.d(25): Error:
    undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptio3bpan.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long carry = 0;\n    \n    while (shift\
    \ > 0)\n    {\n        digit = digit*10 + carry;\n        carry = (digit/10) %\
    \ 10;\n        digit = digit%10;\n        shift = shift-1;\n    }\n    \n    if\
    \ (carry)\n    {\n        result += (char)('0' + carry);\n    }\n    \n    while\
    \ (shift > 0)\n    {\n        digit = digit*10 + carry;\n        carry = (digit/10)\
    \ % 10;\n        digit = digit%10;\n        shift = shift-1;\n    }\n    \n  \
    \  result += digit;\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvavfe3jl.d(29): Error: C style cast illegal, use `cast(char)(\''0\''
    + carry)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvavfe3jl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp__a5uz3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmp__a5uz3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp__a5uz3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = 1;\n    while(m <= shift)\n  \
    \  {\n        n += m;\n        m <<= 1;\n    }\n    while(n >= 1)\n    {\n   \
    \     result += n % 10;\n        n /= 10;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdouih1g0.d(25): Error: incompatible types for `(result) += (n
    % 10L)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdouih1g0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n\
    \    long s = m / r;\n    long t = x / r;\n    \n    while(s > 0)\n    {\n   \
    \     result = to_string(s) + result;\n        s -= 1;\n    }\n    \n    while(t\
    \ > 0)\n    {\n        result = to_string(t - 1) + result;\n        t -= 1;\n\
    \    }\n    \n    if(result != \"\")\n    {\n        result = to_string(n - r)\
    \ + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzr78g6uv.d(24): Error: undefined identifier `to_string`\n/tmp/tmpzr78g6uv.d(30):
    Error: undefined identifier `to_string`\n/tmp/tmpzr78g6uv.d(36): Error: undefined
    identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzr78g6uv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        shift = digits(x);\n    }\n    \n    while (shift > 0)\n    {\n     \
    \   remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift--;\n    }\n    \n    while (shift < digits(x))\n    {\n       \
    \ remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift++;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n\
    \    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"\
    79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L)\
    \ == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9tiiq10_.d(18): Error: undefined identifier `digits`\n/tmp/tmp9tiiq10_.d(20):
    Error: undefined identifier `digits`\n/tmp/tmp9tiiq10_.d(27): Error: undefined
    identifier `to_string`\n/tmp/tmp9tiiq10_.d(31): Error: undefined identifier `digits`\n/tmp/tmp9tiiq10_.d(35):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp9tiiq10_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp__a5uz3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmp__a5uz3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp__a5uz3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = 1;\n    long i = 0;\n    \n  \
    \  while (n != 0) {\n        long d = n % 10;\n        result += to_string(m);\n\
    \        m += d;\n        n /= 10;\n        i++;\n    }\n    \n    if (shift >\
    \ i) {\n        string reversed = \"\";\n        \n        while (i < shift) {\n\
    \            reversed = to_string(reversed) + to_string(i);\n            i++;\n\
    \        }\n        \n        return reversed;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxja6rfwo.d(22): Error: undefined identifier `to_string`\n/tmp/tmpxja6rfwo.d(32):
    Error: undefined identifier `to_string`\n/tmp/tmpxja6rfwo.d(32): Error: undefined
    identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxja6rfwo.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digits = x;\n    long remainder = x % 10;\n    \n \
    \   while(shift > digits) {\n        shift -= digits;\n        result += remainder;\n\
    \        digits = x / 10;\n        remainder = x % 10;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        result += remainder;\n        shift -= digits;\n      \
    \  digits = x / 10;\n        remainder = x % 10;\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,c |>\n<| c |>\nI like your solution. Very\
    \ elegant. Thanks!\n<|/ c |>\n<| c |>\nI like your solution. Very elegant. Thanks!\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt8cf2638.d(36): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt8cf2638.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        remainder = x;\n        shift = 0;\n    }\n    else\n    {\n        remainder\
    \ = x % 10;\n        shift = shift % digits(x);\n    }\n    \n    while (shift\
    \ > 0)\n    {\n        result += remainder;\n        remainder = remainder / 10;\n\
    \        shift = shift / 10;\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp861e27qz.d(18): Error: undefined identifier `digits`\n/tmp/tmp861e27qz.d(26):
    Error: undefined identifier `digits`\n/tmp/tmp861e27qz.d(31): Error: incompatible
    types for `(result) += (remainder)`: `string` and `long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp861e27qz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = n % 10;\n        n /= 10;\n        result +=\
    \ to_string(remainder);\n        shift -= 1;\n    }\n    \n    while(n > 0)\n\
    \    {\n        remainder = n % 10;\n        n /= 10;\n        result += to_string(remainder);\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcq7bwiqj.d(23): Error: undefined identifier `to_string`\n/tmp/tmpcq7bwiqj.d(31):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpcq7bwiqj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj8n7mo6j.d(22): Error: undefined identifier `to_string`\n/tmp/tmpj8n7mo6j.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpj8n7mo6j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n\
    \        {\n            result += to_string(-x);\n            x /= 10;\n     \
    \   }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplqyy2owh.d(22): Error: undefined identifier `to_string`\n/tmp/tmplqyy2owh.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmplqyy2owh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n\
    \    long s = m / r;\n    long t = m % r;\n    \n    for(long i = 0; i < s; ++i)\n\
    \    {\n        result += char(x);\n        x = x >> 1;\n    }\n    \n    for(long\
    \ i = 0; i < t; ++i)\n    {\n        result += char(x);\n        x = x << 1;\n\
    \    }\n    \n    result += char(x);\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3dsauhv_.d(24): Error: cannot implicitly convert expression
    `x` of type `long` to `char`\n/tmp/tmp3dsauhv_.d(30): Error: cannot implicitly
    convert expression `x` of type `long` to `char`\n/tmp/tmp3dsauhv_.d(34): Error:
    cannot implicitly convert expression `x` of type `long` to `char`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3dsauhv_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n\
    \        {\n            result += to_string(-x % 10);\n            x /= 10;\n\
    \        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1lqzpc9s.d(22): Error: undefined identifier `to_string`\n/tmp/tmp1lqzpc9s.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1lqzpc9s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n\
    \    long s = n - m;\n    \n    for(long i = 0; i < s; ++i)\n        result +=\
    \ char(r % 10);\n    \n    for(long i = 0; i < m; ++i)\n        result += char(r\
    \ / 10);\n    \n    for(long i = 0; i < shift; ++i)\n        result += char(r\
    \ % 10);\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphl03d563.d(22): Error: cannot implicitly convert expression
    `r % 10L` of type `long` to `char`\n/tmp/tmphl03d563.d(25): Error: cannot implicitly
    convert expression `r / 10L` of type `long` to `char`\n/tmp/tmphl03d563.d(28):
    Error: cannot implicitly convert expression `r % 10L` of type `long` to `char`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphl03d563.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long remainder;\n    \n    if (shift >\
    \ LONG_MAX)\n        shift = LONG_MAX;\n    \n    while (shift > 0)\n    {\n \
    \       remainder = n % 10;\n        n /= 10;\n        result += char(remainder);\n\
    \        shift--;\n    }\n    \n    while (n > 0)\n    {\n        remainder =\
    \ n % 10;\n        n /= 10;\n        result += char(remainder);\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n\
    \    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpibijt7a2.d(19): Error: undefined identifier `LONG_MAX`\n/tmp/tmpibijt7a2.d(20):
    Error: undefined identifier `LONG_MAX`\n/tmp/tmpibijt7a2.d(26): Error: cannot
    implicitly convert expression `remainder` of type `long` to `char`\n/tmp/tmpibijt7a2.d(34):
    Error: cannot implicitly convert expression `remainder` of type `long` to `char`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpibijt7a2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = (x % 10);\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder\
    \ = (x % 10);\n        x /= 10;\n        result += to_string(remainder);\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphg5i7_y9.d(22): Error: undefined identifier `to_string`\n/tmp/tmphg5i7_y9.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmphg5i7_y9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > __digits__) \n  \
    \  {\n        shift = __digits__ - shift;\n    }\n    \n    remainder = x % 10;\n\
    \    x /= 10;\n    \n    while (x != 0)\n    {\n        result += __digits__[__digits__.find_first_of(remainder,\
    \ shift)];\n        shift -= __digits__.find_first_of(remainder, shift);\n   \
    \     remainder = x % 10;\n        x /= 10;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcdqs9ygi.d(18): Error: undefined identifier `__digits__`\n/tmp/tmpcdqs9ygi.d(20):
    Error: undefined identifier `__digits__`\n/tmp/tmpcdqs9ygi.d(28): Error: undefined
    identifier `__digits__`\n/tmp/tmpcdqs9ygi.d(29): Error: undefined identifier `__digits__`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdqs9ygi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long carry = 0;\n    \n    while (shift\
    \ > 0)\n    {\n        long digit = n % 10;\n        result += digits[digit];\n\
    \        n /= 10;\n        shift -= 1;\n    }\n    \n    if (n != 0)\n    {\n\
    \        long digit = n % 10;\n        result += digits[digit];\n    }\n    \n\
    \    if (carry > 0)\n    {\n        result += \"1\";\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprmkywi1k.d(22): Error: undefined identifier `digits`, did you
    mean variable `digit`?\n/tmp/tmprmkywi1k.d(30): Error: undefined identifier `digits`,
    did you mean variable `digit`?\n/tmp/tmprmkywi1k.d(35): Error: slice `result`
    is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprmkywi1k.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprwzg2b3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmprwzg2b3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprwzg2b3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % 10;\n    long r = shift\
    \ / 10;\n    \n    for(long i = 0; i < r; i++)\n    {\n        result += to_string(n%10);\n\
    \        n = n/10;\n    }\n    \n    result += to_string(n%10);\n    \n    for(long\
    \ i = 0; i < m; i++)\n    {\n        result += to_string(n%10);\n        n = n/10;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpionc45su.d(22): Error: undefined identifier `to_string`\n/tmp/tmpionc45su.d(26):
    Error: undefined identifier `to_string`\n/tmp/tmpionc45su.d(30): Error: undefined
    identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpionc45su.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long remainder;\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = n % 10;\n        n /= 10;\n        result +=\
    \ to_string(remainder);\n        shift -= 1;\n    }\n    \n    while (n > 0)\n\
    \    {\n        remainder = n % 10;\n        n /= 10;\n        result += to_string(remainder);\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkkna263s.d(23): Error: undefined identifier `to_string`\n/tmp/tmpkkna263s.d(31):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpkkna263s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (x) {\n        remainder\
    \ = x%10;\n        result += to_string(remainder);\n        x /= 10;\n    }\n\
    \    \n    if (shift > result.length())\n        return result + to_string(0);\n\
    \    \n    string reversed = result;\n    reversed.reverse();\n    \n    result\
    \ += reversed.substr(0, shift);\n    \n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\"\
    );\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) ==\
    \ \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmn3j2xoj.d(20): Error: undefined identifier `to_string`\n/tmp/tmpmn3j2xoj.d(24):
    Error: no property `length` for type `string`\n/tmp/tmpmn3j2xoj.d(25): Error:
    undefined identifier `to_string`\n/tmp/tmpmn3j2xoj.d(28): Error: template `std.typecons.reverse`
    cannot deduce function from argument types `!()(string)`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\n/tmp/tmpmn3j2xoj.d(30): Error: no property `substr` for type
    `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmn3j2xoj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprwzg2b3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmprwzg2b3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprwzg2b3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder = x % 10;\n    long digit = x % 10;\n   \
    \ long digits = 1;\n    long shifts = 1;\n    \n    while (shift > digits) {\n\
    \        shift -= digits;\n        digits++;\n    }\n    \n    while (shift >\
    \ 1) {\n        shift -= 1;\n        digits--;\n    }\n    \n    while (digits\
    \ > 0) {\n        result += digit;\n        digit = remainder % 10;\n        remainder\
    \ = remainder / 10;\n        digits--;\n    }\n    \n    if (shift > 1) {\n  \
    \      result += digit;\n    }\n    \n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\"\
    );\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) ==\
    \ \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28xb48sd.d(32): Error: incompatible types for `(result) += (digit)`:
    `string` and `long`\n/tmp/tmp28xb48sd.d(39): Error: incompatible types for `(result)
    += (digit)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp28xb48sd.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj8n7mo6j.d(22): Error: undefined identifier `to_string`\n/tmp/tmpj8n7mo6j.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpj8n7mo6j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > sizeof(long)*8) {\n\
    \        shift = (sizeof(long)*8) - shift;\n    }\n    \n    remainder = x % shift;\n\
    \    x /= shift;\n    \n    while (x != 0) {\n        result += (char)(x % 10);\n\
    \        x /= 10;\n    }\n    \n    if (remainder != 0) {\n        result += (char)(remainder);\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptsv_ovgo.d(18): Error: found `)` when expecting `.` following
    long\n/tmp/tmptsv_ovgo.d(18): Error: found `*` when expecting identifier following
    `long`.\n/tmp/tmptsv_ovgo.d(18): Error: found `8` when expecting `,`\n/tmp/tmptsv_ovgo.d(18):
    Error: found `{` when expecting `)`\n/tmp/tmptsv_ovgo.d(19): Error: found `)`
    when expecting `.` following long\n/tmp/tmptsv_ovgo.d(19): Error: found `*` when
    expecting identifier following `long`.\n/tmp/tmptsv_ovgo.d(19): Error: found `8`
    when expecting `,`\n/tmp/tmptsv_ovgo.d(19): Error: found `;` when expecting `)`\n/tmp/tmptsv_ovgo.d(20):
    Error: found `}` when expecting `;` following statement\n/tmp/tmptsv_ovgo.d(26):
    Error: C style cast illegal, use `cast(char)(x % 10)`\n/tmp/tmptsv_ovgo.d(31):
    Error: C style cast illegal, use `cast(char)remainder`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmptsv_ovgo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (x) {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    if (shift > result.length())\n        result = to_string(result.length()\
    \ - shift) + result;\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptio3bpan.d(21): Error: undefined identifier `to_string`\n/tmp/tmptio3bpan.d(24):
    Error: no property `length` for type `string`\n/tmp/tmptio3bpan.d(25): Error:
    undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptio3bpan.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digits = (int)x.digits;\n    long shift = shift % digits;\n\
    \    if (shift < 0)\n        shift += digits;\n    long mask = ((1L << shift)\
    \ - 1);\n    long mask2 = ((1L << digits) - 1);\n    long mask3 = ((1L << digits)\
    \ - 1);\n    long mask4 = ((1L << digits) - 1);\n    long mask5 = ((1L << digits)\
    \ - 1);\n    long mask6 = ((1L << digits) - 1);\n    long mask7 = ((1L << digits)\
    \ - 1);\n    long mask8 = ((1L << digits) - 1);\n    long mask9 = ((1L << digits)\
    \ - 1);\n    long mask10 = ((1L << digits) - 1);\n    long mask11 = ((1L << digits)\
    \ - 1);\n    long mask12 = ((1L << digits) - 1);\n    long mask13 = ((1L << digits)\
    \ - 1);\n    long mask14 = ((1L << digits) - 1);\n    long mask15 = ((1L << digits)\
    \ - 1);\n    long mask16 = ((1L << digits) - 1);\n    long mask17 = ((1L << digits)\
    \ - 1);\n    long mask18 = ((1L << digits) - 1);\n    long mask19 = ((1L << digits)\
    \ - 1);\n    long mask20 = ((1L << digits) - 1);\n    long mask21 = ((1L << digits)\
    \ - 1);\n    long mask22 = ((1L << digits) - 1);\n    long mask23 = ((1L << digits)\
    \ - 1);\n    long mask24 = ((1L << digits) - 1);\n    long mask25 = ((1L << digits)\
    \ - 1);\n    long mask26 = ((1L << digits) - 1);\n    long mask27 = ((1L << digits)\
    \ - 1);\n    long mask28 = ((1L << digits) - 1);\n    long mask29 = ((1L << digits)\
    \ - 1);\n    long mask30 = ((1L << digits) - 1);\n    long mask31 = ((1L << digits)\
    \ - 1);\n    long mask32 = ((1L << digits) - 1);\n    long mask33 = ((1L << digits)\
    \ - 1);\n    long mask34 = ((1L << digits) - 1);\n    long mask35 = ((1L << digits)\
    \ - 1);\n    long mask36 = ((1L << digits) - 1);\n    long mask37 = ((1L << digits)\
    \ - 1);\n    long mask38 = ((1L << digits) - 1);\n    long mask39 = ((1L << digits)\
    \ - 1);\n    long mask40 = ((1L << \nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzt6p_dia.d(16): Error: C style cast illegal, use `cast(int)x.digits`\n/tmp/tmpzt6p_dia.d(60):
    Error: expression expected, not `unittest`\n/tmp/tmpzt6p_dia.d(59): Error: found
    `{` when expecting `)`\n/tmp/tmpzt6p_dia.d(59): Error: found `alias` when expecting
    `)`\n/tmp/tmpzt6p_dia.d(62): Error: semicolon expected, not `candidate`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzt6p_dia.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        remainder = digits(x) % shift;\n        shift -= remainder;\n       \
    \ x /= shift;\n    }\n    \n    while (shift > 0)\n    {\n        result += digit(x);\n\
    \        shift -= digits(x);\n        x /= 10;\n    }\n    \n    if (remainder\
    \ > 0)\n        result += digit(x);\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnz3dx9hw.d(18): Error: undefined identifier `digits`\n/tmp/tmpnz3dx9hw.d(20):
    Error: undefined identifier `digits`\n/tmp/tmpnz3dx9hw.d(27): Error: undefined
    identifier `digit`\n/tmp/tmpnz3dx9hw.d(28): Error: undefined identifier `digits`\n/tmp/tmpnz3dx9hw.d(33):
    Error: undefined identifier `digit`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpnz3dx9hw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiru7s1f9.d(22): Error: undefined identifier `to_string`\n/tmp/tmpiru7s1f9.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpiru7s1f9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long remainder;\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += char(remainder);\n        shift--;\n    }\n    \n    while\
    \ (shift < 0)\n    {\n        remainder = digit % 10;\n        digit = digit /\
    \ 10;\n        result += char(remainder);\n        shift++;\n    }\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n  \
    \  assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"\
    12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L)\
    \ == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpczyh48di.d(23): Error: cannot implicitly convert expression
    `remainder` of type `long` to `char`\n/tmp/tmpczyh48di.d(31): Error: cannot implicitly
    convert expression `remainder` of type `long` to `char`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpczyh48di.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp__a5uz3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmp__a5uz3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp__a5uz3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (x) {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    while (shift) {\n        remainder = shift % 10;\n        shift /=\
    \ 10;\n        result += to_string(remainder);\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzysoan3e.d(21): Error: undefined identifier `to_string`\n/tmp/tmpzysoan3e.d(27):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpzysoan3e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digits = digits(x);\n    long remainder = x % 10;\n\
    \    long shiftDigits = digits - shift;\n    long shiftRemainder = remainder %\
    \ 10;\n    \n    for(long i = 0; i < shiftDigits; i++) {\n        result += to_string(remainder);\n\
    \        remainder = remainder / 10;\n    }\n    \n    result += to_string(remainder);\n\
    \    \n    for(long i = 0; i < shiftRemainder; i++) {\n        result += to_string(remainder);\n\
    \        remainder = remainder / 10;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfsisq2gp.d(16): Error: undefined identifier `digits`\n/tmp/tmpfsisq2gp.d(22):
    Error: undefined identifier `to_string`\n/tmp/tmpfsisq2gp.d(26): Error: undefined
    identifier `to_string`\n/tmp/tmpfsisq2gp.d(29): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfsisq2gp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digits = (int)std::log10(x);\n    long shift = std::abs(shift);\n\
    \    long shifts = shift > digits ? digits : shift;\n    long remaining = digits\
    \ - shifts;\n    long digit = x % 10;\n    long digits = x % 10;\n    long digits_remaining\
    \ = digits % 10;\n    \n    for(long i = 0; i < shifts; i++)\n    {\n        result\
    \ += digit;\n        digit = digits / 10;\n        digits = digits % 10;\n   \
    \ }\n    \n    for(long i = 0; i < remainding; i++)\n    {\n        result +=\
    \ digits_remaining;\n        digits_remaining = digits_remaining / 10;\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9ca4wkh8.d(16): Error: C style cast illegal, use `cast(int)std`\n/tmp/tmp9ca4wkh8.d(16):
    Error: semicolon expected, not `:`\n/tmp/tmp9ca4wkh8.d(16): Error: found `:` instead
    of statement\n/tmp/tmp9ca4wkh8.d(17): Error: semicolon expected, not `:`\n/tmp/tmp9ca4wkh8.d(17):
    Error: found `:` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp9ca4wkh8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp__a5uz3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmp__a5uz3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp__a5uz3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprwzg2b3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmprwzg2b3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprwzg2b3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = 1;\n    long r = 1;\n    long\
    \ digit;\n    \n    while (n != 0) {\n        digit = n % 10;\n        n /= 10;\n\
    \        m <<= 1;\n        m |= digit;\n        r <<= 1;\n        r |= digit;\n\
    \    }\n    \n    while (shift > 0) {\n        digit = m >> shift;\n        m\
    \ &= (m << shift) - 1;\n        m |= digit << shift;\n        shift -= 1;\n  \
    \      result += (char)digit;\n    }\n    \n    while (shift < 0) {\n        digit\
    \ = r >> -shift;\n        r &= (r >> -shift) - 1;\n        r |= digit >> -shift;\n\
    \        shift += 1;\n        result += (char)digit;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp99azujrf.d(35): Error: C style cast illegal, use `cast(char)digit`\n/tmp/tmp99azujrf.d(43):
    Error: C style cast illegal, use `cast(char)digit`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp99azujrf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        remainder = x;\n        \n        while (shift > digits(remainder))\n\
    \        {\n            remainder = remainder % 10;\n            shift--;\n  \
    \      }\n        \n        while (digits(remainder) > shift)\n        {\n   \
    \         remainder = remainder % 10;\n            shift--;\n        }\n     \
    \   \n        result = to_string(digits(remainder));\n    }\n    else\n    {\n\
    \        remainder = x;\n        \n        while (shift > digits(remainder))\n\
    \        {\n            remainder = remainder % 10;\n            shift--;\n  \
    \      }\n        \n        while (digits(remainder) > shift)\n        {\n   \
    \         remainder = remainder % 10;\n            shift--;\n        }\n     \
    \   \n        result = to_string(digits(remainder));\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjamevpp5.d(18): Error: undefined identifier `digits`\n/tmp/tmpjamevpp5.d(22):
    Error: undefined identifier `digits`\n/tmp/tmpjamevpp5.d(28): Error: undefined
    identifier `digits`\n/tmp/tmpjamevpp5.d(34): Error: undefined identifier `to_string`\n/tmp/tmpjamevpp5.d(40):
    Error: undefined identifier `digits`\n/tmp/tmpjamevpp5.d(46): Error: undefined
    identifier `digits`\n/tmp/tmpjamevpp5.d(52): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjamevpp5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = shift\
    \ / n;\n    \n    for(long i = 0; i < r; i++)\n    {\n        result += to_string(n);\n\
    \        n = m % n;\n        m = m / n;\n    }\n    result += to_string(n);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n\
    \    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgwrae4fo.d(22): Error: undefined identifier `to_string`\n/tmp/tmpgwrae4fo.d(26):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpgwrae4fo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = (x % 10);\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = (x % 10);\n        x /= 10;\n        result += to_string(remainder);\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8nzydbma.d(22): Error: undefined identifier `to_string`\n/tmp/tmp8nzydbma.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8nzydbma.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp__a5uz3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmp__a5uz3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp__a5uz3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = 1;\n    while(m <= shift)\n  \
    \  {\n        n <<= 1;\n        m <<= 1;\n    }\n    while(n != 0)\n    {\n  \
    \      result += (char)(n % 10);\n        n /= 10;\n    }\n    while(m != 0)\n\
    \    {\n        result += (char)((n >> m) % 10);\n        n >>= m;\n        m\
    \ >>= 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8trg91hw.d(25): Error: C style cast illegal, use `cast(char)(n
    % 10)`\n/tmp/tmp8trg91hw.d(30): Error: C style cast illegal, use `cast(char)((n
    >> m) % 10)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8trg91hw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (shift < 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift += 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx1i5e_dy.d(22): Error: undefined identifier `to_string`\n/tmp/tmpx1i5e_dy.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpx1i5e_dy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > numeric_limits<long>::digits)\
    \ {\n        shift = numeric_limits<long>::digits;\n    }\n    \n    while (shift\
    \ > 0) {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift--;\n    }\n    \n    while (shift < 0) {\n        remainder = x\
    \ % 10;\n        x /= 10;\n        result += to_string(remainder);\n        shift++;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqw43hgal.d(18): Error: found `<` when expecting `)`\n/tmp/tmpqw43hgal.d(18):
    Error: no identifier for declarator `long`\n/tmp/tmpqw43hgal.d(18): Error: found
    `>` instead of statement\n/tmp/tmpqw43hgal.d(22): Error: declaration expected,
    not `while`\n/tmp/tmpqw43hgal.d(24): Error: no identifier for declarator `x`\n/tmp/tmpqw43hgal.d(24):
    Error: declaration expected, not `/=`\n/tmp/tmpqw43hgal.d(25): Error: no identifier
    for declarator `result`\n/tmp/tmpqw43hgal.d(25): Error: declaration expected,
    not `+=`\n/tmp/tmpqw43hgal.d(26): Error: no identifier for declarator `shift`\n/tmp/tmpqw43hgal.d(26):
    Error: declaration expected, not `--`\n/tmp/tmpqw43hgal.d(27): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqw43hgal.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > __digits__)\n   \
    \ {\n        shift = __digits__ - shift;\n    }\n    \n    remainder = __mod__(x,shift);\n\
    \    \n    while (remainder > 0)\n    {\n        result += __digits__[remainder];\n\
    \        remainder = __mod__(x-remainder,shift);\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkn1gwzah.d(18): Error: undefined identifier `__digits__`\n/tmp/tmpkn1gwzah.d(20):
    Error: undefined identifier `__digits__`\n/tmp/tmpkn1gwzah.d(23): Error: undefined
    identifier `__mod__`\n/tmp/tmpkn1gwzah.d(27): Error: undefined identifier `__digits__`\n/tmp/tmpkn1gwzah.d(28):
    Error: undefined identifier `__mod__`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpkn1gwzah.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += string(remainder);\n        shift -= 1;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += string(remainder);\n        shift -= 1;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw1bgql15.d(23): Error: function expected before `()`, not `string`
    of type `string`\n/tmp/tmpw1bgql15.d(31): Error: function expected before `()`,
    not `string` of type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw1bgql15.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(shift <\
    \ 0)\n        {\n            remainder = x % 10;\n            x /= 10;\n     \
    \       result += to_string(remainder);\n            shift += 1;\n        }\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe74un7mz.d(22): Error: undefined identifier `to_string`\n/tmp/tmpe74un7mz.d(32):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpe74un7mz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj8n7mo6j.d(22): Error: undefined identifier `to_string`\n/tmp/tmpj8n7mo6j.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpj8n7mo6j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n\
    \    long s = m / r;\n    long t = x / r;\n    \n    while(s > 0)\n    {\n   \
    \     result += (char)('0' + t);\n        t /= 10;\n        s -= 1;\n    }\n \
    \   \n    while(t > 0)\n    {\n        result += (char)('0' + t);\n        t /=\
    \ 10;\n    }\n    \n    while(m > 0)\n    {\n        result += (char)('0' + m);\n\
    \        m /= 10;\n    }\n    \n    while(n > 0)\n    {\n        result += (char)('0'\
    \ + n);\n        n /= 10;\n    }\n    \n    while(result != \"\")\n    {\n   \
    \     result += (char)('0' + r);\n        r /= 10;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplteok6cm.d(24): Error: C style cast illegal, use `cast(char)(\''0\''
    + t)`\n/tmp/tmplteok6cm.d(31): Error: C style cast illegal, use `cast(char)(\''0\''
    + t)`\n/tmp/tmplteok6cm.d(37): Error: C style cast illegal, use `cast(char)(\''0\''
    + m)`\n/tmp/tmplteok6cm.d(43): Error: C style cast illegal, use `cast(char)(\''0\''
    + n)`\n/tmp/tmplteok6cm.d(49): Error: C style cast illegal, use `cast(char)(\''0\''
    + r)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplteok6cm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += remainder;\n  \
    \      shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x > 0)\n\
    \        {\n            remainder = x % 10;\n            x /= 10;\n          \
    \  result += remainder;\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe96ai3iq.d(22): Error: incompatible types for `(result) += (remainder)`:
    `string` and `long`\n/tmp/tmpe96ai3iq.d(32): Error: incompatible types for `(result)
    += (remainder)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpe96ai3iq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprwzg2b3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmprwzg2b3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprwzg2b3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n\
    \    long s = m / r;\n    long t = m % r;\n    string digits = to_string(n);\n\
    \    string digits_reversed = to_string(m);\n    string digits_shifted = to_string(s);\n\
    \    string digits_shifted_reversed = to_string(s);\n    string digits_shifted_reversed_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted = to_string(s);\n\
    \    string digits_shifted_reversed_shifted_shifted_shifted = to_string(s);\n\
    \    string digits_shifted_reversed_shifted_shifted_shifted_shifted = to_string(s);\n\
    \    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted =\
    \ to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted\
    \ = to_string(s);\n    string digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shif\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf6rgvgwp.d(40): Error: found `digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shif`
    when expecting `;` following statement\n/tmp/tmpf6rgvgwp.d(41): Error: found `unittest`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf6rgvgwp.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        shift = digits(x);\n    }\n    \n    remainder = x % shift;\n    \n \
    \   while (shift > 0)\n    {\n        result += digits[remainder];\n        x\
    \ /= shift;\n        shift -= digits(x);\n    }\n    \n    result += digits[remainder];\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8owvatai.d(18): Error: undefined identifier `digits`\n/tmp/tmp8owvatai.d(20):
    Error: undefined identifier `digits`\n/tmp/tmp8owvatai.d(27): Error: undefined
    identifier `digits`\n/tmp/tmp8owvatai.d(29): Error: undefined identifier `digits`\n/tmp/tmp8owvatai.d(32):
    Error: undefined identifier `digits`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8owvatai.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp__a5uz3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmp__a5uz3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp__a5uz3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj8n7mo6j.d(22): Error: undefined identifier `to_string`\n/tmp/tmpj8n7mo6j.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpj8n7mo6j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(shift >\
    \ 0)\n        {\n            remainder = x % 10;\n            x /= 10;\n     \
    \       result += to_string(remainder);\n            shift -= 1;\n        }\n\
    \        \n        result += \"0\";\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8ihax3u3.d(22): Error: undefined identifier `to_string`\n/tmp/tmp8ihax3u3.d(32):
    Error: undefined identifier `to_string`\n/tmp/tmp8ihax3u3.d(36): Error: slice
    `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ihax3u3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long digits = 1;\n    long carry =\
    \ 0;\n    \n    while (shift > digits) {\n        carry = digit % 10;\n      \
    \  digit = digit / 10;\n        digits = digits + 1;\n    }\n    \n    while (carry\
    \ > 0) {\n        result = digits[carry] + result;\n        carry = carry / 10;\n\
    \    }\n    \n    if (shift < digits) {\n        digits = digit;\n    }\n    \n\
    \    while (digits > 0) {\n        result = digits[digits - 1] + result;\n   \
    \     digits = digits - 1;\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx_jr0np.d(27): Error: only one index allowed to index `long`\n/tmp/tmprx_jr0np.d(36):
    Error: only one index allowed to index `long`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmprx_jr0np.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (shift < 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift += 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx1i5e_dy.d(22): Error: undefined identifier `to_string`\n/tmp/tmpx1i5e_dy.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpx1i5e_dy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = n;\n    long temp;\n    \n   \
    \ while(m > 0)\n    {\n        temp = m % 10;\n        m /= 10;\n        result\
    \ += temp;\n    }\n    \n    while(shift > 0)\n    {\n        result += (n % 10\
    \ + 10 - n % shift) % 10;\n        shift -= 1;\n        n /= 10;\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n\
    \    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxgc_06u6.d(24): Error: incompatible types for `(result) += (temp)`:
    `string` and `long`\n/tmp/tmpxgc_06u6.d(29): Error: incompatible types for `(result)
    += ((n % 10L + 10L - n % shift) % 10L)`: `string` and `long`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxgc_06u6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift < 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift += 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcwwjmmse.d(22): Error: undefined identifier `to_string`\n/tmp/tmpcwwjmmse.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpcwwjmmse.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        remainder = x % 10;\n        x /= 10;\n        shift -= digits(x);\n\
    \    }\n    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n    \
    \    x /= 10;\n        shift -= 1;\n        result += to_string(remainder);\n\
    \    }\n    \n    if (remainder > 0)\n        result += to_string(remainder);\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpavhel3yn.d(18): Error: undefined identifier `digits`\n/tmp/tmpavhel3yn.d(22):
    Error: undefined identifier `digits`\n/tmp/tmpavhel3yn.d(30): Error: undefined
    identifier `to_string`\n/tmp/tmpavhel3yn.d(34): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpavhel3yn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += remainder;\n \
    \       shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += remainder;\n    }\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n  \
    \  assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"\
    12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L)\
    \ == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe53k48a4.d(22): Error: incompatible types for `(result) += (remainder)`:
    `string` and `long`\n/tmp/tmpe53k48a4.d(30): Error: incompatible types for `(result)
    += (remainder)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpe53k48a4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = n;\n    long temp;\n    \n   \
    \ while (m > 0)\n    {\n        temp = m % 10;\n        m /= 10;\n        if (shift\
    \ > 0)\n        {\n            temp = temp * 10 + shift;\n            shift -=\
    \ 1;\n        }\n        result = temp + result;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi8qjsvki.d(29): Error: incompatible types for `(temp) + (result)`:
    `long` and `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi8qjsvki.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n\
    \    long s = m / r;\n    long t = m % r;\n    \n    for(int i = 0; i < s; i++)\n\
    \    {\n        result += to_string(t);\n        t += r;\n    }\n    \n    for(int\
    \ i = 0; i < r; i++)\n    {\n        result += to_string(n);\n        n += m;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq72d7xt1.d(24): Error: undefined identifier `to_string`\n/tmp/tmpq72d7xt1.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq72d7xt1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (x) {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        if (remainder >= shift) {\n           \
    \ result += remainder;\n            x /= 10;\n        }\n        else {\n    \
    \        result += remainder;\n            result += (remainder + 10 - shift);\n\
    \            x /= 10;\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6d3jejva.d(22): Error: incompatible types for `(result) += (remainder)`:
    `string` and `long`\n/tmp/tmp6d3jejva.d(26): Error: incompatible types for `(result)
    += (remainder)`: `string` and `long`\n/tmp/tmp6d3jejva.d(27): Error: incompatible
    types for `(result) += (remainder + 10L - shift)`: `string` and `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6d3jejva.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long remainder;\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result = remainder + result;\n        shift = shift - 1;\n    }\n   \
    \ \n    while (result != \"\")\n    {\n        result = digit + result;\n    \
    \    digit = digit / 10;\n    }\n    \n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\"\
    );\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) ==\
    \ \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcokmy8rt.d(23): Error: incompatible types for `(remainder) +
    (result)`: `long` and `string`\n/tmp/tmpcokmy8rt.d(29): Error: incompatible types
    for `(digit) + (result)`: `long` and `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpcokmy8rt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder = x % 10;\n    long digit = x % 10;\n   \
    \ long shiftDigit = shift % 10;\n    long shiftRemainder = shift % 10;\n    \n\
    \    while ((shift -= 10) >= 0)\n    {\n        result += digit;\n        digit\
    \ = remainder % 10;\n        remainder = remainder / 10;\n    }\n    \n    result\
    \ += digit;\n    \n    if (shift > 0)\n    {\n        result += shiftDigit;\n\
    \        result += shiftRemainder;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgc5sfn4d.d(23): Error: incompatible types for `(result) += (digit)`:
    `string` and `long`\n/tmp/tmpgc5sfn4d.d(28): Error: incompatible types for `(result)
    += (digit)`: `string` and `long`\n/tmp/tmpgc5sfn4d.d(32): Error: incompatible
    types for `(result) += (shiftDigit)`: `string` and `long`\n/tmp/tmpgc5sfn4d.d(33):
    Error: incompatible types for `(result) += (shiftRemainder)`: `string` and `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgc5sfn4d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long remainder;\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += char(remainder);\n        shift -= 1;\n    }\n    \n    while\
    \ (digit > 0)\n    {\n        remainder = digit % 10;\n        digit = digit /\
    \ 10;\n        result += char(remainder);\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_9dyvtc9.d(23): Error: cannot implicitly convert expression
    `remainder` of type `long` to `char`\n/tmp/tmp_9dyvtc9.d(31): Error: cannot implicitly
    convert expression `remainder` of type `long` to `char`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp_9dyvtc9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = 1;\n    \n    while (m != 0) {\n\
    \        long r = n / m;\n        long t = n % m;\n        \n        if (shift\
    \ > m) {\n            result += to_string(t);\n            shift -= m;\n     \
    \   } else {\n            result += to_string(t);\n            result += to_string(m);\n\
    \            shift -= m;\n        }\n        \n        n = r;\n        m *= 10;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpik1fnaj5.d(24): Error: undefined identifier `to_string`\n/tmp/tmpik1fnaj5.d(27):
    Error: undefined identifier `to_string`\n/tmp/tmpik1fnaj5.d(28): Error: undefined
    identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpik1fnaj5.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprwzg2b3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmprwzg2b3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprwzg2b3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digits = digits(x);\n    long shiftDigits = digits(shift);\n\
    \    long shiftBits = bits(shift);\n    long shiftBitsLeft = shiftBits - shiftDigits;\n\
    \    long shiftBitsRight = shiftBits - shiftDigits - 1;\n    long shiftBitsMask\
    \ = ~(1 << shiftBitsLeft);\n    long shiftBitsMaskRight = ~(1 << shiftBitsRight);\n\
    \    long mask = (1 << shiftBitsRight) - 1;\n    long maskRight = ~(1 << shiftBitsRight);\n\
    \    long maskLeft = ~(1 << shiftBitsLeft);\n    long maskLeftRight = ~(1 << shiftBitsLeft\
    \ - 1);\n    long maskLeftRightRight = ~(1 << shiftBitsLeft - 2);\n    long maskLeftRightLeftRight\
    \ = ~(1 << shiftBitsLeft - 3);\n    long maskLeftRightLeftLeft = ~(1 << shiftBitsLeft\
    \ - 4);\n    long maskLeftRightLeft = ~(1 << shiftBitsLeft - 5);\n    long maskLeftRight\
    \ = ~(1 << shiftBitsLeft - 6);\n    long maskLeftLeft = ~(1 << shiftBitsLeft -\
    \ 7);\n    long maskLeft = ~(1 << shiftBitsLeft);\n    long maskRight = ~(1 <<\
    \ shiftBitsRight);\n    long maskRightLeft = ~(1 << shiftBitsRight - 1);\n   \
    \ long maskRightLeftRight = ~(1 << shiftBitsRight - 2);\n    long maskRightLeftLeft\
    \ = ~(1 << shiftBitsRight - 3);\n    long maskRightLeft = ~(1 << shiftBitsRight\
    \ - 4);\n    long maskRight = ~(1 << shiftBitsRight - 5);\n    long maskLeft =\
    \ ~(1 << shiftBitsRight - 6);\n    long maskLeftRight = ~(1 << shiftBitsRight\
    \ - 7);\n    long maskLeftRightLeft = ~(1 << shiftBitsRight - 8);\n    long maskLeftRightRight\
    \ = ~(1 << shiftBitsRight - 9);\n    long maskLeftRightLeftRight = ~(1 << shiftBitsRight\
    \ - 10);\n    long maskLeftRightLeftLeft = ~(1 << shiftBitsRight - 11);\n    long\
    \ maskLeftRightLeft = ~(1 << shiftBitsRight - 12);\n    long maskLeftRight = ~(1\
    \ << shiftBitsRight - 13);\n    long maskLeft = ~(1 << shiftBitsRight - 14);\n\
    \    long maskRight = ~(1 << shiftBitsRight - 15);\n\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmr3hx535.d(51): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr3hx535.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp__a5uz3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmp__a5uz3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp__a5uz3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift < 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift += 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcwwjmmse.d(22): Error: undefined identifier `to_string`\n/tmp/tmpcwwjmmse.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpcwwjmmse.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digit = x;\n    long carry = 0;\n    \n    while(shift\
    \ > 0)\n    {\n        digit = digit*10 + carry;\n        carry = digit/10;\n\
    \        digit = digit%10;\n        shift = shift-1;\n    }\n    \n    if(carry\
    \ > 0)\n    {\n        result += digit;\n        result += carry;\n    }\n   \
    \ \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjc2gp9ju.d(29): Error: incompatible types for `(result) += (digit)`:
    `string` and `long`\n/tmp/tmpjc2gp9ju.d(30): Error: incompatible types for `(result)
    += (carry)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjc2gp9ju.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long carry = 0;\n    \n    while (shift\
    \ > 0)\n    {\n        long digit = n % 10;\n        result += digit;\n      \
    \  n /= 10;\n        shift -= 1;\n    }\n    \n    if (n != 0)\n    {\n      \
    \  result += n % 10;\n        carry = 1;\n    }\n    \n    while (carry > 0)\n\
    \    {\n        result += digits[(n % 10) + 1];\n        n /= 10;\n        carry\
    \ -= 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk0j1gpy5.d(22): Error: incompatible types for `(result) += (digit)`:
    `string` and `long`\n/tmp/tmpk0j1gpy5.d(29): Error: incompatible types for `(result)
    += (n % 10L)`: `string` and `long`\n/tmp/tmpk0j1gpy5.d(35): Error: undefined identifier
    `digits`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk0j1gpy5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp__a5uz3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmp__a5uz3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp__a5uz3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        remainder = digits(x) % shift;\n        shift -= remainder;\n       \
    \ x /= shift;\n        \n        for(long i = 0; i < shift; i++)\n        {\n\
    \            result += digit(x);\n            x /= 10;\n        }\n        \n\
    \        result += digit(x);\n        \n        return result;\n    }\n    \n\
    \    for(long i = 0; i < shift; i++)\n    {\n        result += digit(x);\n   \
    \     x /= 10;\n    }\n    \n    result += digit(x);\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptojyl0mr.d(18): Error: undefined identifier `digits`\n/tmp/tmptojyl0mr.d(20):
    Error: undefined identifier `digits`\n/tmp/tmptojyl0mr.d(26): Error: undefined
    identifier `digit`\n/tmp/tmptojyl0mr.d(30): Error: undefined identifier `digit`\n/tmp/tmptojyl0mr.d(37):
    Error: undefined identifier `digit`\n/tmp/tmptojyl0mr.d(41): Error: undefined
    identifier `digit`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptojyl0mr.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long digits = (int)std::log10(x);\n    long shift = std::abs(shift);\n\
    \    long shift_digits = shift % digits;\n    long shift_digits_power = shift_digits\
    \ + digits;\n    long shift_digits_power_power = shift_digits_power * shift_digits_power;\n\
    \    long shift_digits_power_power_power = shift_digits_power_power * shift_digits_power;\n\
    \    long shift_digits_power_power_power_power = shift_digits_power_power_power\
    \ * shift_digits_power;\n    long shift_digits_power_power_power_power_power =\
    \ shift_digits_power_power_power_power * shift_digits_power;\n    long shift_digits_power_power_power_power_power_power\
    \ = shift_digits_power_power_power_power_power_power * shift_digits_power;\n \
    \   long shift_digits_power_power_power_power_power_power_power = shift_digits_power_power_power_power_power_power_power\
    \ * shift_digits_power;\n    long shift_digits_power_power_power_power_power_power_power_power\
    \ = shift_digits_power_power_power_power_power_power_power_power * shift_digits_power;\n\
    \    long shift_digits_power_power_power_power_power_power_power_power_power =\
    \ shift_digits_power_power_power_power_power_power_power_power_power_power * shift_digits_power;\n\
    \    long shift_digits_power_power_power_power_power_power_power_power_power_power\
    \ = shift_digits_power_power_power_power_power_power_power_power_power_power_power\
    \ * shift_digits_power;\n    long shift_digits_power_power_power_power_power_power_power_power_power_power_power\
    \ = shift_digits_power_power_power_power_power_power_power_power_power_power_power\
    \ * shift_digits_power;\n    long shift_digits_power_power_power_power_power_power_power_power_power_power_power\
    \ = shift_digits_power_power_power_power_power_power_power_power_power_power_power_power\
    \ * shift_digits_power;\n    long shift_digits_power_power_power_power_power_power_power_power_power_power_power_power\
    \ = shift_digits_power_power_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ * shift_digits_power;\n    long shift_digits_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ = shift_digits_power_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ * shift_digits_power;\n    long shift_digits_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ = shift_digits_power_power_power_power_power_power_power_power_power_power_power_power_power_power\
    \ * shift_digits_power;\n    long shift_digits_power_power_power_power_\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8qhhwsp6.d(16): Error: C style cast illegal, use `cast(int)std`\n/tmp/tmp8qhhwsp6.d(16):
    Error: semicolon expected, not `:`\n/tmp/tmp8qhhwsp6.d(16): Error: found `:` instead
    of statement\n/tmp/tmp8qhhwsp6.d(17): Error: semicolon expected, not `:`\n/tmp/tmp8qhhwsp6.d(17):
    Error: found `:` instead of statement\n/tmp/tmp8qhhwsp6.d(35): Error: semicolon
    expected, not `unittest`\n/tmp/tmp8qhhwsp6.d(35): Error: found `unittest` instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8qhhwsp6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = 1;\n    long digit;\n    \n  \
    \  while (n > 0)\n    {\n        digit = n % 10;\n        result += digit;\n \
    \       n /= 10;\n    }\n    \n    while (shift > 0)\n    {\n        digit = m\
    \ % 10;\n        result += digit;\n        m /= 10;\n        shift -= 1;\n   \
    \ }\n    \n    return result;\n}\n/*\nReturn the number of digits in x\n*/\nlong\
    \ digits(long x)\n{\n    long n = 0;\n    long digit;\n    \n    while (x > 0)\n\
    \    {\n        digit = x % 10;\n        n += 1;\n        x /= 10;\n    }\n  \
    \  \n    return n;\n}\n/*\nReturn the number of digits in x\n*/\nlong digits(string\
    \ x)\n{\n    long n = 0;\n    long digit;\n    \n    for (auto c : x)\n    {\n\
    \        digit = c - '0';\n        n += 1;\n    }\n    \n    return n;\n}\n/*\n\
    Return the number of digits in x\n*/\nlong digits(string x, int base)\n{\n   \
    \ long n = 0;\n    long digit;\n    \n    for (auto c : x)\n    {\n        digit\
    \ = c - '0';\n        n += digit * base;\n    }\n    \n    return n;\n}\n/*\n\
    Return the number of digits in x\n*/\nlong digits(string x, int base, int radix)\n\
    {\n    long n = 0;\n    long digit;\n    \n    for (auto c : x)\n    {\n     \
    \   digit = c - '0';\n        n += digit * radix;\n    }\n    \n    return n;\n\
    }\n/*\nReturn the number of digits in x\n*/\nlong digits(string x, int radix)\n\
    {\n    return digits(x, radix, 10);\n}\n/*\nReturn the number of digits in x\n\
    */\nlong digits(string x, int radix, int base)\n{\n    return digits(x, radix,\
    \ base);\n}\n/*\nReturn the number of digits in x\n*/\nlong digits(string x, int\
    \ radix, int base)\n{\n    long n = 0;\n    long digit;\n    \n    for (auto c\
    \ : x)\n    {\n        digit = c - '0';\n        n += digit * base;\n    }\n \
    \   \n    return n;\n}\n/*\nReturn the number of digits in x\n*/\nlong digits(string\
    \ x, int radix)\n{\n    return digits(x, radix, 10);\n}\n/*\nReturn the number\
    \ of digits in x\n*/\nunittest\n{\n    alias candidate = circular_shift;\n\n \
    \   assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl9laubl5.d(62): Error: no identifier for declarator `c`\n/tmp/tmpl9laubl5.d(62):
    Error: expression expected, not `:`\n/tmp/tmpl9laubl5.d(62): Error: found `x`
    when expecting `;` following `for` condition\n/tmp/tmpl9laubl5.d(78): Error: no
    identifier for declarator `c`\n/tmp/tmpl9laubl5.d(78): Error: expression expected,
    not `:`\n/tmp/tmpl9laubl5.d(78): Error: found `x` when expecting `;` following
    `for` condition\n/tmp/tmpl9laubl5.d(94): Error: no identifier for declarator `c`\n/tmp/tmpl9laubl5.d(94):
    Error: expression expected, not `:`\n/tmp/tmpl9laubl5.d(94): Error: found `x`
    when expecting `;` following `for` condition\n/tmp/tmpl9laubl5.d(124): Error:
    no identifier for declarator `c`\n/tmp/tmpl9laubl5.d(124): Error: expression expected,
    not `:`\n/tmp/tmpl9laubl5.d(124): Error: found `x` when expecting `;` following
    `for` condition\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9laubl5.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = 1;\n    long r = 1;\n    long\
    \ digit;\n    \n    while(n > 0)\n    {\n        digit = n % 10;\n        result\
    \ += digit;\n        n = n / 10;\n    }\n    \n    while(shift > 0)\n    {\n \
    \       digit = result % 10;\n        result = result / 10;\n        result =\
    \ result + digit;\n        shift = shift / 10;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzf_5g7zr.d(24): Error: incompatible types for `(result) += (digit)`:
    `string` and `long`\n/tmp/tmpzf_5g7zr.d(30): Error: incompatible types for `(result)
    % (10)`: `string` and `int`\n/tmp/tmpzf_5g7zr.d(31): Error: incompatible types
    for `(result) / (10)`: `string` and `int`\n/tmp/tmpzf_5g7zr.d(32): Error: incompatible
    types for `(result) + (digit)`: `string` and `long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpzf_5g7zr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift < 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift += 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcwwjmmse.d(22): Error: undefined identifier `to_string`\n/tmp/tmpcwwjmmse.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpcwwjmmse.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % 10;\n    long d = shift\
    \ / 10;\n    \n    while (m > 0) {\n        result += n % 10;\n        n = n /\
    \ 10;\n        m--;\n    }\n    \n    while (d > 0) {\n        result += n % 10;\n\
    \        n = n / 10;\n        d--;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6ulfn0oq.d(21): Error: incompatible types for `(result) += (n
    % 10L)`: `string` and `long`\n/tmp/tmp6ulfn0oq.d(27): Error: incompatible types
    for `(result) += (n % 10L)`: `string` and `long`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp6ulfn0oq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj8n7mo6j.d(22): Error: undefined identifier `to_string`\n/tmp/tmpj8n7mo6j.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpj8n7mo6j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp__a5uz3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmp__a5uz3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp__a5uz3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (x) {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    result += (shift > result.size()) ? to_string(shift-result.size())\
    \ : \"\";\n    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqxfbdt57.d(21): Error: undefined identifier `to_string`\n/tmp/tmpqxfbdt57.d(24):
    Error: no property `size` for type `string`\n/tmp/tmpqxfbdt57.d(24): Error: undefined
    identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqxfbdt57.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = 1;\n    long digit;\n    \n  \
    \  while (n != 0) {\n        digit = n % 10;\n        n /= 10;\n        if (shift\
    \ > m) {\n            result += digit;\n            m += 1;\n        } else {\n\
    \            result += digit;\n            m += shift;\n        }\n    }\n   \
    \ \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5c6jwvyc.d(24): Error: incompatible types for `(result) += (digit)`:
    `string` and `long`\n/tmp/tmp5c6jwvyc.d(27): Error: incompatible types for `(result)
    += (digit)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c6jwvyc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = 1;\n    long temp;\n    \n   \
    \ while (n != 0) {\n        temp = n % 10;\n        result += temp;\n        n\
    \ = n / 10;\n    }\n    \n    long shiftRight = shift;\n    \n    while (shiftRight\
    \ > 0) {\n        shiftRight--;\n        result += m;\n        m *= 10;\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpppivda5h.d(22): Error: incompatible types for `(result) += (temp)`:
    `string` and `long`\n/tmp/tmpppivda5h.d(30): Error: incompatible types for `(result)
    += (m)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpppivda5h.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprwzg2b3i.d(22): Error: undefined identifier `to_string`\n/tmp/tmprwzg2b3i.d(30):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprwzg2b3i.d", "-I/tmp"]\n'''
  stdout: b''
