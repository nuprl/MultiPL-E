name: HumanEval_16_count_distinct_characters
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how\
  \ many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
  xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
  */\nlong count_distinct_characters(string string) \n"
tests: "unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
  \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
  ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
  Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
completions: ["{\n    long count = 0;\n    foreach(char c in string)\n    {\n    \
    \    count += (long)tolower(c) - (long)tolower(toupper(c));\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long result\
    \ = 0;\n    \n    foreach(char c in string)\n    {\n        result += tolower(c)\
    \ - 'a';\n    }\n    \n    return result;\n}", "{\n    long distinct = 0;\n  \
    \  for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n            continue;\n        \n        distinct\
    \ += 1;\n    }\n    return distinct;\n}", "{\n\tlong result = 0;\n\tfor (auto\
    \ c : string) \n\t{\n\t\tif (isupper(c)) \n\t\t{\n\t\t\tresult += 1;\n\t\t}\n\t\
    \telse if (islower(c)) \n\t\t{\n\t\t\tresult += 1;\n\t\t}\n\t\telse \n\t\t{\n\t\
    \t\tresult += 2;\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long count = 0;\n\
    \    for(auto c : string)\n    {\n        auto lower = tolower(c);\n        auto\
    \ upper = toupper(c);\n        if(lower != upper)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    \n    foreach(char,\
    \ string) \n    {\n        count += 1;\n    }\n    \n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char c in\
    \ string)\n    {\n        if(!c.isUpper() && !c.isLower() && !c.isDigit())\n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string.at(i);\n        if(!std.ctype.isLower(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n\tlong count\
    \ = 0;\n\tfor (auto c : string) \n\t{\n\t\tcount += (c >= 'A' && c <= 'Z') ? 26\
    \ : (c >= 'a' && c <= 'z') ? 26 : (c >= '0' && c <= '9') ? 10 : 0;\n\t}\n\treturn\
    \ count;\n}", "{\n    long count = 0;\n    foreach(char, string) {\n        count\
    \ += 1;\n    }\n    return count;\n}", "{\n    long count = 0;\n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        string temp = string[i];\n  \
    \      for(int j = 0; j < temp.length(); j++)\n        {\n            char c =\
    \ temp[j];\n            if(c == ' ')\n            {\n                count++;\n\
    \            }\n            else\n            {\n                count = 0;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n}",
  "{\n    long count = 0;\n    foreach(char,string){\n        if(!isalpha(string[i]))\
    \ count++;\n    }\n    return count;\n}", "{\n\tlong count = 0;\n\tforeach(char\
    \ c in string)\n\t{\n\t\tif(c == c.toLower())\n\t\t\tcount++;\n\t\telse if(c ==\
    \ c.toUpper())\n\t\t\tcount++;\n\t\telse\n\t\t\tcount += 2;\n\t}\n\treturn count;\n\
    }", "{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count\
    \ += (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26 : (c >= '0' &&\
    \ c <= '9') ? 10 : 0;\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(char c in string) \n    {\n        count += 1;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    long count\
    \ = 0;\n    \n    foreach(char c in string)\n    {\n        foreach(char c2 in\
    \ string)\n        {\n            if(c == c2)\n            {\n               \
    \ count++;\n            }\n        }\n    }\n    \n    return count;\n}", "{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.isLower(c))\n        {\n         \
    \   count += 1;\n        }\n    }\n    return count;\n}", "{\n    long count =\
    \ 0;\n    \n    foreach(char, string) {\n        char c = char;\n        \n  \
    \      if (c >= 'A' && c <= 'Z') {\n            count += 1;\n        }\n    }\n\
    \    \n    return count;\n}", "{\n    long count = 0;\n    \n    foreach(char,\
    \ string)\n    {\n        count += 1;\n    }\n    \n    return count;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
