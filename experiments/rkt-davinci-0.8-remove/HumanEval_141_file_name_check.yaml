name: HumanEval_141_file_name_check
language: rkt
prompt: "#lang racket\n\n;; Create a function which takes a string representing a\
  \ file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
  \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
  \ the following conditions \n;; are met:\n;; - There should not be more than three\
  \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly one\
  \ dot '.'\n;; - The substring before the dot should not be empty, and it starts\
  \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The substring\
  \ after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n(define\
  \ (file_name_check file_name)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
  \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
  \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
  )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
  \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\")\
  \ \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\"\
  ) \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n   \
  \ (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\"\
  )\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
  \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
  \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
  ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
  \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\
  \n(test-humaneval)"
completions: ["  (define (is_dot c) (= c #\\.))\n  (define (is_alphabet c)\n    (or\
    \ (and (>= c #\\a) (<= c #\\z)) (and (>= c #\\A) (<= c #\\Z))))\n  (define (is_digit\
    \ c) (and (>= c #\\0) (<= c #\\9)))\n  (define (is_valid c)\n    (or (is_dot c)\
    \ (is_alphabet c) (is_digit c)))\n  (let loop ([chars (string->list file_name)]\n\
    \             [num_of_dots 0]\n             [num_of_digits 0]\n             [first_char\
    \ #\\])\n    (cond [(empty? chars) #t]\n          [(not (is_valid (car chars)))\
    \ #f]\n          [(is_dot (car chars)) (loop (cdr chars) (+ num_of_dots 1) num_of_digits\
    \ first_char)]\n          [(is_digit (car chars)) (loop (cdr chars) num_of_dots\
    \ (+ num_of_digits 1) first_char)]\n          [(is_alphabet (car chars)) (loop\
    \ (cdr chars) num_of_dots num_of_digits (car chars))]\n          [else (and (=\
    \ num_of_dots 1)\n                     (= num_of_digits 0)\n                 \
    \    (is_alphabet first_char)\n                     (or (string=? (substring file_name\
    \ (add1 (string-index file_name #\\.)) (string-length file_name)) \"txt\")\n \
    \                        (string=? (substring file_name (add1 (string-index file_name\
    \ #\\.)) (string-length file_name)) \"exe\")\n                         (string=?\
    \ (substring file_name (add1 (string-index file_name #\\.)) (string-length file_name))\
    \ \"dll\")))])))", "  (and\n   ;; Not more than 3 digits\n   (not (regexp-match\
    \ #rx\"\\\\d{4}\" file_name))\n   ;; One dot\n   (not (regexp-match #rx\"\\\\\
    .{2}\" file_name))\n   ;; Substring before the dot should not be empty, and it\
    \ starts with a letter from \n   ;; the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \   (regexp-match #rx\"^[a-zA-Z]+\\\\.\" file_name)\n   ;; The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n   (or\n    (regexp-match\
    \ #rx\"\\\\.txt$\" file_name)\n    (regexp-match #rx\"\\\\.exe$\" file_name)\n\
    \    (regexp-match #rx\"\\\\.dll$\" file_name))))\n", "  (and (regexp-match #rx\"\
    ^[a-zA-Z]+\\\\.txt$\" file_name)\n       (not (> (count (regexp-match-all #rx\"\
    [0-9]\" file_name) ) 3))\n       (not (empty? (regexp-match-all #rx\"\\\\.\" file_name)))\n\
    \       (not (empty? (regexp-match-all #rx\"\\\\.\" file_name)))\n       (not\
    \ (empty? (regexp-match-all #rx\"^[a-zA-Z]+\" file_name)))\n       (not (empty?\
    \ (regexp-match-all #rx\"\\\\.txt$\" file_name)))\n       (not (empty? (regexp-match-all\
    \ #rx\"\\\\.exe$\" file_name)))\n       (not (empty? (regexp-match-all #rx\"\\\
    \\.dll$\" file_name)))))\n", "  (cond\n    [(regexp-match #rx\"[a-zA-Z]*[.][tT][xX][tT]\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"[a-zA-Z]*[.][eE][xX][eE]\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"[a-zA-Z]*[.][dD][lL][lL]\" file_name) \"Yes\"\
    ]\n    [else \"No\"]))\n", "  (cond\n    [(null? file_name) 'No]\n    [(integer?\
    \ (string->number (substring file_name 0 1))) 'No]\n    [(equal? 1 (count-matches\
    \ \".\" file_name)) 'Yes]\n    [(equal? 3 (count-matches \".\" file_name)) 'No]\n\
    \    [(or (equal? \"txt\" (substring file_name (add1 (substring-index file_name\
    \ \".\")) 4))\n         (equal? \"exe\" (substring file_name (add1 (substring-index\
    \ file_name \".\")) 4))\n         (equal? \"dll\" (substring file_name (add1 (substring-index\
    \ file_name \".\")) 4))) 'Yes]\n    [else 'No]))\n", "  (local [(define valid-extensions\
    \ '(\"txt\" \"exe\" \"dll\"))]\n    (cond [(or (string=? \"\" file_name) \n  \
    \             (string=? (string-take file_name 1) \".\"))\n           \"No\"]\n\
    \          [(string=? \"\" (string-trim (string-take file_name 1)))\n        \
    \   \"No\"]\n          [(string=? \"\" (string-trim (string-split (string-take\
    \ file_name 1) \".\")))\n           \"No\"]\n          [(string=? \"\" (string-trim\
    \ (string-take (string-split (string-take file_name 1) \".\") 1)))\n         \
    \  \"No\"]\n          [(string=? \"\" (string-trim (string-take (string-split\
    \ (string-take file_name 1) \".\") 2)))\n           \"No\"]\n          [(string=?\
    \ \"\" (string-trim (string-split (string-take file_name 1) \".\")))\n       \
    \    \"No\"]\n          [(not (member (string-trim (string-take (string-split\
    \ (string-take file_name 1) \".\") 2)) valid-extensions))\n           \"No\"]\n\
    \          [(not (regexp-match #rx\"[A-Za-z]\" (string-trim (string-take (string-split\
    \ (string-take file_name 1) \".\") 1))))\n           \"No\"]\n          [(< (string-length\
    \ (string-trim (string-take (string-split (string-take file_name 1) \".\") 1)))\n\
    \              1)\n           \"No\"]\n          [(> (string-length (string-trim\
    \ (string-take (string-split (string-take file_name 1) \".\") 1)))\n         \
    \     8)\n           \"No\"]\n          [(not (regexp-match #rx\"[0-9]\" (string-trim\
    \ (string-split (string-take file_name 1) \".\"))))\n           \"No\"]\n    \
    \      [(regexp-match #rx\"[0-9]\" (string-trim (string-split (string-take file_name\
    \ 1) \".\")))\n           (cond [(> (string-length (string-trim (string-split\
    \ (string-take file_name", "  (cond\n    ((and (regexp-match? (regexp \"^[a-zA-Z][^.]*\\\
    \\.[^0-9][^.]*$\") file_name)\n          (regexp-match? (regexp \"^[^0-9]*$\"\
    ) (regexp-replace* #rx\"[^0-9]+\" file_name \"\"))\n          (regexp-match? (regexp\
    \ \"\\\\.txt$|\\\\.exe$|\\\\.dll$\") file_name))\n     \"Yes\")\n    (else \"\
    No\")))\n", "  (let* ([number-regexp \"[0-9]\"]\n         [latin-letter-regexp\
    \ \"[a-zA-Z]\"]\n         [pre-extension-regexp (string-append latin-letter-regexp\
    \ \"[a-zA-Z0-9]*\")]\n         [extension-regexp (string-append (regexp-quote\
    \ \".\")\n                                          (regexp-quote \"txt\")\n \
    \                                         \"\\\\|\"\n                        \
    \                  (regexp-quote \"exe\")\n                                  \
    \        \"\\\\|\"\n                                          (regexp-quote \"\
    dll\"))])\n    (cond\n      [(> (regexp-match-positions number-regexp file_name)\
    \ 3) \"No\"]\n      [(regexp-match (string-append number-regexp extension-regexp)\
    \ file_name) \"No\"]\n      [(regexp-match (string-append pre-extension-regexp\
    \ (regexp-quote \".\")\n                                    (regexp-quote \".\"\
    ) extension-regexp) file_name) \"No\"]\n      [(regexp-match (string-append pre-extension-regexp\
    \ extension-regexp) file_name) \"Yes\"]\n      [else \"No\"])))", "  (cond\n \
    \   [(file_name_check_digits file_name)\n     (file_name_check_dot file_name)]\n\
    \    [else \"No\"]))\n", "  (if (regexp-match? #rx\"[0-9]{4}\" file_name)\n  \
    \    \"No\"\n      (if (regexp-match? #rx\"[0-9]{3}\" file_name)\n          (if\
    \ (regexp-match? #rx\"[a-zA-Z][a-zA-Z0-9_]*[.][txt|exe|dll]\" file_name)\n   \
    \           \"Yes\"\n              \"No\")\n          \"No\")))\n", "  (or (regexp-match\
    \ #rx\"^[a-zA-Z]\\w{0,9}\\.dll$\" file_name)\n      (regexp-match #rx\"^[a-zA-Z]\\\
    w{0,9}\\.exe$\" file_name)\n      (regexp-match #rx\"^[a-zA-Z]\\w{0,9}\\.txt$\"\
    \ file_name)))", "  (cond\n    [(and \n      (not (zero? (regexp-count \"\\\\\
    .\" file_name)))\n      (= 1 (regexp-count \"\\\\.\" file_name))\n      (not (regexp-match\
    \ #rx\"^[a-zA-Z]\" file_name))\n      (not (regexp-match #rx\"\\\\.\" file_name))\n\
    \      (not (zero? (regexp-count \"\\\\d{4,}\" file_name)))\n      (or \n    \
    \    (regexp-match #rx\"\\\\.txt$\" file_name)\n        (regexp-match #rx\"\\\\\
    .exe$\" file_name)\n        (regexp-match #rx\"\\\\.dll$\" file_name))\n    )\n\
    \    \"Yes\"]\n    [else \"No\"]\n  )\n)", "  (if (and (string-match #rx\"[0-9]\"\
    \ file_name)\n           (string-match #rx\".\" file_name)\n           (string-match\
    \ #rx\"[A-Za-z]\" file_name)\n           (string-match #rx\"[txt, exe, dll]\"\
    \ file_name))\n      'Yes\n      'No))", "    (cond\n        ((empty? file_name)\
    \ 'No)\n        ((not (and (regexp-match? #rx\"^[a-zA-Z]\" file_name)\n      \
    \             (or (regexp-match? #rx\"txt$\" file_name)\n                    \
    \   (regexp-match? #rx\"exe$\" file_name)\n                       (regexp-match?\
    \ #rx\"dll$\" file_name))\n                   (regexp-match? #rx\"^\\\\w+\\\\\
    .\\\\w+$\" file_name)\n                   (not (regexp-match? #rx\"^\\\\w{4,}$\"\
    \ file_name)))) 'No)\n        (else 'Yes)))\n", "  (define (digit? c) (regexp-match\
    \ #rx\"[0-9]\" c))\n  (define (digit_count str)\n    (define (inner str d)\n \
    \     (cond ((null? str) d)\n            ((digit? (car str)) (inner (cdr str)\
    \ (+ d 1)))\n            (else (inner (cdr str) d))))\n    (inner str 0))\n  (cond\
    \ ((null? file_name) 'Yes)\n        ((digit_count file_name) 'No)\n        ((not\
    \ (regexp-match #rx\"\\.\" file_name)) 'No)\n        ((not (regexp-match #rx\"\
    [a-zA-Z]\" (substring file_name 0 (regexp-match-end #rx\"\\.\" file_name)))) 'No)\n\
    \        ((not (member (substring file_name (regexp-match-end #rx\"\\.\" file_name)\
    \ (string-length file_name)) '(\"txt\" \"exe\" \"dll\"))) 'No)\n        (else\
    \ 'Yes)))\n", "  (cond [(valid? file_name) \"Yes\"]\n        [else \"No\"]))\n",
  "    (if (and (string-length file_name)\n             (regexp-match? #rx\"^[a-zA-Z]+[^\\\
    .]*(\\.[^\\.]{1,3}|\\.)\\.(txt|exe|dll)$\" file_name))\n        \"Yes\"\n    \
    \    \"No\"))\n", "  (define (valid? file_name)\n    (define (no-more-than-three-digits\
    \ s)\n      (if (zero? (remainder (count (lambda (x) (regexp-match #rx\"[0-9]\"\
    \ x))\n                                    (string->list s))\n               \
    \             4))\n          #t\n          #f))\n    (define (exactly-one-dot\
    \ s)\n      (if (zero? (remainder (count (lambda (x) (regexp-match #rx\"\\.\"\
    \ x))\n                                    (string->list s))\n               \
    \             2))\n          #t\n          #f))\n    (define (name-before-dot\
    \ s)\n      (and (not (zero? (string-length (regexp-replace* #rx\"\\..*\" s \"\
    \"))))\n           (not (zero? (string-length (regexp-replace* #rx\"[a-zA-Z]\"\
    \ s \"\"))))))\n    (define (name-after-dot s)\n      (let ((extension (regexp-replace*\
    \ #rx\"^.*\\.\" s \"\")))\n        (or (string=? extension \"txt\")\n        \
    \    (string=? extension \"exe\")\n            (string=? extension \"dll\"))))\n\
    \    (and (no-more-than-three-digits file_name)\n         (exactly-one-dot file_name)\n\
    \         (name-before-dot file_name)\n         (name-after-dot file_name)))\n\
    \  (if (valid? file_name)\n      \"Yes\"\n      \"No\"))\n", "  (local [(define\
    \ file_name_valid?\n            (lambda (file_name)\n              (and\n    \
    \           (string-ci=? (regexp-replace* #rx\"[^.]\" file_name \"\") \".\")\n\
    \               (or (string-ci=? (regexp-replace* #rx\"[^a-zA-Z]\" (substring\
    \ file_name 0 (string-index file_name #\\.)) \"\") \"\") #f)\n               (or\
    \ (string-ci=? (regexp-replace* #rx\"[^0-9]\" file_name \"\") \"\") #f)\n    \
    \           (and (not (string-length (regexp-replace* #rx\"[^0-9]\" file_name\
    \ \"\"))) #t)\n               (or (string-ci=? (substring file_name (+ (string-index\
    \ file_name #\\.) 1) (string-length file_name)) \"txt\")\n                   (string-ci=?\
    \ (substring file_name (+ (string-index file_name #\\.) 1) (string-length file_name))\
    \ \"exe\")\n                   (string-ci=? (substring file_name (+ (string-index\
    \ file_name #\\.) 1) (string-length file_name)) \"dll\")))))\n    (cond\n    \
    \  [(file_name_valid? file_name) \"Yes\"]\n      [else \"No\"]))\n  )\n", "  (if\n\
    \      (and (regexp-match \"^[a-zA-Z]+\\\\d{0,3}\\\\.txt$\" file_name)\n     \
    \      (regexp-match \"^[a-zA-Z]+\\\\d{0,3}\\\\.exe$\" file_name)\n          \
    \ (regexp-match \"^[a-zA-Z]+\\\\d{0,3}\\\\.dll$\" file_name))\n      'Yes\n  \
    \    'No))\n", "    (let* ([digits (string-length (regexp-match #rx\"[0-9]\" file_name))]\n\
    \           [dot (string-length (regexp-match #rx\".\" file_name))]\n        \
    \   [substrings (regexp-match #rx\"^[a-zA-Z]+\\.txt$|^[a-zA-Z]+\\.exe$|^[a-zA-Z]+\\\
    .dll$\" file_name)])\n        (cond [(and (<= 3 digits) (= 1 dot) (not (empty?\
    \ substrings))) \"Yes\"]\n              [else \"No\"])))\n", "  (local [(define\
    \ (valid-name? file_name)\n             (and (regexp-match #rx\"^[a-zA-Z]([a-zA-Z]|[0-9]){0,8}$\"\
    \n                                file_name)\n                  (regexp-match\
    \ #rx\"^(([a-zA-Z]([a-zA-Z]|[0-9]){0,8}\\\\.)?[a-zA-Z]([a-zA-Z]|[0-9]){0,8}\\\\\
    .){1}(txt|exe|dll)$\"\n                                file_name)))\n        \
    \  (define (digits-count file_name)\n            (cond\n              [(regexp-match\
    \ #rx\"[0-9]\" file_name)\n               (+ 1 (digits-count (string-take file_name\
    \ 1)))]\n              [else 0]))\n          (define (count-dot file_name)\n \
    \           (cond\n              [(regexp-match #rx\"\\\\.\" file_name)\n    \
    \           (+ 1 (count-dot (string-take file_name 1)))]\n              [else\
    \ 0]))]\n    (cond\n      [(and (= (digits-count file_name) 3)\n            (=\
    \ (count-dot file_name) 1)\n            (valid-name? file_name)) \"Yes\"]\n  \
    \    [else \"No\"])))\n", "  (define (has_digit? s)\n    (cond\n      [(empty?\
    \ s) false]\n      [(char-numeric? (first s)) true]\n      [else (has_digit? (rest\
    \ s))]))\n  (define (num_of_digits s)\n    (cond\n      [(empty? s) 0]\n     \
    \ [(char-numeric? (first s)) (+ 1 (num_of_digits (rest s)))]\n      [else (num_of_digits\
    \ (rest s))]))\n  (define (has_dot? s)\n    (cond\n      [(empty? s) false]\n\
    \      [(char=? (first s) #\\.) true]\n      [else (has_dot? (rest s))]))\n  (define\
    \ (has_extension? s)\n    (cond\n      [(empty? s) false]\n      [(member (list->string\
    \ (reverse s)) (list \"txt\" \"exe\" \"dll\")) true]\n      [else (has_extension?\
    \ (reverse (rest (reverse s))))]))\n  (define (has_valid_chars? s)\n    (cond\n\
    \      [(empty? s) true]\n      [(not (char-alphabetic? (first s))) (has_valid_chars?\
    \ (rest s))]\n      [else (char-alphabetic? (first s))]))\n  (cond\n    [(not\
    \ (has_dot? file_name)) 'No]\n    [(> (num_of_digits file_name) 3) 'No]\n    [(not\
    \ (has_valid_chars? (reverse (rest (reverse file_name))))) 'No]\n    [(not (has_extension?\
    \ (reverse (rest (reverse file_name))))) 'No]\n    [else 'Yes]))\n", "  (if (and\n\
    \       (<= 3 (length (regexp-match* #rx\"\\d+\" file_name)))\n       (= 1 (length\
    \ (regexp-match* #rx\"\\.\" file_name)))\n       (regexp-match* #rx\"[a-zA-Z][a-zA-Z0-9]+\\\
    .\" file_name)\n       (or (regexp-match* #rx\"\\.txt$\" file_name)\n        \
    \   (regexp-match* #rx\"\\.exe$\" file_name)\n           (regexp-match* #rx\"\\\
    .dll$\" file_name)))\n      \"Yes\"\n      \"No\"))\n", "  (define (digit? c)\n\
    \    (char=? c #\\0)\n    (char=? c #\\1)\n    (char=? c #\\2)\n    (char=? c\
    \ #\\3)\n    (char=? c #\\4)\n    (char=? c #\\5)\n    (char=? c #\\6)\n    (char=?\
    \ c #\\7)\n    (char=? c #\\8)\n    (char=? c #\\9))\n  (define (alpha? c)\n \
    \   (char-alpha? c))\n  (define (letter? c)\n    (or (char-lower-case? c) (char-upper-case?\
    \ c)))\n  (define (alnum? c)\n    (or (digit? c) (letter? c)))\n  (define (dot-dot?\
    \ c)\n    (char=? c #\\.))\n  (define (one-dot? s)\n    (cond ((string-empty?\
    \ s) #f)\n          ((dot-dot? (string-ref s 0)) #t)\n          (else (one-dot?\
    \ (substring s 1)))))\n  (define (num-of-digits s)\n    (cond ((string-empty?\
    \ s) 0)\n          ((digit? (string-ref s 0)) (+ 1 (num-of-digits (substring s\
    \ 1))))\n          (else (num-of-digits (substring s 1)))))\n  (define (no-more-than-three-digits\
    \ s)\n    (if (<= (num-of-digits s) 3)\n        #t\n        #f))\n  (define (first-letter-is-letter\
    \ s)\n    (if (letter? (string-ref s 0))\n        #t\n        #f))\n  (define\
    \ (after-dot-txt-exe-dll s)\n    (if (or (string=? (substring s (add1 (string-index\
    \ s #\\.))) \"txt\")\n            (string=? (substring s (add1 (string-index s\
    \ #\\.))) \"exe\")\n            (string=? (substring s (add1 (string-index s #",
  "  (cond\n    [(string-empty? file_name) 'No]\n    [(not (regexp-match #rx\"[a-zA-Z]\"\
    \ file_name)) 'No]\n    [(not (regexp-match #rx\"^[a-zA-Z].*\\\\.txt$\" file_name))\
    \ 'No]\n    [(not (regexp-match #rx\"^[a-zA-Z].*\\\\.exe$\" file_name)) 'No]\n\
    \    [(not (regexp-match #rx\"^[a-zA-Z].*\\\\.dll$\" file_name)) 'No]\n    [(not\
    \ (regexp-match #rx\"^[a-zA-Z].*\\\\.[a-zA-Z]{3}$\" file_name)) 'No]\n    [(not\
    \ (regexp-match #rx\"^[a-zA-Z].*[0-9]{3}\\\\.[a-zA-Z]{3}$\" file_name)) 'No]\n\
    \    [else 'Yes]))\n", "  (if (regexp-match #rx\"\\\\([a-z]{1,}|[A-Z]{1,}\\\\\
    )[0-9]{0,3}\\\\.txt\" file_name)\n      \"yes\"\n      \"no\"))\n", "  (cond\n\
    \    [(or (or (string=? file_name \"\") (empty? file_name)) (not (regexp-match\
    \ #rx\"^[a-zA-Z]*$\" (substring file_name 0 1)))) 'No]\n    [(and (not (regexp-match\
    \ #rx\"^[a-zA-Z]*[^.][a-zA-Z]*$\" (substring file_name 0 (string-index file_name\
    \ #\\.))))\n          (not (regexp-match #rx\"^[a-zA-Z]*\\\\.[a-zA-Z]*$\" (substring\
    \ file_name 0 (string-index file_name #\\.))))) 'No]\n    [(not (string=? (substring\
    \ file_name (+ (string-index file_name #\\.) 1) (string-length file_name)) \"\
    txt\")) (cond\n      [(not (string=? (substring file_name (+ (string-index file_name\
    \ #\\.) 1) (string-length file_name)) \"exe\")) (cond\n        [(not (string=?\
    \ (substring file_name (+ (string-index file_name #\\.) 1) (string-length file_name))\
    \ \"dll\")) 'No]\n        [else 'Yes])]\n      [else 'Yes])]\n    [else 'Yes]))\n",
  "  (and\n   (valid-char-count file_name #rx\"[0-9]\")\n   (dot-position file_name)\n\
    \   (valid-before-dot file_name)\n   (valid-after-dot file_name)))\n", "  (define\
    \ name_parts (regexp-split file_name \"\\\\.\"))\n  (define name (first name_parts))\n\
    \  (define ext (last name_parts))\n  (define n_digits (regexp-split (regexp-replace\
    \ name \"[^0-9]\" \"\") \"\"))\n  (if (and (= 1 (length name_parts))\n       \
    \    (&gt; (length name) 0)\n           (&lt;= (length n_digits) 3)\n        \
    \   (regexp-match? #rx\"[a-zA-Z]+\" name)\n           (member ext '(\"txt\" \"\
    exe\" \"dll\")))\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(string=? file_name\
    \ \"\") \"No\"]\n    [(string=? file_name \"a\") \"No\"]\n    [(string=? file_name\
    \ \"a.\") \"No\"]\n    [(string=? file_name \"a.txt\") \"Yes\"]\n    [(string=?\
    \ file_name \"a.x.txt\") \"No\"]\n    [(string=? file_name \"a123.txt\") \"Yes\"\
    ]\n    [(string=? file_name \"a123.txt123\") \"No\"]\n    [(string=? file_name\
    \ \"a123.txt123.txt\") \"No\"]\n    [(string=? file_name \"a123.dll\") \"Yes\"\
    ]\n    [(string=? file_name \"a123.dll.txt\") \"No\"]\n    [(string=? file_name\
    \ \"a123.dll.exe\") \"No\"]\n    [(string=? file_name \"a123.exe\") \"Yes\"]\n\
    \    [(string=? file_name \"a123.exe.txt\") \"No\"]\n    [(string=? file_name\
    \ \"a123.exe.exe\") \"No\"]\n    [(string=? file_name \"abc123.exe\") \"Yes\"\
    ]\n    [(string=? file_name \"abc123.exe123\") \"No\"]\n    [(string=? file_name\
    \ \"abc123.exe.txt\") \"No\"]\n    [(string=? file_name \"abc123.exe.exe\") \"\
    No\"]\n    [(string=? file_name \"abc123.txt123\") \"No\"]\n    [(string=? file_name\
    \ \"abc123.txt123.txt\") \"No\"]\n    [(string=? file_name \"abc123.txt123.exe\"\
    ) \"No\"]\n    [(string=? file_name \"abc123.txt\") \"Yes\"]\n    [(string=? file_name\
    \ \"abc123.txt.txt\") \"No\"]\n    [(string=? file_name \"abc123.txt.exe\") \"\
    No\"]\n    [(string=? file_name \"abc123.dll123\") \"No\"]\n    [(string=? file_name\
    \ \"abc123.dll123.txt\") \"No\"]\n    [(string=? file_name \"abc123.dll123.exe\"\
    )", "  (letrec ([substring_before_dot (substring file_name 0 (string-index file_name\
    \ #\\.))]\n           [substring_after_dot (substring file_name (+ 1 (string-index\
    \ file_name #\\.)))])\n    (cond\n      [(string=? substring_after_dot \"\") \"\
    No\"]\n      [(string-member? #\\0 substring_before_dot) \"No\"]\n      [(string-member?\
    \ #\\1 substring_before_dot) \"No\"]\n      [(string-member? #\\2 substring_before_dot)\
    \ \"No\"]\n      [(string-member? #\\3 substring_before_dot) \"No\"]\n      [(string-member?\
    \ #\\4 substring_before_dot) \"No\"]\n      [(string-member? #\\5 substring_before_dot)\
    \ \"No\"]\n      [(string-member? #\\6 substring_before_dot) \"No\"]\n      [(string-member?\
    \ #\\7 substring_before_dot) \"No\"]\n      [(string-member? #\\8 substring_before_dot)\
    \ \"No\"]\n      [(string-member? #\\9 substring_before_dot) \"No\"]\n      [(string=?\
    \ substring_after_dot \"exe\") \"Yes\"]\n      [(string=? substring_after_dot\
    \ \"txt\") \"Yes\"]\n      [(string=? substring_after_dot \"dll\") \"Yes\"]\n\
    \      [else \"No\"])))\n", "  (cond\n    [(not (regexp-match? #rx\"^[a-zA-Z]+[a-zA-Z0-9]*(.txt|.exe|.dll)$\"\
    \ file_name)) \"No\"]\n    [else \"Yes\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", " \
    \ (local [(define num? (lambda (c) (char-numeric? c)))\n          (define dot?\
    \ (lambda (c) (char=? c #\\.)))\n          (define alpha? (lambda (c) (and (char-letter?\
    \ c) (not (char-upper-case? c)))))\n          (define (valid_ext? ext)\n     \
    \       (memq ext '(\"txt\" \"exe\" \"dll\")))\n          (define (valid? str)\n\
    \            (let* ([splitted (string-split str #\\.)]\n                   [f-name\
    \ (first splitted)]\n                   [ext (second splitted)])\n           \
    \   (and (not (empty? f-name))\n                   (and (not (apply + (map num?\
    \ f-name)))\n                        (alpha? (string-ref f-name 0)))\n       \
    \            (valid_ext? ext))))]\n    (if (valid? file_name)\n        \"Yes\"\
    \n        \"No\")))\n", "  (define file_exts\n    (list \"txt\" \"exe\" \"dll\"\
    ))\n  (define digits\n    (list \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\"\
    \ \"8\" \"9\"))\n  (define (is_digit? c)\n    (cond ((null? digits) #f)\n    \
    \      ((string=? c (car digits)) #t)\n          (else (is_digit? c (cdr digits)))))\n\
    \  (define (count_digits str)\n    (cond ((null? str) 0)\n          ((is_digit?\
    \ (car str)) (+ 1 (count_digits (cdr str))))\n          (else (count_digits (cdr\
    \ str)))))\n  (define (is_char? c)\n    (and (not (is_digit? c))\n         (not\
    \ (string=? \".\" c))))\n  (define (is_valid_extension? extension)\n    (cond\
    \ ((null? file_exts) #f)\n          ((string=? extension (car file_exts)) #t)\n\
    \          (else (is_valid_extension? extension (cdr file_exts)))))\n  (define\
    \ (first_char_is_valid? str)\n    (or (char=? (string-ref str 0) #\\a)\n     \
    \   (char=? (string-ref str 0) #\\b)\n        (char=? (string-ref str 0) #\\c)\n\
    \        (char=? (string-ref str 0) #\\d)\n        (char=? (string-ref str 0)\
    \ #\\e)\n        (char=? (string-ref str 0) #\\f)\n        (char=? (string-ref\
    \ str 0) #\\g)\n        (char=? (string-ref str 0) #\\h)\n        (char=? (string-ref\
    \ str 0) #\\i)\n        (char=? (string-ref str 0) #\\j)\n        (char=? (string-ref\
    \ str 0) #\\k)\n        (char=? (string-ref str 0) #\\l)\n        (char=? (string-ref\
    \ str 0) #", "  (cond\n    [(and\n      (not (> (length (regexp-match #rx\"[0-9]\"\
    \ file_name)) 3))\n      (= (length (regexp-match #rx\"\\.\" file_name)) 1)\n\
    \      (and\n        (not (empty? (regexp-match #rx\"[a-zA-Z]+\" file_name)))\n\
    \        (not (empty? (regexp-match #rx\"[a-zA-Z]+\\.[a-zA-Z]+\" file_name)))\n\
    \        (member (regexp-match #rx\"\\.[a-zA-Z]+\" file_name) '(\"txt\" \"exe\"\
    \ \"dll\"))))\n      \"Yes\"]\n    [else \"No\"]))\n", "    (define (is_valid_file_name\
    \ file_name)\n        (and (is_valid_file_name_pre_dot file_name)\n          \
    \   (is_valid_file_name_post_dot file_name)))\n    (define (is_valid_file_name_pre_dot\
    \ file_name)\n        (define (digit? c)\n            (and (&gt;= c #\\0)\n  \
    \               (&lt;= c #\\9)))\n        (define (post_dot-start file_name)\n\
    \            (string-index file_name #\\.))\n        (define (pre_dot file_name)\n\
    \            (substring file_name 0 (post_dot-start file_name)))\n        (define\
    \ (has_at_most_three_digits? str)\n            (&lt;= (length (list-&gt;set (string-&gt;list\
    \ str))) 3))\n        (define (is_valid_latin_char c)\n            (or (and (&gt;=\
    \ c #\\a)\n                     (&lt;= c #\\z))\n                (and (&gt;= c\
    \ #\\A)\n                     (&lt;= c #\\Z))))\n        (and (is_valid_latin_char\
    \ (string-ref file_name 0))\n             (not (has_at_most_three_digits? (pre_dot\
    \ file_name)))\n             (not (equal? (post_dot-start file_name) 0))))\n \
    \   (define (is_valid_file_name_post_dot file_name)\n        (define (post_dot-start\
    \ file_name)\n            (string-index file_name #\\.))\n        (define (post_dot\
    \ file_name)\n            (substring file_name (add1 (post_dot-start file_name))\
    \ (string-length file_name)))\n        (or (equal? (post_dot file_name) \"txt\"\
    )\n            (equal? (post_dot file_name) \"exe\")\n            (equal? (post_dot\
    \ file_name) \"dll\")))\n    (if (is_valid_file_name file_name)\n        \"Yes\"\
    \n        \"No\"))\n", "  (let ([chars file_name])\n    (cond [(regexp-match #rx\"\
    \\\\.txt$\" file_name) 'Yes]\n          [(regexp-match #rx\"\\\\.exe$\" file_name)\
    \ 'Yes]\n          [(regexp-match #rx\"\\\\.dll$\" file_name) 'Yes]\n        \
    \  [else 'No])))\n", "    (let* ([file_name_length (string-length file_name)]\n\
    \           [count_of_digits (count-digits file_name)]\n           [count_of_dots\
    \ (count-dots file_name)]\n           [file_name_without_dot (remove-dot file_name)])\n\
    \      (cond\n        [(or (= file_name_length 0) \n             (= count_of_digits\
    \ 4) \n             (= count_of_dots 0) \n             (or (string-prefix? \"\
    .\" file_name) \n                 (string-prefix? \"..\" file_name))\n       \
    \      (string-prefix? \"-\" file_name)\n             (string-prefix? \"_\" file_name)\n\
    \             (not (is-valid-prefix file_name_without_dot))\n             (not\
    \ (is-valid-suffix file_name_without_dot)))] 'No)\n        [else 'Yes])))\n",
  "  (and (regexp-match? #rx\"^([a-zA-Z])([a-zA-Z]|[0-9]){0,2}(\\.[a-zA-Z]){1}$\"\
    \ file_name)\n       (member (string-&gt;symbol (string-upcase (substring file_name\
    \ (add1 (string-index file_name #\\.))))) '(TXT EXE DLL))))\n", "  (define (valid_digits_counter)\n\
    \    (if (empty? file_name) 0\n        (if (char-numeric? (first file_name))\n\
    \            (+ 1 (valid_digits_counter))\n            (valid_digits_counter))))\n\
    \  (define (valid_dot_counter)\n    (if (empty? file_name) 0\n        (if (char=?\
    \ (first file_name) #\\.)\n            (+ 1 (valid_dot_counter))\n           \
    \ (valid_dot_counter))))\n  (define (valid_letter_prefix)\n    (if (empty? file_name)\
    \ false\n        (if (char-alphabetic? (first file_name))\n            true\n\
    \            (valid_letter_prefix))))\n  (define (valid_suffix)\n    (if (empty?\
    \ file_name) false\n        (if (char=? (first file_name) #\\.)\n            (string=?\
    \ \"txt\" (rest file_name))\n            (valid_suffix))))\n  (if (or (= 3 (valid_digits_counter))\
    \ (not (= 1 (valid_dot_counter))) (not (valid_letter_prefix)) (not (valid_suffix)))\n\
    \      \"No\"\n      \"Yes\"))\n", "    (let ((extensions '((\"txt\") (\"exe\"\
    ) (\"dll\")))\n          (before-dot (regexp-match #rx\"^[a-zA-Z][^.]*\" file_name))\n\
    \          (after-dot (regexp-match #rx\"[^.]*\\.\" file_name)))\n        (cond\n\
    \            [(string-contains? file_name #\\.) #f]\n            [(string-&gt;number\
    \ (string-&gt;list file_name)) &gt; 3]\n            [(string-ci=? (string-upcase\
    \ before-dot) \"BEFORE.TXT\") #t]\n            [(string-ci=? (string-upcase before-dot)\
    \ \"BEFORE.EXE\") #t]\n            [(string-ci=? (string-upcase before-dot) \"\
    BEFORE.DLL\") #t]\n            [else #f])))\n", "  (cond\n    [(or (regexp-match\
    \ #rx\"^[^a-zA-Z][^.]*$\" file_name) (regexp-match #rx\"^[a-zA-Z][^.]*\\\\.[^(txt|exe|dll)]$\"\
    \ file_name)) (display \"No\")]\n    [(regexp-match #rx\"^[a-zA-Z][^.]*\\\\.(txt|exe|dll)$\"\
    \ file_name) (display \"Yes\")]))", "  (let* ((digits (regexp-match #rx\"\\\\\
    d{4,}\" file_name))\n         (digit-count (if digits (string-length digits) 0))\n\
    \         (dots (regexp-match #rx\"\\.\" file_name))\n         (dot-count (if\
    \ dots (string-length dots) 0))\n         (substr-before-dot (substring file_name\
    \ 0 (string-index file_name \".\")))\n         (substr-after-dot (substring file_name\
    \ (add1 (string-index file_name \".\")) (string-length file_name)))\n        \
    \ (substr-first-letter (substring substr-before-dot 0 1)))\n    (cond\n      [(or\
    \ (= digit-count 0) (= digit-count 3)) (if (= dot-count 1)\n                 \
    \                                  (if (and (regexp-match #rx\"[a-zA-Z]\" substr-first-letter)\n\
    \                                                            (member? substr-after-dot\
    \ '(\"txt\" \"exe\" \"dll\")))\n                                             \
    \          \"Yes\"\n                                                       \"\
    No\")\n                                                   \"No\")]\n      [else\
    \ \"No\"])))\n", "  (cond \n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}.[a-zA-Z]{3}$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))", "  (cond\n    [(regexp-match? #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))", "  (and (<= (string-length (regexp-replace* #rx\"[0-9]\" file_name \"\
    \")) 3)\n       (= (string-length (regexp-replace* #rx\"\\\\.\" file_name \"\"\
    )) \n          (- (string-length file_name) 1))\n       (regexp-match? #rx\"^[a-zA-Z]+$\"\
    \ (substring file_name 0 (string-index file_name #\\.)))\n       (or (regexp-match?\
    \ #rx\"\\\\.txt$\" file_name)\n           (regexp-match? #rx\"\\\\.exe$\" file_name)\n\
    \           (regexp-match? #rx\"\\\\.dll$\" file_name))))\n", "  ;; TODO: write\
    \ your code here.\n  (file_name_check \"myfile.exe\") ;; ==> 'Yes'\n  (file_name_check\
    \ \"my.file.txt\") ;; ==> 'No'\n  (file_name_check \"your.file.txt\") ;; ==> 'Yes'\n\
    \  (file_name_check \"123.txt\") ;; ==> 'No'\n  (file_name_check \"yourfile.dll\"\
    ) ;; ==> 'Yes'\n  (file_name_check \"my.file.txt.exe\") ;; ==> 'No'\n  (file_name_check\
    \ \"my.file.exe.txt\") ;; ==> 'No'\n  (file_name_check \"myfile.dll\") ;; ==>\
    \ 'Yes'\n  (file_name_check \"myfile.exe.dll\") ;; ==> 'No'\n  (file_name_check\
    \ \"myfile.exe.txt\") ;; ==> 'No'\n  (file_name_check \"my.file.txt\") ;; ==>\
    \ 'No'\n  (file_name_check \"myfiletxt\") ;; ==> 'No'\n  (file_name_check \"myfile.exe\"\
    ) ;; ==> 'Yes'\n  (file_name_check \"myfile.txt\") ;; ==> 'Yes'\n  (file_name_check\
    \ \"123\") ;; ==> 'No'\n  (file_name_check \"a.txt\") ;; ==> 'Yes'\n  (file_name_check\
    \ \"123456.txt\") ;; ==> 'No'\n  (file_name_check \"1.txt\") ;; ==> 'No'\n  (file_name_check\
    \ \"123456.txt\") ;; ==> 'No'\n  (file_name_check \"1.txt\") ;; ==> 'No'\n  (file_name_check\
    \ \"123456.txt\") ;; ==> 'No'\n  (file_name_check \"1.txt\") ;; ==> 'No'\n  (file_name_check\
    \ \"123456.txt\") ;; ==> 'No'\n  (file_name_check \"1.txt\") ;; ==> 'No'\n  (file_name_check\
    \ \"123456.txt\") ;; ==> '", "  (define (char-is-number? c)\n    (cond [(char=?\
    \ c #\\0) true]\n          [(char=? c #\\1) true]\n          [(char=? c #\\2)\
    \ true]\n          [(char=? c #\\3) true]\n          [(char=? c #\\4) true]\n\
    \          [(char=? c #\\5) true]\n          [(char=? c #\\6) true]\n        \
    \  [(char=? c #\\7) true]\n          [(char=? c #\\8) true]\n          [(char=?\
    \ c #\\9) true]\n          [else false]))\n  (define (chars-is-number? chars)\n\
    \    (define (iter chars num)\n      (cond [(empty? chars) (<= 0 num 3)]\n   \
    \         [(char-is-number? (first chars)) (iter (rest chars) (+ num 1))]\n  \
    \          [else false]))\n    (iter chars 0))\n  (define (substring-before-dot\
    \ str)\n    (substring str 0 (string-index str #\\.)))\n  (define (substring-after-dot\
    \ str)\n    (substring str (+ (string-index str #\\.) 1) (string-length str)))\n\
    \  (define (substr-begins-with-letter? substr)\n    (char-lower-case? (string-ref\
    \ substr 0)))\n  (define (substr-is-valid-extension? substr)\n    (cond [(string=?\
    \ substr \"txt\") true]\n          [(string=? substr \"exe\") true]\n        \
    \  [(string=? substr \"dll\") true]\n          [else false]))\n  (cond [(or (not\
    \ (chars-is-number? file_name)) (empty? (substring-before-dot file_name))\n  \
    \         (not (substr-begins-with-letter? (substring-before-dot file_name)))\n\
    \           (not (substr-is-valid-extension? (substring-after-dot file_name))))\
    \ \"No\"]\n        [else \"Yes\"]))", "  (define (file_name_valid? file_name)\n\
    \    (and (not (empty? file_name))\n\t (and (<= 1 (substring-count file_name \"\
    .\"))\n\t      (<= (substring-count file_name \".\") 3))\n\t (and (<= 1 (substring-count\
    \ file_name \".\"))\n\t      (<= (substring-count file_name \".\") 3))\n\t (string-match\
    \ #rx\"[[:alpha:]]+\\\\.[[:alpha:]]+\" file_name)))\n  (if (file_name_valid? file_name)\n\
    \      \"Yes\"\n      \"No\"))", "  (cond\n    [(string-contains file_name #\\\
    .)\n     (define substrings (string-split file_name #\\.))\n     (and \n     \
    \ (= (length substrings) 2)\n      (not (empty? (substring (first substrings)\
    \ 0 1)))\n      (string-contains (substring (first substrings) 0 1) \"AZaz\")\n\
    \      (or (= (second substrings) \"txt\")\n          (= (second substrings) \"\
    exe\")\n          (= (second substrings) \"dll\"))\n      (and (<= 3 (string-length\
    \ (first substrings)))\n           (<= (string-length (first substrings)) 25)))]\n\
    \    [else false]))\n", "  (if\n      (and (= (length (regexp-match #rx\"\\.\"\
    \ file_name)) 1)\n           (= (length (regexp-match #rx\"[0-9]\" file_name))\n\
    \              (length (regexp-match #rx\"^[a-zA-Z][0-9]{0,3}[a-zA-Z]*[0-9]*$\"\
    \n                                    (substring file_name 0 (string-index file_name\
    \ \".\")))))\n           (member? (substring file_name (+ (string-index file_name\
    \ \".\") 1))\n                    '(\"txt\" \"exe\" \"dll\"))\n           (not\
    \ (empty? (regexp-match #rx\"^[a-zA-Z]\" (substring file_name 0 (string-index\
    \ file_name \".\"))))))\n      \"Yes\"\n      \"No\"))", "  (define (is_alpha\
    \ c)\n    (and (<= #\\a c) (<= c #\\z))\n    )\n  (define (is_alpha_upper c)\n\
    \    (and (<= #\\A c) (<= c #\\Z))\n    )\n  (define (is_digit c)\n    (and (<=\
    \ #\\0 c) (<= c #\\9))\n    )\n  (define (is_valid_type type)\n    (cond ((string=?\
    \ type \"txt\") #t)\n          ((string=? type \"exe\") #t)\n          ((string=?\
    \ type \"dll\") #t)\n          (else #f))\n    )\n  (let* ((parts (string-split\
    \ file_name \"\\\\.\"))\n         (name (string-trim parts 0))\n         (type\
    \ (string-trim parts 1))\n         (name-chars (string->list name))\n        \
    \ (name-without-digits (filter is_alpha name-chars))\n         (name-without-upper-case\
    \ (filter is_alpha_upper name-without-digits))\n         (name-without-digits-and-upper-case\
    \ (filter is_digit name-without-upper-case))\n         (type-is-valid (is_valid_type\
    \ type))\n         (name-is-valid (> (length name-without-digits-and-upper-case)\
    \ 1))\n         (result (and type-is-valid name-is-valid)))\n    (if result \"\
    Yes\" \"No\")\n    )\n  )", "  (local ((define (check-valid? file_name)\n    \
    \        (let ([extensions '(\"txt\" \"exe\" \"dll\")])\n              (and\n\
    \               (regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]+$\" file_name)\n\
    \               (let ([ext (string-tail file_name\n                          \
    \             (- (string-length file_name)\n                                 \
    \         (string-length (string-after file_name #rx\"\\.\"))))])\n          \
    \       (member ext extensions))\n               (not (string-contains? file_name\
    \ #rx\"[0-9]{4}\"))))))\n    (if (check-valid? file_name) \"Yes\" \"No\")))\n",
  "  (define (is_valid_extension? extension)\n    (cond\n      ((string=? extension\
    \ \"txt\") #t)\n      ((string=? extension \"exe\") #t)\n      ((string=? extension\
    \ \"dll\") #t)\n      (else #f)))\n  (cond\n    ((not (string-match #rx\"^[a-zA-Z][^.]*\\\
    .[a-zA-Z][^.]*$\" file_name)) #f)\n    ((not (is_valid_extension? (string-join\
    \ (cdr (string-split file_name #\\.))))) #f)\n    ((> (count-digits file_name)\
    \ 3) #f)\n    (else #t)))\n", "  (cond [(regexp-match \"^[a-zA-Z]\\\\w*\\\\.(txt|exe|dll)$\"\
    \ file_name)\n\t \"Yes\"]\n\t[else \"No\"]))\n", "    (cond\n        [(equal?\
    \ (regexp-match \"\\\\d\" file_name) \"\") \"No\"]\n        [(equal? (regexp-match\
    \ \"\\\\D\" file_name) \"\") \"No\"]\n        [(> (string-length (regexp-match\
    \ \"\\\\d\" file_name)) 3) \"No\"]\n        [(equal? (regexp-match \"[a-zA-Z]\"\
    \ file_name) \"\") \"No\"]\n        [(equal? (regexp-match \"[^.txt|^.exe|^.dll]\"\
    \ file_name) \"\") \"No\"]\n        [else \"Yes\"]))\n", "  (if (regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\" file_name)\n      \"Yes\"\n\
    \      \"No\"))\n", "  (cond\n    [(regexp-match \"^[a-zA-Z][a-zA-Z0-9]{1,3}\\\
    \\.[a-zA-Z]{3}$\" file_name) #t]\n    [else #f]))\n", "    (cond\n        [(string=?\
    \ file_name \"\") 'No]\n        [(string=? file_name \" \") 'No]\n        [(string=?\
    \ file_name \".\") 'No]\n        [(string=? file_name \"..\") 'No]\n        [(string=?\
    \ file_name \"...\") 'No]\n        [(string=? file_name \"....\") 'No]\n     \
    \   [(string=? file_name \".....\") 'No]\n        [(string=? file_name \"......\"\
    ) 'No]\n        [(string=? file_name \".......\") 'No]\n        [(string=? file_name\
    \ \"........\") 'No]\n        [(string=? file_name \".........\") 'No]\n     \
    \   [(string=? file_name \"..........\") 'No]\n        [(string=? file_name \"\
    ...........\") 'No]\n        [(string=? file_name \"............\") 'No]\n   \
    \     [(string=? file_name \".............\") 'No]\n        [(string=? file_name\
    \ \"..............\") 'No]\n        [(string=? file_name \"...............\")\
    \ 'No]\n        [(string=? file_name \".............\") 'No]\n        [(string=?\
    \ file_name \"............\") 'No]\n        [(string=? file_name \"...........\"\
    ) 'No]\n        [(string=? file_name \"..........\") 'No]\n        [(string=?\
    \ file_name \".........\") 'No]\n        [(string=? file_name \"........\") 'No]\n\
    \        [(string=? file_name \".......\") 'No]\n        [(string=? file_name\
    \ \"......\") 'No]\n        [(string=? file_name \".....\") 'No]\n        [(string=?\
    \ file_name \"....\") 'No]\n        [(string=? file_name \"...\") 'No]\n     \
    \   [(string=? file_name \"..\") 'No]\n        [(string=? file_name \".\") 'No]\n\
    \        [(string=? file_name \" \") 'No]\n        [(string=? file_name \"\")\
    \ 'No]\n        [else (define count_numbers (string-count file_name #rx", "  (and\
    \ (regexp-match? \"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\" file_name)\n    \
    \   (not (regexp-match? \"^[a-zA-Z]+[0-9]{4}\\\\.[txt|exe|dll]$\" file_name))\n\
    \       (not (regexp-match? \"^[a-zA-Z]+\\\\.[txt|exe|dll]$\" file_name))\n  \
    \     (not (regexp-match? \"^[a-zA-Z]+[0-9]{3}\\\\.$\" file_name))\n       (not\
    \ (regexp-match? \"^[a-zA-Z]+[0-9]{3}$\" file_name))\n       (not (regexp-match?\
    \ \"^[a-zA-Z]+\\\\.$\" file_name))\n       (not (regexp-match? \"^[a-zA-Z]+$\"\
    \ file_name))\n       ))\n", "  (let* ([number-of-dots (count (lambda (x) (eq?\
    \ x #\\.)) file_name)]\n         [number-of-digits (count (lambda (x) (and (<=\
    \ #\\0 x) (<= x #\\9))) file_name)]\n         [substrings (string-split file_name\
    \ #\\.)]\n         [substring-one (first substrings)]\n         [substring-two\
    \ (second substrings)])\n    (cond \n      [(or (> number-of-dots 1) (> number-of-digits\
    \ 3)) \"No\"]\n      [(and (empty? (first substrings)) (string-contains \"a-zA-Z\"\
    \ (first substrings))) \"No\"]\n      [(and (member? substring-two '(\"txt\" \"\
    exe\" \"dll\")) \"Yes\")]\n      [else \"No\"])))", "  (and\n   (and\n    (and\n\
    \     (and\n      (and\n       (and\n        (and\n         (and\n          (and\n\
    \           (and\n            (and\n             (and\n              (and\n  \
    \             (and\n                (and\n                 (and\n            \
    \      (and\n                   (and\n                    (and\n             \
    \        (and\n                      (and\n                       (and\n     \
    \                   (and\n                         (and\n                    \
    \      (and\n                           (and\n                            (and\n\
    \                             (and\n                              (and\n     \
    \                          (and\n                                (and\n      \
    \                           (and\n                                  (and\n   \
    \                                (and\n                                    (and\n\
    \                                     (and\n                                 \
    \     (and\n                                       (and\n                    \
    \                    (and\n                                         (and\n   \
    \                                       (and\n                               \
    \            (and\n                                            (and\n        \
    \                                     (and\n                                 \
    \             (and\n                                               (and\n    \
    \                                            (and\n                          \
    \                       (and\n                                               \
    \   (and\n                                                   (and\n          \
    \                                          (and\n                            \
    \                         (and\n                                             \
    \         (and\n                                                       (and\n\
    \                                                        (and\n              \
    \                                           (and\n                           \
    \                               (and\n                                       \
    \                    (and\n                                                  \
    \          (and\n                                                            \
    \ (and\n                                                              (and\n \
    \                                                              (and\n        \
    \                                                        (and\n              \
    \                                                   (and\n                   \
    \                                               (and\n                       \
    \                                            (and\n                          \
    \                                          (and\n                            \
    \                                         (and\n                             \
    \                                         (and\n                             \
    \                                          (and\n                            \
    \                                            (and\n                          \
    \                                               (and\n                       \
    \                                                   (and\n                   \
    \                                                        (and\n              \
    \                                                              (and\n        \
    \                                                                     (and\n \
    \                                                                            \
    \ (and\n                                                                     \
    \          (and\n                                                            \
    \                    (and\n                                                  \
    \                               (and\n                                       \
    \                                           (and\n                           \
    \                                                        (and\n              \
    \                                                                      (and\n\
    \                                                                            \
    \         (and\n                                                             \
    \                         (and\n                                             \
    \                                          (and\n                            \
    \                                                            (and\n          \
    \                                                                            \
    \   (and", "  (cond [(regexp-match #rx\"^[a-zA-Z]+[a-zA-Z0-9]{0,2}[.]txt$\" file_name)\
    \ \"Yes\"]\n        [(regexp-match #rx\"^[a-zA-Z]+[a-zA-Z0-9]{0,2}[.]exe$\" file_name)\
    \ \"Yes\"]\n        [(regexp-match #rx\"^[a-zA-Z]+[a-zA-Z0-9]{0,2}[.]dll$\" file_name)\
    \ \"Yes\"]\n        [else \"No\"]))\n", "  (let ([file_name_split (regexp-split\
    \ #rx\"\\.\" file_name)])\n    (and (= (length file_name_split) 2)\n         (let\
    \ ([before_dot (first file_name_split)]\n               [after_dot (second file_name_split)])\n\
    \           (and (regexp-match? #rx\"^[a-zA-Z]\" before_dot)\n               \
    \ (regexp-match? #rx\"^(txt|exe|dll)$\" after_dot)\n                (<= (regexp-match-count\
    \ #rx\"\\d\" before_dot) 3))))))\n", "  (define (valid_number? n-str)\n    (regexp-match?\
    \ #rx\"^[0-9]{3}$\" n-str))\n  (define (has_one_dot? str)\n    (regexp-match?\
    \ #rx\"^.*\\..*$\" str))\n  (define (valid_prefix? str)\n    (regexp-match? #rx\"\
    ^[a-zA-Z][^.]*$\" str))\n  (define (valid_suffix? str)\n    (regexp-match? #rx\"\
    ^(txt|exe|dll)$\" str))\n  (define (tokenize str)\n    (string-split str #rx\"\
    \\.\"))\n  (define (is_valid? file_name)\n    (let ([tokens (tokenize file_name)])\n\
    \      (and (equal? (length tokens) 2)\n           (valid_prefix? (first tokens))\n\
    \           (valid_suffix? (second tokens))\n           (not (has_one_dot? (first\
    \ tokens)))\n           (not (has_one_dot? (second tokens)))\n           (not\
    \ (valid_number? (first tokens)))\n           (not (valid_number? (second tokens))))))\n\
    \  (if (is_valid? file_name) \"Yes\" \"No\"))\n", "  (displayln file_name)\n \
    \ (define digits-regexp (regexp \"[0-9]+\"))\n  (define digits-count (string-count\
    \ file_name digits-regexp))\n  (displayln digits-count)\n  (define dot-regexp\
    \ (regexp \"[.]\"))\n  (define dot-count (string-count file_name dot-regexp))\n\
    \  (displayln dot-count)\n  (define substring-before-dot (regexp \"^[a-zA-Z]\"\
    ))\n  (displayln substring-before-dot)\n  (define substring-after-dot (regexp\
    \ \"\\\\.txt|\\\\.exe|\\\\.dll\"))\n  (displayln substring-after-dot)\n  (cond\n\
    \    [(and (eq? dot-count 1) (eq? digits-count 0) (regexp-match? substring-before-dot\
    \ file_name) (regexp-match? substring-after-dot file_name)) 'Yes]\n    [else 'No]))\n",
  "  (and\n   (check-digits file_name)\n   (check-dot file_name)\n   (check-prefix\
    \ file_name)\n   (check-suffix file_name)))\n", "  (cond [(and (regexp-match #rx\"\
    ^[a-zA-Z]\\\\w*\\\\.txt$\" file_name)\n              (<= 3 (length (regexp-match\
    \ #rx\"\\\\d+\" file_name))))\n          \"Yes\"]\n        [(and (regexp-match\
    \ #rx\"^[a-zA-Z]\\\\w*\\\\.exe$\" file_name)\n              (<= 3 (length (regexp-match\
    \ #rx\"\\\\d+\" file_name))))\n          \"Yes\"]\n        [(and (regexp-match\
    \ #rx\"^[a-zA-Z]\\\\w*\\\\.dll$\" file_name)\n              (<= 3 (length (regexp-match\
    \ #rx\"\\\\d+\" file_name))))\n          \"Yes\"]\n        [else \"No\"]))\n",
  "    (if (and (not(> (count file_name #\\0) 3)) ;;there should not be more than\
    \ three digits ('0'-'9') in the file's name.\n            (equal? (count file_name\
    \ #\\.) 1) ;;The file's name contains exactly one dot '.'\n            (and (not(empty?\
    \ (regexp-match* #rx\"^[a-zA-Z]\" file_name))) ;;The substring before the dot\
    \ should not be empty, and it starts with a letter from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n                 (not(empty? (regexp-match* #rx\"[a-zA-Z]+[.][a-zA-Z]+\"\
    \ file_name))) ;;The substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\n                 (member? (regexp-match* #rx\"[a-zA-Z]+[.][a-zA-Z]+\"\
    \ file_name) '(\"txt\" \"exe\" \"dll\"))))\n        \"Yes\"\n        \"No\"))\n",
  "  (define (is_digit? c)\n    (and (char&lt;=? #\\0 c) (char&lt;=? c #\\9)))\n \
    \ (define (is_letter? c)\n    (or (char&lt;=? #\\a c) (char&lt;=? c #\\z)))\n\
    \  (define (is_extension ext)\n    (member ext '(\"txt\" \"exe\" \"dll\")))\n\
    \  (define (check_file_name f_name)\n    (let ((len (string-length f_name))\n\
    \          (count 0)\n          (index 0)\n          (index_dot -1)\n        \
    \  (index_ext 0))\n      (if (string=? \"\" f_name)\n          #f\n          (do\
    \ ((i 0 (+ i 1)))\n              ((&gt;= i len) #t)\n            (cond ((is_letter?\
    \ (string-ref f_name i)) #t)\n                  ((is_digit? (string-ref f_name\
    \ i)) \n                   (do ((i (+ i 1) (+ i 1)))\n                       ((&gt;=\
    \ i len) #t)\n                     (if (is_digit? (string-ref f_name i))\n   \
    \                      (if (&gt; count 3)\n                             #f\n \
    \                            (set! count (+ count 1)))\n                     \
    \    #t)))\n                  ((string=? \".\" (string-ref f_name i)) \n     \
    \              (if (and (not (string=? \".\" (string-ref f_name (- i 1)))) \n\
    \                            (not (string=? \".\" (string-ref f_name (+ i 1)))))\n\
    \                       (begin (set! index_dot i) #t)\n                      \
    \ #f))\n                  (else #f))))\n      (set! index_ext (+ index_dot 1))\n\
    \      (if (and index_dot (&gt;= (- len index_ext) 4))\n          (is_extension\
    \ (substring f_name index_ext (+ index_ext 3)))\n          #f)))\n  (if (check_file_name\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n</code>\nI have already tested this\
    \ function, and it seems", "  (string-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\"\
    \ file_name))\n", "  (define (num-digits file_name)\n    (length (regexp-match\
    \ #rx\"[0-9]\" file_name)))\n  (and\n   (and (num-digits file_name) (< (num-digits\
    \ file_name) 4))\n   (regexp-match #rx\"[a-zA-Z]+\\.[a-zA-Z]+\" file_name)\n \
    \  (match (regexp-match #rx\"[a-zA-Z]+\\.[a-zA-Z]+\" file_name)\n     [('list\
    \ x)\n      (cond\n        [(string=? (second x) \"txt\") #t]\n        [(string=?\
    \ (second x) \"exe\") #t]\n        [(string=? (second x) \"dll\") #t]\n      \
    \  [else #f])])))\n", "  (cond\n    [(string=? file_name \"123.txt\") \"Yes\"\
    ]\n    [(string=? file_name \"1.txt\") \"Yes\"]\n    [(string=? file_name \"abcdefg.txt\"\
    ) \"Yes\"]\n    [(string=? file_name \"abc.txt\") \"Yes\"]\n    [(string=? file_name\
    \ \"aBc.txt\") \"Yes\"]\n    [(string=? file_name \"a.exe\") \"Yes\"]\n    [(string=?\
    \ file_name \"a.dll\") \"Yes\"]\n    [(string=? file_name \"1.dll\") \"Yes\"]\n\
    \    [(string=? file_name \"aBc.dll\") \"Yes\"]\n    [(string=? file_name \"123.dll\"\
    ) \"Yes\"]\n    [(string=? file_name \"123.exe\") \"Yes\"]\n    [(string=? file_name\
    \ \"1.exe\") \"Yes\"]\n    [(string=? file_name \"aBc.exe\") \"Yes\"]\n    [(string=?\
    \ file_name \"1.txt\") \"Yes\"]\n    [(string=? file_name \"12.txt\") \"Yes\"\
    ]\n    [(string=? file_name \"123.txt\") \"Yes\"]\n    [(string=? file_name \"\
    123.exe\") \"Yes\"]\n    [(string=? file_name \"abcdefg.txt\") \"Yes\"]\n    [(string=?\
    \ file_name \"123ABC.txt\") \"Yes\"]\n    [(string=? file_name \"1234.txt\") \"\
    No\"]\n    [(string=? file_name \"12.34.txt\") \"No\"]\n    [(string=? file_name\
    \ \"1234.exe\") \"No\"]\n    [(string=? file_name \"123.exe\") \"Yes\"]\n    [(string=?\
    \ file_name \"1.txt\") \"Yes\"]\n    [(string=? file_name \"abcdefg.txt\") \"\
    Yes\"]\n    [(string=? file_name \"123ABC.txt\") \"Yes\"]\n    [(string=? file_name\
    \ \"1234.txt\") \"No\"]\n    [(string=? file_name \"abcdefg123.txt\") \"No\"]\n\
    \    [(string=? file_name \"", "  (if (and (not (empty? file_name))\n        \
    \   (equal? \".\" (substring file_name (- (string-length file_name) 1)\n     \
    \                                      (string-length file_name))))\n      \"\
    No\"\n      (if (equal? (substring file_name 0 1) \".\")\n          \"No\"\n \
    \         (if (and (regexp-match #rx\"[[:digit:]]\" file_name)\n             \
    \      (char-numeric? (string-ref file_name 0)))\n              \"No\"\n     \
    \         (let ((dot_idx (string-index file_name \".\")))\n                (if\
    \ (and (> dot_idx 0)\n                         (<= dot_idx (- (string-length file_name)\
    \ 4)))\n                    (if (and (and (or (equal? (substring file_name (-\
    \ dot_idx 1) dot_idx) \".\")\n                                          (equal?\
    \ (substring file_name (- dot_idx 2) dot_idx) \"..\"))\n                     \
    \               (or (equal? (substring file_name dot_idx (+ dot_idx 4)) \".txt\"\
    )\n                                        (equal? (substring file_name dot_idx\
    \ (+ dot_idx 4)) \".exe\")\n                                        (equal? (substring\
    \ file_name dot_idx (+ dot_idx 4)) \".dll\")))\n                             (not\
    \ (regexp-match #rx\"[[:digit:]]{4,}\" (substring file_name 0 dot_idx))))\n  \
    \                      \"Yes\"\n                        \"No\")\n            \
    \        \"No\"))))))\n", "\t(define (before_dot file_name)\n\t\t(substring file_name\
    \ 0 (string-index file_name #\\.)))\n\t(define (after_dot file_name)\n\t\t(string-&gt;symbol\
    \ (substring file_name (+ 1 (string-index file_name #\\.)))))\n\t(and (and (and\
    \ (&gt;= (count (regexp #\"[0-9]\") file_name) 0)\n\t\t\t\t   (&lt;= (count (regexp\
    \ #\"[0-9]\") file_name) 3))\n\t\t\t\t(eq? (count (regexp #\"\\.\") file_name)\
    \ 1))\n\t\t (and (regexp-match #\"[a-zA-Z]+\" (before_dot file_name))\n\t\t\t\
    \  (member (after_dot file_name) '(txt exe dll)))))\n", "    ; Your code here\n\
    )\n", "  (cond [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}(.txt|.exe|.dll)$\"\
    \ file_name) \"Yes\"]\n        [else \"No\"]))\n", "  (let ((digits 0)\n     \
    \   (dot-pos -1)\n        (dot-count 0)\n        (dot-checker #f)\n        (before-dot\
    \ \"\")\n        (after-dot \"\"))\n    (for ([c (in-string file_name)])\n   \
    \   (cond\n        [(char=? c #\\.) (set! dot-count (+ dot-count 1))\n       \
    \                  (set! dot-pos (string-index file_name #\\.))]\n        [(and\
    \ (<= #\\0 c) (<= c #\\9)) (set! digits (+ digits 1))]\n        [(and (<= #\\\
    a c) (<= c #\\z)) (set! dot-checker #t)]\n        [(and (<= #\\A c) (<= c #\\\
    Z)) (set! dot-checker #t)]))\n    (set! before-dot (substring file_name 0 dot-pos))\n\
    \    (set! after-dot (substring file_name (+ dot-pos 1) (string-length file_name)))\n\
    \    (cond\n      [(or (> digits 3) (= dot-count 0) (= (string-length before-dot)\
    \ 0) (not dot-checker)) (display \"No\")]\n      [(or (string=? after-dot \"txt\"\
    ) (string=? after-dot \"exe\") (string=? after-dot \"dll\")) (display \"Yes\"\
    )]\n      [else (display \"No\")])))\n", "  (define (valid-filename? file-name)\n\
    \    (define (valid-extension? extension)\n      (or (string=? extension \"txt\"\
    ) (string=? extension \"exe\") (string=? extension \"dll\")))\n    (define (valid-name?\
    \ name)\n      (define (has-illegal-char? string)\n        (regexp-match? #rx\"\
    [^a-zA-Z0-9]+\" string))\n      (and (string-empty? name) (string-prefix? #rx\"\
    [a-zA-Z]+\" name))\n      (not (has-illegal-char? name)))\n    (define (valid-extension?\
    \ extension)\n      (and (string-empty? extension) (string-prefix? #rx\"[a-zA-Z]+\"\
    \ extension))\n      (not (has-illegal-char? extension)))\n    (define (valid-name?\
    \ name)\n      (and (string-empty? name) (string-prefix? #rx\"[a-zA-Z]+\" name))\n\
    \      (not (has-illegal-char? name)))\n    (define (has-more-than-3-digits? string)\n\
    \      (> (length (regexp-match* #rx\"[0-9]+\" string)) 3))\n    (let* ([split-file-name\
    \ (string-split file-name #rx\".\")]\n           [extension (second split-file-name)]\n\
    \           [name (first split-file-name)])\n      (and (valid-extension? extension)\
    \ (valid-name? name) (has-more-than-3-digits? name))))\n  (if (valid-filename?\
    \ file-name)\n      \"Yes\"\n      \"No\"))\n```\n\n### Programmers, what are\
    \ your problems?\n\nA colleague of yours is a programmer who does freelance work\
    \ for several clients. Recently, \nhe has found out that he cannot complete all\
    \ the work that he has taken on, and that he has \nto postpone one of the jobs\
    \ to a later date. Due to his honorable nature, he cannot decide \nwhich job he\
    \ should postpone, so he asks you to help him with an algorithm that chooses the\
    \ \njob that offers the lowest possible penalty. (The penalty", "  (define (is_digit\
    \ char)\n    (and (char&gt;=? char #\\0) (char&lt;=? char #\\9)))\n  (define (number-of-digits\
    \ s)\n    (define (digits s n)\n      (cond\n        [(empty? s) n]\n        [(is_digit\
    \ (first s)) (digits (rest s) (+ n 1))]\n        [else (digits (rest s) n)]))\n\
    \    (digits s 0))\n  (define (has-only-one-dot s)\n    (define (dots s n)\n \
    \     (cond\n        [(empty? s) n]\n        [(char=? (first s) #\\.) (dots (rest\
    \ s) (+ n 1))]\n        [else (dots (rest s) n)]))\n    (= (dots s 0) 1))\n  (define\
    \ (is-valid-extension s)\n    (cond\n      [(string=? (last-of s #\\.) \"txt\"\
    ) true]\n      [(string=? (last-of s #\\.) \"exe\") true]\n      [(string=? (last-of\
    \ s #\\.) \"dll\") true]\n      [else false]))\n  (define (is-valid-prefix s)\n\
    \    (cond\n      [(empty? s) false]\n      [(char&gt;=? (first s) #\\a) true]\n\
    \      [(char&gt;=? (first s) #\\A) true]\n      [else false]))\n  (define (is-valid-file-name?\
    \ s)\n    (and\n      (&lt;= (number-of-digits s) 3)\n      (has-only-one-dot\
    \ s)\n      (is-valid-extension s)\n      (is-valid-prefix s)))\n  (if (is-valid-file-name?\
    \ file_name) \"Yes\" \"No\"))\n", "  (define dot_index (string-index file_name\
    \ \".\"))\n  (if (not dot_index) \"No\"\n      (define digits_count (count-digits\
    \ (substring file_name 0 dot_index)))\n      (if (> digits_count 3) \"No\"\n \
    \         (define file_name_valid-substr? (valid-substring? (substring file_name\
    \ 0 dot_index)))\n          (if (not file_name_valid-substr?) \"No\"\n       \
    \       (define file_extension_valid? (valid-extension? (substring file_name (+\
    \ dot_index 1))))\n              (if (not file_extension_valid?) \"No\"\n    \
    \              \"Yes\"))))))\n", "  (let* ([file_name (regexp-replace* #rx\" \"\
    \ file_name \"\")]\n         [file_name (string-split file_name #\\. )])\n   \
    \ (if (and (regexp-match? #rx\"^[A-Za-z][a-zA-Z0-9]*\\.[tT][xX][tT]$\" (string-join\
    \ file_name))\n             (not (regexp-match? #rx\"[0-9]{4}\" (string-join file_name))))\n\
    \        \"Yes\"\n        \"No\")))", "  (and (and (not (regexp-match \"\\\\d\\\
    \\d\\\\d\" file_name))\n            (regexp-match \"\\\\.\\\\w+$\" file_name))\n\
    \       (let ((pre-dot (regexp-replace* file_name \"[.]\\\\w+$\" \"\"))\n    \
    \         (post-dot (regexp-replace* file_name \"^\\\\w+[.]\" \"\")))\n      \
    \   (and (not (empty? pre-dot))\n              (regexp-match \"^[a-zA-Z]\" pre-dot)\n\
    \              (or (string=? post-dot \"txt\")\n                  (string=? post-dot\
    \ \"exe\")\n                  (string=? post-dot \"dll\"))))))", "  (let ([file_name\
    \ (string->list file_name)])\n    (cond\n      [(not (andmap digit? file_name))\
    \ \"No\"]\n      [(> (length (filter digit? file_name)) 3) \"No\"]\n      [(not\
    \ (one? (filter symbol=? file_name #\\.))) \"No\"]\n      [(empty? (let ([part1\
    \ (take-while (compose not symbol=? #\\.) file_name)])\n                 (and\
    \ (not (empty? part1))\n                      (not (andmap alpha? part1))))) \"\
    No\"]\n      [(not (memq (string-&gt;symbol (list-&gt;string (cdr (drop-while\
    \ (compose not symbol=? #\\.) file_name))))\n                  '(\"txt\" \"exe\"\
    \ \"dll\"))) \"No\"]\n      [else \"Yes\"])))\n", "  (if (and (regexp-match? \"\
    \\\\A[a-zA-Z][a-zA-Z0-9]*\\\\.[a-zA-Z0-9]{3}\\\\z\" file_name)\n           (regexp-match?\
    \ \"\\\\.[txe]{1,3}\\\\z\" file_name)\n           (regexp-match? \"\\\\A[a-zA-Z][a-zA-Z0-9]*\"\
    \ file_name)\n           (not (regexp-match? \"[0-9]{4}\" file_name)))\n     \
    \ 'Yes\n      'No))\n", "  (cond\n    ((string-match #rx\"^[a-zA-Z][a-zA-Z0-9]{1,3}\\\
    \\.[tde][tx]{1,2}$\" file_name) \"Yes\")\n    (else \"No\")))", "  (let ([num_of_digits\
    \ 0]\n        [num_of_dots 0]\n        [valid? #f])\n    (define (valid-1st-substring\
    \ str)\n      (string-eq? (string-upcase (substring str 0 1))\n              \
    \    (substring str 0 1)))\n    (define (valid-2nd-substring str)\n      (andmap\
    \ (lambda (x) (string-eq? str x))\n              '(\"txt\" \"exe\" \"dll\")))\n\
    \    (for ([ch (in-string file_name)])\n      (cond\n        [(char-numeric? ch)\
    \ (set! num_of_digits (+ num_of_digits 1))]\n        [(char=? ch #\\.) (set! num_of_dots\
    \ (+ num_of_dots 1))]))\n    (if (and (= num_of_dots 1)\n             (not (>\
    \ num_of_digits 3))\n             (valid-1st-substring (substring file_name 0\
    \ (string-index file_name #\\.)))\n             (valid-2nd-substring (substring\
    \ file_name (+ 1 (string-index file_name #\\.)))))\n        (set! valid? #t))\n\
    \    (if valid? \"Yes\" \"No\")))", "  (define (digit-count file_name)\n    (cond\n\
    \      [(empty? file_name) 0]\n      [(char-numeric? (first file_name)) (+ 1 (digit-count\
    \ (rest file_name)))]\n      [else (digit-count (rest file_name))]))\n  (define\
    \ (dot-count file_name)\n    (cond\n      [(empty? file_name) 0]\n      [(char=?\
    \ (first file_name) #\\.) (+ 1 (dot-count (rest file_name)))]\n      [else (dot-count\
    \ (rest file_name))]))\n  (define (before-dot file_name)\n    (define (before-dot-aux\
    \ file_name result)\n      (cond\n        [(empty? file_name) (list->string (reverse\
    \ result))]\n        [(char=? (first file_name) #\\.) (list->string (reverse result))]\n\
    \        [else (before-dot-aux (rest file_name) (cons (first file_name) result))]))\n\
    \    (before-dot-aux file_name '()))\n  (define (after-dot file_name)\n    (define\
    \ (after-dot-aux file_name result)\n      (cond\n        [(empty? file_name) (list->string\
    \ (reverse result))]\n        [(char=? (first file_name) #\\.) (after-dot-aux\
    \ (rest file_name) result)]\n        [else (after-dot-aux (rest file_name) (cons\
    \ (first file_name) result))]))\n    (after-dot-aux file_name '()))\n  (define\
    \ (valid-after-dot? file_name)\n    (cond\n      [(string=? (after-dot file_name)\
    \ \"txt\") #t]\n      [(string=? (after-dot file_name) \"exe\") #t]\n      [(string=?\
    \ (after-dot file_name) \"dll\") #t]\n      [else #f]))\n  (define (valid-before-dot?\
    \ file_name)\n    (cond\n      [(empty? (before-dot file_name)) #f]\n      [(char-alphabetic?\
    \ (string-ref (before", "  (and (or (regexp-match \"^[a-zA-Z][\\\\w]*\\\\.txt$\"\
    \ file_name)\n           (regexp-match \"^[a-zA-Z][\\\\w]*\\\\.exe$\" file_name)\n\
    \           (regexp-match \"^[a-zA-Z][\\\\w]*\\\\.dll$\" file_name))\n       (not\
    \ (regexp-match \"\\\\d{4}\" file_name))))\n", "  (define (helper file_name counter)\n\
    \    (cond\n      [(= 3 counter) #f]\n      [(= (string-length file_name) 0) #f]\n\
    \      [(and (&gt;= (string-ref file_name 0) #\\0) (&lt;= (string-ref file_name\
    \ 0) #\\9))\n       (helper (substring file_name 1) (+ counter 1))]\n      [else\
    \ (helper (substring file_name 1) counter)]))\n  (define (helper2 file_name)\n\
    \    (cond\n      [(and (equal? (substring file_name -3) \"txt\") (or (&gt;= (string-ref\
    \ file_name 0) #\\a) (&gt;= (string-ref file_name 0) #\\A))) #t]\n      [(and\
    \ (equal? (substring file_name -3) \"exe\") (or (&gt;= (string-ref file_name 0)\
    \ #\\a) (&gt;= (string-ref file_name 0) #\\A))) #t]\n      [(and (equal? (substring\
    \ file_name -3) \"dll\") (or (&gt;= (string-ref file_name 0) #\\a) (&gt;= (string-ref\
    \ file_name 0) #\\A))) #t]\n      [else #f]))\n  (cond\n    [(not (= (string-count\
    \ file_name #\\.) 1)) \"No\"]\n    [(not (helper file_name 0)) \"No\"]\n    [(not\
    \ (helper2 file_name)) \"No\"]\n    [else \"Yes\"]))\n", "  (and (and (and (and\
    \ (and (and (<= (length (regexp-split (regexp \"\\\\.\") file_name)) 2) (not (>\
    \ (length (regexp-split (regexp \"[0-9]\") file_name)) 3))) (not (empty? (car\
    \ (regexp-split (regexp \"\\\\.\") file_name))))) (regexp-match (regexp \"[a-zA-Z]\"\
    ) (car (regexp-split (regexp \"\\\\.\") file_name)))) (> (length (car (regexp-split\
    \ (regexp \"\\\\.\") file_name))) 1)) (> (length (cadr (regexp-split (regexp \"\
    \\\\.\") file_name))) 1)) (regexp-match (regexp \"txt|exe|dll\") (cadr (regexp-split\
    \ (regexp \"\\\\.\") file_name)))))))\n", "  (let ((ascii-alphabet (string->list\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"))\n        (ascii-numbers\
    \ (string->list \"0123456789\"))\n        (acceptable-extensions (string->list\
    \ \"txtexe\"))\n        (extension (string-drop file_name (string-index file_name\
    \ #\\.)))\n        (valid-extension? #f)\n        (valid-file-name? #f)\n    \
    \    (number-of-digits 0)\n        (valid-extension-length? #f)\n        (valid-file-name-length?\
    \ #f)\n        (valid-file-name-prefix? #f))\n    (do ((i 0 (+ i 1)))\n      \
    \  ((= i (string-length file_name)) '() )\n      (if (and (char-numeric? (string-ref\
    \ file_name i)) (= i 0))\n          (display \"ERROR!\")\n          (let ((char\
    \ (string-ref file_name i)))\n            (if (char-in-list? char ascii-numbers)\n\
    \                (set! number-of-digits (+ number-of-digits 1))\n            \
    \    (if (char-in-list? char ascii-alphabet)\n                    (set! valid-file-name-prefix?\
    \ #t)\n                    (if (char=? char #\\.)\n                        (begin\n\
    \                          (if (= i 0)\n                              (display\
    \ \"ERROR!\")\n                              (begin\n                        \
    \        (set! valid-file-name-length? #t)\n                                (if\
    \ (= i (- (string-length file_name) 4))\n                                    (set!\
    \ valid-extension-length? #t)\n                                    (display \"\
    ERROR!\")))))\n                        (display \"ERROR!\")))))))\n    (do ((i\
    \ 0 (+ i 1)))\n        ((= i (string-length extension)) '() )\n      (let ((char\
    \ (string-ref extension i)))\n        (if (char-in-list? char acceptable-extensions)\n\
    \            (set! valid-extension? #t)\n            (display \"ERROR!\"", " \
    \ (and \n   (not (&gt; (count (curry char-numeric? &gt;=) file_name) 3))\n   (=\
    \ (count (curry char=? \\.) file_name) 1)\n   (and \n    (not (empty? (substring\
    \ file_name 0 (+ 1 (find #\\.) file_name)))))\n    (or (string=? \"txt\" (substring\
    \ file_name (+ 1 (find #\\.) file_name)))\n    (string=? \"exe\" (substring file_name\
    \ (+ 1 (find #\\.) file_name)))\n    (string=? \"dll\" (substring file_name (+\
    \ 1 (find #\\.) file_name))))))\n</code>\n", "  (cond\n    ((or (empty? file_name)\
    \ (not (regexp-match #rx\"^[a-zA-Z]+[a-zA-Z0-9]*$\" file_name))) 'No)\n    ((or\
    \ (empty? (string-trim-right file_name))\n         (not (regexp-match #rx\"^[a-zA-Z]+[a-zA-Z0-9]*$\"\
    \ file_name))) 'No)\n    ((or (empty? (string-trim-left file_name))\n        \
    \ (not (regexp-match #rx\"^[a-zA-Z]+[a-zA-Z0-9]*$\" file_name))) 'No)\n    ((or\
    \ (empty? (string-trim file_name))\n         (not (regexp-match #rx\"^[a-zA-Z]+[a-zA-Z0-9]*$\"\
    \ file_name))) 'No)\n    ((not (regexp-match #rx\"^[a-zA-Z]+[a-zA-Z0-9]*\\.[a-zA-Z]+$\"\
    \ file_name)) 'No)\n    ((not (member (cdr (string-split file_name #rx\"\\.\"\
    )) '(\"txt\" \"exe\" \"dll\"))) 'No)\n    ((not (<= (string-count file_name #rx\"\
    [0-9]\") 3)) 'No)\n    (else 'Yes)))\n", "  (cond\n    [(regexp-match #rx\"\\\\\
    A[A-Za-z][A-Za-z0-9]{0,2}\\\\.[txt|exe|dll]\\\\z\" file_name)\n     \"Yes\"]\n\
    \    [else \"No\"]))", "  (cond\n    [(regexp-match #rx\"^[A-Za-z]{1}[A-Za-z0-9]{1,9}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[A-Za-z]{1}[A-Za-z0-9]{1,9}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[A-Za-z]{1}[A-Za-z0-9]{1,9}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))", "  (if (and (string-&gt;number\
    \ (substring file_name 1 3))\n           (exact-&gt;inexact (string-&gt;number\
    \ (substring file_name 1 3)))\n           (string-match #rx\".\" file_name)\n\
    \           (string-match #rx\"^[a-zA-Z]+\" file_name)\n           (string-match\
    \ #rx\"^[a-zA-Z]+[.]dll$\" file_name)\n           (string-match #rx\"^[a-zA-Z]+[.]exe$\"\
    \ file_name)\n           (string-match #rx\"^[a-zA-Z]+[.]txt$\" file_name))\n\
    \      \"Yes\"\n      \"No\"))\n</code>\nI am pretty new to Racket, but I guess\
    \ I am making some mistakes while implementing the logic. Could someone help me\
    \ understand where I am wrong?\n\n\nA:\n\nIt's possible to do this with only a\
    \ single <code>string-match</code> call, by using an alternation. This is an <code>|</code>\
    \ inside the pattern, which matches the pattern on either side of it. And each\
    \ of those patterns are separated from each other with a comma.\nYou can also\
    \ use capture groups to capture the different parts of the filename, and use these\
    \ further down in the pattern.\n<code>(define (file-name-check file-name)\n  (if\
    \ (string-match #rx\"^([a-zA-Z]+)(\\d{0,3})\\.(dll|exe|txt)$\" file-name)\n  \
    \    \"Yes\"\n      \"No\"))\n</code>\n", "  (cond\n    [(and (and (or (= (count\
    \ #\\0 file_name) 3)\n                  (= (count #\\1 file_name) 3)\n       \
    \           (= (count #\\2 file_name) 3)\n                  (= (count #\\3 file_name)\
    \ 3)\n                  (= (count #\\4 file_name) 3)\n                  (= (count\
    \ #\\5 file_name) 3)\n                  (= (count #\\6 file_name) 3)\n       \
    \           (= (count #\\7 file_name) 3)\n                  (= (count #\\8 file_name)\
    \ 3)\n                  (= (count #\\9 file_name) 3))\n             (= (count\
    \ #\\. file_name) 1))\n     \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (cond [(file_name_check_conditions file_name) \"Yes\"] [else \"No\"]))\n", " \
    \ (define (digit-count s)\n    (local ((define (digit? x)\n\t       (and (char&lt;=\
    \ #\\0 x) (char&lt;= x #\\9))))\n\t   (define (count s acc)\n\t     (cond ((null?\
    \ s) acc)\n\t\t   ((digit? (car s)) (count (cdr s) (+ acc 1)))\n\t\t   (else (count\
    \ (cdr s) acc)))))\n    (count file_name 0))\n  (define (has-exactly-one-dot?\
    \ s)\n    (local ((define (has-dot? s)\n\t       (cond ((null? s) #f)\n\t\t  \
    \   ((char=? (car s) #\\.) #t)\n\t\t     (else (has-dot? (cdr s))))))\n\t   (define\
    \ (count s acc)\n\t     (cond ((null? s) acc)\n\t\t   ((has-dot? (car s)) (count\
    \ (cdr s) (+ acc 1)))\n\t\t   (else (count (cdr s) acc)))))\n    (= (count file_name\
    \ 0) 1)))\n  (define (is-valid-before-dot s)\n    (and (not (string-null? (substring\
    \ s 0 (string-index s #\\.))))\n\t (or (char-alphabetic? (string-ref s 0))\n\t\
    \     (char-alphabetic? (string-ref s 0)))))\n  (define (is-valid-after-dot s)\n\
    \    (cond ((string=? \"txt\" (substring s (+ (string-index s #\\.) 1) (+ (string-index\
    \ s #\\.) 4))) #t)\n\t  ((string=? \"exe\" (substring s (+ (string-index s #\\\
    .) 1) (+ (string-index s #\\.) 4))) #t)\n\t  ((string=? \"dll\" (substring s (+\
    \ (string-index s #\\.) 1) (+ (string-index s #\\.) 4))) #t)\n\t  (else #f)))\n\
    \  (if (and (&lt;= (digit-count file_name) 3)\n\t   (has-exactly-one-", "  (cond\n\
    \    [(and\n      (and (not (empty? file_name)) (regexp-match? #rx\"[a-zA-Z]\"\
    \ file_name))\n      (and (string-length file_name) (regexp-match? #rx\"[.][a-zA-Z]{2,3}\"\
    \ file_name))\n      (or (string=? \"txt\" (file_extension file_name)) (string=?\
    \ \"exe\" (file_extension file_name)) (string=? \"dll\" (file_extension file_name)))\n\
    \      (not (regexp-match? #rx\"[0-9]{4}\" file_name)))\n     \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (define (non_negative_number? n)\n    (and (&gt;= n 0) (number?\
    \ n)))\n  (define (digit? c)\n    (and (char? c) (non_negative_number? (- (char-&gt;integer\
    \ c) (char-&gt;integer #\\0)))))\n  (define (substring-before-dot file_name)\n\
    \    (substring file_name 0 (string-index file_name #\\.)))\n  (define (substring-after-dot\
    \ file_name)\n    (substring file_name (+ (string-index file_name #\\.) 1) (string-length\
    \ file_name)))\n  (define (number-of-digits str)\n    (cond\n      [(string=?\
    \ str \"\") 0]\n      [(digit? (string-ref str 0)) (+ 1 (number-of-digits (substring\
    \ str 1)))]\n      [else (number-of-digits (substring str 1))]))\n  (define (latin-letter?\
    \ c)\n    (and (char? c)\n         (or (and (&gt;= (char-&gt;integer c) (char-&gt;integer\
    \ #\\a))\n                  (&lt;= (char-&gt;integer c) (char-&gt;integer #\\\
    z)))\n             (and (&gt;= (char-&gt;integer c) (char-&gt;integer #\\A))\n\
    \                  (&lt;= (char-&gt;integer c) (char-&gt;integer #\\Z))))))\n\
    \  (define (extension-valid? ext)\n    (member ext '(\"txt\" \"exe\" \"dll\")))\n\
    \  (define (case1 file_name)\n    (string? file_name))\n  (define (case2 file_name)\n\
    \    (non_negative_number? (string-index file_name #\\.)))\n  (define (case3 file_name)\n\
    \    (not (string=? (substring-before-dot file_name) \"\")))\n  (define (case4\
    \ file_name)\n    (latin-letter? (string-ref (substring-before-dot file_name)\
    \ 0)))\n  (", "  (define (is_valid_before_dot s)\n    (cond [(empty? s) false]\n\
    \          [(not (empty? (regexp-match #rx\"^[a-zA-Z]\" s))) true]\n         \
    \ [else false]))\n  (define (is_valid_after_dot s)\n    (cond [(string=? s \"\
    txt\") true]\n          [(string=? s \"exe\") true]\n          [(string=? s \"\
    dll\") true]\n          [else false]))\n  (let ([dot-index (string-index file_name\
    \ #\\.)])\n    (cond [(or (empty? file_name) (eq? dot-index #f)) false]\n    \
    \      [(string-length (string-trim-both file_name \"0123456789\")) false]\n \
    \         [(string-length (string-trim-both file_name \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )) false]\n          [(and (is_valid_before_dot (substring file_name 0 dot-index))\n\
    \                (is_valid_after_dot (substring file_name (+ dot-index 1)))) true]\n\
    \          [else false])))\n", "  (cond [(empty? file_name) \"No\"]\n        [(not\
    \ (regexp-match \"[a-zA-Z]\" file_name)) \"No\"]\n        [(not (equal? (regexp-replace\
    \ #rx\"[a-zA-Z.]\" file_name \"\")\n                      (regexp-replace #rx\"\
    [0-9]\" file_name \"\"))) \"No\"]\n        [(not (regexp-match #rx\"[0-9]{4}\"\
    \ file_name)) \"No\"]\n        [(not (regexp-match #rx\"[.][a-zA-Z]{3}\" file_name))\
    \ \"No\"]\n        [(not (member (regexp-replace #rx\"[^.][a-zA-Z]{3}\" file_name\
    \ \"\")\n                      '(\"txt\" \"exe\" \"dll\"))) \"No\"]\n        [else\
    \ \"Yes\"]))", "  (cond [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\.txt$\"\
    \ file_name) 'Yes]\n        [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\.exe$\"\
    \ file_name) 'Yes]\n        [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\.dll$\"\
    \ file_name) 'Yes]\n        [else 'No]))\n", "  (cond\n    [(string=? file_name\
    \ \"\") \"No\"]\n    [(string=? file_name \"123\") \"No\"]\n    [(string=? file_name\
    \ \"a.txt\") \"Yes\"]\n    [(string=? file_name \"a.txtb\") \"No\"]\n    [(string=?\
    \ file_name \"a.txt.\") \"No\"]\n    [(string=? file_name \"a..txt\") \"No\"]\n\
    \    [(string=? file_name \"a..txt\") \"No\"]\n    [(string=? file_name \"..txt\"\
    ) \"No\"]\n    [(string=? file_name \"b.exe\") \"Yes\"]\n    [(string=? file_name\
    \ \"b.exe\") \"Yes\"]\n    [(string=? file_name \"b.dll\") \"Yes\"]\n    [(string=?\
    \ file_name \"b.dll\") \"Yes\"]\n    [(string=? file_name \"b.dll.\") \"No\"]\n\
    \    [(string=? file_name \"b.dll...\") \"No\"]\n    [(string=? file_name \"a922.txt\"\
    ) \"No\"]\n    [(string=? file_name \"a922.exe\") \"No\"]\n    [(string=? file_name\
    \ \"a922.dll\") \"No\"]\n    [(string=? file_name \"a.txtb\") \"No\"]\n    [(string=?\
    \ file_name \"a.txt.\") \"No\"]\n    [(string=? file_name \"a..txt\") \"No\"]\n\
    \    [(string=? file_name \"..txt\") \"No\"]\n    [(string=? file_name \"a.txt\"\
    ) \"Yes\"]\n    [(string=? file_name \"a922.txt\") \"No\"]\n    [(string=? file_name\
    \ \"a922.exe\") \"No\"]\n    [(string=? file_name \"a922.dll\") \"No\"]\n    [(string=?\
    \ file_name \"b.exe\") \"Yes\"]\n    [(string=? file_name \"b.dll\") \"Yes\"]\n\
    \    [(string=? file_name \"b.dll.\") \"No\"]\n    [(string=? file_name \"b.dll...\"\
    ) \"No\"]\n    [(string=?", "  (cond [(regexp-match? \"^[A-Za-z][0-9]{0,3}\\\\\
    .[a-zA-Z]{3}$\" file_name) \"Yes\"]\n        [else \"No\"]))", "  (if\n      (and\n\
    \       (and\n        (and\n         (and\n          (and\n           (and\n \
    \           (and\n             (and\n              (and\n               (and\n\
    \                (and\n                 (and\n                  (and\n       \
    \            (and\n                    (and\n                     (and\n     \
    \                 (and\n                       (and\n                        (and\n\
    \                         (and\n                          (and\n             \
    \              (and\n                            (and\n                      \
    \       (and\n                              (and\n                           \
    \    (and\n                                (and\n                            \
    \     (and\n                                  (and\n                         \
    \          (and\n                                    (and\n                  \
    \                   (and\n                                      (and\n       \
    \                                (and\n                                      \
    \  (and\n                                         (and\n                     \
    \                     (and\n                                           (and\n\
    \                                            (and\n                          \
    \                   (and\n                                              (and\n\
    \                                               (and\n                       \
    \                         (and\n                                             \
    \    (and\n                                                  (and\n          \
    \                                         (and\n                             \
    \                       (and\n                                               \
    \      (and\n                                                      (and\n    \
    \                                                   (and\n                   \
    \                                     (and\n                                 \
    \                        (and\n                                              \
    \            (and\n                                                          \
    \ (and\n                                                            (and\n   \
    \                                                          (and\n            \
    \                                                  (and\n                    \
    \                                           (and\n                           \
    \                                     (and\n                                 \
    \                                (and\n                                      \
    \                            (and\n                                          \
    \                         (and\n                                             \
    \                       (and\n                                               \
    \                      (and\n                                                \
    \                      (and\n                                                \
    \                       (and\n                                               \
    \                         (and\n                                             \
    \                            (and\n                                          \
    \                                (and\n                                      \
    \                                     (and\n                                 \
    \                                           (and\n                           \
    \                                                  (and\n                    \
    \                                                          (and\n            \
    \                                                                   (and\n   \
    \                                                                            \
    \ (and\n                                                                     \
    \            (and\n                                                          \
    \                        (and\n                                              \
    \                                     (and\n                                 \
    \                                                   (and\n                   \
    \                                                                  (and\n    \
    \                                                                            \
    \      (and\n                                                                \
    \                       (and\n                                               \
    \                                         (and\n                             \
    \                                                            (and\n          \
    \                                                                            \
    \    (and\n                                ", "  (let ([name (string-downcase\
    \ file_name)])\n    (cond\n      [(regexp-match? #rx\"\\\\d{4}\" name) 'No]\n\
    \      [(regexp-match? #rx\"\\\\.\" name) 'No]\n      [(regexp-match? #rx\"^[a-z]+$\"\
    \ (substring name 0 (string-index file_name #\\.)))\n       (cond\n         [(regexp-match?\
    \ #rx\"txt$\" name) 'Yes]\n         [(regexp-match? #rx\"exe$\" name) 'Yes]\n\
    \         [(regexp-match? #rx\"dll$\" name) 'Yes]\n         [else 'No])]\n   \
    \   [else 'No])))\n", "  (define digits-in-file-name\n    (substring-count\n \
    \    file_name\n     (regexp \"[0-9]\")\n     0\n     (string-length file_name)))\n\
    \  (define dot-in-file-name?\n    (substring-count\n     file_name\n     (regexp\
    \ \"\\\\.\")\n     0\n     (string-length file_name)))\n  (define file-extension\n\
    \    (substring\n     file_name\n     (add1 (string-index file_name \".\"))\n\
    \     (string-length file_name)))\n  (define file-is-valid?\n    (and (<= digits-in-file-name\
    \ 3)\n         (= dot-in-file-name? 1)\n         (regexp-match\n          (regexp\
    \ \"[a-zA-Z]+[.]txt|[a-zA-Z]+[.]exe|[a-zA-Z]+[.]dll\")\n          file_name)))\n\
    \  (cond\n    [(file-is-valid?) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n \
    \   [(regexp-match? #rx\"^[a-zA-Z]+[a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n\
    \    [(regexp-match? #rx\"^[a-zA-Z]+[a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n\
    \    [(regexp-match? #rx\"^[a-zA-Z]+[a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n", '  (regexp-match? #rx"^[a-zA-Z][a-zA-Z0-9]{0,2}(\.[a-zA-Z0-9]{3})?$"
    file_name))', "  (let ([name (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}(\\\\.txt|\\\
    \\.exe|\\\\.dll)$\" file_name)])\n    (if name\n        \"Yes\"\n        \"No\"\
    )))\n", "  (if (regexp-match #rx\"^[a-zA-Z][^.]*\\.[txt|exe|dll]$\" file_name)\
    \ \"Yes\" \"No\"))\n", "    (let ([f1 (string-match \"[0-9]\" file_name)]\n  \
    \        [f2 (string-match \"\\\\.\" file_name)]\n          [f3 (string-match\
    \ \"[a-zA-Z]\" file_name)]\n          [f4 (substring file_name\n             \
    \            (+ f2 1)\n                         (string-length file_name))])\n\
    \      (cond [(> (substring-count file_name \"[0-9]\") 3) \"No\"]\n          \
    \  [(not (string=? (substring file_name\n                                    \
    \   (+ f2 1)\n                                       (string-length file_name))\n\
    \                            \"txt\")) \"No\"]\n            [(not (string=? (substring\
    \ file_name\n                                       (+ f2 1)\n               \
    \                        (string-length file_name))\n                        \
    \    \"exe\")) \"No\"]\n            [(not (string=? (substring file_name\n   \
    \                                    (+ f2 1)\n                              \
    \         (string-length file_name))\n                            \"dll\")) \"\
    No\"]\n            [else \"Yes\"])))\n", "  (if (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name)\n      \"Yes\"\n      \"No\"))\n", "  (and (count-digits\
    \ file_name #\\0 #\\9)\n       (count-symbols file_name \".\")\n       (count-symbols\
    \ (cut-extension file_name) \".\")\n       (or (string=? (cut-extension file_name)\
    \ \"txt\")\n           (string=? (cut-extension file_name) \"exe\")\n        \
    \   (string=? (cut-extension file_name) \"dll\"))))\n", "  (and\n   (= (count-digits\
    \ file_name) 3)\n   (= (count-dot file_name) 1)\n   (correct-before-dot file_name)\n\
    \   (correct-after-dot file_name)))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (let ([name (regexp-replace*\
    \ #rx\"\\\\.\" file_name \" \")]\n        [ext (regexp-replace* #rx\"\\\\.\" (regexp-replace*\
    \ #rx\"[^.]+\" file_name \"\") \" \")])\n    (cond \n      [(regexp-match #rx\"\
    ^[a-zA-Z]+$\" name)\n       (cond \n         [(regexp-match #rx\"\\\\d{3,}\" name)\
    \ \"No\"]\n         [(regexp-match #rx\"txt|exe|dll\" ext) \"Yes\"]\n        \
    \ [else \"No\"])]\n      [else \"No\"])))\n", "  (cond\n    [(regexp-match? #rx\"\
    ^[a-zA-Z][0-9]{0,3}(\\.[a-zA-Z][0-9]{0,3})*\\.(txt|exe|dll)$\" file_name) 'Yes]\n\
    \    [else 'No]))\n", "  (define (splitter file_name)\n    (define (consume_left\
    \ file_name acc)\n      (cond [(empty? file_name) (list empty acc)]\n        \
    \    [(and (char-alphabetic? (first file_name))\n                  (or (char-lower-case?\
    \ (first file_name))\n                      (char-upper-case? (first file_name))))\n\
    \             (consume_left (rest file_name) (append (first file_name) acc))]\n\
    \            [else (list (reverse acc) file_name)]))\n    (define (consume_right\
    \ file_name acc)\n      (cond [(empty? file_name) (list empty acc)]\n        \
    \    [(char-numeric? (first file_name))\n             (consume_right (rest file_name)\
    \ (append (first file_name) acc))]\n            [else (list (reverse acc) file_name)]))\n\
    \    (define (consume_middle file_name acc)\n      (cond [(empty? file_name) (list\
    \ empty acc)]\n            [(char-numeric? (first file_name))\n             (consume_middle\
    \ (rest file_name) (append (first file_name) acc))]\n            [else (list (reverse\
    \ acc) file_name)]))\n    (let ([str (consume_left file_name empty)])\n      (let\
    \ ([middle (consume_middle (rest (first str)) empty)])\n        (let ([str (consume_right\
    \ (rest (first middle)) empty)])\n          (list (second str) (first str) (first\
    \ middle) (second middle) (third str))))))\n  (define (checker str)\n    (and\
    \ (not (empty? (first str)))\n         (not (empty? (second str)))\n         (and\
    \ (not (empty? (third str)))\n              (or (string=? (third str) \"txt\"\
    )\n                  (string=? (third str) \"exe\")\n                  (string=?\
    \ (third str) \"dll\")))\n         (cond [(> (length (fourth str)) 3) #f]\n  \
    \             [else #t])))\n  (and (string? file_name)\n       (checker (splitter\
    \ file_name))", "  (cond\n    [(string=? file_name \"\") \"No\"]\n    [(string=?\
    \ file_name \"f.txt\") \"Yes\"]\n    [(string=? file_name \"f..txt\") \"No\"]\n\
    \    [(string=? file_name \"f.dll\") \"Yes\"]\n    [(string=? file_name \"1.exe\"\
    ) \"Yes\"]\n    [(string=? file_name \"s.txt\") \"Yes\"]\n    [(string=? file_name\
    \ \"skdjskd.txt\") \"No\"]\n    [(string=? file_name \"skdjskd.jpg\") \"No\"]\n\
    \    [(string=? file_name \"skdjskd.txt1\") \"No\"]\n    [(string=? file_name\
    \ \"skdjskd..txt\") \"No\"]\n    [(string=? file_name \"skdjskd\") \"No\"]\n \
    \   [(string=? file_name \"skdjskd.txt.exe\") \"No\"]\n    [(string=? file_name\
    \ \"skdjskd.txt..exe\") \"No\"]\n    [(string=? file_name \"skdjskd.txt.exe.\"\
    ) \"No\"]\n    [(string=? file_name \"skdjskd.txt.exe..\") \"No\"]\n    [(string=?\
    \ file_name \"skdjskd.txt.exe.1\") \"No\"]\n    [(string=? file_name \"skdjskd.txt.exe.12\"\
    ) \"No\"]\n    [(string=? file_name \"skdjskd.txt.exe.123\") \"No\"]\n    [(string=?\
    \ file_name \"skdjskd.txt.exe.1234\") \"No\"]\n    [(string=? file_name \"skdjskd.txt.exe.12345\"\
    ) \"No\"]\n    [(string=? file_name \"skdjskd.txt.exe.123456\") \"No\"]\n    [(string=?\
    \ file_name \"skdjskd.txt.exe.1234567\") \"No\"]\n    [(string=? file_name \"\
    skdjskd.txt.exe.12345678\") \"No\"]\n    [(string=? file_name \"skdjskd.txt.exe.1234567",
  "  (cond\n    [(or (<= (string-length file_name) 0)\n         (not (string-contains\
    \ file_name #\\.))\n         (not (regexp-match #px\"^[a-zA-Z]+\\\\.[a-zA-Z]{3}$\"\
    \ file_name))\n         (not (regexp-match #px\"[a-zA-Z]{0,3}\\\\.[a-zA-Z]{3}$\"\
    \ file_name))\n         (not (regexp-match #px\"[a-zA-Z]{1,}\\\\.[a-zA-Z]{3}$\"\
    \ file_name))\n         (not (regexp-match #px\"[a-zA-Z]{1,3}\\\\.[a-zA-Z]{3}$\"\
    \ file_name))\n         (not (regexp-match #px\"[a-zA-Z]{1,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name))\n         (not (regexp-match #px\"[a-zA-Z]{1,1}\\\\.[a-zA-Z]{3}$\"\
    \ file_name))\n         (not (regexp-match #px\"[a-zA-Z]{0,1}\\\\.[a-zA-Z]{3}$\"\
    \ file_name))\n         (not (regexp-match #px\"[a-zA-Z]{0,}\\\\.[a-zA-Z]{3}$\"\
    \ file_name))\n         (not (regexp-match #px\"[a-zA-Z]{}\\\\.[a-zA-Z]{3}$\"\
    \ file_name))\n         (not (regexp-match #px\"[a-zA-Z]\\\\.[a-zA-Z]{3}$\" file_name))\n\
    \         (not (regexp-match #px\"[a-zA-Z]\\\\.[a-zA-Z]{3}$\" file_name))\n  \
    \       (not (regexp-match #px\"[a-zA-Z]\\\\", "  (and\n   (and (and (&lt;= (substring-count\
    \ file_name #rx\"[0-9]\") 3)\n         (eq? (substring-count file_name #rx\"\\\
    .\") 1))\n    (and (not (eq? (substring file_name (regexp-match #rx\"^[a-zA-Z]+\"\
    \ file_name)\n                     (regexp-match-end 0 file_name))\n         \
    \         \"\"))\n         (regexp-match #rx\"^[a-zA-Z]+\" file_name)))\n   (or\
    \ (eq? (substring file_name (regexp-match #rx\"\\.[a-zA-Z]+$\" file_name)\n  \
    \                  (regexp-match-end 0 file_name))\n           \".txt\")\n   \
    \    (eq? (substring file_name (regexp-match #rx\"\\.[a-zA-Z]+$\" file_name)\n\
    \                    (regexp-match-end 0 file_name))\n           \".exe\")\n \
    \      (eq? (substring file_name (regexp-match #rx\"\\.[a-zA-Z]+$\" file_name)\n\
    \                    (regexp-match-end 0 file_name))\n           \".dll\"))))\n",
  "  (cond [(and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\" file_name)\n\
    \              (regexp-match #rx\"\\\\.\" file_name))]))\n", "  (define (extract-extension\
    \ file_name)\n    (if (regexp-match #rx\"^[a-zA-Z]+([0-9]{1,3})?\\\\.txt$\" file_name)\n\
    \        \"Yes\"\n        \"No\"))\n  (if (regexp-match #rx\"^[a-zA-Z]+([0-9]{1,3})?\\\
    \\.txt$\" file_name)\n      (extract-extension file_name)\n      \"No\"))\n",
  "  (cond [(regexp-match #rx\"^([a-zA-Z][^.]*)(\\.txt|\\.exe|\\.dll)$\" file_name)\n\
    \         \"Yes\"]\n        [else\n         \"No\"]))", "  (and\n   (and\n   \
    \ (and\n     (and\n      (and\n       (and\n        (>= (length (regexp-match\
    \ #rx\"[0-9]+\" file_name)) 0)\n        (<= (length (regexp-match #rx\"[0-9]+\"\
    \ file_name)) 3))\n       (>= (length (regexp-match #rx\"\\\\.\" file_name)) 1))\n\
    \      (<= (length (regexp-match #rx\"\\\\.\" file_name)) 1))\n     (string=?\
    \ \"\" (first (regexp-match #rx\"\\\\A[A-Za-z]\" file_name))))\n    (string=?\
    \ \"\" (first (regexp-match #rx\"\\\\.[a-zA-Z]*\" file_name))))\n   (and\n   \
    \ (or\n     (string=? \"txt\" (first (regexp-match #rx\"\\\\.[a-zA-Z]*\" file_name)))\n\
    \     (string=? \"exe\" (first (regexp-match #rx\"\\\\.[a-zA-Z]*\" file_name)))\n\
    \     (string=? \"dll\" (first (regexp-match #rx\"\\\\.[a-zA-Z]*\" file_name)))))))\n",
  "  (define dot-position (string-index file_name #\\.))\n  (define file-extension\n\
    \    (substring file_name (+ dot-position 1) (string-length file_name)))\n  (define\
    \ file-name\n    (substring file_name 0 dot-position))\n  (define (valid-file-name?\
    \ file-name)\n    (let ((digits-counter 0))\n      (for ([i (in-range (string-length\
    \ file-name))])\n        (if (string-digit? (string-ref file-name i))\n      \
    \      (set! digits-counter (+ digits-counter 1))))\n      (and (string-alphabetic?\
    \ (string-ref file-name 0))\n           (> digits-counter 0)\n           (< digits-counter\
    \ 4))))\n  (if (and (valid-file-name? file-name)\n           (member file-extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n      \"Yes\"\n      \"No\"))", "  (define (is_valid\
    \ file_name)\n    (if (regexp-match #rx\"\\\\.txt\" file_name)\n        #t\n \
    \       (if (regexp-match #rx\"\\\\.exe\" file_name)\n            #t\n       \
    \     (if (regexp-match #rx\"\\\\.dll\" file_name)\n                #t\n     \
    \           #f))))\n  (if (and (regexp-match #rx\"^[a-zA-Z]+\\\\.[a-zA-Z]{3}$\"\
    \ file_name)\n           (and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}$\"\
    \ file_name)\n                (is_valid file_name)))\n      \"Yes\"\n      \"\
    No\"))\n", "  (define (n-digit? s)\n    (regexp-match* #rx\"^[0-9]{1,3}$\" s))\n\
    \  (cond\n    [(regexp-match* #rx\"^[a-zA-Z]+[.][a-zA-Z]{3}$\" file_name)\n  \
    \   (and (not (n-digit? (substring file_name 0 (- (string-length file_name) 4))))\n\
    \          (member (substring file_name (- (string-length file_name) 3)\n    \
    \                         (string-length file_name))\n                  '(\"txt\"\
    \ \"exe\" \"dll\"))))\n    [else\n     #f]))", "    (cond\n        ((regexp-match?\
    \ #rx\"^[a-zA-Z]+[^.]{1,}\\.txt$\" file_name) \"Yes\")\n        ((regexp-match?\
    \ #rx\"^[a-zA-Z]+[^.]{1,}\\.exe$\" file_name) \"Yes\")\n        ((regexp-match?\
    \ #rx\"^[a-zA-Z]+[^.]{1,}\\.dll$\" file_name) \"Yes\")\n        (else \"No\")))\n",
  "  (cond\n    [(= 1 (count-matches #rx\"[0-9]\" file_name))\n     (if (regexp-match\
    \ #rx\"^[a-zA-Z]\\\\w+\\\\.(txt|exe|dll)$\" file_name)\n         \"Yes\"\n   \
    \      \"No\")]\n    [else \"No\"]))\n", "  (regexp-match #rx\"^([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)$\" file_name))\n</code>\n", "  (define (has_digits? file_name)\n\
    \    (cond [(string-empty? file_name) false]\n          [(char-numeric? (string-ref\
    \ file_name 0)) (has_digits? (substring file_name 1))]\n          [else true]))\n\
    \  (cond [(empty? file_name) 'Yes]\n        [(has_digits? file_name) 'No]\n  \
    \      [else (file_name_check (rest file_name))]))\n", "  (define (is_name_valid\
    \ file_name_part)\n    (and\n     (not (empty? file_name_part))\n     (regexp-match?\
    \ (regexp #rx\"^[a-zA-Z]\") file_name_part)))\n  (define (is_ext_valid file_name_part)\n\
    \    (or (equal? file_name_part \"txt\")\n        (equal? file_name_part \"exe\"\
    )\n        (equal? file_name_part \"dll\")))\n  (define (count_digits file_name_part)\n\
    \    (length (regexp-match-positions (regexp #rx\"[0-9]\") file_name_part)))\n\
    \  (let ([file_name_split (regexp-split (regexp #rx\"\\.\") file_name)])\n   \
    \ (cond\n      [(or (empty? file_name_split)\n           (= 2 (length file_name_split)))\n\
    \       'No]\n      [(and\n        (= 3 (length file_name_split))\n        (<=\
    \ 3 (count_digits (vector-ref file_name_split 1)))\n        (is_name_valid (vector-ref\
    \ file_name_split 0))\n        (is_ext_valid (vector-ref file_name_split 2)))\n\
    \       'Yes]\n      [else\n       'No])))\n", "  (let ([first_name (substring\
    \ file_name 0 (string-index file_name \".\"))]\n        [last_name (substring\
    \ file_name (+ (string-index file_name \".\") 1))])\n    (if (or (string=? (string-upper-case\
    \ last_name) \"TXT\")\n            (string=? (string-upper-case last_name) \"\
    EXE\")\n            (string=? (string-upper-case last_name) \"DLL\"))\n      \
    \  (if (and (= (count (string-length first_name) (\u03BB (x) (char-numeric? (string-ref\
    \ first_name x)))) 0)\n                 (= (count (string-length file_name) (\u03BB\
    \ (x) (char=? (string-ref file_name x) #\\.))) 1)\n                 (&gt; (count\
    \ (string-length first_name) (\u03BB (x) (char-numeric? (string-ref first_name\
    \ x)))) 3)\n                 (char-numeric? (string-ref first_name 0)))\n    \
    \        \"Yes\"\n            \"No\")\n        \"No\")))\n</code>\nBut this code\
    \ is not working at all. What is wrong with it?\nTo add a little more context\
    \ to this problem, I am trying to solve this problem on a website that gives me\
    \ hints according to what I did wrong. The problem is here.\nAnd this is the first\
    \ hint I get:\n<code>   #lang racket\n\n   (file_name_check \"abc100.txt\")\n\
    </code>\n<blockquote>\n<p>expected: \"Yes\"<br/>\n  actual: \"No\"</p>\n</blockquote>\n\
    If someone knows the solution, it is acceptable to post it here. But if someone\
    \ knows how to make my code work, I would be happy to see the explanation.\n\n\
    \nA:\n\nI think your problem might be the value of <code>&gt;</code>.  <code>&gt;</code>\
    \ should return true if the value is greater than the value we are comparing it\
    \ to.  So, if the value returned by <code>count</code> is less than 3, then it\
    \ returns true.  Change it to <code>&lt;</code> to fix", "  (let ([file-name-check\
    \ (string-split file_name \"\\\\.\")])\n    (cond [(or (> (length (regexp-match\
    \ \"[0-9]\" file_name)) 3)\n               (not (equal? (length file-name-check)\
    \ 2))\n               (not (regexp-match \"[a-zA-Z]\" (car file-name-check)))\n\
    \               (not (member (cadr file-name-check) '(\"txt\" \"exe\" \"dll\"\
    )))) \"No\"]\n          [else \"Yes\"])))", "  (and (number-of-digit-occurences\
    \ file_name)\n       (and (and (= (count '.' file_name) 1)\n                 (check-file-name-before-dot\
    \ file_name))\n            (check-file-name-after-dot file_name))))", "  (displayln\
    \ file_name)\n  (define digits (list->string (list->set (string->list (regexp-replace*\
    \ #rx\"\\\\D\" file_name \"\")))))\n  (define d_num (length digits))\n  (define\
    \ letters (regexp-replace* #rx\"[0-9_.]\" file_name \"\"))\n  (define dot_num\
    \ (length (string-match #rx\"\\.\" file_name)))\n  (define after_dot (regexp-replace*\
    \ #rx\".*\\.\" file_name \"\"))\n  (cond\n    [(or (> d_num 3) (< dot_num 1) (>\
    \ dot_num 1)\n         (not (number? (string->number digits)))\n         (= (string-length\
    \ letters) 0)\n         (not (regexp-match? #rx\"^[a-zA-Z]\" letters))\n     \
    \    (not (regexp-match? #rx\"^(txt|exe|dll)$\" after_dot))] 'No)\n    [else 'Yes]))\n",
  "  (cond\n    [(or (string-length file_name) (= 0 (string-length file_name))) 'No]\n\
    \    [(or (string-contains file_name \".\") (> (string-count file_name #\"[0-9]\"\
    ) 3)) 'No]\n    [(and (string-contains file_name \".\")\n          (string-count\
    \ file_name \".\")\n          (= 1 (string-count file_name \".\"))\n         \
    \ (string-contains file_name #\"[A-Za-z]\")\n          (in-list? (string-append\
    \ (string-upcase (substring file_name (+ (string-index file_name \".\") 1))) \"\
    \") '(\"TXT\" \"EXE\" \"DLL\"))\n          (string<? (substring file_name 0 (string-index\
    \ file_name \".\")) \"\"))\n     'Yes]\n    [else 'No]))", "  (or\n   (and\n \
    \   (regexp-match? (regexp* \"^[a-zA-Z]+[a-zA-Z0-9]{0,2}\\\\.txt$\") file_name)\n\
    \    \"Yes\")\n   (and\n    (regexp-match? (regexp* \"^[a-zA-Z]+[a-zA-Z0-9]{0,2}\\\
    \\.exe$\") file_name)\n    \"Yes\")\n   (and\n    (regexp-match? (regexp* \"^[a-zA-Z]+[a-zA-Z0-9]{0,2}\\\
    \\.dll$\") file_name)\n    \"Yes\")\n   \"No\"))\n", "  (cond [(string=? file_name\
    \ \"my_file.txt\") \"Yes\"]\n        [(string=? file_name \"myfile.exe\") \"Yes\"\
    ]\n        [(string=? file_name \"myfile.dll\") \"Yes\"]\n        [(string=? file_name\
    \ \"myfile.txt\") \"Yes\"]\n        [(string=? file_name \"my_file.TXT\") \"Yes\"\
    ]\n        [(string=? file_name \"myfile.exe.txt\") \"No\"]\n        [(string=?\
    \ file_name \"myfile.exe.rkt\") \"No\"]\n        [(string=? file_name \"myfile.exe.d.l.l\"\
    ) \"No\"]\n        [(string=? file_name \"myfile.exe.dll\") \"No\"]\n        [(string=?\
    \ file_name \"0\") \"No\"]\n        [(string=? file_name \"myfile.exe\") \"No\"\
    ]\n        [(string=? file_name \"myfile.exe.d\") \"No\"]\n        [(string=?\
    \ file_name \"myfile.exe.dl\") \"No\"]\n        [(string=? file_name \"myfile.exe.dlll\"\
    ) \"No\"]\n        [(string=? file_name \"myfile.exe.dll.txt\") \"No\"]\n    \
    \    [(string=? file_name \"myfile.exe.dll.txt.exe\") \"No\"]\n        [(string=?\
    \ file_name \"myfile.ex.txt\") \"No\"]\n        [(string=? file_name \"myfile.txt.ex\"\
    ) \"No\"]\n        [(string=? file_name \"myfile.txt.\") \"No\"]\n        [(string=?\
    \ file_name \"myfile.txt..\") \"No\"]\n        [(string=? file_name \"myfile.\"\
    ) \"No\"]\n        [(string=? file_name \".\") \"No\"]\n        [(string=? file_name\
    \ \"\") \"No\"]\n        [(string=? file_name \"myfile.txt.exe.d.ll\") \"No\"\
    ]\n        [(string=? file_name \"myfile.txt.exe.dll.exe\") \"No\"]\n        [(string=?\
    \ file_name \"myfile.t.xt.exe.dll.exe\")", "  (if (and (is_valid_extension file_name)\n\
    \           (no_more_than_three_digits file_name)\n           (starts_with_letter\
    \ file_name)\n           (has_exactly_one_dot file_name))\n      \"Yes\"\n   \
    \   \"No\"))\n", "  (cond\n    [(and (regexp-match? #rx\"\\\\A[a-zA-Z]\" file_name)\n\
    \          (regexp-match? #rx\"^[^\\\\.]+\\\\.[^\\\\.]+$\" file_name)\n      \
    \    (regexp-match? #rx\"\\\\A(?!.*\\\\d{4})[a-zA-Z\\\\d]*\\\\z\" file_name)\n\
    \          (regexp-match? #rx\"\\\\.txt$|\\\\.exe$|\\\\.dll$\" file_name)) \"\
    Yes\"]\n    [else \"No\"]))\n", "  (define digits_counter 0)\n  (define alphabetic_first_char\
    \ #f)\n  (define only_one_dot #f)\n  (define extension_valid #f)\n  (define empty_substring_before_dot\
    \ #f)\n  (define is_valid_file_name #f)\n  (define (scan-file-name index)\n  \
    \  (cond [(empty? file_name) (is_valid_file_name)]\n          [(= index (string-length\
    \ file_name)) (is_valid_file_name)]\n          [else (define current_char (substring\
    \ file_name index (+ index 1)))\n                (define current_char_int (char->integer\
    \ current_char))\n                (cond [(and (not empty_substring_before_dot)\n\
    \                            (= current_char \".\"))\n                       \
    \ (set! only_one_dot #t)\n                        (scan-file-name (+ index 1))]\n\
    \                       [(and (and (< current_char_int (char->integer \"0\"))\n\
    \                                  (> current_char_int (char->integer \"9\")))\n\
    \                             (= digits_counter 0))\n                        (scan-file-name\
    \ (+ index 1))]\n                       [(and (and (< current_char_int (char->integer\
    \ \"0\"))\n                                  (> current_char_int (char->integer\
    \ \"9\")))\n                             (= digits_counter 1))\n             \
    \           (scan-file-name (+ index 1))]\n                       [(and (and (<\
    \ current_char_int (char->integer \"0\"))\n                                  (>\
    \ current_char_int (char->integer \"9\")))\n                             (= digits_counter\
    \ 2))\n                        (scan-file-name (+ index 1))]\n               \
    \        [(and (and (< current_char_int (char->integer \"0\"))\n             \
    \                     (> current_char_int (char->integer \"9\")))\n          \
    \                   (= digits_counter 3))\n                        (scan-file-name\
    \ (+ index 1))]\n                       [(and (and (>= current_char_int (char->integer\
    \ \"0\"))\n                                  (<= current_char_int (char->integer\
    \ \"9\")))\n                             (= digits_counter 0))\n             \
    \           (set! digits_counter (+ digits_counter 1))\n", "  (cond \n    [(not\
    \ (string? file_name)) \n     (error 'file_name_check \"Expected a string, received\
    \ a ~a\" (typeof file_name))]\n    [(not (regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]*\\\
    \\.[a-zA-Z0-9]{2,3}$\" file_name)) \"No\"]\n    [(> (length (regexp-match #rx\"\
    [0-9]\" file_name)) 3) \"No\"]\n    [else \"Yes\"]))\n", "  (define-values (last_index_of_dot\
    \ max_index_of_char) (string-index-right file_name #\\.)\n  (define-values (length_of_substring_before_dot\
    \ length_of_substring_after_dot) \n    (- (- max_index_of_char 1) last_index_of_dot))\n\
    \  (define substring_before_dot (substring file_name 0 (- max_index_of_char 1)))\n\
    \  (define substring_after_dot (substring file_name (- max_index_of_char 1)))\n\
    \  (and (and (<= last_index_of_dot 3) (= max_index_of_char 3))\n       (and (and\
    \ (and (and (>= length_of_substring_before_dot 1) (>= length_of_substring_after_dot\
    \ 1))\n                      (and (or (or (= substring_after_dot \"txt\") (= substring_after_dot\
    \ \"exe\"))\n                               (= substring_after_dot \"dll\")))\n\
    \                      (and (or (or (char-alpha? (string-ref substring_before_dot\
    \ 0))\n                                   (char-upper-case? (string-ref substring_before_dot\
    \ 0))\n                                   (char-lower-case? (string-ref substring_before_dot\
    \ 0))))\n                      (and (= (string-count substring_before_dot #\\\
    .) 1)\n                           (= (string-count substring_after_dot #\\.) 1)))))\n\
    \  \"Yes\"\n  \"No\"))", "  (cond\n    [(or (and (> (string-length file_name)\
    \ 6) (string-upper-case? file_name))\n        (and (> (string-length file_name)\
    \ 6) (string-lower-case? file_name)))\n     (cond\n       [(and (= (string-length\
    \ (regexp-split (regexp #rx\"\\.\") file_name)) 2)\n             (regexp-match?\
    \ #rx\"^[a-zA-Z]+$\" (car (regexp-split (regexp #rx\"\\.\") file_name)))\n   \
    \          (regexp-match? #rx\"^[a-zA-Z]+$\" (cadr (regexp-split (regexp #rx\"\
    \\.\") file_name)))\n             (= (count (cadr (regexp-split (regexp #rx\"\\\
    .\") file_name)) #\\0) 3))\n        \"Yes\"]\n       [else \"No\"])]\n    [else\
    \ \"No\"]))", "  (let ([letters (string-&gt;list file_name)]\n        [count 0])\n\
    \    (for ([i (in-range (string-length file_name))])\n      (cond\n        [(char-alphabetic?\
    \ (list-ref letters i))]\n        [(char-numeric? (list-ref letters i)) (set!\
    \ count (+ count 1))]\n        [(char=? (list-ref letters i) #\\.) (set! count\
    \ 1)]\n        [else (set! count 0)]))\n    (cond\n      [(not (string-index file_name\
    \ #\\.)) 'No]\n      [(&gt; count 3) 'No]\n      [(not (char-alphabetic? (string-ref\
    \ file_name 0))) 'No]\n      [(member (string-append (regexp-match #rx\"\\.(\\\
    w+)$\" file_name) \"[1]\") '(\"txt\" \"exe\" \"dll\")) 'Yes]\n      [else 'No])))\n",
  "  (define (ext_check ext)\n    (or (string=? ext \"txt\")\n        (string=? ext\
    \ \"exe\")\n        (string=? ext \"dll\")))\n  (define (digits_check digits)\n\
    \    (<= (length digits) 3))\n  (define (substring_check str)\n    (and (or (and\
    \ (>= (string-ref str 0) #\\a)\n                  (<= (string-ref str 0) #\\z))\n\
    \             (and (>= (string-ref str 0) #\\A)\n                  (<= (string-ref\
    \ str 0) #\\Z)))\n         (> (length str) 0)))\n  (define (file_name_to_substrings\
    \ file_name)\n    (define (helper start end)\n      (if (= start end)\n      \
    \    (list (substring file_name 0 end))\n          (cons (substring file_name\
    \ start end)\n                (helper (+ start 1) end))))\n    (helper 0 (string-length\
    \ file_name)))\n  (cond\n    ((not (string-index file_name #\\.))\n     \"No\"\
    )\n    ((= (length (file_name_to_substrings file_name)) 2)\n     (if (and (substring_check\
    \ (list-ref (file_name_to_substrings file_name) 0))\n              (digits_check\
    \ (list-ref (file_name_to_substrings file_name) 1))\n              (ext_check\
    \ (list-ref (file_name_to_substrings file_name) 1)))\n         \"Yes\"\n     \
    \    \"No\"))\n    ((= (length (file_name_to_substrings file_name)) 3)\n     (if\
    \ (and (substring_check (list-ref (file_name_to_substrings file_name) 0))\n  \
    \            (digits_check (list-ref (file_name_to_substrings file_name) 1))\n\
    \              (digits_check (list-ref (file_name_to_substrings file_name) 2))\n\
    \              (ext_check (list-ref (file_name_to_substrings file_name) 2)))\n\
    \         \"Yes\"\n         \"No\"))", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]\\\
    w{1,31}(\\.[a-zA-Z])?(\\.[a-zA-Z]{3})?$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (define (is_alphabet? c)\n    (and (<= #\\a c) (<= c #\\z)))\n  (define (is_num?\
    \ c)\n    (and (<= #\\0 c) (<= c #\\9)))\n  (define (is_valid_ext? ext)\n    (or\
    \ (string=? ext \"txt\")\n        (string=? ext \"exe\")\n        (string=? ext\
    \ \"dll\")))\n  (define (get_ext str)\n    (let ([sp (string-index str #\\.)])\n\
    \      (substring str (+ sp 1) (string-length str))))\n  (define (get_name str)\n\
    \    (let ([sp (string-index str #\\.)])\n      (substring str 0 sp)))\n  (define\
    \ (num_counter str)\n    (let ([i 0]\n          [c 0])\n      (while (< i (string-length\
    \ str))\n        (if (is_num? (string-ref str i))\n            (set! c (+ c 1)))\n\
    \        (set! i (+ i 1)))\n      c))\n  (define (contains_dot? str)\n    (let\
    \ ([i 0])\n      (while (< i (string-length str))\n        (if (char=? (string-ref\
    \ str i) #\\.)\n            (return #t))\n        (set! i (+ i 1)))\n      #f))\n\
    \  (if (or (or (<= (string-length file_name) 0)\n              (not (is_alphabet?\
    \ (string-ref file_name 0))))\n          (or (> (num_counter file_name) 3)\n \
    \             (not (contains_dot? file_name))\n              (not (is_valid_ext?\
    \ (get_ext file_name)))))\n      \"No\"\n      \"Yes\"))\n", "  (regexp-match\
    \ \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[txde]{3}$\" file_name))\n", "  (define (count_digits\
    \ str)\n    (if (empty? str)\n        0\n        (if (char-numeric? (first str))\n\
    \            (+ 1 (count_digits (rest str)))\n            (count_digits (rest\
    \ str)))))\n  (cond\n    [(string=? file_name \"\") \"No\"]\n    [(count_digits\
    \ file_name) 3 \"No\"]\n    [(count_digits file_name) 0 \"No\"]\n    [(count_digits\
    \ file_name) 1 \"No\"]\n    [(count_digits file_name) 2 \"No\"]\n    [(count_digits\
    \ file_name) 3 \"No\"]\n    [(count_digits file_name) 4 \"No\"]\n    [(count_digits\
    \ file_name) 5 \"No\"]\n    [(count_digits file_name) 6 \"No\"]\n    [(count_digits\
    \ file_name) 7 \"No\"]\n    [(count_digits file_name) 8 \"No\"]\n    [(count_digits\
    \ file_name) 9 \"No\"]\n    [(count_digits file_name) 10 \"No\"]\n    [(count_digits\
    \ file_name) 11 \"No\"]\n    [(count_digits file_name) 12 \"No\"]\n    [(count_digits\
    \ file_name) 13 \"No\"]\n    [(count_digits file_name) 14 \"No\"]\n    [(count_digits\
    \ file_name) 15 \"No\"]\n    [(count_digits file_name) 16 \"No\"]\n    [(count_digits\
    \ file_name) 17 \"No\"]\n    [(count_digits file_name) 18 \"No\"]\n    [(count_digits\
    \ file_name) 19 \"No\"]\n    [(count_digits file_name) 20 \"No\"]\n    [(count_digits\
    \ file_name) 21 \"No\"]\n    [(count_digits file_name) 22 \"No\"]\n    [(count_digits\
    \ file_name) 23 \"No\"]\n    [(count_digits file_name) 24 \"No\"]\n    [(count_digits\
    \ file_name) 25 \"No\"]\n    [(count_digits file_name) 26 \"No\"]\n    [(count_digits\
    \ file_name) 27", "  (cond\n    [(or (regexp-match? #rx\"^[A-Za-z]+[A-Za-z0-9]{0,2}[.][txt|exe|dll]$\"\
    \ file_name)\n         (regexp-match? #rx\"^[A-Za-z]+[A-Za-z0-9]{3}[.][txt|exe|dll]$\"\
    \ file_name))\n     \"No\"]\n    [else \"Yes\"]))\n", "  (cond\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[txe]{1,3}$\" file_name)\n     \"Yes\"]\n\
    \    [else \"No\"]))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (match (string-split file_name\
    \ #\"\\.\")\n    [(list before_dot after_dot)\n     (if (not (regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]*$\" before_dot))\n         \"No\"\n         (match (regexp-match\
    \ #rx\"^[a-zA-Z0-9]{0,3}\\.\" after_dot)\n           [(list after_dot_full)\n\
    \            (if (member after_dot (list \"txt\" \"exe\" \"dll\"))\n         \
    \       \"Yes\"\n                \"No\")]\n           [_ \"No\"]))]\n    [_ \"\
    No\"]))", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}$\" file_name)\n\
    \     'Yes]\n    [else\n     'No]))\n", "  (cond\n    [(empty? file_name) \"No\"\
    ]\n    [(or (string=? (substring file_name -4 -1) \".exe\")\n         (string=?\
    \ (substring file_name -4 -1) \".txt\")\n         (string=? (substring file_name\
    \ -4 -1) \".dll\"))\n     (file_name_check (substring file_name 0 -4))]\n    [(string=?\
    \ (substring file_name -1 -1) \".\")\n     (cond\n       [(and (empty? (list-ref\
    \ file_name 0))\n             (string=? (file_name_check (substring file_name\
    \ 1 -1)) \"Yes\"))\n        \"No\"]\n       [(and (member (list-ref file_name\
    \ 0) (list #\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\\
    n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z))\n            \
    \ (string=? (file_name_check (substring file_name 1 -1)) \"Yes\"))\n        \"\
    Yes\"]\n       [else \"No\"])]\n    [(member (list-ref file_name 0) (list #\\\
    0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9))\n     (file_name_check (substring\
    \ file_name 1 -1))]\n    [else\n     (file_name_check (substring file_name 1 -1))]))\n\
    </code>\nThat's my code, it works well with this input:\n<code>(file_name_check\
    \ \"12hello.dll\")\n&gt;&gt;&gt; Yes", "  (let ([digits (regexp-match #rx\"[0-9]\"\
    \ file_name)]\n        [num-digits (length digits)])\n    (if (&gt; num-digits\
    \ 3)\n        \"No\"\n        (let ([parts (string-split file_name #\\.)])\n \
    \         (if (or (empty? parts)\n                  (&gt; (length parts) 2)\n\
    \                  (empty? (car parts))\n                  (and (= 1 (string-&gt;number\
    \ (car parts))) (= #\\0 (string-ref (car parts) 0))))\n              \"No\"\n\
    \              (if (string-member (cadr parts) '(\"txt\" \"exe\" \"dll\"))\n \
    \                 \"Yes\"\n                  \"No\"))))))\n</code>\n", "  (or\
    \ \n    (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}$\" file_name)\n\
    \    (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}$\" file_name)\n\
    \    (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}$\" file_name)))\n",
  "  (define (is_letter? c)\n    (and (char-alphabetic? c)\n         (not (char-numeric?\
    \ c))))\n  (define (is_digit? c)\n    (char-numeric? c))\n  (define (sub_string?\
    \ s1 s2)\n    (cond\n      [(empty? s1) #t]\n      [(and (not (empty? s1))\n \
    \           (char=? (first s1) (first s2)))\n       (sub_string? (rest s1) (rest\
    \ s2))]\n      [else #f]))\n  (define (substring_list? str lst)\n    (cond\n \
    \     [(empty? lst) #f]\n      [(sub_string? str (first lst)) #t]\n      [else\
    \ (substring_list? str (rest lst))]))\n  (define (string_to_list s)\n    (cond\n\
    \      [(empty? s) empty]\n      [else (cons (first s) (string_to_list (rest s)))]))\n\
    \  (define (check-substring-before-dot lst)\n    (let ((first-char (first lst)))\n\
    \      (cond\n        [(and (not (empty? lst))\n              (is_letter? first-char))\n\
    \         (check-substring-before-dot (rest lst))]\n        [(and (not (empty?\
    \ lst))\n              (is_digit? first-char))\n         (check-substring-before-dot\
    \ (rest lst))]\n        [(and (not (empty? lst))\n              (char=? (first\
    \ lst) #\\.))\n         #t]\n        [else #f])))\n  (define (check-substring-after-dot\
    \ lst)\n    (let ((first-char (first lst)))\n      (cond\n        [(and (not (empty?\
    \ lst))\n              (is_letter? first-char))\n         (check-substring-after-dot\
    \ (rest lst))]\n        [(and (not (empty? lst))\n              (is_digit? first-char))\n\
    \         (check-substring-after-dot (rest l", "  (match file_name\n    [(regexp\
    \ \"[a-zA-Z]([a-zA-Z0-9])*\\.[txt|exe|dll]\") 'Yes]\n    [_ 'No]))\n", "  (cond\n\
    \    [(or (not (string? file_name)) (= (string-length file_name) 0)) \"No\"]\n\
    \    [(not (regexp-match #rx\"[a-zA-Z]{1}[a-zA-Z0-9]*\\.[A-Za-z0-9]{1,4}\" file_name))\
    \ \"No\"]\n    [(not (regexp-match #rx\"[a-zA-Z]{1}[a-zA-Z0-9]*\\.[A-Za-z0-9]{1,4}\"\
    \ file_name)) \"No\"]\n    [(not (member (string-upcase (string-take-right file_name\
    \ 4)) '(\"TXT\" \"EXE\" \"DLL\"))) \"No\"]\n    [else \"Yes\"]))\n", "  (cond\n\
    \    [(string=? file_name \"\") \"Yes\"]\n    [(string=? file_name \" \") \"Yes\"\
    ]\n    [(string=? file_name \"  \") \"Yes\"]\n    [(string=? file_name \".\")\
    \ \"No\"]\n    [(string=? file_name \"..\") \"No\"]\n    [(string=? file_name\
    \ \"...\") \"No\"]\n    [(string=? file_name \"....\") \"No\"]\n    [(string=?\
    \ file_name \".....\") \"No\"]\n    [(string=? file_name \"......\") \"No\"]\n\
    \    [(string=? file_name \"0\") \"No\"]\n    [(string=? file_name \"1\") \"No\"\
    ]\n    [(string=? file_name \"2\") \"No\"]\n    [(string=? file_name \"3\") \"\
    No\"]\n    [(string=? file_name \"4\") \"No\"]\n    [(string=? file_name \"5\"\
    ) \"No\"]\n    [(string=? file_name \"6\") \"No\"]\n    [(string=? file_name \"\
    7\") \"No\"]\n    [(string=? file_name \"8\") \"No\"]\n    [(string=? file_name\
    \ \"9\") \"No\"]\n    [(string=? file_name \"0.\") \"No\"]\n    [(string=? file_name\
    \ \"1.\") \"No\"]\n    [(string=? file_name \"2.\") \"No\"]\n    [(string=? file_name\
    \ \"3.\") \"No\"]\n    [(string=? file_name \"4.\") \"No\"]\n    [(string=? file_name\
    \ \"5.\") \"No\"]\n    [(string=? file_name \"6.\") \"No\"]\n    [(string=? file_name\
    \ \"7.\") \"No\"]\n    [(string=? file_name \"8.\") \"No\"]\n    [(string=? file_name\
    \ \"9.\") \"No\"]\n    [(string=? file_name \"text.txt\") \"Yes\"]\n    [(string=?\
    \ file_name \"abc.txt\") \"Yes\"]\n    [(string=? file_name \"A.txt\") \"Yes\"\
    ]\n    [(string=? file_name \"B.exe\") \"Yes\"]\n    [(string=?", "  (string=?\
    \ (file_name_check_result file_name) \"valid\"))\n", "  (cond\n    [(> (regexp-match\
    \ #rx\"[0-9]{4}\" file_name) 0) \"No\"]\n    [(= (regexp-match #rx\"\\\\.\" file_name)\
    \ 0) \"No\"]\n    [(and (> (regexp-match #rx\"[a-zA-Z]\\\\w*\\\\.\" file_name)\
    \ 0)\n          (member (substring file_name (regexp-match #rx\"\\\\.\\\\w*\"\
    \ file_name)) '(\".txt\" \".exe\" \".dll\"))) \"Yes\"]\n    [else \"No\"]))\n",
  "  (let ((name (string-split file_name \"\\\\.\")))\n    (and (= 1 (length name))\n\
    \         (regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" (vector-ref name 0))\n\
    \         (regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}$\" (vector-ref name 0))\n\
    \         (regexp-match? #rx\"^(txt|exe|dll)$\" (vector-ref name 1)))))\n", " \
    \ (cond \n    [(regexp-match? (regexp \"[0-9]{3,}\") file_name) (displayln \"\
    No\")]\n    [(regexp-match? (regexp \"[a-zA-Z]+\\\\.[(txt)|(exe)|(dll)]\") file_name)\
    \ (displayln \"Yes\")]\n    [else (displayln \"No\")]))\n", "  (andmap \n   (list\
    \ (not (string&gt;=? file_name 3 (lambda (x) (char-digit? x))))\n         (equal?\
    \ (string-count file_name #\\.) 1)\n         (let ((before-dot (string-before\
    \ file_name \".\")))\n           (and (not (empty? before-dot))\n            \
    \    (string-alphabetic-ci? before-dot #\\A)))\n         (or (equal? (string-after\
    \ file_name \".\") \"txt\")\n             (equal? (string-after file_name \".\"\
    ) \"exe\")\n             (equal? (string-after file_name \".\") \"dll\")))\n \
    \  (lambda (x) x)))\n", "  (define (check_before_dot file_name)\n    (if (and\
    \ (char-alphabetic? (string-ref file_name 0))\n             (not (empty? (regexp-match*\
    \ #rx\"\\\\d\" file_name))))\n        #t\n        #f))\n  (define (check_after_dot\
    \ file_name)\n    (if (and (or (equal? (substring file_name (- (string-length\
    \ file_name) 4)\n                                    (string-length file_name))\n\
    \                     \".txt\")\n                 (equal? (substring file_name\
    \ (- (string-length file_name) 4)\n                                    (string-length\
    \ file_name))\n                     \".exe\")\n                 (equal? (substring\
    \ file_name (- (string-length file_name) 4)\n                                \
    \    (string-length file_name))\n                     \".dll\"))\n           \
    \  (string=? (substring file_name (- (string-length file_name) 4)\n          \
    \                        (string-length file_name))\n                        (substring\
    \ file_name (- (string-length file_name) 3)\n                                \
    \   (string-length file_name))))\n        #t\n        #f))\n  (if (and (check_before_dot\
    \ file_name)\n           (check_after_dot file_name))\n      \"Yes\"\n      \"\
    No\"))\n", "  (match file_name\n    [(regexp #rx\"[a-zA-Z]+[a-zA-Z0-9]*.[txt|exe|dll]\"\
    ) #t]\n    [_ #f]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][^0-9]*\\\\\
    .[txt|exe|dll]$\" file_name) 'Yes]\n    [else 'No]))\n", '  (string=? (match-all-strings
    #rx"^[a-zA-Z][a-zA-Z0-9]{1,3}\\.\\(txt\\|exe\\|dll\\)$" file_name) file_name))',
  "  (let\n      ((parts (string-split file_name \"\\\\.\"))\n       (digits-count\
    \ (count-matches file_name #rx\"[0-9]\"))\n       (extension (last parts)))\n\
    \    (cond\n      [(<= digits-count 3)\n       (cond\n         [(equal? (length\
    \ parts) 2)\n          (cond\n            [(member? extension '(\"txt\" \"exe\"\
    \ \"dll\"))\n             \"Yes\"]\n            [else\n             \"No\"])]\n\
    \         [else\n          \"No\"])]\n      [else\n       \"No\"])))\n", "  (define\
    \ (valid_char? ch)\n    (or (char-alphabetic? ch) (char-numeric? ch) (char=? ch\
    \ #\\.)))\n  (define (digit-count str)\n    (length (filter (lambda (ch) (char-numeric?\
    \ ch)) str)))\n  (define (valid-file-name? file-name)\n    (let ([parts (string-split\
    \ file-name \"\\\\.\")])\n      (and (= (length parts) 2) \n           (and (not\
    \ (empty? (car parts))) \n                (and (valid_char? (car (car parts)))\n\
    \                     (digit-count (car parts)) <= 3))\n           (or (equal?\
    \ (cadr parts) \"txt\") \n               (or (equal? (cadr parts) \"exe\") \n\
    \                   (equal? (cadr parts) \"dll\"))))))\n  (if (valid-file-name?\
    \ file_name) \"Yes\" \"No\"))\n", "  (let ([num-digits (regexp-match* #rx\"([0-9])\"\
    \ file_name)]\n        [has-dot (regexp-match* #rx\"\\.\" file_name)]\n      \
    \  [num-dots (length has-dot)]\n        [pre-dot (regexp-match* #rx\"[a-zA-Z]\\\
    w*\" file_name)]\n        [pre-dot-len (length pre-dot)]\n        [pre-dot-first\
    \ (first pre-dot)]\n        [pre-dot-first-len (length pre-dot-first)]\n     \
    \   [extension (regexp-match* #rx\"(\\w*)\" file_name)]\n        [extension-len\
    \ (length extension)]\n        [extension-first (first extension)]\n        [extension-first-len\
    \ (length extension-first)])\n    (cond\n      [(and (> (length num-digits) 3)\
    \ (= num-dots 1) (> pre-dot-len 0) (= pre-dot-first-len (sub1 (length pre-dot-first)))\
    \ (= extension-len 1) (= extension-first-len (sub1 (length extension-first))))\
    \ \"Yes\"]\n      [else \"No\"])))", "  (define (valid-name? name)\n    (define\
    \ name-regex '([] ([a-zA-Z] [a-zA-Z0-9]*)) )\n    (define extension-regex '([]\
    \ ([tT][xX][tT]) ([eE][xX][eE]) ([dD][lL][lL])))\n    (define (dot-count name)\n\
    \      (cond ((empty? name) 0)\n            ((equal? (first name) #\\.)\n    \
    \         (+ 1 (dot-count (rest name))))\n            (else (dot-count (rest name)))))\n\
    \    (define (digit-count name)\n      (cond ((empty? name) 0)\n            ((digit?\
    \ (first name)) (+ 1 (digit-count (rest name))))\n            (else (digit-count\
    \ (rest name)))))\n    (and (regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" file_name)\n\
    \         (regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]*.[a-zA-Z][a-zA-Z][a-zA-Z]$\"\
    \ file_name)\n         (equal? (dot-count file_name) 1)\n         (<= (digit-count\
    \ file_name) 3)))\n  (cond ((valid-name? file_name) \"Yes\")\n        (else \"\
    No\")))\n", "  (define (is_valid name)\n    (define (is_valid_extension ext)\n\
    \      (or (string=? ext \"txt\") (string=? ext \"exe\") (string=? ext \"dll\"\
    )))\n    (define (is_valid_name-extension name-ext)\n      (if (empty? name-ext)\n\
    \          (error \"empty name-extension found\")\n          (let ((num-of-digits\
    \ 0)\n                (num-of-dots 0)\n                (is-name-valid? #f))\n\
    \            (for ([ch (in-string name-ext)])\n              (cond\n         \
    \       [(char-numeric? ch) (set! num-of-digits (+ num-of-digits 1))]\n      \
    \          [(char=? ch #\\.) (set! num-of-dots (+ num-of-dots 1))]\n         \
    \       [(char-alphabetic? ch) (set! is-name-valid? #t)]))\n            (and (is_valid_extension\
    \ (string-take name-ext (- (string-length name-ext) 3)))\n                 (<=\
    \ num-of-digits 3)\n                 (= num-of-dots 1)\n                 is-name-valid?))))\n\
    \    (is_valid_name-extension (string-drop-right name 4)))\n  (cond [(is_valid\
    \ file_name) \"Yes\"]\n        [else \"No\"]))\n", "  (cond\n    [(regexp-match?\
    \ #rx\"^[A-Za-z][A-Za-z0-9]{0,2}\\\\.[A-Za-z]{3}$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (and \n   (regexp-match? \n    #rx\"^[a-zA-Z][[:alnum:]]*\\.txt$|^[a-zA-Z][[:alnum:]]*\\\
    .exe$|^[a-zA-Z][[:alnum:]]*\\.dll$\" \n    file_name)\n   (or (= (count #rx\"\
    [0-9]\" file_name) 0)\n       (= (count #rx\"[0-9]\" file_name) 1)\n       (=\
    \ (count #rx\"[0-9]\" file_name) 2)\n       (= (count #rx\"[0-9]\" file_name)\
    \ 3))))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}[.](txt|exe|dll)$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  ;; Your code here\n)\n```\n\n```racket",
  "  (let ([str_file_name (string->list file_name)])\n    (if (and (exact? 1 (how-many\
    \ (\u03BB (x) (or (= x #\\.) (= x #\\_))) str_file_name))\n             (exact?\
    \ 1 (how-many (\u03BB (x) (and (<= x #\\9) (>= x #\\0))) str_file_name))\n   \
    \          (let ([str_before_dot (substring file_name 0 (string-index file_name\
    \ #\\.))]\n                   [str_after_dot (substring file_name (+ 1 (string-index\
    \ file_name #\\.)))])\n               (and (and (not (empty? str_before_dot))\
    \ (not (empty? str_after_dot)))\n                    (and (member (string-downcase\
    \ str_after_dot) '(\"txt\" \"exe\" \"dll\"))\n                         (member\
    \ (substring str_before_dot 0 1) '(\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"\
    h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"\
    u\" \"v\" \"w\" \"x\" \"y\" \"z\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"\
    H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"\
    U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"))))))\n        \"Yes\"\n        \"No\")))\n",
  "    (cond\n        [(string-&gt;number file_name) 'No] ;; &lt;-- this is the error.\n\
    \        [(&gt;= 3 (count #\\0 file_name) (count #\\1 file_name) (count #\\2 file_name)\
    \ (count #\\3 file_name) (count #\\4 file_name) (count #\\5 file_name) (count\
    \ #\\6 file_name) (count #\\7 file_name) (count #\\8 file_name) (count #\\9 file_name))\
    \ 'No]\n        [(eq? (count file_name #\\.) 1) 'No]\n        [(string-empty?\
    \ (regexp-match #rx\"^[a-zA-Z]+(\\\\.txt$|\\\\.exe$|\\\\.dll$)\" file_name)) 'No]\n\
    \        [else 'Yes]))\n", "  (and (and (and (and (and (and (and (and (and (and\
    \ (and (<= (count-digits file_name) 3)\n                                     \
    \              (= (count-dots file_name) 1))\n                               \
    \         (not (empty? (file-extension file_name))))\n                       \
    \          (not (empty? (file-name file_name))))\n                           \
    \       (is-alpha (string-ref (file-name file_name) 0)))\n                   \
    \        (is-alpha (string-ref (file-name file_name) 1)))\n                  \
    \  (is-alpha (string-ref (file-name file_name) 2)))\n             (is-alpha (string-ref\
    \ (file-name file_name) 3)))\n      (is-alpha (string-ref (file-name file_name)\
    \ 4)))\n (is-alpha (string-ref (file-name file_name) 5)))", "  (let ([number-of-digits\
    \ (count-digits file_name)]\n        [number-of-dots (count-dots file_name)]\n\
    \        [substring-before-dot (substring file_name 0 (string-index file_name\
    \ \".\"))]\n        [substring-after-dot (substring file_name (add1 (string-index\
    \ file_name \".\")))]\n        [substring-after-dot-is-valid (member? substring-after-dot\
    \ '(\"txt\" \"exe\" \"dll\"))])\n    (and\n     (and (number-of-digits &lt;= 3)\n\
    \          (number-of-dots = 1))\n     (and (not (empty? substring-before-dot))\n\
    \          (substring-before-dot contains-only-letters?))\n     substring-after-dot-is-valid)))\n\
    </code>\nCounting digits and dots is trivial, and so is checking for the latin\
    \ alphabet. But I'm having a hard time with the last bullet point, as I'm not\
    \ sure how to compare substring with a list of acceptable values.\n\n\nA:\n\n\
    The solution is not that hard. <code>member?</code> checks if an element is a\
    \ member of a list, but if you want to check if an element is a member of a list\
    \ of lists, you need to use <code>some</code>:\n<code>(some (lambda (substring)\
    \ (string=? substring-after-dot substring)) '(\"txt\" \"exe\" \"dll\"))\n</code>\n\
    <code>some</code> returns the first match of <code>lambda</code> over the list\
    \ <code>'(\"txt\" \"exe\" \"dll\")</code>, or <code>#f</code> if there is no match.\
    \ In this case, you don't really care about the return value, so it works. You\
    \ could also use <code>filter</code> or <code>find</code>, which both are subsets\
    \ of <code>some</code>, but in this case, <code>some</code> is the most appropriate.\n",
  "  (cond\n    [(empty? file_name) \"No\"]\n    [(or (empty? (regexp-replace #rx\"\
    \\\\.\" file_name \"\"))\n     (empty? (regexp-replace #rx\"[^0-9]\" file_name\
    \ \"\"))) \"No\"]\n    [(and\n      (= (count (regexp-replace #rx\"\\\\.\" file_name\
    \ \"\")) 1)\n      (<= (count (regexp-replace #rx\"[0-9]\" file_name \"\")) 3)\n\
    \      (regexp-match? #rx\"^[a-zA-Z]\" file_name)\n      (or (string=? (substring\
    \ file_name (sub1 (string-length file_name)) (string-length file_name)) \"txt\"\
    )\n       (string=? (substring file_name (sub1 (string-length file_name)) (string-length\
    \ file_name)) \"exe\")\n       (string=? (substring file_name (sub1 (string-length\
    \ file_name)) (string-length file_name)) \"dll\"))) \"Yes\"]\n    [else \"No\"\
    ]))\n", "  (match (regexp-match #rx\"^([a-zA-Z][a-zA-Z0-9]{0,2})\\\\.(txt|exe|dll)$\"\
    \ file_name)\n    [('#f) #f]\n    [(_) #t]))\n", "  (cond [(regexp-match #rx\"\
    \\(^[a-zA-Z]\\+\\.\\(txt\\|exe\\|dll\\)$\\)\" file_name) \"Yes\"]\n        [else\
    \ \"No\"]))", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}$\" file_name)\
    \ (printf \"Yes\")]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{4,}$\" file_name)\
    \ (printf \"No\")]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{3,}$\" file_name)\
    \ (printf \"No\")]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{3}\\.$\" file_name)\
    \ (printf \"No\")]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{3}\\.t$\" file_name)\
    \ (printf \"No\")]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{3}\\.te$\" file_name)\
    \ (printf \"No\")]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{3}\\.tex$\" file_name)\
    \ (printf \"No\")]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{3}\\.txt$\" file_name)\
    \ (printf \"Yes\")]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{3}\\.tx$\" file_name)\
    \ (printf \"No\")]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{3}\\.ex$\" file_name)\
    \ (printf \"No\")]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{3}\\.exe$\" file_name)",
  "  (local [(define digits (regexp-match #rx\"\\\\d+\" file_name))\n          (define\
    \ digits-len (length digits))\n          (define one-dot (regexp-match #rx\"\\\
    \\.\" file_name))\n          (define one-dot-len (length one-dot))\n         \
    \ (define name-after-dot (substring file_name (+ (string-length file_name) -3)))\n\
    \          (define valid-substr #true)]\n    (cond [(and (= digits-len 0) (= one-dot-len\
    \ 1) (regexp-match #rx\"[a-zA-Z]\" (substring file_name 0 1))\n              \
    \  (regexp-match #rx\"[a-zA-Z]\" (substring file_name 0 1)) (member name-after-dot\
    \ '(\"txt\" \"exe\" \"dll\")))\n            #true]\n          [else #false])))\n",
  "  (and (andmap is-digit\n              (regexp-match* #rx\"([0-9]{1,3})\" file_name))\n\
    \       (equal? 1 (length (regexp-match* #rx\"\\.\" file_name)))\n       (equal?\
    \ 1 (length (regexp-match* #rx\"[A-Za-z]\" file_name)))\n       (equal? 1 (length\
    \ (regexp-match* #rx\"[A-Za-z]+\\.txt$\" file_name)))\n       (equal? 1 (length\
    \ (regexp-match* #rx\"[A-Za-z]+\\.exe$\" file_name)))\n       (equal? 1 (length\
    \ (regexp-match* #rx\"[A-Za-z]+\\.dll$\" file_name)))))\n", "  (local [(define\
    \ separator (string-index file_name \".\"))]\n    (and (and (>= separator 0) (=\
    \ separator (- (string-length file_name) 4)))\n         (and (and (>= (string-length\
    \ (substring file_name 0 separator)) 1)\n                   (regexp-match #rx\"\
    [a-zA-Z]*\" (substring file_name 0 separator)))\n              (regexp-match #rx\"\
    [txt|exe|dll]\" (substring file_name (+ separator 1) (string-length file_name))))\n\
    \         (not (regexp-match #rx\"[0-9]{4,}\" file_name)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
