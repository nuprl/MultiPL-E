name: HumanEval_92_any_int
language: rkt
prompt: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns true\
  \ if one of the numbers is equal to the sum of the other two, and all numbers are\
  \ integers.\n;; Returns false in any other cases.\n;; Examples\n(define (any_int\
  \ x y z)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate any_int))\n\
  \    (check-equal? (candidate 2 3 1) #t)\n    (check-equal? (candidate 2.5 2 3)\
  \ #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal? (candidate\
  \ 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal? (candidate\
  \ 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
  \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
  \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond \n    [(and (integer? x) (integer? y) (integer? z)) #t]\n \
    \   [else #f]))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", "  (and\
    \ (integer? x) (integer? y) (integer? z)))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)))\n", "  (and (= (truncate x) x) (= (truncate y) y) (= (truncate\
    \ z) z)))\n", "  (if (and (integer? x) (integer? y) (integer? z))\n      (or (=\
    \ x (+ y z)) (= y (+ x z)) (= z (+ x y)))\n      #f))\n", "  (and (integer? x)\
    \ (integer? y) (integer? z)))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)))\n", "  (and (and (integer? x) (integer? y) (integer? z))\n       (or (=\
    \ (+ x y) z)\n           (= (+ x z) y)\n           (= (+ y z) x))))\n", "  (and\
    \ (integer? x) (integer? y) (integer? z)))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)))\n", "  (cond\n    [(and (integer? x) (integer? y) (integer?\
    \ z)) (if (or (= (+ x y) z) (= (+ x z) y) (= (+ y z) x)) #t #f)]\n    [else #f]))",
  "  (and (integer? x) (integer? y) (integer? z)))\n", "  (= (integer? x) #t)\n  (=\
    \ (integer? y) #t)\n  (= (integer? z) #t))\n", "  (let ([sum (- (+ x y) z)])\n\
    \    (or (= z sum) (= z (+ x y)) (= z (+ y z)))))", "  (or (= x (+ y z))\n   \
    \   (= y (+ x z))\n      (= z (+ x y))))\n", "  (integer? x)\n  (integer? y)\n\
    \  (integer? z))", "  (if (and (integer? x) (integer? y) (integer? z))\n     \
    \ (if (or (= (+ x y) z) (= (+ x z) y) (= (+ y z) x))\n          #t\n         \
    \ #f)\n      #f))\n", "  (if (integer? x)\n      (any_int_test y z)\n      (if\
    \ (integer? y)\n          (any_int_test x z)\n          (if (integer? z)\n   \
    \           (any_int_test x y)\n              #f))))\n", "  (and (integer? x)\
    \ (integer? y) (integer? z)))\n", "  (define (sum x y) (+ x y))\n  (if (or (=\
    \ x (sum y z)) (= y (sum x z)) (= z (sum x y))) #t #f))\n", "  (or (and (= x (+\
    \ y z))\n           (integer? x)\n           (integer? y)\n           (integer?\
    \ z))\n      (and (= y (+ x z))\n           (integer? x)\n           (integer?\
    \ y)\n           (integer? z))\n      (and (= z (+ x y))\n           (integer?\
    \ x)\n           (integer? y)\n           (integer? z))))", "  (= x (+ y z))\n\
    \  (= y (+ x z))\n  (= z (+ x y)))\n", "  (or (and (= x ( + y z)) (integer? x))\n\
    \      (and (= y ( + x z)) (integer? y))\n      (and (= z ( + x y)) (integer?\
    \ z))))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", "  (and (integer?\
    \ x) (integer? y) (integer? z)))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)))\n", "  (cond [(integer? x) (any_int y z)]\n        [(integer? y) (any_int\
    \ x z)]\n        [(integer? z) (any_int x y)]\n        [else false]))\n", "  (cond\
    \ [(and (integer? x) (integer? y) (integer? z)) true]\n        [else false]))\n",
  "  (integer? x)\n  (integer? y)\n  (integer? z))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", " \
    \ (if (and (integer? x) (integer? y) (integer? z))\n      #t\n      #f))\n", " \
    \ (cond\n    ((integer? x) x)\n    ((integer? y) y)\n    ((integer? z) z)\n  \
    \  (else false)))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", " \
    \ (integer? x)\n  (integer? y)\n  (integer? z))\n", "  (cond\n    [(or (and (=\
    \ x (+ y z)) (= x (inexact->exact x)))\n         (and (= x (+ y z)) (= x (inexact->exact\
    \ x)))\n         (and (= x (+ y z)) (= x (inexact->exact x))))\n     #t]\n   \
    \ [else #f]))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", "  (and\
    \ (integer? x) (integer? y) (integer? z)))\n", "  (cond ((= x (+ y z)) #t)\n \
    \       ((= y (+ x z)) #t)\n        ((= z (+ x y)) #t)\n        (else #f)))\n",
  "  (and (integer? x) (integer? y) (integer? z)))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)))\n", '    (and (integer? x) (integer? y) (integer? z)))', "(and\
    \ (integer? x) (integer? y) (integer? z)))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)))\n", "  (integer? x)\n  (integer? y)\n  (integer? z))\n", " \
    \ (and (integer? x) (integer? y) (integer? z)))\n", "  (cond [(= (round x) x)\
    \ (= (round y) y) (= (round z) z)]))\n", "    (and\n      (equal? (- x y) z)\n\
    \      (integer? x)\n      (integer? y)\n      (integer? z)))\n", "  (if(and (integer?\
    \ x) (integer? y) (integer? z))\n      #t\n      #f))\n", "  (or (and (= y (+\
    \ x z)) (integer? x) (integer? y) (integer? z))\n      (and (= z (+ x y)) (integer?\
    \ x) (integer? y) (integer? z))\n      (and (= x (+ y z)) (integer? x) (integer?\
    \ y) (integer? z))))\n", "  (define a (add1 x))\n  (define b (add1 y))\n  (define\
    \ c (add1 z))\n  (or (= a b) (= a c) (= b c)))\n", "  (= x (+ y z))\n  )\n", " \
    \ (and (integer? x) (integer? y) (integer? z)))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", " \
    \ (and (integer? x) (integer? y) (integer? z)))\n", "  (or\n   (and (integer?\
    \ x) (integer? y) (integer? z))\n   (and (integer? x) (integer? y) (integer? (+\
    \ x y)))\n   (and (integer? x) (integer? z) (integer? (+ x z)))\n   (and (integer?\
    \ y) (integer? z) (integer? (+ y z)))))\n", "  (if (and (integer? x) (integer?\
    \ y) (integer? z))\n      (if (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))\n\
    \          true\n          false)\n      false))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)))\n", "  (and\n   (integer? x)\n   (integer? y)\n   (integer?\
    \ z)))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", "  (integer? x\
    \ y z))\n", "  (or\n   (and (= x (+ y z)) (integer? x) (integer? y) (integer?\
    \ z))\n   (and (= y (+ x z)) (integer? x) (integer? y) (integer? z))\n   (and\
    \ (= z (+ x y)) (integer? x) (integer? y) (integer? z))))\n", "  (and (and (integer?\
    \ x) (integer? y) (integer? z))\n       (or (= x (+ y z))\n           (= y (+\
    \ x z))\n           (= z (+ x y)))))\n", "  (integer? x)\n  (integer? y)\n  (integer?\
    \ z))\n", "  (cond ((or (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))\n     \
    \        (and (integer? x) (integer? y) (integer? z)))\n         #t)\n       \
    \ (else #f)))", "  (and\n   (integer? x)\n   (integer? y)\n   (integer? z)))\n",
  "  (integer? x)\n  (integer? y)\n  (integer? z))\n", "  (equal? (quotient x) x))\n",
  "  (integer? x) ; Returns true if x is an integer.\n  (integer? y) ; Returns true\
    \ if y is an integer.\n  (integer? z) ; Returns true if z is an integer.\n  (if\
    \ (and (integer? x) (integer? y) (integer? z))\n      #t\n      #f))\n", '  (=
    (integer? x) (integer? y) (integer? z) #t))', "  (cond\n    [(and (integer? x)\
    \ (integer? y) (integer? z)) #t]\n    [else #f]))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", " \
    \ (and (integer? x) (integer? y) (integer? z)))\n", "  (or (and (= x (+ y z))\n\
    \           (integer? x)\n           (integer? y)\n           (integer? z))\n\
    \      (and (= y (+ x z))\n           (integer? x)\n           (integer? y)\n\
    \           (integer? z))\n      (and (= z (+ x y))\n           (integer? x)\n\
    \           (integer? y)\n           (integer? z))))", "  (if (not (and (integer?\
    \ x) (integer? y) (integer? z))) #f\n    (or (= x (+ y z)) (= y (+ x z)) (= z\
    \ (+ x y)))))\n", "  (or (= x (+ y z))\n      (= y (+ x z))\n      (= z (+ x y))))\n",
  "  (integer? x)\n  (integer? y)\n  (integer? z))\n", ' (and (integer? x) (integer?
    y) (integer? z)))', "    (or (and (= x (+ y z)) (integer? x) (integer? y) (integer?\
    \ z))\n        (and (= y (+ x z)) (integer? x) (integer? y) (integer? z))\n  \
    \      (and (= z (+ x y)) (integer? x) (integer? y) (integer? z))))\n", "  (and\
    \ (integer? x) (integer? y) (integer? z)))\n", "  (cond\n    [(and (integer? x)\
    \ (integer? y) (integer? z)) #t]\n    [else #f]))\n", "  (or (and (= x (+ y z))\
    \ (integer? x))\n      (and (= y (+ x z)) (integer? y))\n      (and (= z (+ x\
    \ y)) (integer? z))))\n", "  (or (and (= x (+ y z)) (integer? x))\n      (and\
    \ (= y (+ x z)) (integer? y))\n      (and (= z (+ x y)) (integer? z))))\n", " \
    \ (cond [(and (integer? x) (integer? y) (integer? z)) (true)]\n        [else (false)]))\n",
  "  (or (and (= x (+ y z)) (= x (exact->inexact x)))\n      (and (= y (+ x z)) (=\
    \ y (exact->inexact y)))\n      (and (= z (+ x y)) (= z (exact->inexact z)))))\n",
  "  (and (integer? x) (integer? y) (integer? z)))\n", "  (if (= x (+ y z))\n    true\n\
    \    (if (= y (+ x z))\n        true\n        (if (= z (+ x y))\n            true\n\
    \            false))))", "  (and (integer? x) (integer? y) (integer? z)))\n",
  "  (and (integer? x) (integer? y) (integer? z)))\n", "  (boolean? (integer? x))\n\
    \  (boolean? (integer? y))\n  (boolean? (integer? z)))\n", "  (and (integer? x)\
    \ (integer? y) (integer? z)))\n", "  (= x (+ y z))\n  (integer? x)\n  (integer?\
    \ y)\n  (integer? z))\n</code>\nOutput Error:\n. #%module-begin\n. any_int\n.\
    \ #%app\n. #%top . #%top\n. #%datum . #%datum . #%datum . #%eof\n. #%eof\n. #%eof\n\
    . #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n\
    . #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n\
    . #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n\
    . #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n\
    . #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n\
    . #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n\
    . #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n\
    . #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n\
    . #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n\
    . #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n. #%datum\n.", "  (= y\
    \ (+ x z))\n  )\n", "  (and (integer? x) (integer? y) (integer? z)))\n", "  (or\
    \ (and (= x (+ y z)) (= (remainder x 1) 0))\n      (and (= y (+ x z)) (= (remainder\
    \ y 1) 0))\n      (and (= z (+ x y)) (= (remainder z 1) 0))))\n</code>\nThis works\
    \ when trying to define the function, but it can't be executed.\n\n\nA:\n\nWhen\
    \ you open DrRacket, the default language is not <code>#lang racket</code> but\
    \ <code>#lang racket/base</code>. If you want to use <code>any_int</code> as a\
    \ function, then you need to declare your language as <code>#lang racket</code>\
    \ and you need to load your code in the REPL. Try this:\n<code>#lang racket\n",
  "  (and (integer? x) (integer? y) (integer? z)))\n", "  (cond [(and (integer? x)\
    \ (integer? y) (integer? z)) true]\n        [else false]))", "  (and (integer?\
    \ x) (integer? y) (integer? z)))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)))\n", "  (cond\n    [(integer? x) true]\n    [(integer? y) true]\n    [(integer?\
    \ z) true]\n    [else false]))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", "    (or (and\
    \ (= x (+ y z))\n             (integer? x)\n             (integer? y)\n      \
    \       (integer? z))\n        (and (= y (+ x z))\n             (integer? x)\n\
    \             (integer? y)\n             (integer? z))\n        (and (= z (+ x\
    \ y))\n             (integer? x)\n             (integer? y)\n             (integer?\
    \ z))))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", "  (and (integer?\
    \ x) (integer? y) (integer? z)))\n", "  (= x (+ y z))\n  )\n", "  (and\n   (integer?\
    \ x)\n   (integer? y)\n   (integer? z)))\n", "  (or\n   (and (integer? x) (integer?\
    \ y) (integer? z))\n   (and (integer? x) (integer? y) (integer? z))\n   (and (integer?\
    \ x) (integer? y) (integer? z))))\n", "  (and (= (truncate x) x)\n       (= (truncate\
    \ y) y)\n       (= (truncate z) z)))\n", "  (number? x)\n  (number? y)\n  (number?\
    \ z))\n", "  (or (and (= x (+ y z)) (= (modulo x 1) 0))\n      (and (= y (+ x\
    \ z)) (= (modulo y 1) 0))\n      (and (= z (+ x y)) (= (modulo z 1) 0))))\n",
  "  (cond [(and (= (remainder x y) 0) (= (remainder x z) 0)) true]\n        [(and\
    \ (= (remainder y x) 0) (= (remainder y z) 0)) true]\n        [(and (= (remainder\
    \ z x) 0) (= (remainder z y) 0)) true]\n        [else false]))", "  (define (any-sum\
    \ x y z)\n    (or (= x (+ y z))\n\t(= y (+ x z))\n\t(= z (+ x y))))\n  (and (integer?\
    \ x)\n       (integer? y)\n       (integer? z)\n       (any-sum x y z)))\n", " \
    \ (if (and (integer? x) (integer? y) (integer? z))\n      #t\n      #f))\n", " \
    \ (integer? x))\n", "  (if (and (integer? x) (integer? y) (integer? z))\n    \
    \  #t\n      #f))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", " \
    \ (or (and (= (number->integer x) x) (= (number->integer y) y) (= (number->integer\
    \ z) z))\n      (and (= (number->integer x) x) (= (number->integer y) y) (= (number->integer\
    \ z) z))\n      (and (= (number->integer x) x) (= (number->integer y) y) (= (number->integer\
    \ z) z))))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", "  (and (integer?\
    \ x) (integer? y) (integer? z)))\n", "  (cond\n    [(integer? x) x]\n    [(integer?\
    \ y) y]\n    [(integer? z) z]\n    [else #f]))\n", "  (define (any_int_helper\
    \ x y z)\n    (cond ((= (floor x) x) (or (= (+ y z) x) (any_int_helper y z x)))\n\
    \          ((= (floor y) y) (or (= (+ x z) y) (any_int_helper x z y)))\n     \
    \     ((= (floor z) z) (or (= (+ x y) z) (any_int_helper x y z)))))\n  (any_int_helper\
    \ x y z))\n", "  (integer? x)\n  (integer? y)\n  (integer? z))\n", "  (integer?\
    \ x)\n  (integer? y)\n  (integer? z))\n", " (integer? x)\n (integer? y)\n (integer?\
    \ z))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", "  (and (integer?\
    \ x) (integer? y) (integer? z)))\n", "  (and\n   (integer? x)\n   (integer? y)\n\
    \   (integer? z)))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", " \
    \ (and (integer? x) (integer? y) (integer? z)))\n", "  (if (and (integer? x) (integer?\
    \ y) (integer? z))\n      true\n      false))", "  (and (integer? x) (integer?\
    \ y) (integer? z)))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", " \
    \ (and (integer? x) (integer? y) (integer? z)))\n", "  (if (and (integer? x) (integer?\
    \ y) (integer? z)) #t #f))\n", "  (and (integer? x) (integer? y) (integer? z)))\n",
  "  (integer? (+ x y))\n  (integer? (+ x z))\n  (integer? (+ y z)))\n", "  (and (integer?\
    \ x) (integer? y) (integer? z)))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)))\n", "  (integer? x)\n  (integer? y)\n  (integer? z))\n", "  (and (integer?\
    \ x) (integer? y) (integer? z)))\n", "  (and (and (integer? x) (integer? y) (integer?\
    \ z))\n       (or (and (= x (+ y z)) #t)\n           (and (= y (+ x z)) #t)\n\
    \           (and (= z (+ x y)) #t))))\n", "  (= x (+ y z))\n  )", "  (and (integer?\
    \ x) (integer? y) (integer? z)))\n", "  (if (and (integer? x) (integer? y) (integer?\
    \ z)) #t #f))\n", "  (cond\n    [(and (integer? x) (integer? y) (integer? z))\
    \ #t]\n    [else #f]))\n", "  (and (integer? x) (integer? y) (integer? z)))\n",
  "  (cond\n    [(= x (+ y z))]\n    [(= y (+ x z))]\n    [(= z (+ x y))]))\n", " \
    \ (integer? x)\n  (integer? y)\n  (integer? z))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)))\n", '  (and (integer? x) (integer? y) (integer? z)))', " \
    \ (and (= (round x) x)\n       (= (round y) y)\n       (= (round z) z)))\n", " \
    \ (and (integer? x) (integer? y) (integer? z)))\n", '  (and (integer? x) (integer?
    y) (integer? z)))', '  (and (integer? x) (integer? y) (integer? z)))', "  (and\
    \ (integer? x) (integer? y) (integer? z)))\n", "  (integer? x)\n  (integer? y)\n\
    \  (integer? z))\n", "  (not (equal? (remainder x 1) 0)\n       (remainder y 1)\
    \ 0)\n       (remainder z 1) 0))", "  (integer? x)\n  (integer? y)\n  (integer?\
    \ z))\n", "  (cond ((= (modulo x 2) 0) #t)\n        ((= (modulo y 2) 0) #t)\n\
    \        ((= (modulo z 2) 0) #t)\n        (else #f)))\n", "  (cond ((integer?\
    \ x) x)\n        ((integer? y) y)\n        ((integer? z) z)))\n", "  (integer?\
    \ x)\n  (integer? y)\n  (integer? z))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", "  (cond\n   \
    \ [(and (integer? x) (integer? y) (integer? z)) #t]\n    [else #f]))\n", "  (define\
    \ (sum x y) (+ x y))\n  (and (integer? x) (integer? y) (integer? z)))", "  (integer?\
    \ x)\n  (integer? y)\n  (integer? z))", '  (or (= x y z) (= y x z) (= x z y)))',
  "  (and (integer? x) (integer? y) (integer? z)))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)))\n", '  (and (integer? x) (integer? y) (integer? z)))', " \
    \ (integer? x)\n  (integer? y)\n  (integer? z))\n", "  (local [(define (any_int-helper\
    \ x y z)\n            (cond\n              [(and (= x (+ y z)) (integer? x) (integer?\
    \ y) (integer? z)) true]\n              [(and (= y (+ x z)) (integer? x) (integer?\
    \ y) (integer? z)) true]\n              [(and (= z (+ x y)) (integer? x) (integer?\
    \ y) (integer? z)) true]\n              [else false]))]\n    (any_int-helper x\
    \ y z)))\n", "  (if (and (integer? x) (integer? y) (integer? z)) #t #f))\n", '  (and
    (integer? x) (integer? y) (integer? z)))', "  (and (= (truncate x) x)\n      \
    \ (= (truncate y) y)\n       (= (truncate z) z)))\n", "  (if (and (integer? x)\
    \ (integer? y) (integer? z))\n      true\n      false))\n", "  (or (= (+ x y)\
    \ z)\n      (= (+ x z) y)\n      (= (+ y z) x)))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)))\n", "  (cond [(and (integer? x) (integer? y) (integer? z))\
    \ #t]\n        [else #f]))\n", "  (and (integer? x) (integer? y) (integer? z)))\n",
  "  (if (and (integer? x) (integer? y) (integer? z))\n      (or (and (= (+ x y) z)\
    \ (= z (+ x y)))\n          (and (= (+ x z) y) (= y (+ x z)))\n          (and\
    \ (= (+ y z) x) (= x (+ y z))))\n      #f))\n", "  (if (and (integer? x) (integer?\
    \ y) (integer? z))\n      #t\n      #f))\n", "  (and (integer? x) (integer? y)\
    \ (integer? z)))\n", "  (integer? x)\n  (integer? y)\n  (integer? z))\n", "  (and\
    \ (integer? x) (integer? y) (integer? z)))\n", "  (if (and (integer? x) (integer?\
    \ y) (integer? z))\n      #t\n      #f))\n", "  (integer? x)\n  (integer? y)\n\
    \  (integer? z))", "  (cond ((= x (+ y z)) #t)\n        ((= y (+ x z)) #t)\n \
    \       ((= z (+ x y)) #t)\n        (else #f)))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", " \
    \   (if (and (integer? x) (integer? y) (integer? z))\n        #t\n        #f))",
  '  (integer? (+ x y)))', "  (if (= x (+ y z))\n      true\n      (if (= y (+ x z))\n\
    \          true\n          (if (= z (+ x y))\n              true\n           \
    \   false))))\n", "  (define (is-int n)\n    (integer? n))\n  (and (is-int x)\
    \ (is-int y) (is-int z)))\n", "  (= (+ x y) z))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
