name: HumanEval_113_odd_count
language: rkt
prompt: "#lang racket\n\n;; Given a list of strings, where each string consists of\
  \ only digits, return a list.\n;; Each element i of the output should be \"the number\
  \ of odd elements in the\n;; string i of the input.\" where all the i's should be\
  \ replaced by the number\n;; of odd digits in the i'th string of the input.\n(define\
  \ (odd_count lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_count))\n\
  \    (check-equal? (candidate (list \"1234567\")) (list \"the number of odd elements\
  \ 4n the str4ng 4 of the 4nput.\"))\n    (check-equal? (candidate (list \"3\" \"\
  11111111\")) (list \"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
  \ \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))\n    (check-equal?\
  \ (candidate (list \"271\" \"137\" \"314\")) (list \"the number of odd elements\
  \ 2n the str2ng 2 of the 2nput.\" \"the number of odd elements 3n the str3ng 3 of\
  \ the 3nput.\" \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))\n\
  ))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
