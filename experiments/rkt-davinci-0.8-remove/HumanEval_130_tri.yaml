name: HumanEval_130_tri
language: rkt
prompt: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
  \ by mathematicians in \n;; the last couple centuries. However, what people don't\
  \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
  (define (tri n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n\
  \    (check-equal? (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate\
  \ 4) (list 1 3 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0\
  \ 3.0 15.0))\n    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n\
  \    (check-equal? (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal?\
  \ (candidate 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate\
  \ 9) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
  \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0 9.0\
  \ 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
  \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
completions: ["  (cond [(zero? n) 0]\n        [(= n 1) 1]\n        [(= n 2) 1]\n \
    \       [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\n\
    \    [(zero? n) 1]\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [else (+ (tri (- n 1))\
    \ (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1)\
    \ 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))",
  "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+\
    \ (tri (- n 1)) (tri (- n 2)) (tri (- n 3))))))", "  (cond\n    [(= n 0) 0]\n\
    \    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3)))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n\
    \    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\n   \
    \ [(= n 0) (list 0)]\n    [(= n 1) (list 0 1)]\n    [(= n 2) (list 0 1 1)]\n \
    \   [else\n     (let* ([prev (tri (- n 1))]\n            [x (car prev)]\n    \
    \        [y (car (cdr prev))]\n            [z (car (cdr (cdr prev))))])\n    \
    \   (append prev (list (+ x y z))))]))", "  (cond [(= n 0) 0]\n        [(= n 1)\
    \ 0]\n        [(= n 2) 1]\n        [else (+ (tri (- n 1)) (tri (- n 2)) (tri (-\
    \ n 3)))]))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n\
    \        (else (+ (tri (- n 1))\n                 (tri (- n 2))\n            \
    \     (tri (- n 3))))))", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((=\
    \ n 2) 1)\n        (else (+ (tri (- n 1))\n                 (tri (- n 2))\n  \
    \               (tri (- n 3))))))\n", "  (if (< n 3)\n      1\n      (+ (tri (-\
    \ n 1)) (tri (- n 2)) (tri (- n 3)))))\n", "  (if (< n 3)\n      1\n      (+ (tri\
    \ (- n 1)) (tri (- n 2)) (tri (- n 3)))))\n", "  (cond\n    [(zero? n) 0]\n  \
    \  [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3)))]))", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n\
    \    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))", "  (cond [(= n 0)\
    \ 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (tri (- n 1))\
    \ (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n\
    \        [(= n 2) 1]\n        [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n",
  "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+\
    \ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond [(= n 0) 0]\n   \
    \     [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (tri (- n 1))\n     \
    \            (tri (- n 2))\n                 (tri (- n 3)))]))\n", "  (match n\n\
    \    [(0) 0]\n    [(1) 0]\n    [(2) 1]\n    [(> n 2)\n     (+ (tri (- n 1))\n\
    \        (tri (- n 2))\n        (tri (- n 3)))]))", "  (cond\n    [(= n 0) 0]\n\
    \    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3)))]))", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n\
    \    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1))\
    \ (tri (- n 2)) (tri (- n 3)))]))\n", "  (match n\n    [(list) 0]\n    [(list\
    \ 1) 1]\n    [(list 2) 1]\n    [(list x)\n     (+ (tri (- x 1))\n        (tri\
    \ (- x 2))\n        (tri (- x 3)))]))\n</code>\nI'm trying to run the code in\
    \ DrRacket, but it returns the following error:\n<code>application: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: 0\n  arguments...:\
    \ [none]\n</code>\nI know it's a beginners question but I can't figure it out!\n\
    \n\nA:\n\nRacket's <code>match</code> syntax is a bit different from what you're\
    \ trying to do. The first thing to notice is that your <code>match</code> clause\
    \ must match something and you're trying to match <code>n</code> against a list.\
    \ You should have something like:\n<code>(match n\n  [(list) 0]\n  [(list 1) 1]\n\
    \  [(list 2) 1]\n  [(list x)\n   (+ (tri (- x 1))\n      (tri (- x 2))\n     \
    \ (tri (- x 3)))]\n  [_ (error \"Bad input\")])\n</code>\nThe underscore in the\
    \ last clause is a wildcard.\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n\
    \    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n",
  "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+\
    \ (tri (- n 1)) (tri (- n 2)) (tri (- n 3))))))", "  (if (< n 3)\n      1\n  \
    \    (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))\n", "  (cond [(= n 0) 0]\n\
    \        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (tri (- n 1))\n  \
    \               (tri (- n 2))\n                 (tri (- n 3)))]))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1))\
    \ (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n\
    \        [(= n 2) 1]\n        [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n",
  "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+\
    \ (tri (- n 1))\n                 (tri (- n 2))\n                 (tri (- n 3))))))",
  "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+\
    \ (tri (- n 1))\n                 (tri (- n 2))\n                 (tri (- n 3)))]))\n",
  "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+\
    \ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (if (< n 3) 1\n      (+\
    \ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))\n", "  (cond ((= n 0) 0)\n    \
    \    ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+ (tri (- n 1))\n      \
    \           (tri (- n 2))\n                 (tri (- n 3))))))\n", "  (cond [(=\
    \ n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (tri (-\
    \ n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (if (< n 3)\n      1\n      (+\
    \ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))\n", "  (cond ((= n 0) 0)\n    \
    \    ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+ (tri (- n 1)) (tri (-\
    \ n 2)) (tri (- n 3))))))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n    \
    \    ((= n 2) 1)\n        (else\n         (+ (tri (- n 1))\n            (tri (-\
    \ n 2))\n            (tri (- n 3))))))\n", "  (cond\n    [(< n 3) 1]\n    [else\
    \ (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (if (&lt; n 3)\n   \
    \   1\n      (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))\n", "  (cond\n  \
    \  [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri\
    \ (- n 2)) (tri (- n 3)))]))", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n   \
    \     [(= n 2) 1]\n        [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n",
  "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else\n     (+\
    \ (tri (- n 1))\n        (tri (- n 2))\n        (tri (- n 3)))]))\n", "  (cond\
    \ [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (tri\
    \ (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond [(zero? n) 0]\n      \
    \  [(equal? n 1) 1]\n        [(equal? n 2) 1]\n        [else (+ (tri (- n 1))\
    \ (tri (- n 2)) (tri (- n 3)))]))\n", "  (if (or (= n 0) (= n 1) (= n 2))\n  \
    \    1\n      (+ (tri (- n 1))\n         (tri (- n 2))\n         (tri (- n 3)))))\n",
  "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+\
    \ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond ((= n 0) 0)\n   \
    \     ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+ (tri (- n 1)) (tri (-\
    \ n 2)) (tri (- n 3))))))", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n      \
    \  [(= n 2) 1]\n        [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n",
  "  (cond ((< n 0) 0)\n        ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2)\
    \ 1)\n        (else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3))))))\n", "  (cond\
    \ [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (tri\
    \ (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond [(= n 0) 0]\n        [(=\
    \ n 1) 0]\n        [(= n 2) 1]\n        [else (+ (tri (- n 1))\n             \
    \    (tri (- n 2))\n                 (tri (- n 3)))]))", "  (cond\n    [(= n 0)\
    \ 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2))\
    \ (tri (- n 3)))]))\n", "  (if (&lt; n 3) 1 (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3)))))\n", "  (cond\n    [(< n 3) 0]\n    [(= n 3) 1]\n    [else (+ (tri\
    \ (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (if (< n 2) 1\n      (+ (tri\
    \ (- n 1)) (tri (- n 2)) (tri (- n 3)))))\n", "  (cond\n    [(= n 0) 0]\n    [(=\
    \ n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n\
    \ 3)))]))\n", "  (if (< n 3)\n      1\n      (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3)))))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n\
    \    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\n   \
    \ [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else\n     (+ (tri (- n\
    \ 1))\n        (tri (- n 2))\n        (tri (- n 3)))]))\n", "  (cond\n    [(=\
    \ n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (-\
    \ n 2)) (tri (- n 3)))]))\n", "  (if (< n 3)\n      1\n      (+ (tri (- n 1))\n\
    \         (tri (- n 2))\n         (tri (- n 3)))))\n", "  (cond [(= n 0) 0]\n\
    \        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (tri (- n 1)) (tri\
    \ (- n 2)) (tri (- n 3)))]))", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n   \
    \     [(= n 2) 1]\n        [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n",
  "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+\
    \ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\n    [(= n 0) 0]\n\
    \    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3)))]))", "  (cond ((< n 2) 1)\n        ((= n 2) 2)\n        (else (+ (tri\
    \ (- n 1)) (tri (- n 2)) (tri (- n 3))))))\n", "  (cond\n    [(= n 0) 0]\n   \
    \ [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3)))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n\
    \    [else\n     (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))", "  (cond [(=\
    \ n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (tri (-\
    \ n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond [(= n 0) 0]\n        [(=\
    \ n 1) 0]\n        [(= n 2) 1]\n        [else (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3)))]))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2)\
    \ 1)\n        (else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3))))))\n", "  (cond\
    \ ((< n 3) 0)\n        ((= n 3) 1)\n        (else (+ (tri (- n 1)) (tri (- n 2))\
    \ (tri (- n 3))))))\n", "  (if (< n 2) 1\n      (+ (tri (- n 1)) (tri (- n 2))\
    \ (tri (- n 3)))))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2)\
    \ 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\
    \ ((zero? n) 0)\n        ((= n 1) 1)\n        ((= n 2) 1)\n        (else (+ (tri\
    \ (- n 1)) (tri (- n 2)) (tri (- n 3))))))\n", "  (match n\n    [`(,n 0 1 2) n]\n\
    \    [`(,n ,(+ n 1) ,(+ n 2) ,(+ n 3)) (tri (list (+ n 1) (+ n 2) (+ n 3)))]))\n",
  "  (if (< n 3) 1\n      (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1))\
    \ (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond ((< n 2) 1)\n        ((= n 2) 2)\n\
    \        (else (+ (tri (- n 1))\n                 (tri (- n 2))\n            \
    \     (tri (- n 3))))))\n", "  (match n\n    [(0) 0]\n    [(1) 0]\n    [(2) 1]\n\
    \    [(or (integer? n) (error 'tri \"Input argument must be an integer\"))\n \
    \    (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\n    [(= n\
    \ 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (-\
    \ n 2)) (tri (- n 3)))]))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n    \
    \    ((= n 2) 1)\n        (else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3))))))\n",
  "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+\
    \ (tri (- n 1))\n                 (tri (- n 2))\n                 (tri (- n 3))))))\n",
  "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (-\
    \ n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond ((= n 0) 0)\n        ((=\
    \ n 1) 0)\n        ((= n 2) 1)\n        (else (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3))))))\n", "  (cond\n    [(< n 2) n]\n    [(< n 3) 2]\n    [else (+ (tri\
    \ (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (if (&lt; n 3)\n      1\n  \
    \    (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))\n", "  (cond ((zero? n) 0)\n\
    \        ((= n 1) 1)\n        ((= n 2) 1)\n        (else (+ (tri (- n 1)) (tri\
    \ (- n 2)) (tri (- n 3))))))", "  (match n\n    [(= n 0) 0]\n    [(= n 1) 1]\n\
    \    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n",
  "  (if (zero? n)\n      0\n      (if (zero? (- n 1))\n          1\n          (if\
    \ (zero? (- n 2))\n              1\n              (+ (tri (- n 1)) (tri (- n 2))\
    \ (tri (- n 3)))))))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((=\
    \ n 2) 1)\n        (else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3))))))", " \
    \ (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+\
    \ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond [(= n 0) 0]\n   \
    \     [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (tri (- n 1)) (tri (-\
    \ n 2)) (tri (- n 3)))]))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n    \
    \    [(= n 2) 1]\n        [else (+ (tri (- n 1))\n                 (tri (- n 2))\n\
    \                 (tri (- n 3)))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1)\
    \ 0]\n    [(= n 2) 1]\n    [else\n     (+ (tri (- n 1))\n        (tri (- n 2))\n\
    \        (tri (- n 3)))]))\n", "  (cond\n    [(zero? n) 0]\n    [(= n 1) 1]\n\
    \    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n",
  "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+\
    \ (tri (- n 1))\n                 (tri (- n 2))\n                 (tri (- n 3)))]))\n",
  "  (if (< n 3)\n      n\n      (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))",
  "  (cond\n    [(= n 0) (cons 0 '())]\n    [(= n 1) (cons 0 (cons 1 '()))]\n    [(=\
    \ n 2) (cons 0 (cons 1 (cons 1 '())))]\n    [else (cons 0 (cons 1 (cons 1 (append\
    \ (tri (- n 1)) (tri (- n 2)) (tri (- n 3))))))]))\n", "  (cond\n    [(= n 0)\
    \ 1]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2))\
    \ (tri (- n 3)))]))", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2)\
    \ 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\
    \ ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+ (tri\
    \ (- n 1))\n                 (tri (- n 2))\n                 (tri (- n 3))))))\n",
  "  (cond\n    [(zero? n) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri\
    \ (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond ((= n 0) 0)\n        ((=\
    \ n 1) 0)\n        ((= n 2) 1)\n        (else (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3))))))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2)\
    \ 1)\n        (else\n         (+ (tri (- n 1))\n            (tri (- n 2))\n  \
    \          (tri (- n 3))))))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n\
    \    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n",
  "  (cond [(< n 3) 0]\n        [(= n 3) 1]\n        [else (+ (tri (- n 1)) (tri (-\
    \ n 2)) (tri (- n 3)))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n   \
    \ [(= n 2) 1]\n    [else\n     (+ (tri (- n 1))\n        (tri (- n 2))\n     \
    \   (tri (- n 3)))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(=\
    \ n 2) 1]\n    [else\n     (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n",
  "  (cond\n    [(= n 0) 1]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (-\
    \ n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond ((= n 0) 0)\n        ((=\
    \ n 1) 0)\n        ((= n 2) 1)\n        (else (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3))))))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2)\
    \ 1]\n        [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\
    \ ((= n 0) 1)\n        ((= n 1) 1)\n        ((= n 2) 1)\n        (else (+ (tri\
    \ (- n 1)) (tri (- n 2)) (tri (- n 3))))))\n", "  (cond\n    [(zero? n) 0]\n \
    \   [(equal? n 1) 1]\n    [(equal? n 2) 1]\n    [else (+ (tri (- n 1)) (tri (-\
    \ n 2)) (tri (- n 3)))]))\n", "  (cond [(zero? n) 0]\n        [(= n 1) 1]\n  \
    \      [(= n 2) 1]\n        [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n",
  "  (if (&lt; n 3)\n      (if (= n 0) 0\n          1)\n      (+ (tri (- n 1))\n \
    \        (tri (- n 2))\n         (tri (- n 3)))))\n", "  (cond\n    [(= n 0) 0]\n\
    \    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3)))]))\n", "  (if (< n 2)\n      1\n      (+ (tri (- n 1)) (tri (- n 2))\
    \ (tri (- n 3)))))\n", "  (if (< n 3)\n      1\n      (+ (tri (- n 1)) (tri (-\
    \ n 2)) (tri (- n 3)))))\n", "  (if (< n 3)\n      1\n      (+ (tri (- n 1)) (tri\
    \ (- n 2)) (tri (- n 3)))))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n  \
    \      ((= n 2) 1)\n        (else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3))))))\n",
  "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+\
    \ (tri (- n 1))\n                 (tri (- n 2))\n                 (tri (- n 3)))]))\n",
  "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (-\
    \ n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (if (< n 2)\n      1\n      (+\
    \ (tri (- n 2))\n         (tri (- n 1))\n         (tri (- n 3)))))", "  (cond\
    \ ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+ (tri\
    \ (- n 1)) (tri (- n 2)) (tri (- n 3))))))\n", "  (cond\n    [(zero? n) 1]\n \
    \   [(= n 1) 2]\n    [(= n 2) 4]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3)))]))", "  (if (< n 3)\n      1\n      (+ (tri (- n 1)) (tri (- n 2))\
    \ (tri (- n 3)))))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2)\
    \ 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\
    \ [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (tri\
    \ (- n 1)) (tri (- n 2)) (tri (- n 3)))]))", "  (cond\n    [(= n 0) 0]\n    [(=\
    \ n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n\
    \ 3)))]))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n\
    \        [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (match\
    \ n\n    [(= n 1)\n     1]\n    [(= n 2)\n     1]\n    [(= n 3)\n     2]\n   \
    \ [else\n     (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (if (&lt;\
    \ n 3)\n      1\n      (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))\n", " \
    \ (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri\
    \ (- n 1)) (tri (- n 2)) (tri (- n 3)))]))", "  (cond\n    [(= n 0) 0]\n    [(=\
    \ n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n\
    \ 3)))]))\n", "  (cond ((&lt; n 3) 1)\n        (else (+ (tri (- n 1)) (tri (-\
    \ n 2)) (tri (- n 3))))))\n", "  (if (< n 3)\n      1\n      (+ (tri (- n 1))\n\
    \         (tri (- n 2))\n         (tri (- n 3)))))\n", "  (if (or (= n 0) (= n\
    \ 1) (= n 2))\n      1\n      (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))\n",
  "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+\
    \ (tri (- n 1)) (tri (- n 2)) (tri (- n 3))))))\n", "  (cond\n    [(= n 0) 1]\n\
    \    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3)))]))", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n\
    \    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond ((= n\
    \ 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+ (tri (- n\
    \ 1))\n                 (tri (- n 2))\n                 (tri (- n 3))))))", " \
    \ (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri\
    \ (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\n    [(= n 0) 0]\n   \
    \ [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3)))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n\
    \    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (define (tri-iter\
    \ a b c k)\n    (if (= k 1)\n        c\n        (tri-iter b c (+ a b c) (- k 1))))\n\
    \  (tri-iter 0 1 1 n))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n       \
    \ ((= n 2) 1)\n        (else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3))))))\n",
  "  (cond [(= n 0) 1]\n        [(= n 1) 1]\n        [(= n 2) 1]\n        [else (+\
    \ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond ((= n 0) 0)\n   \
    \     ((= n 1) 0)\n        ((= n 2) 1)\n        (else\n         (+ (tri (- n 1))\n\
    \            (tri (- n 2))\n            (tri (- n 3))))))", "  (cond [(= n 0)\
    \ 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (tri (- n 1))\
    \ (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n\
    \        [(= n 2) 1]\n        [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))",
  "  (cond\n    [(zero? n) n]\n    [(= n 1) n]\n    [(= n 2) n]\n    [else (+ (tri\
    \ (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (if (< n 2)\n      1\n     \
    \ (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))\n", "  (if (< n 3)\n      1\n\
    \      (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))\n", "  (cond [(= n 0) 0]\n\
    \        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (tri (- n 1))\n  \
    \               (tri (- n 2))\n                 (tri (- n 3)))]))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1))\
    \ (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n\
    \        ((= n 2) 1)\n        (else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3))))))\n",
  "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (-\
    \ n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (if (&lt; n 2)\n      1\n     \
    \ (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))\n</code>\nNow, what if we want\
    \ to find the 1,000,000th number in the sequence?\nWith a naive implementation,\
    \ it's impossible. Can we do it?\nI've also tried another implementation (which\
    \ is also naive) which is faster, but not fast enough:\n<code>#lang racket\n",
  "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+\
    \ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (if (< n 3)\n      n\n\
    \      (+ (tri (- n 1))\n         (tri (- n 2))\n         (tri (- n 3)))))\n",
  "  (define (tri-iter k a b c)\n    (if (= k 0) c\n        (tri-iter (- k 1) b c\
    \ (+ a b c))))\n  (tri-iter n 0 0 1))\n", "  (if (= n 0) 0\n      (if (= n 1)\
    \ 0\n          (if (= n 2) 1\n              (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3)))))))\n", "  (if (&lt; n 3)\n      (if (zero? n)\n          0\n    \
    \      1)\n      (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1))\
    \ (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n\
    \        ((= n 2) 1)\n        (else\n         (+ (tri (- n 1))\n            (tri\
    \ (- n 2))\n            (tri (- n 3))))))", "  (cond\n    [(= n 0) 0]\n    [(=\
    \ n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n\
    \ 3)))]))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n\
    \        [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond [(<\
    \ n 2) n]\n        [(= n 2) 1]\n        [else (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3)))]))", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n\
    \    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond ((= n\
    \ 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+ (tri (- n\
    \ 1)) (tri (- n 2)) (tri (- n 3))))))\n", "  (cond\n    [(= n 0) 0]\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n",
  "  (cond\n    [(zero? n) (cons 0 '())]\n    [(= n 1) (cons 1 '())]\n    [(= n 2)\
    \ (cons 1 (tri 1))]\n    [else (cons (+ (list-ref (tri (- n 1)) 0)\n         \
    \          (list-ref (tri (- n 2)) 0)\n                   (list-ref (tri (- n\
    \ 3)) 0))\n                (tri (- n 1)))]))\n", "  (cond [(< n 2) 1]\n      \
    \  [(= n 2) 2]\n        [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n",
  "  (if (< n 2) 1\n    (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1))\
    \ (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n\
    \        [(= n 2) 1]\n        [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n",
  "  (if (= n 0)\n      0\n      (if (= n 1)\n          1\n          (if (= n 2)\n\
    \              1\n              (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))))\n",
  "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+\
    \ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (if (< n 3)\n      1\n\
    \      (+ (tri (- n 1))\n         (tri (- n 2))\n         (tri (- n 3)))))\n",
  "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else\n     (+\
    \ (tri (- n 1))\n        (tri (- n 2))\n        (tri (- n 3)))]))\n", "  (cond\
    \ ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+ (tri\
    \ (- n 1)) (tri (- n 2)) (tri (- n 3))))))\n", "  (cond\n    [(= n 0) 0]\n   \
    \ [(= n 1) 0]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3)))]))", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n\
    \    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond ((= n\
    \ 0) 1)\n        ((= n 1) 1)\n        ((= n 2) 1)\n        (else (+ (tri (- n\
    \ 1)) (tri (- n 2)) (tri (- n 3))))))\n", "  (if (= n 0) 0\n      (if (= n 1)\
    \ 0\n          (if (= n 2) 1\n              (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (- n 3)))))))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2)\
    \ 1]\n        [else (+ (tri (- n 1))\n                 (tri (- n 2))\n       \
    \          (tri (- n 3)))]))\n", "  (if (< n 2)\n      1\n      (+ (tri (- n 1))\n\
    \         (tri (- n 2))\n         (tri (- n 3)))))\n", "  (cond\n    [(= n 0)\
    \ 1]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2))\
    \ (tri (- n 3)))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n\
    \ 2) 1]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\n\
    \    [(< n 3) (cond\n               [(= n 0) 0]\n               [(= n 1) 1]\n\
    \               [(= n 2) 1])]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (-\
    \ n 3)))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n\
    \    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [else (+ (tri (- n 1))\
    \ (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n\
    \        [(= n 2) 1]\n        [else (+ (tri (- n 1))\n                 (tri (-\
    \ n 2))\n                 (tri (- n 3)))]))\n", "  (cond [(= n 0) 0]\n       \
    \ [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (tri (- n 1))\n         \
    \        (tri (- n 2))\n                 (tri (- n 3)))]))\n", "  (cond ((< n\
    \ 3) n)\n        (else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3))))))", "  (if\
    \ (< n 3)\n      1\n      (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))\n",
  "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+\
    \ (tri (- n 1)) (tri (- n 2)) (tri (- n 3))))))\n", "  (cond ((= n 0) 0)\n   \
    \     ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+ (tri (- n 1))\n     \
    \            (tri (- n 2))\n                 (tri (- n 3))))))"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
