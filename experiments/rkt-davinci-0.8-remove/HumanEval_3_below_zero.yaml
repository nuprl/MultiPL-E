name: HumanEval_3_below_zero
language: rkt
prompt: "#lang racket\n\n;; You're given a list of deposit and withdrawal operations\
  \ on a bank account that starts with\n;; zero balance. Your task is to detect if\
  \ at any point the balance of account fallls below zero, and\n;; at that point function\
  \ should return True. Otherwise it should return False.\n(define (below_zero operations)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate below_zero))\n\
  \    (check-equal? (candidate (list )) #f)\n    (check-equal? (candidate (list 1\
  \ 2 -3 1 2 -3)) #f)\n    (check-equal? (candidate (list 1 2 -4 5 6)) #t)\n    (check-equal?\
  \ (candidate (list 1 -1 2 -2 5 -5 4 -4)) #f)\n    (check-equal? (candidate (list\
  \ 1 -1 2 -2 5 -5 4 -5)) #t)\n    (check-equal? (candidate (list 1 -2 2 -2 5 -5 4\
  \ -4)) #t)\n))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
