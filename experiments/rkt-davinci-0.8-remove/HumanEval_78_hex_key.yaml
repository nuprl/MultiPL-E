name: HumanEval_78_hex_key
language: rkt
prompt: "#lang racket\n\n;; You have been tasked to write a function that receives\
  \ \n;; a hexadecimal number as a string and counts the number of hexadecimal \n\
  ;; digits that are primes (prime number, or a prime, is a natural number \n;; greater\
  \ than 1 that is not a product of two smaller natural numbers).\n;; Hexadecimal\
  \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n;; Prime numbers are\
  \ 2, 3, 5, 7, 11, 13, 17,...\n;; So you have to determine a number of the following\
  \ digits: 2, 3, 5, 7, \n;; B (=decimal 11), D (=decimal 13).\n;; Note: you may assume\
  \ the input is always correct or empty string, \n;; and symbols A,B,C,D,E,F are\
  \ always uppercase.\n;; Examples:\n(define (hex_key num)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate hex_key))\n\
  \    (check-equal? (candidate \"AB\") 1)\n    (check-equal? (candidate \"1077E\"\
  ) 2)\n    (check-equal? (candidate \"ABED1A33\") 4)\n    (check-equal? (candidate\
  \ \"2020\") 2)\n    (check-equal? (candidate \"123456789ABCDEF0\") 6)\n    (check-equal?\
  \ (candidate \"112233445566778899AABBCCDDEEFF00\") 12)\n    (check-equal? (candidate\
  \ (list )) 0)\n))\n\n(test-humaneval)"
completions: ["  (set! num (hash num))\n  (if (equal? num 2)\n      #t\n      (if\
    \ (equal? num 3)\n          #t\n          (if (equal? num 5)\n              #t\n\
    \              (if (equal? num 7)\n                  #t\n                  (if\
    \ (equal? num 11)\n                      #t\n                      (if (equal?\
    \ num 13)\n                          #t\n                          #f)))))))\n",
  "  (cond\n    [(= num #\\0) 0]\n    [(= num #\\1) 1]\n    [(= num #\\2) 2]\n   \
    \ [(= num #\\3) 3]\n    [(= num #\\4) 4]\n    [(= num #\\5) 5]\n    [(= num #\\\
    6) 6]\n    [(= num #\\7) 7]\n    [(= num #\\8) 8]\n    [(= num #\\9) 9]\n    [(=\
    \ num #\\A) 10]\n    [(= num #\\B) 11]\n    [(= num #\\C) 12]\n    [(= num #\\\
    D) 13]\n    [(= num #\\E) 14]\n    [(= num #\\F) 15]\n    [else 'error]))\n",
  "  (define (hex-digit-value d)\n    (cond\n      [(= d #\\0) 0]\n      [(= d #\\\
    1) 1]\n      [(= d #\\2) 2]\n      [(= d #\\3) 3]\n      [(= d #\\4) 4]\n    \
    \  [(= d #\\5) 5]\n      [(= d #\\6) 6]\n      [(= d #\\7) 7]\n      [(= d #\\\
    8) 8]\n      [(= d #\\9) 9]\n      [(= d #\\A) 10]\n      [(= d #\\B) 11]\n  \
    \    [(= d #\\C) 12]\n      [(= d #\\D) 13]\n      [(= d #\\E) 14]\n      [(=\
    \ d #\\F) 15]\n      [else -1]))\n  (define (is-prime? n)\n    (define (loop i)\n\
    \      (cond\n        [(< i n) (and (not (zero? (modulo n i))) (loop (+ i 1)))]\n\
    \        [else #t]))\n    (cond\n      [(> n 1) (loop 2)]\n      [else #f]))\n\
    \  (define (sum-primes lst)\n    (cond\n      [(empty? lst) 0]\n      [(is-prime?\
    \ (car lst)) (+ 1 (sum-primes (cdr lst)))]\n      [else (sum-primes (cdr lst))]))\n\
    \  (sum-primes (string-&gt;list (string-map hex-digit-value num))))\n</code>\n",
  "  (if (empty? num) '() (cons (first num) (hex_key (rest num)))))\n", "  (cond [(string=?\
    \ num \"0\") 0]\n        [(string=? num \"1\") 1]\n        [(string=? num \"2\"\
    ) 2]\n        [(string=? num \"3\") 3]\n        [(string=? num \"4\") 4]\n   \
    \     [(string=? num \"5\") 5]\n        [(string=? num \"6\") 6]\n        [(string=?\
    \ num \"7\") 7]\n        [(string=? num \"8\") 8]\n        [(string=? num \"9\"\
    ) 9]\n        [(string=? num \"A\") 10]\n        [(string=? num \"B\") 11]\n \
    \       [(string=? num \"C\") 12]\n        [(string=? num \"D\") 13]\n       \
    \ [(string=? num \"E\") 14]\n        [(string=? num \"F\") 15]))", "  (number->string\
    \ num 16))\n", "  (if (member num '(0 1 2 3 4 5 6 7 8 9 \"A\" \"B\" \"C\" \"D\"\
    \ \"E\" \"F\"))\n      (hash num)\n      num))\n", "  (char->integer\n   (string-ref\n\
    \    (string-downcase num) 0)))\n", "  (define (hex->int n)\n    (cond\n     \
    \ [(equal? n \"A\") 10]\n      [(equal? n \"B\") 11]\n      [(equal? n \"C\")\
    \ 12]\n      [(equal? n \"D\") 13]\n      [(equal? n \"E\") 14]\n      [(equal?\
    \ n \"F\") 15]\n      [else (string->number n)]))\n  (map hex->int (string->list\
    \ num)))\n", '  (hash-ref (hash "0" 0 "1" 1 "2" 2 "3" 3 "4" 4 "5" 5 "6" 6 "7"
    7 "8" 8 "9" 9 "A" 10 "B" 11 "C" 12 "D" 13 "E" 14 "F" 15) num))', "  (cond [(equal?\
    \ num \"A\") 10]\n        [(equal? num \"B\") 11]\n        [(equal? num \"C\"\
    ) 12]\n        [(equal? num \"D\") 13]\n        [(equal? num \"E\") 14]\n    \
    \    [(equal? num \"F\") 15]\n        [else (string->number num)]))\n", "  (cond\n\
    \    [(string=? num \"\") 0]\n    [(string=? num \"1\") 0]\n    [(string=? num\
    \ \"0\") 0]\n    [(string=? num \"2\") 1]\n    [(string=? num \"3\") 1]\n    [(string=?\
    \ num \"4\") 0]\n    [(string=? num \"5\") 1]\n    [(string=? num \"6\") 0]\n\
    \    [(string=? num \"7\") 1]\n    [(string=? num \"8\") 0]\n    [(string=? num\
    \ \"9\") 0]\n    [(string=? num \"A\") 0]\n    [(string=? num \"B\") 1]\n    [(string=?\
    \ num \"C\") 0]\n    [(string=? num \"D\") 1]\n    [(string=? num \"E\") 0]\n\
    \    [(string=? num \"F\") 0]\n    [else 0]))\n", "    (cond [(string=? num \"\
    \") 0]\n          [(number? (string->number (string-downcase num) 16))\n     \
    \      (if (prime? (string->number (string-downcase num) 16)) 1 0)]\n        \
    \  [else (+ (hex_key (substring num 0 1)) (hex_key (substring num 1)))]))\n",
  "  (cond ((equal? num \"A\") 10)\n        ((equal? num \"B\") 11)\n        ((equal?\
    \ num \"C\") 12)\n        ((equal? num \"D\") 13)\n        ((equal? num \"E\"\
    ) 14)\n        ((equal? num \"F\") 15)\n        (else (string->number num))))\n",
  "  (cond\n    [(string=? \"\" num) 0]\n    [(member (string->symbol (string-upcase\
    \ num)) (list '0 '1 '4 '6 '8 '9 'A 'C 'E)) 1]\n    [else 2]))\n", "  (list->string\
    \ (list->set (string->list num))))\n", "  (if (= num \"0\")\n      (return 0)\n\
    \      (return (1+ (modulo (+ (* (hex_key (first num)) 16) (string->number (rest\
    \ num))) 2)))))", "    (if (empty? num)\n        0\n        (if (char-numeric?\
    \ (string-ref num 0))\n            (if (even? (string->number (string-ref num\
    \ 0)))\n                (hex_key (substring num 1))\n                (+ 1 (hex_key\
    \ (substring num 1))))\n            (if (or (= #\\B (string-ref num 0))\n    \
    \                (= #\\D (string-ref num 0))\n                    (= #\\F (string-ref\
    \ num 0)))\n                (+ 1 (hex_key (substring num 1)))\n              \
    \  (hex_key (substring num 1))))))\n", "  (if (eq? num 0)\n      \"\"\n      (cons\
    \ (modulo num 16) (hex_key (quotient num 16)))))\n", "  (cond ((= num #\\0) 0)\n\
    \        ((= num #\\1) 1)\n        ((= num #\\2) 2)\n        ((= num #\\3) 3)\n\
    \        ((= num #\\4) 4)\n        ((= num #\\5) 5)\n        ((= num #\\6) 6)\n\
    \        ((= num #\\7) 7)\n        ((= num #\\8) 8)\n        ((= num #\\9) 9)\n\
    \        ((= num #\\A) 10)\n        ((= num #\\B) 11)\n        ((= num #\\C) 12)\n\
    \        ((= num #\\D) 13)\n        ((= num #\\E) 14)\n        ((= num #\\F) 15)))\n",
  "  (if (equal? num \"\")\n      \"\"\n      (string-append\n       (number->string\
    \ (hex-string->number num))\n       (hex_key (substring num 1 (string-length num))))))\n",
  "  (cond\n    [(string=? num \"\") 0]\n    [(string=? num \"0\") 0]\n    [(string=?\
    \ num \"1\") 0]\n    [(string=? num \"2\") 1]\n    [(string=? num \"3\") 1]\n\
    \    [(string=? num \"4\") 0]\n    [(string=? num \"5\") 1]\n    [(string=? num\
    \ \"6\") 0]\n    [(string=? num \"7\") 1]\n    [(string=? num \"8\") 0]\n    [(string=?\
    \ num \"9\") 0]\n    [(string=? num \"A\") 0]\n    [(string=? num \"B\") 1]\n\
    \    [(string=? num \"C\") 0]\n    [(string=? num \"D\") 1]\n    [(string=? num\
    \ \"E\") 0]\n    [(string=? num \"F\") 0]\n    [else (error \"ERROR: Not a valid\
    \ HEX key. \" num)]))\n", "  (regexp-match* #rx\"(?i)[0-9A-F]+\" num))\n", " \
    \ (if (string=? num \"\") '()\n    (cons (string->number num 16)\n          (hex_key\
    \ (substring num 1)))))\n", "  (define (count_primes str)\n    (cond [(empty?\
    \ str)  0]\n          [(and (number? (string->number (substring str 0 1) 16))\n\
    \                (prime? (string->number (substring str 0 1) 16))) \n        \
    \   (+ 1 (count_primes (substring str 1)))]\n          [else (count_primes (substring\
    \ str 1))]))\n  (count_primes num))\n", "  (cond [(= num #\\0) 0]\n        [(=\
    \ num #\\1) 1]\n        [(= num #\\2) 2]\n        [(= num #\\3) 3]\n        [(=\
    \ num #\\4) 4]\n        [(= num #\\5) 5]\n        [(= num #\\6) 6]\n        [(=\
    \ num #\\7) 7]\n        [(= num #\\8) 8]\n        [(= num #\\9) 9]\n        [(=\
    \ num #\\A) 10]\n        [(= num #\\B) 11]\n        [(= num #\\C) 12]\n      \
    \  [(= num #\\D) 13]\n        [(= num #\\E) 14]\n        [(= num #\\F) 15]))\n",
  "  (string-downcase (number->string num)))\n", "  (cond\n    [(or (= num #\\2) (=\
    \ num #\\3) (= num #\\5) (= num #\\7) (= num #\\B) (= num #\\D)) 1]\n    [else\
    \ 0]))\n", "  (cond [(string=? num \"A\") 10]\n        [(string=? num \"B\") 11]\n\
    \        [(string=? num \"C\") 12]\n        [(string=? num \"D\") 13]\n      \
    \  [(string=? num \"E\") 14]\n        [(string=? num \"F\") 15]\n        [else\
    \ (string-&gt;number num)]))\n", "  (cond ((string=? num \"\") 0)\n        ((string=?\
    \ num \"A\") 1)\n        ((string=? num \"B\") 1)\n        ((string=? num \"C\"\
    ) 0)\n        ((string=? num \"D\") 1)\n        ((string=? num \"E\") 0)\n   \
    \     ((string=? num \"F\") 0)\n        ((string=? num \"2\") 1)\n        ((string=?\
    \ num \"3\") 1)\n        ((string=? num \"4\") 0)\n        ((string=? num \"5\"\
    ) 1)\n        ((string=? num \"6\") 0)\n        ((string=? num \"7\") 1)\n   \
    \     ((string=? num \"8\") 0)\n        ((string=? num \"9\") 0)\n        ((string=?\
    \ num \"0\") 0)\n        (else -1)))\n", "  (define digit\n    (cond [(equal?\
    \ (string-length num) 1)\n            num]\n          [else\n            (substring\
    \ num 0 1)]))\n  (cond [(equal? digit \"A\")\n          10]\n        [(equal?\
    \ digit \"B\")\n          11]\n        [(equal? digit \"C\")\n          12]\n\
    \        [(equal? digit \"D\")\n          13]\n        [(equal? digit \"E\")\n\
    \          14]\n        [(equal? digit \"F\")\n          15]\n        [else\n\
    \          (string->number digit)]))\n", "  (let \n      ([hex-digits (string->list\
    \ num)]\n       [prime-digits (string->list \"2357BDF\")])\n    (for/fold ([counter\
    \ 0]) ([i hex-digits])\n      (if (member i prime-digits)\n          (+ counter\
    \ 1)\n          counter))))", "  (cond\n    [(empty? num) 0]\n    [(or (= '2 (car\
    \ num)) (= '3 (car num)) (= '5 (car num)) (= '7 (car num)) (= 'B (car num)) (=\
    \ 'D (car num))) (+ 1 (hex_key (cdr num)))]\n    [else (hex_key (cdr num))]))\n",
  "  (hash '2 2\n\t'3 3\n\t'5 5\n\t'7 7\n\t'B 11\n\t'D 13\n\t'F 17))\n", "  (define\
    \ (is-prime x)\n    (if (= x 2)\n        #t\n        (if (even? x)\n         \
    \   #f\n            (let loop ((i (- x 1)))\n              (if (even? i)\n   \
    \               (loop (- i 1))\n                  (if (= (% x i) 0)\n        \
    \              #f\n                      (if (= i 2)\n                       \
    \   #t\n                          (loop (- i 1)))))))))\n  (define (aux num count)\n\
    \    (cond ((null? num) count)\n          ((and (string=? (string-upcase (string-ref\
    \ num 0)) (string-ref num 0))\n                (is-prime (string->number (string-ref\
    \ num 0) 16)))\n           (aux (cdr num) (+ count 1)))\n          (else (aux\
    \ (cdr num) count))))\n  (aux num 0))", "  (let ((digits (string->list num)))\n\
    \    (for/fold ([acc 0]) ([d digits])\n      (if (memq d '(2 3 5 7 11 13))\n \
    \         (+ acc 1)\n          acc))))\n", "  (cond\n    [(string=? num \"\")\
    \ 0]\n    [(string=? num \"A\") 1]\n    [(string=? num \"B\") 1]\n    [(string=?\
    \ num \"C\") 0]\n    [(string=? num \"D\") 1]\n    [(string=? num \"E\") 0]\n\
    \    [(string=? num \"F\") 0]\n    [(>= (string->number num) 2) 1]\n    [else\
    \ 0]))\n", "  (cond ((= num 0) '0)\n        ((= num 1) '1)\n        ((= num 2)\
    \ '2)\n        ((= num 3) '3)\n        ((= num 4) '4)\n        ((= num 5) '5)\n\
    \        ((= num 6) '6)\n        ((= num 7) '7)\n        ((= num 8) '8)\n    \
    \    ((= num 9) '9)\n        ((= num 10) 'A)\n        ((= num 11) 'B)\n      \
    \  ((= num 12) 'C)\n        ((= num 13) 'D)\n        ((= num 14) 'E)\n       \
    \ ((= num 15) 'F)))", "  (if (string=? num \"\") \n      0\n      (if (or (string=?\
    \ (substring num 0 1) \"A\")\n              (string=? (substring num 0 1) \"B\"\
    )\n              (string=? (substring num 0 1) \"D\")\n              (string=?\
    \ (substring num 0 1) \"2\")\n              (string=? (substring num 0 1) \"3\"\
    )\n              (string=? (substring num 0 1) \"5\")\n              (string=?\
    \ (substring num 0 1) \"7\"))\n          (+ 1 (hex_key (substring num 1 (string-length\
    \ num))))\n          (hex_key (substring num 1 (string-length num))))))\n", " \
    \ (match num\n    [\"\" 0]\n    [_ (string-upcase num)]))\n", "  (let loop ([n\
    \ num] [result '()])\n    (cond\n      [(zero? n) result]\n      [else (loop (quotient\
    \ n 16)\n                  (cons (modulo n 16) result))])))\n", "  (cond [(equal?\
    \ num \"\") 0]\n        [(equal? num \"A\") 1]\n        [(equal? num \"B\") 2]\n\
    \        [(equal? num \"C\") 3]\n        [(equal? num \"D\") 4]\n        [(equal?\
    \ num \"E\") 5]\n        [(equal? num \"F\") 6]\n        [else num]))\n", "  (case\
    \ num\n    [(0) #\\0]\n    [(1) #\\1]\n    [(2) #\\2]\n    [(3) #\\3]\n    [(4)\
    \ #\\4]\n    [(5) #\\5]\n    [(6) #\\6]\n    [(7) #\\7]\n    [(8) #\\8]\n    [(9)\
    \ #\\9]\n    [(10) #\\A]\n    [(11) #\\B]\n    [(12) #\\C]\n    [(13) #\\D]\n\
    \    [(14) #\\E]\n    [(15) #\\F]))\n", "  (cond\n    [(empty? num) 0]\n    [(member\
    \ (first num) '(2 3 5 7 B D)) (+ 1 (hex_key (rest num)))]\n    [else (hex_key\
    \ (rest num))]))\n</code>\n", "  (cond\n    [(symbol=? num #\\2) 2]\n    [(symbol=?\
    \ num #\\3) 3]\n    [(symbol=? num #\\5) 5]\n    [(symbol=? num #\\7) 7]\n   \
    \ [(symbol=? num #\\B) 11]\n    [(symbol=? num #\\D) 13]\n    [else \"Not a prime.\"\
    ]))", "  (if (or (= num #\\2) (= num #\\3) (= num #\\5) (= num #\\7)\n       \
    \   (= num #\\B) (= num #\\D))\n      1\n      0))\n", "  (cond\n    [(eq? num\
    \ \"0\") 0]\n    [(eq? num \"1\") 1]\n    [(eq? num \"2\") 2]\n    [(eq? num \"\
    3\") 3]\n    [(eq? num \"4\") 4]\n    [(eq? num \"5\") 5]\n    [(eq? num \"6\"\
    ) 6]\n    [(eq? num \"7\") 7]\n    [(eq? num \"8\") 8]\n    [(eq? num \"9\") 9]\n\
    \    [(eq? num \"A\") 10]\n    [(eq? num \"B\") 11]\n    [(eq? num \"C\") 12]\n\
    \    [(eq? num \"D\") 13]\n    [(eq? num \"E\") 14]\n    [(eq? num \"F\") 15]\n\
    \    [(eq? num \"a\") 10]\n    [(eq? num \"b\") 11]\n    [(eq? num \"c\") 12]\n\
    \    [(eq? num \"d\") 13]\n    [(eq? num \"e\") 14]\n    [(eq? num \"f\") 15]\n\
    \    [else (error \"Invalid hex number\")]))\n", "\t(define (num-filter x)\n\t\
    \t(if (equal? x \"A\")\n\t\t\t10\n\t\t\t(if (equal? x \"B\")\n\t\t\t\t11\n\t\t\
    \t\t(if (equal? x \"C\")\n\t\t\t\t\t12\n\t\t\t\t\t(if (equal? x \"D\")\n\t\t\t\
    \t\t\t13\n\t\t\t\t\t\t(if (equal? x \"E\")\n\t\t\t\t\t\t\t14\n\t\t\t\t\t\t\t(if\
    \ (equal? x \"F\")\n\t\t\t\t\t\t\t\t15\n\t\t\t\t\t\t\t\t(string->number x))))))))\n\
    \t(define (prime? x)\n\t\t(if (< x 2)\n\t\t\t#f\n\t\t\t(if (= x 2)\n\t\t\t\t#t\n\
    \t\t\t\t(define (iter y)\n\t\t\t\t\t(if (= (modulo x y) 0)\n\t\t\t\t\t\t#f\n\t\
    \t\t\t\t\t(if (< y x)\n\t\t\t\t\t\t\t(iter (+ y 1))\n\t\t\t\t\t\t\t#t)))\n\t\t\
    \t\t(iter 2))))\n\t(define (char-filter x)\n\t\t(if (and (>= x 48) (<= x 57))\n\
    \t\t\t(number->string x)\n\t\t\t(if (and (>= x 65) (<= x 70))\n\t\t\t\t(number->string\
    \ x)\n\t\t\t\t\"\")))\n\t(define (iter x count)\n\t\t(if (empty? x)\n\t\t\tcount\n\
    \t\t\t(if (prime? (num-filter (string-ref (char-filter (car x)) 0)))\n\t\t\t\t\
    (iter (cdr x) (+ count 1))\n\t\t\t\t(iter (cdr x) count))))\n\t(iter (string->list\
    \ num) 0))\n", "  (string-&gt;number (substring num 1 2) 16))\n", "  (cond\n \
    \   [(string=? num \"\") 0]\n    [(string=? num \"A\") 1]\n    [(string=? num\
    \ \"B\") 1]\n    [(string=? num \"C\") 0]\n    [(string=? num \"D\") 1]\n    [(string=?\
    \ num \"E\") 0]\n    [(string=? num \"F\") 0]\n    [(number? (string->number num))\n\
    \     (if (prime? (string->number num)) 1 0)]\n    [else 0]))\n", "    (cond [(empty?\
    \ num) 0]\n            [(symbol=? (string-&gt;symbol (substring num 0 1)) '2)\
    \ (+ 1 (hex_key (substring num 1)))]\n            [(symbol=? (string-&gt;symbol\
    \ (substring num 0 1)) '3) (+ 1 (hex_key (substring num 1)))]\n            [(symbol=?\
    \ (string-&gt;symbol (substring num 0 1)) '5) (+ 1 (hex_key (substring num 1)))]\n\
    \            [(symbol=? (string-&gt;symbol (substring num 0 1)) '7) (+ 1 (hex_key\
    \ (substring num 1)))]\n            [(symbol=? (string-&gt;symbol (substring num\
    \ 0 1)) 'B) (+ 1 (hex_key (substring num 1)))]\n            [(symbol=? (string-&gt;symbol\
    \ (substring num 0 1)) 'D) (+ 1 (hex_key (substring num 1)))]\n            [else\
    \ (hex_key (substring num 1))]))\n</code>\nIt's always returning the error:\n\
    <code>prime_hex_digits.rkt:5:17: string-&gt;symbol: expected a string, but got\
    \ #&lt;syntax:prime_hex_digits.rkt:5:16&gt;\n</code>\nI'm not sure why it's doing\
    \ this, anyone know?\n\n\nA:\n\nYou're saying:\n<code>(symbol=? (string-&gt;symbol\
    \ (substring num 0 1)) '2)\n</code>\nso that <code>num</code> is supposed to be\
    \ a string, but it's not a string.\nThe program you're using to check it is probably\
    \ reading the file and then immediately running it.  So you can't just add <code>num</code>\
    \ anywhere in the file and expect it to be a variable when the file is run.\n\
    Instead, add <code>num</code> as a parameter to the <code>hex_key</code> function.\
    \  You can also just type the strings you want to test right in the code, so you\
    \ don't need to go through the effort of running a", "  (if (= num #\\0)\n   \
    \   0\n      (if (= num #\\1)\n          1\n          (if (= num #\\2)\n     \
    \         2\n              (if (= num #\\3)\n                  3\n           \
    \       (if (= num #\\4)\n                      4\n                      (if (=\
    \ num #\\5)\n                          5\n                          (if (= num\
    \ #\\6)\n                              6\n                              (if (=\
    \ num #\\7)\n                                  7\n                           \
    \       (if (= num #\\8)\n                                      8\n          \
    \                            (if (= num #\\9)\n                              \
    \            9\n                                          (if (= num #\\A)\n \
    \                                             10\n                           \
    \                   (if (= num #\\B)\n                                       \
    \           11\n                                                  (if (= num #\\\
    C)\n                                                      12\n               \
    \                                       (if (= num #\\D)\n                   \
    \                                       13\n                                 \
    \                         (if (= num #\\E)\n                                 \
    \                             14\n                                           \
    \                   (if (= num #\\F)\n                                       \
    \                           15\n                                             \
    \                     #f))))))))))))))))))", "  (if (member num '(2 3 5 7 11 13))\
    \ #t #f))\n", "  (cond [(equal? num \"\") 0]\n        [(equal? num \"2\") 1]\n\
    \        [(equal? num \"3\") 1]\n        [(equal? num \"5\") 1]\n        [(equal?\
    \ num \"7\") 1]\n        [(equal? num \"B\") 1]\n        [(equal? num \"D\") 1]\n\
    \        [else 0]))\n", "  (cond [(string=? num \"\") 0]\n        [(or (string=?\
    \ num \"2\") (string=? num \"3\") (string=? num \"5\") (string=? num \"7\") (string=?\
    \ num \"B\") (string=? num \"D\")) 1]\n        [else 0]))\n", "  (cond ((string=?\
    \ num \"\") \"0\")\n        ((symbol=? num 'A) \"10\")\n        ((symbol=? num\
    \ 'B) \"11\")\n        ((symbol=? num 'C) \"12\")\n        ((symbol=? num 'D)\
    \ \"13\")\n        ((symbol=? num 'E) \"14\")\n        ((symbol=? num 'F) \"15\"\
    )\n        (else num)))\n", "  (if (string=? num \"\")\n      (list 0)\n     \
    \ (list (car (string->list num)))))", "  (hash-ref (hash \"0\" 0 \"1\" 1 \"2\"\
    \ 2 \"3\" 3 \"4\" 4 \"5\" 5 \"6\" 6 \"7\" 7 \"8\" 8 \"9\" 9 \"A\" 10 \"B\" 11\
    \ \"C\" 12 \"D\" 13 \"E\" 14 \"F\" 15) num))\n", "  (if (string=? num \"\")\n\
    \      0\n      (if (member num '(\"A\" \"B\" \"D\"))\n          1\n         \
    \ (if (member num '(\"2\" \"3\" \"5\" \"7\"))\n              1\n             \
    \ 0))))", "  (cond\n    [(char=? num #\\0) 0]\n    [(char=? num #\\1) 1]\n   \
    \ [(char=? num #\\2) 2]\n    [(char=? num #\\3) 3]\n    [(char=? num #\\4) 4]\n\
    \    [(char=? num #\\5) 5]\n    [(char=? num #\\6) 6]\n    [(char=? num #\\7)\
    \ 7]\n    [(char=? num #\\8) 8]\n    [(char=? num #\\9) 9]\n    [(char=? num #\\\
    A) 10]\n    [(char=? num #\\B) 11]\n    [(char=? num #\\C) 12]\n    [(char=? num\
    \ #\\D) 13]\n    [(char=? num #\\E) 14]\n    [(char=? num #\\F) 15]\n    [else\
    \ 0]))\n", "  (define (hex-key-iter num p r)\n    (if (zero? num) r\n        (if\
    \ (= p num) (+ 1 r)\n            (if (or (not (integer? (/ num p)))\n        \
    \            (hex-key-iter num (+ p 2) r))\n                (hex-key-iter num\
    \ (+ p 2) (+ 1 r))))))\n  (hex-key-iter num 2 0))\n", "  (cond ((equal? num #\\\
    2) 2)\n        ((equal? num #\\3) 3)\n        ((equal? num #\\5) 5)\n        ((equal?\
    \ num #\\7) 7)\n        ((equal? num #\\B) 11)\n        ((equal? num #\\D) 13)\n\
    \        ((equal? num #\\F) 17)\n        (else 0)))\n", "  (match num\n    ['0\
    \ 0]\n    ['1 1]\n    ['2 2]\n    ['3 3]\n    ['4 4]\n    ['5 5]\n    ['6 6]\n\
    \    ['7 7]\n    ['8 8]\n    ['9 9]\n    ['A 10]\n    ['B 11]\n    ['C 12]\n \
    \   ['D 13]\n    ['E 14]\n    ['F 15]))\n", "  (cond ((string=? num \"\") (list))\n\
    \        ((char-numeric? (string-ref num 0))\n         (cons (string->number (string\
    \ (string-ref num 0))) (hex_key (substring num 1))))\n        ((char=? (string-ref\
    \ num 0) #\\A) (cons 10 (hex_key (substring num 1))))\n        ((char=? (string-ref\
    \ num 0) #\\B) (cons 11 (hex_key (substring num 1))))\n        ((char=? (string-ref\
    \ num 0) #\\C) (cons 12 (hex_key (substring num 1))))\n        ((char=? (string-ref\
    \ num 0) #\\D) (cons 13 (hex_key (substring num 1))))\n        ((char=? (string-ref\
    \ num 0) #\\E) (cons 14 (hex_key (substring num 1))))\n        ((char=? (string-ref\
    \ num 0) #\\F) (cons 15 (hex_key (substring num 1))))))", "  (cond [(= num #\\\
    0) 0]\n        [(= num #\\1) 1]\n        [(= num #\\2) 2]\n        [(= num #\\\
    3) 3]\n        [(= num #\\4) 4]\n        [(= num #\\5) 5]\n        [(= num #\\\
    6) 6]\n        [(= num #\\7) 7]\n        [(= num #\\8) 8]\n        [(= num #\\\
    9) 9]\n        [(= num #\\A) 10]\n        [(= num #\\B) 11]\n        [(= num #\\\
    C) 12]\n        [(= num #\\D) 13]\n        [(= num #\\E) 14]\n        [(= num\
    \ #\\F) 15]))", "  (match num\n    [(list #\\2) 2]\n    [(list #\\3) 3]\n    [(list\
    \ #\\5) 5]\n    [(list #\\7) 7]\n    [(list #\\B) 11]\n    [(list #\\D) 13]\n\
    \    [_ 0]))\n", "  (cond\n    [(= num #\\A) 10]\n    [(= num #\\B) 11]\n    [(=\
    \ num #\\C) 12]\n    [(= num #\\D) 13]\n    [(= num #\\E) 14]\n    [(= num #\\\
    F) 15]\n    [else (char->integer num)]))\n", "  (cond ((string=? num \"\") 0)\n\
    \        ((string=? num \"0\") 0)\n        ((string=? num \"1\") 0)\n        ((string=?\
    \ num \"2\") 1)\n        ((string=? num \"3\") 1)\n        ((string=? num \"4\"\
    ) 0)\n        ((string=? num \"5\") 1)\n        ((string=? num \"6\") 0)\n   \
    \     ((string=? num \"7\") 1)\n        ((string=? num \"8\") 0)\n        ((string=?\
    \ num \"9\") 0)\n        ((string=? num \"A\") 0)\n        ((string=? num \"B\"\
    ) 1)\n        ((string=? num \"C\") 0)\n        ((string=? num \"D\") 1)\n   \
    \     ((string=? num \"E\") 0)\n        ((string=? num \"F\") 0)))\n", "  (member\
    \ num '(0 1 2 3 4 5 6 7 8 9 10 11 13)))\n", "  (cond [(equal? num \"0\") 0]\n\
    \        [(equal? num \"1\") 1]\n        [(equal? num \"2\") 2]\n        [(equal?\
    \ num \"3\") 3]\n        [(equal? num \"4\") 4]\n        [(equal? num \"5\") 5]\n\
    \        [(equal? num \"6\") 6]\n        [(equal? num \"7\") 7]\n        [(equal?\
    \ num \"8\") 8]\n        [(equal? num \"9\") 9]\n        [(equal? num \"A\") 10]\n\
    \        [(equal? num \"B\") 11]\n        [(equal? num \"C\") 12]\n        [(equal?\
    \ num \"D\") 13]\n        [(equal? num \"E\") 14]\n        [(equal? num \"F\"\
    ) 15]))\n", "  (cond\n    [(null? num) num]\n    [(equal? (string-length num)\
    \ 2) (string-append \"#x\" num)]\n    [else (string-append \"#x0\" num)]))\n",
  "  (if (string=? num \"\") 0\n      (if (or (char=? (string-ref num 0) #\\2)\n \
    \             (char=? (string-ref num 0) #\\3)\n              (char=? (string-ref\
    \ num 0) #\\5)\n              (char=? (string-ref num 0) #\\7)\n             \
    \ (char=? (string-ref num 0) #\\B)\n              (char=? (string-ref num 0) #\\\
    D))\n          (+ 1 (hex_key (substring num 1)))\n          (hex_key (substring\
    \ num 1)))))", "  (cond ((not (empty? num))\n         (cond ((or (= #\\2 (first\
    \ num))\n                    (= #\\3 (first num))\n                    (= #\\\
    5 (first num))\n                    (= #\\7 (first num))\n                   \
    \ (= #\\B (first num))\n                    (= #\\D (first num)))\n          \
    \      (+ 1 (hex_key (rest num))))\n               (else (hex_key (rest num)))))\n\
    \        (else 0)))\n", "  (cond [(empty? num) \"\"]\n        [(or (= (first num)\
    \ #\\0)\n             (= (first num) #\\1)\n             (= (first num) #\\4)\n\
    \             (= (first num) #\\6)\n             (= (first num) #\\8)\n      \
    \       (= (first num) #\\9)\n             (= (first num) #\\A)\n            \
    \ (= (first num) #\\C)\n             (= (first num) #\\E)) (string-append (list\
    \ (first num)) (hex_key (rest num)))]\n        [else (string-append (list (first\
    \ num)) (hex_key (rest num)))]))\n", "    (cond [(number? num) (number->string\
    \ num 16)]\n          [(string? num) num]\n          [else false]))\n", "  (cond\n\
    \    [(equal? (string-ref num 0) #\\2) 0]\n    [(equal? (string-ref num 0) #\\\
    3) 1]\n    [(equal? (string-ref num 0) #\\5) 2]\n    [(equal? (string-ref num\
    \ 0) #\\7) 3]\n    [(equal? (string-ref num 0) #\\B) 4]\n    [(equal? (string-ref\
    \ num 0) #\\D) 5]\n    [else -1]))\n", "  (cond [(equal? num \"2\") 1]\n     \
    \   [(equal? num \"3\") 1]\n        [(equal? num \"5\") 1]\n        [(equal? num\
    \ \"7\") 1]\n        [(equal? num \"B\") 1]\n        [(equal? num \"D\") 1]\n\
    \        [else 0]))\n", "  (cond\n    [(= num (string->number \"0\")) 0]\n   \
    \ [(= num (string->number \"1\")) 1]\n    [(= num (string->number \"2\")) 2]\n\
    \    [(= num (string->number \"3\")) 3]\n    [(= num (string->number \"4\")) 4]\n\
    \    [(= num (string->number \"5\")) 5]\n    [(= num (string->number \"6\")) 6]\n\
    \    [(= num (string->number \"7\")) 7]\n    [(= num (string->number \"8\")) 8]\n\
    \    [(= num (string->number \"9\")) 9]\n    [(= num (string->number \"A\")) 10]\n\
    \    [(= num (string->number \"B\")) 11]\n    [(= num (string->number \"C\"))\
    \ 12]\n    [(= num (string->number \"D\")) 13]\n    [(= num (string->number \"\
    E\")) 14]\n    [(= num (string->number \"F\")) 15]\n    ))\n", "  (case num\n\
    \    [('0 0)]\n    [('1 1)]\n    [('2 2)]\n    [('3 3)]\n    [('4 4)]\n    [('5\
    \ 5)]\n    [('6 6)]\n    [('7 7)]\n    [('8 8)]\n    [('9 9)]\n    [('A 10)]\n\
    \    [('B 11)]\n    [('C 12)]\n    [('D 13)]\n    [('E 14)]\n    [('F 15)]))\n",
  "  (define (helper num)\n    (cond ((string=? num \"\")\n           0)\n       \
    \   ((member (string-&gt;number (string-&gt;list num) 16)\n                  \
    \ '(2 3 5 7 11 13))\n           (+ 1 (helper (string-drop num 1))))\n        \
    \  (else\n           (helper (string-drop num 1)))))\n  (helper num))\n", "  \
    \  (cond\n      [(eq? num \"2\") 2]\n      [(eq? num \"3\") 3]\n      [(eq? num\
    \ \"5\") 5]\n      [(eq? num \"7\") 7]\n      [(eq? num \"B\") 11]\n      [(eq?\
    \ num \"D\") 13]\n      [else (number->string (string->number num 16))]))\n",
  "  (cond [(= num #\\A) 10]\n        [(= num #\\B) 11]\n        [(= num #\\C) 12]\n\
    \        [(= num #\\D) 13]\n        [(= num #\\E) 14]\n        [(= num #\\F) 15]\n\
    \        [else (- num #\\0)]))", "  (match num\n    [#\\0 (list 0)]\n    [#\\\
    1 (list 1)]\n    [#\\2 (list 2)]\n    [#\\3 (list 3)]\n    [#\\4 (list 4)]\n \
    \   [#\\5 (list 5)]\n    [#\\6 (list 6)]\n    [#\\7 (list 7)]\n    [#\\8 (list\
    \ 8)]\n    [#\\9 (list 9)]\n    [#\\A (list 10)]\n    [#\\B (list 11)]\n    [#\\\
    C (list 12)]\n    [#\\D (list 13)]\n    [#\\E (list 14)]\n    [#\\F (list 15)]))\n",
  "  (cond\n    [(string=? num \"\") 0]\n    [(string=? num \"2\") 1]\n    [(string=?\
    \ num \"3\") 1]\n    [(string=? num \"5\") 1]\n    [(string=? num \"7\") 1]\n\
    \    [(string=? num \"B\") 1]\n    [(string=? num \"D\") 1]\n    [else 0]))\n",
  "  (case num\n    ((#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9) (string->number\
    \ (string num)))\n    ((#\\A #\\B #\\C #\\D #\\E #\\F) (- (char->integer num)\
    \ (char->integer #\\A) 10))))\n", "  (cond\n    [(empty? num) 0]\n    [(member\
    \ (string-&gt;number (first num) 16) (list 11 13 17 19 23 29 31 37 41 43 47 53\
    \ 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163\
    \ 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269\
    \ 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383\
    \ 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499\
    \ 503 509 521 523 541 547 557 563 569 571 577 587 593 599 601 607 613 617 619\
    \ 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751\
    \ 757 761 769 773 787 797 809 811 821 823 827 829 839 853 857 859 863 877 881\
    \ 883 887 907 911 919 929 937 941 943 947 953 967 971 977 983 991 997 1009 1013\
    \ 1019 1021 1031 1033 1039 1049 1051 1061 1063 1069 1087 1091 1093 1097 1103 1109\
    \ 1117 1123 1129 1151 1153 1163 1171 1181 1187 1193 1201 1213 1217 1223 1229 1231\
    \ 1237 1249 1259 1277 1279 1283 1289 1291 1297 1301 1303 1307 1319 1321 1327 1361\
    \ 1367 1373 1381 1399 1409 1423 1427 1429 1433 1439 1447 1451 1453 1459 1471 1481\
    \ 1483 1487 1489 1493 1499 1511 1523 1531 1543 1549 1553 1559 1567 1571 1579 1583\
    \ 1597 1601 1607 1609 1613 1619 1621 1627 1637 1657 1663 1667 1669 1693 1697 1699\
    \ 1709 1721 1723 1733 1741 1747 1753 1759 1777 1783 1787 1789 1801 1811 1823 1831\
    \ 1847 1861 1867 1871", "  (cond ((eq? num \"A\") 11)\n        ((eq? num \"B\"\
    ) 12)\n        ((eq? num \"C\") 13)\n        ((eq? num \"D\") 14)\n        ((eq?\
    \ num \"E\") 15)\n        ((eq? num \"F\") 16)\n        (else (string->number\
    \ num))))\n", "  (case num\n   ((#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8\
    \ #\\9) num)\n   ((#\\A #\\B #\\C #\\D #\\E #\\F) (+ 9 num))\n   (else (error\
    \ \"Invalid hex key\"))))\n", "  (if (equal? num \"\")\n      0\n      (add1 (hex_key\
    \ (rest num)))))", "  (let ((digits (string->list num)))\n  (define (num-from-digit\
    \ c)\n    (cond ((= c #\\0) 0)\n          ((= c #\\1) 1)\n          ((= c #\\\
    2) 2)\n          ((= c #\\3) 3)\n          ((= c #\\4) 4)\n          ((= c #\\\
    5) 5)\n          ((= c #\\6) 6)\n          ((= c #\\7) 7)\n          ((= c #\\\
    8) 8)\n          ((= c #\\9) 9)\n          ((= c #\\A) 10)\n          ((= c #\\\
    B) 11)\n          ((= c #\\C) 12)\n          ((= c #\\D) 13)\n          ((= c\
    \ #\\E) 14)\n          ((= c #\\F) 15)))\n  (cond\n    [(empty? digits) (error\
    \ \"empty string\")]\n    [(prime? (num-from-digit (first digits))) (+ 1 (hex-key\
    \ (rest digits)))]\n    [else (hex-key (rest digits))])))\n", "  (cond\n    [(string=?\
    \ num \"\") 0]\n    [(string=? num \"A\") 0]\n    [(string=? num \"C\") 0]\n \
    \   [(string=? num \"E\") 0]\n    [(string=? num \"B\") 1]\n    [(string=? num\
    \ \"D\") 1]\n    [else 1]))\n", "  (cond\n    [(eq? num #\\0) 0]\n    [(eq? num\
    \ #\\1) 1]\n    [(eq? num #\\2) 2]\n    [(eq? num #\\3) 3]\n    [(eq? num #\\\
    4) 4]\n    [(eq? num #\\5) 5]\n    [(eq? num #\\6) 6]\n    [(eq? num #\\7) 7]\n\
    \    [(eq? num #\\8) 8]\n    [(eq? num #\\9) 9]\n    [(eq? num #\\A) 10]\n   \
    \ [(eq? num #\\B) 11]\n    [(eq? num #\\C) 12]\n    [(eq? num #\\D) 13]\n    [(eq?\
    \ num #\\E) 14]\n    [(eq? num #\\F) 15]\n))\n", "  (if (equal? (string-length\
    \ num) 1)\n      (list (string->number num 16))\n      (cons (string->number (substring\
    \ num 0 1) 16) (hex_key (substring num 1)))))\n", "  (cond ((= num #\\0) 0)\n\
    \        ((= num #\\1) 1)\n        ((= num #\\2) 2)\n        ((= num #\\3) 3)\n\
    \        ((= num #\\4) 4)\n        ((= num #\\5) 5)\n        ((= num #\\6) 6)\n\
    \        ((= num #\\7) 7)\n        ((= num #\\8) 8)\n        ((= num #\\9) 9)\n\
    \        ((= num #\\A) 10)\n        ((= num #\\B) 11)\n        ((= num #\\C) 12)\n\
    \        ((= num #\\D) 13)\n        ((= num #\\E) 14)\n        ((= num #\\F) 15)))\n",
  "  (cond [(eq? num 0) 0]\n        [(eq? num 1) 1]\n        [(eq? num 2) 2]\n   \
    \     [(eq? num 3) 3]\n        [(eq? num 4) 4]\n        [(eq? num 5) 5]\n    \
    \    [(eq? num 6) 6]\n        [(eq? num 7) 7]\n        [(eq? num 8) 8]\n     \
    \   [(eq? num 9) 9]\n        [(eq? num 10) 11]\n        [(eq? num 11) 13]\n  \
    \      [(eq? num 12) 17]\n        [(eq? num 13) 19]\n        [(eq? num 14) 23]\n\
    \        [(eq? num 15) 29]))\n", "  (hash '(\"2\" 2) '(\"3\" 3) '(\"5\" 5) '(\"\
    7\" 7) '(\"B\" 11) '(\"D\" 13)\n        '(\"F\" 15) '(\"A\" 10) '(\"C\" 12) '(\"\
    E\" 14)))\n", " (cond\n  ((= num '0) 0)\n  ((= num '1) 1)\n  ((= num '2) 2)\n\
    \  ((= num '3) 3)\n  ((= num '4) 4)\n  ((= num '5) 5)\n  ((= num '6) 6)\n  ((=\
    \ num '7) 7)\n  ((= num '8) 8)\n  ((= num '9) 9)\n  ((= num 'A) 10)\n  ((= num\
    \ 'B) 11)\n  ((= num 'C) 12)\n  ((= num 'D) 13)\n  ((= num 'E) 14)\n  ((= num\
    \ 'F) 15)\n  (else (error \"Invalid character input\" num))))\n", "  (cond ((string=?\
    \ \"0\" num) 0)\n        ((string=? \"1\" num) 1)\n        ((string=? \"2\" num)\
    \ 2)\n        ((string=? \"3\" num) 3)\n        ((string=? \"4\" num) 4)\n   \
    \     ((string=? \"5\" num) 5)\n        ((string=? \"6\" num) 6)\n        ((string=?\
    \ \"7\" num) 7)\n        ((string=? \"8\" num) 8)\n        ((string=? \"9\" num)\
    \ 9)\n        ((string=? \"A\" num) 10)\n        ((string=? \"B\" num) 11)\n \
    \       ((string=? \"C\" num) 12)\n        ((string=? \"D\" num) 13)\n       \
    \ ((string=? \"E\" num) 14)\n        ((string=? \"F\" num) 15)))\n", "  (cond\
    \ ((= num 0) '(\"0\"))\n        ((= num 1) '(\"1\"))\n        ((= num 2) '(\"\
    2\"))\n        ((= num 3) '(\"3\"))\n        ((= num 4) '(\"4\"))\n        ((=\
    \ num 5) '(\"5\"))\n        ((= num 6) '(\"6\"))\n        ((= num 7) '(\"7\"))\n\
    \        ((= num 8) '(\"8\"))\n        ((= num 9) '(\"9\"))\n        ((= num 10)\
    \ '(\"A\"))\n        ((= num 11) '(\"B\"))\n        ((= num 12) '(\"C\"))\n  \
    \      ((= num 13) '(\"D\"))\n        ((= num 14) '(\"E\"))\n        ((= num 15)\
    \ '(\"F\"))))\n", "  (cond\n    [(equal? (string-length num) 0) 0]\n    [(equal?\
    \ (string-length num) 1) (if (or (equal? (string-ref num 0) #\\2)\n          \
    \                                  (equal? (string-ref num 0) #\\3)\n        \
    \                                    (equal? (string-ref num 0) #\\5)\n      \
    \                                      (equal? (string-ref num 0) #\\7)\n    \
    \                                        (equal? (string-ref num 0) #\\B)\n  \
    \                                          (equal? (string-ref num 0) #\\D))\n\
    \                                          1\n                               \
    \           0)]\n    [else (if (or (equal? (string-ref num 0) #\\2)\n        \
    \          (equal? (string-ref num 0) #\\3)\n                  (equal? (string-ref\
    \ num 0) #\\5)\n                  (equal? (string-ref num 0) #\\7)\n         \
    \         (equal? (string-ref num 0) #\\B)\n                  (equal? (string-ref\
    \ num 0) #\\D))\n                (+ 1 (hex_key (substring num 1 (string-length\
    \ num))))\n                (hex_key (substring num 1 (string-length num))))]))",
  "  (cond [(string=? num \"A\") 10]\n        [(string=? num \"B\") 11]\n        [(string=?\
    \ num \"C\") 12]\n        [(string=? num \"D\") 13]\n        [(string=? num \"\
    E\") 14]\n        [(string=? num \"F\") 15]\n        [else (string-&gt;number\
    \ num)]))\n", "  (cond ((= num #\\A) 10)\n        ((= num #\\B) 11)\n        ((=\
    \ num #\\C) 12)\n        ((= num #\\D) 13)\n        ((= num #\\E) 14)\n      \
    \  ((= num #\\F) 15)\n        (else num)))\n", "  (cond ((= num 1) 1)\n      \
    \  ((= num 2) 2)\n        ((= num 3) 3)\n        ((= num 4) 5)\n        ((= num\
    \ 5) 7)\n        ((= num 6) 11)\n        ((= num 7) 13)\n        (else -1)))",
  "  (cond [(string=? num \"\") 0]\n        [(string=? num \"A\") 1]\n        [(string=?\
    \ num \"B\") 1]\n        [(string=? num \"C\") 0]\n        [(string=? num \"D\"\
    ) 1]\n        [(string=? num \"E\") 0]\n        [(string=? num \"F\") 0]\n   \
    \     [(string=? num \"2\") 1]\n        [(string=? num \"3\") 1]\n        [(string=?\
    \ num \"5\") 1]\n        [(string=? num \"7\") 1]\n        [else 0]))\n", "  (cond\n\
    \    [(equal? num \"\") 0]\n    [(in-list? num '(2 3 5 7 11 13)) 1]\n    [else\
    \ (hex_key (string-tail num))]))", "  (cond [(string=? num \"\") 0]\n        [(in?\
    \ (string->number (string-ref num 0) 16) '(2 3 5 7 11 13))\n         (+ 1 (hex_key\
    \ (substring num 1)))]\n        [else (hex_key (substring num 1))]))\n", "  (cond\
    \ [(equal? num \"\") 0]\n        [(member num '(\"0\" \"1\" \"4\" \"6\" \"8\"\
    \ \"9\")) 0]\n        [(member num '(\"2\" \"3\" \"5\" \"7\" \"B\" \"D\")) 1]\n\
    \        [(member num '(\"A\" \"C\" \"E\" \"F\")) 0]))\n", "  (cond\n    [(= num\
    \ #\\0) 0]\n    [(= num #\\1) 1]\n    [(= num #\\2) 2]\n    [(= num #\\3) 3]\n\
    \    [(= num #\\4) 4]\n    [(= num #\\5) 5]\n    [(= num #\\6) 6]\n    [(= num\
    \ #\\7) 7]\n    [(= num #\\8) 8]\n    [(= num #\\9) 9]\n    [(= num #\\A) 10]\n\
    \    [(= num #\\B) 11]\n    [(= num #\\C) 12]\n    [(= num #\\D) 13]\n    [(=\
    \ num #\\E) 14]\n    [(= num #\\F) 15]\n    [else -1]))\n", "  (cond ((and (char-upper-case?\
    \ num) (member num '(#\\2 #\\3 #\\5 #\\7 #\\B #\\D)))\n\t 1)\n\t(else 0)))\n",
  "  (if (= num 0)\n      (cons 0 (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 (cons 6\
    \ (cons 7 (cons 8 (cons 9 (cons \"A\" (cons \"B\" (cons \"C\" (cons \"D\" (cons\
    \ \"E\" (cons \"F\" empty))))))))))))))))\n      (let ((t (hex_key (- num 1))))\n\
    \        (append t (cons (number->string num) empty)))))", "  (cond ((> num 255)\n\
    \         (string->number (string #\\A)))\n        ((> num 153)\n         (string->number\
    \ (string #\\9)))\n        ((> num 102)\n         (string->number (string #\\\
    8)))\n        ((> num 76)\n         (string->number (string #\\7)))\n        ((>\
    \ num 55)\n         (string->number (string #\\6)))\n        ((> num 38)\n   \
    \      (string->number (string #\\5)))\n        ((> num 23)\n         (string->number\
    \ (string #\\4)))\n        ((> num 14)\n         (string->number (string #\\3)))\n\
    \        ((> num 7)\n         (string->number (string #\\2)))\n        ((> num\
    \ 0)\n         (string->number (string #\\1)))\n        (else\n         (string->number\
    \ (string #\\0)))))\n", "  (cond\n    ((equal? num \"\") 0)\n    ((or (equal?\
    \ num \"0\") (equal? num \"1\")) 0)\n    ((member num '(2 3 5 7 B D)) 1)\n   \
    \ (else 0)))\n", "    (member num '(2 3 5 7 \"B\" \"D\")))\n", "  (cond\n    [(string=?\
    \ num \"\") 0]\n    [(string=? num \"A\") 1]\n    [(string=? num \"B\") 1]\n \
    \   [(string=? num \"C\") 0]\n    [(string=? num \"D\") 1]\n    [(string=? num\
    \ \"E\") 0]\n    [(string=? num \"F\") 0]\n    [(string=? num \"2\") 1]\n    [(string=?\
    \ num \"3\") 1]\n    [(string=? num \"5\") 1]\n    [(string=? num \"7\") 1]\n\
    \    [else 0]))\n", "  (cond\n    [(equal? num \"\") \"\"]\n    [(= (string->number\
    \ num) 2) \"2\"]\n    [(= (string->number num) 3) \"3\"]\n    [(= (string->number\
    \ num) 5) \"5\"]\n    [(= (string->number num) 7) \"7\"]\n    [(= (string->number\
    \ num) 11) \"B\"]\n    [(= (string->number num) 13) \"D\"]\n    [else (hex_key\
    \ (number->string (- (string->number num) 1)))]))\n", "  (string-upcase num))\n",
  "  (string-downcase (string-normalize-spaces num)))\n", "  (hash num (build-list\
    \ 16 (\u03BB (x) (cons (number->string x) x)))))\n", "  (and (>= num #\\0) (<=\
    \ num #\\9)))\n", "  (cond ((= (string-length num) 0) 0)\n        ((member (string-ref\
    \ num 0) '(#\\2 #\\3 #\\5 #\\7 #\\B #\\D)) (+ 1 (hex_key (substring num 1))))\n\
    \        (else (hex_key (substring num 1)))))\n", "  (cond [(zero? num) false]\n\
    \        [(and (zero? (modulo num 2)) (zero? (modulo num 5))) false]\n       \
    \ [(and (zero? (modulo num 5)) (zero? (modulo num 11))) false]\n        [(and\
    \ (zero? (modulo num 11)) (zero? (modulo num 13))) false]\n        [else true]))\n",
  "  (cond\n    [(or (= num #\\0) (= num #\\1)) false]\n    [(and (>= num #\\2) (<=\
    \ num #\\7)) true]\n    [(and (>= num #\\8) (<= num #\\9)) false]\n    [(or (=\
    \ num #\\A) (= num #\\B)) true]\n    [(or (= num #\\C) (= num #\\D)) false]\n\
    \    [(or (= num #\\E) (= num #\\F)) false]))\n", "  (cond\n    [(equal? num \"\
    \") 0]\n    [(member num '(\"2\" \"3\" \"5\" \"7\" \"B\" \"D\")) 1]\n    [else\
    \ 0]))\n", "  (cond\n    [(= num #\\0) 0]\n    [(= num #\\1) 1]\n    [(= num #\\\
    2) 2]\n    [(= num #\\3) 3]\n    [(= num #\\4) 4]\n    [(= num #\\5) 5]\n    [(=\
    \ num #\\6) 6]\n    [(= num #\\7) 7]\n    [(= num #\\8) 8]\n    [(= num #\\9)\
    \ 9]\n    [(= num #\\A) 10]\n    [(= num #\\B) 11]\n    [(= num #\\C) 12]\n  \
    \  [(= num #\\D) 13]\n    [(= num #\\E) 14]\n    [(= num #\\F) 15]\n    [else\
    \ (error \"unknown hex value\")]))\n", "  (cond\n    [(null? num) 0]\n    [(in?\
    \ (car num) '(2 3 5 7 #\\B #\\D)) (+ 1 (hex_key (cdr num)))]\n    [else (hex_key\
    \ (cdr num))]))\n", "  (cond ((= (string-length num) 0)\n         0)\n       \
    \ ((= (string-length num) 1)\n         (cond ((string=? num \"A\") 1)\n      \
    \         ((string=? num \"B\") 1)\n               ((string=? num \"C\") 0)\n\
    \               ((string=? num \"D\") 1)\n               ((string=? num \"E\"\
    ) 0)\n               ((string=? num \"F\") 0)\n               ((<= 0 (string->number\
    \ num) 7) 1)\n               (else 0)))\n        (else (+ (hex_key (substring\
    \ num 0 1))\n                 (hex_key (substring num 1 (- (string-length num)\
    \ 1)))))))\n```\n\n```\n#lang racket\n", "  (if (string=? num \"\")\n      (string-&gt;number\
    \ 0)\n      (if (string=? num \"0\")\n          (string-&gt;number 0)\n      \
    \    (if (string=? num \"1\")\n              (string-&gt;number 0)\n         \
    \     (if (string=? num \"2\")\n                  (string-&gt;number 1)\n    \
    \              (if (string=? num \"3\")\n                      (string-&gt;number\
    \ 1)\n                      (if (string=? num \"4\")\n                       \
    \   (string-&gt;number 0)\n                          (if (string=? num \"5\")\n\
    \                              (string-&gt;number 1)\n                       \
    \       (if (string=? num \"6\")\n                                  (string-&gt;number\
    \ 0)\n                                  (if (string=? num \"7\")\n           \
    \                           (string-&gt;number 1)\n                          \
    \            (if (string=? num \"8\")\n                                      \
    \    (string-&gt;number 0)\n                                          (if (string=?\
    \ num \"9\")\n                                              (string-&gt;number\
    \ 0)\n                                              (if (string=? num \"A\")\n\
    \                                                  (string-&gt;number 0)\n   \
    \                                               (if (string=? num \"B\")\n   \
    \                                                   (string-&gt;number 1)\n  \
    \                                                    (if (string=? num \"C\")\n\
    \                                                          (string-&gt;number\
    \ 0)\n                                                          (if (string=?\
    \ num \"D\")\n                                                              (string-&gt;number\
    \ 1)\n                                                              (if (string=?\
    \ num \"E\")\n                                                               \
    \   (string-&gt;number 0)\n                                                  \
    \                (if (string=? num \"F\")\n                                  \
    \                                    (string-&gt;number 0)\n                 \
    \                                                     (string-&gt;number 0))))))))))))))))))))",
  "  (if (zero? num)\n      #f\n      (or (= num (char->integer #\\2))\n         \
    \ (= num (char->integer #\\3))\n          (= num (char->integer #\\5))\n     \
    \     (= num (char->integer #\\7))\n          (= num (char->integer #\\B))\n \
    \         (= num (char->integer #\\D)))))\n", "  (let ([digits  '(0 1 2 3 4 5\
    \ 6 7 8 9 A B C D E F)])\n    (cond [(string=? num \"\")    0]\n          [(member\
    \ num digits)  (if (or (member num '(2 3 5 7 B D)) \n                        \
    \                #f) 1 0)]\n          [else                  (+ (hex_key (substring\
    \ num 0 1))\n                                    (hex_key (substring num 1)))])))\n",
  "  (cond [(null? num) 0]\n        [(string=? (string-append \"0\" (list (car num)))\
    \ \"07\")\n         (+ 1 (hex_key (cdr num)))]\n        [(string=? (string-append\
    \ \"0\" (list (car num))) \"0B\")\n         (+ 1 (hex_key (cdr num)))]\n     \
    \   [(string=? (string-append \"0\" (list (car num))) \"0D\")\n         (+ 1 (hex_key\
    \ (cdr num)))]\n        [else (hex_key (cdr num))]))\n</code>\nSo I'm trying to\
    \ find the amount of prime hexadecimal numbers in a list.\n<code>(define (is-prime\
    \ x)\n  (define (inner n i)\n    (if (= n i) x\n      (if (= (modulo x i) 0) 0\n\
    \      (inner n (+ i 1)))))\n  (inner x 2))\n</code>\nI'm using this function\
    \ to determine if the hexadecimal number is a prime or not, but I can't figure\
    \ out how to implement that into the hex_key function.\n\n\nA:\n\nI wouldn't use\
    \ the <code>string-append</code> with the <code>string=?</code> comparisons.\n\
    It would be better to use the <code>char=?</code> function, and you can do away\
    \ with the first <code>string=?</code> since you need to compare each character,\
    \ you don't need to build a string just to compare it.\nSo here's the same code,\
    \ with the better methods and some indentation for readability:\n<code>(define\
    \ (hex-key num)\n  (cond [(null? num) 0]\n        [(char=? (car num) #\\7)\n \
    \        (+ 1 (hex-key (cdr num)))]\n        [(char=? (car num) #\\B)\n      \
    \   (+ 1 (hex-key (cdr num)))]\n        [(char=? (car num) #\\D)\n         (+\
    \ 1 (hex-key (cdr num)))]\n        [else (hex-key (cdr num))]))\n</code>\nThis\
    \ program counts all the 7, B, and D characters in the", "  (if (string=? num\
    \ \"\")\n      0\n      (if (string-contains \"2357BDF\" (string-upcase num))\n\
    \          (+ 1 (hex_key (substring num 1)))\n          (hex_key (substring num\
    \ 1)))))\n", "    (cond ((string=? \"A\" num) #t)\n          ((string=? \"B\"\
    \ num) #t)\n          ((string=? \"C\" num) #t)\n          ((string=? \"D\" num)\
    \ #t)\n          ((string=? \"E\" num) #t)\n          ((string=? \"F\" num) #t)\n\
    \          ((string=? \"0\" num) #f)\n          ((string=? \"1\" num) #f)\n  \
    \        ((string=? \"2\" num) #t)\n          ((string=? \"3\" num) #t)\n    \
    \      ((string=? \"4\" num) #f)\n          ((string=? \"5\" num) #t)\n      \
    \    ((string=? \"6\" num) #f)\n          ((string=? \"7\" num) #t)\n        \
    \  ((string=? \"8\" num) #f)\n          ((string=? \"9\" num) #f)\n          (else\
    \ #f)))\n", "  (cond\n    [(null? num)  0]\n    [(or (equal? (first num) \"2\"\
    ) (equal? (first num) \"3\")\n         (equal? (first num) \"5\") (equal? (first\
    \ num) \"7\")\n         (equal? (first num) \"B\") (equal? (first num) \"D\"))\
    \ \n     (+ 1 (hex_key (rest num)))]\n    [else (hex_key (rest num))]))\n", " \
    \ (if (= num #\\0)\n      0\n      (if (= num #\\1)\n          1\n          (if\
    \ (= num #\\2)\n              2\n              (if (= num #\\3)\n            \
    \      3\n                  (if (= num #\\4)\n                      4\n      \
    \                (if (= num #\\5)\n                          5\n             \
    \             (if (= num #\\6)\n                              6\n            \
    \                  (if (= num #\\7)\n                                  7\n   \
    \                               (if (= num #\\8)\n                           \
    \           8\n                                      (if (= num #\\9)\n      \
    \                                    9\n                                     \
    \     (if (= num #\\A)\n                                              10\n   \
    \                                           (if (= num #\\B)\n               \
    \                                   11\n                                     \
    \             (if (= num #\\C)\n                                             \
    \         12\n                                                      (if (= num\
    \ #\\D)\n                                                          13\n      \
    \                                                    (if (= num #\\E)\n      \
    \                                                        14\n                \
    \                                              (if (= num #\\F)\n            \
    \                                                      15\n                  \
    \                                                0))))))))))))))))))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(string=? (string-upper-case (substring num 0 1))\
    \ \"A\") (+ 1 (hex_key (substring num 1)))]\n    [(string=? (string-upper-case\
    \ (substring num 0 1)) \"B\") (+ 1 (hex_key (substring num 1)))]\n    [(string=?\
    \ (string-upper-case (substring num 0 1)) \"C\") (+ 1 (hex_key (substring num\
    \ 1)))]\n    [(string=? (string-upper-case (substring num 0 1)) \"D\") (+ 1 (hex_key\
    \ (substring num 1)))]\n    [(string=? (string-upper-case (substring num 0 1))\
    \ \"E\") (+ 1 (hex_key (substring num 1)))]\n    [(string=? (string-upper-case\
    \ (substring num 0 1)) \"F\") (+ 1 (hex_key (substring num 1)))]\n    [(string=?\
    \ (string-upper-case (substring num 0 1)) \"2\") (+ 1 (hex_key (substring num\
    \ 1)))]\n    [(string=? (string-upper-case (substring num 0 1)) \"3\") (+ 1 (hex_key\
    \ (substring num 1)))]\n    [(string=? (string-upper-case (substring num 0 1))\
    \ \"5\") (+ 1 (hex_key (substring num 1)))]\n    [(string=? (string-upper-case\
    \ (substring num 0 1)) \"7\") (+ 1 (hex_key (substring num 1)))]\n    [else (hex_key\
    \ (substring num 1))]))", "  (string-map (lambda (x) (if (string-contains \"0123456789ABD\"\
    \ x) 1 0)) num))\n", "  (cond [(string=? num \"\") 0]\n        [(or (string=?\
    \ num \"0\") (string=? num \"1\")) 0]\n        [(or (string=? num \"2\") (string=?\
    \ num \"3\")\n             (string=? num \"5\") (string=? num \"7\")) 1]\n   \
    \     [(or (string=? num \"B\") (string=? num \"D\")) 1]\n        [else 0]))\n",
  "  (cond\n    [(= (modulo num 10) 2) 1]\n    [(= (modulo num 10) 3) 1]\n    [(=\
    \ (modulo num 10) 5) 1]\n    [(= (modulo num 10) 7) 1]\n    [(= (modulo num 10)\
    \ 11) 1]\n    [(= (modulo num 10) 13) 1]\n    [else 0]))\n", "  (let ((digits\
    \ (string->list num)))\n    (map (lambda (hex) (string->number (list->string hex)\
    \ 16)) digits)))\n", "  (cond\n    ((string=? num \"\") (list))\n    ((member\
    \ (string-&gt;number num 16) '(2 3 5 7 11 13)) (cons num (hex_key (substring num\
    \ 1))))\n    (else (hex_key (substring num 1)))))\n", "  (let ([keys (list #\\\
    0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\A #\\B #\\C #\\D #\\E #\\F)])\n\
    \    (list-ref keys num)))\n", "  (cond ((equal? num '2) '2)\n        ((equal?\
    \ num '3) '3)\n        ((equal? num '5) '5)\n        ((equal? num '7) '7)\n  \
    \      ((equal? num 'B) '11)\n        ((equal? num 'D) '13)\n        (else 'X)))",
  "  (cond [(equal? num \"\") 0]\n        [(member num '(1 2 3 4 5 6 7 8 9))\n   \
    \      (hex_key (string-&gt;number num))]\n        [(member num '(A B C D E F))\n\
    \         (hex_key (string-&gt;number (string-append \"#x\" num)))]\n        [else\
    \ (if (prime? num) 1 0)]))\n", "  (cond ((= num \"A\") 10)\n        ((= num \"\
    B\") 11)\n        ((= num \"C\") 12)\n        ((= num \"D\") 13)\n        ((=\
    \ num \"E\") 14)\n        ((= num \"F\") 15)\n        (else (string-&gt;number\
    \ num))))\n", "  (cond ((eq? num #\\0) 0)\n        ((eq? num #\\1) 1)\n      \
    \  ((eq? num #\\2) 2)\n        ((eq? num #\\3) 3)\n        ((eq? num #\\4) 4)\n\
    \        ((eq? num #\\5) 5)\n        ((eq? num #\\6) 6)\n        ((eq? num #\\\
    7) 7)\n        ((eq? num #\\8) 8)\n        ((eq? num #\\9) 9)\n        ((eq? num\
    \ #\\A) 10)\n        ((eq? num #\\B) 11)\n        ((eq? num #\\C) 12)\n      \
    \  ((eq? num #\\D) 13)\n        ((eq? num #\\E) 14)\n        ((eq? num #\\F) 15)))\n",
  "  (define (in-range? lower upper num)\n    (<= lower num upper))\n  (define (num-list\
    \ num)\n    (list->vector (string->list num)))\n  (define (is-prime num)\n   \
    \ (define (prime? n m)\n      (cond ((= n m) true)\n            ((zero? (modulo\
    \ n m)) false)\n            (else (prime? n (+ m 1)))))\n    (cond ((equal? num\
    \ 0) false)\n          ((equal? num 1) false)\n          ((prime? num 2))\n  \
    \        (else false)))\n  (define (char->digit ch)\n    (cond ((in-range? #\\\
    0 #\\9 ch) (digit->integer ch))\n          ((in-range? #\\A #\\F ch) (+ 10 (digit->integer\
    \ (char-downcase ch))))\n          (else 0)))\n  (define (digit-count ch)\n  \
    \  (if (is-prime (char->digit ch)) 1 0))\n  (define (each-digit num)\n    (map\
    \ digit-count (num-list num)))\n  (apply + (each-digit num)))\n", "  (cond\n \
    \   [(null? num) 0]\n    [(and (member (car num) '(#\\A #\\B #\\D #\\E))\n   \
    \       (> 1 (round (sqrt (string->number (list->string num) 16)))))\n     (+\
    \ 1 (hex_key (cdr num)))]\n    [else (hex_key (cdr num))]))\n", "  (cond [(string=?\
    \ num \"\")\n         0]\n        [(string=? num \"2\")\n         1]\n       \
    \ [(string=? num \"3\")\n         1]\n        [(string=? num \"5\")\n        \
    \ 1]\n        [(string=? num \"7\")\n         1]\n        [(string=? num \"B\"\
    )\n         1]\n        [(string=? num \"D\")\n         1]\n        [else\n  \
    \       0]))\n", "  (if (= num #\\0)\n      '()\n      (cons (if (char-upcase?\
    \ num) num\n              (char-upcase num))\n            (hex_key (char-downcase\
    \ num)))))", "  (match num\n    [\"0\" '()]\n    [\"1\" '()]\n    [\"2\" '(2)]\n\
    \    [\"3\" '(3)]\n    [\"4\" '()]\n    [\"5\" '(5)]\n    [\"6\" '()]\n    [\"\
    7\" '(7)]\n    [\"8\" '()]\n    [\"9\" '()]\n    [\"A\" '()]\n    [\"B\" '(11)]\n\
    \    [\"C\" '()]\n    [\"D\" '(13)]\n    [\"E\" '()]\n    [\"F\" '()]))\n", " \
    \ (cond\n    [(string=? num \"\") 0]\n    [(string=? num \"2\") 1]\n    [(string=?\
    \ num \"3\") 1]\n    [(string=? num \"5\") 1]\n    [(string=? num \"7\") 1]\n\
    \    [(string=? num \"b\") 1]\n    [(string=? num \"d\") 1]\n    [else 0]))\n",
  "  (cond ((char=? num #\\2) 1)\n        ((char=? num #\\3) 1)\n        ((char=?\
    \ num #\\5) 1)\n        ((char=? num #\\7) 1)\n        ((char=? num #\\B) 1)\n\
    \        ((char=? num #\\D) 1)\n        (else 0)))\n", "  (cond\n    [(equal?\
    \ num \"\") 0]\n    [(equal? num \"0\") 0]\n    [(equal? num \"1\") 0]\n    [(equal?\
    \ num \"2\") 1]\n    [(equal? num \"3\") 1]\n    [(equal? num \"4\") 0]\n    [(equal?\
    \ num \"5\") 1]\n    [(equal? num \"6\") 0]\n    [(equal? num \"7\") 1]\n    [(equal?\
    \ num \"8\") 0]\n    [(equal? num \"9\") 0]\n    [(equal? num \"A\") 0]\n    [(equal?\
    \ num \"B\") 1]\n    [(equal? num \"C\") 0]\n    [(equal? num \"D\") 1]\n    [(equal?\
    \ num \"E\") 0]\n    [(equal? num \"F\") 0]\n    [else 0]))", "  (cond [(= num\
    \ #\\0) 0]\n        [(= num #\\1) 1]\n        [(= num #\\2) 2]\n        [(= num\
    \ #\\3) 3]\n        [(= num #\\4) 4]\n        [(= num #\\5) 5]\n        [(= num\
    \ #\\6) 6]\n        [(= num #\\7) 7]\n        [(= num #\\8) 8]\n        [(= num\
    \ #\\9) 9]\n        [(= num #\\A) 10]\n        [(= num #\\B) 11]\n        [(=\
    \ num #\\C) 12]\n        [(= num #\\D) 13]\n        [(= num #\\E) 14]\n      \
    \  [(= num #\\F) 15]))", "  (cond [(string=? num \"\") 0]\n        [(string=?\
    \ num \"A\") 1]\n        [(string=? num \"B\") 1]\n        [(string=? num \"C\"\
    ) 0]\n        [(string=? num \"D\") 1]\n        [(string=? num \"E\") 0]\n   \
    \     [(string=? num \"F\") 0]\n        [(string&lt;=? num \"7\") 1]\n       \
    \ [else 0]))\n", "  (cond ((empty? num) 0)\n        ((< 0 (string-&gt;number (substring\
    \ num 0 1) 16))\n         (+ 1 (hex_key (substring num 1))))\n        (else (hex_key\
    \ (substring num 1)))))\n</code>\nI tried this code but it returned me an error.\n\
    \n\nA:\n\nIf you just remove the <code>else</code> case you should be fine. Your\
    \ algorithm is almost good, but the problem is that when you reached a non-digit\
    \ char you have to stop the recursion, and return only the value computed so far.\n\
    <code>(define (hex-key num)\n  (cond ((empty? num) 0)\n        ((&lt; 0 (string-&gt;number\
    \ (substring num 0 1) 16))\n         (+ 1 (hex-key (substring num 1))))))\n</code>\n\
    As you can see, I also corrected the indentation and the casing of the name of\
    \ the function.\nThat said, this implementation can be simplified using a <code>let/cc</code>,\
    \ like this:\n<code>(define (hex-key num)\n  (let/cc return\n    (for/fold ([acc\
    \ 0]) ([c (in-string num)])\n      (return (+ acc (if (&lt; 0 (string-&gt;number\
    \ (string c) 16)) 1 0))))))\n</code>\nThis version uses <code>for/fold</code>\
    \ to iterate over the characters in the string, and with <code>let/cc</code> as\
    \ an escape-return mechanism, it returns the accumulated value right away when\
    \ it finds a non-digit character.\n", "  (string-append \"0x\" num))\n", "  (map\
    \ (lambda (x) (string-&gt;number (string-&gt;symbol (string x) 'base #x)))\n \
    \      (string-&gt;list num)))", "  (cond\n    [(equal? num \"A\") 10]\n    [(equal?\
    \ num \"B\") 11]\n    [(equal? num \"C\") 12]\n    [(equal? num \"D\") 13]\n \
    \   [(equal? num \"E\") 14]\n    [(equal? num \"F\") 15]\n    [else (string->number\
    \ num)]))\n", "  (cond ((= (string-ref num 0) #\\0) #\\0)\n        ((= (string-ref\
    \ num 0) #\\1) #\\1)\n        ((= (string-ref num 0) #\\2) #\\2)\n        ((=\
    \ (string-ref num 0) #\\3) #\\3)\n        ((= (string-ref num 0) #\\4) #\\4)\n\
    \        ((= (string-ref num 0) #\\5) #\\5)\n        ((= (string-ref num 0) #\\\
    6) #\\6)\n        ((= (string-ref num 0) #\\7) #\\7)\n        ((= (string-ref\
    \ num 0) #\\8) #\\8)\n        ((= (string-ref num 0) #\\9) #\\9)\n        ((=\
    \ (string-ref num 0) #\\A) #\\A)\n        ((= (string-ref num 0) #\\B) #\\B)\n\
    \        ((= (string-ref num 0) #\\C) #\\C)\n        ((= (string-ref num 0) #\\\
    D) #\\D)\n        ((= (string-ref num 0) #\\E) #\\E)\n        ((= (string-ref\
    \ num 0) #\\F) #\\F)))\n", "  (string-ref num 0))\n", "  (cond\n    [(= num #\\\
    0) 0]\n    [(= num #\\1) 1]\n    [(= num #\\2) 2]\n    [(= num #\\3) 3]\n    [(=\
    \ num #\\4) 4]\n    [(= num #\\5) 5]\n    [(= num #\\6) 6]\n    [(= num #\\7)\
    \ 7]\n    [(= num #\\8) 8]\n    [(= num #\\9) 9]\n    [(= num #\\A) 10]\n    [(=\
    \ num #\\B) 11]\n    [(= num #\\C) 12]\n    [(= num #\\D) 13]\n    [(= num #\\\
    E) 14]\n    [(= num #\\F) 15]\n    [else 0]))\n", "  (list->set (list->string\n\
    \              (filter (lambda (x)\n                        (or (equal? x \"B\"\
    )\n                            (equal? x \"D\")\n                            (equal?\
    \ x \"2\")\n                            (equal? x \"3\")\n                   \
    \         (equal? x \"5\")\n                            (equal? x \"7\")))\n \
    \                     (string->list num)))))\n", "  (if (or\n       (string=?\
    \ \"A\" num)\n       (string=? \"B\" num)\n       (string=? \"C\" num)\n     \
    \  (string=? \"D\" num)\n       (string=? \"E\" num)\n       (string=? \"F\" num))\n\
    \      #t\n      #f))\n", "  (count (lambda (n) (and (nth n '(2 3 5 7 11 13))\
    \ (member (char->integer n) num))) \"2357BDEF\"))", "  (cond\n    [(equal? num\
    \ 2) #t]\n    [(equal? num 3) #t]\n    [(equal? num 5) #t]\n    [(equal? num 7)\
    \ #t]\n    [(equal? num 11) #t]\n    [(equal? num 13) #t]\n    [else #f]))\n",
  "  (if (string-empty? num) \n      0\n      (cond\n        ((equal? (substring num\
    \ 0 1) #\\0) (hex_key (substring num 1)))\n        ((equal? (substring num 0 1)\
    \ #\\1) (hex_key (substring num 1)))\n        ((equal? (substring num 0 1) #\\\
    2) (+ 1 (hex_key (substring num 1))))\n        ((equal? (substring num 0 1) #\\\
    3) (hex_key (substring num 1)))\n        ((equal? (substring num 0 1) #\\4) (hex_key\
    \ (substring num 1)))\n        ((equal? (substring num 0 1) #\\5) (+ 1 (hex_key\
    \ (substring num 1))))\n        ((equal? (substring num 0 1) #\\6) (hex_key (substring\
    \ num 1)))\n        ((equal? (substring num 0 1) #\\7) (+ 1 (hex_key (substring\
    \ num 1))))\n        ((equal? (substring num 0 1) #\\8) (hex_key (substring num\
    \ 1)))\n        ((equal? (substring num 0 1) #\\9) (hex_key (substring num 1)))\n\
    \        ((equal? (substring num 0 1) #\\A) (hex_key (substring num 1)))\n   \
    \     ((equal? (substring num 0 1) #\\B) (+ 1 (hex_key (substring num 1))))\n\
    \        ((equal? (substring num 0 1) #\\C) (hex_key (substring num 1)))\n   \
    \     ((equal? (substring num 0 1) #\\D) (+ 1 (hex_key (substring num 1))))\n\
    \        ((equal? (substring num 0 1) #\\E) (hex_key (substring num 1)))\n   \
    \     ((equal? (substring num 0 1) #\\F) (hex_key (substring num 1))))))\n", " \
    \ (cond\n    ((string=? num \"\") 0)\n    ((member (string-upper-case num) (list\
    \ \"2\" \"3\" \"5\" \"7\" \"B\" \"D\")) 1)\n    (else 0)))\n", "  (cond\n    [(=\
    \ 0 num) 1]\n    [(= 1 num) 1]\n    [(= 2 num) 1]\n    [(= 3 num) 1]\n    [(=\
    \ 4 num) 0]\n    [(= 5 num) 1]\n    [(= 6 num) 0]\n    [(= 7 num) 1]\n    [(=\
    \ 8 num) 0]\n    [(= 9 num) 0]\n    [(= 10 num) 0]\n    [(= 11 num) 1]\n    [(=\
    \ 12 num) 0]\n    [(= 13 num) 1]\n    [(= 14 num) 0]\n    [(= 15 num) 0]))\n",
  "  (cond [(string=? num \"0\") 0]\n        [(string=? num \"1\") 1]\n        [(string=?\
    \ num \"2\") 2]\n        [(string=? num \"3\") 3]\n        [(string=? num \"4\"\
    ) 4]\n        [(string=? num \"5\") 5]\n        [(string=? num \"6\") 6]\n   \
    \     [(string=? num \"7\") 7]\n        [(string=? num \"8\") 8]\n        [(string=?\
    \ num \"9\") 9]\n        [(string=? num \"A\") 10]\n        [(string=? num \"\
    B\") 11]\n        [(string=? num \"C\") 12]\n        [(string=? num \"D\") 13]\n\
    \        [(string=? num \"E\") 14]\n        [(string=? num \"F\") 15]))\n", " \
    \ (cond [(= num 'F)\n         15]\n        [(= num 'E)\n         14]\n       \
    \ [(= num 'D)\n         13]\n        [(= num 'C)\n         12]\n        [(= num\
    \ 'B)\n         11]\n        [(= num 'A)\n         10]\n        [(= num '9)\n\
    \         9]\n        [(= num '8)\n         8]\n        [(= num '7)\n        \
    \ 7]\n        [(= num '6)\n         6]\n        [(= num '5)\n         5]\n   \
    \     [(= num '4)\n         4]\n        [(= num '3)\n         3]\n        [(=\
    \ num '2)\n         2]\n        [(= num '1)\n         1]\n        [(= num '0)\n\
    \         0]))\n", "  (cond [(string=? num \"\") 0]\n        [(string=? num \"\
    A\") 1]\n        [(string=? num \"B\") 2]\n        [(string=? num \"C\") 3]\n\
    \        [(string=? num \"D\") 4]\n        [(string=? num \"E\") 5]\n        [(string=?\
    \ num \"F\") 6]\n        [else 0]))\n", "  (cond ((= num #\\0) 0)\n        ((=\
    \ num #\\1) 1)\n        ((= num #\\2) 2)\n        ((= num #\\3) 3)\n        ((=\
    \ num #\\4) 4)\n        ((= num #\\5) 5)\n        ((= num #\\6) 6)\n        ((=\
    \ num #\\7) 7)\n        ((= num #\\8) 8)\n        ((= num #\\9) 9)\n        ((=\
    \ num #\\A) 10)\n        ((= num #\\B) 11)\n        ((= num #\\C) 12)\n      \
    \  ((= num #\\D) 13)\n        ((= num #\\E) 14)\n        ((= num #\\F) 15)))\n",
  "  (cond\n    [(null? num) 0]\n    [(not (hex? (string-&gt;number (string-&gt;symbol\
    \ (string-ref num 0)) 16))) (hex_key (substring num 1))]\n    [(prime? (string-&gt;number\
    \ (string-&gt;symbol (string-ref num 0)) 16)) (+ 1 (hex_key (substring num 1)))]\n\
    \    [else (hex_key (substring num 1))]))\n", "  (cond\n    [(equal? num \"0\"\
    ) (list 0)]\n    [(equal? num \"1\") (list 1)]\n    [(equal? num \"2\") (list\
    \ 2)]\n    [(equal? num \"3\") (list 3)]\n    [(equal? num \"4\") (list 4)]\n\
    \    [(equal? num \"5\") (list 5)]\n    [(equal? num \"6\") (list 6)]\n    [(equal?\
    \ num \"7\") (list 7)]\n    [(equal? num \"8\") (list 8)]\n    [(equal? num \"\
    9\") (list 9)]\n    [(equal? num \"A\") (list 10)]\n    [(equal? num \"B\") (list\
    \ 11)]\n    [(equal? num \"C\") (list 12)]\n    [(equal? num \"D\") (list 13)]\n\
    \    [(equal? num \"E\") (list 14)]\n    [(equal? num \"F\") (list 15)]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? num) 0]\n    [(member (first num) '(2 3 5 7\
    \ 11 13)) (+ 1 (hex_key (rest num)))]\n    [else (hex_key (rest num))]))\n</code>\n\
    I wrote this code, but it didn't work. I have tried some other ways and they also\
    \ didn't work. I think the problem is that the <code>'(2 3 5 7 11 13)</code> in\
    \ the code is not a list? So, how to change it? Thank you very much.\nEDIT\n<code>#lang\
    \ racket\n", "  (hash '2 2 '3 3 '5 5 '7 7 'B 11 'D 13))\n", "  (cond [(empty?\
    \ num) 0]\n        [(char=? (car num) #\\2) (+ 1 (hex_key (cdr num)))]\n     \
    \   [(char=? (car num) #\\3) (+ 1 (hex_key (cdr num)))]\n        [(char=? (car\
    \ num) #\\5) (+ 1 (hex_key (cdr num)))]\n        [(char=? (car num) #\\7) (+ 1\
    \ (hex_key (cdr num)))]\n        [(char=? (car num) #\\B) (+ 1 (hex_key (cdr num)))]\n\
    \        [(char=? (car num) #\\D) (+ 1 (hex_key (cdr num)))]\n        [else (hex_key\
    \ (cdr num))]))\n</code>\nThe code is working however it has a base case in the\
    \ first row which is not suitable for the specific problem.\nHow can I get rid\
    \ of the <code>(empty? num)</code> base case?\n\n\nA:\n\nThe base case is necessary\
    \ because you are using <code>car</code> and <code>cdr</code> on the argument.\
    \ An empty list has no <code>car</code> and no <code>cdr</code>.\nYou can't get\
    \ rid of the base case as it stands. But you could replace the <code>car</code>\
    \ and <code>cdr</code> with <code>first</code> and <code>rest</code>, which work\
    \ on the empty list.\nYou can also get rid of the base case by not using <code>car</code>\
    \ and <code>cdr</code>. For example:\n<code>(define (hex-key num)\n  (cond ((empty?\
    \ num) 0)\n        ((char=? (first num) #\\2) (+ 1 (hex-key (rest num))))\n  \
    \      ((char=? (first num) #\\3) (+ 1 (hex-key (rest num))))\n        ((char=?\
    \ (first num) #\\5) (+ 1 (hex-key (rest num))))\n        ((char=? (first num)\
    \ #\\7) (+ 1 (hex-key (rest num))))\n        ((char=? (first num) #\\B) (+ 1 (",
  "  (case num\n    [(#\\0) 0]\n    [(#\\1) 1]\n    [(#\\2) 2]\n    [(#\\3) 3]\n \
    \   [(#\\4) 4]\n    [(#\\5) 5]\n    [(#\\6) 6]\n    [(#\\7) 7]\n    [(#\\8) 8]\n\
    \    [(#\\9) 9]\n    [(#\\A) 10]\n    [(#\\B) 11]\n    [(#\\C) 12]\n    [(#\\\
    D) 13]\n    [(#\\E) 14]\n    [(#\\F) 15]))", '  (string-ref num (modulo (string->number
    num) 16)))', "  (list->string (append (list #\\A #\\B #\\C #\\D #\\E #\\F)\n \
    \                       (map string->number (range 10)))))", "  (set! num (string-upcase\
    \ num))\n  (if (string=? num \"\")\n      0\n      (let* ([val (string->number\
    \ num 16)]\n             [hex-conv (number->string val 16)]\n             [n-digits\
    \ (string-length hex-conv)])\n        (if (and (equal? (remainder val 2) 1)\n\
    \                 (equal? (remainder val 3) 1)\n                 (equal? (remainder\
    \ val 5) 1)\n                 (equal? (remainder val 7) 1)\n                 (equal?\
    \ (remainder val 11) 1)\n                 (equal? (remainder val 13) 1))\n   \
    \         (add1 n-digits)\n            0))))", "  (cond\n    [(empty? num) (list)]\n\
    \    [(equal? (first num) \"0\") (hex_key (rest num))]\n    [(equal? (first num)\
    \ \"1\") (hex_key (rest num))]\n    [(equal? (first num) \"2\") (cons \"2\" (hex_key\
    \ (rest num)))]\n    [(equal? (first num) \"3\") (cons \"3\" (hex_key (rest num)))]\n\
    \    [(equal? (first num) \"4\") (hex_key (rest num))]\n    [(equal? (first num)\
    \ \"5\") (cons \"5\" (hex_key (rest num)))]\n    [(equal? (first num) \"6\") (hex_key\
    \ (rest num))]\n    [(equal? (first num) \"7\") (cons \"7\" (hex_key (rest num)))]\n\
    \    [(equal? (first num) \"8\") (hex_key (rest num))]\n    [(equal? (first num)\
    \ \"9\") (hex_key (rest num))]\n    [(equal? (first num) \"A\") (hex_key (rest\
    \ num))]\n    [(equal? (first num) \"B\") (cons \"B\" (hex_key (rest num)))]\n\
    \    [(equal? (first num) \"C\") (hex_key (rest num))]\n    [(equal? (first num)\
    \ \"D\") (cons \"D\" (hex_key (rest num)))]\n    [(equal? (first num) \"E\") (hex_key\
    \ (rest num))]\n    [(equal? (first num) \"F\") (hex_key (rest num))]))\n", " \
    \ (if (string-empty? num)\n      0\n      (if (or (= (char-upcase (string-ref\
    \ num 0)) #\\A)\n              (= (char-upcase (string-ref num 0)) #\\B)\n   \
    \           (= (char-upcase (string-ref num 0)) #\\D)\n              (= (char-upcase\
    \ (string-ref num 0)) #\\3)\n              (= (char-upcase (string-ref num 0))\
    \ #\\5)\n              (= (char-upcase (string-ref num 0)) #\\7))\n          (+\
    \ 1 (hex_key (substring num 1)))\n          (hex_key (substring num 1)))))", " \
    \ (let ((digits '(0 1 2 3 4 5 6 7 8 9 A B C D E F)))\n    (if (eq? (string-length\
    \ num) 1)\n        (or (member num digits) #f)\n        (and (member (string-ref\
    \ num 0) digits)\n             (hex_key (substring num 1))))))\n", "  (cond\n\
    \    [(member num '(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\"\
    )) \"not primes\"]\n    [(member num '(\"A\" \"B\" \"C\" \"D\" \"E\" \"F\")) \"\
    primes\"]\n    [else \"invalid\" ]))", "  (char->integer (string-ref num 0)))\n",
  "  (cond\n    [(string=? num \"\") 0]\n    [(and (equal? num #\\2) (equal? num #\\\
    3) (equal? num #\\5) (equal? num #\\7) (equal? num #\\B) (equal? num #\\D)) 1]\n\
    \    [else 0]))\n", "  (string-ref num 0))\n", "  (let loop ([i 0] [acc '()])\n\
    \    (if (= i (string-length num))\n        acc\n        (loop (+ i 1) (cons (list\
    \ (string-ref num i) (expt 16 (- (string-length num) i 1))) acc)))))\n", "  (cond\
    \ ((= num #\\0) 0)\n        ((= num #\\1) 1)\n        ((= num #\\2) 2)\n     \
    \   ((= num #\\3) 3)\n        ((= num #\\4) 4)\n        ((= num #\\5) 5)\n   \
    \     ((= num #\\6) 6)\n        ((= num #\\7) 7)\n        ((= num #\\8) 8)\n \
    \       ((= num #\\9) 9)\n        ((= num #\\A) 10)\n        ((= num #\\B) 11)\n\
    \        ((= num #\\C) 12)\n        ((= num #\\D) 13)\n        ((= num #\\E) 14)\n\
    \        ((= num #\\F) 15)))\n", "  (cond\n    [(eq? num #\\2) 2]\n    [(eq? num\
    \ #\\3) 3]\n    [(eq? num #\\5) 5]\n    [(eq? num #\\7) 7]\n    [(eq? num #\\\
    B) 11]\n    [(eq? num #\\D) 13]\n    [else 0]))\n", "  (cond ((equal? num #\\\
    0) 0)\n        ((equal? num #\\1) 1)\n        ((equal? num #\\2) 2)\n        ((equal?\
    \ num #\\3) 3)\n        ((equal? num #\\4) 4)\n        ((equal? num #\\5) 5)\n\
    \        ((equal? num #\\6) 6)\n        ((equal? num #\\7) 7)\n        ((equal?\
    \ num #\\8) 8)\n        ((equal? num #\\9) 9)\n        ((equal? num #\\A) 10)\n\
    \        ((equal? num #\\B) 11)\n        ((equal? num #\\C) 12)\n        ((equal?\
    \ num #\\D) 13)\n        ((equal? num #\\E) 14)\n        ((equal? num #\\F) 15)))\n",
  "  (cond\n    [(< num 10) num]\n    [(or (= num #\\A) (= num #\\a)) 10]\n    [(or\
    \ (= num #\\B) (= num #\\b)) 11]\n    [(or (= num #\\C) (= num #\\c)) 12]\n  \
    \  [(or (= num #\\D) (= num #\\d)) 13]\n    [(or (= num #\\E) (= num #\\e)) 14]\n\
    \    [(or (= num #\\F) (= num #\\f)) 15]\n    [else 'ERR]))\n", "  (cond\n   \
    \ [(= (string-length num) 1)\n     num]\n    [else\n     (cons (string-ref num\
    \ 0) (hex_key (substring num 1)))]))\n", "  (cond [(= num #\\0) 0]\n        [(=\
    \ num #\\1) 1]\n        [(= num #\\2) 2]\n        [(= num #\\3) 3]\n        [(=\
    \ num #\\4) 4]\n        [(= num #\\5) 5]\n        [(= num #\\6) 6]\n        [(=\
    \ num #\\7) 7]\n        [(= num #\\8) 8]\n        [(= num #\\9) 9]\n        [(=\
    \ num #\\A) 10]\n        [(= num #\\B) 11]\n        [(= num #\\C) 12]\n      \
    \  [(= num #\\D) 13]\n        [(= num #\\E) 14]\n        [(= num #\\F) 15]))\n",
  "  (cond [(equal? num \"\") 0]\n\t[(equal? num \"0\") 0]\n\t[(equal? num \"1\")\
    \ 0]\n\t[(equal? num \"2\") 1]\n\t[(equal? num \"3\") 1]\n\t[(equal? num \"4\"\
    ) 0]\n\t[(equal? num \"5\") 1]\n\t[(equal? num \"6\") 0]\n\t[(equal? num \"7\"\
    ) 1]\n\t[(equal? num \"8\") 0]\n\t[(equal? num \"9\") 0]\n\t[(equal? num \"A\"\
    ) 0]\n\t[(equal? num \"B\") 1]\n\t[(equal? num \"C\") 0]\n\t[(equal? num \"D\"\
    ) 1]\n\t[(equal? num \"E\") 0]\n\t[(equal? num \"F\") 0]))\n", "  (cond [(string=?\
    \ num \"\") 0]\n        [(member num '(\"2\" \"3\" \"5\" \"7\" \"B\" \"D\")) 1]\n\
    \        [else 0]))", "  (cond [(member num '(0 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15)) num]\n        [else (+ 10 (char->integer (string-ref num 0)))]))", " \
    \ (cond\n    [(equal? (string-length num) 0) 0]\n    [(member (string-ref num\
    \ 0) (list #\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9))\n     (+ (hex_key\
    \ (substring num 1)) (char-&gt;integer (string-ref num 0)))]\n    [(member (string-ref\
    \ num 0) (list #\\A #\\B #\\C #\\D #\\E #\\F))\n     (+ (hex_key (substring num\
    \ 1)) (+ 10 (char-&gt;integer (string-ref num 0))))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
