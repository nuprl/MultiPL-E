name: HumanEval_156_int_to_mini_roman
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n;; and return it in lowercase.\n;; Restrictions: 1 <= num <= 1000\n\
  ;; Examples:\n(define (int_to_mini_roman number)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate int_to_mini_roman))\n\
  \    (check-equal? (candidate 19) \"xix\")\n    (check-equal? (candidate 152) \"\
  clii\")\n    (check-equal? (candidate 251) \"ccli\")\n    (check-equal? (candidate\
  \ 426) \"cdxxvi\")\n    (check-equal? (candidate 500) \"d\")\n    (check-equal?\
  \ (candidate 1) \"i\")\n    (check-equal? (candidate 4) \"iv\")\n    (check-equal?\
  \ (candidate 43) \"xliii\")\n    (check-equal? (candidate 90) \"xc\")\n    (check-equal?\
  \ (candidate 94) \"xciv\")\n    (check-equal? (candidate 532) \"dxxxii\")\n    (check-equal?\
  \ (candidate 900) \"cm\")\n    (check-equal? (candidate 994) \"cmxciv\")\n    (check-equal?\
  \ (candidate 1000) \"m\")\n))\n\n(test-humaneval)"
completions: ["  (let ([roman-numerals-and-values\n         (list (list \"i\" 1)\n\
    \               (list \"iv\" 4)\n               (list \"v\" 5)\n             \
    \  (list \"ix\" 9)\n               (list \"x\" 10)\n               (list \"xl\"\
    \ 40)\n               (list \"l\" 50)\n               (list \"xc\" 90)\n     \
    \          (list \"c\" 100)\n               (list \"cd\" 400)\n              \
    \ (list \"d\" 500)\n               (list \"cm\" 900)\n               (list \"\
    m\" 1000))])\n    (let loop ([remaining number]\n               [accumulator empty])\n\
    \      (let ([pair (find remaining roman-numerals-and-values\n               \
    \        (lambda (x y)\n                         (< (cadr x) (cadr y))))])\n \
    \       (cond\n          [(empty? pair) accumulator]\n          [else (loop (-\
    \ remaining (cadr pair))\n                      (append accumulator (list (car\
    \ pair))))])))))\n```\n\n```racket\n#lang racket\n", "  (cond\n    [(<= number\
    \ 1000) (if (not (= 0 (modulo number 100)))\n                          (string-append\
    \ (string-append (make-string (quotient number 100) #\\c)\n                  \
    \                                     (char-downcase #\\m))\n                \
    \                         (int_to_mini_roman (modulo number 100)))\n         \
    \                 (string-append (char-downcase #\\m)\n                      \
    \                   (int_to_mini_roman (modulo number 100))))]\n    [(<= number\
    \ 100) (if (not (= 0 (modulo number 10)))\n                         (string-append\
    \ (string-append (make-string (quotient number 10) #\\x)\n                   \
    \                                   (char-downcase #\\c))\n                  \
    \                      (int_to_mini_roman (modulo number 10)))\n             \
    \            (string-append (char-downcase #\\c)\n                           \
    \             (int_to_mini_roman (modulo number 10))))]\n    [(<= number 10) (if\
    \ (not (= 0 (modulo number 1)))\n                        (string-append (string-append\
    \ (make-string (quotient number 1) #\\i)\n                                   \
    \                  (char-downcase #\\x))\n                                   \
    \    (int_to_mini_roman (modulo number 1)))\n                        (string-append\
    \ (char-downcase #\\x)\n                                       (int_to_mini_roman\
    \ (modulo number 1))))]\n    [(<= number 1) (string-append (char-downcase #\\\
    i)\n                                  (int_to_mini_roman (modulo number 1)))]))",
  "  (define (int-to-mini-roman-helper number)\n    (cond [(= number 1) \"i\"]\n \
    \         [(= number 2) \"ii\"]\n          [(= number 3) \"iii\"]\n          [(=\
    \ number 4) \"iv\"]\n          [(= number 5) \"v\"]\n          [(= number 6) \"\
    vi\"]\n          [(= number 7) \"vii\"]\n          [(= number 8) \"viii\"]\n \
    \         [(= number 9) \"ix\"]\n          [(= number 10) \"x\"]\n          [(=\
    \ number 40) \"xl\"]\n          [(= number 50) \"l\"]\n          [(= number 90)\
    \ \"xc\"]\n          [(= number 100) \"c\"]\n          [(= number 400) \"cd\"\
    ]\n          [(= number 500) \"d\"]\n          [(= number 900) \"cm\"]\n     \
    \     [(= number 1000) \"m\"]))\n  (string-downcase (int-to-mini-roman-helper\
    \ number)))\n", "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n\
    \    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"\
    ]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"\
    viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number\
    \ 50) \"l\"]\n    [(= number 100) \"c\"]\n    [(= number 500) \"d\"]\n    [(=\
    \ number 1000) \"m\"]\n    [else \"\"]))\n", "  (define romanNumeralRuleSet\n\
    \    '((10 \"x\")\n      (9 \"ix\")\n      (5 \"v\")\n      (4 \"iv\")\n     \
    \ (1 \"i\")))\n  (define (helper number)\n    (cond ((zero? number) \"\")\n  \
    \        ((<= number (cadr (first romanNumeralRuleSet)))\n           (string-append\
    \ (caddr (first romanNumeralRuleSet))\n                          (helper (- number\
    \ (cadr (first romanNumeralRuleSet))))))\n          (else (string-append (caddr\
    \ (first romanNumeralRuleSet))\n                               (helper (- number\
    \ (cadr (first romanNumeralRuleSet))))\n                               (helper\
    \ (remainder number (cadr (first romanNumeralRuleSet))))))))\n  (define (remainder\
    \ number rule-set)\n    (if (< number (cadr (first rule-set)))\n        number\n\
    \        (remainder (- number (cadr (first rule-set))) (rest rule-set))))\n  (define\
    \ (upperToLower rom)\n    (string-map (lambda (x) (if (char-upper-case? x) (char-downcase\
    \ x) x)) rom))\n  (upperToLower (helper number)))\n", "  (cond [(= number 1) \"\
    i\"]\n        [(= number 5) \"v\"]\n        [(= number 10) \"x\"]\n        [(=\
    \ number 50) \"l\"]\n        [(= number 100) \"c\"]\n        [(= number 500) \"\
    d\"]\n        [(= number 1000) \"m\"]\n        [else (error \"not a mini roman\
    \ numeral\")]))\n", "  (define (helper num)\n    (cond\n      [(< num 4) (string-append\
    \ (make-string num #\\i) \"\")]\n      [(= num 4) \"iv\"]\n      [(< num 9) (string-append\
    \ \"v\" (make-string (- num 5) #\\i))]\n      [(= num 9) \"ix\"]\n      [(< num\
    \ 40) (string-append (make-string (/ num 10) #\\x)\n                         \
    \        (helper (modulo num 10)))]\n      [(< num 50) (string-append \"xl\" (helper\
    \ (- num 40)))]\n      [(< num 90) (string-append \"l\" (helper (- num 50)))]\n\
    \      [(< num 100) (string-append \"xc\" (helper (- num 90)))]\n      [(< num\
    \ 400) (string-append (make-string (/ num 100) #\\c)\n                       \
    \           (helper (modulo num 100)))]\n      [(< num 500) (string-append \"\
    cd\" (helper (- num 400)))]\n      [(< num 900) (string-append \"d\" (helper (-\
    \ num 500)))]\n      [(< num 1000) (string-append \"cm\" (helper (- num 900)))]\n\
    \      [(= num 1000) \"m\"]))\n  (helper number))\n", "  (cond\n    [(= number\
    \ 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number\
    \ 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number\
    \ 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(=\
    \ number 10) \"x\"]\n    [(= number 1000) \"m\"]\n    [(= number 100) \"c\"]\n\
    \    [(= number 500) \"d\"]\n    [(= number 50) \"l\"]\n    [(= number 900) \"\
    cm\"]\n    [(= number 90) \"xc\"]\n    [(= number 400) \"cd\"]\n    [(= number\
    \ 40) \"xl\"]\n    [(= number 9) \"ix\"]\n    [(= number 9) \"ix\"]\n    [else\
    \ (string-append (int_to_mini_roman (/ number 10))\n                         (int_to_mini_roman\
    \ (modulo number 10)))]))\n\n", "  (cond\n    [(= number 1000) \"m\"]\n    [(=\
    \ number 900) \"cm\"]\n    [(= number 500) \"d\"]\n    [(= number 400) \"cd\"\
    ]\n    [(= number 100) \"c\"]\n    [(= number 90) \"xc\"]\n    [(= number 50)\
    \ \"l\"]\n    [(= number 40) \"xl\"]\n    [(= number 10) \"x\"]\n    [(= number\
    \ 9) \"ix\"]\n    [(= number 5) \"v\"]\n    [(= number 4) \"iv\"]\n    [(= number\
    \ 1) \"i\"]\n    [else (error 'int_to_mini_roman \"Argument not an integer in\
    \ [1, 1000]\")]))\n", "  (define (int-to-roman-helper num)\n    (cond [(= num\
    \ 1) \"I\"]\n          [(= num 2) \"II\"]\n          [(= num 3) \"III\"]\n   \
    \       [(= num 4) \"IV\"]\n          [(= num 5) \"V\"]\n          [(= num 6)\
    \ \"VI\"]\n          [(= num 7) \"VII\"]\n          [(= num 8) \"VIII\"]\n   \
    \       [(= num 9) \"IX\"]\n          [(= num 10) \"X\"]\n          [(= num 20)\
    \ \"XX\"]\n          [(= num 30) \"XXX\"]\n          [(= num 40) \"XL\"]\n   \
    \       [(= num 50) \"L\"]\n          [(= num 60) \"LX\"]\n          [(= num 70)\
    \ \"LXX\"]\n          [(= num 80) \"LXXX\"]\n          [(= num 90) \"XC\"]\n \
    \         [(= num 100) \"C\"]\n          [(= num 200) \"CC\"]\n          [(= num\
    \ 300) \"CCC\"]\n          [(= num 400) \"CD\"]\n          [(= num 500) \"D\"\
    ]\n          [(= num 600) \"DC\"]\n          [(= num 700) \"DCC\"]\n         \
    \ [(= num 800) \"DCCC\"]\n          [(= num 900) \"CM\"]\n          [(= num 1000)\
    \ \"M\"]\n          [else (int-to-roman-helper (quotient num 10))\n          \
    \      (int-to-roman-helper (remainder num 10))]))\n  (string-downcase (int-to-roman-helper\
    \ number)))\n", "  (define roman-numerals\n    '((1 \"i\") (5 \"v\") (10 \"x\"\
    ) (50 \"l\") (100 \"c\") (500 \"d\") (1000 \"m\")))\n  (define (int-to-char n)\n\
    \    (string-append\n     (number->string n)\n     (string-append\n      (assoc\
    \ (number->string n) roman-numerals \"\")\n      \"\")))\n  (cond\n    [(zero?\
    \ number) \"\"]\n    [(< number 4) (string-append (int-to-char 1) (int-to-char\
    \ number))]\n    [(and (= number 4) (< number 9))\n     (string-append (int-to-char\
    \ 1) (int-to-char 5))]\n    [(< number 9) (string-append (int-to-char 5) (int-to-char\
    \ number))]\n    [(= number 9) (string-append (int-to-char 1) (int-to-char 10))]\n\
    \    [(< number 40) (string-append (int-to-char 10) (int-to-char number))]\n \
    \   [(< number 50) (string-append (int-to-char 10) (int-to-char 50))]\n    [(<\
    \ number 90) (string-append (int-to-char 50) (int-to-char number))]\n    [(= number\
    \ 90) (string-append (int-to-char 10) (int-to-char 100))]\n    [(< number 100)\
    \ (string-append (int-to-char 100) (int-to-char number))]\n    [(< number 400)\
    \ (string-append (int-to-char 100) (int-to-char number))]\n    [(< number 500)\
    \ (string-append (int-to-char 100) (int-to-char 500))]\n    [(< number 900) (string-append\
    \ (int-to-char 500) (int-to-char number))]\n    [(= number 900) (string-append\
    \ (int-to-char 100) (int-to-char 1000))]\n    [(< number 1000) (string-append\
    \ (int-to-char 1000) (int-to-", "  (cond\n    ((= number 1) \"i\")\n    ((= number\
    \ 2) \"ii\")\n    ((= number 3) \"iii\")\n    ((= number 4) \"iv\")\n    ((= number\
    \ 5) \"v\")\n    ((= number 6) \"vi\")\n    ((= number 7) \"vii\")\n    ((= number\
    \ 8) \"viii\")\n    ((= number 9) \"ix\")\n    ((= number 10) \"x\")\n    ((=\
    \ number 11) \"xi\")\n    ((= number 12) \"xii\")\n    ((= number 13) \"xiii\"\
    )\n    ((= number 14) \"xiv\")\n    ((= number 15) \"xv\")\n    ((= number 16)\
    \ \"xvi\")\n    ((= number 17) \"xvii\")\n    ((= number 18) \"xviii\")\n    ((=\
    \ number 19) \"xix\")\n    ((= number 20) \"xx\")\n    ((= number 21) \"xxi\"\
    )\n    ((= number 22) \"xxii\")\n    ((= number 23) \"xxiii\")\n    ((= number\
    \ 24) \"xxiv\")\n    ((= number 25) \"xxv\")\n    ((= number 26) \"xxvi\")\n \
    \   ((= number 27) \"xxvii\")\n    ((= number 28) \"xxviii\")\n    ((= number\
    \ 29) \"xxix\")\n    ((= number 30) \"xxx\")\n    ((= number 31) \"xxxi\")\n \
    \   ((= number 32) \"xxxii\")\n    ((= number 33) \"xxxiii\")\n    ((= number\
    \ 34) \"xxxiv\")\n    ((= number 35) \"xxxv\")\n    ((= number 36) \"xxxvi\")\n\
    \    ((= number 37) \"xxxvii\")\n    ((= number 38) \"xxxviii\")\n    ((= number\
    \ 39) \"xxxix\")\n    ((= number 40) \"xl\")\n    ((= number 41) \"xli\")\n  \
    \  ((= number 42) \"xlii\")\n    ((= number 43) \"xliii\")\n    ((= number 44)\
    \ \"xliv\")\n    ((= number 45) \"xlv\")\n    ((= number 46) \"xlvi\")\n    ((=",
  "  (cond [(> number 1000) (error \"Number too large\")]\n        [(< number 1) (error\
    \ \"Number too small\")]\n        [else\n         (let* ([num-map '(1000 \"m\"\
    \ 500 \"d\" 100 \"c\" 50 \"l\" 10 \"x\" 5 \"v\" 1 \"i\")]\n                [convert-pairs\n\
    \                 (map (lambda (x) (if (> x 10) (cons (remainder number x) (cons\
    \ (quotient number x) (remainder x 10))) x)) num-map)]\n                [result\
    \ (map (lambda (x) (if (integer? x) (list-ref num-map (+ (* x 2) 1)) x)) convert-pairs)])\n\
    \           (string-join result)))]))\n", "  (string-join\n   (filter\n    (lambda\
    \ (str) (not (equal? str \"\")))\n    (list (integer->string (/ number 1000) \"\
    m\" (lambda (x) (< x 4)))\n          (integer->string (/ (% number 1000) 100)\
    \ \"c\" (lambda (x) (< x 4)))\n          (integer->string (/ (% number 100) 10)\
    \ \"x\" (lambda (x) (< x 4)))\n          (integer->string (% number 10) \"i\"\
    \ (lambda (x) (< x 4)))))\n   \"\"))\n", "  (cond\n    [(= number 1) \"i\"]\n\
    \    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"\
    ]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"\
    ]\n    [(= number 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10)\
    \ \"x\"]\n    [(= number 11) \"xi\"]\n    [(= number 12) \"xii\"]\n    [(= number\
    \ 13) \"xiii\"]\n    [(= number 14) \"xiv\"]\n    [(= number 15) \"xv\"]\n   \
    \ [(= number 16) \"xvi\"]\n    [(= number 17) \"xvii\"]\n    [(= number 18) \"\
    xviii\"]\n    [(= number 19) \"xix\"]\n    [(= number 20) \"xx\"]\n    [(= number\
    \ 30) \"xxx\"]\n    [(= number 40) \"xl\"]\n    [(= number 50) \"l\"]\n    [(=\
    \ number 60) \"lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number 80) \"lxxx\"\
    ]\n    [(= number 90) \"xc\"]\n    [(= number 100) \"c\"]\n    [(= number 200)\
    \ \"cc\"]\n    [(= number 300) \"ccc\"]\n    [(= number 400) \"cd\"]\n    [(=\
    \ number 500) \"d\"]\n    [(= number 600) \"dc\"]\n    [(= number 700) \"dcc\"\
    ]\n    [(= number 800) \"dccc\"]\n    [(= number 900) \"cm\"]\n    [(= number\
    \ 1000) \"m\"]\n    [(= number 2000) \"mm\"]\n    [(= number 3000) \"mmm\"]\n\
    \    [(= number 4000) \"miv\"]\n    [(= number 5000) \"mv\"]\n    [(= number 6000)\
    \ \"mvi\"]\n    [(= number 7000) \"mvii\"]\n    [(= number 8000) \"mviii\"]\n\
    \    [(= number 9000) \"mix\"]\n    [(= number 10000) \"mx\"]\n    [(= number\
    \ 20000) \"mxx\"]\n    [(= number 30000) \"", "  (cond\n    [(= number 1) \"i\"\
    ]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"\
    iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7)\
    \ \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number\
    \ 10) \"x\"]\n    [(= number 20) \"xx\"]\n    [(= number 30) \"xxx\"]\n    [(=\
    \ number 40) \"xl\"]\n    [(= number 50) \"l\"]\n    [(= number 60) \"lx\"]\n\
    \    [(= number 70) \"lxx\"]\n    [(= number 80) \"lxxx\"]\n    [(= number 90)\
    \ \"xc\"]\n    [(= number 100) \"c\"]\n    [(= number 200) \"cc\"]\n    [(= number\
    \ 300) \"ccc\"]\n    [(= number 400) \"cd\"]\n    [(= number 500) \"d\"]\n   \
    \ [(= number 600) \"dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number 800) \"\
    dccc\"]\n    [(= number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    [else \"\
    \"]))\n", "  (define ones (list \"i\" \"ii\" \"iii\" \"iv\" \"v\" \"vi\" \"vii\"\
    \ \"viii\" \"ix\"))\n  (define tens (list \"x\" \"xx\" \"xxx\" \"xl\" \"l\" \"\
    lx\" \"lxx\" \"lxxx\" \"xc\"))\n  (define hundreds (list \"c\" \"cc\" \"ccc\"\
    \ \"cd\" \"d\" \"dc\" \"dcc\" \"dccc\" \"cm\"))\n  (define thousands (list \"\
    m\" \"mm\" \"mmm\"))\n  (define (padded-str ls w)\n    (if (< w (length ls))\n\
    \        (list-ref ls (- w 1))\n        \"\"))\n  (string-append\n   (padded-str\
    \ thousands (/ number 1000))\n   (padded-str hundreds (/ (- number (* 1000 (/\
    \ number 1000))) 100))\n   (padded-str tens (/ (- number (* 100 (/ number 100)))\
    \ 10))\n   (padded-str ones (remainder number 10))))\n", "  (define (concat-all\
    \ first-string rest-of-strings)\n    (define (concat-all-iter result strings)\n\
    \      (if (null? strings)\n          result\n          (concat-all-iter (string-append\
    \ result (car strings)) (cdr strings))))\n    (concat-all-iter first-string rest-of-strings))\n\
    \  (define (num-to-roman-iter number result)\n    (cond ((= number 0) result)\n\
    \          ((>= number 1) (num-to-roman-iter (- number 1) (concat-all result '(\"\
    i\"))))\n          ((>= number 4) (num-to-roman-iter (- number 4) (concat-all\
    \ result '(\"iv\"))))\n          ((>= number 5) (num-to-roman-iter (- number 5)\
    \ (concat-all result '(\"v\"))))\n          ((>= number 9) (num-to-roman-iter\
    \ (- number 9) (concat-all result '(\"ix\"))))\n          ((>= number 10) (num-to-roman-iter\
    \ (- number 10) (concat-all result '(\"x\"))))\n          ((>= number 40) (num-to-roman-iter\
    \ (- number 40) (concat-all result '(\"xl\"))))\n          ((>= number 50) (num-to-roman-iter\
    \ (- number 50) (concat-all result '(\"l\"))))\n          ((>= number 90) (num-to-roman-iter\
    \ (- number 90) (concat-all result '(\"xc\"))))\n          ((>= number 100) (num-to-roman-iter\
    \ (- number 100) (concat-all result '(\"c\"))))\n          ((>= number 400) (num-to-roman-iter\
    \ (- number 400) (concat-all result '(\"cd\"))))\n          ((>= number 500) (num-to-roman-iter\
    \ (- number 500) (concat-all result '(\"d\"))))\n          ((>= number 900) (num-to-roman-iter\
    \ (- number 900) (concat-all result '(\"cm\"))))\n          ((>= number 1000)\
    \ (num-to-roman-iter (- number 1000) (concat-all result '(\"", "  (cond ((= number\
    \ 1000) \"m\")\n        ((>= number 900) (string-append \"cm\" (int_to_mini_roman\
    \ (- number 900))))\n        ((>= number 500) (string-append \"d\" (int_to_mini_roman\
    \ (- number 500))))\n        ((>= number 400) (string-append \"cd\" (int_to_mini_roman\
    \ (- number 400))))\n        ((>= number 100) (string-append \"c\" (int_to_mini_roman\
    \ (- number 100))))\n        ((>= number 90) (string-append \"xc\" (int_to_mini_roman\
    \ (- number 90))))\n        ((>= number 50) (string-append \"l\" (int_to_mini_roman\
    \ (- number 50))))\n        ((>= number 40) (string-append \"xl\" (int_to_mini_roman\
    \ (- number 40))))\n        ((>= number 10) (string-append \"x\" (int_to_mini_roman\
    \ (- number 10))))\n        ((>= number 9) (string-append \"ix\" (int_to_mini_roman\
    \ (- number 9))))\n        ((>= number 5) (string-append \"v\" (int_to_mini_roman\
    \ (- number 5))))\n        ((>= number 4) (string-append \"iv\" (int_to_mini_roman\
    \ (- number 4))))\n        ((>= number 1) (string-append \"i\" (int_to_mini_roman\
    \ (- number 1))))\n        (else \"\")))\n", "  (cond ((= number 1) \"i\")\n \
    \       ((= number 2) \"ii\")\n        ((= number 3) \"iii\")\n        ((= number\
    \ 4) \"iv\")\n        ((= number 5) \"v\")\n        ((= number 6) \"vi\")\n  \
    \      ((= number 7) \"vii\")\n        ((= number 8) \"viii\")\n        ((= number\
    \ 9) \"ix\")\n        ((= number 10) \"x\")\n        ((= number 11) \"xi\")\n\
    \        ((= number 12) \"xii\")\n        ((= number 13) \"xiii\")\n        ((=\
    \ number 14) \"xiv\")\n        ((= number 15) \"xv\")\n        ((= number 16)\
    \ \"xvi\")\n        ((= number 17) \"xvii\")\n        ((= number 18) \"xviii\"\
    )\n        ((= number 19) \"xix\")\n        ((= number 20) \"xx\")\n        ((=\
    \ number 21) \"xxi\")\n        ((= number 22) \"xxii\")\n        ((= number 23)\
    \ \"xxiii\")\n        ((= number 24) \"xxiv\")\n        ((= number 25) \"xxv\"\
    )\n        ((= number 26) \"xxvi\")\n        ((= number 27) \"xxvii\")\n     \
    \   ((= number 28) \"xxviii\")\n        ((= number 29) \"xxix\")\n        ((=\
    \ number 30) \"xxx\")\n        ((= number 31) \"xxxi\")\n        ((= number 32)\
    \ \"xxxii\")\n        ((= number 33) \"xxxiii\")\n        ((= number 34) \"xxxiv\"\
    )\n        ((= number 35) \"xxxv\")\n        ((= number 36) \"xxxvi\")\n     \
    \   ((= number 37) \"xxxvii\")\n        ((= number 38) \"xxxviii\")\n        ((=\
    \ number 39) \"xxxix\")\n        ((= number 40) \"xl\")\n        ((= number 41)\
    \ \"xli\")\n        ((= number 42) \"xlii\")\n        ((= number 43) \"xliii\"\
    )\n        ((= number 44) \"xliv\")\n        ((= number 45) \"xlv\")\n       \
    \ ((= number 46) \"xlvi\")\n        ((= number 47", "  (define (helper number\
    \ acc)\n    (cond\n      [(= number 1000) (cons \"m\" acc)]\n      [(>= number\
    \ 900) (helper (- number 900) (cons \"cm\" acc))]\n      [(>= number 500) (helper\
    \ (- number 500) (cons \"d\" acc))]\n      [(>= number 400) (helper (- number\
    \ 400) (cons \"cd\" acc))]\n      [(>= number 100) (helper (- number 100) (cons\
    \ \"c\" acc))]\n      [(>= number 90) (helper (- number 90) (cons \"xc\" acc))]\n\
    \      [(>= number 50) (helper (- number 50) (cons \"l\" acc))]\n      [(>= number\
    \ 40) (helper (- number 40) (cons \"xl\" acc))]\n      [(>= number 10) (helper\
    \ (- number 10) (cons \"x\" acc))]\n      [(>= number 9) (helper (- number 9)\
    \ (cons \"ix\" acc))]\n      [(>= number 5) (helper (- number 5) (cons \"v\" acc))]\n\
    \      [(>= number 4) (helper (- number 4) (cons \"iv\" acc))]\n      [(>= number\
    \ 1) (helper (- number 1) (cons \"i\" acc))]\n      [else (list->string (reverse\
    \ acc))]))\n  (helper number '()))\n", "  (cond [(= number 1)\n         \"i\"\
    ]\n        [(= number 2)\n         \"ii\"]\n        [(= number 3)\n         \"\
    iii\"]\n        [(= number 4)\n         \"iv\"]\n        [(= number 5)\n     \
    \    \"v\"]\n        [(= number 6)\n         \"vi\"]\n        [(= number 7)\n\
    \         \"vii\"]\n        [(= number 8)\n         \"viii\"]\n        [(= number\
    \ 9)\n         \"ix\"]\n        [(= number 10)\n         \"x\"]\n        [(= number\
    \ 11)\n         \"xi\"]\n        [(= number 12)\n         \"xii\"]\n        [(=\
    \ number 13)\n         \"xiii\"]\n        [(= number 14)\n         \"xiv\"]\n\
    \        [(= number 15)\n         \"xv\"]\n        [(= number 16)\n         \"\
    xvi\"]\n        [(= number 17)\n         \"xvii\"]\n        [(= number 18)\n \
    \        \"xviii\"]\n        [(= number 19)\n         \"xix\"]\n        [(= number\
    \ 20)\n         \"xx\"]\n        [(= number 21)\n         \"xxi\"]\n        [(=\
    \ number 22)\n         \"xxii\"]\n        [(= number 23)\n         \"xxiii\"]\n\
    \        [(= number 24)\n         \"xxiv\"]\n        [(= number 25)\n        \
    \ \"xxv\"]\n        [(= number 26)\n         \"xxvi\"]\n        [(= number 27)\n\
    \         \"xxvii\"]\n        [(= number 28)\n         \"xxviii\"]\n        [(=\
    \ number 29)\n         \"xxix\"]\n        [(= number 30)\n         \"xxx\"]\n\
    \        [(= number 31)\n         \"xxxi\"]\n        [(= number 32)\n        \
    \ \"xxxii\"]\n        [(= number 33)\n         \"xxxiii\"]\n        [(= number\
    \ 34)\n         \"xxxiv\"]\n        [(= number 35)\n         \"xxxv\"]\n     \
    \   [(= number 36)\n         \"xxxvi\"]\n        [(= number 37)\n         \"xxxvii\"\
    ]\n        [(= number 38)\n         \"xxxviii\"]\n        [(= number 39)\n   \
    \      \"xxxix\"]\n        [(= number 40)\n", "    ;;;\n    ;;; TODO: implement\
    \ this\n    ;;;\n  (define (digit-to-digit-list number)\n    (define (helper number\
    \ result)\n      (cond\n       [(= number 0) (reverse result)]\n       [else (helper\
    \ (- number 1) (cons 'I result))]))\n    (helper number '()))\n  (define (convert-digit-list-to-roman\
    \ result r)\n    (cond\n     [(null? r) result]\n     [(equal? (car r) 'I) (convert-digit-list-to-roman\
    \ result (cdr r))]\n     [(equal? (car r) 'V) (convert-digit-list-to-roman (string-append\
    \ result \"v\") (cdr r))]\n     [(equal? (car r) 'X) (convert-digit-list-to-roman\
    \ (string-append result \"x\") (cdr r))]\n     [(equal? (car r) 'L) (convert-digit-list-to-roman\
    \ (string-append result \"l\") (cdr r))]\n     [(equal? (car r) 'C) (convert-digit-list-to-roman\
    \ (string-append result \"c\") (cdr r))]\n     [(equal? (car r) 'D) (convert-digit-list-to-roman\
    \ (string-append result \"d\") (cdr r))]\n     [(equal? (car r) 'M) (convert-digit-list-to-roman\
    \ (string-append result \"m\") (cdr r))]))\n  (define (roman-list-to-roman result)\n\
    \    (cond\n     [(null? result) \"\"]\n     [(equal? (car result) 'I) (roman-list-to-roman\
    \ (cdr result))]\n     [(equal? (car result) 'V) (string-append \"v\" (roman-list-to-roman\
    \ (cdr result)))]\n     [(equal? (car result) 'X) (string-append \"x\" (roman-list-to-roman\
    \ (cdr result)))]\n     [(equal? (car result) 'L) (string-append \"l\" (roman-list-to",
  "  (cond [(= number 1) \"i\"]\n        [(= number 2) \"ii\"]\n        [(= number\
    \ 3) \"iii\"]\n        [(= number 4) \"iv\"]\n        [(= number 5) \"v\"]\n \
    \       [(= number 6) \"vi\"]\n        [(= number 7) \"vii\"]\n        [(= number\
    \ 8) \"viii\"]\n        [(= number 9) \"ix\"]\n        [(= number 10) \"x\"]\n\
    \        [(= number 11) \"xi\"]\n        [(= number 12) \"xii\"]\n        [(=\
    \ number 13) \"xiii\"]\n        [(= number 14) \"xiv\"]\n        [(= number 15)\
    \ \"xv\"]\n        [(= number 16) \"xvi\"]\n        [(= number 17) \"xvii\"]\n\
    \        [(= number 18) \"xviii\"]\n        [(= number 19) \"xix\"]\n        [(=\
    \ number 20) \"xx\"]\n        [(= number 21) \"xxi\"]\n        [(= number 22)\
    \ \"xxii\"]\n        [(= number 23) \"xxiii\"]\n        [(= number 24) \"xxiv\"\
    ]\n        [(= number 25) \"xxv\"]\n        [(= number 26) \"xxvi\"]\n       \
    \ [(= number 27) \"xxvii\"]\n        [(= number 28) \"xxviii\"]\n        [(= number\
    \ 29) \"xxix\"]\n        [(= number 30) \"xxx\"]\n        [(= number 31) \"xxxi\"\
    ]\n        [(= number 32) \"xxxii\"]\n        [(= number 33) \"xxxiii\"]\n   \
    \     [(= number 34) \"xxxiv\"]\n        [(= number 35) \"xxxv\"]\n        [(=\
    \ number 36) \"xxxvi\"]\n        [(= number 37) \"xxxvii\"]\n        [(= number\
    \ 38) \"xxxviii\"]\n        [(= number 39) \"xxxix\"]\n        [(= number 40)\
    \ \"xl\"]\n        [(= number 41) \"xli\"]\n        [(= number 42) \"xlii\"]\n\
    \        [(= number 43) \"xliii\"]\n        [(= number 44) \"xliv\"]\n       \
    \ [(= number 45) \"xlv\"]\n        [(= number 46) \"xlvi\"]\n        [(= number\
    \ 47", "    (define (numToRoman x)\n      (if (< x 5)\n          (if (equal? x\
    \ 1) \"i\" \"ii\")\n          (if (equal? x 5) \"v\" \"iii\")))\n    (if (equal?\
    \ 1 number)\n        \"i\"\n        (string-downcase (numToRoman number))))\n",
  "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3)\
    \ \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number\
    \ 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(=\
    \ number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 11) \"xi\"]\n \
    \   [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n    [(= number 14)\
    \ \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number\
    \ 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n\
    \    [(= number 20) \"xx\"]\n    [(= number 30) \"xxx\"]\n    [(= number 40) \"\
    xl\"]\n    [(= number 50) \"l\"]\n    [(= number 60) \"lx\"]\n    [(= number 70)\
    \ \"lxx\"]\n    [(= number 80) \"lxxx\"]\n    [(= number 90) \"xc\"]\n    [(=\
    \ number 100) \"c\"]\n    [(= number 200) \"cc\"]\n    [(= number 300) \"ccc\"\
    ]\n    [(= number 400) \"cd\"]\n    [(= number 500) \"d\"]\n    [(= number 600)\
    \ \"dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number 800) \"dccc\"]\n    [(=\
    \ number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    [else \"\"]))\n\n", " \
    \ (let ([romans [#\\i #\\v #\\x #\\l #\\c #\\d #\\m]])\n    (define (val-to-roman\
    \ i v)\n      (cond\n        [(= i 0) #f]\n        [(= v 1) '#\\i]\n        [(=\
    \ v 2) '#\\i '#\\i]\n        [(= v 3) '#\\i '#\\i '#\\i]\n        [(= v 4) '#\\\
    i '#\\v]\n        [(= v 5) '#\\v]\n        [(= v 6) '#\\v '#\\i]\n        [(=\
    \ v 7) '#\\v '#\\i '#\\i]\n        [(= v 8) '#\\v '#\\i '#\\i '#\\i]\n       \
    \ [(= v 9) '#\\i '#\\x]\n        [else (val-to-roman i (- v 10)) '#\\x]))\n  \
    \  (let loop ([value number] [i 3])\n      (if (= i -1)\n          (values '()\
    \ '() value)\n          (let-values ([(letters rest value) (loop (quotient value\
    \ 10) (- i 1))])\n            (values (val-to-roman i (remainder value 10)) letters\
    \ rest))))))\n", "  (let ([ones (remainder number 10)]\n        [tens (remainder\
    \ (quotient number 10) 10)]\n        [hundreds (remainder (quotient number 100)\
    \ 10)]\n        [thousands (remainder (quotient number 1000) 10)])\n    (string-append\n\
    \     (if (positive? thousands)\n         (string-append (make-string thousands\
    \ #\\m) \"m\")\n         \"\")\n     (if (positive? hundreds)\n         (string-append\
    \ (make-string hundreds #\\c) \"c\")\n         \"\")\n     (if (positive? tens)\n\
    \         (string-append (make-string tens #\\x) \"x\")\n         \"\")\n    \
    \ (if (positive? ones)\n         (string-append (make-string ones #\\i) \"i\"\
    )\n         \"\"))))\n", "  (define (itmr-out-table number (table '((1000 \"m\"\
    ) (900 \"cm\") (500 \"d\") (400 \"cd\") (100 \"c\") (90 \"xc\") (50 \"l\") (40\
    \ \"xl\") (10 \"x\") (9 \"ix\") (5 \"v\") (4 \"iv\") (1 \"i\"))))\n    (cond ((=\
    \ number 0) \"\")\n          ((< number (car (car table))) (itmr-out-table number\
    \ (cdr table)))\n          (else (string-append (cadr (car table)) (itmr-out-table\
    \ (- number (car (car table))) table)))))\n  (itmr-out-table number '()))", " \
    \ (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3)\
    \ \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number\
    \ 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(=\
    \ number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 11) \"xi\"]\n \
    \   [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n    [(= number 14)\
    \ \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number\
    \ 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n\
    \    [(= number 20) \"xx\"]\n    [(= number 21) \"xxi\"]\n    [(= number 22) \"\
    xxii\"]\n    [(= number 23) \"xxiii\"]\n    [(= number 24) \"xxiv\"]\n    [(=\
    \ number 25) \"xxv\"]\n    [(= number 26) \"xxvi\"]\n    [(= number 27) \"xxvii\"\
    ]\n    [(= number 28) \"xxviii\"]\n    [(= number 29) \"xxix\"]\n    [(= number\
    \ 30) \"xxx\"]\n    [(= number 31) \"xxxi\"]\n    [(= number 32) \"xxxii\"]\n\
    \    [(= number 33) \"xxxiii\"]\n    [(= number 34) \"xxxiv\"]\n    [(= number\
    \ 35) \"xxxv\"]\n    [(= number 36) \"xxxvi\"]\n    [(= number 37) \"xxxvii\"\
    ]\n    [(= number 38) \"xxxviii\"]\n    [(= number 39) \"xxxix\"]\n    [(= number\
    \ 40) \"xl\"]\n    [(= number 41) \"xli\"]\n    [(= number 42) \"xlii\"]\n   \
    \ [(= number 43) \"xliii\"]\n    [(= number 44) \"xliv\"]\n    [(= number 45)\
    \ \"xlv\"]\n    [(= number 46) \"xlvi\"]\n    [(=", "  (define (make-hundreds\
    \ hundreds)\n    (cond\n      [(= hundreds 0) \"\"]\n      [(= hundreds 1) \"\
    c\"]\n      [(= hundreds 2) \"cc\"]\n      [(= hundreds 3) \"ccc\"]\n      [(=\
    \ hundreds 4) \"cd\"]\n      [(= hundreds 5) \"d\"]\n      [(= hundreds 6) \"\
    dc\"]\n      [(= hundreds 7) \"dcc\"]\n      [(= hundreds 8) \"dccc\"]\n     \
    \ [(= hundreds 9) \"cm\"]))\n  (define (make-tens tens)\n    (cond\n      [(=\
    \ tens 0) \"\"]\n      [(= tens 1) \"x\"]\n      [(= tens 2) \"xx\"]\n      [(=\
    \ tens 3) \"xxx\"]\n      [(= tens 4) \"xl\"]\n      [(= tens 5) \"l\"]\n    \
    \  [(= tens 6) \"lx\"]\n      [(= tens 7) \"lxx\"]\n      [(= tens 8) \"lxxx\"\
    ]\n      [(= tens 9) \"xc\"]))\n  (define (make-ones ones)\n    (cond\n      [(=\
    \ ones 0) \"\"]\n      [(= ones 1) \"i\"]\n      [(= ones 2) \"ii\"]\n      [(=\
    \ ones 3) \"iii\"]\n      [(= ones 4) \"iv\"]\n      [(= ones 5) \"v\"]\n    \
    \  [(= ones 6) \"vi\"]\n      [(= ones 7) \"vii\"]\n      [(= ones 8) \"viii\"\
    ]\n      [(= ones 9) \"ix\"]))\n  (string-join (list (make-hundreds (quotient\
    \ number 100))\n                     (make-tens (quotient (remainder number 100)\
    \ 10))\n                     (make-ones (remainder number 10))) \"\"))", "  (cond\n\
    \    ((or (= number 1000) (= number 900)) \"m\")\n    ((or (= number 500) (= number\
    \ 400)) \"d\")\n    ((or (= number 100) (= number 90)) \"c\")\n    ((or (= number\
    \ 50) (= number 40)) \"l\")\n    ((or (= number 10) (= number 9)) \"x\")\n   \
    \ ((or (= number 5) (= number 4)) \"v\")\n    ((or (= number 1) (= number 2) (=\
    \ number 3)) \"i\")))\n", "  (define ones-map (make-hash))\n  (hash-set! ones-map\
    \ 1 \"i\")\n  (hash-set! ones-map 2 \"ii\")\n  (hash-set! ones-map 3 \"iii\")\n\
    \  (hash-set! ones-map 4 \"iv\")\n  (hash-set! ones-map 5 \"v\")\n  (hash-set!\
    \ ones-map 6 \"vi\")\n  (hash-set! ones-map 7 \"vii\")\n  (hash-set! ones-map\
    \ 8 \"viii\")\n  (hash-set! ones-map 9 \"ix\")\n  (hash-set! ones-map 0 \"\")\n\
    \n  (define tens-map (make-hash))\n  (hash-set! tens-map 1 \"x\")\n  (hash-set!\
    \ tens-map 2 \"xx\")\n  (hash-set! tens-map 3 \"xxx\")\n  (hash-set! tens-map\
    \ 4 \"xl\")\n  (hash-set! tens-map 5 \"l\")\n  (hash-set! tens-map 6 \"lx\")\n\
    \  (hash-set! tens-map 7 \"lxx\")\n  (hash-set! tens-map 8 \"lxxx\")\n  (hash-set!\
    \ tens-map 9 \"xc\")\n  (hash-set! tens-map 0 \"\")\n\n  (define hundreds-map\
    \ (make-hash))\n  (hash-set! hundreds-map 1 \"c\")\n  (hash-set! hundreds-map\
    \ 2 \"cc\")\n  (hash-set! hundreds-map 3 \"ccc\")\n  (hash-set! hundreds-map 4\
    \ \"cd\")\n  (hash-set! hundreds-map 5 \"d\")\n  (hash-set! hundreds-map 6 \"\
    dc\")\n  (hash-set! hundreds-map 7 \"dcc\")\n  (hash-set! hundreds-map 8 \"dccc\"\
    )\n  (hash-set! hundreds-map 9 \"cm\")\n  (hash-set! hundreds-map 0 \"\")\n\n\
    \  (define thousands-map (make-hash))\n  (hash-set! thousands-map 1 \"m\")\n \
    \ (hash-set! thousands-map 2 \"mm\")\n  (hash-set! thousands-", "  (let* ([roman-numerals\
    \ '((1 \"i\") (5 \"v\") (10 \"x\") (50 \"l\") (100 \"c\") (500 \"d\") (1000 \"\
    m\"))]\n         [len (length roman-numerals)]\n         [roman (string-append)]\n\
    \         [i 0])\n    (when (and (>= number 1) (<= number 1000))\n      (while\
    \ (and (< i len) (<= (list-ref roman-numerals i) number))\n        (set! i (+\
    \ i 1)))\n      (set! i (- i 1))\n      (while (> number 0)\n        (set! roman\
    \ (string-append roman (integer->roman-digit (- (list-ref roman-numerals i) number)\
    \ (list-ref roman-numerals i))))\n        (set! number (- number (list-ref roman-numerals\
    \ i)))\n        (set! i (- i 1)))\n      (string-downcase roman))))\n", "  (cond\n\
    \    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"\
    ]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"\
    ]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9)\
    \ \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 20) \"xx\"]\n    [(= number\
    \ 30) \"xxx\"]\n    [(= number 40) \"xl\"]\n    [(= number 50) \"l\"]\n    [(=\
    \ number 60) \"lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number 80) \"lxxx\"\
    ]\n    [(= number 90) \"xc\"]\n    [(= number 100) \"c\"]\n    [(= number 200)\
    \ \"cc\"]\n    [(= number 300) \"ccc\"]\n    [(= number 400) \"cd\"]\n    [(=\
    \ number 500) \"d\"]\n    [(= number 600) \"dc\"]\n    [(= number 700) \"dcc\"\
    ]\n    [(= number 800) \"dccc\"]\n    [(= number 900) \"cm\"]\n    [(= number\
    \ 1000) \"m\"]\n    ))\n```\n\n```racket\n#lang racket\n", "  (cond ((= number\
    \ 1000) \"m\")\n        ((= number 500) \"d\")\n        ((= number 100) \"c\"\
    )\n        ((= number 50) \"l\")\n        ((= number 10) \"x\")\n        ((= number\
    \ 5) \"v\")\n        ((= number 1) \"i\")\n        (else (raise (error \"illegal\
    \ number\")))))\n", "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"\
    ]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"\
    v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number 8)\
    \ \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number\
    \ 11) \"xi\"]\n    [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n   \
    \ [(= number 14) \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"\
    ]\n    [(= number 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number\
    \ 19) \"xix\"]\n    [(= number 20) \"xx\"]\n    [(= number 21) \"xxi\"]\n    [(=\
    \ number 22) \"xxii\"]\n    [(= number 23) \"xxiii\"]\n    [(= number 24) \"xxiv\"\
    ]\n    [(= number 25) \"xxv\"]\n    [(= number 26) \"xxvi\"]\n    [(= number 27)\
    \ \"xxvii\"]\n    [(= number 28) \"xxviii\"]\n    [(= number 29) \"xxix\"]\n \
    \   [(= number 30) \"xxx\"]\n    [(= number 31) \"xxxi\"]\n    [(= number 32)\
    \ \"xxxii\"]\n    [(= number 33) \"xxxiii\"]\n    [(= number 34) \"xxxiv\"]\n\
    \    [(= number 35) \"xxxv\"]\n    [(= number 36) \"xxxvi\"]\n    [(= number 37)\
    \ \"xxxvii\"]\n    [(= number 38) \"xxxviii\"]\n    [(= number 39) \"xxxix\"]\n\
    \    [(= number 40) \"xl\"]\n    [(= number 41) \"xli\"]\n    [(= number 42) \"\
    xlii\"]\n    [(= number 43) \"xliii\"]\n    [(= number 44) \"xliv\"]\n    [(=\
    \ number 45) \"xlv\"]\n    [(= number 46) \"xlvi\"]\n    [(=", "  (define arr\
    \ (integer->list number 10))\n  (define (mini n x)\n    (cond\n      [(= x 0)\
    \ \"\"]\n      [(= x 1) \"i\"]\n      [(= x 2) \"ii\"]\n      [(= x 3) \"iii\"\
    ]\n      [(= x 4) \"iv\"]\n      [(= x 5) \"v\"]\n      [(= x 6) \"vi\"]\n   \
    \   [(= x 7) \"vii\"]\n      [(= x 8) \"viii\"]\n      [(= x 9) \"ix\"]))\n  (cond\n\
    \    [(= (length arr) 1) (mini 1 (car arr))]\n    [(= (length arr) 2) (string-append\
    \ (mini 10 (car arr)) (mini 1 (cadr arr)))]\n    [(= (length arr) 3) (string-append\
    \ (mini 100 (car arr)) (mini 10 (cadr arr)) (mini 1 (caddr arr)))]\n    [(= (length\
    \ arr) 4) (string-append (mini 1000 (car arr)) (mini 100 (cadr arr)) (mini 10\
    \ (caddr arr)) (mini 1 (cadddr arr)))]))\n", "  (cond\n    [(< number 1) (error\
    \ \"Min value for number is 1\")]\n    [(> number 1000) (error \"Max value for\
    \ number is 1000\")]\n    [else\n     (let ([rem (modulo number 1000)])\n    \
    \   (cond\n         [(= number 1000) \"m\"]\n         [(= number 500) \"d\"]\n\
    \         [(= number 100) \"c\"]\n         [(= number 50) \"l\"]\n         [(=\
    \ number 10) \"x\"]\n         [(= number 5) \"v\"]\n         [(= number 1) \"\
    i\"]\n         [else\n          (let ([roman-string (cond\n                  \
    \             [(>= rem 900) \"cm\"]\n                               [(>= rem 400)\
    \ \"cd\"]\n                               [(>= rem 90) \"xc\"]\n             \
    \                  [(>= rem 40) \"xl\"]\n                               [(>= rem\
    \ 9) \"ix\"]\n                               [(>= rem 4) \"iv\"]\n           \
    \                    [else\n                                (let loop ([n rem]\
    \ [roman \"\"])\n                                  (cond\n                   \
    \                 [(= n 0) roman]\n                                    [(= n 1)\
    \ (string-append roman \"i\")]\n                                    [(= n 2) (string-append\
    \ roman \"ii\")]\n                                    [(= n 3) (string-append\
    \ roman \"iii\")]\n                                    [else (loop (- n 1) (string-append\
    \ roman \"i\"))]))\n                                ])]))\n            (string-append\
    \ (int_to_mini_roman (/ number 1000)) roman-string))\n          ]\n         ])\n\
    \       )]\n    ))\n", "  (let ([n (integer->char-string number)])\n    (string-append\n\
    \     (cond [(or (<= number 0) (> number 1000)) \"Invalid number.\"]\n       \
    \    [(= number 1000) \"m\"]\n           [(>= number 900) (string-append \"c\"\
    \ (int_to_mini_roman (- number 900)))]\n           [(>= number 500) (string-append\
    \ \"d\" (int_to_mini_roman (- number 500)))]\n           [(>= number 400) (string-append\
    \ \"c\" (int_to_mini_roman (- number 400)))]\n           [(>= number 100) (string-append\
    \ \"c\" (int_to_mini_roman (- number 100)))]\n           [(>= number 90) (string-append\
    \ \"x\" (int_to_mini_roman (- number 90)))]\n           [(>= number 50) (string-append\
    \ \"l\" (int_to_mini_roman (- number 50)))]\n           [(>= number 40) (string-append\
    \ \"x\" (int_to_mini_roman (- number 40)))]\n           [(>= number 10) (string-append\
    \ \"x\" (int_to_mini_roman (- number 10)))]\n           [(>= number 9) (string-append\
    \ \"i\" (int_to_mini_roman (- number 9)))]\n           [(>= number 5) (string-append\
    \ \"v\" (int_to_mini_roman (- number 5)))]\n           [(>= number 4) (string-append\
    \ \"i\" (int_to_mini_roman (- number 4)))]\n           [(>= number 1) (string-append\
    \ \"i\" (int_to_mini_roman (- number 1)))])\n     (if (positive? number) \"\"\
    \ \"Invalid number.\"))))\n```\n\n```racket\n#lang racket\n", "  (let* ([hundreds\
    \ (modulo number 100)]\n         [thousands (quotient number 100)])\n    (cond\n\
    \      [(= hundreds 10) (number->string (+ (/ hundreds 10) 4))]\n      [(> hundreds\
    \ 10) (format \"~a~a\" (int_to_mini_roman (/ hundreds 10)) (number->string (%\
    \ hundreds 10)))]\n      [(= thousands 1) (format \"c~a\" (int_to_mini_roman (-\
    \ (/ hundreds 10) 5)))]\n      [(= thousands 2) (format \"cc~a\" (int_to_mini_roman\
    \ (- (/ hundreds 10) 5)))]\n      [(= thousands 3) (format \"ccc~a\" (int_to_mini_roman\
    \ (- (/ hundreds 10) 5)))]\n      [(= thousands 4) (format \"cd~a\" (int_to_mini_roman\
    \ (- (/ hundreds 10) 5)))]\n      [(= thousands 5) (format \"d~a\" (int_to_mini_roman\
    \ (- (/ hundreds 10) 5)))]\n      [(= thousands 6) (format \"dc~a\" (int_to_mini_roman\
    \ (- (/ hundreds 10) 5)))]\n      [(= thousands 7) (format \"dcc~a\" (int_to_mini_roman\
    \ (- (/ hundreds 10) 5)))]\n      [(= thousands 8) (format \"dccc~a\" (int_to_mini_roman\
    \ (- (/ hundreds 10) 5)))]\n      [(= thousands 9) (format \"cm~a\" (int_to_mini_roman\
    \ (- (/ hundreds 10) 5)))]\n      [(= hundreds 9) (format \"~a~a\" (number->string\
    \ (+ (/ hundreds 10) 4)) (number->string (% hundreds 10)))]\n      [(= hundreds\
    \ 8) (format \"~a~a\" (number->string (+ (/ hundreds 10) 3)) (number->string (%\
    \ hundreds 10)))]\n      [(= hundreds 7) (format \"~a~a\" (number->string (+ (/\
    \ hundreds 10) 2)) (number->string (% hundreds 10)))]\n      [(= hundreds 6) (format\
    \ \"~a~a\" (number->string (+ (/ hundreds 10) 1)) (number->string (% hundreds\
    \ 10)))]\n      [(= hundreds 5) (format \"~a", "  (define all-pairs\n    '((1000\
    \ . \"m\")\n      (900 . \"cm\")\n      (500 . \"d\")\n      (400 . \"cd\")\n\
    \      (100 . \"c\")\n      (90 . \"xc\")\n      (50 . \"l\")\n      (40 . \"\
    xl\")\n      (10 . \"x\")\n      (9 . \"ix\")\n      (5 . \"v\")\n      (4 . \"\
    iv\")\n      (1 . \"i\")))\n  (define (run-through-pairs number result)\n    (cond\
    \ ((null? all-pairs) result)\n          ((< number (caar all-pairs)) (run-through-pairs\
    \ number result))\n          (else (run-through-pairs (- number (caar all-pairs))\n\
    \                                   (string-append result (cdar all-pairs))))))\n\
    \  (string-downcase (run-through-pairs number \"\")))\n", "  (cond [(> number\
    \ 1000) \"ERROR\"]\n        [(= number 1000) \"m\"]\n        [(= number 999) \"\
    im\"]\n        [(= number 998) \"imv\"]\n        [(= number 997) \"imvi\"]\n \
    \       [(= number 996) \"imvii\"]\n        [(= number 995) \"imviii\"]\n    \
    \    [(= number 994) \"imix\"]\n        [(= number 993) \"imx\"]\n        [(=\
    \ number 992) \"imxl\"]\n        [(= number 991) \"imxli\"]\n        [(= number\
    \ 990) \"imxlii\"]\n        [(= number 989) \"imxliii\"]\n        [(= number 988)\
    \ \"imlxviii\"]\n        [(= number 987) \"imlxix\"]\n        [(= number 986)\
    \ \"imlxx\"]\n        [(= number 985) \"imlxxi\"]\n        [(= number 984) \"\
    imlxxii\"]\n        [(= number 983) \"imlxxiii\"]\n        [(= number 982) \"\
    imlxxiv\"]\n        [(= number 981) \"imlxxv\"]\n        [(= number 980) \"imlxxvi\"\
    ]\n        [(= number 979) \"imlxxvii\"]\n        [(= number 978) \"imlxxviii\"\
    ]\n        [(= number 977) \"imlxxix\"]\n        [(= number 976) \"imlxxx\"]\n\
    \        [(= number 975) \"imlxxxi\"]\n        [(= number 974) \"imlxxxii\"]\n\
    \        [(= number 973) \"imlxxxiii\"]\n        [(= number 972) \"imlxxxiv\"\
    ]\n        [(= number 971) \"imlxxxv\"]\n        [(= number 970) \"imlxxxvi\"\
    ]\n        [(= number 969) \"imlxxxvii\"]\n        [(= number 968) \"imlxxxviii\"\
    ]\n        [(= number 967) \"imlxxxix\"]\n        [(= number 966) \"imxc\"]\n\
    \        [(= number 965) \"imxci\"]\n        [(= number 964) \"imxcii\"]\n   \
    \     [(= number", "  (cond ((<= 1 number)\n         (cond ((= number 1000)\n\
    \                \"m\")\n               ((= number 500)\n                \"d\"\
    )\n               ((= number 100)\n                \"c\")\n               ((=\
    \ number 50)\n                \"l\")\n               ((= number 10)\n        \
    \        \"x\")\n               ((= number 5)\n                \"v\")\n      \
    \         ((= number 1)\n                \"i\")))\n        (else (error \"Value\
    \ out of range\"))))\n", "  (let*\n      ([thousands (modulo number 1000)]\n \
    \      [hundreds (modulo (quotient number 1000) 100)]\n       [tens (modulo (quotient\
    \ number 100) 10)]\n       [ones (modulo (quotient number 10) 1)])\n    (string-append\n\
    \     (if (zero? thousands)\n         \"\"\n         (if (= thousands 4)\n   \
    \          \"cd\"\n             (if (= thousands 9)\n                 \"cm\"\n\
    \                 (let*\n                     ([thousands (quotient thousands\
    \ 1)])\n                   (if (zero? thousands)\n                       \"\"\n\
    \                       (string-append\n                        (if (= thousands\
    \ 1)\n                            \"c\"\n                            (if (= thousands\
    \ 2)\n                                \"cc\"\n                               \
    \ (if (= thousands 3)\n                                    \"ccc\"\n         \
    \                           (error \"thousands too big\"))))\n               \
    \         \"\"))))))\n     (if (zero? hundreds)\n         \"\"\n         (if (=\
    \ hundreds 4)\n             \"xl\"\n             (if (= hundreds 9)\n        \
    \         \"xc\"\n                 (let*\n                     ([hundreds (quotient\
    \ hundreds 1)])\n                   (if (zero? hundreds)\n                   \
    \    \"\"\n                       (string-append\n                        (if\
    \ (= hundreds 1)\n                            \"x\"\n                        \
    \    (if (= hundreds 2)\n                                \"xx\"\n            \
    \                    (if (= hundreds 3)\n                                    \"\
    xxx\"\n                                    (error \"hundreds too big\"))))\n \
    \                       \"\"))))))\n     (if (zero? tens)\n         \"\"\n   \
    \      (if (= tens 4)\n             \"iv\"\n             (if (= tens 9)\n    \
    \             \"ix\"\n                 (let*\n                     ([tens (quotient\
    \ tens 1)])\n                   (if (zero? tens)\n                       \"\"\n\
    \                       (string-append\n                        (if (= tens 1)\n\
    \                            \"i\"\n                            (if (= tens 2)\n\
    \                                \"ii\"\n                                (if (=\
    \ tens 3)\n                                    \"iii\"\n                     \
    \               (error \"tens too big\"))))\n                        \"\"))))))\n\
    \     (if (zero? ones)\n         \"\"\n         (if (= ones 4)\n             \"\
    iv\"\n             (if (= ones 9", "  (define v_to_i '(I II III IV V VI VII VIII\
    \ IX))\n  (define x_to_m '(X XX XXX XL L LX LXX LXXX XC))\n  (define c_to_d '(C\
    \ CC CCC CD D DC DCC DCCC CM))\n  (define (list-get lst index)\n    (list-ref\
    \ lst index))\n  (define (list-concat a b)\n    (string-append a b))\n  (define\
    \ (int-to-mini-roman-digit number)\n    (if (< number 0)\n        (display \"\
    out of range\")\n        (if (< number 4)\n            (list-get v_to_i number)\n\
    \            (if (< number 9)\n                (list-concat \"V\" (list-get v_to_i\
    \ (- number 5)))\n                (list-get x_to_m (- number 9))))))\n  (define\
    \ (int-to-mini-roman-double-digit number)\n    (if (< number 0)\n        (display\
    \ \"out of range\")\n        (if (< number 10)\n            (list-get x_to_m number)\n\
    \            (if (< number 40)\n                (list-concat (list-get x_to_m\
    \ (/ number 10)) (int-to-mini-roman-digit (- number (* 10 (/ number 10)))))\n\
    \                (if (< number 50)\n                    (list-concat \"XL\" (int-to-mini-roman-digit\
    \ (- number 40)))\n                    (if (< number 90)\n                   \
    \     (list-concat \"L\" (int-to-mini-roman-double-digit (- number 50)))\n   \
    \                     (if (< number 100)\n                            (list-concat\
    \ \"XC\" (int-to-mini-roman-digit (- number 90)))\n                          \
    \  (if (< number 400)\n                                (list-concat (list-get\
    \ c_to_d (/ number 100)) (int-to-mini-roman-double-digit (- number (* 100 (/ number\
    \ 100)))))\n                                (if (< number 500)\n             \
    \                       (list-concat \"CD\" (int-to-mini-roman-double-digit (-\
    \ number 400)))\n                                    (if (< number 900)\n    \
    \                                   ", "  (define (to-numeral numeral divisor)\n\
    \    (if (zero? (modulo number divisor))\n        (begin\n          (set! number\
    \ (/ number divisor))\n          (string-append numeral (to-numeral numeral divisor)))\n\
    \        numeral))\n  (string-downcase\n   (string-append\n    (to-numeral \"\
    M\" 1000)\n    (to-numeral \"CM\" 900)\n    (to-numeral \"D\" 500)\n    (to-numeral\
    \ \"CD\" 400)\n    (to-numeral \"C\" 100)\n    (to-numeral \"XC\" 90)\n    (to-numeral\
    \ \"L\" 50)\n    (to-numeral \"XL\" 40)\n    (to-numeral \"X\" 10)\n    (to-numeral\
    \ \"IX\" 9)\n    (to-numeral \"V\" 5)\n    (to-numeral \"IV\" 4)\n    (to-numeral\
    \ \"I\" 1))))\n", "  (let ([prec (vector (cons 1 \"i\")\n                    \
    \  (cons 4 \"iv\")\n                      (cons 5 \"v\")\n                   \
    \   (cons 9 \"ix\")\n                      (cons 10 \"x\")\n                 \
    \     (cons 40 \"xl\")\n                      (cons 50 \"l\")\n              \
    \        (cons 90 \"xc\")\n                      (cons 100 \"c\")\n          \
    \            (cons 400 \"cd\")\n                      (cons 500 \"d\")\n     \
    \                 (cons 900 \"cm\")\n                      (cons 1000 \"m\"))])\n\
    \    (cond\n      [(= number 0) \"\"]\n      [(and (<= 1 number) (<= number 1000))\n\
    \       (build-mini-roman prec number)]\n      [else\n       (error \"unsupported\
    \ number\")])))\n", "  (cond [(= number 1) \"i\"]\n        [(= number 2) \"ii\"\
    ]\n        [(= number 3) \"iii\"]\n        [(= number 4) \"iv\"]\n        [(=\
    \ number 5) \"v\"]\n        [(= number 6) \"vi\"]\n        [(= number 7) \"vii\"\
    ]\n        [(= number 8) \"viii\"]\n        [(= number 9) \"ix\"]\n        [(=\
    \ number 10) \"x\"]\n        [(= number 11) \"xi\"]\n        [(= number 12) \"\
    xii\"]\n        [(= number 13) \"xiii\"]\n        [(= number 14) \"xiv\"]\n  \
    \      [(= number 15) \"xv\"]\n        [(= number 16) \"xvi\"]\n        [(= number\
    \ 17) \"xvii\"]\n        [(= number 18) \"xviii\"]\n        [(= number 19) \"\
    xix\"]\n        [(= number 20) \"xx\"]\n        [(= number 30) \"xxx\"]\n    \
    \    [(= number 40) \"xl\"]\n        [(= number 50) \"l\"]\n        [(= number\
    \ 60) \"lx\"]\n        [(= number 70) \"lxx\"]\n        [(= number 80) \"lxxx\"\
    ]\n        [(= number 90) \"xc\"]\n        [(= number 100) \"c\"]\n        [(=\
    \ number 200) \"cc\"]\n        [(= number 300) \"ccc\"]\n        [(= number 400)\
    \ \"cd\"]\n        [(= number 500) \"d\"]\n        [(= number 600) \"dc\"]\n \
    \       [(= number 700) \"dcc\"]\n        [(= number 800) \"dccc\"]\n        [(=\
    \ number 900) \"cm\"]\n        [(= number 1000) \"m\"]\n        [else (string-append\
    \ (int_to_mini_roman (quotient number 1000))\n                             (int_to_mini_roman\
    \ (remainder number 1000)))\n        ]))", "  (define (int-to-roman-helper number)\n\
    \    (cond [(< number 5) (append (make-list number \"I\") \"\")]\n          [(=\
    \ number 5) \"V\"]\n          [(< number 10) (append \"V\" (make-list (- number\
    \ 5) \"I\"))]\n          [(= number 10) \"X\"]\n          [(< number 15) (append\
    \ \"X\" (make-list (- number 10) \"I\"))]\n          [(= number 15) \"XV\"]\n\
    \          [(< number 20) (append \"XV\" (make-list (- number 15) \"I\"))]\n \
    \         [(= number 20) \"XX\"]\n          [(< number 25) (append \"XX\" (make-list\
    \ (- number 20) \"I\"))]\n          [(= number 25) \"XXV\"]\n          [(< number\
    \ 30) (append \"XXV\" (make-list (- number 25) \"I\"))]\n          [(= number\
    \ 30) \"XXX\"]\n          [(< number 35) (append \"XXX\" (make-list (- number\
    \ 30) \"I\"))]\n          [(= number 35) \"XXXV\"]\n          [(< number 40) (append\
    \ \"XXXV\" (make-list (- number 35) \"I\"))]\n          [(= number 40) \"XL\"\
    ]\n          [(< number 45) (append \"XL\" (make-list (- number 40) \"I\"))]\n\
    \          [(= number 45) \"XLV\"]\n          [(< number 50) (append \"XLV\" (make-list\
    \ (- number 45) \"I\"))]\n          [(= number 50) \"L\"]\n          [(< number\
    \ 55) (append \"L\" (make-list (- number 50) \"I\"))]\n          [(= number 55)\
    \ \"LV\"]\n          [(< number 60) (append \"LV\" (make-list (- number 55) \"\
    I\"))]\n          [(= number 60) \"LX\"]\n          [(< number 65) (append \"\
    LX\" (make-list (- number 60) \"I\"))]\n          [(= number 65) \"LXV\"]\n  \
    \        [(< number 70) (append \"LXV\" (make-list (- number 65) \"I\"))]\n  \
    \        [(= number 70) \"LXX\"]\n          [(< number 75) (", "  (if (number-of-mini-roman-digits\
    \ number)\n      (let* ((number-of-digits (number-of-mini-roman-digits number))\n\
    \             (digit-value (digit-value-of-mini-roman-number number number-of-digits))\n\
    \             (sub-number (subtract-mini-roman-number number number-of-digits\
    \ digit-value)))\n        (string-append\n         (char-to-mini-roman number-of-digits\
    \ digit-value)\n         (int_to_mini_roman sub-number)))\n      \"\"))\n", " \
    \ (cond [(= number 1) \"i\"]\n        [(= number 2) \"ii\"]\n        [(= number\
    \ 3) \"iii\"]\n        [(= number 4) \"iv\"]\n        [(= number 5) \"v\"]\n \
    \       [(= number 6) \"vi\"]\n        [(= number 7) \"vii\"]\n        [(= number\
    \ 8) \"viii\"]\n        [(= number 9) \"ix\"]\n        [(= number 10) \"x\"]\n\
    \        [(= number 20) \"xx\"]\n        [(= number 30) \"xxx\"]\n        [(=\
    \ number 40) \"xl\"]\n        [(= number 50) \"l\"]\n        [(= number 60) \"\
    lx\"]\n        [(= number 70) \"lxx\"]\n        [(= number 80) \"lxxx\"]\n   \
    \     [(= number 90) \"xc\"]\n        [(= number 100) \"c\"]\n        [(= number\
    \ 200) \"cc\"]\n        [(= number 300) \"ccc\"]\n        [(= number 400) \"cd\"\
    ]\n        [(= number 500) \"d\"]\n        [(= number 600) \"dc\"]\n        [(=\
    \ number 700) \"dcc\"]\n        [(= number 800) \"dccc\"]\n        [(= number\
    \ 900) \"cm\"]\n        [(= number 1000) \"m\"]\n        [else \"--\" ]))\n",
  "  (let* ((result (iota 1000))\n         (digits (map (compose string->number number->string)\
    \ (iota (quotient number 10)))))\n    (cond\n      [(= number 0) \"\"]\n     \
    \ [(= number 1) \"i\"]\n      [(= number 2) \"ii\"]\n      [(= number 3) \"iii\"\
    ]\n      [(= number 4) \"iv\"]\n      [(= number 5) \"v\"]\n      [(= number 6)\
    \ \"vi\"]\n      [(= number 7) \"vii\"]\n      [(= number 8) \"viii\"]\n     \
    \ [(= number 9) \"ix\"]\n      [(= number 10) \"x\"]\n      [(= number 11) \"\
    xi\"]\n      [(= number 12) \"xii\"]\n      [(= number 13) \"xiii\"]\n      [(=\
    \ number 14) \"xiv\"]\n      [(= number 15) \"xv\"]\n      [(= number 16) \"xvi\"\
    ]\n      [(= number 17) \"xvii\"]\n      [(= number 18) \"xviii\"]\n      [(=\
    \ number 19) \"xix\"]\n      [(= number 20) \"xx\"]\n      [(= number 21) \"xxi\"\
    ]\n      [(= number 22) \"xxii\"]\n      [(= number 23) \"xxiii\"]\n      [(=\
    \ number 24) \"xxiv\"]\n      [(= number 25) \"xxv\"]\n      [(= number 26) \"\
    xxvi\"]\n      [(= number 27) \"xxvii\"]\n      [(= number 28) \"xxviii\"]\n \
    \     [(= number 29) \"xxix\"]\n      [(= number 30) \"xxx\"]\n      [(= number\
    \ 31) \"xxxi\"]\n      [(= number 32) \"xxxii\"]\n      [(= number 33) \"xxxiii\"\
    ]\n      [(= number 34) \"xxxiv\"]\n      [(= number 35) \"xxxv\"]\n      [(=\
    \ number 36) \"xxxvi\"]\n      [(= number 37) \"xxxvii\"]\n      [(= number 38)\
    \ \"xxxviii\"]\n      [(= number 39) \"xxxix\"]\n      [(= number 40) \"xl\"]\n\
    \      [(= number 41) \"xli\"]\n      [(= number 42) \"xlii\"]\n", "  (cond ((<=\
    \ 1 number 10) (list-ref (list \"i\" \"ii\" \"iii\" \"iv\" \"v\" \"vi\" \"vii\"\
    \ \"viii\" \"ix\" \"x\") (- number 1)))\n        ((<= 11 number 20) (string-append\
    \ \"x\" (int_to_mini_roman (- number 10))))\n        ((<= 21 number 100) (string-append\
    \ (int_to_mini_roman (/ number 10)) (int_to_mini_roman (- number (* (/ number\
    \ 10) 10)))))\n        ((<= 101 number 1000) (string-append (int_to_mini_roman\
    \ (/ number 100)) (int_to_mini_roman (- number (* (/ number 100) 100)))))\n  \
    \      ((= number 1000) \"m\")))\n", "  (define (int-to-mini-roman number)\n \
    \   (cond\n      ((= number 1000) \"m\")\n      ((= number 900) \"cm\")\n    \
    \  ((= number 500) \"d\")\n      ((= number 400) \"cd\")\n      ((= number 100)\
    \ \"c\")\n      ((= number 90) \"xc\")\n      ((= number 50) \"l\")\n      ((=\
    \ number 40) \"xl\")\n      ((= number 10) \"x\")\n      ((= number 9) \"ix\"\
    )\n      ((= number 5) \"v\")\n      ((= number 4) \"iv\")\n      ((= number 1)\
    \ \"i\")\n      (else \"\")))\n  (define (repeat number)\n    (cond\n      ((=\
    \ number 1000) (string-append (int-to-mini-roman 1000) (repeat (sub1 number))))\n\
    \      ((= number 900) (string-append (int-to-mini-roman 900) (repeat (sub1 number))))\n\
    \      ((= number 500) (string-append (int-to-mini-roman 500) (repeat (sub1 number))))\n\
    \      ((= number 400) (string-append (int-to-mini-roman 400) (repeat (sub1 number))))\n\
    \      ((= number 100) (string-append (int-to-mini-roman 100) (repeat (sub1 number))))\n\
    \      ((= number 90) (string-append (int-to-mini-roman 90) (repeat (sub1 number))))\n\
    \      ((= number 50) (string-append (int-to-mini-roman 50) (repeat (sub1 number))))\n\
    \      ((= number 40) (string-append (int-to-mini-roman 40) (repeat (sub1 number))))\n\
    \      ((= number 10) (string-append (int-to-mini-roman 10) (repeat (sub1 number))))\n\
    \      ((= number 9) (string-append (int-to-mini-roman 9) (repeat (sub1 number))))\n\
    \      ((= number 5) (string-append (int-to-mini-roman 5) (repeat (sub1 number))))\n\
    \      ((= number 4) (string-append (int-to-mini-roman 4) (repeat (sub1 number))))\n\
    \      ((= number 1) (string", "  (match number\n    [1 \"i\"]\n    [5 \"v\"]\n\
    \    [10 \"x\"]\n    [50 \"l\"]\n    [100 \"c\"]\n    [500 \"d\"]\n    [1000 \"\
    m\"]\n    [else (error 'int_to_mini_roman \"Number not between 1 and 1000\")]))\n",
  "  (local\n    [(define (make-roman numeral-list)\n       (string-join (map symbol->string\
    \ (reverse numeral-list))))]\n    (define roman-map\n      '((1000 . \"m\") (900\
    \ . \"cm\") (500 . \"d\") (400 . \"cd\")\n        (100 . \"c\") (90 . \"xc\")\
    \ (50 . \"l\") (40 . \"xl\")\n        (10 . \"x\") (9 . \"ix\") (5 . \"v\") (4\
    \ . \"iv\") (1 . \"i\")))\n    (define (get-matching-numeral num)\n      (let\
    \ loop ((num num) (numeral-list '()))\n        (cond\n          [(= num 0) (make-roman\
    \ numeral-list)]\n          [(= num 1) (make-roman (cons \"i\" numeral-list))]\n\
    \          [(= num 5) (make-roman (cons \"v\" numeral-list))]\n          [(= num\
    \ 10) (make-roman (cons \"x\" numeral-list))]\n          [(= num 50) (make-roman\
    \ (cons \"l\" numeral-list))]\n          [(= num 100) (make-roman (cons \"c\"\
    \ numeral-list))]\n          [(= num 500) (make-roman (cons \"d\" numeral-list))]\n\
    \          [(= num 1000) (make-roman (cons \"m\" numeral-list))]\n          [else\n\
    \           (let loop ((num num) (roman-map roman-map))\n             (cond\n\
    \               [(empty? roman-map) (error \"Not a valid number\")]\n        \
    \       [(= num (caar roman-map))\n                (loop (- num (caar roman-map))\
    \ (cdr roman-map))]\n               [else (loop num (cdr roman-map))]))])))\n\
    \    (get-matching-numeral number)))\n", "  (cond ((<= number 0) \"\")\n     \
    \   ((= number 1) \"i\")\n        ((= number 2) \"ii\")\n        ((= number 3)\
    \ \"iii\")\n        ((= number 4) \"iv\")\n        ((= number 5) \"v\")\n    \
    \    ((= number 6) \"vi\")\n        ((= number 7) \"vii\")\n        ((= number\
    \ 8) \"viii\")\n        ((= number 9) \"ix\")\n        ((= number 10) \"x\")\n\
    \        ((= number 11) \"xi\")\n        ((= number 12) \"xii\")\n        ((=\
    \ number 13) \"xiii\")\n        ((= number 14) \"xiv\")\n        ((= number 15)\
    \ \"xv\")\n        ((= number 16) \"xvi\")\n        ((= number 17) \"xvii\")\n\
    \        ((= number 18) \"xviii\")\n        ((= number 19) \"xix\")\n        ((=\
    \ number 20) \"xx\")\n        ((= number 30) \"xxx\")\n        ((= number 40)\
    \ \"xl\")\n        ((= number 50) \"l\")\n        ((= number 60) \"lx\")\n   \
    \     ((= number 70) \"lxx\")\n        ((= number 80) \"lxxx\")\n        ((= number\
    \ 90) \"xc\")\n        ((= number 100) \"c\")\n        ((= number 200) \"cc\"\
    )\n        ((= number 300) \"ccc\")\n        ((= number 400) \"cd\")\n       \
    \ ((= number 500) \"d\")\n        ((= number 600) \"dc\")\n        ((= number\
    \ 700) \"dcc\")\n        ((= number 800) \"dccc\")\n        ((= number 900) \"\
    cm\")\n        ((= number 1000) \"m\")\n        ((= number 2000) \"mm\")\n   \
    \     ((= number 3000) \"mmm\")\n        ((= number 4000) \"mmmm\")\n        ((=\
    \ number 5000) \"mmmmm\")\n        ((= number 6000) \"mmmmmm\")\n        ((= number\
    \ 7000) \"mmmmmmm\")\n        ((= number 8000) \"mmmmmmmm\")\n        ((= number\
    \ 9000) \"mmmmmmmmm\")\n        ((= number 10000) \"mmmmmmmmmm\")\n        (else\
    \ (error \"Input out of range\"", "  (cond\n    [(= number 1) \"i\"]\n    [(=\
    \ number 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"]\n \
    \   [(= number 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"\
    ]\n    [(= number 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10)\
    \ \"x\"]\n    [(= number 11) \"xi\"]\n    [(= number 12) \"xii\"]\n    [(= number\
    \ 13) \"xiii\"]\n    [(= number 14) \"xiv\"]\n    [(= number 15) \"xv\"]\n   \
    \ [(= number 16) \"xvi\"]\n    [(= number 17) \"xvii\"]\n    [(= number 18) \"\
    xviii\"]\n    [(= number 19) \"xix\"]\n    [(= number 20) \"xx\"]\n    [(= number\
    \ 21) \"xxi\"]\n    [(= number 22) \"xxii\"]\n    [(= number 23) \"xxiii\"]\n\
    \    [(= number 24) \"xxiv\"]\n    [(= number 25) \"xxv\"]\n    [(= number 26)\
    \ \"xxvi\"]\n    [(= number 27) \"xxvii\"]\n    [(= number 28) \"xxviii\"]\n \
    \   [(= number 29) \"xxix\"]\n    [(= number 30) \"xxx\"]\n    [(= number 31)\
    \ \"xxxi\"]\n    [(= number 32) \"xxxii\"]\n    [(= number 33) \"xxxiii\"]\n \
    \   [(= number 34) \"xxxiv\"]\n    [(= number 35) \"xxxv\"]\n    [(= number 36)\
    \ \"xxxvi\"]\n    [(= number 37) \"xxxvii\"]\n    [(= number 38) \"xxxviii\"]\n\
    \    [(= number 39) \"xxxix\"]\n    [(= number 40) \"xl\"]\n    [(= number 41)\
    \ \"xli\"]\n    [(= number 42) \"xlii\"]\n    [(= number 43) \"xliii\"]\n    [(=\
    \ number 44) \"xliv\"]\n    [(= number 45) \"xlv\"]\n    [(= number 46) \"xlvi\"\
    ]\n    [(=", "  (match number\n    [(1) \"i\"]\n    [(2) \"ii\"]\n    [(3) \"\
    iii\"]\n    [(4) \"iv\"]\n    [(5) \"v\"]\n    [(6) \"vi\"]\n    [(7) \"vii\"\
    ]\n    [(8) \"viii\"]\n    [(9) \"ix\"]\n    [(10) \"x\"]\n    [(100) \"c\"]\n\
    \    [(500) \"d\"]\n    [(1000) \"m\"]\n    [_ (error 'int_to_mini_roman \"Out\
    \ of range\")]))\n", "  (local [(define (split-into-thousands hundreds-tens-ones)\n\
    \            (let ([thousands (/ hundreds-tens-ones 1000)]\n                 \
    \ [hundreds (modulo hundreds-tens-ones 1000)]\n                  [tens (/ hundreds\
    \ 100)]\n                  [ones (modulo hundreds 10)])\n              (list thousands\
    \ hundreds tens ones)))\n          (define (rom digit-string)\n            (cond\
    \ [(= digit-string 1) \"i\"]\n                  [(= digit-string 2) \"ii\"]\n\
    \                  [(= digit-string 3) \"iii\"]\n                  [(= digit-string\
    \ 4) \"iv\"]\n                  [(= digit-string 5) \"v\"]\n                 \
    \ [(= digit-string 6) \"vi\"]\n                  [(= digit-string 7) \"vii\"]\n\
    \                  [(= digit-string 8) \"viii\"]\n                  [(= digit-string\
    \ 9) \"ix\"]\n                  [(= digit-string 10) \"x\"]\n                \
    \  [(= digit-string 50) \"l\"]\n                  [(= digit-string 100) \"c\"\
    ]\n                  [(= digit-string 500) \"d\"]\n                  [(= digit-string\
    \ 1000) \"m\"]))\n          (define (romanize-digit digit)\n            (if (<\
    \ digit 4)\n                (rom digit)\n                (string-append (rom (-\
    \ digit 4)) (rom (+ digit 4)))))\n          (define (romanize-hundreds hundreds)\n\
    \            (if (< hundreds 4)\n                (rom hundreds)\n            \
    \    (string-append (rom (- hundreds 4)) (rom (+ hundreds 4)))))\n          (define\
    \ (romanize-tens tens)\n            (if (< tens 4)\n                (rom tens)\n\
    \                (string-append (rom (- tens 4)) (rom (+ tens 4)))))\n       \
    \   (define (romanize-ones ones)\n            (if (< ones 4)\n               \
    \ (rom ones)\n                (string-append (rom (- ones 4)) (rom (+ ones 4)))))\n\
    \          (define (romanize thousands hundreds tens ones)\n            (cond\
    \ [(and (= thousands 0) (= hundreds 0) (= tens 0) (= ones 0)) \"\"]\n        \
    \          [(and (>= thousands 0) (= hundreds 0) (= tens 0) (= ones 0))\n    \
    \               (string-append (rom thousands) \"000\")", "  (if (not (or (integer?\
    \ number) (real? number)))\n      \"Error: not a number!\"\n      (int_to_mini_roman-helper\
    \ (exact->inexact number))))\n", "  (define (hundreds n)\n    (cond ((= n 1) \"\
    c\")\n          ((= n 2) \"cc\")\n          ((= n 3) \"ccc\")\n          ((= n\
    \ 4) \"cd\")\n          ((= n 5) \"d\")\n          ((= n 6) \"dc\")\n        \
    \  ((= n 7) \"dcc\")\n          ((= n 8) \"dccc\")\n          ((= n 9) \"cm\"\
    )))\n  (define (tens n)\n    (cond ((= n 1) \"x\")\n          ((= n 2) \"xx\"\
    )\n          ((= n 3) \"xxx\")\n          ((= n 4) \"xl\")\n          ((= n 5)\
    \ \"l\")\n          ((= n 6) \"lx\")\n          ((= n 7) \"lxx\")\n          ((=\
    \ n 8) \"lxxx\")\n          ((= n 9) \"xc\")))\n  (define (ones n)\n    (cond\
    \ ((= n 1) \"i\")\n          ((= n 2) \"ii\")\n          ((= n 3) \"iii\")\n \
    \         ((= n 4) \"iv\")\n          ((= n 5) \"v\")\n          ((= n 6) \"vi\"\
    )\n          ((= n 7) \"vii\")\n          ((= n 8) \"viii\")\n          ((= n\
    \ 9) \"ix\")))\n  (define (hundred-part n)\n    (hundreds (quotient n 100)))\n\
    \  (define (ten-part n)\n    (tens (quotient (remainder n 100) 10)))\n  (define\
    \ (one-part n)\n    (ones (remainder n 10)))\n  (string-append (hundred-part number)\n\
    \                 (ten-part number)\n                 (one-part number)))\n```\n\
    \n# Chapter 5, Exercise 4\n**4**. For the second exercise of chapter 4, you used\
    \ `filter` to remove elements from a list that didn't satisfy a given condition.\
    \ Now, without using `filter`, use a combination of `map` and `reduce` to do the\
    \ same thing.\n\n```#lang racket", "  (define (num-to-roman n)\n    (cond\n  \
    \    ((= n 1) \"i\")\n      ((= n 2) \"ii\")\n      ((= n 3) \"iii\")\n      ((=\
    \ n 4) \"iv\")\n      ((= n 5) \"v\")\n      ((= n 6) \"vi\")\n      ((= n 7)\
    \ \"vii\")\n      ((= n 8) \"viii\")\n      ((= n 9) \"ix\")\n      ((= n 10)\
    \ \"x\")\n      ((= n 11) \"xi\")\n      ((= n 12) \"xii\")\n      ((= n 13) \"\
    xiii\")\n      ((= n 14) \"xiv\")\n      ((= n 15) \"xv\")\n      ((= n 16) \"\
    xvi\")\n      ((= n 17) \"xvii\")\n      ((= n 18) \"xviii\")\n      ((= n 19)\
    \ \"xix\")\n      ((= n 20) \"xx\")\n      ((= n 30) \"xxx\")\n      ((= n 40)\
    \ \"xl\")\n      ((= n 50) \"l\")\n      ((= n 60) \"lx\")\n      ((= n 70) \"\
    lxx\")\n      ((= n 80) \"lxxx\")\n      ((= n 90) \"xc\")\n      ((= n 100) \"\
    c\")\n      ((= n 200) \"cc\")\n      ((= n 300) \"ccc\")\n      ((= n 400) \"\
    cd\")\n      ((= n 500) \"d\")\n      ((= n 600) \"dc\")\n      ((= n 700) \"\
    dcc\")\n      ((= n 800) \"dccc\")\n      ((= n 900) \"cm\")\n      ((= n 1000)\
    \ \"m\")\n      (else \"error\")))\n  (define (tens-digit n)\n    (num-to-roman\
    \ (modulo n 100)))\n  (define (hundreds-digit n)\n    (num-to-roman (modulo (quotient\
    \ n 100) 10)))\n  (define (thousands-digit n)\n    (num-to-roman (quotient n 1000)))\n\
    \  (string-append\n   (thousands-digit number)\n", "  (cond\n    [(= number 1)\
    \ \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number\
    \ 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number\
    \ 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(=\
    \ number 10) \"x\"]\n    [(= number 50) \"l\"]\n    [(= number 100) \"c\"]\n \
    \   [(= number 500) \"d\"]\n    [(= number 1000) \"m\"]\n    [else (int_to_mini_roman\
    \ (- number 1))]))\n", "  (cond ((<= number 0) \"\")\n        ((<= number 3) (string-append\
    \ (int_to_mini_roman (sub1 number)) \"i\"))\n        ((= number 4) \"iv\")\n \
    \       ((<= number 8) (string-append \"v\" (int_to_mini_roman (- number 5))))\n\
    \        ((= number 9) \"ix\")\n        ((<= number 39) (string-append (int_to_mini_roman\
    \ (/ number 10)) \"x\"))\n        ((<= number 49) (string-append \"xl\" (int_to_mini_roman\
    \ (- number 40))))\n        ((<= number 89) (string-append \"l\" (int_to_mini_roman\
    \ (- number 50))))\n        ((<= number 99) (string-append \"xc\" (int_to_mini_roman\
    \ (- number 90))))\n        ((<= number 399) (string-append (int_to_mini_roman\
    \ (/ number 100)) \"c\"))\n        ((<= number 499) (string-append \"cd\" (int_to_mini_roman\
    \ (- number 400))))\n        ((<= number 899) (string-append \"d\" (int_to_mini_roman\
    \ (- number 500))))\n        ((<= number 999) (string-append \"cm\" (int_to_mini_roman\
    \ (- number 900))))\n        ((= number 1000) \"m\")\n        ((> number 1000)\
    \ \"\")))\n", "  (define (thousands)\n    (cond ((>= number 1000) (string-append\
    \ \"m\" (thousands (- number 1000))))\n          (else \"\")))\n  (define (hundreds)\n\
    \    (cond ((>= number 900) (string-append \"cm\" (hundreds (- number 900))))\n\
    \          ((>= number 500) (string-append \"d\" (hundreds (- number 500))))\n\
    \          ((>= number 400) (string-append \"cd\" (hundreds (- number 400))))\n\
    \          ((>= number 100) (string-append \"c\" (hundreds (- number 100))))\n\
    \          (else \"\")))\n  (define (tens)\n    (cond ((>= number 90) (string-append\
    \ \"xc\" (tens (- number 90))))\n          ((>= number 50) (string-append \"l\"\
    \ (tens (- number 50))))\n          ((>= number 40) (string-append \"xl\" (tens\
    \ (- number 40))))\n          ((>= number 10) (string-append \"x\" (tens (- number\
    \ 10))))\n          (else \"\")))\n  (define (ones)\n    (cond ((>= number 9)\
    \ (string-append \"ix\" (ones (- number 9))))\n          ((>= number 5) (string-append\
    \ \"v\" (ones (- number 5))))\n          ((>= number 4) (string-append \"iv\"\
    \ (ones (- number 4))))\n          ((>= number 1) (string-append \"i\" (ones (-\
    \ number 1))))\n          (else \"\")))\n  (string-join (list (thousands) (hundreds)\
    \ (tens) (ones)) \"\"))\n", "  (cond\n    [(= number 1) \"i\"]\n    [(= number\
    \ 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number\
    \ 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number\
    \ 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(=\
    \ number 11) \"xi\"]\n    [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"\
    ]\n    [(= number 14) \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16)\
    \ \"xvi\"]\n    [(= number 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(=\
    \ number 19) \"xix\"]\n    [(= number 20) \"xx\"]\n    [(= number 30) \"xxx\"\
    ]\n    [(= number 40) \"xl\"]\n    [(= number 50) \"l\"]\n    [(= number 60) \"\
    lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number 80) \"lxxx\"]\n    [(= number\
    \ 90) \"xc\"]\n    [(= number 100) \"c\"]\n    [(= number 200) \"cc\"]\n    [(=\
    \ number 300) \"ccc\"]\n    [(= number 400) \"cd\"]\n    [(= number 500) \"d\"\
    ]\n    [(= number 600) \"dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number 800)\
    \ \"dccc\"]\n    [(= number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    [else\
    \ (string-append (int_to_mini_roman (/ number 10))\n                         (int_to_mini_roman\
    \ (modulo number 10)))])\n  )\n```\n\n[Back to problem](#P9_40)\n\n### <a name=\"\
    P9_41\"></a>[P9.41](https://github.com/lgervasoni/AAAPracticalExercise/blob/master/code/P9_41.rkt)\n\
    ```racket\n#lang racket\n", "  (define mappings\n    '((1000 \"m\")\n      (900\
    \ \"cm\")\n      (500 \"d\")\n      (400 \"cd\")\n      (100 \"c\")\n      (90\
    \ \"xc\")\n      (50 \"l\")\n      (40 \"xl\")\n      (10 \"x\")\n      (9 \"\
    ix\")\n      (5 \"v\")\n      (4 \"iv\")\n      (1 \"i\")))\n  (for/fold ([roman\
    \ \"\"]\n             [number number])\n    ([value romanization mappings])\n\
    \    (define (divides? a b) (= (modulo a b) 0))\n    (cond\n      [(<= number\
    \ value) (values (string-append roman romanization) (- number value))]\n     \
    \ [else (values roman number)])))\n", "  (cond\n    [(= number 1) \"i\"]\n   \
    \ [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"\
    ]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"\
    ]\n    [(= number 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10)\
    \ \"x\"]\n    [(= number 20) \"xx\"]\n    [(= number 30) \"xxx\"]\n    [(= number\
    \ 40) \"xl\"]\n    [(= number 50) \"l\"]\n    [(= number 60) \"lx\"]\n    [(=\
    \ number 70) \"lxx\"]\n    [(= number 80) \"lxxx\"]\n    [(= number 90) \"xc\"\
    ]\n    [(= number 100) \"c\"]\n    [(= number 200) \"cc\"]\n    [(= number 300)\
    \ \"ccc\"]\n    [(= number 400) \"cd\"]\n    [(= number 500) \"d\"]\n    [(= number\
    \ 600) \"dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number 800) \"dccc\"]\n\
    \    [(= number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    [else \"nope\"\
    ]))\n", "  (define (int-to-mini-roman-aux numeral)\n    (cond ((>= numeral 1000)\n\
    \           (string-append (if (> (/ numeral 1000) 3)\n                      \
    \        \"mmm\"\n                              (int-to-mini-roman-aux (/ numeral\
    \ 1000)))\n                          (int-to-mini-roman-aux (mod numeral 1000))))\n\
    \          ((>= numeral 100)\n           (string-append (if (> (/ numeral 100)\
    \ 3)\n                              \"ccc\"\n                              (int-to-mini-roman-aux\
    \ (/ numeral 100)))\n                          (int-to-mini-roman-aux (mod numeral\
    \ 100))))\n          ((>= numeral 10)\n           (string-append (if (> (/ numeral\
    \ 10) 3)\n                              \"xx\"\n                             \
    \ (int-to-mini-roman-aux (/ numeral 10)))\n                          (int-to-mini-roman-aux\
    \ (mod numeral 10))))\n          ((>= numeral 1)\n           (string-append (if\
    \ (> (/ numeral 1) 3)\n                              \"ii\"\n                \
    \              (int-to-mini-roman-aux (/ numeral 1)))\n                      \
    \    (int-to-mini-roman-aux (mod numeral 1))))\n          (else \"\")))\n  (if\
    \ (and (>= number 1) (<= number 1000))\n      (string-append \"M\" (int-to-mini-roman-aux\
    \ number))\n      (error \"Error: the input number is not between 1 and 1000\"\
    )))\n", "  (cond ((= number 1) \"i\")\n        ((= number 2) \"ii\")\n       \
    \ ((= number 3) \"iii\")\n        ((= number 4) \"iv\")\n        ((= number 5)\
    \ \"v\")\n        ((= number 6) \"vi\")\n        ((= number 7) \"vii\")\n    \
    \    ((= number 8) \"viii\")\n        ((= number 9) \"ix\")\n        ((= number\
    \ 10) \"x\")\n        ((= number 11) \"xi\")\n        ((= number 12) \"xii\")\n\
    \        ((= number 13) \"xiii\")\n        ((= number 14) \"xiv\")\n        ((=\
    \ number 15) \"xv\")\n        ((= number 16) \"xvi\")\n        ((= number 17)\
    \ \"xvii\")\n        ((= number 18) \"xviii\")\n        ((= number 19) \"xix\"\
    )\n        ((= number 20) \"xx\")\n        ((= number 21) \"xxi\")\n        ((=\
    \ number 22) \"xxii\")\n        ((= number 23) \"xxiii\")\n        ((= number\
    \ 24) \"xxiv\")\n        ((= number 25) \"xxv\")\n        ((= number 26) \"xxvi\"\
    )\n        ((= number 27) \"xxvii\")\n        ((= number 28) \"xxviii\")\n   \
    \     ((= number 29) \"xxix\")\n        ((= number 30) \"xxx\")\n        ((= number\
    \ 31) \"xxxi\")\n        ((= number 32) \"xxxii\")\n        ((= number 33) \"\
    xxxiii\")\n        ((= number 34) \"xxxiv\")\n        ((= number 35) \"xxxv\"\
    )\n        ((= number 36) \"xxxvi\")\n        ((= number 37) \"xxxvii\")\n   \
    \     ((= number 38) \"xxxviii\")\n        ((= number 39) \"xxxix\")\n       \
    \ ((= number 40) \"xl\")\n        ((= number 41) \"xli\")\n        ((= number\
    \ 42) \"xlii\")\n        ((= number 43) \"xliii\")\n        ((= number 44) \"\
    xliv\")\n        ((= number 45) \"xlv\")\n        ((= number 46) \"xlvi\")\n \
    \       ((= number 47", "  ;; TODO: define this function\n  )\n```\n\n##### Sample:\n\
    \n```racket\n#lang racket\n", "  (define conversions\n    '((1000 \"m\")\n   \
    \   (500 \"d\")\n      (100 \"c\")\n      (50 \"l\")\n      (10 \"x\")\n     \
    \ (5 \"v\")\n      (1 \"i\")))\n  (define (convert-thousands n)\n    (string-append\n\
    \     (make-string (/ n 1000) #\\m)\n     (convert-hundreds (remainder n 1000))))\n\
    \  (define (convert-hundreds n)\n    (cond ((>= n 900) (string-append \"cm\" (convert-tens\
    \ (remainder n 900))))\n          ((>= n 500) (string-append \"d\" (convert-hundreds\
    \ (remainder n 500))))\n          ((>= n 400) (string-append \"cd\" (convert-tens\
    \ (remainder n 400))))\n          (else (string-append (make-string (/ n 100)\
    \ #\\c)\n                               (convert-tens (remainder n 100))))))\n\
    \  (define (convert-tens n)\n    (cond ((>= n 90) (string-append \"xc\" (convert-units\
    \ (remainder n 90))))\n          ((>= n 50) (string-append \"l\" (convert-tens\
    \ (remainder n 50))))\n          ((>= n 40) (string-append \"xl\" (convert-units\
    \ (remainder n 40))))\n          (else (string-append (make-string (/ n 10) #\\\
    x)\n                               (convert-units (remainder n 10))))))\n  (define\
    \ (convert-units n)\n    (cond ((>= n 9) (string-append \"ix\" (convert-tens (remainder\
    \ n 9))))\n          ((>= n 5) (string-append \"v\" (convert-units (remainder\
    \ n 5))))\n          ((>= n 4) (string-append \"iv\" (convert-units (remainder\
    \ n 4))))\n          (else (make-string n #\\i))))\n  (cond ((<= number 0) \"\"\
    )\n        ((<= number 1000) (convert-thousands number))\n        (else (", " \
    \ (cond\n    [(= number 1000) \"m\"]\n    [(= number 500) \"d\"]\n    [(= number\
    \ 100) \"c\"]\n    [(= number 50) \"l\"]\n    [(= number 10) \"x\"]\n    [(= number\
    \ 5) \"v\"]\n    [(= number 1) \"i\"]\n    [else \"\"]))\n", "  (cond\n    ((=\
    \ number 1) \"i\")\n    ((= number 2) \"ii\")\n    ((= number 3) \"iii\")\n  \
    \  ((= number 4) \"iv\")\n    ((= number 5) \"v\")\n    ((= number 6) \"vi\")\n\
    \    ((= number 7) \"vii\")\n    ((= number 8) \"viii\")\n    ((= number 9) \"\
    ix\")\n    ((= number 10) \"x\")\n    ((= number 11) \"xi\")\n    ((= number 12)\
    \ \"xii\")\n    ((= number 13) \"xiii\")\n    ((= number 14) \"xiv\")\n    ((=\
    \ number 15) \"xv\")\n    ((= number 16) \"xvi\")\n    ((= number 17) \"xvii\"\
    )\n    ((= number 18) \"xviii\")\n    ((= number 19) \"xix\")\n    ((= number\
    \ 20) \"xx\")\n    ((= number 21) \"xxi\")\n    ((= number 22) \"xxii\")\n   \
    \ ((= number 23) \"xxiii\")\n    ((= number 24) \"xxiv\")\n    ((= number 25)\
    \ \"xxv\")\n    ((= number 26) \"xxvi\")\n    ((= number 27) \"xxvii\")\n    ((=\
    \ number 28) \"xxviii\")\n    ((= number 29) \"xxix\")\n    ((= number 30) \"\
    xxx\")\n    ((= number 31) \"xxxi\")\n    ((= number 32) \"xxxii\")\n    ((= number\
    \ 33) \"xxxiii\")\n    ((= number 34) \"xxxiv\")\n    ((= number 35) \"xxxv\"\
    )\n    ((= number 36) \"xxxvi\")\n    ((= number 37) \"xxxvii\")\n    ((= number\
    \ 38) \"xxxviii\")\n    ((= number 39) \"xxxix\")\n    ((= number 40) \"xl\")\n\
    \    ((= number 41) \"xli\")\n    ((= number 42) \"xlii\")\n    ((= number 43)\
    \ \"xliii\")\n    ((= number 44) \"xliv\")\n    ((= number 45) \"xlv\")\n    ((=\
    \ number 46) \"xlvi\")\n    ((=", "  (define (iter number mini-roman)\n    (cond\n\
    \      [(> number 0)\n       (cond\n         [(<= number 3)\n          (iter (-\
    \ number 1) (string-append mini-roman \"i\"))]\n         [(<= number 8)\n    \
    \      (iter (- number 5) (string-append mini-roman \"v\"))]\n         [(<= number\
    \ 3)\n          (iter (- number 1) (string-append mini-roman \"i\"))]\n      \
    \   [(<= number 8)\n          (iter (- number 5) (string-append mini-roman \"\
    v\"))]\n         [(<= number 39)\n          (iter (- number 10) (string-append\
    \ mini-roman \"x\"))]\n         [(<= number 89)\n          (iter (- number 50)\
    \ (string-append mini-roman \"l\"))]\n         [(<= number 399)\n          (iter\
    \ (- number 100) (string-append mini-roman \"c\"))]\n         [(<= number 899)\n\
    \          (iter (- number 500) (string-append mini-roman \"d\"))]\n         [(<=\
    \ number 3999)\n          (iter (- number 1000) (string-append mini-roman \"m\"\
    ))]\n         [else (error \"Number out of range\")])]\n      [else mini-roman]))\n\
    \  (string-downcase (iter number \"\")))\n", "  (define (many number letter)\n\
    \    (if (= number 0)\n        \"\"\n        (if (= number 1)\n            letter\n\
    \            (string-append letter (many (- number 1) letter)))))\n  (if (= number\
    \ 1000)\n      \"m\"\n      (string-append\n       (many (/ number 100) \"c\"\
    )\n       (many (/ (% number 100) 10) \"x\")\n       (many (% number 10) \"i\"\
    ))))\n", "  (define (helper acc rest)\n    (cond\n      [(= rest 0) acc]\n   \
    \   [(= rest 1) (string-append acc \"i\")]\n      [(= rest 2) (string-append acc\
    \ \"ii\")]\n      [(= rest 3) (string-append acc \"iii\")]\n      [(= rest 4)\
    \ (string-append acc \"iv\")]\n      [(= rest 5) (string-append acc \"v\")]\n\
    \      [(= rest 6) (string-append acc \"vi\")]\n      [(= rest 7) (string-append\
    \ acc \"vii\")]\n      [(= rest 8) (string-append acc \"viii\")]\n      [(= rest\
    \ 9) (string-append acc \"ix\")]\n      [(= rest 10) (string-append acc \"x\"\
    )]\n      [(= rest 40) (string-append acc \"xl\")]\n      [(= rest 50) (string-append\
    \ acc \"l\")]\n      [(= rest 90) (string-append acc \"xc\")]\n      [(= rest\
    \ 100) (string-append acc \"c\")]\n      [(= rest 400) (string-append acc \"cd\"\
    )]\n      [(= rest 500) (string-append acc \"d\")]\n      [(= rest 900) (string-append\
    \ acc \"cm\")]\n      [(= rest 1000) (string-append acc \"m\")]\n      [(= rest\
    \ 3999) (string-append acc \"mmmc\")]\n      [else (helper acc (modulo rest 10))]))\n\
    \  (string-downcase (helper \"\" number)))\n", "  (match number\n    [(>= 3990)\
    \ \"MMMCMXCIX\"]\n    [(>= 3090) \"MMMXCIX\"]\n    [(>= 2090) \"MMXCIX\"]\n  \
    \  [(>= 1990) \"MCMXCIX\"]\n    [(>= 1090) \"MXCIX\"]\n    [(>= 990) \"CMXCIX\"\
    ]\n    [(>= 890) \"DCCCXCIX\"]\n    [(>= 790) \"DCCXCIX\"]\n    [(>= 690) \"DCXCIX\"\
    ]\n    [(>= 590) \"DXCIX\"]\n    [(>= 490) \"CDXCIX\"]\n    [(>= 390) \"CCCXCIX\"\
    ]\n    [(>= 290) \"CCXCIX\"]\n    [(>= 190) \"CXCIX\"]\n    [(>= 90) \"XCIX\"\
    ]\n    [(>= 40) \"XLIX\"]\n    [(>= 39) \"XXXIX\"]\n    [(>= 30) \"XXX\"]\n  \
    \  [(>= 29) \"XXIX\"]\n    [(>= 20) \"XX\"]\n    [(>= 19) \"XIX\"]\n    [(>= 10)\
    \ \"X\"]\n    [(>= 9) \"IX\"]\n    [(>= 8) \"VIII\"]\n    [(>= 7) \"VII\"]\n \
    \   [(>= 6) \"VI\"]\n    [(>= 5) \"V\"]\n    [(>= 4) \"IV\"]\n    [(>= 3) \"III\"\
    ]\n    [(>= 2) \"II\"]\n    [(>= 1) \"I\"]\n    [(>= 0) \"\"]))\n", "  (let ([m\
    \ (modulo number 1000)]\n        [h (modulo number 100)]\n        [t (modulo number\
    \ 10)])\n    (string-join\n     (list (make-string (/ m 100) #\\c)\n         \
    \  (make-string (/ h 10) #\\x)\n           (make-string t #\\i))\n     \"\")))\n",
  "  (let ((roman-numerals\n         '((10 \"x\") (9 \"ix\") (5 \"v\") (4 \"iv\")\
    \ (1 \"i\"))))\n    (cond ((= number 0) \"\")\n          (else\n           (let\
    \ ((current-numeral (find-first-min <= number roman-numerals)))\n            \
    \ (cons (cadr current-numeral)\n                   (int_to_mini_roman\n      \
    \              (- number (car current-numeral)))))))))\n", "  (cond ((= number\
    \ 1) \"i\")\n        ((= number 2) \"ii\")\n        ((= number 3) \"iii\")\n \
    \       ((= number 4) \"iv\")\n        ((= number 5) \"v\")\n        ((= number\
    \ 6) \"vi\")\n        ((= number 7) \"vii\")\n        ((= number 8) \"viii\")\n\
    \        ((= number 9) \"ix\")\n        ((= number 10) \"x\")\n        ((= number\
    \ 11) \"xi\")\n        ((= number 12) \"xii\")\n        ((= number 13) \"xiii\"\
    )\n        ((= number 14) \"xiv\")\n        ((= number 15) \"xv\")\n        ((=\
    \ number 16) \"xvi\")\n        ((= number 17) \"xvii\")\n        ((= number 18)\
    \ \"xviii\")\n        ((= number 19) \"xix\")\n        ((= number 20) \"xx\")\n\
    \        ((= number 30) \"xxx\")\n        ((= number 40) \"xl\")\n        ((=\
    \ number 50) \"l\")\n        ((= number 60) \"lx\")\n        ((= number 70) \"\
    lxx\")\n        ((= number 80) \"lxxx\")\n        ((= number 90) \"xc\")\n   \
    \     ((= number 100) \"c\")\n        ((= number 200) \"cc\")\n        ((= number\
    \ 300) \"ccc\")\n        ((= number 400) \"cd\")\n        ((= number 500) \"d\"\
    )\n        ((= number 600) \"dc\")\n        ((= number 700) \"dcc\")\n       \
    \ ((= number 800) \"dccc\")\n        ((= number 900) \"cm\")\n        ((= number\
    \ 1000) \"m\")\n        (else \"invalid\")))\n", "  (if (= number 1)\n      \"\
    i\"\n      (append \"v\" (int_to_mini_roman (- number 5)))))\n", "  (define (int-to-mini-roman-convert\
    \ number)\n    (cond ((or (= number 1000) (= number 9)) \"cm\")\n          ((or\
    \ (= number 900) (= number 500)) \"d\")\n          ((or (= number 400) (= number\
    \ 100)) \"c\")\n          ((or (= number 90) (= number 50)) \"l\")\n         \
    \ ((or (= number 40) (= number 10)) \"x\")\n          ((or (= number 9) (= number\
    \ 5)) \"v\")\n          ((or (= number 4) (= number 1)) \"i\")))\n  (define (int-to-mini-roman-helper\
    \ number output)\n    (if (zero? number)\n        output\n        (int-to-mini-roman-helper\
    \ (quotient number 10) (append output (int-to-mini-roman-convert (remainder number\
    \ 10))))))\n  (map (lambda (x) (string-downcase x)) (reverse (int-to-mini-roman-helper\
    \ number '()))))\n", "  (define numeral-table\n    '(\n      (1000 \"m\")\n  \
    \    (900 \"cm\")\n      (500 \"d\")\n      (400 \"cd\")\n      (100 \"c\")\n\
    \      (90 \"xc\")\n      (50 \"l\")\n      (40 \"xl\")\n      (10 \"x\")\n  \
    \    (9 \"ix\")\n      (5 \"v\")\n      (4 \"iv\")\n      (1 \"i\")\n      ))\n\
    \  (define (decompose n)\n    (filter (lambda (pair) (>= (car pair) n)) numeral-table))\n\
    \  (define (int_to_mini_roman_helper n)\n    (define (iter n working-table)\n\
    \      (if (zero? n)\n          \"\"\n          (let ((largest-value (car (car\
    \ working-table))))\n            (string-append (cadr (car working-table))\n \
    \                          (iter (- n largest-value)\n                       \
    \          (decompose (- n largest-value)))))))\n    (iter n (decompose n)))\n\
    \  (int_to_mini_roman_helper number))\n", "  (define (roman-to-string-helper number-to-convert)\n\
    \    (cond ((>= number-to-convert 1000) (cons 'm (roman-to-string-helper (- number-to-convert\
    \ 1000))))\n          ((>= number-to-convert 900) (cons 'c (cons 'm (roman-to-string-helper\
    \ (- number-to-convert 900)))))\n          ((>= number-to-convert 500) (cons 'd\
    \ (roman-to-string-helper (- number-to-convert 500))))\n          ((>= number-to-convert\
    \ 400) (cons 'c (cons 'd (roman-to-string-helper (- number-to-convert 400)))))\n\
    \          ((>= number-to-convert 100) (cons 'c (roman-to-string-helper (- number-to-convert\
    \ 100))))\n          ((>= number-to-convert 90) (cons 'x (cons 'c (roman-to-string-helper\
    \ (- number-to-convert 90)))))\n          ((>= number-to-convert 50) (cons 'l\
    \ (roman-to-string-helper (- number-to-convert 50))))\n          ((>= number-to-convert\
    \ 40) (cons 'x (cons 'l (roman-to-string-helper (- number-to-convert 40)))))\n\
    \          ((>= number-to-convert 10) (cons 'x (roman-to-string-helper (- number-to-convert\
    \ 10))))\n          ((>= number-to-convert 9) (cons 'i (cons 'x (roman-to-string-helper\
    \ (- number-to-convert 9)))))\n          ((>= number-to-convert 5) (cons 'v (roman-to-string-helper\
    \ (- number-to-convert 5))))\n          ((>= number-to-convert 4) (cons 'i (cons\
    \ 'v (roman-to-string-helper (- number-to-convert 4)))))\n          ((>= number-to-convert\
    \ 1) (cons 'i (roman-to-string-helper (- number-to-convert 1))))\n          (else\
    \ '", "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number\
    \ 3) \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number\
    \ 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(=\
    \ number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 11) \"xi\"]\n \
    \   [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n    [(= number 14)\
    \ \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number\
    \ 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n\
    \    [(= number 20) \"xx\"]\n    [(= number 21) \"xxi\"]\n    [(= number 22) \"\
    xxii\"]\n    [(= number 23) \"xxiii\"]\n    [(= number 24) \"xxiv\"]\n    [(=\
    \ number 25) \"xxv\"]\n    [(= number 26) \"xxvi\"]\n    [(= number 27) \"xxvii\"\
    ]\n    [(= number 28) \"xxviii\"]\n    [(= number 29) \"xxix\"]\n    [(= number\
    \ 30) \"xxx\"]\n    [(= number 31) \"xxxi\"]\n    [(= number 32) \"xxxii\"]\n\
    \    [(= number 33) \"xxxiii\"]\n    [(= number 34) \"xxxiv\"]\n    [(= number\
    \ 35) \"xxxv\"]\n    [(= number 36) \"xxxvi\"]\n    [(= number 37) \"xxxvii\"\
    ]\n    [(= number 38) \"xxxviii\"]\n    [(= number 39) \"xxxix\"]\n    [(= number\
    \ 40) \"xl\"]\n    [(= number 41) \"xli\"]\n    [(= number 42) \"xlii\"]\n   \
    \ [(= number 43) \"xliii\"]\n    [(= number 44) \"xliv\"]\n    [(= number 45)\
    \ \"xlv\"]\n    [(= number 46) \"xlvi\"]\n    [(=", "  (cond [(= number 1) \"\
    i\"]\n        [(= number 2) \"ii\"]\n        [(= number 3) \"iii\"]\n        [(=\
    \ number 4) \"iv\"]\n        [(= number 5) \"v\"]\n        [(= number 6) \"vi\"\
    ]\n        [(= number 7) \"vii\"]\n        [(= number 8) \"viii\"]\n        [(=\
    \ number 9) \"ix\"]\n        [(= number 10) \"x\"]\n        [(= number 11) \"\
    xi\"]\n        [(= number 12) \"xii\"]\n        [(= number 13) \"xiii\"]\n   \
    \     [(= number 14) \"xiv\"]\n        [(= number 15) \"xv\"]\n        [(= number\
    \ 16) \"xvi\"]\n        [(= number 17) \"xvii\"]\n        [(= number 18) \"xviii\"\
    ]\n        [(= number 19) \"xix\"]\n        [(= number 20) \"xx\"]\n        [(=\
    \ number 30) \"xxx\"]\n        [(= number 40) \"xl\"]\n        [(= number 50)\
    \ \"l\"]\n        [(= number 60) \"lx\"]\n        [(= number 70) \"lxx\"]\n  \
    \      [(= number 80) \"lxxx\"]\n        [(= number 90) \"xc\"]\n        [(= number\
    \ 100) \"c\"]\n        [(= number 200) \"cc\"]\n        [(= number 300) \"ccc\"\
    ]\n        [(= number 400) \"cd\"]\n        [(= number 500) \"d\"]\n        [(=\
    \ number 600) \"dc\"]\n        [(= number 700) \"dcc\"]\n        [(= number 800)\
    \ \"dccc\"]\n        [(= number 900) \"cm\"]\n        [(= number 1000) \"m\"]\n\
    \        [else \"\"]))\n", "  (define (make-groups number)\n    (let ([remainder\
    \ (modulo number 10)])\n      (cons (quotient number 10) remainder)))\n  (define\
    \ (to-roman-characters number)\n    (cond [(= number 1) \"i\"]\n          [(=\
    \ number 2) \"ii\"]\n          [(= number 3) \"iii\"]\n          [(= number 4)\
    \ \"iv\"]\n          [(= number 5) \"v\"]\n          [(= number 6) \"vi\"]\n \
    \         [(= number 7) \"vii\"]\n          [(= number 8) \"viii\"]\n        \
    \  [(= number 9) \"ix\"]\n          [(= number 10) \"x\"]))\n  (define (magnify\
    \ group)\n    (string-append (to-roman-characters group)\n                   (make-string\
    \ (* group 5) #\\x)))\n  (string-join (map magnify (make-groups number)) \"\"\
    ))\n", "  (define (int-to-roman-string number)\n    (define (roman-ones-digit\
    \ number)\n      (cond\n        [(= number 1) \"I\"]\n        [(= number 2) \"\
    II\"]\n        [(= number 3) \"III\"]\n        [(= number 4) \"IV\"]\n       \
    \ [(= number 5) \"V\"]\n        [(= number 6) \"VI\"]\n        [(= number 7) \"\
    VII\"]\n        [(= number 8) \"VIII\"]\n        [(= number 9) \"IX\"]\n     \
    \   [else \"\"]))\n    (define (roman-tens-digit number)\n      (cond\n      \
    \  [(= number 1) \"X\"]\n        [(= number 2) \"XX\"]\n        [(= number 3)\
    \ \"XXX\"]\n        [(= number 4) \"XL\"]\n        [(= number 5) \"L\"]\n    \
    \    [(= number 6) \"LX\"]\n        [(= number 7) \"LXX\"]\n        [(= number\
    \ 8) \"LXXX\"]\n        [(= number 9) \"XC\"]\n        [else \"\"]))\n    (define\
    \ (roman-hundreds-digit number)\n      (cond\n        [(= number 1) \"C\"]\n \
    \       [(= number 2) \"CC\"]\n        [(= number 3) \"CCC\"]\n        [(= number\
    \ 4) \"CD\"]\n        [(= number 5) \"D\"]\n        [(= number 6) \"DC\"]\n  \
    \      [(= number 7) \"DCC\"]\n        [(= number 8) \"DCCC\"]\n        [(= number\
    \ 9) \"CM\"]\n        [else \"\"]))\n    (define (roman-thousands-digit number)\n\
    \      (cond\n        [(= number 1) \"M\"]\n        [(= number 2) \"MM\"]\n  \
    \      [(= number 3) \"MMM\"]\n        [else \"\"]))\n    (list (roman-thousands-digit\
    \ (quotient number 1000))\n          (roman-hundreds-digit (quotient (remainder\
    \ number 1000) 100))\n          (roman-tens-digit (quotient (remainder number\
    \ 100) 10))\n          (roman-ones-digit (remainder number 10))))\n  (for/string\
    \ ([x (int-to-roman-string number)", "  (cond\n    [(= number 1) \"i\"]\n    [(=\
    \ number 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"]\n \
    \   [(= number 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"\
    ]\n    [(= number 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10)\
    \ \"x\"]\n    [(= number 11) \"xi\"]\n    [(= number 12) \"xii\"]\n    [(= number\
    \ 13) \"xiii\"]\n    [(= number 14) \"xiv\"]\n    [(= number 15) \"xv\"]\n   \
    \ [(= number 16) \"xvi\"]\n    [(= number 17) \"xvii\"]\n    [(= number 18) \"\
    xviii\"]\n    [(= number 19) \"xix\"]\n    [(= number 20) \"xx\"]\n    [(= number\
    \ 30) \"xxx\"]\n    [(= number 40) \"xl\"]\n    [(= number 50) \"l\"]\n    [(=\
    \ number 60) \"lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number 80) \"lxxx\"\
    ]\n    [(= number 90) \"xc\"]\n    [(= number 100) \"c\"]\n    [(= number 200)\
    \ \"cc\"]\n    [(= number 300) \"ccc\"]\n    [(= number 400) \"cd\"]\n    [(=\
    \ number 500) \"d\"]\n    [(= number 600) \"dc\"]\n    [(= number 700) \"dcc\"\
    ]\n    [(= number 800) \"dccc\"]\n    [(= number 900) \"cm\"]\n    [(= number\
    \ 1000) \"m\"]\n    [(= number 2000) \"mm\"]\n    [(= number 3000) \"mmm\"]\n\
    \    [(= number 4000) \"mmmm\"]\n    [(= number 5000) \"mmmmm\"]\n    [(= number\
    \ 6000) \"mmmmmm\"]\n    [(= number 7000) \"mmmmmmm\"]\n    [(= number 8000) \"\
    mmmmmmmm\"]\n    [(= number 9000) \"mmmmmmmmm\"]\n    [(= number 10000) \"mmmmmmmmmm\"\
    ]\n    [(= number 20000) \"mmmmmmmmmmm\"]\n    [(= number 30000", "  (list->string\
    \ (int_to_mini_roman-internal number)))\n", "  (local [(define roman-conversions\n\
    \             (list\n              (list 1 \"i\")\n              (list 5 \"v\"\
    )\n              (list 10 \"x\")\n              (list 50 \"l\")\n            \
    \  (list 100 \"c\")\n              (list 500 \"d\")\n              (list 1000\
    \ \"m\")))\n          (define (int-to-mini-roman-helper n ac)\n            (if\
    \ (= n 0)\n                ac\n                (define (exponentiation-helper\
    \ num exp)\n                  (if (= exp 0)\n                      1\n       \
    \               (* (exponentiation-helper num (- exp 1)) num)))\n            \
    \    (define (floor-helper num)\n                  (define (floor-helper-helper\
    \ num exp)\n                    (if (>= num (exponentiation-helper 10 exp))\n\
    \                        (floor-helper-helper num (+ exp 1))\n               \
    \         (- exp 1)))\n                  (floor-helper-helper num 0))\n      \
    \          (define (floor-helper-2 num)\n                  (define (floor-helper-2-helper\
    \ num exp)\n                    (if (>= num (exponentiation-helper 10 exp))\n\
    \                        (floor-helper-2-helper num (+ exp 1))\n             \
    \           (- exp 2)))\n                  (floor-helper-2-helper num 0))\n  \
    \              (define (roman-helper n rem ac)\n                  (cond\n    \
    \                [(> n 0)\n                     (if (= (remainder n 5) 0)\n  \
    \                       (list-ref roman-conversions\n                        \
    \           (- (/ n (exponentiation-helper 10 (floor-helper n))) 1))\n       \
    \                  (roman-helper (- n 1) (- rem 1) (string-append ac \"i\")))]\n\
    \                    [(< n 0)\n                     (if (= (remainder n 5) 0)\n\
    \                         (list-ref roman-conversions\n                      \
    \             (- (/ n (exponentiation-helper 10 (floor-helper n))) 1))\n     \
    \                    (roman-helper (+ n 1) (- rem 1) (string-append ac \"i\")))]\n\
    \                    [else\n                     ac]))\n                (define\
    \ (roman-helper-2 n rem ac)\n                  (cond\n                    [(>",
  "  (define roman-number-system\n    (list (list 1   \"i\")\n          (list 4  \
    \ \"iv\")\n          (list 5   \"v\")\n          (list 9   \"ix\")\n         \
    \ (list 10  \"x\")\n          (list 40  \"xl\")\n          (list 50  \"l\")\n\
    \          (list 90  \"xc\")\n          (list 100 \"c\")\n          (list 400\
    \ \"cd\")\n          (list 500 \"d\")\n          (list 900 \"cm\")\n         \
    \ (list 1000 \"m\")))\n  (define (int-to-roman-aux num)\n    (cond\n      [(=\
    \ num 0) \"\"]\n      [(< num 1) \"\"]\n      [(and (>= num 1) (<= num 3)) (string-append\
    \ (int-to-roman-aux 1) (int-to-roman-aux (- num 1)))]\n      [(assoc num roman-number-system)\n\
    \        (append-map second (assoc num roman-number-system))]\n      [else (int-to-roman-aux\
    \ (- num (car (car (assoc num roman-number-system)))))]))\n  (define (append-map\
    \ f lst)\n    (cond\n      [(null? lst) '()]\n      [else (append (f (car lst))\
    \ (append-map f (cdr lst)))]))\n  (string-downcase (int-to-roman-aux number)))\n",
  "  (local\n    [(define (repeat-add s n)\n       (if (= n 0)\n           (string)\n\
    \           (string-append s (repeat-add s (- n 1)))))\n     (define (get-ones-numeral\
    \ n)\n       (cond [(= n 1) \"i\"]\n             [(= n 2) \"ii\"]\n          \
    \   [(= n 3) \"iii\"]\n             [(= n 4) \"iv\"]\n             [(= n 5) \"\
    v\"]\n             [(= n 6) \"vi\"]\n             [(= n 7) \"vii\"]\n        \
    \     [(= n 8) \"viii\"]\n             [(= n 9) \"ix\"]))\n     (define (get-tens-numeral\
    \ n)\n       (cond [(= n 1) \"x\"]\n             [(= n 2) \"xx\"]\n          \
    \   [(= n 3) \"xxx\"]\n             [(= n 4) \"xl\"]\n             [(= n 5) \"\
    l\"]\n             [(= n 6) \"lx\"]\n             [(= n 7) \"lxx\"]\n        \
    \     [(= n 8) \"lxxx\"]\n             [(= n 9) \"xc\"]))\n     (define (get-hundreds-numeral\
    \ n)\n       (cond [(= n 1) \"c\"]\n             [(= n 2) \"cc\"]\n          \
    \   [(= n 3) \"ccc\"]\n             [(= n 4) \"cd\"]\n             [(= n 5) \"\
    d\"]\n             [(= n 6) \"dc\"]\n             [(= n 7) \"dcc\"]\n        \
    \     [(= n 8) \"dccc\"]\n             [(= n 9) \"cm\"]))\n     (define (get-thousands-numeral\
    \ n)\n       (cond [(= n 1) \"m\"]\n             [(= n 2) \"mm\"]\n          \
    \   [(= n 3) \"mmm\"]))]\n    (let ([ones (modulo number 10)]\n          [tens\
    \ (modulo (quotient number 10) 10)]\n          [hundreds (modulo (quotient number\
    \ 100) 10)]\n          [thousands (modulo (quotient number 1000) 10)])\n     \
    \ (string-append (get-thousands-numeral thousands)\n                     (get-hundreds-num",
  "  (cond [(zero? number) \"\"]\n        [(< number 10) (cond [(= number 1) \"i\"\
    ]\n                             [(= number 2) \"ii\"]\n                      \
    \       [(= number 3) \"iii\"]\n                             [(= number 4) \"\
    iv\"]\n                             [(= number 5) \"v\"]\n                   \
    \          [(= number 6) \"vi\"]\n                             [(= number 7) \"\
    vii\"]\n                             [(= number 8) \"viii\"]\n               \
    \              [(= number 9) \"ix\"])]\n        [(< number 100) (cond [(= number\
    \ 10) \"x\"]\n                              [(= number 20) \"xx\"]\n         \
    \                     [(= number 30) \"xxx\"]\n                              [(=\
    \ number 40) \"xl\"]\n                              [(= number 50) \"l\"]\n  \
    \                            [(= number 60) \"lx\"]\n                        \
    \      [(= number 70) \"lxx\"]\n                              [(= number 80) \"\
    lxxx\"]\n                              [(= number 90) \"xc\"])]\n        [(< number\
    \ 1000) (cond [(= number 100) \"c\"]\n                               [(= number\
    \ 200) \"cc\"]\n                               [(= number 300) \"ccc\"]\n    \
    \                           [(= number 400) \"cd\"]\n                        \
    \       [(= number 500) \"d\"]\n                               [(= number 600)\
    \ \"dc\"]\n                               [(= number 700) \"dcc\"]\n         \
    \                      [(= number 800) \"dccc\"]\n                           \
    \    [(= number 900) \"cm\"])]\n        [(= number 1000) \"m\"]))\n", "  (let\n\
    \      ([digits (string->list (number->string number))])\n    (let\n        ([first\
    \ (string-&gt;number (string (vector-ref digits 0)))])\n    (cond\n     [(equal?\
    \ (length digits) 1) (mini_rom_1 first)]\n     [(equal? (length digits) 2) (string-append\
    \ (mini_rom_1 (quotient first 10)) (mini_rom_1 (remainder first 10)))]\n     [(equal?\
    \ (length digits) 3) (string-append (mini_rom_1 (quotient first 100)) (mini_rom_1\
    \ (quotient (remainder first 100) 10)) (mini_rom_1 (remainder first 10)))]\n \
    \    [(equal? (length digits) 4) (string-append (mini_rom_1 (quotient first 1000))\
    \ (mini_rom_1 (quotient (remainder first 1000) 100)) (mini_rom_1 (quotient (remainder\
    \ first 100) 10)) (mini_rom_1 (remainder first 10)))]\n     )))))\n", "  (cond\
    \ [(= number 1) \"i\"]\n        [(= number 2) \"ii\"]\n        [(= number 3) \"\
    iii\"]\n        [(= number 4) \"iv\"]\n        [(= number 5) \"v\"]\n        [(=\
    \ number 6) \"vi\"]\n        [(= number 7) \"vii\"]\n        [(= number 8) \"\
    viii\"]\n        [(= number 9) \"ix\"]\n        [(= number 10) \"x\"]\n      \
    \  [(= number 11) \"xi\"]\n        [(= number 12) \"xii\"]\n        [(= number\
    \ 13) \"xiii\"]\n        [(= number 14) \"xiv\"]\n        [(= number 15) \"xv\"\
    ]\n        [(= number 16) \"xvi\"]\n        [(= number 17) \"xvii\"]\n       \
    \ [(= number 18) \"xviii\"]\n        [(= number 19) \"xix\"]\n        [(= number\
    \ 20) \"xx\"]\n        [(= number 30) \"xxx\"]\n        [(= number 40) \"xl\"\
    ]\n        [(= number 50) \"l\"]\n        [(= number 60) \"lx\"]\n        [(=\
    \ number 70) \"lxx\"]\n        [(= number 80) \"lxxx\"]\n        [(= number 90)\
    \ \"xc\"]\n        [(= number 100) \"c\"]\n        [(= number 200) \"cc\"]\n \
    \       [(= number 300) \"ccc\"]\n        [(= number 400) \"cd\"]\n        [(=\
    \ number 500) \"d\"]\n        [(= number 600) \"dc\"]\n        [(= number 700)\
    \ \"dcc\"]\n        [(= number 800) \"dccc\"]\n        [(= number 900) \"cm\"\
    ]\n        [(= number 1000) \"m\"]\n        [(= number 2000) \"mm\"]\n       \
    \ [(= number 3000) \"mmm\"]\n        [(= number 4000) \"m(v)\"]\n        [(= number\
    \ 5000) \"v\"]\n        [(= number 6000) \"vm\"]\n        [(= number 7000) \"\
    vmm\"]\n        [(= number 8000) \"vmmm\"]\n        [(= number 9000) \"m(x)\"\
    ]\n        [(= number 10000) \"x\"]\n        [(= number 20000) \"xx\"]\n     \
    \   [(= number 30000) \"xxx\"]", "  (cond\n    [(= number 1) \"i\"]\n    [(= number\
    \ 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number\
    \ 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number\
    \ 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(=\
    \ number 20) \"xx\"]\n    [(= number 30) \"xxx\"]\n    [(= number 40) \"xl\"]\n\
    \    [(= number 50) \"l\"]\n    [(= number 60) \"lx\"]\n    [(= number 70) \"\
    lxx\"]\n    [(= number 80) \"lxxx\"]\n    [(= number 90) \"xc\"]\n    [(= number\
    \ 100) \"c\"]\n    [(= number 200) \"cc\"]\n    [(= number 300) \"ccc\"]\n   \
    \ [(= number 400) \"cd\"]\n    [(= number 500) \"d\"]\n    [(= number 600) \"\
    dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number 800) \"dccc\"]\n    [(= number\
    \ 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    [else (error \"Number out of\
    \ range.\")]))\n", "  (cond ((= number 1) \"i\")\n        ((= number 2) \"ii\"\
    )\n        ((= number 3) \"iii\")\n        ((= number 4) \"iv\")\n        ((=\
    \ number 5) \"v\")\n        ((= number 6) \"vi\")\n        ((= number 7) \"vii\"\
    )\n        ((= number 8) \"viii\")\n        ((= number 9) \"ix\")\n        ((=\
    \ number 10) \"x\")\n        ((= number 11) \"xi\")\n        ((= number 12) \"\
    xii\")\n        ((= number 13) \"xiii\")\n        ((= number 14) \"xiv\")\n  \
    \      ((= number 15) \"xv\")\n        ((= number 16) \"xvi\")\n        ((= number\
    \ 17) \"xvii\")\n        ((= number 18) \"xviii\")\n        ((= number 19) \"\
    xix\")\n        ((= number 20) \"xx\")\n        ((= number 21) \"xxi\")\n    \
    \    ((= number 22) \"xxii\")\n        ((= number 23) \"xxiii\")\n        ((=\
    \ number 24) \"xxiv\")\n        ((= number 25) \"xxv\")\n        ((= number 26)\
    \ \"xxvi\")\n        ((= number 27) \"xxvii\")\n        ((= number 28) \"xxviii\"\
    )\n        ((= number 29) \"xxix\")\n        ((= number 30) \"xxx\")\n       \
    \ ((= number 31) \"xxxi\")\n        ((= number 32) \"xxxii\")\n        ((= number\
    \ 33) \"xxxiii\")\n        ((= number 34) \"xxxiv\")\n        ((= number 35) \"\
    xxxv\")\n        ((= number 36) \"xxxvi\")\n        ((= number 37) \"xxxvii\"\
    )\n        ((= number 38) \"xxxviii\")\n        ((= number 39) \"xxxix\")\n  \
    \      ((= number 40) \"xl\")\n        ((= number 41) \"xli\")\n        ((= number\
    \ 42) \"xlii\")\n        ((= number 43) \"xliii\")\n        ((= number 44) \"\
    xliv\")\n        ((= number 45) \"xlv\")\n        ((= number 46) \"xlvi\")\n \
    \       ((= number 47", "  (string-&gt;symbol (int-&gt;mini-roman number)))\n",
  "  (let ((i-1 (number->string number))\n        (i-2 (number->string (- number 1)))\n\
    \        (i-4 (number->string (- number 4)))\n        (i-5 (number->string (-\
    \ number 5)))\n        (i-9 (number->string (- number 9))))\n    (cond ((= 0 number)\
    \ \"\")\n          ((= 1 number) \"i\")\n          ((= 2 number) \"ii\")\n   \
    \       ((= 3 number) \"iii\")\n          ((= 4 number) (string-append \"iv\"\
    \ (int_to_mini_roman 0)))\n          ((= 5 number) \"v\")\n          ((= 6 number)\
    \ (string-append \"vi\" (int_to_mini_roman 0)))\n          ((= 7 number) (string-append\
    \ \"vii\" (int_to_mini_roman 0)))\n          ((= 8 number) (string-append \"viii\"\
    \ (int_to_mini_roman 0)))\n          ((= 9 number) (string-append \"ix\" (int_to_mini_roman\
    \ 0)))\n          ((= 10 number) \"x\")\n          ((= 11 number) (string-append\
    \ \"xi\" (int_to_mini_roman 0)))\n          ((= 12 number) (string-append \"xii\"\
    \ (int_to_mini_roman 0)))\n          ((= 13 number) (string-append \"xiii\" (int_to_mini_roman\
    \ 0)))\n          ((= 14 number) (string-append \"xiv\" (int_to_mini_roman 0)))\n\
    \          ((= 15 number) \"xv\")\n          ((= 16 number) (string-append \"\
    xvi\" (int_to_mini_roman 0)))\n          ((= 17 number) (string-append \"xvii\"\
    \ (int_to_mini_roman 0)))\n          ((= 18 number) (string-append \"xviii\" (int_to_mini_roman\
    \ 0)))\n          ((= 19 number) (string-append \"xix\" (int_to_mini_roman 0)))\n\
    \          ((= 20 number) \"xx\")\n          ((= 30 number) \"xxx\")\n       \
    \   ((= 40 number) \"xl\")\n          ((= 50 number) \"l\")\n          ((= 60\
    \ number", "  (local [\n    (define (numerals-below-100 numeral)\n      (list\
    \ numeral (string-append numeral numeral) (string-append numeral numeral numeral)))\n\
    \    (define (numerals-below-1000 numeral)\n      (define nums (numerals-below-100\
    \ numeral))\n      (list (string-append (second nums) (first nums))\n        \
    \    (string-append (third nums) (first nums))\n            (string-append (third\
    \ nums) (second nums))\n            (string-append (third nums) (third nums))))\n\
    \    (define (numerals-below-10000 numeral)\n      (define nums (numerals-below-1000\
    \ numeral))\n      (list (string-append (second nums) (first nums))\n        \
    \    (string-append (third nums) (first nums))\n            (string-append (third\
    \ nums) (second nums))\n            (string-append (third nums) (third nums))))\n\
    \    (define numerals (list (numerals-below-100 \"I\")\n                     \
    \      (numerals-below-100 \"X\")\n                           (numerals-below-100\
    \ \"C\")\n                           (numerals-below-100 \"M\")\n            \
    \               (numerals-below-1000 \"V\")\n                           (numerals-below-1000\
    \ \"L\")\n                           (numerals-below-1000 \"D\")\n           \
    \                (numerals-below-10000 \"M\")))\n    (define (index-of-numeral\
    \ number)\n      (cond\n        [(= number 9) 0]\n        [(= number 4) 1]\n \
    \       [(and (>= number 5) (<= number 8)) 2]\n        [(and (>= number 1) (<=\
    \ number 3)) 3]\n        [else 4]))\n    (define (numerals-at-index index)\n \
    \     (list-ref numerals index))\n    (define (subtract-numerals index1 index2)\n\
    \      (string-append (list-ref (numerals-at-index index1) 0)\n              \
    \       (list-ref (numerals-at-index", "  (if (<= number 1000)\n      (letrec\
    \ ([num-1000 (quotient number 1000)]\n               [num-100 (quotient (remainder\
    \ number 1000) 100)]\n               [num-10 (quotient (remainder number 100)\
    \ 10)]\n               [num-1 (remainder number 10)])\n        (string-append\n\
    \         (replicate \"m\" num-1000)\n         (let ([digits-100 num-100])\n \
    \          (cond\n             [(<= digits-100 3) (replicate \"c\" digits-100)]\n\
    \             [(= digits-100 4) \"cd\"]\n             [(<= digits-100 8) (string-append\
    \ \"d\" (replicate \"c\" (- digits-100 5)))]\n             [(= digits-100 9) \"\
    cm\"]\n             [else \"\"]))\n         (let ([digits-10 num-10])\n      \
    \     (cond\n             [(<= digits-10 3) (replicate \"x\" digits-10)]\n   \
    \          [(= digits-10 4) \"xl\"]\n             [(<= digits-10 8) (string-append\
    \ \"l\" (replicate \"x\" (- digits-10 5)))]\n             [(= digits-10 9) \"\
    xc\"]\n             [else \"\"]))\n         (let ([digits-1 num-1])\n        \
    \   (cond\n             [(<= digits-1 3) (replicate \"i\" digits-1)]\n       \
    \      [(= digits-1 4) \"iv\"]\n             [(<= digits-1 8) (string-append \"\
    v\" (replicate \"i\" (- digits-1 5)))]\n             [(= digits-1 9) \"ix\"]\n\
    \             [else \"\"]))))\n      \"error\"))", "  (cond\n    [(= number 1)\
    \ \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number\
    \ 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number\
    \ 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(=\
    \ number 10) \"x\"]\n    [(= number 20) \"xx\"]\n    [(= number 30) \"xxx\"]\n\
    \    [(= number 40) \"xl\"]\n    [(= number 50) \"l\"]\n    [(= number 60) \"\
    lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number 80) \"lxxx\"]\n    [(= number\
    \ 90) \"xc\"]\n    [(= number 100) \"c\"]\n    [(= number 200) \"cc\"]\n    [(=\
    \ number 300) \"ccc\"]\n    [(= number 400) \"cd\"]\n    [(= number 500) \"d\"\
    ]\n    [(= number 600) \"dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number 800)\
    \ \"dccc\"]\n    [(= number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    ))\n",
  "  (cond ((= number 1) \"i\")\n        ((= number 2) \"ii\")\n        ((= number\
    \ 3) \"iii\")\n        ((= number 4) \"iv\")\n        ((= number 5) \"v\")\n \
    \       ((= number 6) \"vi\")\n        ((= number 7) \"vii\")\n        ((= number\
    \ 8) \"viii\")\n        ((= number 9) \"ix\")\n        ((= number 10) \"x\")\n\
    \        ((= number 49) \"il\")\n        ((= number 50) \"l\")\n        ((= number\
    \ 51) \"li\")\n        ((= number 99) \"xcix\")\n        ((= number 100) \"c\"\
    )\n        ((= number 101) \"ci\")\n        ((= number 499) \"cdxcix\")\n    \
    \    ((= number 500) \"d\")\n        ((= number 501) \"di\")\n        ((= number\
    \ 999) \"cmxcix\")\n        ((= number 1000) \"m\")\n        ((= number 1001)\
    \ \"mi\")\n        (else (error \"number out of range\"))))\n```\n\n```racket\n\
    #lang racket\n", "  (define (convert number roman-symbol high middle)\n    (cond\n\
    \      [(= number high) (string-append roman-symbol\n                        \
    \               (convert (- number high)\n                                   \
    \              roman-symbol\n                                                \
    \ high\n                                                 middle))]\n      [(=\
    \ number middle) (string-append roman-symbol\n                               \
    \         (convert (- number middle)\n                                       \
    \           (string-append roman-symbol\n                                    \
    \                             \"i\")\n                                       \
    \           high\n                                                  middle))]\n\
    \      [(= number 0) \"\"]\n      [else (string-append \"i\"\n               \
    \            (convert (- number 1)\n                                     roman-symbol\n\
    \                                     high\n                                 \
    \    middle))]))\n  (convert number \"m\" 1000 500))\n", "  (define mini-romans\
    \ '((\"\" \"i\" \"ii\" \"iii\" \"iv\" \"v\" \"vi\" \"vii\" \"viii\" \"ix\")\n\
    \                        (\"\" \"x\" \"xx\" \"xxx\" \"xl\" \"l\" \"lx\" \"lxx\"\
    \ \"lxxx\" \"xc\")\n                        (\"\" \"c\" \"cc\" \"ccc\" \"cd\"\
    \ \"d\" \"dc\" \"dcc\" \"dccc\" \"cm\")))\n  (define (to-roman acc remainder)\n\
    \    (if (= 0 remainder)\n        acc\n        (to-roman\n         (string-append\n\
    \          (list-ref (list-ref mini-romans (quotient remainder 10))\n        \
    \           (remainder 10))\n          acc)\n         (quotient remainder 10))))\n\
    \  (to-roman \"\" number))\n", "  (if (= number 1) \"i\"\n    (if (= number 5)\
    \ \"v\"\n      (if (= number 10) \"x\"\n        (if (= number 50) \"l\"\n    \
    \      (if (= number 100) \"c\"\n            (if (= number 500) \"d\"\n      \
    \        (if (= number 1000) \"m\"\n                  \"N/A\"))))))))\n", "  (define\
    \ (minis n)\n    (case n\n      [1 \"i\"]\n      [5 \"v\"]\n      [10 \"x\"]\n\
    \      [50 \"l\"]\n      [100 \"c\"]\n      [500 \"d\"]\n      [1000 \"m\"]))\n\
    \  (define (repeat-minis n r)\n    (if (= n 0)\n        '()\n        (append (list\
    \ (minis (* r n)))\n                (repeat-minis (- n 1) r))))\n  (define (expand\
    \ n)\n    (cond\n      [(= n 0) '()]\n      [(>= n 1000) (append (repeat-minis\
    \ (/ n 1000) 1000) (expand (remainder n 1000)))]\n      [(>= n 500) (append (repeat-minis\
    \ (/ n 500) 500) (expand (remainder n 500)))]\n      [(>= n 100) (append (repeat-minis\
    \ (/ n 100) 100) (expand (remainder n 100)))]\n      [(>= n 50) (append (repeat-minis\
    \ (/ n 50) 50) (expand (remainder n 50)))]\n      [(>= n 10) (append (repeat-minis\
    \ (/ n 10) 10) (expand (remainder n 10)))]\n      [(>= n 5) (append (repeat-minis\
    \ (/ n 5) 5) (expand (remainder n 5)))]\n      [(>= n 1) (append (repeat-minis\
    \ (/ n 1) 1) (expand (remainder n 1)))]))\n  (apply string-append (expand number)))\n",
  "  (if (zero? number)\n      \"\"\n      (let loop ((accu \"\") (number number))\n\
    \        (if (zero? number)\n            accu\n            (let* ((units (modulo\
    \ number 10))\n                   (tens (modulo (quotient number 10) 10))\n  \
    \                 (hundreds (modulo (quotient number 100) 10))\n             \
    \      (thousands (modulo (quotient number 1000) 10)))\n              (loop (list-&gt;string\n\
    \                     (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append (append (append (append (append (append (append (append (append (append\
    \ (append", "  (define (find-least-decimal-place n)\n    (define (find-least-decimal-place-iter\
    \ n acc)\n      (if (< n 10)\n          acc\n          (find-least-decimal-place-iter\
    \ (/ n 10) (+ acc 1))))\n    (find-least-decimal-place-iter n 0))\n  (define (num-to-roman\
    \ place-value)\n    (define (num-to-roman-digit n)\n      (cond ((< n 4)\n   \
    \          (repeat-string (symbol->string (digit-to-letter n)) n))\n         \
    \   ((= n 4)\n             (string-append (symbol->string (digit-to-letter n))\n\
    \                            (symbol->string (digit-to-letter (+ n 1)))))\n  \
    \          ((< n 9)\n             (string-append (symbol->string (digit-to-letter\
    \ (+ n 1)))\n                            (repeat-string (symbol->string (digit-to-letter\
    \ n)) (- n 5))))\n            ((= n 9)\n             (string-append (symbol->string\
    \ (digit-to-letter n))\n                            (symbol->string (digit-to-letter\
    \ (+ n 2)))))))\n    (num-to-roman-digit (/ number place-value)))\n  (define (digit-to-letter\
    \ n)\n    (cond ((= n 1) 'I)\n          ((= n 2) 'V)\n          ((= n 3) 'X)\n\
    \          ((= n 4) 'L)\n          ((= n 5) 'C)\n          ((= n 6) 'D)\n    \
    \      ((= n 7) 'M)))\n  (define (repeat-string str n)\n    (define (repeat-string-iter\
    \ acc str n)\n      (if (= n 0)\n          acc\n          (repeat-string-iter\
    \ (string-append acc str) str (- n 1))))\n    (repeat-string-iter \"\" str n))\n\
    \  (define (convert-place-values n)\n    (define (convert-place-values-iter n\
    \ acc)\n      (if (= n 0)\n          acc\n          (convert-place-values-iter\
    \ (- n 1) (string-append", "  (cond\n    [(= number 1000) \"m\"]\n    [(= number\
    \ 500) \"d\"]\n    [(= number 100) \"c\"]\n    [(= number 50) \"l\"]\n    [(=\
    \ number 10) \"x\"]\n    [(= number 5) \"v\"]\n    [(= number 1) \"i\"]\n    [else\
    \ \"\"]))\n", "  (cond ((= number 1) \"i\")\n        ((= number 2) \"ii\")\n \
    \       ((= number 3) \"iii\")\n        ((= number 4) \"iv\")\n        ((= number\
    \ 5) \"v\")\n        ((= number 6) \"vi\")\n        ((= number 7) \"vii\")\n \
    \       ((= number 8) \"viii\")\n        ((= number 9) \"ix\")\n        ((= number\
    \ 10) \"x\")\n        ((= number 11) \"xi\")\n        ((= number 12) \"xii\")\n\
    \        ((= number 13) \"xiii\")\n        ((= number 14) \"xiv\")\n        ((=\
    \ number 15) \"xv\")\n        ((= number 16) \"xvi\")\n        ((= number 17)\
    \ \"xvii\")\n        ((= number 18) \"xviii\")\n        ((= number 19) \"xix\"\
    )\n        ((= number 20) \"xx\")\n        ((= number 21) \"xxi\")\n        ((=\
    \ number 22) \"xxii\")\n        ((= number 23) \"xxiii\")\n        ((= number\
    \ 24) \"xxiv\")\n        ((= number 25) \"xxv\")\n        ((= number 26) \"xxvi\"\
    )\n        ((= number 27) \"xxvii\")\n        ((= number 28) \"xxviii\")\n   \
    \     ((= number 29) \"xxix\")\n        ((= number 30) \"xxx\")\n        ((= number\
    \ 31) \"xxxi\")\n        ((= number 32) \"xxxii\")\n        ((= number 33) \"\
    xxxiii\")\n        ((= number 34) \"xxxiv\")\n        ((= number 35) \"xxxv\"\
    )\n        ((= number 36) \"xxxvi\")\n        ((= number 37) \"xxxvii\")\n   \
    \     ((= number 38) \"xxxviii\")\n        ((= number 39) \"xxxix\")\n       \
    \ ((= number 40) \"xl\")\n        ((= number 41) \"xli\")\n        ((= number\
    \ 42) \"xlii\")\n        ((= number 43) \"xliii\")\n        ((= number 44) \"\
    xliv\")\n        ((= number 45) \"xlv\")\n        ((= number 46) \"xlvi\")\n \
    \       ((= number 47", "  (cond [(= number 1) \"i\"]\n        [(= number 2) \"\
    ii\"]\n        [(= number 3) \"iii\"]\n        [(= number 4) \"iv\"]\n       \
    \ [(= number 5) \"v\"]\n        [(= number 6) \"vi\"]\n        [(= number 7) \"\
    vii\"]\n        [(= number 8) \"viii\"]\n        [(= number 9) \"ix\"]\n     \
    \   [(= number 10) \"x\"]\n        [(= number 50) \"l\"]\n        [(= number 100)\
    \ \"c\"]\n        [(= number 500) \"d\"]\n        [(= number 1000) \"m\"]\n  \
    \      [else (string-append (int_to_mini_roman (floor (/ number 10)))\n      \
    \                       (int_to_mini_roman (modulo number 10)))]))\n", "  (define\
    \ (concat-map f xs)\n    (apply string-append (map f xs)))\n  (define (hundreds\
    \ h)\n    (cond ((= h 0) \"\")\n          ((= h 1) \"c\")\n          ((= h 2)\
    \ \"cc\")\n          ((= h 3) \"ccc\")\n          ((= h 4) \"cd\")\n         \
    \ ((= h 5) \"d\")\n          ((= h 6) \"dc\")\n          ((= h 7) \"dcc\")\n \
    \         ((= h 8) \"dccc\")\n          ((= h 9) \"cm\")))\n  (define (tens t)\n\
    \    (cond ((= t 0) \"\")\n          ((= t 1) \"x\")\n          ((= t 2) \"xx\"\
    )\n          ((= t 3) \"xxx\")\n          ((= t 4) \"xl\")\n          ((= t 5)\
    \ \"l\")\n          ((= t 6) \"lx\")\n          ((= t 7) \"lxx\")\n          ((=\
    \ t 8) \"lxxx\")\n          ((= t 9) \"xc\")))\n  (define (ones o)\n    (cond\
    \ ((= o 0) \"\")\n          ((= o 1) \"i\")\n          ((= o 2) \"ii\")\n    \
    \      ((= o 3) \"iii\")\n          ((= o 4) \"iv\")\n          ((= o 5) \"v\"\
    )\n          ((= o 6) \"vi\")\n          ((= o 7) \"vii\")\n          ((= o 8)\
    \ \"viii\")\n          ((= o 9) \"ix\")))\n  (cond ((< number 1) \"\")\n     \
    \   ((< number 10) (ones number))\n        ((< number 100) (tens (/ number 10))\
    \ (ones (modulo number 10)))\n        ((< number 1000) (hundreds (/ number 100))\
    \ (tens (/ (modulo number 100) 10)) (ones (modulo number 10)))))\n", "  (define\
    \ (mini_roman_digit n)\n    (cond ((= n 1) \"i\")\n          ((= n 2) \"ii\")\n\
    \          ((= n 3) \"iii\")\n          ((= n 4) \"iv\")\n          ((= n 5) \"\
    v\")\n          ((= n 6) \"vi\")\n          ((= n 7) \"vii\")\n          ((= n\
    \ 8) \"viii\")\n          ((= n 9) \"ix\")))\n  (define (mini_roman_hundreds n)\n\
    \    (cond ((= n 1) \"c\")\n          ((= n 2) \"cc\")\n          ((= n 3) \"\
    ccc\")\n          ((= n 4) \"cd\")\n          ((= n 5) \"d\")\n          ((= n\
    \ 6) \"dc\")\n          ((= n 7) \"dcc\")\n          ((= n 8) \"dccc\")\n    \
    \      ((= n 9) \"cm\")))\n  (define (mini_roman_tens n)\n    (cond ((= n 1) \"\
    x\")\n          ((= n 2) \"xx\")\n          ((= n 3) \"xxx\")\n          ((= n\
    \ 4) \"xl\")\n          ((= n 5) \"l\")\n          ((= n 6) \"lx\")\n        \
    \  ((= n 7) \"lxx\")\n          ((= n 8) \"lxxx\")\n          ((= n 9) \"xc\"\
    )))\n  (define (mini_roman_ones n)\n    (cond ((= n 1) \"i\")\n          ((= n\
    \ 2) \"ii\")\n          ((= n 3) \"iii\")\n          ((= n 4) \"iv\")\n      \
    \    ((= n 5) \"v\")\n          ((= n 6) \"vi\")\n          ((= n 7) \"vii\")\n\
    \          ((= n 8) \"viii\")\n          ((= n 9) \"ix\")))\n  (define (mini_roman_thousands\
    \ n)\n    (cond ((= n 1) \"m\")\n          ((= n 2) \"mm\")\n          ((= n 3)\
    \ \"mmm\")))\n  (define (mini_roman_string n)\n    (local ((define thousands (/\
    \ n 1000))\n            (define hundreds (- (/ n 100", "  (let\n      ([convert_digit\
    \ (lambda (digit remaining_num)\n                        (cond\n             \
    \            [(>= digit 1) (cons \"i\" (convert_digit (- digit 1) remaining_num))]\n\
    \                         [(= digit 0) (if (zero? remaining_num) '() (convert_digit\
    \ 5 (- remaining_num 1)))]))]\n       [convert_tens (lambda (tens remaining_num)\n\
    \                        (cond\n                         [(>= tens 1) (cons \"\
    x\" (convert_tens (- tens 1) remaining_num))]\n                         [(= tens\
    \ 0) (if (zero? remaining_num) '() (convert_tens 5 (- remaining_num 1)))]))]\n\
    \       [convert_hundreds (lambda (hundreds remaining_num)\n                 \
    \          (cond\n                            [(>= hundreds 1) (cons \"c\" (convert_hundreds\
    \ (- hundreds 1) remaining_num))]\n                            [(= hundreds 0)\
    \ (if (zero? remaining_num) '() (convert_hundreds 5 (- remaining_num 1)))]))]\n\
    \       [convert_thousands (lambda (thousands remaining_num)\n               \
    \             (cond\n                             [(>= thousands 1) (cons \"m\"\
    \ (convert_thousands (- thousands 1) remaining_num))]\n                      \
    \       [(= thousands 0) (if (zero? remaining_num) '() (convert_thousands 5 (-\
    \ remaining_num 1)))]))])\n    (let\n        ([ones (modulo number 10)]\n    \
    \     [tens (modulo (quotient number 10) 10)]\n         [hundreds (modulo (quotient\
    \ number 100) 10)]\n         [thousands (modulo (quotient number 1000) 10)])\n\
    \      (convert_thousands thousands (convert_hundreds hundreds (convert_tens tens\
    \ (convert_digit ones 0)))))))\n", "  (define (helper n)\n    (cond ((< n 1) \"\
    \")\n          ((< n 4) (string-append \"i\" (helper (- n 1))))\n          ((<\
    \ n 5) \"iv\")\n          ((< n 9) (string-append \"v\" (helper (- n 5))))\n \
    \         ((< n 10) \"ix\")\n          ((< n 40) (string-append \"x\" (helper\
    \ (- n 10))))\n          ((< n 50) \"xl\")\n          ((< n 90) (string-append\
    \ \"l\" (helper (- n 50))))\n          ((< n 100) \"xc\")\n          ((< n 400)\
    \ (string-append \"c\" (helper (- n 100))))\n          ((< n 500) \"cd\")\n  \
    \        ((< n 900) (string-append \"d\" (helper (- n 500))))\n          ((< n\
    \ 1000) \"cm\")\n          ((< n 4000) (string-append \"m\" (helper (- n 1000))))\n\
    \          (else (error \"argument not in range\"))))\n  (string-downcase (helper\
    \ number)))", "  (cond [(= number 1) \"i\"]\n        [(= number 2) \"ii\"]\n \
    \       [(= number 3) \"iii\"]\n        [(= number 4) \"iv\"]\n        [(= number\
    \ 5) \"v\"]\n        [(= number 6) \"vi\"]\n        [(= number 7) \"vii\"]\n \
    \       [(= number 8) \"viii\"]\n        [(= number 9) \"ix\"]\n        [(= number\
    \ 10) \"x\"]\n        [(= number 11) \"xi\"]\n        [(= number 12) \"xii\"]\n\
    \        [(= number 13) \"xiii\"]\n        [(= number 14) \"xiv\"]\n        [(=\
    \ number 15) \"xv\"]\n        [(= number 16) \"xvi\"]\n        [(= number 17)\
    \ \"xvii\"]\n        [(= number 18) \"xviii\"]\n        [(= number 19) \"xix\"\
    ]\n        [(= number 20) \"xx\"]\n        [(= number 30) \"xxx\"]\n        [(=\
    \ number 40) \"xl\"]\n        [(= number 50) \"l\"]\n        [(= number 60) \"\
    lx\"]\n        [(= number 70) \"lxx\"]\n        [(= number 80) \"lxxx\"]\n   \
    \     [(= number 90) \"xc\"]\n        [(= number 100) \"c\"]\n        [(= number\
    \ 200) \"cc\"]\n        [(= number 300) \"ccc\"]\n        [(= number 400) \"cd\"\
    ]\n        [(= number 500) \"d\"]\n        [(= number 600) \"dc\"]\n        [(=\
    \ number 700) \"dcc\"]\n        [(= number 800) \"dccc\"]\n        [(= number\
    \ 900) \"cm\"]\n        [(= number 1000) \"m\"]\n        [else \"?\"]))\n", " \
    \ (case number\n    [(1) \"i\"]\n    [(5) \"v\"]\n    [(10) \"x\"]\n    [(50)\
    \ \"l\"]\n    [(100) \"c\"]\n    [(500) \"d\"]\n    [(1000) \"m\"]\n    [(otherwise)\
    \ \"\"]))\n", "  (cond [(= number 1) \"i\"]\n        [(= number 2) \"ii\"]\n \
    \       [(= number 3) \"iii\"]\n        [(= number 4) \"iv\"]\n        [(= number\
    \ 5) \"v\"]\n        [(= number 6) \"vi\"]\n        [(= number 7) \"vii\"]\n \
    \       [(= number 8) \"viii\"]\n        [(= number 9) \"ix\"]\n        [(= number\
    \ 10) \"x\"]\n        [(= number 20) \"xx\"]\n        [(= number 30) \"xxx\"]\n\
    \        [(= number 40) \"xl\"]\n        [(= number 50) \"l\"]\n        [(= number\
    \ 60) \"lx\"]\n        [(= number 70) \"lxx\"]\n        [(= number 80) \"lxxx\"\
    ]\n        [(= number 90) \"xc\"]\n        [(= number 100) \"c\"]\n        [(=\
    \ number 200) \"cc\"]\n        [(= number 300) \"ccc\"]\n        [(= number 400)\
    \ \"cd\"]\n        [(= number 500) \"d\"]\n        [(= number 600) \"dc\"]\n \
    \       [(= number 700) \"dcc\"]\n        [(= number 800) \"dccc\"]\n        [(=\
    \ number 900) \"cm\"]\n        [(= number 1000) \"m\"]\n        [else \"\"]))\n",
  "  (cond\n    [(= number 1000) \"m\"]\n    [(= number 500) \"d\"]\n    [(= number\
    \ 100) \"c\"]\n    [(= number 50) \"l\"]\n    [(= number 10) \"x\"]\n    [(= number\
    \ 5) \"v\"]\n    [(= number 1) \"i\"]\n    [else \"\"]))\n", "  (if (= 1 number)\
    \ \"i\"\n      (cond\n        [(= number 2) \"ii\"]\n        [(= number 3) \"\
    iii\"]\n        [(= number 4) \"iv\"]\n        [(= number 5) \"v\"]\n        [(=\
    \ number 6) \"vi\"]\n        [(= number 7) \"vii\"]\n        [(= number 8) \"\
    viii\"]\n        [(= number 9) \"ix\"]\n        [(= number 10) \"x\"]\n      \
    \  [(= number 11) \"xi\"]\n        [(= number 12) \"xii\"]\n        [(= number\
    \ 13) \"xiii\"]\n        [(= number 14) \"xiv\"]\n        [(= number 15) \"xv\"\
    ]\n        [(= number 16) \"xvi\"]\n        [(= number 17) \"xvii\"]\n       \
    \ [(= number 18) \"xviii\"]\n        [(= number 19) \"xix\"]\n        [(= number\
    \ 20) \"xx\"]\n        [(= number 30) \"xxx\"]\n        [(= number 40) \"xl\"\
    ]\n        [(= number 50) \"l\"]\n        [(= number 60) \"lx\"]\n        [(=\
    \ number 70) \"lxx\"]\n        [(= number 80) \"lxxx\"]\n        [(= number 90)\
    \ \"xc\"]\n        [(= number 100) \"c\"]\n        [(= number 200) \"cc\"]\n \
    \       [(= number 300) \"ccc\"]\n        [(= number 400) \"cd\"]\n        [(=\
    \ number 500) \"d\"]\n        [(= number 600) \"dc\"]\n        [(= number 700)\
    \ \"dcc\"]\n        [(= number 800) \"dccc\"]\n        [(= number 900) \"cm\"\
    ]\n        [(= number 1000) \"m\"]\n        [else \"\"])))\n", "  (define (digit_to_mini_roman\
    \ digit)\n    (define (ones value)\n      (match value\n        [(\"1\") \"i\"\
    ]\n        [(\"2\") \"ii\"]\n        [(\"3\") \"iii\"]\n        [(\"4\") \"iv\"\
    ]\n        [(\"5\") \"v\"]\n        [(\"6\") \"vi\"]\n        [(\"7\") \"vii\"\
    ]\n        [(\"8\") \"viii\"]\n        [(\"9\") \"ix\"]))\n    (define (tens value)\n\
    \      (match value\n        [(\"1\") \"x\"]\n        [(\"2\") \"xx\"]\n     \
    \   [(\"3\") \"xxx\"]\n        [(\"4\") \"xl\"]\n        [(\"5\") \"l\"]\n   \
    \     [(\"6\") \"lx\"]\n        [(\"7\") \"lxx\"]\n        [(\"8\") \"lxxx\"]\n\
    \        [(\"9\") \"xc\"]))\n    (define (hundreds value)\n      (match value\n\
    \        [(\"1\") \"c\"]\n        [(\"2\") \"cc\"]\n        [(\"3\") \"ccc\"]\n\
    \        [(\"4\") \"cd\"]\n        [(\"5\") \"d\"]\n        [(\"6\") \"dc\"]\n\
    \        [(\"7\") \"dcc\"]\n        [(\"8\") \"dccc\"]\n        [(\"9\") \"cm\"\
    ]))\n    (match digit\n      [(list hundreds tens ones)\n       (string-append\
    \ hundreds tens ones)]\n      [(list hundreds tens)\n       (string-append hundreds\
    \ tens)]\n      [(list hundreds ones)\n       (string-append hundreds ones)]\n\
    \      [(list hundreds)\n       hundreds]\n      [(list tens ones)\n       (string-append\
    \ tens ones)]\n      [(list tens)\n       tens]\n      [(list ones)\n       ones]))\n\
    \  (define (thousands value)\n    (match value\n      [(\"1\") \"m\"]\n      [(\"\
    2\") \"mm\"]\n      [(\"3\") \"mmm\"]))\n  (define (get-digits number)\n    (let\
    \ ([stringed (number->string number)])\n      (match (string-length stringed)\n\
    \        [(\"4\") (list (substring stringed 0 1) (substring stringed", "    (define\
    \ (convert-ones digit)\n        (cond ((equal? digit 1) \"i\")\n             \
    \ ((equal? digit 2) \"ii\")\n              ((equal? digit 3) \"iii\")\n      \
    \        ((equal? digit 4) \"iv\")\n              ((equal? digit 5) \"v\")\n \
    \             ((equal? digit 6) \"vi\")\n              ((equal? digit 7) \"vii\"\
    )\n              ((equal? digit 8) \"viii\")\n              ((equal? digit 9)\
    \ \"ix\")))\n    (define (convert-tens digit)\n        (cond ((equal? digit 1)\
    \ \"x\")\n              ((equal? digit 2) \"xx\")\n              ((equal? digit\
    \ 3) \"xxx\")\n              ((equal? digit 4) \"xl\")\n              ((equal?\
    \ digit 5) \"l\")\n              ((equal? digit 6) \"lx\")\n              ((equal?\
    \ digit 7) \"lxx\")\n              ((equal? digit 8) \"lxxx\")\n             \
    \ ((equal? digit 9) \"xc\")))\n    (define (convert-hundreds digit)\n        (cond\
    \ ((equal? digit 1) \"c\")\n              ((equal? digit 2) \"cc\")\n        \
    \      ((equal? digit 3) \"ccc\")\n              ((equal? digit 4) \"cd\")\n \
    \             ((equal? digit 5) \"d\")\n              ((equal? digit 6) \"dc\"\
    )\n              ((equal? digit 7) \"dcc\")\n              ((equal? digit 8) \"\
    dccc\")\n              ((equal? digit 9) \"cm\")))\n    (define (convert-thousands\
    \ digit)\n        (cond ((equal? digit 1) \"m\")\n              ((equal? digit\
    \ 2) \"mm\")\n              ((equal? digit 3) \"mmm\")))\n    (define (convert-everything\
    \ number)\n        (string-append (convert-thousands (/ number 1000))\n      \
    \                 (convert-hundreds (/ (- number (* (/ number 1000) 1000)) 100))\n\
    \                       (convert-tens (/ (- number (* (/ number 100) 100)) 10))\n\
    \                       (convert-ones (- number (* (/ number 10) 10)))))\n   \
    \ (convert-everything number))\n```\n\n## Exercise 5\n\n```#lang racket\n", " \
    \ ;; body goes here\n  )\n", "  (let* ([thousands (quotient number 1000)]\n  \
    \       [remainder (modulo number 1000)]\n         [hundreds (quotient remainder\
    \ 100)]\n         [remainder (modulo remainder 100)]\n         [tens (quotient\
    \ remainder 10)]\n         [units (modulo remainder 10)])\n    (string-join\n\
    \     (list\n      (build-roman-string thousands '(\"M\" \"MM\" \"MMM\"))\n  \
    \    (build-roman-string hundreds '(\"C\" \"CC\" \"CCC\" \"CD\" \"D\" \"DC\" \"\
    DCC\" \"DCCC\" \"CM\"))\n      (build-roman-string tens '(\"X\" \"XX\" \"XXX\"\
    \ \"XL\" \"L\" \"LX\" \"LXX\" \"LXXX\" \"XC\"))\n      (build-roman-string units\
    \ '(\"I\" \"II\" \"III\" \"IV\" \"V\" \"VI\" \"VII\" \"VIII\" \"IX\")))\n    \
    \ \"\")))\n", "  (define (convert input remainder)\n    (cond\n      [(= number\
    \ 0) \"\"]\n      [(>= number 1000) (string-append \"m\" (convert (- number 1000)\
    \ 1000))]\n      [(>= number 900) (string-append \"cm\" (convert (- number 900)\
    \ 900))]\n      [(>= number 500) (string-append \"d\" (convert (- number 500)\
    \ 500))]\n      [(>= number 400) (string-append \"cd\" (convert (- number 400)\
    \ 400))]\n      [(>= number 100) (string-append \"c\" (convert (- number 100)\
    \ 100))]\n      [(>= number 90) (string-append \"xc\" (convert (- number 90) 90))]\n\
    \      [(>= number 50) (string-append \"l\" (convert (- number 50) 50))]\n   \
    \   [(>= number 40) (string-append \"xl\" (convert (- number 40) 40))]\n     \
    \ [(>= number 10) (string-append \"x\" (convert (- number 10) 10))]\n      [(>=\
    \ number 9) (string-append \"ix\" (convert (- number 9) 9))]\n      [(>= number\
    \ 5) (string-append \"v\" (convert (- number 5) 5))]\n      [(>= number 4) (string-append\
    \ \"iv\" (convert (- number 4) 4))]\n      [(>= number 1) (string-append \"i\"\
    \ (convert (- number 1) 1))]))\n  (convert number 0))\n", "  (display (1+ (random\
    \ number))))\n", "  (cond\n    ((= number 1000) \"m\")\n    ((= number 500) \"\
    d\")\n    ((= number 100) \"c\")\n    ((= number 50) \"l\")\n    ((= number 10)\
    \ \"x\")\n    ((= number 5) \"v\")\n    ((= number 1) \"i\")\n    ((= number 0)\
    \ \"\")\n    (else\n     (let ((approx-number (approx number)))\n       (string-append\n\
    \        (int_to_mini_roman approx-number)\n        (int_to_mini_roman (- number\
    \ approx-number)))))))\n", "  (local [(define (tens num)\n            (match num\n\
    \              [(? (\u03BB (x) (< x 10)) ) \n               (match num\n     \
    \            [1 \"i\"]\n                 [2 \"ii\"]\n                 [3 \"iii\"\
    ]\n                 [4 \"iv\"]\n                 [5 \"v\"]\n                 [6\
    \ \"vi\"]\n                 [7 \"vii\"]\n                 [8 \"viii\"]\n     \
    \            [9 \"ix\"])]\n              [(? (\u03BB (x) (< x 100)) ) \n     \
    \          (match num\n                 [10 \"x\"]\n                 [20 \"xx\"\
    ]\n                 [30 \"xxx\"]\n                 [40 \"xl\"]\n             \
    \    [50 \"l\"]\n                 [60 \"lx\"]\n                 [70 \"lxx\"]\n\
    \                 [80 \"lxxx\"]\n                 [90 \"xc\"])]\n            \
    \  [(? (\u03BB (x) (< x 1000)) ) \n               (match num\n               \
    \  [100 \"c\"]\n                 [200 \"cc\"]\n                 [300 \"ccc\"]\n\
    \                 [400 \"cd\"]\n                 [500 \"d\"]\n               \
    \  [600 \"dc\"]\n                 [700 \"dcc\"]\n                 [800 \"dccc\"\
    ]\n                 [900 \"cm\"])]\n              [(? (\u03BB (x) (< x 10000))\
    \ ) \n               (match num\n                 [1000 \"m\"])]\n           \
    \   [else \"\"])]\n           (define (hundreds num)\n             (tens (* 10\
    \ (/ num 10)))\n             (tens (% num 10)))\n           (define (thousands\
    \ num)\n             (hundreds (* 10 (/ num 100)))\n             (hundreds (%\
    \ num 100)))\n           (define (ten-thousands num)\n             (thousands\
    \ (* 10 (/ num 1000)))\n             (thousands (% num 1000)))\n           (define\
    \ (hundred-thousands num)\n             (ten-thousands (* 10 (/ num 10000)))\n\
    \             (ten-thousands (% num 10000)))\n           (define (millions num)\n\
    \             (hundred-thousands (* 10 (/ num 100000)))\n             (hundred-thousands\
    \ (% num 100000)))\n           (define (ten-millions num)\n             (millions\
    \ (* 10 (/ num 1000000)))\n             (millions (% num 1000000)))\n        \
    \   (define", "  (define (int-to-mini-roman-iter number result)\n    (cond\n \
    \     [(= number 0) result]\n      [(< number 40) (int-to-mini-roman-iter (- number\
    \ 10) (string-append result \"x\"))]\n      [(< number 50) (int-to-mini-roman-iter\
    \ (- number 40) (string-append result \"xl\"))]\n      [(< number 90) (int-to-mini-roman-iter\
    \ (- number 50) (string-append result \"l\"))]\n      [(< number 100) (int-to-mini-roman-iter\
    \ (- number 90) (string-append result \"xc\"))]\n      [(< number 400) (int-to-mini-roman-iter\
    \ (- number 100) (string-append result \"c\"))]\n      [(< number 500) (int-to-mini-roman-iter\
    \ (- number 400) (string-append result \"cd\"))]\n      [(< number 900) (int-to-mini-roman-iter\
    \ (- number 500) (string-append result \"d\"))]\n      [(< number 1000) (int-to-mini-roman-iter\
    \ (- number 900) (string-append result \"cm\"))]\n      [else (int-to-mini-roman-iter\
    \ (- number 1000) (string-append result \"m\"))]))\n  (int-to-mini-roman-iter\
    \ number \"\"))\n", "  (define mini-romans (list (list 'M 'D 'C 'L 'X 'V 'I)\n\
    \                            (list 'CM 'CD 'XC 'XL 'IX 'IV 'I)\n             \
    \               (list 'DCCCC 'CCCC 'LXXXX 'XXXX 'VIIII 'IIII 'IIII)))\n  (define\
    \ (divider n base)\n    (if (< n base)\n        0\n        (+ 1 (divider (/ n\
    \ base) base))))\n  (define (roman-slice romans number base)\n    (list-ref romans\
    \ (- (divider number base) 1)))\n  (define (roman-string romans base)\n    (string-append\
    \ (roman-slice romans number base)\n                   (roman-string romans (*\
    \ base 10))))\n  (string-append (roman-string (list-ref mini-romans 0) 1000)\n\
    \                 (roman-string (list-ref mini-romans 1) 100)\n              \
    \   (roman-string (list-ref mini-romans 2) 10)))\n", "  (define (mini_roman numeral\
    \ 1000 roman)\n    (mini_roman numeral (/ numeral 10) (string-append \"m\" roman)))\n\
    \  (define (mini_roman numeral 100 roman)\n    (mini_roman numeral (/ numeral\
    \ 10) (string-append \"c\" roman)))\n  (define (mini_roman numeral 10 roman)\n\
    \    (mini_roman numeral (/ numeral 10) (string-append \"x\" roman)))\n  (define\
    \ (mini_roman numeral 1 roman)\n    (mini_roman numeral (/ numeral 10) (string-append\
    \ \"i\" roman)))\n  (mini_roman number 1 \"\"))\n", "  (if (<= number 1000)\n\
    \      (integer->string\n       (for/fold ([final-number 0]) ([number number])\n\
    \         (let* ([numeral (number->numeral number)]\n                [final-number\
    \ (+ final-number (numeral-value numeral))])\n           (display (format \"~a\
    \  ~a  ~a\\n\" final-number (numeral-value numeral) (numeral-numeral numeral)))\n\
    \           (if (<= final-number number)\n               (numeral-numeral numeral)\n\
    \               (numeral-numeral (next-numeral numeral))))))\n      (error \"\
    number must be less than 1000\")))\n", "  (cond [(= number 1) \"i\"]\n       \
    \ [(= number 2) \"ii\"]\n        [(= number 3) \"iii\"]\n        [(= number 4)\
    \ \"iv\"]\n        [(= number 5) \"v\"]\n        [(= number 6) \"vi\"]\n     \
    \   [(= number 7) \"vii\"]\n        [(= number 8) \"viii\"]\n        [(= number\
    \ 9) \"ix\"]\n        [(= number 10) \"x\"]\n        [(= number 11) \"xi\"]\n\
    \        [(= number 12) \"xii\"]\n        [(= number 13) \"xiii\"]\n        [(=\
    \ number 14) \"xiv\"]\n        [(= number 15) \"xv\"]\n        [(= number 16)\
    \ \"xvi\"]\n        [(= number 17) \"xvii\"]\n        [(= number 18) \"xviii\"\
    ]\n        [(= number 19) \"xix\"]\n        [(= number 20) \"xx\"]\n        [(=\
    \ number 30) \"xxx\"]\n        [(= number 40) \"xl\"]\n        [(= number 50)\
    \ \"l\"]\n        [(= number 60) \"lx\"]\n        [(= number 70) \"lxx\"]\n  \
    \      [(= number 80) \"lxxx\"]\n        [(= number 90) \"xc\"]\n        [(= number\
    \ 100) \"c\"]\n        [(= number 200) \"cc\"]\n        [(= number 300) \"ccc\"\
    ]\n        [(= number 400) \"cd\"]\n        [(= number 500) \"d\"]\n        [(=\
    \ number 600) \"dc\"]\n        [(= number 700) \"dcc\"]\n        [(= number 800)\
    \ \"dccc\"]\n        [(= number 900) \"cm\"]\n        [(= number 1000) \"m\"]\n\
    \        [else \"\"]))\n", "  (cond\n    [(= number 1) \"i\"]\n    [(= number\
    \ 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number\
    \ 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number\
    \ 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(=\
    \ number 40) \"xl\"]\n    [(= number 50) \"l\"]\n    [(= number 90) \"xc\"]\n\
    \    [(= number 100) \"c\"]\n    [(= number 400) \"cd\"]\n    [(= number 500)\
    \ \"d\"]\n    [(= number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    [else\
    \ (error \"bad number\")]))\n", "  (for/list ([(ch . val) (in-list '((#\\i 1)\
    \ (#\\v 5) (#\\x 10) (#\\l 50) (#\\c 100) (#\\d 500) (#\\m 1000)))]\n        \
    \     #:when (>= number val))\n    (let ([q (quotient number val)])\n      (string\
    \ ch (if (> q 3)\n                     #\\_\n                     #\\ )\n    \
    \          (for/string ([_ (in-range q)]) ch)))))\n", "  (cond ((= number 1) \"\
    i\")\n        ((= number 2) \"ii\")\n        ((= number 3) \"iii\")\n        ((=\
    \ number 4) \"iv\")\n        ((= number 5) \"v\")\n        ((= number 6) \"vi\"\
    )\n        ((= number 7) \"vii\")\n        ((= number 8) \"viii\")\n        ((=\
    \ number 9) \"ix\")\n        ((= number 10) \"x\")\n        ((= number 11) \"\
    xi\")\n        ((= number 12) \"xii\")\n        ((= number 13) \"xiii\")\n   \
    \     ((= number 14) \"xiv\")\n        ((= number 15) \"xv\")\n        ((= number\
    \ 16) \"xvi\")\n        ((= number 17) \"xvii\")\n        ((= number 18) \"xviii\"\
    )\n        ((= number 19) \"xix\")\n        ((= number 20) \"xx\")\n        ((=\
    \ number 21) \"xxi\")\n        ((= number 22) \"xxii\")\n        ((= number 23)\
    \ \"xxiii\")\n        ((= number 24) \"xxiv\")\n        ((= number 25) \"xxv\"\
    )\n        ((= number 26) \"xxvi\")\n        ((= number 27) \"xxvii\")\n     \
    \   ((= number 28) \"xxviii\")\n        ((= number 29) \"xxix\")\n        ((=\
    \ number 30) \"xxx\")\n        ((= number 31) \"xxxi\")\n        ((= number 32)\
    \ \"xxxii\")\n        ((= number 33) \"xxxiii\")\n        ((= number 34) \"xxxiv\"\
    )\n        ((= number 35) \"xxxv\")\n        ((= number 36) \"xxxvi\")\n     \
    \   ((= number 37) \"xxxvii\")\n        ((= number 38) \"xxxviii\")\n        ((=\
    \ number 39) \"xxxix\")\n        ((= number 40) \"xl\")\n        ((= number 41)\
    \ \"xli\")\n        ((= number 42) \"xlii\")\n        ((= number 43) \"xliii\"\
    )\n        ((= number 44) \"xliv\")\n        ((= number 45) \"xlv\")\n       \
    \ ((= number 46) \"xlvi\")\n        ((= number 47", "  (let ([exp [1000 900 500\
    \ 400 100 90 50 40 10 9 5 4 1]])\n    (define (to-mini-roman number)\n      (cond\n\
    \        [(zero? number) '()]\n        [(>= number (car exp))\n         (append\n\
    \          (append (list (symbol->string (car exp))) (to-mini-roman (- number\
    \ (car exp))))\n          (to-mini-roman (remainder number (car exp))))]\n   \
    \     [else (to-mini-roman (remainder number (car exp)))]))\n    (string-join\
    \ (to-mini-roman number) \"\")))\n", "  (let ([conv-chars\n         (list (list\
    \ 1000 \"m\")\n               (list 900 \"cm\")\n               (list 500 \"d\"\
    )\n               (list 400 \"cd\")\n               (list 100 \"c\")\n       \
    \        (list 90 \"xc\")\n               (list 50 \"l\")\n               (list\
    \ 40 \"xl\")\n               (list 10 \"x\")\n               (list 9 \"ix\")\n\
    \               (list 5 \"v\")\n               (list 4 \"iv\")\n             \
    \  (list 1 \"i\"))])\n    (let loop ([number number] [result \"\"])\n      (if\
    \ (zero? number)\n          result\n          (let* ([lowest-int (apply min (map\
    \ car conv-chars))]\n                 [lowest-char (cadr (assq lowest-int conv-chars))])\n\
    \            (loop (- number lowest-int)\n                  (string-append result\
    \ lowest-char)))))))\n", "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2)\
    \ \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number\
    \ 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number\
    \ 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(=\
    \ number 11) \"xi\"]\n    [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"\
    ]\n    [(= number 14) \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16)\
    \ \"xvi\"]\n    [(= number 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(=\
    \ number 19) \"xix\"]\n    [(= number 20) \"xx\"]\n    [(= number 30) \"xxx\"\
    ]\n    [(= number 40) \"xl\"]\n    [(= number 50) \"l\"]\n    [(= number 60) \"\
    lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number 80) \"lxxx\"]\n    [(= number\
    \ 90) \"xc\"]\n    [(= number 100) \"c\"]\n    [(= number 200) \"cc\"]\n    [(=\
    \ number 300) \"ccc\"]\n    [(= number 400) \"cd\"]\n    [(= number 500) \"d\"\
    ]\n    [(= number 600) \"dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number 800)\
    \ \"dccc\"]\n    [(= number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    [else\
    \ (error \"Not allowed\")]))\n", "  (cond [(= number 1000) \"m\"]\n        [(=\
    \ number 500) \"d\"]\n        [(= number 100) \"c\"]\n        [(= number 50) \"\
    l\"]\n        [(= number 10) \"x\"]\n        [(= number 5) \"v\"]\n        [(=\
    \ number 1) \"i\"]\n        [else \"\"]))\n", "  (define (helper numeral value)\n\
    \    (cond ((= 0 number) \"\")\n          ((>= number value) (string-append numeral\
    \ (helper (- number value) value)))\n          (else (helper number (/ value 10)))))\n\
    \  (let ([roman (cond ((= number 1000) \"m\")\n                     ((= number\
    \ 100) \"c\")\n                     ((= number 10) \"x\")\n                  \
    \   ((= number 1) \"i\"))])\n    (if (string=? roman \"\")\n        (int_to_mini_roman\
    \ (/ number 10))\n        (string-append (helper \"\" number) roman))))\n", " \
    \ (cond [(= number 1) \"i\"]\n        [(= number 2) \"ii\"]\n        [(= number\
    \ 3) \"iii\"]\n        [(= number 4) \"iv\"]\n        [(= number 5) \"v\"]\n \
    \       [(= number 6) \"vi\"]\n        [(= number 7) \"vii\"]\n        [(= number\
    \ 8) \"viii\"]\n        [(= number 9) \"ix\"]\n        [(= number 10) \"x\"]\n\
    \        [(= number 50) \"l\"]\n        [(= number 100) \"c\"]\n        [(= number\
    \ 500) \"d\"]\n        [(= number 1000) \"m\"]\n        [else (error \"Error:\
    \ not allowed.\")]))\n", "  (cond\n    [(= number 1)\n     \"i\"]\n    [(= number\
    \ 2)\n     \"ii\"]\n    [(= number 3)\n     \"iii\"]\n    [(= number 4)\n    \
    \ \"iv\"]\n    [(= number 5)\n     \"v\"]\n    [(= number 6)\n     \"vi\"]\n \
    \   [(= number 7)\n     \"vii\"]\n    [(= number 8)\n     \"viii\"]\n    [(= number\
    \ 9)\n     \"ix\"]\n    [(= number 10)\n     \"x\"]\n    [(= number 20)\n    \
    \ \"xx\"]\n    [(= number 30)\n     \"xxx\"]\n    [(= number 40)\n     \"xl\"\
    ]\n    [(= number 50)\n     \"l\"]\n    [(= number 60)\n     \"lx\"]\n    [(=\
    \ number 70)\n     \"lxx\"]\n    [(= number 80)\n     \"lxxx\"]\n    [(= number\
    \ 90)\n     \"xc\"]\n    [(= number 100)\n     \"c\"]\n    [(= number 200)\n \
    \    \"cc\"]\n    [(= number 300)\n     \"ccc\"]\n    [(= number 400)\n     \"\
    cd\"]\n    [(= number 500)\n     \"d\"]\n    [(= number 600)\n     \"dc\"]\n \
    \   [(= number 700)\n     \"dcc\"]\n    [(= number 800)\n     \"dccc\"]\n    [(=\
    \ number 900)\n     \"cm\"]\n    [(= number 1000)\n     \"m\"]\n    [else\n  \
    \   (error 'int_to_mini_roman \"invalid number\")]))\n", "  (if (<= number 1000)\n\
    \      (cond\n        [(= number 1000) \"m\"]\n        [(= number 900) \"cm\"\
    ]\n        [(= number 500) \"d\"]\n        [(= number 400) \"cd\"]\n        [(=\
    \ number 100) \"c\"]\n        [(= number 90) \"xc\"]\n        [(= number 50) \"\
    l\"]\n        [(= number 40) \"xl\"]\n        [(= number 10) \"x\"]\n        [(=\
    \ number 9) \"ix\"]\n        [(= number 5) \"v\"]\n        [(= number 4) \"iv\"\
    ]\n        [(= number 1) \"i\"]\n        [else (string-append (number->string\
    \ (quotient number 1000)) \"m\")])\n      (if (<= number 3999)\n          (cond\n\
    \            [(= number 3999) \"mmmcmxcix\"]\n            [(= number 3900) \"\
    mmmcm\"]\n            [(= number 3000) \"mmm\"]\n            [(= number 2900)\
    \ \"mcm\"]\n            [(= number 2000) \"mm\"]\n            [(= number 1900)\
    \ \"mcm\"]\n            [(= number 1500) \"md\"]\n            [(= number 1400)\
    \ \"mcd\"]\n            [(= number 1000) \"m\"]\n            [(= number 900) \"\
    cm\"]\n            [(= number 500) \"d\"]\n            [(= number 400) \"cd\"\
    ]\n            [(= number 100) \"c\"]\n            [(= number 90) \"xc\"]\n  \
    \          [(= number 50) \"l\"]\n            [(= number 40) \"xl\"]\n       \
    \     [(= number 10) \"x\"]\n            [(= number 9) \"ix\"]\n            [(=\
    \ number 5) \"v\"]\n            [(= number 4) \"iv\"]\n            [(= number\
    \ 1) \"i\"]\n            [else (string-append (number->string (quotient number\
    \ 1000)) \"m\")])\n          \"invalid\"))\n  )\n", "  (define (power_of_ten n)\n\
    \    (cond\n      [(zero? n) 1]\n      [else (* 10 (power_of_ten (- n 1)))]))\n\
    \  (define (ones n)\n    (cond\n      [(zero? n) \"\"]\n      [(<= n 3) (string-append\
    \ (string-repeat \"I\" n) \"\")]\n      [(= n 4) \"IV\"]\n      [(<= n 8) (string-append\
    \ \"V\" (string-repeat \"I\" (- n 5)))]\n      [else \"IX\"]))\n  (define (tens\
    \ n)\n    (cond\n      [(zero? n) \"\"]\n      [(<= n 3) (string-append (string-repeat\
    \ \"X\" n) \"\")]\n      [(= n 4) \"XL\"]\n      [(<= n 8) (string-append \"L\"\
    \ (string-repeat \"X\" (- n 5)))]\n      [else \"XC\"]))\n  (define (hundreds\
    \ n)\n    (cond\n      [(zero? n) \"\"]\n      [(<= n 3) (string-append (string-repeat\
    \ \"C\" n) \"\")]\n      [(= n 4) \"CD\"]\n      [(<= n 8) (string-append \"D\"\
    \ (string-repeat \"C\" (- n 5)))]\n      [else \"CM\"]))\n  (define (thousands\
    \ n)\n    (cond\n      [(zero? n) \"\"]\n      [(<= n 3) (string-append (string-repeat\
    \ \"M\" n) \"\")]\n      [else \"MMM\"]))\n  (let*\n      ((thous (quotient number\
    \ 1000))\n       (hunds (modulo (quotient number 100) 10))\n       (tens (modulo\
    \ (quotient number 10) 10))\n       (ones (modulo number 10)))\n    (string-append\
    \ (thousands thous) (hundreds hunds) (tens tens) (ones ones))))\n```\n\nCode by\
    \ Peter Salas.\n\n## Savitch\u2019s Problem 3.5\n\nWrite a program that inputs\
    \ an integer and displays it as an English phrase. For example, the input \"4356\"\
    \ should be displayed", "  (local [(define (digit-helper n)\n            (cond\
    \ [(= n 0) \"\"]\n                  [(= n 1) \"i\"]\n                  [(= n 2)\
    \ \"ii\"]\n                  [(= n 3) \"iii\"]\n                  [(= n 4) \"\
    iv\"]\n                  [(= n 5) \"v\"]\n                  [(= n 6) \"vi\"]\n\
    \                  [(= n 7) \"vii\"]\n                  [(= n 8) \"viii\"]\n \
    \                 [(= n 9) \"ix\"]))\n           (define (ten-helper n)\n    \
    \         (cond [(= n 0) \"\"]\n                   [(= n 1) \"x\"]\n         \
    \          [(= n 2) \"xx\"]\n                   [(= n 3) \"xxx\"]\n          \
    \         [(= n 4) \"xl\"]\n                   [(= n 5) \"l\"]\n             \
    \      [(= n 6) \"lx\"]\n                   [(= n 7) \"lxx\"]\n              \
    \     [(= n 8) \"lxxx\"]\n                   [(= n 9) \"xc\"]))\n           (define\
    \ (hundred-helper n)\n             (cond [(= n 0) \"\"]\n                   [(=\
    \ n 1) \"c\"]\n                   [(= n 2) \"cc\"]\n                   [(= n 3)\
    \ \"ccc\"]\n                   [(= n 4) \"cd\"]\n                   [(= n 5) \"\
    d\"]\n                   [(= n 6) \"dc\"]\n                   [(= n 7) \"dcc\"\
    ]\n                   [(= n 8) \"dccc\"]\n                   [(= n 9) \"cm\"]))\n\
    \           (define (thousand-helper n)\n             (cond [(= n 0) \"\"]\n \
    \                  [(= n 1) \"m\"]\n                   [(= n 2) \"mm\"]\n    \
    \               [(= n 3) \"mmm\"]))]\n    (cond [(= number 0) \"\"]\n        \
    \  [(= number 1) \"i\"]\n          [(= number 2) \"ii\"]\n          [(= number\
    \ 3) \"iii\"]\n          [(= number 4) \"iv\"]\n          [(= number 5) \"v\"\
    ]\n          [(= number 6) \"vi\"]\n          [(= number 7) \"vii\"]\n       \
    \   [(= number 8) \"viii\"]\n          [(= number 9) \"ix\"]\n         ", "  (string-join\n\
    \   (match number\n     [(< 3)   '(#\\i #\\i)]\n     [(< 5)   '(#\\i #\\v)]\n\
    \     [(< 8)   '(#\\v #\\i)]\n     [(< 10)  '(#\\v #\\v)]\n     [(< 13)  '(#\\\
    x #\\i)]\n     [(< 15)  '(#\\x #\\v)]\n     [(< 18)  '(#\\x #\\x)]\n     [(< 20)\
    \  '(#\\x #\\x #\\x)]\n     [(< 23)  '(#\\x #\\i #\\x)]\n     [(< 25)  '(#\\x\
    \ #\\v #\\x)]\n     [(< 28)  '(#\\x #\\x #\\x #\\x)]\n     [(< 30)  '(#\\x #\\\
    x #\\x #\\x #\\x)]\n     [(< 33)  '(#\\x #\\i #\\x #\\x #\\x)]\n     [(< 35) \
    \ '(#\\x #\\v #\\x #\\x #\\x)]\n     [(< 38)  '(#\\x #\\x #\\x #\\x #\\x #\\x)]\n\
    \     [(< 40)  '(#\\x #\\x #\\x #\\x #\\x #\\x #\\x)]\n     [(< 43)  '(#\\x #\\\
    i #\\x #\\x #\\x #\\x #\\x)]\n     [(< 45)  '(#\\x #\\v #\\x #\\x #\\x #\\x #\\\
    x)]\n     [(< 48)  '(#\\x #\\x #\\x #\\x #\\x #\\x #\\x #\\x)]\n     [(< 50) \
    \ '(#\\l)]\n     [(< 53)  '(#\\l #\\i)]\n     [(< 55)  '(#\\l #\\v)]\n     [(<\
    \ 58)  '(#\\l #\\x)]\n     [(< 60)  '(#\\l #\\x #\\x)]\n     [(< 63)  '(#\\l #\\\
    x #\\x #\\x)]\n     [(", "  (define (make-roman numeral s)\n    (local [(define\
    \ (make-roman-rec times numeral-string)\n              (if (= times 0)\n     \
    \             \"\"\n                  (string-append numeral-string (make-roman-rec\
    \ (- times 1) numeral-string))))]\n      (make-roman-rec (/ numeral number) s)))\n\
    \  (define (make-roman-numeral-string-by-digit digit)\n    (if (= digit 0)\n \
    \       \"\"\n        (cond\n         [(= digit 1) (make-roman 1 \"I\")]\n   \
    \      [(= digit 2) (make-roman 2 \"I\")]\n         [(= digit 3) (make-roman 3\
    \ \"I\")]\n         [(= digit 4) (string-append (make-roman 1 \"I\") (make-roman\
    \ 5 \"V\"))]\n         [(= digit 5) (make-roman 5 \"V\")]\n         [(= digit\
    \ 6) (string-append (make-roman 5 \"V\") (make-roman 1 \"I\"))]\n         [(=\
    \ digit 7) (string-append (make-roman 5 \"V\") (make-roman 2 \"I\"))]\n      \
    \   [(= digit 8) (string-append (make-roman 5 \"V\") (make-roman 3 \"I\"))]\n\
    \         [(= digit 9) (string-append (make-roman 1 \"I\") (make-roman 10 \"X\"\
    ))]\n         [else (make-roman 10 \"X\")])))\n  (define (make-roman-numeral-string\
    \ str)\n    (cond\n     [(= (string-length str) 1) (make-roman-numeral-string-by-digit\
    \ (string->number (string-take str 1)))]\n     [(= (string-length str) 2) (string-append\
    \ (make-roman-numeral-string-by-digit (string->number (string-take str 1)))\n\
    \                                                (make-roman-numeral-string-by-digit\
    \ (string->number (string-take (string-drop str 1) 1))))]\n     [(= (string-length\
    \ str) 3) (string-append (make-roman-numeral-string-by-digit (string->number (string-take\
    \ str 1)))\n                                                (make-", "  (cond\
    \ ((<= number 0) \"\")\n        ((= number 1) \"i\")\n        ((= number 2) \"\
    ii\")\n        ((= number 3) \"iii\")\n        ((= number 4) \"iv\")\n       \
    \ ((= number 5) \"v\")\n        ((= number 6) \"vi\")\n        ((= number 7) \"\
    vii\")\n        ((= number 8) \"viii\")\n        ((= number 9) \"ix\")\n     \
    \   ((= number 10) \"x\")\n        ((= number 11) \"xi\")\n        ((= number\
    \ 12) \"xii\")\n        ((= number 13) \"xiii\")\n        ((= number 14) \"xiv\"\
    )\n        ((= number 15) \"xv\")\n        ((= number 16) \"xvi\")\n        ((=\
    \ number 17) \"xvii\")\n        ((= number 18) \"xviii\")\n        ((= number\
    \ 19) \"xix\")\n        ((= number 20) \"xx\")\n        ((= number 30) \"xxx\"\
    )\n        ((= number 40) \"xl\")\n        ((= number 50) \"l\")\n        ((=\
    \ number 60) \"lx\")\n        ((= number 70) \"lxx\")\n        ((= number 80)\
    \ \"lxxx\")\n        ((= number 90) \"xc\")\n        ((= number 100) \"c\")\n\
    \        ((= number 200) \"cc\")\n        ((= number 300) \"ccc\")\n        ((=\
    \ number 400) \"cd\")\n        ((= number 500) \"d\")\n        ((= number 600)\
    \ \"dc\")\n        ((= number 700) \"dcc\")\n        ((= number 800) \"dccc\"\
    )\n        ((= number 900) \"cm\")\n        ((= number 1000) \"m\")\n        ((=\
    \ number 2000) \"mm\")\n        ((= number 3000) \"mmm\")\n        ((= number\
    \ 4000) \"mv\")\n        ((= number 5000) \"v\")\n        ((= number 6000) \"\
    vm\")\n        ((= number 7000) \"vmm\")\n        ((= number 8000) \"vmmm\")\n\
    \        ((= number 9000) \"mx\")\n        ((= number 10000) \"x\")\n        (else\
    \ (error \"invalid number\"))))\n", "  (cond\n    ((equal? number 1) \"i\")\n\
    \    ((equal? number 2) \"ii\")\n    ((equal? number 3) \"iii\")\n    ((equal?\
    \ number 4) \"iv\")\n    ((equal? number 5) \"v\")\n    ((equal? number 6) \"\
    vi\")\n    ((equal? number 7) \"vii\")\n    ((equal? number 8) \"viii\")\n   \
    \ ((equal? number 9) \"ix\")\n    ((equal? number 10) \"x\")\n    ((equal? number\
    \ 11) \"xi\")\n    ((equal? number 12) \"xii\")\n    ((equal? number 13) \"xiii\"\
    )\n    ((equal? number 14) \"xiv\")\n    ((equal? number 15) \"xv\")\n    ((equal?\
    \ number 16) \"xvi\")\n    ((equal? number 17) \"xvii\")\n    ((equal? number\
    \ 18) \"xviii\")\n    ((equal? number 19) \"xix\")\n    ((equal? number 20) \"\
    xx\")\n    ((equal? number 21) \"xxi\")\n    ((equal? number 22) \"xxii\")\n \
    \   ((equal? number 23) \"xxiii\")\n    ((equal? number 24) \"xxiv\")\n    ((equal?\
    \ number 25) \"xxv\")\n    ((equal? number 26) \"xxvi\")\n    ((equal? number\
    \ 27) \"xxvii\")\n    ((equal? number 28) \"xxviii\")\n    ((equal? number 29)\
    \ \"xxix\")\n    ((equal? number 30) \"xxx\")\n    ((equal? number 31) \"xxxi\"\
    )\n    ((equal? number 32) \"xxxii\")\n    ((equal? number 33) \"xxxiii\")\n \
    \   ((equal? number 34) \"xxxiv\")\n    ((equal? number 35) \"xxxv\")\n    ((equal?\
    \ number 36) \"xxxvi\")\n    ((equal? number 37) \"xxxvii\")\n    ((equal? number\
    \ 38) \"xxxviii\")\n    ((equal? number 39) \"xxxix\")\n    ((equal? number 40)\
    \ \"xl\")\n    ((equal? number 41) \"xli\")\n    ((equal? number 42) \"xlii\"\
    )\n    ((equal? number 43)", "  (cond\n    [(zero? number) \"\"]\n    [(< number\
    \ 10) (big-conditional number [\"\" \"i\" \"ii\" \"iii\" \"iv\" \"v\" \"vi\" \"\
    vii\" \"viii\" \"ix\"])]\n    [(< number 100) (big-conditional (quotient number\
    \ 10) [\"\" \"x\" \"xx\" \"xxx\" \"xl\" \"l\" \"lx\" \"lxx\" \"lxxx\" \"xc\"])]\n\
    \    [(< number 1000) (big-conditional (quotient number 100) [\"\" \"c\" \"cc\"\
    \ \"ccc\" \"cd\" \"d\" \"dc\" \"dcc\" \"dccc\" \"cm\"])]\n    [else (big-conditional\
    \ (quotient number 1000) [\"\" \"m\" \"mm\" \"mmm\" \"mmmm\" \"mmmmm\" \"mmmmmm\"\
    \ \"mmmmmmm\" \"mmmmmmmm\" \"mmmmmmmmm\"])]))\n", "  (letrec ([n number]\n   \
    \        [_ (define-values (u d c l x v i) (map (cut * n <>)\n               \
    \                                 '(1 5 10 50 100 500 1000)))]\n           [numerals\
    \ (vector 'i 'v 'x 'l 'c 'd 'm)]\n           [value->numeral (curry vector-ref\
    \ numerals)]\n           [_ (define (div n x) (quotient n x))]\n           [_\
    \ (define (mod n x) (remainder n x))]\n           [recurse (lambda (d)\n     \
    \                 (string-append\n                       (let loop ([n d])\n \
    \                        (cond [(= n 0) \"\"]\n                              \
    \ [(< n 4) (string-append (make-string n (value->numeral d)) \"\")]\n        \
    \                       [(= n 4) (string-append (value->numeral d) (value->numeral\
    \ (+ d 1)) \"\")]\n                               [(< n 9) (string-append (value->numeral\
    \ (+ d 1)) (make-string (- n 5) (value->numeral d)) \"\")]\n                 \
    \              [(= n 9) (string-append (value->numeral d) (value->numeral (+ d\
    \ 2)) \"\")]\n                               [else (error 'not-a-roman n)]))\n\
    \                       (recurse (* x 10)))))]\n    (recurse n)))", "  (define\
    \ (digit_conversion digit)\n    (cond\n      [(= digit 0) \"\"]\n      [(= digit\
    \ 1) \"i\"]\n      [(= digit 2) \"ii\"]\n      [(= digit 3) \"iii\"]\n      [(=\
    \ digit 4) \"iv\"]\n      [(= digit 5) \"v\"]\n      [(= digit 6) \"vi\"]\n  \
    \    [(= digit 7) \"vii\"]\n      [(= digit 8) \"viii\"]\n      [(= digit 9) \"\
    ix\"]))\n  (define (tens_conversion digit)\n    (cond\n      [(= digit 0) \"\"\
    ]\n      [(= digit 1) \"x\"]\n      [(= digit 2) \"xx\"]\n      [(= digit 3) \"\
    xxx\"]\n      [(= digit 4) \"xl\"]\n      [(= digit 5) \"l\"]\n      [(= digit\
    \ 6) \"lx\"]\n      [(= digit 7) \"lxx\"]\n      [(= digit 8) \"lxxx\"]\n    \
    \  [(= digit 9) \"xc\"]))\n  (define (hundreds_conversion digit)\n    (cond\n\
    \      [(= digit 0) \"\"]\n      [(= digit 1) \"c\"]\n      [(= digit 2) \"cc\"\
    ]\n      [(= digit 3) \"ccc\"]\n      [(= digit 4) \"cd\"]\n      [(= digit 5)\
    \ \"d\"]\n      [(= digit 6) \"dc\"]\n      [(= digit 7) \"dcc\"]\n      [(= digit\
    \ 8) \"dccc\"]\n      [(= digit 9) \"cm\"]))\n  (define (thousands_conversion\
    \ digit)\n    (cond\n      [(= digit 0) \"\"]\n      [(= digit 1) \"m\"]\n   \
    \   [(= digit 2) \"mm\"]\n      [(= digit 3) \"mmm\"]))\n  (string-append\n  \
    \ (thousands_conversion (quotient number 1000))\n   (hundreds_conversion (quotient\
    \ (remainder number 1000) 100))\n   (tens_conversion (quotient (remainder number\
    \ 100) 10))\n   (digit_conversion (remainder number 10))))\n", "  (if (= number\
    \ 1000)\n      \"m\"\n      (if (= number 100)\n          \"c\"\n          (if\
    \ (= number 10)\n              \"x\"\n              (if (= number 9)\n       \
    \           \"ix\"\n                  (if (= number 5)\n                     \
    \ \"v\"\n                      (if (= number 4)\n                          \"\
    iv\"\n                          (if (= number 1)\n                           \
    \   \"i\"\n                              \"\")))))))))\n", "  (cond [(= number\
    \ 1) \"i\"]\n        [(= number 2) \"ii\"]\n        [(= number 3) \"iii\"]\n \
    \       [(= number 4) \"iv\"]\n        [(= number 5) \"v\"]\n        [(= number\
    \ 6) \"vi\"]\n        [(= number 7) \"vii\"]\n        [(= number 8) \"viii\"]\n\
    \        [(= number 9) \"ix\"]\n        [(= number 10) \"x\"]\n        [(= number\
    \ 11) \"xi\"]\n        [(= number 12) \"xii\"]\n        [(= number 13) \"xiii\"\
    ]\n        [(= number 14) \"xiv\"]\n        [(= number 15) \"xv\"]\n        [(=\
    \ number 16) \"xvi\"]\n        [(= number 17) \"xvii\"]\n        [(= number 18)\
    \ \"xviii\"]\n        [(= number 19) \"xix\"]\n        [(= number 20) \"xx\"]\n\
    \        [(= number 50) \"l\"]\n        [(= number 100) \"c\"]\n        [(= number\
    \ 500) \"d\"]\n        [(= number 1000) \"m\"]\n        [else (error 'int_to_mini_roman\
    \ \"impossible: number = \" number)]))\n", "  (define digit-symbols '((\"M\" \"\
    MM\" \"MMM\")\n                          (\"C\" \"CC\" \"CCC\" \"CD\" \"D\" \"\
    DC\" \"DCC\" \"DCCC\" \"CM\")\n                          (\"X\" \"XX\" \"XXX\"\
    \ \"XL\" \"L\" \"LX\" \"LXX\" \"LXXX\" \"XC\")\n                          (\"\
    I\" \"II\" \"III\" \"IV\" \"V\" \"VI\" \"VII\" \"VIII\" \"IX\")))\n  (define (to-mini-roman\
    \ n d)\n    (if (= d 1)\n        (list-ref (list-ref digit-symbols 0) n)\n   \
    \     (string-append (to-mini-roman (/ n 10) (- d 1))\n                      \
    \ (list-ref (list-ref digit-symbols d) (% n 10)))))\n  (string-downcase (to-mini-roman\
    \ number 3)))\n", "  (match number\n    [(1) \"i\"]\n    [(2) \"ii\"]\n    [(3)\
    \ \"iii\"]\n    [(4) \"iv\"]\n    [(5) \"v\"]\n    [(6) \"vi\"]\n    [(7) \"vii\"\
    ]\n    [(8) \"viii\"]\n    [(9) \"ix\"]\n    [(10) \"x\"]\n    [(11) \"xi\"]\n\
    \    [(12) \"xii\"]\n    [(13) \"xiii\"]\n    [(14) \"xiv\"]\n    [(15) \"xv\"\
    ]\n    [(16) \"xvi\"]\n    [(17) \"xvii\"]\n    [(18) \"xviii\"]\n    [(19) \"\
    xix\"]\n    [(20) \"xx\"]\n    [(21) \"xxi\"]\n    [(22) \"xxii\"]\n    [(23)\
    \ \"xxiii\"]\n    [(24) \"xxiv\"]\n    [(25) \"xxv\"]\n    [(26) \"xxvi\"]\n \
    \   [(27) \"xxvii\"]\n    [(28) \"xxviii\"]\n    [(29) \"xxix\"]\n    [(30) \"\
    xxx\"]\n    [(31) \"xxxi\"]\n    [(32) \"xxxii\"]\n    [(33) \"xxxiii\"]\n   \
    \ [(34) \"xxxiv\"]\n    [(35) \"xxxv\"]\n    [(36) \"xxxvi\"]\n    [(37) \"xxxvii\"\
    ]\n    [(38) \"xxxviii\"]\n    [(39) \"xxxix\"]\n    [(40) \"xl\"]\n    [(41)\
    \ \"xli\"]\n    [(42) \"xlii\"]\n    [(43) \"xliii\"]\n    [(44) \"xliv\"]\n \
    \   [(45) \"xlv\"]\n    [(46) \"xlvi\"]\n    [(47) \"xlvii\"]\n    [(48) \"xlviii\"\
    ]\n    [(49) \"xlix\"]\n    [(50) \"l\"]\n    [(51) \"li\"]\n    [(52) \"lii\"\
    ]\n    [(53) \"liii\"]\n    [(54) \"liv\"]\n    [(55) \"lv\"]\n    [(56) \"lvi\"\
    ]\n    [(57) \"", "  (define (helper num output)\n    (cond [(= num 1000) (string-append\
    \ output \"m\")]\n          [(= num 900) (string-append output \"cm\")]\n    \
    \      [(= num 500) (string-append output \"d\")]\n          [(= num 400) (string-append\
    \ output \"cd\")]\n          [(= num 100) (string-append output \"c\")]\n    \
    \      [(= num 90) (string-append output \"xc\")]\n          [(= num 50) (string-append\
    \ output \"l\")]\n          [(= num 40) (string-append output \"xl\")]\n     \
    \     [(= num 10) (string-append output \"x\")]\n          [(= num 9) (string-append\
    \ output \"ix\")]\n          [(= num 5) (string-append output \"v\")]\n      \
    \    [(= num 4) (string-append output \"iv\")]\n          [(= num 1) (string-append\
    \ output \"i\")]\n          [else (helper (- num num-divisor)\n              \
    \          (string-append output (make-string (quotient num num-divisor) num-letter)))]))\n\
    \    (define num-divisor (if (or (= num 1000) (= num 900) (= num 500) (= num 400)\
    \ (= num 100) (= num 90) (= num 50) (= num 40) (= num 10) (= num 9) (= num 5)\
    \ (= num 4) (= num 1)) num 1))\n    (define num-letter (if (or (= num 1000) (=\
    \ num 900) (= num 500) (= num 400) (= num 100) (= num 90) (= num 50) (= num 40)\
    \ (= num 10) (= num 9) (= num 5) (= num 4) (= num 1)) (string-ref (int_to_mini_roman\
    \ num-divisor) 0) \"\"))\n    (helper num \"\"))\n  (string-downcase (int_to_mini_roman\
    \ number)))\n", "    (if (= number 1000)\n        \"m\"\n        (string-append\n\
    \        (case number\n            [(1) \"i\"]\n            [(2) \"ii\"]\n   \
    \         [(3) \"iii\"]\n            [(4) \"iv\"]\n            [(5) \"v\"]\n \
    \           [(6) \"vi\"]\n            [(7) \"vii\"]\n            [(8) \"viii\"\
    ]\n            [(9) \"ix\"]\n            [(10) \"x\"]\n            [(20) \"xx\"\
    ]\n            [(30) \"xxx\"]\n            [(40) \"xl\"]\n            [(50) \"\
    l\"]\n            [(60) \"lx\"]\n            [(70) \"lxx\"]\n            [(80)\
    \ \"lxxx\"]\n            [(90) \"xc\"]\n            [(100) \"c\"]\n          \
    \  [(200) \"cc\"]\n            [(300) \"ccc\"]\n            [(400) \"cd\"]\n \
    \           [(500) \"d\"]\n            [(600) \"dc\"]\n            [(700) \"dcc\"\
    ]\n            [(800) \"dccc\"]\n            [(900) \"cm\"])\n        (int_to_mini_roman\
    \ (modulo number 10)))))\n", "  (define (int-to-mini-roman-helper number)\n  \
    \  (cond\n      [(= number 1000) 'm]\n      [(= number  900) 'cm]\n      [(= number\
    \  500) 'd]\n      [(= number  400) 'cd]\n      [(= number  100) 'c]\n      [(=\
    \ number   90) 'xc]\n      [(= number   50) 'l]\n      [(= number   40) 'xl]\n\
    \      [(= number   10) 'x]\n      [(= number    9) 'ix]\n      [(= number   \
    \ 5) 'v]\n      [(= number    4) 'iv]\n      [(= number    1) 'i]\n      [else\
    \           '-]))\n\n  (string-join (build-list number int-to-mini-roman-helper)\
    \ \"\"))\n", "  (cond ((= number 1) \"i\")\n        ((= number 2) \"ii\")\n  \
    \      ((= number 3) \"iii\")\n        ((= number 4) \"iv\")\n        ((= number\
    \ 5) \"v\")\n        ((= number 6) \"vi\")\n        ((= number 7) \"vii\")\n \
    \       ((= number 8) \"viii\")\n        ((= number 9) \"ix\")\n        ((= number\
    \ 10) \"x\")\n        ((= number 11) \"xi\")\n        ((= number 12) \"xii\")\n\
    \        ((= number 13) \"xiii\")\n        ((= number 14) \"xiv\")\n        ((=\
    \ number 15) \"xv\")\n        ((= number 16) \"xvi\")\n        ((= number 17)\
    \ \"xvii\")\n        ((= number 18) \"xviii\")\n        ((= number 19) \"xix\"\
    )\n        ((= number 20) \"xx\")\n        ((= number 21) \"xxi\")\n        ((=\
    \ number 22) \"xxii\")\n        ((= number 23) \"xxiii\")\n        ((= number\
    \ 24) \"xxiv\")\n        ((= number 25) \"xxv\")\n        ((= number 26) \"xxvi\"\
    )\n        ((= number 27) \"xxvii\")\n        ((= number 28) \"xxviii\")\n   \
    \     ((= number 29) \"xxix\")\n        ((= number 30) \"xxx\")\n        ((= number\
    \ 31) \"xxxi\")\n        ((= number 32) \"xxxii\")\n        ((= number 33) \"\
    xxxiii\")\n        ((= number 34) \"xxxiv\")\n        ((= number 35) \"xxxv\"\
    )\n        ((= number 36) \"xxxvi\")\n        ((= number 37) \"xxxvii\")\n   \
    \     ((= number 38) \"xxxviii\")\n        ((= number 39) \"xxxix\")\n       \
    \ ((= number 40) \"xl\")\n        ((= number 41) \"xli\")\n        ((= number\
    \ 42) \"xlii\")\n        ((= number 43) \"xliii\")\n        ((= number 44) \"\
    xliv\")\n        ((= number 45) \"xlv\")\n        ((= number 46) \"xlvi\")\n \
    \       ((= number 47", "  (cond ((= number 1) \"i\")\n        ((= number 2) \"\
    ii\")\n        ((= number 3) \"iii\")\n        ((= number 4) \"iv\")\n       \
    \ ((= number 5) \"v\")\n        ((= number 6) \"vi\")\n        ((= number 7) \"\
    vii\")\n        ((= number 8) \"viii\")\n        ((= number 9) \"ix\")\n     \
    \   ((= number 10) \"x\")\n        ((= number 20) \"xx\")\n        ((= number\
    \ 30) \"xxx\")\n        ((= number 40) \"xl\")\n        ((= number 50) \"l\")\n\
    \        ((= number 60) \"lx\")\n        ((= number 70) \"lxx\")\n        ((=\
    \ number 80) \"lxxx\")\n        ((= number 90) \"xc\")\n        ((= number 100)\
    \ \"c\")\n        ((= number 200) \"cc\")\n        ((= number 300) \"ccc\")\n\
    \        ((= number 400) \"cd\")\n        ((= number 500) \"d\")\n        ((=\
    \ number 600) \"dc\")\n        ((= number 700) \"dcc\")\n        ((= number 800)\
    \ \"dccc\")\n        ((= number 900) \"cm\")\n        ((= number 1000) \"m\")\n\
    \        (else (error \"Invalid input! Must be between 1 and 1000.\"))))\n", " \
    \ (cond\n    [(> number 1000) \"too big\"]\n    [(< number 1) \"too small\"]\n\
    \    [else\n     (let ([(ones tens hundreds thousands) (integer->list number)])\n\
    \       (string-append\n        (cond\n          [(zero? thousands) \"\"]\n  \
    \        [(= thousands 1) \"m\"]\n          [(= thousands 2) \"mm\"]\n       \
    \   [(= thousands 3) \"mmm\"])\n        (cond\n          [(zero? hundreds) \"\"\
    ]\n          [(= hundreds 1) \"c\"]\n          [(= hundreds 2) \"cc\"]\n     \
    \     [(= hundreds 3) \"ccc\"]\n          [(= hundreds 4) \"cd\"]\n          [(=\
    \ hundreds 5) \"d\"]\n          [(= hundreds 6) \"dc\"]\n          [(= hundreds\
    \ 7) \"dcc\"]\n          [(= hundreds 8) \"dccc\"]\n          [(= hundreds 9)\
    \ \"cm\"])\n        (cond\n          [(zero? tens) \"\"]\n          [(= tens 1)\
    \ \"x\"]\n          [(= tens 2) \"xx\"]\n          [(= tens 3) \"xxx\"]\n    \
    \      [(= tens 4) \"xl\"]\n          [(= tens 5) \"l\"]\n          [(= tens 6)\
    \ \"lx\"]\n          [(= tens 7) \"lxx\"]\n          [(= tens 8) \"lxxx\"]\n \
    \         [(= tens 9) \"xc\"])\n        (cond\n          [(zero? ones) \"\"]\n\
    \          [(= ones 1) \"i\"]\n          [(= ones 2) \"ii\"]\n          [(= ones\
    \ 3) \"iii\"]\n          [(= ones 4) \"iv\"]\n          [(= ones 5) \"v\"]\n \
    \         [(= ones 6) \"vi\"]\n          [(= ones 7) \"vii\"]\n          [(= ones\
    \ 8) \"viii\"]\n          [(= ones 9) \"ix\"])))]))\n", "  (match number\n   \
    \ [(or 1 5 10 50 100 500 1000) (number->string number)]\n    [(or 2 3 4 6 7 8\
    \ 9) (string-append (string-append (number->string (floor (/ number 1))) \"I\"\
    ) (int_to_mini_roman (remainder number 1)))]\n    [(or 11 12 13 14 15 16 17 18\
    \ 19) (string-append (string-append (number->string (floor (/ number 10))) \"\
    X\") (int_to_mini_roman (remainder number 10)))]\n    [(or 20 30 40 60 70 80 90)\
    \ (string-append (string-append (number->string (floor (/ number 10))) \"X\")\
    \ (int_to_mini_roman (remainder number 10)))]\n    [(or 21 22 23 24 25 26 27 28\
    \ 29) (string-append (string-append (number->string (floor (/ number 10))) \"\
    X\") (int_to_mini_roman (remainder number 10)))]\n    [(or 21 22 23 24 25 26 27\
    \ 28 29) (string-append (string-append (number->string (floor (/ number 10)))\
    \ \"X\") (int_to_mini_roman (remainder number 10)))]\n    [(or 21 22 23 24 25\
    \ 26 27 28 29) (string-append (string-append (number->string (floor (/ number\
    \ 10))) \"X\") (int_to_mini_roman (remainder number 10)))]\n    [(or 21 22 23\
    \ 24 25 26 27 28 29) (string-append (string-append (number->string (floor (/ number\
    \ 10))) \"X\") (int_to_mini_roman (remainder number 10)))]\n    [(or 21 22 23\
    \ 24 25 26 27 28 29) (string-append (string-append (number->string (floor (/ number\
    \ 10))) \"X\") (int_to_mini_roman (remainder number 10)))]\n    [(or 21 22 23\
    \ 24 25 26 27 28 29) (string-append (string-append (number->string (floor (/ number\
    \ 10))) \"X\") (int_to_mini_roman (remainder number 10)))]\n    [(or 21 22 23\
    \ 24 25 26 27 28 29) (string-append (string-append (number->string (floor (/ number\
    \ 10))) \"X", "  (define (arabic-to-roman arabic-numeral)\n    (cond ((= arabic-numeral\
    \ 0) \"\")\n          ((= arabic-numeral 1) \"i\")\n          ((= arabic-numeral\
    \ 2) \"ii\")\n          ((= arabic-numeral 3) \"iii\")\n          ((= arabic-numeral\
    \ 4) \"iv\")\n          ((= arabic-numeral 5) \"v\")\n          ((= arabic-numeral\
    \ 6) \"vi\")\n          ((= arabic-numeral 7) \"vii\")\n          ((= arabic-numeral\
    \ 8) \"viii\")\n          ((= arabic-numeral 9) \"ix\")\n          ((= arabic-numeral\
    \ 10) \"x\")\n          ((= arabic-numeral 40) \"xl\")\n          ((= arabic-numeral\
    \ 50) \"l\")\n          ((= arabic-numeral 90) \"xc\")\n          ((= arabic-numeral\
    \ 100) \"c\")\n          ((= arabic-numeral 400) \"cd\")\n          ((= arabic-numeral\
    \ 500) \"d\")\n          ((= arabic-numeral 900) \"cm\")\n          ((= arabic-numeral\
    \ 1000) \"m\")))\n  (define (result numeral-string)\n    (string-downcase numeral-string))\n\
    \  (define (int-to-string-helper arabic-numeral)\n    (result (arabic-to-roman\
    \ arabic-numeral)))\n  (if (<= number 1000)\n      (int-to-string-helper number)\n\
    \      (printf \"Number not in range 1 <= ~a <= 1000!\\n\" number)))\n", "  ;;\
    \ Convert the given number to a roman numeral (using the roman-numerals\n  ;;\
    \ package) and then lowercase the string.\n  (string-downcase (int-&gt;roman number)))\n",
  "  (define (int-to-roman num)\n    (cond\n      [(= num 1000) 'M]\n      [(= num\
    \ 500) 'D]\n      [(= num 100) 'C]\n      [(= num 50) 'L]\n      [(= num 10) 'X]\n\
    \      [(= num 5) 'V]\n      [(= num 1) 'I]))\n  (define (denom base)\n    (let\
    \ ([tens (/ base 10)])\n      (cond\n        [(= tens 1000) 'M]\n        [(= tens\
    \ 100) 'C]\n        [(= tens 10) 'X]\n        [(= tens 1) 'I])))\n  (define (num-to-roman\
    \ num)\n    (cond\n      [(= num 10) (list (int-to-roman num))]\n      [(= num\
    \ 9) (list (int-to-roman num) (denom num))]\n      [(= num 5) (list (int-to-roman\
    \ num))]\n      [(= num 4) (list (int-to-roman num) (denom num))]\n      [(< num\
    \ 4) (append (make-list (- num 1) (int-to-roman 1)))]\n      [(= num 1) (list\
    \ (int-to-roman num))]))\n  (define (accumulate-roman num)\n    (cond\n      [(=\
    \ num 0) '()]\n      [(>= num 1000) (append (num-to-roman 1000) (accumulate-roman\
    \ (- num 1000)))]\n      [(>= num 500) (append (num-to-roman 500) (accumulate-roman\
    \ (- num 500)))]\n      [(>= num 100) (append (num-to-roman 100) (accumulate-roman\
    \ (- num 100)))]\n      [(>= num 50) (append (num-to-roman 50) (accumulate-roman\
    \ (- num 50)))]\n      [(>= num 10) (append (num-to-roman 10) (accumulate-roman\
    \ (- num 10)))]\n      [(>= num 5) (append (num-to-roman 5) (accumulate-roman\
    \ (- num 5)))]\n      [(>= num 1) (append (num-to-roman", "  (cond ((= number\
    \ 1) \"i\")\n        ((= number 2) \"ii\")\n        ((= number 3) \"iii\")\n \
    \       ((= number 4) \"iv\")\n        ((= number 5) \"v\")\n        ((= number\
    \ 6) \"vi\")\n        ((= number 7) \"vii\")\n        ((= number 8) \"viii\")\n\
    \        ((= number 9) \"ix\")\n        ((= number 10) \"x\")\n        ((= number\
    \ 11) \"xi\")\n        ((= number 12) \"xii\")\n        ((= number 13) \"xiii\"\
    )\n        ((= number 14) \"xiv\")\n        ((= number 15) \"xv\")\n        ((=\
    \ number 16) \"xvi\")\n        ((= number 17) \"xvii\")\n        ((= number 18)\
    \ \"xviii\")\n        ((= number 19) \"xix\")\n        ((= number 20) \"xx\")\n\
    \        ((= number 21) \"xxi\")\n        ((= number 22) \"xxii\")\n        ((=\
    \ number 23) \"xxiii\")\n        ((= number 24) \"xxiv\")\n        ((= number\
    \ 25) \"xxv\")\n        ((= number 26) \"xxvi\")\n        ((= number 27) \"xxvii\"\
    )\n        ((= number 28) \"xxviii\")\n        ((= number 29) \"xxix\")\n    \
    \    ((= number 30) \"xxx\")\n        ((= number 31) \"xxxi\")\n        ((= number\
    \ 32) \"xxxii\")\n        ((= number 33) \"xxxiii\")\n        ((= number 34) \"\
    xxxiv\")\n        ((= number 35) \"xxxv\")\n        ((= number 36) \"xxxvi\")\n\
    \        ((= number 37) \"xxxvii\")\n        ((= number 38) \"xxxviii\")\n   \
    \     ((= number 39) \"xxxix\")\n        ((= number 40) \"xl\")\n        ((= number\
    \ 41) \"xli\")\n        ((= number 42) \"xlii\")\n        ((= number 43) \"xliii\"\
    )\n        ((= number 44) \"xliv\")\n        ((= number 45) \"xlv\")\n       \
    \ ((= number 46) \"xlvi\")\n        ((= number 47", "  (match number\n    [(or\
    \ 1 5 10 50 100 500 1000)\n     (case number\n       [(1) \"i\"]\n       [(5)\
    \ \"v\"]\n       [(10) \"x\"]\n       [(50) \"l\"]\n       [(100) \"c\"]\n   \
    \    [(500) \"d\"]\n       [(1000) \"m\"])]\n    [(or 2 3 4 6 7 8 9)\n     (let\
    \ ([unit (case (modulo number 10)\n                   [(1) \"i\"]\n          \
    \         [(5) \"v\"]\n                   [(10) \"x\"])])\n       (string-append\
    \ (make-string (/ number 10) unit))))\n    [(or 11 12 13 14 15 16 17 18 19)\n\
    \     (string-append (make-string (/ number 10) \"x\")\n                    (case\
    \ (modulo number 10)\n                      [(1) \"i\"]\n                    \
    \  [(5) \"v\"]\n                      [(10) \"x\"]))]\n    [(or 20 30 40 60 70\
    \ 80 90)\n     (let ([unit (case (modulo number 10)\n                   [(1) \"\
    i\"]\n                   [(5) \"v\"]\n                   [(10) \"x\"])])\n   \
    \    (string-append (make-string (/ number 10) \"x\")\n                      (make-string\
    \ (/ (modulo number 10) 5) unit))))\n    [(or 21 22 23 24 25 26 27 28 29)\n  \
    \   (string-append (make-string (/ number 10) \"x\")\n                    (case\
    \ (modulo number 10)\n                      [(1) \"i\"]\n                    \
    \  [(5) \"v\"]\n                      [(10) \"x\"]))]\n    [(or 60 70 80 90)\n\
    \     (let ([unit (case (modulo number 10)\n                   [(1) \"i\"]\n \
    \                  [(5) \"v\"]\n                   [(10) \"x\"])])\n       (string-append\
    \ (make-string (/ number 10) \"l\")\n                      (make-string (/ (modulo\
    \ number 10) 5) unit))))\n    [(or 61 62 63 64 65 66 67 68 69)\n     (string-append\
    \ (make-string (/ number 10) \"l\")\n                    (case (modulo number\
    \ 10)\n                      [(1) \"i\"]\n                      [(5) \"v\"]\n\
    \                      [(10)", "  (let ((roman-units\n         '((1 . \"i\") (2\
    \ . \"ii\") (3 . \"iii\") (4 . \"iv\") (5 . \"v\") (6 . \"vi\")\n           (7\
    \ . \"vii\") (8 . \"viii\") (9 . \"ix\")))\n        (roman-tens\n         '((1\
    \ . \"x\") (2 . \"xx\") (3 . \"xxx\") (4 . \"xl\") (5 . \"l\") (6 . \"lx\")\n\
    \           (7 . \"lxx\") (8 . \"lxxx\") (9 . \"xc\")))\n        (roman-hundreds\n\
    \         '((1 . \"c\") (2 . \"cc\") (3 . \"ccc\") (4 . \"cd\") (5 . \"d\") (6\
    \ . \"dc\")\n           (7 . \"dcc\") (8 . \"dccc\") (9 . \"cm\")))\n        (roman-thousands\n\
    \         '((1 . \"m\") (2 . \"mm\") (3 . \"mmm\"))))\n    (cond ((>= number 1000)\n\
    \           (string-append (assoc-ref roman-thousands (/ number 1000))\n     \
    \                     (int_to_mini_roman (modulo number 1000))))\n          ((>=\
    \ number 100)\n           (string-append (assoc-ref roman-hundreds (/ number 100))\n\
    \                          (int_to_mini_roman (modulo number 100))))\n       \
    \   ((>= number 10)\n           (string-append (assoc-ref roman-tens (/ number\
    \ 10))\n                          (int_to_mini_roman (modulo number 10))))\n \
    \         ((>= number 1)\n           (assoc-ref roman-units number)))))\n", " \
    \ (cond\n    ((<= number 0) \"\")\n    ((<= number 1000) (mini_roman_helper number\
    \ 1000 \"M\"))\n    (else \"Error\")))\n", "  (define (process-digit digit roman-number)\n\
    \    (cond\n      [(= digit 0) roman-number]\n      [(= digit 1) (string-append\
    \ roman-number \"i\")]\n      [(= digit 2) (string-append roman-number \"ii\"\
    )]\n      [(= digit 3) (string-append roman-number \"iii\")]\n      [(= digit\
    \ 4) (string-append roman-number \"iv\")]\n      [(= digit 5) (string-append roman-number\
    \ \"v\")]\n      [(= digit 6) (string-append roman-number \"vi\")]\n      [(=\
    \ digit 7) (string-append roman-number \"vii\")]\n      [(= digit 8) (string-append\
    \ roman-number \"viii\")]\n      [(= digit 9) (string-append roman-number \"ix\"\
    )]))\n  (define (process-tens digit roman-number)\n    (cond\n      [(= digit\
    \ 0) roman-number]\n      [(= digit 1) (string-append roman-number \"x\")]\n \
    \     [(= digit 2) (string-append roman-number \"xx\")]\n      [(= digit 3) (string-append\
    \ roman-number \"xxx\")]\n      [(= digit 4) (string-append roman-number \"xl\"\
    )]\n      [(= digit 5) (string-append roman-number \"l\")]\n      [(= digit 6)\
    \ (string-append roman-number \"lx\")]\n      [(= digit 7) (string-append roman-number\
    \ \"lxx\")]\n      [(= digit 8) (string-append roman-number \"lxxx\")]\n     \
    \ [(= digit 9) (string-append roman-number \"xc\")]))\n  (define (process-hundreds\
    \ digit roman-number)\n    (cond\n      [(= digit 0) roman-number]\n      [(=\
    \ digit 1) (string-append roman-number \"c\")]\n      [(= digit 2) (string-append\
    \ roman-number \"cc\")]\n      [(= digit 3) (string-append roman-number \"ccc\"\
    )]\n      [(= digit 4) (string-append r", "  (let ([mini-roman-number-map\n  \
    \       (build-map-data\n          [1    \"i\"\n           4    \"iv\"\n     \
    \      5    \"v\"\n           9    \"ix\"\n           10   \"x\"\n           40\
    \   \"xl\"\n           50   \"l\"\n           90   \"xc\"\n           100  \"\
    c\"\n           400  \"cd\"\n           500  \"d\"\n           900  \"cm\"\n \
    \          1000 \"m\"])]\n        ;; extract keys and values from the map into\
    \ separate lists\n        [mini-roman-keys\n         (sort (map (lambda (x) (car\
    \ x)) mini-roman-number-map) >)]\n        [mini-roman-values\n         (map (lambda\
    \ (x) (cdr x)) mini-roman-number-map)])\n    (define (loop number result)\n  \
    \    (if (<= 1 number)\n          (loop (- number (car mini-roman-keys))\n   \
    \             (string-append (list-ref mini-roman-values\n                   \
    \                      (car mini-roman-keys))\n                              \
    \ result))\n          result))\n    (loop number \"\")))\n", "  (for/string ([i\
    \ (in-range number)]\n               #:when (= 1 (remainder i 10)))\n    \"i\"\
    ))\n", "  (define (mini_roman_digit roman)\n    (cond\n      [(equal? roman 0)\
    \ \"\"]\n      [(equal? roman 1) \"i\"]\n      [(equal? roman 2) \"ii\"]\n   \
    \   [(equal? roman 3) \"iii\"]\n      [(equal? roman 4) \"iv\"]\n      [(equal?\
    \ roman 5) \"v\"]\n      [(equal? roman 6) \"vi\"]\n      [(equal? roman 7) \"\
    vii\"]\n      [(equal? roman 8) \"viii\"]\n      [(equal? roman 9) \"ix\"]))\n\
    \  (define (mini_roman_tens roman)\n    (cond\n      [(equal? roman 0) \"\"]\n\
    \      [(equal? roman 1) \"x\"]\n      [(equal? roman 2) \"xx\"]\n      [(equal?\
    \ roman 3) \"xxx\"]\n      [(equal? roman 4) \"xl\"]\n      [(equal? roman 5)\
    \ \"l\"]\n      [(equal? roman 6) \"lx\"]\n      [(equal? roman 7) \"lxx\"]\n\
    \      [(equal? roman 8) \"lxxx\"]\n      [(equal? roman 9) \"xc\"]))\n  (define\
    \ (mini_roman_hundreds roman)\n    (cond\n      [(equal? roman 0) \"\"]\n    \
    \  [(equal? roman 1) \"c\"]\n      [(equal? roman 2) \"cc\"]\n      [(equal? roman\
    \ 3) \"ccc\"]\n      [(equal? roman 4) \"cd\"]\n      [(equal? roman 5) \"d\"\
    ]\n      [(equal? roman 6) \"dc\"]\n      [(equal? roman 7) \"dcc\"]\n      [(equal?\
    \ roman 8) \"dccc\"]\n      [(equal? roman 9) \"cm\"]))\n  (define (mini_roman_thousands\
    \ roman)\n    (cond\n      [(equal? roman 0) \"\"]\n      [(equal? roman 1) \"\
    m\"]\n      [(equal? roman 2) \"mm\"]\n      [(equal? roman 3) \"mmm\"]))\n  (define\
    \ (mini_roman_number roman-number)\n    (string-append\n     ", "  (define (mini_hundreds)\n\
    \    (case (/ number 100)\n      ((0) \"\")\n      ((1) \"c\")\n      ((2) \"\
    cc\")\n      ((3) \"ccc\")\n      ((4) \"cd\")\n      ((5) \"d\")\n      ((6)\
    \ \"dc\")\n      ((7) \"dcc\")\n      ((8) \"dccc\")\n      ((9) \"cm\")))\n \
    \ (define (mini_tens)\n    (case (/ (% number 100) 10)\n      ((0) \"\")\n   \
    \   ((1) \"x\")\n      ((2) \"xx\")\n      ((3) \"xxx\")\n      ((4) \"xl\")\n\
    \      ((5) \"l\")\n      ((6) \"lx\")\n      ((7) \"lxx\")\n      ((8) \"lxxx\"\
    )\n      ((9) \"xc\")))\n  (define (mini_ones)\n    (case (% number 10)\n    \
    \  ((0) \"\")\n      ((1) \"i\")\n      ((2) \"ii\")\n      ((3) \"iii\")\n  \
    \    ((4) \"iv\")\n      ((5) \"v\")\n      ((6) \"vi\")\n      ((7) \"vii\")\n\
    \      ((8) \"viii\")\n      ((9) \"ix\")))\n  (string-append (mini_hundreds)\
    \ (mini_tens) (mini_ones)))", "  (if (< number 10)\n      (if (< number 4)\n \
    \         (begin\n            (set! temp-num (- number 1))\n            (string-append\
    \ \"i\" (int_to_mini_roman temp-num)))\n          (begin\n            (set! temp-num\
    \ (- number 5))\n            (string-append \"v\" (int_to_mini_roman temp-num))))\n\
    \      (if (< number 40)\n          (begin\n            (set! temp-num (- number\
    \ 10))\n            (string-append \"x\" (int_to_mini_roman temp-num)))\n    \
    \      (begin\n            (set! temp-num (- number 50))\n            (string-append\
    \ \"l\" (int_to_mini_roman temp-num))))))\n", "  (define (numerals n)\n    (cond\
    \ ((= n 1) \"i\")\n          ((= n 2) \"ii\")\n          ((= n 3) \"iii\")\n \
    \         ((= n 4) \"iv\")\n          ((= n 5) \"v\")\n          ((= n 6) \"vi\"\
    )\n          ((= n 7) \"vii\")\n          ((= n 8) \"viii\")\n          ((= n\
    \ 9) \"ix\")\n          ((= n 10) \"x\")\n          ((= n 20) \"xx\")\n      \
    \    ((= n 30) \"xxx\")\n          ((= n 40) \"xl\")\n          ((= n 50) \"l\"\
    )\n          ((= n 60) \"lx\")\n          ((= n 70) \"lxx\")\n          ((= n\
    \ 80) \"lxxx\")\n          ((= n 90) \"xc\")\n          ((= n 100) \"c\")\n  \
    \        ((= n 200) \"cc\")\n          ((= n 300) \"ccc\")\n          ((= n 400)\
    \ \"cd\")\n          ((= n 500) \"d\")\n          ((= n 600) \"dc\")\n       \
    \   ((= n 700) \"dcc\")\n          ((= n 800) \"dccc\")\n          ((= n 900)\
    \ \"cm\")\n          ((= n 1000) \"m\")\n          ((< n 10) (string-append (numerals\
    \ (modulo n 10)) (numerals (/ n 10))))\n          ((< n 100) (string-append (numerals\
    \ (modulo n 100)) (numerals (/ n 100))))\n          ((< n 1000) (string-append\
    \ (numerals (modulo n 1000)) (numerals (/ n 1000))))))\n  (numerals number))\n",
  "  (cond\n    [(= number 1000) \"m\"]\n    [(= number 900) \"cm\"]\n    [(= number\
    \ 500) \"d\"]\n    [(= number 400) \"cd\"]\n    [(= number 100) \"c\"]\n    [(=\
    \ number 90) \"xc\"]\n    [(= number 50) \"l\"]\n    [(= number 40) \"xl\"]\n\
    \    [(= number 10) \"x\"]\n    [(= number 9) \"ix\"]\n    [(= number 5) \"v\"\
    ]\n    [(= number 4) \"iv\"]\n    [(= number 1) \"i\"]\n    [else (\n      (define\
    \ (rest-of-roman-numeral number)\n        (cond\n          [(= number 1000) \"\
    m\"]\n          [(= number 900) \"cm\"]\n          [(= number 500) \"d\"]\n  \
    \        [(= number 400) \"cd\"]\n          [(= number 100) \"c\"]\n         \
    \ [(= number 90) \"xc\"]\n          [(= number 50) \"l\"]\n          [(= number\
    \ 40) \"xl\"]\n          [(= number 10) \"x\"]\n          [(= number 9) \"ix\"\
    ]\n          [(= number 5) \"v\"]\n          [(= number 4) \"iv\"]\n         \
    \ [(= number 1) \"i\"]\n          [else (\n            (define (rest-of-roman-numeral\
    \ number)\n              (cond\n                [(= number 1000) \"m\"]\n    \
    \            [(= number 900) \"cm\"]\n                [(= number 500) \"d\"]\n\
    \                [(= number 400) \"cd\"]\n                [(= number 100) \"c\"\
    ]\n                [(= number 90) \"xc\"]\n                [(= number 50) \"l\"\
    ]\n                [(= number 40) \"xl\"]\n                [(= number 10) \"x\"\
    ]\n                [(= number 9) \"ix\"]\n                [(= number 5) \"v\"\
    ]\n                [(= number 4) \"iv\"]\n                [(= number 1) \"i\"\
    ]\n                [else \"\"])\n              )\n            (rest-of-roman-numeral\
    \ (quotient number 10))\n            )\n          ]\n        )\n      )\n    \
    \  (rest-of-roman-numeral (quotient number 10))\n      )\n    ]\n  )\n", "  (cond\n\
    \    [(<= number 0) \"\"]\n    [(<= number 100) (concat (int_to_mini_roman (/\
    \ number 10)) (mini_roman_digit (/ number 10)))]\n    [(<= number 1000) (concat\
    \ (mini_roman_digit (/ number 100)) (int_to_mini_roman (- number (* 100 (/ number\
    \ 100)))))]))\n", "  (cond ((= number 1) \"i\")\n        ((= number 2) \"ii\"\
    )\n        ((= number 3) \"iii\")\n        ((= number 4) \"iv\")\n        ((=\
    \ number 5) \"v\")\n        ((= number 6) \"vi\")\n        ((= number 7) \"vii\"\
    )\n        ((= number 8) \"viii\")\n        ((= number 9) \"ix\")\n        ((=\
    \ number 10) \"x\")\n        ((= number 11) \"xi\")\n        ((= number 12) \"\
    xii\")\n        ((= number 13) \"xiii\")\n        ((= number 14) \"xiv\")\n  \
    \      ((= number 15) \"xv\")\n        ((= number 16) \"xvi\")\n        ((= number\
    \ 17) \"xvii\")\n        ((= number 18) \"xviii\")\n        ((= number 19) \"\
    xix\")\n        ((= number 20) \"xx\")\n        ((= number 30) \"xxx\")\n    \
    \    ((= number 40) \"xl\")\n        ((= number 50) \"l\")\n        ((= number\
    \ 60) \"lx\")\n        ((= number 70) \"lxx\")\n        ((= number 80) \"lxxx\"\
    )\n        ((= number 90) \"xc\")\n        ((= number 100) \"c\")\n        ((=\
    \ number 200) \"cc\")\n        ((= number 300) \"ccc\")\n        ((= number 400)\
    \ \"cd\")\n        ((= number 500) \"d\")\n        ((= number 600) \"dc\")\n \
    \       ((= number 700) \"dcc\")\n        ((= number 800) \"dccc\")\n        ((=\
    \ number 900) \"cm\")\n        ((= number 1000) \"m\")\n        (else \"?\")))\n",
  "  (cond [(> number 1000) (error \"Integer out of range\")]\n        [(= number\
    \ 1000) \"m\"]\n        [(= number 900) \"cm\"]\n        [(= number 500) \"d\"\
    ]\n        [(= number 400) \"cd\"]\n        [(= number 100) \"c\"]\n        [(=\
    \ number 90) \"xc\"]\n        [(= number 50) \"l\"]\n        [(= number 40) \"\
    xl\"]\n        [(= number 10) \"x\"]\n        [(= number 9) \"ix\"]\n        [(=\
    \ number 5) \"v\"]\n        [(= number 4) \"iv\"]\n        [(= number 1) \"i\"\
    ]\n        [else (error \"Not possible\")]))\n", "  (local ((define (make-numeral-map)\n\
    \            (list (cons 1 \"i\")\n                  (cons 4 \"iv\")\n       \
    \           (cons 5 \"v\")\n                  (cons 9 \"ix\")\n              \
    \    (cons 10 \"x\")\n                  (cons 40 \"xl\")\n                  (cons\
    \ 50 \"l\")\n                  (cons 90 \"xc\")\n                  (cons 100 \"\
    c\")\n                  (cons 400 \"cd\")\n                  (cons 500 \"d\")\n\
    \                  (cons 900 \"cm\")\n                  (cons 1000 \"m\"))))\n\
    \    (let loop ((num number)\n               (numeral \"\")\n               (numeral-map\
    \ (make-numeral-map)))\n      (cond ((<= num 0)\n             (string-upcase numeral))\n\
    \            ((<= (car (car numeral-map)) num)\n             (loop (- num (car\
    \ (car numeral-map)))\n                   (string-append numeral (cdr (car numeral-map)))\n\
    \                   (cdr numeral-map)))\n            (else (loop num\n       \
    \                 numeral\n                        (cdr numeral-map)))))))\n",
  "  (define (int-to-mini-roman number)\n    (define (digit-to-roman digit)\n    \
    \  (cond\n        [(= digit 1) 'I]\n        [(= digit 2) 'II]\n        [(= digit\
    \ 3) 'III]\n        [(= digit 4) 'IV]\n        [(= digit 5) 'V]\n        [(= digit\
    \ 6) 'VI]\n        [(= digit 7) 'VII]\n        [(= digit 8) 'VIII]\n        [(=\
    \ digit 9) 'IX]\n        [(= digit 0) 'X]))\n    (string-join (map digit-to-roman\
    \ (iota 4)) \"\"))\n  (define (int-to-roman number)\n    (cond\n      [(and (<\
    \ number 100) (> number 0)) (int-to-mini-roman number)]\n      [(and (< number\
    \ 1000) (> number 99)) (string-append (int-to-mini-roman (/ number 100)) (int-to-mini-roman\
    \ (% number 100)))]\n      [(= number 1000) 'M]))\n  (int-to-roman number))\n",
  "  (cond [(= number 1) \"i\"]\n        [(= number 2) \"ii\"]\n        [(= number\
    \ 3) \"iii\"]\n        [(= number 4) \"iv\"]\n        [(= number 5) \"v\"]\n \
    \       [(= number 6) \"vi\"]\n        [(= number 7) \"vii\"]\n        [(= number\
    \ 8) \"viii\"]\n        [(= number 9) \"ix\"]\n        [(= number 10) \"x\"]\n\
    \        [(= number 11) \"xi\"]\n        [(= number 12) \"xii\"]\n        [(=\
    \ number 13) \"xiii\"]\n        [(= number 14) \"xiv\"]\n        [(= number 15)\
    \ \"xv\"]\n        [(= number 16) \"xvi\"]\n        [(= number 17) \"xvii\"]\n\
    \        [(= number 18) \"xviii\"]\n        [(= number 19) \"xix\"]\n        [(=\
    \ number 20) \"xx\"]\n        [(= number 21) \"xxi\"]\n        [(= number 22)\
    \ \"xxii\"]\n        [(= number 23) \"xxiii\"]\n        [(= number 24) \"xxiv\"\
    ]\n        [(= number 25) \"xxv\"]\n        [(= number 26) \"xxvi\"]\n       \
    \ [(= number 27) \"xxvii\"]\n        [(= number 28) \"xxviii\"]\n        [(= number\
    \ 29) \"xxix\"]\n        [(= number 30) \"xxx\"]\n        [(= number 31) \"xxxi\"\
    ]\n        [(= number 32) \"xxxii\"]\n        [(= number 33) \"xxxiii\"]\n   \
    \     [(= number 34) \"xxxiv\"]\n        [(= number 35) \"xxxv\"]\n        [(=\
    \ number 36) \"xxxvi\"]\n        [(= number 37) \"xxxvii\"]\n        [(= number\
    \ 38) \"xxxviii\"]\n        [(= number 39) \"xxxix\"]\n        [(= number 40)\
    \ \"xl\"]\n        [(= number 41) \"xli\"]\n        [(= number 42) \"xlii\"]\n\
    \        [(= number 43) \"xliii\"]\n        [(= number 44) \"xliv\"]\n       \
    \ [(= number 45) \"xlv\"]\n        [(= number 46) \"xlvi\"]\n        [(= number\
    \ 47", "  (define (r n s s5 s10)\n    (cond ((< n 4) (append (build-list n s)\
    \ (r 0 \"\" s5 s10)))\n          ((= n 4) (string-append s s5))\n          ((<\
    \ n 9) (string-append s5 (r (- n 5) s \"\" s10)))\n          ((= n 9) (string-append\
    \ s s10))\n          (else \"\")))\n  (define (int-to-roman-helper n)\n    (cond\
    \ ((< n 10) (r n \"I\" \"V\" \"X\"))\n          ((< n 100) (string-append (r (quotient\
    \ n 10) \"X\" \"L\" \"C\")\n                                    (int-to-roman-helper\
    \ (remainder n 10))))\n          ((< n 1000) (string-append (r (quotient n 100)\
    \ \"C\" \"D\" \"M\")\n                                     (int-to-roman-helper\
    \ (remainder n 100))))\n          (else \"\")))\n  (cond ((= number 0) \"\")\n\
    \        ((<= number 1000) (string-downcase (int-to-roman-helper number)))))\n",
  "  (cond\n    [(> number 1000) \"romannumerals\"]\n    [(<= number 0) \"romannumerals\"\
    ]\n    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"\
    ]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"\
    ]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9)\
    \ \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 11) \"xi\"]\n    [(= number\
    \ 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n    [(= number 14) \"xiv\"]\n  \
    \  [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number 17) \"\
    xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n    [(= number\
    \ 20) \"xx\"]\n    [(= number 30) \"xxx\"]\n    [(= number 40) \"xl\"]\n    [(=\
    \ number 50) \"l\"]\n    [(= number 60) \"lx\"]\n    [(= number 70) \"lxx\"]\n\
    \    [(= number 80) \"lxxx\"]\n    [(= number 90) \"xc\"]\n    [(= number 100)\
    \ \"c\"]\n    [(= number 200) \"cc\"]\n    [(= number 300) \"ccc\"]\n    [(= number\
    \ 400) \"cd\"]\n    [(= number 500) \"d\"]\n    [(= number 600) \"dc\"]\n    [(=\
    \ number 700) \"dcc\"]\n    [(= number 800) \"dccc\"]\n    [(= number 900) \"\
    cm\"]\n    [(= number 1000) \"m\"]\n    [(= number 2000) \"mm\"]\n    [(= number\
    \ 3000) \"mmm\"]\n    [(= number 4000) \"mmmmm\"]\n    [(= number 5000) \"mmmmmm\"\
    ]\n    [(= number 6000) \"mmmmmmm\"]\n    [(= number 7000) \"mmmmmmmm\"]\n   \
    \ [(= number 8000) \"mmmmmmmmm\"]\n    [(= number 9000) \"mmmmmmmmmm\"]\n    [(",
  "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3)\
    \ \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number\
    \ 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(=\
    \ number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 20) \"xx\"]\n \
    \   [(= number 30) \"xxx\"]\n    [(= number 40) \"xl\"]\n    [(= number 50) \"\
    l\"]\n    [(= number 60) \"lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number\
    \ 80) \"lxxx\"]\n    [(= number 90) \"xc\"]\n    [(= number 100) \"c\"]\n    [(=\
    \ number 200) \"cc\"]\n    [(= number 300) \"ccc\"]\n    [(= number 400) \"cd\"\
    ]\n    [(= number 500) \"d\"]\n    [(= number 600) \"dc\"]\n    [(= number 700)\
    \ \"dcc\"]\n    [(= number 800) \"dccc\"]\n    [(= number 900) \"cm\"]\n    [(=\
    \ number 1000) \"m\"]\n    [else \"\"]))\n", "  (match number\n    [(? (and (and\
    \ (and (and (and (and (<= 1 number) (<= number 3))\n                         \
    \      (string-append \"i\" (int_to_mini_roman (- number 1))))\n             \
    \         (string-append \"ii\" (int_to_mini_roman (- number 2))))\n         \
    \        (string-append \"iii\" (int_to_mini_roman (- number 3))))\n         \
    \   (string-append \"iv\" (int_to_mini_roman (- number 4))))\n       (string-append\
    \ \"v\" (int_to_mini_roman (- number 5))))\n     (string-append \"vi\" (int_to_mini_roman\
    \ (- number 6))))\n    [0 \"\"]))\n", "  (local ((define (lookup num)\n      \
    \      (match num\n              [1 \"i\"]\n              [5 \"v\"]\n        \
    \      [10 \"x\"]\n              [50 \"l\"]\n              [100 \"c\"]\n     \
    \         [500 \"d\"]\n              [1000 \"m\"])))\n    (cond\n      [(< number\
    \ 4) (string-append (lookup 1) (lookup 1) (lookup 1))]\n      [(< number 5) (string-append\
    \ (lookup 1) (lookup 5))]\n      [(< number 9) (string-append (lookup 5) (lookup\
    \ 1) (lookup 1))]\n      [(< number 10) (string-append (lookup 1) (lookup 10))]\n\
    \      [(< number 40) (string-append (lookup 10) (lookup 10) (lookup 10))]\n \
    \     [(< number 50) (string-append (lookup 10) (lookup 50))]\n      [(< number\
    \ 90) (string-append (lookup 50) (lookup 10) (lookup 10))]\n      [(< number 100)\
    \ (string-append (lookup 10) (lookup 100))]\n      [(< number 400) (string-append\
    \ (lookup 100) (lookup 100) (lookup 100))]\n      [(< number 500) (string-append\
    \ (lookup 100) (lookup 500))]\n      [(< number 900) (string-append (lookup 500)\
    \ (lookup 100) (lookup 100))]\n      [(< number 1000) (string-append (lookup 100)\
    \ (lookup 1000))]\n      [(= number 1000) (string-append (lookup 1000) (lookup\
    \ 1000))])))\n```\n\n### 12\n\n``` #lang racket\n", "  (cond [(= number 1000)\
    \ \"m\"]\n        [(= number 900) \"cm\"]\n        [(= number 500) \"d\"]\n  \
    \      [(= number 400) \"cd\"]\n        [(= number 100) \"c\"]\n        [(= number\
    \ 90) \"xc\"]\n        [(= number 50) \"l\"]\n        [(= number 40) \"xl\"]\n\
    \        [(= number 10) \"x\"]\n        [(= number 9) \"ix\"]\n        [(= number\
    \ 5) \"v\"]\n        [(= number 4) \"iv\"]\n        [(= number 1) \"i\"]\n   \
    \     [else (string-append (int_to_mini_roman (quotient number 10))\n        \
    \                     (int_to_mini_roman (remainder number 10)))]))\n", "  (local\
    \ [(define num-to-sym (make-dict (list (cons 1 \"i\") (cons 5 \"v\") (cons 10\
    \ \"x\") (cons 50 \"l\") (cons 100 \"c\") (cons 500 \"d\") (cons 1000 \"m\"))))\n\
    \           (define (return-nearest-sym num)\n             (find-dict num-to-sym\n\
    \                        (lambda (n1 n2) (< (abs (- num n1)) (abs (- num n2))))))\n\
    \           (define (mini-roman-ones number)\n             (let [(digit (modulo\
    \ number 10))]\n               (cond [(or (= digit 0) (= digit 1)) \"\"]\n   \
    \                  [(= digit 2) \"ii\"]\n                     [(= digit 3) \"\
    iii\"]\n                     [(= digit 4) \"iv\"]\n                     [(= digit\
    \ 5) \"v\"]\n                     [(= digit 6) \"vi\"]\n                     [(=\
    \ digit 7) \"vii\"]\n                     [(= digit 8) \"viii\"]\n           \
    \          [(= digit 9) \"ix\"])))\n           (define (mini-roman-tens number)\n\
    \             (let [(digit (modulo number 100))]\n               (cond [(or (=\
    \ digit 0) (= digit 10)) \"\"]\n                     [(= digit 20) \"xx\"]\n \
    \                    [(= digit 30) \"xxx\"]\n                     [(= digit 40)\
    \ \"xl\"]\n                     [(= digit 50) \"l\"]\n                     [(=\
    \ digit 60) \"lx\"]\n                     [(= digit 70) \"lxx\"]\n           \
    \          [(= digit 80) \"lxxx\"]\n                     [(= digit 90) \"xc\"\
    ])))\n           (define (mini-roman-hundreds number)\n             (let [(digit\
    \ (modulo number 1000))]\n               (cond [(or (= digit 0) (= digit 100))\
    \ \"\"]\n                     [(= digit 200) \"cc\"]\n                     [(=\
    \ digit 300) \"ccc\"]\n                     [(= digit 400) \"cd\"]\n         \
    \            [(= digit 500) \"d\"]\n                     [(= digit 600) \"dc\"\
    ]\n                     [(= digit 700) \"dcc\"]\n                     [(= digit\
    \ 800) \"dccc\"]\n                     [(= digit 900) \"cm\"])))\n           (define\
    \ (mini-roman-thousands number)\n             (let [(digit (modulo number 10000",
  "  (regexp-replace*\n   (regexp-replace*\n    (regexp-replace*\n     (regexp-replace*\n\
    \      (regexp-replace*\n       (regexp-replace*\n        (regexp-replace*\n \
    \        (regexp-replace*\n          (regexp-replace*\n           (regexp-replace*\n\
    \            (regexp-replace*\n             (regexp-replace*\n              (integer->string\
    \ number)\n              #rx\"^1000\" \"M\")\n             #rx\"^900\" \"CM\"\
    )\n            #rx\"^500\" \"D\")\n           #rx\"^400\" \"CD\")\n          #rx\"\
    ^100\" \"C\")\n         #rx\"^90\" \"XC\")\n        #rx\"^50\" \"L\")\n      \
    \ #rx\"^40\" \"XL\")\n      #rx\"^10\" \"X\")\n     #rx\"^9\" \"IX\")\n    #rx\"\
    ^5\" \"V\")\n   #rx\"^4\" \"IV\")\n  #rx\"^1\" \"I\"))\n", "    (define (int_to_mini_roman_iter\
    \ n str)\n        (cond [(= n 1000) (string-append str \"m\")]\n             \
    \ [(= n 900) (string-append str \"cm\")]\n              [(= n 500) (string-append\
    \ str \"d\")]\n              [(= n 400) (string-append str \"cd\")]\n        \
    \      [(= n 100) (string-append str \"c\")]\n              [(= n 90) (string-append\
    \ str \"xc\")]\n              [(= n 50) (string-append str \"l\")]\n         \
    \     [(= n 40) (string-append str \"xl\")]\n              [(= n 10) (string-append\
    \ str \"x\")]\n              [(= n 9) (string-append str \"ix\")]\n          \
    \    [(= n 5) (string-append str \"v\")]\n              [(= n 4) (string-append\
    \ str \"iv\")]\n              [(= n 1) (string-append str \"i\")]\n          \
    \    [else (string-append (int_to_mini_roman_iter (quotient n 10) (string-append\
    \ str (if (= (modulo n 10) 9) \"ix\" \"viiii\")))\n                          \
    \         (int_to_mini_roman_iter (modulo n 10) \"\"))]))\n    (string-downcase\
    \ (int_to_mini_roman_iter number \"\")))\n", "  (cond [(= number 1000) \"m\"]\n\
    \        [(= number 900) \"cm\"]\n        [(= number 500) \"d\"]\n        [(=\
    \ number 400) \"cd\"]\n        [(= number 100) \"c\"]\n        [(= number 90)\
    \ \"xc\"]\n        [(= number 50) \"l\"]\n        [(= number 40) \"xl\"]\n   \
    \     [(= number 10) \"x\"]\n        [(= number 9) \"ix\"]\n        [(= number\
    \ 5) \"v\"]\n        [(= number 4) \"iv\"]\n        [(= number 1) \"i\"]\n   \
    \     [else (error \"Invalid number\")]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
