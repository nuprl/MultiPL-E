name: HumanEval_124_valid_date
language: rkt
prompt: "#lang racket\n\n;; You have to write a function which validates a given date\
  \ string and\n;; returns True if the date is valid otherwise False.\n;; The date\
  \ is valid if all of the following rules are satisfied:\n;; 1. The date string is\
  \ not empty.\n;; 2. The number of days is not less than 1 or higher than 31 days\
  \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
  \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or\
  \ higher than 29 for the month 2.\n;; 3. The months should not be less than 1 or\
  \ higher than 12.\n;; 4. The date should be in the format: mm-dd-yyyy\n(define (valid_date\
  \ date)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate valid_date))\n\
  \    (check-equal? (candidate \"03-11-2000\") #t)\n    (check-equal? (candidate\
  \ \"15-01-2012\") #f)\n    (check-equal? (candidate \"04-0-2040\") #f)\n    (check-equal?\
  \ (candidate \"06-04-2020\") #t)\n    (check-equal? (candidate \"01-01-2007\") #t)\n\
  \    (check-equal? (candidate \"03-32-2011\") #f)\n    (check-equal? (candidate\
  \ \"\") #f)\n    (check-equal? (candidate \"04-31-3000\") #f)\n    (check-equal?\
  \ (candidate \"06-06-2005\") #t)\n    (check-equal? (candidate \"21-31-2000\") #f)\n\
  \    (check-equal? (candidate \"04-12-2003\") #t)\n    (check-equal? (candidate\
  \ \"04122003\") #f)\n    (check-equal? (candidate \"20030412\") #f)\n    (check-equal?\
  \ (candidate \"2003-04\") #f)\n    (check-equal? (candidate \"2003-04-12\") #f)\n\
  \    (check-equal? (candidate \"04-2003\") #f)\n))\n\n(test-humaneval)"
completions: ["  (if (not (string-&gt;number (substring date 7)))\n      #f\n    \
    \  (let ([y (string-&gt;number (substring date 7))]\n            [m (string-&gt;number\
    \ (substring date 0 2))]\n            [d (string-&gt;number (substring date 3\
    \ 5))])\n        (and\n         (positive? m)\n         (positive? d)\n      \
    \   (positive? y)\n         (or (= m 1) (= m 3) (= m 5) (= m 7) (= m 8) (= m 10)\
    \ (= m 12))\n         (or (&lt;= d 31) (&lt;= d 30) (&lt;= d 29) (&lt;= d 28))\n\
    \         ))))\n</code>\n", "  (match (regexp-match #rx\"^(0[1-9]|1[0-2])-([0-2][0-9]|3[0-1])-(1[8-9][0-9][0-9]|20[0-9][0-9])$\"\
    \ date)\n    [`#f _] #f\n    [`#t (list _ month day year)]\n    (match (string->number\
    \ month)\n      [1] (or (equal? day \"31\") (and (>= day \"01\") (<= day \"30\"\
    )))\n      [2] (or (equal? day \"29\") (and (>= day \"01\") (<= day \"28\")))\n\
    \      [3] (or (equal? day \"31\") (and (>= day \"01\") (<= day \"30\")))\n  \
    \    [4] (or (equal? day \"30\") (and (>= day \"01\") (<= day \"29\")))\n    \
    \  [5] (or (equal? day \"31\") (and (>= day \"01\") (<= day \"30\")))\n      [6]\
    \ (or (equal? day \"30\") (and (>= day \"01\") (<= day \"29\")))\n      [7] (or\
    \ (equal? day \"31\") (and (>= day \"01\") (<= day \"30\")))\n      [8] (or (equal?\
    \ day \"31\") (and (>= day \"01\") (<= day \"30\")))\n      [9] (or (equal? day\
    \ \"30\") (and (>= day \"01\") (<= day \"29\")))\n      [10] (or (equal? day \"\
    31\") (and (>= day \"01\") (<= day \"30\")))\n      [11] (or (equal? day \"30\"\
    ) (and (>= day \"01\") (<= day \"29\")))\n      [12] (or (equal? day \"31\") (and\
    \ (>= day \"01\") (<= day \"30\")))\n      [_ _] #f))))\n", "  (define (between\
    \ mn mx n)\n    (and (>= n mn) (<= n mx)))\n  (let* ([date-r (regexp #rx\"([0-9]{2})-([0-9]{2})-([0-9]{4})\"\
    )]\n         [match-r (regexp-match date-r date)]\n         [month (string-&gt;number\
    \ (regexp-match:substring match-r 1))]\n         [day (string-&gt;number (regexp-match:substring\
    \ match-r 2))]\n         [year (string-&gt;number (regexp-match:substring match-r\
    \ 3))])\n    (define (lte x y)\n      (&lt;= x y))\n    (define (gte x y)\n  \
    \    (&gt;= x y))\n    (define (d-sum n)\n      (apply + (map string-&gt;number\
    \ (map (lambda (x) (string-&gt;list x)) (string-split (number-&gt;string n) #\\\
    n)))))\n    (and\n     (not (empty? date))\n     (or\n      (and\n       (between\
    \ 1 31 day)\n       (or\n        (between 1 12 month)\n        (and\n        \
    \ (between 1 30 day)\n         (member month '(4 6 9 11)))\n        (and\n   \
    \      (= day 29)\n         (= month 2)\n         (and\n          (lte (d-sum\
    \ year) 28)\n          (or\n           (not (zero? (modulo year 100)))\n     \
    \      (gte (modulo year 400) 0))))))\n      (and\n       (between 1 31 day)\n\
    \       (or\n        (between 1 12 month)\n        (and\n         (between 1 30\
    \ day)\n         (member month '(4 6 9 11)))\n        (and\n         (= day 29)\n\
    \         (= month 2)\n         (and\n          (lte (d-sum year) 28)\n      \
    \    (or\n           (not (zero? (modulo year 100)))\n           (gte (modulo\
    \ year 400) 0)))))))))\n", "  (andmap (\u03BB (x) (not (empty? x))) (regexp-match*\
    \ #rx\"^(\\d{2})-(\\d{2})-(\\d{4})$\" date)))\n", "  (and (regexp-match? #rx\"\
    (1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])-\\\\d{4}\" date)\n       (let ([splitted-date\
    \ (string-split date #\"-\")])\n         (match (map string->number splitted-date)\n\
    \                [(list month day year)\n                 (and (>= year 0)\n \
    \                     (cond\n                        [(or (= month 1) (= month\
    \ 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n        \
    \                 (and (>= day 1) (<= day 31))]\n                        [(or\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n                        \
    \ (and (>= day 1) (<= day 30))]\n                        [(= month 2)\n      \
    \                   (and (>= day 1) (<= day 29))])\n                      (>=\
    \ month 1)\n                      (<= month 12))])))))\n", "  (if (string=? date\
    \ \"\")\n      #f\n      (if (or\n           (or (= (string-length date) 10) (=\
    \ (string-length date) 8))\n           (string-contains date #\\-)\n         \
    \  (string-contains date #\\.)\n           (not (string-contains date #\\/)))\n\
    \          #f\n          (let* ((delimiter (string-ref date 2))\n            \
    \     (m-s (substring date 0 2))\n                 (d-s (substring date 3 5))\n\
    \                 (y-s (substring date 6 8))\n                 (m (string->number\
    \ m-s))\n                 (d (string->number d-s))\n                 (y (string->number\
    \ y-s)))\n            (and (= delimiter #\\/)\n                 (and (>= m 1)\
    \ (<= m 12))\n                 (or\n                  (and (= m 1) (<= d 31))\n\
    \                  (and (= m 3) (<= d 31))\n                  (and (= m 5) (<=\
    \ d 31))\n                  (and (= m 7) (<= d 31))\n                  (and (=\
    \ m 8) (<= d 31))\n                  (and (= m 10) (<= d 31))\n              \
    \    (and (= m 12) (<= d 31))\n                  (and (= m 4) (<= d 30))\n   \
    \               (and (= m 6) (<= d 30))\n                  (and (= m 9) (<= d\
    \ 30))\n                  (and (= m 11) (<= d 30))\n                  (and (=\
    \ m 2) (<= d 29)))\n                 (and (>= y 0) (<= y 9999)))))))\n", "  (let\
    \ ([date-parts (string-split date \"-\")])\n    (cond\n      [(not (= 4 (length\
    \ date-parts))) false]\n      [(not (regexp-match #rx\"^\\\\d+$\" (string-append\
    \ (list-ref date-parts 1) \"\"))) false]\n      [(not (regexp-match #rx\"^\\\\\
    d+$\" (string-append (list-ref date-parts 2) \"\"))) false]\n      [(not (regexp-match\
    \ #rx\"^\\\\d+$\" (string-append (list-ref date-parts 3) \"\"))) false]\n    \
    \  [(< (string->number (list-ref date-parts 1)) 1) false]\n      [(> (string->number\
    \ (list-ref date-parts 1)) 12) false]\n      [(< (string->number (list-ref date-parts\
    \ 2)) 1) false]\n      [(> (string->number (list-ref date-parts 2)) 31) false]\n\
    \      [(< (string->number (list-ref date-parts 3)) 1900) false]\n      [(> (string->number\
    \ (list-ref date-parts 3)) 2099) false]\n      [else true])))\n", "  (cond [(string=?\
    \ \"\" date) #f]\n        [(regexp-match? \"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\" date)\
    \ (is_date date)]\n        [else #f]))\n", "  (define valid? #f)\n  (match date\n\
    \    [(? regexp-match? #rx\"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\") #t]\n    [_ #f]))\n",
  "  (define (valid-mm date)\n    (and (and (and (&gt;= (string-&gt;number (substring\
    \ date 0 2)) 1) (&lt;= (string-&gt;number (substring date 0 2)) 12))\n       \
    \       (and (&gt;= (string-&gt;number (substring date 3 5)) 1) (&lt;= (string-&gt;number\
    \ (substring date 3 5)) 12)))\n         (and (or (and (or (= (string-&gt;number\
    \ (substring date 0 2)) 1) (= (string-&gt;number (substring date 0 2)) 3) (= (string-&gt;number\
    \ (substring date 0 2)) 5) (= (string-&gt;number (substring date 0 2)) 7) (= (string-&gt;number\
    \ (substring date 0 2)) 8) (= (string-&gt;number (substring date 0 2)) 10) (=\
    \ (string-&gt;number (substring date 0 2)) 12)) (&gt;= (string-&gt;number (substring\
    \ date 3 5)) 1) (&lt;= (string-&gt;number (substring date 3 5)) 31))\n       \
    \         (and (or (= (string-&gt;number (substring date 0 2)) 4) (= (string-&gt;number\
    \ (substring date 0 2)) 6) (= (string-&gt;number (substring date 0 2)) 9) (= (string-&gt;number\
    \ (substring date 0 2)) 11)) (&gt;= (string-&gt;number (substring date 3 5)) 1)\
    \ (&lt;= (string-&gt;number (substring date 3 5)) 30))\n                (and (=\
    \ (string-&gt;number (substring date 0 2)) 2) (&gt;= (string-&gt;number (substring\
    \ date 3 5)) 1) (&lt;= (string-&gt;number (substring date 3 5)) 29))))))\n  (and\
    \ (and (not (empty? date)) (eq? (string-length date) 10))\n       (valid-mm date)))\n\
    </code>\nMy question is:\nWhat can I improve?\nI'm not looking for something that\
    \ works better, I'm looking for improvements regarding code", "  (and\n   (string?\
    \ date)\n   (not (string=? date \"\"))\n   (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n   (let ([mh (string->number (regexp-match #rx\"^[0-9]{2}\" date))]\n\
    \         [ds (string->number (regexp-match #rx\"-[0-9]{2}-\" date))]\n      \
    \   [yr (string->number (regexp-match #rx\"[0-9]{4}$\" date))])\n     (and (and\
    \ (>= mh 1) (<= mh 12))\n          (and (>= ds 1) (<= ds (date-length yr mh)))\n\
    \          (and (>= yr 1) (<= yr 9999))))))", "  (define month-days '(31 31 28\
    \ 31 30 31 30 31 31 30 31 30 31))\n  (and (not (empty? date))\n       (regexp-match\
    \ #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date)\n       (match:substring date\
    \ #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" 1)\n       (let ([m (string-&gt;number\
    \ (match:substring date #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" 1))]\n     \
    \        [d (string-&gt;number (match:substring date #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ 2))]\n             [y (string-&gt;number (match:substring date #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ 3))])\n         (and (and (&lt;= 1 m 12)\n                   (&lt;= 1 d (list-ref\
    \ month-days m)))\n              (or (and (&lt; m 2)\n                       (&lt;\
    \ d (list-ref month-days m)))\n                  (and (= m 2)\n              \
    \         (or (= y 0) (= y 4) (= y 8) (= y 12) (= y 16) (= y 20) (= y 24) (= y\
    \ 28))\n                       (&lt; d (list-ref month-days m)))))\n</code>\n\
    What I have so far, but I just got started. I'm trying to figure out how to code\
    \ the leap year condition. I'm a beginner so I'm not sure how to do this.\n\n\n\
    A:\n\nYou can use <code>cond</code> to check the different cases:\n<code>(define\
    \ (valid-date date)\n  (define month-days '(31 31 28 31 30 31 30 31 31 30 31 30\
    \ 31))\n  (and (not (empty? date))\n       (regexp-match", "  (or\n   (and (and\
    \ (and (and (and (and (and (and (and (and (string=? (first (string-split date\
    \ \"-\")) \"01\") (string=? (second (string-split date \"-\")) \"02\")) (string=?\
    \ (third (string-split date \"-\")) \"03\")) (string=? (fourth (string-split date\
    \ \"-\")) \"04\")) (string=? (fifth (string-split date \"-\")) \"05\")) (string=?\
    \ (sixth (string-split date \"-\")) \"06\")) (string=? (seventh (string-split\
    \ date \"-\")) \"07\")) (string=? (eighth (string-split date \"-\")) \"08\"))\
    \ (string=? (ninth (string-split date \"-\")) \"09\")) (string=? (tenth (string-split\
    \ date \"-\")) \"10\")) (string=? (eleventh (string-split date \"-\")) \"11\"\
    )) (string=? (twelfth (string-split date \"-\")) \"12\"))\n   (and (and (and (and\
    \ (and (and (and (and (and (and (string=? (first (string-split date \"-\")) \"\
    1\") (string=? (second (string-split date \"-\")) \"2\")) (string=? (third (string-split\
    \ date \"-\")) \"3\")) (string=? (fourth (string-split date \"-\")) \"4\")) (string=?\
    \ (fifth (string-split date \"-\")) \"5\")) (string=? (sixth (string-split date\
    \ \"-\")) \"6\")) (string=? (seventh (string-split date \"-\")) \"7\")) (string=?\
    \ (eighth (string-split date \"-\")) \"8\")) (string=? (ninth (string-split date\
    \ \"-\")) \"9\")) (string=? (tenth (string-split date \"-\")) \"10\")) (string=?\
    \ (eleventh (string-split date \"-\")) \"11\")) (string=? (twelfth (string-split\
    \ date \"-\")) \"12\"))\n   (and (and (and (and (and (and (and (and (and (and\
    \ (string=? (first (string-split date \"-\")) \"00\") (string=", "  (define (valid-month\
    \ month)\n    (and (&gt;= month 1) (&lt;= month 12)))\n  (define (valid-day month\
    \ day)\n    (cond ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n           (and (&gt;= day 1) (&lt;= day 31)))\n\
    \          ((or (= month 4) (= month 6) (= month 9) (= month 11))\n          \
    \ (and (&gt;= day 1) (&lt;= day 30)))\n          ((= month 2)\n           (and\
    \ (&gt;= day 1) (&lt;= day 29)))))\n  (define (valid-year year)\n    (and (&gt;=\
    \ year 0) (&lt;= year 9999)))\n  (define (invalid-date? date)\n    (equal? date\
    \ \"\"))\n  (define (valid-date? date)\n    (and (invalid-date? date) (string-&gt;number\
    \ (string-ref date 0))\n         (string-&gt;number (string-ref date 1))\n   \
    \      (string-&gt;number (string-ref date 3))\n         (string-&gt;number (string-ref\
    \ date 4))\n         (string-&gt;number (string-ref date 6))\n         (string-&gt;number\
    \ (string-ref date 7))\n         (string-&gt;number (string-ref date 8))\n   \
    \      (string-&gt;number (string-ref date 9))))\n  (define (parse-date date)\n\
    \    (list (string-&gt;number (string-append (string-ref date 0) (string-ref date\
    \ 1)))\n          (string-&gt;number (string-append (string-ref date 3) (string-ref\
    \ date 4)))\n          (string-&gt;number (string-append (string-ref date 6) (string-ref\
    \ date 7) (string-ref date 8) (string-ref date 9)))))\n  (define (valid-complete-date?\
    \ date)\n    (and (valid-month (first (parse-date date)))\n         (valid-day\
    \ (first (parse-date date)) (second (parse-date date)))", "  (define (isValidMonth\
    \ month)\n    (cond ((eq? month 1) #t)\n          ((eq? month 3) #t)\n       \
    \   ((eq? month 5) #t)\n          ((eq? month 7) #t)\n          ((eq? month 8)\
    \ #t)\n          ((eq? month 10) #t)\n          ((eq? month 12) #t)\n        \
    \  ((eq? month 4) #t)\n          ((eq? month 6) #t)\n          ((eq? month 9)\
    \ #t)\n          ((eq? month 11) #t)\n          ((eq? month 2) #t)\n         \
    \ (else #f)))\n  (define (getMonth date)\n    (string->number (substring date\
    \ 0 2)))\n  (define (getDay date)\n    (string->number (substring date 3 5)))\n\
    \  (define (getYear date)\n    (string->number (substring date 6 (string-length\
    \ date))))\n  (define (isValidDate date)\n    (cond ((eq? (getMonth date) 1) (eq?\
    \ (getDay date) 31))\n          ((eq? (getMonth date) 3) (eq? (getDay date) 31))\n\
    \          ((eq? (getMonth date) 5) (eq? (getDay date) 31))\n          ((eq? (getMonth\
    \ date) 7) (eq? (getDay date) 31))\n          ((eq? (getMonth date) 8) (eq? (getDay\
    \ date) 31))\n          ((eq? (getMonth date) 10) (eq? (getDay date) 31))\n  \
    \        ((eq? (getMonth date) 12) (eq? (getDay date) 31))\n          ((eq? (getMonth\
    \ date) 4) (eq? (getDay date) 30))\n          ((eq? (getMonth date) 6) (eq? (getDay\
    \ date) 30))\n          ((eq? (getMonth date) 9) (eq? (getDay date) 30))\n   \
    \       ((eq? (getMonth date) 11) (eq? (getDay date) 30))\n          ((eq? (getMonth\
    \ date) 2) (eq? (getDay date) 29))\n          (else #f)))\n  (cond ((string=?",
  "  (cond\n    [(equal? date \"\") false]\n    [(not (date-format? date)) false]\n\
    \    [(not (date-month? date)) false]\n    [(not (date-day? date)) false]\n  \
    \  [else true]))\n", "  (define (months->int month)\n    (cond ((string=? month\
    \ \"01\") 1)\n          ((string=? month \"02\") 2)\n          ((string=? month\
    \ \"03\") 3)\n          ((string=? month \"04\") 4)\n          ((string=? month\
    \ \"05\") 5)\n          ((string=? month \"06\") 6)\n          ((string=? month\
    \ \"07\") 7)\n          ((string=? month \"08\") 8)\n          ((string=? month\
    \ \"09\") 9)\n          ((string=? month \"10\") 10)\n          ((string=? month\
    \ \"11\") 11)\n          ((string=? month \"12\") 12)))\n  (define (valid-month?\
    \ month)\n    (and (integer? month) (and (>= month 1) (<= month 12))))\n  (define\
    \ (max-days-in-month month)\n    (cond ((member month '(1 3 5 7 8 10 12)) 31)\n\
    \          ((member month '(4 6 9 11)) 30)\n          ((= month 2) 29)))\n  (define\
    \ (valid-day? day)\n    (and (integer? day) (and (>= day 1) (<= day (max-days-in-month\
    \ (months->int (substring date 0 2)))))))\n  (let ((month (substring date 0 2))\n\
    \        (day (substring date 3 5))\n        (year (substring date 6 10)))\n \
    \   (and (not (string=? date \"\"))\n         (valid-month? (months->int month))\n\
    \         (valid-day? (string->number day))\n         (string=? (substring date\
    \ 2 3) \"-\")\n         (string=? (substring date 5 6) \"-\")\n         (string=?\
    \ (substring date 10 11) \"\")\n         (string=? (substring date 2 6) (substring\
    \ date 6 10)))))", "  (let* ([date-parts (split-string date #\\-)])\n    (cond\
    \ [(empty? date-parts) (error \"Invalid date\")]\n          [(length date-parts)\
    \ (error \"Invalid date\")]\n          [(and (>= (length date-parts) 3)\n    \
    \            (and (and (and (and (<= 1 (string->number (list-ref date-parts 0)))\
    \ (<= (string->number (list-ref date-parts 0)) 12))\n                        \
    \     (and (<= 1 (string->number (list-ref date-parts 1))) (<= (string->number\
    \ (list-ref date-parts 1)) 12)))\n                      (and (and (and (and (<=\
    \ 1 (string->number (list-ref date-parts 0))) (<= (string->number (list-ref date-parts\
    \ 0)) 12))\n                                     (and (<= 1 (string->number (list-ref\
    \ date-parts 1))) (<= (string->number (list-ref date-parts 1)) 12)))\n       \
    \                        (and (and (and (and (<= 1 (string->number (list-ref date-parts\
    \ 0))) (<= (string->number (list-ref date-parts 0)) 12))\n                   \
    \                            (and (<= 1 (string->number (list-ref date-parts 1)))\
    \ (<= (string->number (list-ref date-parts 1)) 12)))\n                       \
    \                  (and (and (and (and (<= 1 (string->number (list-ref date-parts\
    \ 0))) (<= (string->number (list-ref date-parts 0)) 12))\n                   \
    \                                      (and (<= 1 (string->number (list-ref date-parts\
    \ 1))) (<= (string->number (list-ref date-parts 1)) 12)))\n                  \
    \                                 (and (and (and (and (<= 1 (string->number (list-ref\
    \ date-parts 0))) (<= (string->number (list-ref date-parts 0)) 12))\n        \
    \                                                           (and (<= 1 (string->number\
    \ (list-ref date-parts 1))) (<= (string->number (list-ref date-parts 1)) 12)))\n\
    \                                                             (and (and (and (and\
    \ (<= 1 (string->number (list-ref date-parts 0))) (<= (string->", "  (define (length\
    \ n list)\n    (cond ((equal? n 0) (cons '() list))\n          ((null? list) '())\n\
    \          (else (length (- n 1) (cdr list)))))\n  (define (valid-year year)\n\
    \    (cond ((eq? year 0) #f)\n          ((null? year) #f)\n          ((not (char-numeric?\
    \ (car year))) #f)\n          (else (valid-year (cdr year)))))\n  (define (valid-month\
    \ month)\n    (cond ((eq? month 0) #f)\n          ((not (char-numeric? (car month)))\
    \ #f)\n          (else (cond ((or (and (eq? (string->number (list (car month)))\
    \ 1)\n                              (not (or (eq? (string->number (list (car (cdr\
    \ month)))) 2)\n                                       (eq? (string->number (list\
    \ (car (cdr month)))) 3))))\n                          (and (eq? (string->number\
    \ (list (car month))) 3)\n                               (not (or (eq? (string->number\
    \ (list (car (cdr month)))) 1)\n                                        (eq? (string->number\
    \ (list (car (cdr month)))) 2))))\n                          (and (eq? (string->number\
    \ (list (car month))) 5)\n                               (not (or (eq? (string->number\
    \ (list (car (cdr month)))) 0)\n                                        (eq? (string->number\
    \ (list (car (cdr month)))) 1))))\n                          (and (eq? (string->number\
    \ (list (car month))) 7)\n                               (not (or (eq? (string->number\
    \ (list (car (cdr month)))) 1)\n                                        (eq? (string->number\
    \ (list (car (cdr month)))) 2))))\n                          (and (eq? (string->number\
    \ (list (car month))) 8)\n                               (not (or (eq? (string->number\
    \ (list (car (cdr month)))) 1)\n                                        (eq? (string->number\
    \ (list (car (cdr month)))) 2))))\n                          (and (eq? (string->number\
    \ (list (car month))) 10)\n                              ", "  (local [(define\
    \ (valid-month-day? month day)\n            (cond\n              [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \               (and (<= 1 day) (<= day 31))]\n              [(or (= month 4)\
    \ (= month 6) (= month 9) (= month 11))\n               (and (<= 1 day) (<= day\
    \ 30))]\n              [(= month 2)\n               (and (<= 1 day) (<= day 29))]\n\
    \              [else #f]))]\n    (match (regexp-match? #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)\n      [(list (list (list month (list day year))))\n       (and (<= 1\
    \ month) (<= month 12) (valid-month-day? month day))]\n      [_ #f])))\n", " \
    \ (and (not (empty? date))\n       (andmap valid-day (string-split date \"-\"\
    ))\n       (andmap valid-month (string-split date \"-\"))\n       (andmap valid-year\
    \ (string-split date \"-\"))))\n", "  (or (not (string? date)) ; 1\n      (match\
    \ date\n            [#rx \"^(?<month>\\d{2})-(?<day>\\d{2})-(?<year>\\d{4})$\"\
    \ (and (and (<= 1 (int-value (regexp-match #:regexp date #:submatch \"month\"\
    ))) (<= (int-value (regexp-match #:regexp date #:submatch \"month\")) 12)) (match\
    \ (int-value (regexp-match #:regexp date #:submatch \"month\")) [1 (and (<= 1\
    \ (int-value (regexp-match #:regexp date #:submatch \"day\"))) (<= (int-value\
    \ (regexp-match #:regexp date #:submatch \"day\")) 31))] [3 (and (<= 1 (int-value\
    \ (regexp-match #:regexp date #:submatch \"day\"))) (<= (int-value (regexp-match\
    \ #:regexp date #:submatch \"day\")) 31))] [5 (and (<= 1 (int-value (regexp-match\
    \ #:regexp date #:submatch \"day\"))) (<= (int-value (regexp-match #:regexp date\
    \ #:submatch \"day\")) 31))] [7 (and (<= 1 (int-value (regexp-match #:regexp date\
    \ #:submatch \"day\"))) (<= (int-value (regexp-match #:regexp date #:submatch\
    \ \"day\")) 31))] [8 (and (<= 1 (int-value (regexp-match #:regexp date #:submatch\
    \ \"day\"))) (<= (int-value (regexp-match #:regexp date #:submatch \"day\")) 31))]\
    \ [10 (and (<= 1 (int-value (regexp-match #:regexp date #:submatch \"day\")))\
    \ (<= (int-value (regexp-match #:regexp date #:submatch \"day\")) 31))] [12 (and\
    \ (<= 1 (int-value (regexp-", "  (let ([month-day-year (regexp-match #rx\"^(\\\
    d\\d)-(\\d\\d)-(\\d\\d\\d\\d)$\" date)])\n    (and month-day-year\n         (member\
    \ (list-ref month-day-year 1) (map (\u03BB (a) (number->string a)) (iota 12)))\n\
    \         (or (and (member (list-ref month-day-year 1) (map (\u03BB (a) (number->string\
    \ a)) (iota 1 12)))\n                  (member (list-ref month-day-year 2) (map\
    \ (\u03BB (a) (number->string a)) (iota 1 31))))\n             (and (member (list-ref\
    \ month-day-year 1) (map (\u03BB (a) (number->string a)) (iota 4 6)))\n      \
    \            (member (list-ref month-day-year 2) (map (\u03BB (a) (number->string\
    \ a)) (iota 1 30))))\n             (and (member (list-ref month-day-year 1) (map\
    \ (\u03BB (a) (number->string a)) (iota 7 9)))\n                  (member (list-ref\
    \ month-day-year 2) (map (\u03BB (a) (number->string a)) (iota 1 30))))\n    \
    \         (and (member (list-ref month-day-year 1) (map (\u03BB (a) (number->string\
    \ a)) (iota 10 12)))\n                  (member (list-ref month-day-year 2) (map\
    \ (\u03BB (a) (number->string a)) (iota 1 31))))\n             (and (member (list-ref\
    \ month-day-year 1) (map (\u03BB (a) (number->string a)) (iota 2 2)))\n      \
    \            (member (list-ref month-day-year 2) (map (\u03BB (a) (number->string\
    \ a)) (iota 1 29))))))))\n", "  (or (empty? date)\n      (and (regexp-match #rx\"\
    ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date)\n           (match:substring (match:test\
    \ date) 1)\n           (match:substring (match:test date) 2)\n           (match:substring\
    \ (match:test date) 3))\n      (let* ([month (string-&gt;number (match:substring\
    \ (match:test date) 1))]\n             [day (string-&gt;number (match:substring\
    \ (match:test date) 2))]\n             [year (string-&gt;number (match:substring\
    \ (match:test date) 3))])\n        (and (member month '(1 3 5 7 8 10 12))\n  \
    \           (&lt;= 1 day 31)\n             (&lt;= month 12)\n             (&lt;=\
    \ year 999))\n        (and (member month '(4 6 9 11))\n             (&lt;= 1 day\
    \ 30)\n             (&lt;= month 12)\n             (&lt;= year 999))\n       \
    \ (and (= month 2)\n             (&lt;= 1 day 29)\n             (&lt;= month 12)\n\
    \             (&lt;= year 999)))))\n</code>\n", "  (let-values ([(mm dd yyyy)\
    \ (string-split date #\"-\")])\n    (and\n     (not (equal? (string-length date)\
    \ 0))\n     (not (or (and (equal? mm \"1\") (or (equal? dd \"31\") (equal? dd\
    \ \"32\")))\n              (and (equal? mm \"3\") (or (equal? dd \"31\") (equal?\
    \ dd \"32\")))\n              (and (equal? mm \"5\") (or (equal? dd \"31\") (equal?\
    \ dd \"32\")))\n              (and (equal? mm \"7\") (or (equal? dd \"31\") (equal?\
    \ dd \"32\")))\n              (and (equal? mm \"8\") (or (equal? dd \"31\") (equal?\
    \ dd \"32\")))\n              (and (equal? mm \"10\") (or (equal? dd \"31\") (equal?\
    \ dd \"32\")))\n              (and (equal? mm \"12\") (or (equal? dd \"31\") (equal?\
    \ dd \"32\")))\n              (and (equal? mm \"4\") (or (equal? dd \"30\") (equal?\
    \ dd \"31\")))\n              (and (equal? mm \"6\") (or (equal? dd \"30\") (equal?\
    \ dd \"31\")))\n              (and (equal? mm \"9\") (or (equal? dd \"30\") (equal?\
    \ dd \"31\")))\n              (and (equal? mm \"11\") (or (equal? dd \"30\") (equal?\
    \ dd \"31\")))\n              (and (equal? mm \"2\") (or (equal? dd \"28\") (equal?\
    \ dd \"29\") (equal? dd \"30\") (equal? dd \"31\")))))\n     (not (or (equal?\
    \ mm \"0\") (equal? mm \"13\")))\n     (and (equal? (string-length mm) 2) (equal?\
    \ (string-length dd) 2) (equal? (string-length yyyy) 4)))))", "  (let* ((date\
    \ (regexp-match* #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n         (mm\
    \ (string->number (cadr date)))\n         (dd (string->number (caddr date)))\n\
    \         (yyyy (string->number (cadddr date))))\n    (and date (member mm '(1\
    \ 3 5 7 8 10 12)) (&lt;= dd 31)\n         (member mm '(4 6 9 11)) (&lt;= dd 30)\n\
    \         (member mm '(2)) (&lt;= dd 29)\n         (&lt;= mm 12) (&lt;= dd 1)\
    \ (&lt;= yyyy 9999))))\n</code>\n", "  (and (not (empty? date))\n       (not (empty?\
    \ (regexp-match #rx\"^(((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))-(([0-9]{4})))\"\
    \ date)))\n       (match (regexp-match #rx\"^(((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))-(([0-9]{4})))\"\
    \ date)\n         [(list _ month day year)\n          (cond\n            [(or\
    \ (= month \"01\") (= month \"03\") (= month \"05\") (= month \"07\") (= month\
    \ \"08\") (= month \"10\") (= month \"12\"))\n             (and (<= 1 (string->number\
    \ day) 31))]\n            [(or (= month \"04\") (= month \"06\") (= month \"09\"\
    ) (= month \"11\"))\n             (and (<= 1 (string->number day) 30))]\n    \
    \        [(= month \"02\")\n             (and (<= 1 (string->number day) 29))])\n\
    \          (and (<= 1 (string->number month) 12))]\n         [_ #f]))\n</code>\n",
  "  (and (not (empty? date))\n       (define (valid-length-date d)\n         (and\
    \ (>= (length d) 8)\n              (<= (length d) 10)))\n       (and (valid-length-date\
    \ date)\n            (define (valid-format-date d)\n              (and (= (string-index\
    \ (string-replace \"-\" \" \" date) \" \") 2)\n                   (= (string-index\
    \ (string-replace \"-\" \" \" date) \" \" 3) 5)))\n            (valid-format-date\
    \ date))\n       (define (valid-month m)\n         (and (>= m 1)\n           \
    \   (<= m 12)))\n       (and (valid-month (string->number (substring date 0 2)))\n\
    \            (define (valid-day m d)\n              (cond ((or (= m 1) (= m 3)\
    \ (= m 5) (= m 7) (= m 8) (= m 10) (= m 12))\n                     (and (>= d\
    \ 1)\n                          (<= d 31)))\n                    ((or (= m 4)\
    \ (= m 6) (= m 9) (= m 11))\n                     (and (>= d 1)\n            \
    \              (<= d 30)))\n                    ((= m 2)\n                   \
    \  (and (>= d 1)\n                          (<= d 29)))))\n            (valid-day\
    \ (string->number (substring date 0 2))\n                       (string->number\
    \ (substring date 3 5))))))\n", "  (define (reverse-list xs)\n    (foldr (lambda\
    \ (x ys) (cons x ys)) '() xs))\n  (define (string->list str)\n    (map string->number\
    \ (string-split str #\\-)))\n  (define (n-digits n)\n    (cond [(zero? n) '(0)]\n\
    \          [else (cons n (n-digits (- n 1)))]))\n  (define (valid-date? date)\n\
    \    (define (valid-year? year)\n      (let ([digits (reverse-list (n-digits (string-length\
    \ (number->string year))))])\n        (for/and ([d digits])\n          (if (equal?\
    \ d 0)\n              #t\n              (member (list-ref (string->list (number->string\
    \ year)) d) digits)))))\n    (define (valid-month? month)\n      (and (<= month\
    \ 12)\n           (>= month 1)))\n    (define (valid-day? day month)\n      (cond\
    \ [(or (member month '(1 3 5 7 8 10 12))\n                 (and (not (member month\
    \ '(2)))\n                      (>= day 30)))\n             (>= day 1)]\n    \
    \        [(member month '(2))\n             (>= day 1)]\n            [else\n \
    \            #f]))\n    (if (or (<= (string-length date) 0)\n            (not\
    \ (valid-year? (string->number (list-ref (string->list date) 2))))\n         \
    \   (not (valid-month? (string->number (list-ref (string->list date) 0))))\n \
    \           (not (valid-day? (string->number (list-ref (string->list date) 1))\n\
    \                             (string->number (list-ref (string->list date) 0)))))\n\
    \        #f\n        #t))\n  (if (valid-date? date)\n      #t\n      #f))\n",
  "  (define (mm dd yyyy)\n    (and (and (&gt;= dd 1) (&lt;= dd 31))\n         (or\
    \ (or (or (or (or (or (or (or (or (or (= mm 1) (= mm 3)) (= mm 5)) (= mm 7)) (=\
    \ mm 8)) (= mm 10)) (= mm 12)) (= mm 2)) (&gt;= dd 1) (&lt;= dd 28)) (= mm 2))\
    \ (&gt;= dd 1) (&lt;= dd 29)) (= mm 2)) (&gt;= dd 1) (&lt;= dd 30))\n        \
    \ (and (&gt;= mm 1) (&lt;= mm 12))\n         (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date) #t)))\n  (mm\n   (string-&gt;number (cadr (string-split date #\\-)))\n\
    \   (string-&gt;number (car (string-split date #\\-)))\n   (string-&gt;number\
    \ (caddr (string-split date #\\-)))))\n", "  (string-split date \"-\"))\n", " \
    \ (cond [(regexp-match #rx\"^[0-1][0-9]-[0-3][0-9]-[0-9]{4}$\" date)\n       \
    \  (define months-with-31 '(1 3 5 7 8 10 12))\n         (define months-with-30\
    \ '(4 6 9 11))\n         (define month-number (string-&gt;number (regexp-replace\
    \ #rx\"(-)(.*)\" date \"$1\")))\n         (define day-number (string-&gt;number\
    \ (regexp-replace #rx\"(.*)(-)(.*)\" date \"$3\")))\n         (cond [(list-member?\
    \ month-number months-with-31)\n                (and (&lt;= 1 day-number) (&lt;=\
    \ day-number 31))]\n               [(list-member? month-number months-with-30)\n\
    \                (and (&lt;= 1 day-number) (&lt;= day-number 30))]\n         \
    \      [(= month-number 2)\n                (and (&lt;= 1 day-number) (&lt;= day-number\
    \ 29))]\n               [else #f])]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ date) false]\n    [(not (regexp-match? #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date)) false]\n    [(and (equal? (substring date 3 5) \"01\") (&lt; (substring\
    \ date 0 2) \"31\")) true]\n    [(and (equal? (substring date 3 5) \"02\") (&lt;\
    \ (substring date 0 2) \"29\")) true]\n    [(and (equal? (substring date 3 5)\
    \ \"03\") (&lt; (substring date 0 2) \"31\")) true]\n    [(and (equal? (substring\
    \ date 3 5) \"04\") (&lt; (substring date 0 2) \"30\")) true]\n    [(and (equal?\
    \ (substring date 3 5) \"05\") (&lt; (substring date 0 2) \"31\")) true]\n   \
    \ [(and (equal? (substring date 3 5) \"06\") (&lt; (substring date 0 2) \"30\"\
    )) true]\n    [(and (equal? (substring date 3 5) \"07\") (&lt; (substring date\
    \ 0 2) \"31\")) true]\n    [(and (equal? (substring date 3 5) \"08\") (&lt; (substring\
    \ date 0 2) \"31\")) true]\n    [(and (equal? (substring date 3 5) \"09\") (&lt;\
    \ (substring date 0 2) \"30\")) true]\n    [(and (equal? (substring date 3 5)\
    \ \"10\") (&lt; (substring date 0 2) \"31\")) true]\n    [(and (equal? (substring\
    \ date 3 5) \"11\") (&lt; (substring date 0 2) \"30\")) true]\n    [(and (equal?\
    \ (substring date 3 5) \"12\") (&lt; (substring date 0 2) \"31\")) true]\n   \
    \ [else false]))\n</code>\nMy code runs fine, but there has to be a better way\
    \ to program this. I have to keep typing the same stuff over and over and I don't\
    \ feel good about that", "  (define (days-in-month)\n    (cond ((or (string=?\
    \ \"1\" (list-ref date 0))\n               (string=? \"3\" (list-ref date 0))\n\
    \               (string=? \"5\" (list-ref date 0))\n               (string=? \"\
    7\" (list-ref date 0))\n               (string=? \"8\" (list-ref date 0))\n  \
    \             (string=? \"10\" (list-ref date 0))\n               (string=? \"\
    12\" (list-ref date 0)))\n           (cond ((string=? \"31\" (list-ref date 3))\
    \ #t)\n                 ((< 31 (string->number (list-ref date 3))) #f)\n     \
    \            (else #t)))\n          ((or (string=? \"4\" (list-ref date 0))\n\
    \               (string=? \"6\" (list-ref date 0))\n               (string=? \"\
    9\" (list-ref date 0))\n               (string=? \"11\" (list-ref date 0)))\n\
    \           (cond ((string=? \"30\" (list-ref date 3)) #t)\n                 ((<\
    \ 30 (string->number (list-ref date 3))) #f)\n                 (else #t)))\n \
    \         ((string=? \"2\" (list-ref date 0))\n           (cond ((string=? \"\
    29\" (list-ref date 3)) #t)\n                 ((< 29 (string->number (list-ref\
    \ date 3))) #f)\n                 (else #t)))\n          (else #f)))\n  (cond\
    \ ((null? date) #f)\n        ((not (string=? \"-\" (list-ref date 1))) #f)\n \
    \       ((not (string=? \"-\" (list-ref date 4))) #f)\n        ((< 1 (string->number\
    \ (list-ref date 0))) #f)\n        ((< 1 (string->number (list-ref date 3))) #f)\n\
    \        ((< (string->number (list-ref date 0)) (string->number (list-ref date\
    \ 6))) #f)\n        ((< (string->number (list-ref date 6)) (string->number (list-ref\
    \ date 9))) #f)\n        ((and (not (", "  (define (invalid-month? month)\n  \
    \  (if (or (&lt; month 1) (&gt; month 12))\n        #t\n        #f))\n  (define\
    \ (invalid-days? month days)\n    (if (and (invalid-month? month)\n          \
    \   (&lt; days 1)\n             (&gt; days (cond ((and (= month 1) (= month 3)\
    \ (= month 5) (= month 7) (= month 8) (= month 10) (= month 12)) 31)\n       \
    \                     ((and (= month 4) (= month 6) (= month 9) (= month 11))\
    \ 30)\n                            ((= month 2) 29)\n                        \
    \    (else 0))))\n        #t\n        #f))\n  (define (invalid-format? date)\n\
    \    (if (and (= 2 (count (string-index (substring date 2 3) #\\-)))\n       \
    \      (= 2 (count (string-index (substring date 5 6) #\\-))))\n        #t\n \
    \       #f))\n  (define (valid? date)\n    (if (and (not (invalid-month? (string-&gt;number\
    \ (substring date 0 2))))\n             (not (invalid-days? (string-&gt;number\
    \ (substring date 0 2)) (string-&gt;number (substring date 3 5))))\n         \
    \    (not (invalid-format? date)))\n        #t\n        #f))\n  (valid? date))\n\
    </code>\n", "  (cond\n    [(string=? date \"\") #f]\n    [(string-match \"\\\\\
    ([0-9]+\\\\)-\\\\([0-9]+\\\\)-\\\\([0-9]+\\\\)\" date)\n     (define month (string->number\
    \ (regexp-match* #px\"\\\\([0-9]+\\\\)\" date 1)))\n     (define day (string->number\
    \ (regexp-match* #px\"\\\\([0-9]+\\\\)\" date 2)))\n     (cond\n       [(and (or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12)) (> day 31)) #f]\n       [(and (or (= month 4) (= month 6) (= month\
    \ 9) (= month 11)) (> day 30)) #f]\n       [(and (= month 2) (> day 29)) #f]\n\
    \       [else #t])]\n    [else #f]))\n", "  (cond\n    [(string=? date \"\") false]\n\
    \    [(not (regexp-match? \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)) false]\n   \
    \ [(and\n      (member (string->number (regexp-replace* #rx\"^[0-9]{2}-\" date\
    \ \"\")) '(1 3 5 7 8 10 12))\n      (not (member (string->number (regexp-replace*\
    \ #rx\"^.*-(.*)-.*$\" date \"\\\\1\")) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31)))) false]\n    [(and\n      (member\
    \ (string->number (regexp-replace* #rx\"^[0-9]{2}-\" date \"\")) '(4 6 9 11))\n\
    \      (not (member (string->number (regexp-replace* #rx\"^.*-(.*)-.*$\" date\
    \ \"\\\\1\")) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\
    \ 25 26 27 28 29 30)))) false]\n    [(and\n      (string=? (regexp-replace* #rx\"\
    ^[0-9]{2}-\" date \"\") \"02\")\n      (not (member (string->number (regexp-replace*\
    \ #rx\"^.*-(.*)-.*$\" date \"\\\\1\")) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20 21 22 23 24 25 26 27 28 29)))) false]\n    [else true]))\n", " \
    \ (define (valid-date? date)\n    (match date\n      [(list mo day yr)\n     \
    \  (cond [(or (< mo 1) (> mo 12)) #f]\n             [(or (and (= mo 1) (= day\
    \ 31))\n                  (and (= mo 3) (= day 31))\n                  (and (=\
    \ mo 5) (= day 31))\n                  (and (= mo 7) (= day 31))\n           \
    \       (and (= mo 8) (= day 31))\n                  (and (= mo 10) (= day 31))\n\
    \                  (and (= mo 12) (= day 31))\n                  (and (= mo 4)\
    \ (= day 30))\n                  (and (= mo 6) (= day 30))\n                 \
    \ (and (= mo 9) (= day 30))\n                  (and (= mo 11) (= day 30))\n  \
    \                (and (= mo 2) (> day 29))) #f]\n             [else #t])]))\n\
    \  (define (split date)\n    (match date\n      [(list mo day yr)\n       (list\
    \ mo day yr)]))\n  (match date\n    [() #f]\n    [(_) (valid-date? (split date))]))",
  "  (cond\n    [(empty? date) #f]\n    [(string-contains date #\\-) #f]\n    [(string-split\
    \ date \"-\" #:count 4) #f]\n    [else #t]))\n", "  (match date\n    [#rx \"^([1-9]|1[0-2])-(3[0-1]|[1-2][0-9]|0[1-9])-\\\
    \\d{4}$\" date]\n    [(match #rx \"^[0-2]?[0-9]?[0-9]{2}-[0-3]?[0-9]-[0-3]?[0-9]$\"\
    \ date)\n     (match #rx \"^[0-2]?[0-9]?[0-9]{2}-[0-3]?[0-9]-[0-3]?[0-9]$\" date)]\n\
    \    [_ #f]))", "  (define (get-day date)\n    (string->number (substring date\
    \ 3 5)))\n  (define (get-month date)\n    (string->number (substring date 0 2)))\n\
    \  (define (get-year date)\n    (string->number (substring date 6 10)))\n  (define\
    \ (check-day-is-valid-in-month? day month)\n    (cond [(= month 1) (cond [(< day\
    \ 1) false] [(> day 31) false] [else true])]\n          [(= month 2) (cond [(<\
    \ day 1) false] [(> day 29) false] [else true])]\n          [(= month 3) (cond\
    \ [(< day 1) false] [(> day 31) false] [else true])]\n          [(= month 4) (cond\
    \ [(< day 1) false] [(> day 30) false] [else true])]\n          [(= month 5) (cond\
    \ [(< day 1) false] [(> day 31) false] [else true])]\n          [(= month 6) (cond\
    \ [(< day 1) false] [(> day 30) false] [else true])]\n          [(= month 7) (cond\
    \ [(< day 1) false] [(> day 31) false] [else true])]\n          [(= month 8) (cond\
    \ [(< day 1) false] [(> day 31) false] [else true])]\n          [(= month 9) (cond\
    \ [(< day 1) false] [(> day 30) false] [else true])]\n          [(= month 10)\
    \ (cond [(< day 1) false] [(> day 31) false] [else true])]\n          [(= month\
    \ 11) (cond [(< day 1) false] [(> day 30) false] [else true])]\n          [(=\
    \ month 12) (cond [(< day 1) false] [(> day 31) false] [else true])]))\n  (define\
    \ (check-month-is-valid? month)\n    (cond [(< month 1) false] [(> month 12) false]\
    \ [else true]))\n  (define (check-date-format? date)\n    (string-contains date\
    \ #\"-\")\n    (or (= (length date) 10) (= (length date) 9)))\n  (and", "  (define\
    \ (num->char n) (number->string n))\n  (define (valid-month-days? month day)\n\
    \    (cond [(or (= 1 month) (= 3 month) (= 5 month) (= 7 month) (= 8 month) (=\
    \ 10 month) (= 12 month)) (= day 31)]\n          [(or (= 4 month) (= 6 month)\
    \ (= 9 month) (= 11 month)) (= day 30)]\n          [(= 2 month) (= day 29)]))\n\
    \  (define (valid-month? month) (and (<= 1 month) (<= month 12)))\n  (define (valid-date-format?\
    \ date)\n    (define (valid-date-format-recur date-as-list)\n      (if (null?\
    \ date-as-list)\n          #t\n          (and (= 1 (string-length (car date-as-list)))\
    \ (valid-date-format-recur (cdr date-as-list)))))\n    (valid-date-format-recur\
    \ (string-split date #\\-) ))\n  (define (valid-year? year) (<= year 2030))\n\
    \  (define (valid-month-year? month year)\n    (cond [(= 2 month) (and (= year\
    \ 2020) (<= 1 month) (<= month 28))]\n          [else #t]))\n  (define (date-as-list\
    \ date) (string-split date #\\-))\n  (let* ([date-as-list (date-as-list date)]\n\
    \         [month (string->number (car date-as-list))]\n         [day (string->number\
    \ (cadr date-as-list))]\n         [year (string->number (caddr date-as-list))])\n\
    \    (and (valid-date-format? date)\n         (valid-month? month)\n         (valid-month-days?\
    \ month day)\n         (valid-year? year)\n         (valid-month-year? month year))))\n",
  "  (define (parse-int [c (car date)])\n    (cond\n      [(char-numeric? c) (string->number\
    \ (string c))]\n      [else 0]))\n  (define (parse-month date)\n    (let* ([d\
    \ (parse-int date)]\n           [m (parse-int (cdr date))])\n      (cond\n   \
    \     [(= (mod m 10) 0) d]\n        [else (+ (* 10 d) m)])))\n  (define (valid-day?\
    \ month day)\n    (if (or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n        (<= 1 day 31)\n        (if (or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n            (<= 1 day 30)\n      \
    \      (if (= month 2)\n                (<= 1 day 29)\n                false))))\n\
    \  (define (valid-month? month)\n    (<= 1 month 12))\n  (define (valid-year?\
    \ year)\n    (<= 1 year 999))\n  (let* ([(spl d-s) (string-split date \"-\")]\n\
    \         [month (parse-month d-s)]\n         [day (parse-int (cdr (string-split\
    \ (car (cdr spl)) \"-\")))]\n         [year (parse-int (cdr (string-split (car\
    \ (cdr (cdr spl))) \"-\")))])\n    (if (and (valid-month? month) (valid-day? month\
    \ day) (valid-year? year))\n        true\n        false)))", "  (define (valid-month\
    \ m)\n    (and (<= 1 m) (<= m 12)))\n  (define (valid-day m d)\n    (and (<= 1\
    \ d)\n         (cond [(in-list? m '(1 3 5 7 8 10 12)) (<= d 31)]\n           \
    \    [(in-list? m '(4 6 9 11)) (<= d 30)]\n               [(= m 2) (<= d 29)]\n\
    \               [else #f])))\n  (let* ([toks (string-split date \"-\")]\n    \
    \     [mm (string->number (first toks))]\n         [dd (string->number (second\
    \ toks))]\n         [yyyy (string->number (third toks))])\n    (and (valid-month\
    \ mm)\n         (valid-day mm dd)\n         (<= 1000 yyyy)\n         (<= yyyy\
    \ 9999))))\n", "  (match (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    \ date)\n    [(and mth d m ) #t]\n    [_            #f]))", "  (and\n   (not (string=?\
    \ date \"\"))\n   (cond\n     [(regexp-match? \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date) #t]\n     [else #f])\n   (cond\n     [(regexp-match? \"^01-[0-9]{2}-[0-9]{4}$\"\
    \ date) #t]\n     [(regexp-match? \"^02-[0-9]{2}-[0-9]{4}$\" date) #t]\n     [(regexp-match?\
    \ \"^03-[0-9]{2}-[0-9]{4}$\" date) #t]\n     [(regexp-match? \"^04-[0-9]{2}-[0-9]{4}$\"\
    \ date) #t]\n     [(regexp-match? \"^05-[0-9]{2}-[0-9]{4}$\" date) #t]\n     [(regexp-match?\
    \ \"^06-[0-9]{2}-[0-9]{4}$\" date) #t]\n     [(regexp-match? \"^07-[0-9]{2}-[0-9]{4}$\"\
    \ date) #t]\n     [(regexp-match? \"^08-[0-9]{2}-[0-9]{4}$\" date) #t]\n     [(regexp-match?\
    \ \"^09-[0-9]{2}-[0-9]{4}$\" date) #t]\n     [(regexp-match? \"^10-[0-9]{2}-[0-9]{4}$\"\
    \ date) #t]\n     [(regexp-match? \"^11-[0-9]{2}-[0-9]{4}$\" date) #t]\n     [(regexp-match?\
    \ \"^12-[0-9]{2}-[0-9]{4}$\" date) #t]\n     [else #f])\n   (cond\n     [(regexp-match?",
  "  (and\n   (and (not (empty? date))\n        (regexp-match #rx\"^\\\\d{2}-\\\\\
    d{2}-\\\\d{4}$\" date))\n   (let* ([_ (string-split date #\"-\")]\n          [m\
    \ (_ first)]\n          [d (_ second)]\n          [y (_ third)])\n     (and (and\
    \ (<= 1 m 12)\n               (<= 1 d\n                   (cond [(member m '(1\
    \ 3 5 7 8 10 12)) 31]\n                         [(member m '(4 6 9 11)) 30]\n\
    \                         [(= m 2)\n                          (if (and (= 0 (mod\
    \ y 4))\n                                   (or (/= 0 (mod y 100))\n         \
    \                              (= 0 (mod y 400))))\n                         \
    \     29 30)]\n                         [else 0])))\n          (= #e (string->number\
    \ (list->string m))\n             (string->number (list->string d))\n        \
    \     (string->number (list->string y)))))))", "  (if (not (regexp-match #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n      false\n      (let* ([date-list (regexp-split\
    \ #rx\"-\" date)]\n             [month (string->number (list-ref date-list 0))]\n\
    \             [day (string->number (list-ref date-list 1))]\n             [year\
    \ (string->number (list-ref date-list 2))])\n        (if (or (< month 1) (> month\
    \ 12))\n            false\n            (if (or (and (= month 1) (= month 3) (=\
    \ month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n              \
    \      (and (< day 1) (> day 31)))\n                false\n                (if\
    \ (or (and (= month 4) (= month 6) (= month 9) (= month 11))\n               \
    \         (and (< day 1) (> day 30)))\n                    false\n           \
    \         (if (and (= month 2) (< day 1) (> day 29))\n                       \
    \ false\n                        true)))))))", "  (define (days-in-month month)\n\
    \    (cond ((= month 1) 31)\n          ((or (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12)) 31)\n          ((or (= month 4) (= month\
    \ 6) (= month 9) (= month 11)) 30)\n          ((= month 2) 29)\n          (else\
    \ #f)))\n  (cond ((or (= (string-length date) 0) (= (string-length date) 1)) #f)\n\
    \        ((not (string-match \"^[0-9]+-[0-9]+-[0-9]+$\" date)) #f)\n        ((<\
    \ (string->number (string-append (string-take date 2) (string-drop date 3 2)))\
    \ 1) #f)\n        ((< (string->number (string-append (string-take date 3) (string-drop\
    \ date 6 3))) 1) #f)\n        ((> (string->number (string-append (string-take\
    \ date 3) (string-drop date 6 3))) 12) #f)\n        ((> (string->number (string-append\
    \ (string-take date 0) (string-drop date 3 0))) (days-in-month (string->number\
    \ (string-append (string-take date 3) (string-drop date 6 3))))) #f)\n       \
    \ (else #t)))\n", "  (let* ([date-str (string-split date \"-\")]\n         [month\
    \ (string->number (list-ref date-str 0))]\n         [day (string->number (list-ref\
    \ date-str 1))]\n         [year (string->number (list-ref date-str 2))])\n   \
    \ (cond\n      [(or (empty? date)\n           (= day 0)\n           (= month 0)\n\
    \           (= year 0))\n       #f]\n      [(and (= day 29)\n            (= month\
    \ 2)\n            (not (leap-year? year)))\n       #f]\n      [(not (member month\
    \ '(1 3 5 7 8 10 12)))\n       (and (> day 30) (< day 1))]\n      [(not (member\
    \ month '(4 6 9 11)))\n       (and (> day 31) (< day 1))]\n      [else\n     \
    \  #t])))\n", "  (and (regexp-match? #rx\"^([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-([0-9]{4})$\"\
    \ date)\n       (let* ([date (string-split date #\\-)])\n         (let* ([month\
    \ (string->number (list-ref date 0))]\n                [day (string->number (list-ref\
    \ date 1))]\n                [year (string->number (list-ref date 2))])\n    \
    \       (if (not (and (integer? month) (integer? day) (integer? year))) false\n\
    \               (or (and (or (= month 1) (= month 3) (= month 5) (= month 7) (=\
    \ month 8) (= month 10) (= month 12)) (>= day 1) (<= day 31))\n              \
    \     (and (or (= month 4) (= month 6) (= month 9) (= month 11)) (>= day 1) (<=\
    \ day 30))\n                   (and (= month 2) (>= day 1) (<= day 29))))))))\n",
  "  (define months '(1 3 5 7 8 10 12))\n  (define leap? (lambda (year) (or (and (zero?\
    \ (modulo year 4)) (not (zero? (modulo year 100)))) (zero? (modulo year 400)))))\n\
    \  (define (valid-day? month day)\n    (cond\n      [(or (zero? month) (zero?\
    \ day)) #f]\n      [(and (= 2 month) (= 28 day)) #t]\n      [(= 2 month) (and\
    \ (leap? (number->string (date->year date))) (> day 28))]\n      [(member month\
    \ months) (>= day 1) (<= day 31)]\n      [(and (> month 2) (< month 8)) (>= day\
    \ 1) (<= day 30)]\n      [(and (> month 7) (< month 12)) (>= day 1) (<= day 30)]\n\
    \      [else #f]))\n  (define (valid-month? month)\n    (cond\n      [(zero? month)\
    \ #f]\n      [(<= month 12) (>= month 1)]\n      [else #f]))\n  (define (valid-year?\
    \ year)\n    (and (>= year 1) (>= year 1)))\n  (define (valid-separator? d1 d2)\n\
    \    (and (= #\\- (string-ref d1 2)) (= #\\- (string-ref d2 2))))\n  (define (to-num\
    \ s)\n    (string->number s))\n  (define (date->day date)\n    (string->number\
    \ (substring date 3 5)))\n  (define (date->month date)\n    (string->number (substring\
    \ date 0 2)))\n  (define (date->year date)\n    (string->number (substring date\
    \ 6 10)))\n  (and (and (and (and (and (and (and (and (and (and (not (zero? (string-length\
    \ date))) (valid-day? (date->month date) (date->day date))) (valid-month? (date->month\
    \ date))) (valid-year? (date->year date))) (valid-separator? (substring date 0\
    \ 2) (substring date 3 5))) (valid-separator? (substring date 3 5) (substring\
    \ date", "  (andmap\n   identity\n   (list\n    (not (zero? (string-length date)))\
    \ ; 1\n    (list\n     (list #t #t #t #t #t #t #t #t #t #t #t #t) ; 2\n     (list\
    \ #t #t #t #t #t #t #t #t #t #t #t #t)\n     (list #t #t #t #t #t #t #t #t #t\
    \ #t #t #t)\n     (list #t #t #t #t #t #t #t #t #t #t #t #t)\n     (list #t #t\
    \ #t #t #t #t #t #t #t #t #t #t)\n     (list #t #t #t #t #t #t #t #t #t #t #t\
    \ #t)\n     (list #t #t #t #t #t #t #t #t #t #t #t #t)\n     (list #t #t #t #t\
    \ #t #t #t #t #t #t #t #t)\n     (list #t #t #t #t #t #t #t #t #t #t #t #t)\n\
    \     (list #t #t #t #t #t #t #t #t #t #t #t #t)\n     (list #t #t #t #t #t #t\
    \ #t #t #t #t #t #t)\n     (list #t #t #t #t #t #t #t #t #t #t #t #t))\n    (string-match\
    \ #rx\"\\\\b[0-3][0-9]-[0-1][0-9]-[0-9]{4}\\\\b\" date) ; 4\n    )))\n", "  (let*\
    \ ((parts (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n   \
    \      (month (string-&gt;number (vector-ref parts 1)))\n         (day (string-&gt;number\
    \ (vector-ref parts 2)))\n         (year (string-&gt;number (vector-ref parts\
    \ 3))))\n    (and parts\n         (&lt;= 1 day 31)\n         (&lt;= 1 month 12)\n\
    \         (&lt;= 1 day (if (member month '(1 3 5 7 8 10 12)) 31\n            \
    \         (if (member month '(4 6 9 11)) 30\n                         29)))\n\
    \         (= (vector-length parts) 4))))\n", "  (define (months date)\n    (and\
    \ (>= date 1) (<= date 12)))\n  (define (days date)\n    (and (>= date 1) (<=\
    \ date (month-days date))))\n  (define (year date)\n    (and (>= date 1) (<= date\
    \ 9999)))\n  (define (split str char)\n    (if (empty? str)\n        (values empty\
    \ empty)\n        (values (first str) (string-tail str 1))))\n  (define (month-days\
    \ date)\n    (cond\n      [(or (= date 1) (= date 3) (= date 5) (= date 7) (=\
    \ date 8) (= date 10) (= date 12)) 31]\n      [(or (= date 4) (= date 6) (= date\
    \ 9) (= date 11)) 30]\n      [(= date 2) 29]))\n  (define (year-days date)\n \
    \   (if (and (zero? (modulo date 400)) (zero? (modulo date 100)))\n        366\n\
    \        (if (zero? (modulo date 4))\n            366\n            365)))\n  (define\
    \ (valid-date? date)\n    (define (parse-day day)\n      (let ([(day-char month-char)\
    \ (split day #\\-)]\n            [(month month-tail) (split month-char #\\-)]\n\
    \            [(year-char year-tail) (split year-tail #\\space)])\n        (values\
    \ (string->number day-char)\n                (string->number month)\n        \
    \        (string->number year-char))))\n    (let ([(day month year) (parse-day\
    \ date)])\n      (and (months month)\n           (days day)\n           (year\
    \ year)\n           (equal? (length date) 10)\n           (equal? (char-downcase\
    \ (string-ref date 2)) #\\-)\n           (equal? (char-downcase (string-ref date\
    \ 5)) #\\-)\n           (equal? (year-days year) 365))))\n  (cond\n    [(valid-date?\
    \ date) \"True\"]\n    [else \"False\"]))\n", "  (define (parse-date date)\n \
    \   (let ((parts (string-split date \"-\")))\n      (list (string->number (list-ref\
    \ parts 0))\n            (string->number (list-ref parts 1))\n            (string->number\
    \ (list-ref parts 2)))))\n  (define (valid-month? month)\n    (and (>= month 1)\
    \ (<= month 12)))\n  (define (valid-day? month day)\n    (and (>= day 1)\n   \
    \      (<= day (cond ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12)) 31)\n                       ((or (= month 4) (=\
    \ month 6) (= month 9) (= month 11)) 30)\n                       ((= month 2)\
    \ 29)\n                       (else 0)))))\n  (define (valid-date? date)\n   \
    \ (let ((month (car date))\n          (day (cadr date))\n          (year (caddr\
    \ date)))\n      (and (valid-month? month)\n           (valid-day? month day))))\n\
    \  (valid-date? (parse-date date)))\n", "  (if (string-empty? date) #f\n     \
    \ (let ([month (string->number (substring date 0 2))]\n            [day (string->number\
    \ (substring date 3 5))]\n            [year (string->number (substring date 6\
    \ 10))])\n        (cond\n          [(or (< month 1) (> month 12)) #f]\n      \
    \    [(or (< year 1) (> year 9999)) #f]\n          [(or (< day 1) (> day 31))\
    \ #f]\n          [(or (and (< month 4) (> day 30))\n               (and (< month\
    \ 7) (> day 30))\n               (and (< month 8) (> day 31))\n              \
    \ (and (< month 9) (> day 30))\n               (and (< month 11) (> day 31))\n\
    \               (and (= month 12) (> day 31))) #f]\n          [(and (= month 2)\
    \ (> day 29)) #f]\n          [else #t]))))\n", "  (define (valid-month? month)\n\
    \    (and (&gt;= month 1) (&lt;= month 12)))\n  (define (valid-day? month day)\n\
    \    (cond ((and (elem month '(1 3 5 7 8 10 12))\n                (&gt;= day 1)\
    \ (&lt;= day 31))\n           #t)\n          ((and (elem month '(4 6 9 11))\n\
    \                (&gt;= day 1) (&lt;= day 30))\n           #t)\n          ((and\
    \ (= month 2)\n                (&gt;= day 1) (&lt;= day 29))\n           #t)\n\
    \          (else #f)))\n  (define (valid-year? year)\n    (&gt;= year 1000))\n\
    \  (define (valid-format? date)\n    (regexp-match? \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-sep? date)\n    (regexp-match? \"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\"\
    \ date))\n  (and (not (string=? date \"\"))\n       (valid-format? date)\n   \
    \    (valid-sep? date)\n       (let* ([parts (regexp-split \"-\" date)]\n    \
    \          [month (string-&gt;number (list-ref parts 0))]\n              [day\
    \ (string-&gt;number (list-ref parts 1))]\n              [year (string-&gt;number\
    \ (list-ref parts 2))])\n         (and (valid-month? month)\n              (valid-day?\
    \ month day)\n              (valid-year? year)))))\n</code>\n", "  (cond\n   \
    \ [(equal? date \"\") #f]\n    [(equal? (regexp-match #rx\"^\\d{2}-\\d{2}-\\d{4}$\"\
    \ date) #f) #f]\n    [(let ([m (string-&gt;number (regexp-match #rx\"^\\d{2}\"\
    \ date))]\n           [d (string-&gt;number (regexp-match #rx\"^\\d{2}-(\\d{2})\"\
    \ date))]\n           [y (string-&gt;number (regexp-match #rx\"^\\d{2}-\\d{2}-(\\\
    d{4})\" date))])\n       (cond\n         [(or (&lt; m 1) (&gt; m 12)) #f]\n  \
    \       [(or (&lt; d 1) (&gt; d 31)) #f]\n         [(member m '(4 6 9 11)) (or\
    \ (&lt; d 1) (&gt; d 30))]\n         [(equal? m 2) (or (&lt; d 1) (&gt; d 29))]\n\
    \         [else #t]))]\n    [else #t]))\n", "  (and\n   (not (string=? \"\" date))\n\
    \   (>= (string->number (substring date 3 5)) 1)\n   (<= (string->number (substring\
    \ date 3 5))\n       (cond [(or (string=? (substring date 0 2) \"01\")\n     \
    \              (string=? (substring date 0 2) \"03\")\n                   (string=?\
    \ (substring date 0 2) \"05\")\n                   (string=? (substring date 0\
    \ 2) \"07\")\n                   (string=? (substring date 0 2) \"08\")\n    \
    \               (string=? (substring date 0 2) \"10\")\n                   (string=?\
    \ (substring date 0 2) \"12\"))\n               31]\n              [(or (string=?\
    \ (substring date 0 2) \"04\")\n                   (string=? (substring date 0\
    \ 2) \"06\")\n                   (string=? (substring date 0 2) \"09\")\n    \
    \               (string=? (substring date 0 2) \"11\"))\n               30]\n\
    \              [(string=? (substring date 0 2) \"02\")\n               29]))\n\
    \   (>= (string->number (substring date 0 2)) 1)\n   (<= (string->number (substring\
    \ date 0 2)) 12)\n   (equal? (substring date 2 3) \"-\")\n   (equal? (substring\
    \ date 5 6) \"-\")\n   (integer? (string->number (substring date 6 10)))\n   (integer?\
    \ (string->number (substring date 3 5)))\n   (integer? (string->number (substring\
    \ date 0 2)))))\n", "  (define (date-&gt;day-month-year date)\n    (string-split\
    \ date \"-\"))\n  (define (day-month-year-&gt;month dmy)\n    (string-&gt;number\
    \ (car dmy)))\n  (define (day-month-year-&gt;day dmy)\n    (string-&gt;number\
    \ (cadr dmy)))\n  (define (day-month-year-&gt;year dmy)\n    (string-&gt;number\
    \ (caddr dmy)))\n  (define (days-for-month month)\n    (cond [(= month 1) 31]\n\
    \          [(= month 2) 28]\n          [(= month 3) 31]\n          [(= month 4)\
    \ 30]\n          [(= month 5) 31]\n          [(= month 6) 30]\n          [(= month\
    \ 7) 31]\n          [(= month 8) 31]\n          [(= month 9) 30]\n          [(=\
    \ month 10) 31]\n          [(= month 11) 30]\n          [(= month 12) 31]))\n\
    \  (let ([dmy (date-&gt;day-month-year date)])\n    (cond [(not (= (length dmy)\
    \ 3)) false]\n          [(not (&lt;= (day-month-year-&gt;month dmy) 12)) false]\n\
    \          [(not (&lt;= 1 (day-month-year-&gt;month dmy))) false]\n          [(not\
    \ (&lt;= (day-month-year-&gt;day dmy) (days-for-month (day-month-year-&gt;month\
    \ dmy)))) false]\n          [(not (&lt;= 1 (day-month-year-&gt;day dmy))) false]\n\
    \          [else true])))\n", "  (define (helper date)\n    (define (helper2 date)\n\
    \      (define (helper3 date)\n        (define (helper4 date)\n          (define\
    \ (helper5 date)\n            (and\n              (= (car date) \"/\")\n     \
    \         (and\n                (= (cadr date) \"0\")\n                (= (caddr\
    \ date) \"1\")\n                (= (cadddr date) \"/\")\n                (and\n\
    \                  (= (caddddr date) \"0\")\n                  (= (cadddddr date)\
    \ \"0\")\n                  (= (caddddddr date) \"0\")\n                  (= (cadddddddr\
    \ date) \"1\")\n                  (null? (cddddddddr date))))))\n          (or\n\
    \            (null? date)\n            (helper5 date)))\n        (or\n       \
    \   (null? date)\n          (helper4 date)))\n      (or\n        (null? date)\n\
    \        (helper3 date)))\n    (or\n      (null? date)\n      (helper2 date)))\n\
    \  (helper date))\n</code>\n", "  (define (months-list)\n    (build-list 12 add1))\n\
    \  (define (month-days month)\n    (cond ((or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12)) 31)\n          ((or (=\
    \ month 4) (= month 6) (= month 9) (= month 11)) 30)\n          ((= month 2) 29)\n\
    \          (else #f)))\n  (define (month-valid? month)\n    (memq month (months-list)))\n\
    \  (define (days-valid? month days)\n    (and (>= days 1) (<= days (month-days\
    \ month))))\n  (define (year-valid? year)\n    (>= year 1))\n  (define (pieces-valid?\
    \ pieces)\n    (let ([month (string->number (list-ref pieces 0))]\n          [days\
    \ (string->number (list-ref pieces 1))]\n          [year (string->number (list-ref\
    \ pieces 2))])\n      (and (month-valid? month)\n           (days-valid? month\
    \ days)\n           (year-valid? year))))\n  (if (string-null? date)\n      #f\n\
    \      (pieces-valid? (string-split date \"-\"))))\n", "  (define (check_month?\
    \ month)\n    (cond\n      [(< month 1) #f]\n      [(> month 12) #f]\n      [else\
    \ #t]))\n  (define (check_day? day month)\n    (cond\n      [(< day 1) #f]\n \
    \     [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (> day 31)]\n      [(and (= month 4) (= month 6) (=\
    \ month 9) (= month 11))\n       (> day 30)]\n      [(= month 2)\n       (> day\
    \ 29)]\n      [else #t]))\n  (define (valid? date)\n    (define (split_date date)\n\
    \      (map (lambda (x) (string->number x)) (regexp-split #rx \"-\" date)))\n\
    \    (define (split_month_day_year date)\n      (let ([month (vector-ref date\
    \ 0)]\n            [day (vector-ref date 1)]\n            [year (vector-ref date\
    \ 2)])\n        (list month day year)))\n    (let ([month-day-year (split_month_day_year\
    \ (split_date date))])\n      (let ([month (vector-ref month-day-year 0)]\n  \
    \          [day (vector-ref month-day-year 1)]\n            [year (vector-ref\
    \ month-day-year 2)])\n        (cond\n          [(not (string? date)) #f]\n  \
    \        [(not (check_month? month)) #f]\n          [(not (check_day? day month))\
    \ #f]\n          [else #t]))))\n  (valid? date))", "  (local [(define (date->list\
    \ date)\n            (list (string->number (substring date 0 2))\n           \
    \       (string->number (substring date 3 5))\n                  (string->number\
    \ (substring date 6 10))))\n          (define (month-in-date n)\n            (cond\
    \ [(or (= n 1) (= n 3) (= n 5) (= n 7) (= n 8) (= n 10) (= n 12))\n          \
    \         #t]\n                  [(or (= n 4) (= n 6) (= n 9) (= n 11))\n    \
    \               #f]\n                  [(= n 2)\n                   #f]))\n  \
    \        (define (valid-month-and-day? date)\n            (let-values ([(mm dd\
    \ yy) (date->list date)])\n              (cond [(= mm 2)\n                   \
    \  (and (>= dd 1) (<= dd 29))]\n                    [(month-in-date mm)\n    \
    \                 (and (>= dd 1) (<= dd 31))]\n                    [else\n   \
    \                  (and (>= dd 1) (<= dd 30))])))\n          (define (valid-year?\
    \ date)\n            (let-values ([(mm dd yy) (date->list date)])\n          \
    \    (>= yy 1753)))]\n    (and (not (empty? date))\n         (string-length date)\n\
    \         (valid-month-and-day? date)\n         (valid-year? date))))\n", "  (and\
    \ (not (empty? date))\n       (let ([months (first (regexp-match #rx\"([^-]+)-([^-]+)-([^-]+)\"\
    \ date))]\n             [days (second (regexp-match #rx\"([^-]+)-([^-]+)-([^-]+)\"\
    \ date))]\n             [years (third (regexp-match #rx\"([^-]+)-([^-]+)-([^-]+)\"\
    \ date))])\n         (and (not (empty? months))\n              (not (empty? days))\n\
    \              (not (empty? years))\n              (let ([months (string->number\
    \ months)]\n                    [days (string->number days)]\n               \
    \     [years (string->number years)])\n                (and (>= months 1)\n  \
    \                   (<= months 12)\n                     (cond\n             \
    \          [(or (= months 1) (= months 3) (= months 5) (= months 7) (= months\
    \ 8) (= months 10) (= months 12))\n                        (and (>= days 1) (<=\
    \ days 31))]\n                       [(or (= months 4) (= months 6) (= months\
    \ 9) (= months 11))\n                        (and (>= days 1) (<= days 30))]\n\
    \                       [(= months 2)\n                        (and (>= days 1)\
    \ (<= days 29))]\n                       [else #f])))))))\n", "  (define (valid-month\
    \ month)\n    (and (&gt;= month 1) (&lt;= month 12)))\n  (define (valid-day month\
    \ day)\n    (if (or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8)\
    \ (= month 10) (= month 12))\n        (and (&gt;= day 1) (&lt;= day 31))\n   \
    \     (if (or (= month 4) (= month 6) (= month 9) (= month 11))\n            (and\
    \ (&gt;= day 1) (&lt;= day 30))\n            (if (= month 2)\n               \
    \ (and (&gt;= day 1) (&lt;= day 29))\n                (error \"Invalid month:\
    \ ~a\" month)))))\n  (define (valid-year year)\n    (and (&gt;= year 0) (&lt;=\
    \ year 9999)))\n  (define (valid-format date)\n    (and (not (string=? \"\" date))\n\
    \         (let ([l (string-length date)])\n           (and (= l 10) (string=?\
    \ (substring date 2 3) \"-\") (string=? (substring date 5 6) \"-\")))))\n  (if\
    \ (valid-format date)\n      (let* ([d-lst (string-&gt;list date)]\n         \
    \    [d (string-&gt;number (string-join (cddr d-lst) \"\"))]\n             [m\
    \ (string-&gt;number (string-join (list-ref d-lst 0) \"\"))]\n             [y\
    \ (string-&gt;number (string-join (list-ref d-lst 4) \"\"))])\n        (and (valid-month\
    \ m) (valid-day m d) (valid-year y)))\n      false))\n</code>\n", "  (if (empty?\
    \ date)\n      #f\n      (let ([mm (string->number (substring date 0 2))]\n  \
    \          [dd (string->number (substring date 3 5))]\n            [yyyy (string->number\
    \ (substring date 6 10))])\n        (if (and (between? 1 12 mm)\n            \
    \     (between? 1 12 yyyy)\n                 (if (member mm '(1 3 5 7 8 10 12))\n\
    \                     (between? 1 31 dd)\n                     (between? 1 30\
    \ dd)))\n            #t\n            #f))))\n", "  (regexp-match? #rx\"^(((0?[1-9])|([1-2][0-9])|(3[0-1]))-(0?[1-9]|1[0-2])-((19|20)?[0-9]{2}))$\"\
    \ date))\n</code>\nTest Cases\n<code>;; 1, 31-1-1999, 01-01-1999, 1-01-1999, 1-1-1999,\
    \ 01-1-1999, 1-01-1999", "  (cond\n    [(or (string=? date \"\") (string-length\
    \ date) (/= 11 (string-length date)))\n     #f]\n    [(or (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\"\
    \ date))\n     #t]\n    [else\n     #f]))", "  (define months-list\n    (list\
    \ (list 1 3 5 7 8 10 12)\n          (list 4 6 9 11)\n          (list 2)))\n  (define\
    \ (is_date_valid? (date-year date) (date-month date) (date-day date))\n    (if\
    \ (and (not (empty? date))\n             (valid-date-year? date-year)\n      \
    \       (valid-date-month? date-month)\n             (valid-date-day? date-day\
    \ months-list))\n        true\n        false))\n  (define (valid-date-year? year)\n\
    \    (and (<= 4 (string-length year))\n         (<= (string-length year) 6)))\n\
    \  (define (valid-date-month? month)\n    (and (<= 1 month)\n         (<= month\
    \ 12)))\n  (define (valid-date-day? day months-list)\n    (if (and (<= 1 day)\n\
    \             (<= day 31))\n        true\n        (if (member (list-ref months-list\
    \ 0) date-month)\n            (if (and (<= 1 day)\n                     (<= day\
    \ 31))\n                true\n                false)\n            (if (member\
    \ (list-ref months-list 1) date-month)\n                (if (and (<= 1 day)\n\
    \                         (<= day 30))\n                    true\n           \
    \         false)\n                (if (member (list-ref months-list 2) date-month)\n\
    \                    (if (and (<= 1 day)\n                             (<= day\
    \ 29))\n                        true\n                        false)\n       \
    \             false)))))\n  (define (split-date-string date)\n    (let ((date-list\
    \ (string-split date \"-\")))\n      (list (string->number (list-ref date-list\
    \ 0))\n            (string->number (list-ref date-list 1))\n            (string->number\
    \ (list-ref date-list 2)))))\n  (is_date_valid? (split-date-string date)))\n",
  "  (if (empty? date)\n      #f\n      (let* ([ddmm-list (string-split date \"-\"\
    )]\n             [month (string->number (list-ref ddmm-list 0))]\n           \
    \  [day (string->number (list-ref ddmm-list 1))])\n        (cond ((or (< month\
    \ 1)\n                   (> month 12))\n               #f)\n              ((and\
    \ (= month 1)\n                    (= month 3)\n                    (= month 5)\n\
    \                    (= month 7)\n                    (= month 8)\n          \
    \          (= month 10)\n                    (= month 12))\n               (and\
    \ (>= day 1)\n                    (<= day 31)))\n              ((and (= month\
    \ 4)\n                    (= month 6)\n                    (= month 9)\n     \
    \               (= month 11))\n               (and (>= day 1)\n              \
    \      (<= day 30)))\n              ((= month 2)\n               (and (>= day\
    \ 1)\n                    (<= day 29)))))))\n", "  (let ([mm (string->number (string-ref\
    \ date 0))]\n        [dd (string->number (string-ref date 2))]\n        [yyyy\
    \ (string->number (substring date 4))])\n    (and (> mm 0) (< mm 13)\n       \
    \  (> dd 0) (cond\n                    [(member mm '(1 3 5 7 8 10 12)) (<= dd\
    \ 31)]\n                    [(member mm '(4 6 9 11)) (<= dd 30)]\n           \
    \         [(= mm 2) (<= dd 29)])\n         (= (string-length date) 10)\n     \
    \    (= (string-ref date 1) #\\- )\n         (= (string-ref date 3) #\\- )\n \
    \        (<= yyyy 9999))))\n", "  (and\n   (not (string=? date \"\"))\n   (let*\
    \ ([days (map string->number (regexp-split #rx\"-\" date))]\n          [day (first\
    \ days)]\n          [month (second days)]\n          [year (third days)])\n  \
    \   (and (integer? day)\n          (integer? month)\n          (integer? year)\n\
    \          (if (or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8)\
    \ (= month 10) (= month 12))\n              (and (<= 1 day) (<= day 31))\n   \
    \           (and (<= 1 day) (<= day 30)))\n          (and (<= 1 month) (<= month\
    \ 12))))))\n", "  (if (string-empty? date)\n      #f\n      (let* ([mm-dd-yyyy\
    \ (regexp-split #rx\"-\" date)]\n             [month (string->number (vector-ref\
    \ mm-dd-yyyy 0))]\n             [day (string->number (vector-ref mm-dd-yyyy 1))]\n\
    \             [days-in-month\n              (cond ((= month 1) 31)\n         \
    \           ((= month 3) 31)\n                    ((= month 5) 31)\n         \
    \           ((= month 7) 31)\n                    ((= month 8) 31)\n         \
    \           ((= month 10) 31)\n                    ((= month 12) 31)\n       \
    \             ((= month 4) 30)\n                    ((= month 6) 30)\n       \
    \             ((= month 9) 30)\n                    ((= month 11) 30)\n      \
    \              ((= month 2) 29))])\n        (and (>= month 1)\n             (<=\
    \ month 12)\n             (>= day 1)\n             (<= day days-in-month)))))\n",
  "  (if (= (string-length date) 10)\n      (let* ((mm (substring date 0 2))\n   \
    \          (dd (substring date 3 5))\n             (yyyy (substring date 6 10)))\n\
    \        (if (and (number? (string->number mm))\n                 (number? (string->number\
    \ dd))\n                 (number? (string->number yyyy)))\n            (let* ((mm-num\
    \ (string->number mm))\n                   (dd-num (string->number dd))\n    \
    \               (yyyy-num (string->number yyyy)))\n              (cond\n     \
    \           [(or (= mm-num 1) (= mm-num 3) (= mm-num 5) (= mm-num 7) (= mm-num\
    \ 8) (= mm-num 10) (= mm-num 12))\n                 (and (<= 1 dd-num) (<= dd-num\
    \ 31))]\n                [(or (= mm-num 4) (= mm-num 6) (= mm-num 9) (= mm-num\
    \ 11))\n                 (and (<= 1 dd-num) (<= dd-num 30))]\n               \
    \ [(= mm-num 2)\n                 (and (<= 1 dd-num) (<= dd-num 29))]\n      \
    \          [else #f]))\n          #f)\n      #f))", "  (cond\n    [(or (equal?\
    \ date \"\")\n         (regexp-match #rx\"^(3[0-1]|0[1-9]|[1-2][0-9])-(0[1-9]|1[0-2])-[0-9]{4}$\"\
    \ date))\n     true]\n    [else false]))\n", "  (let ([date-list (string-split\
    \ date \"-\")])\n    (and (= (length date-list) 3)\n         (not (empty? date-list))\n\
    \         (not (empty? (second date-list)))\n         (and (= (string-length (first\
    \ date-list)) 2)\n              (string-&gt;number (first date-list))\n      \
    \        (&lt; (string-&gt;number (first date-list)) 13))\n         (and (= (string-length\
    \ (second date-list)) 2)\n              (string-&gt;number (second date-list))\n\
    \              (&lt; (string-&gt;number (second date-list)) 32))\n         (and\
    \ (= (string-length (third date-list)) 4)\n              (string-&gt;number (third\
    \ date-list))\n              (&lt; (string-&gt;number (third date-list)) 10000)))))\n\
    </code>\nThis works on my own tests. I want to improve it.\nAny suggestions on\
    \ a refactoring?\n", "  (and (and (and (> (length date) 0)\n                (<=\
    \ (char->integer (string-ref date 0)) 1)\n                (<= (char->integer (string-ref\
    \ date 1)) 2))\n           (and (<= (char->integer (string-ref date 3)) 3)\n \
    \               (<= (char->integer (string-ref date 4)) 9)))\n       (and (and\
    \ (<= (char->integer (string-ref date 6)) 2)\n                 (<= (char->integer\
    \ (string-ref date 7)) 9))\n            (and (<= (char->integer (string-ref date\
    \ 8)) 9)\n                 (<= (char->integer (string-ref date 9)) 9)))))", " \
    \ (regexp-match #rx\"^([1-9]|0[1-9]|1[0-2])-([1-9]|0[1-9]|[1-2][0-9]|3[0-1])-\\\
    d{4}$\" date))\n", "  (if (not (list? date))\n      #f\n      (define (sepchars\
    \ s)\n        (if (empty? s)\n            empty\n            (cons (first s) (sepchars\
    \ (rest s)))))\n      (define (date->list s)\n        (if (empty? s)\n       \
    \     empty\n            (cons (string->number (list->string (take-while (compose\
    \ not digit?) s)))\n                  (date->list (drop-while (compose not digit?)\
    \ s)))))\n      (define (validate date)\n        (and\n         (and\n       \
    \   (and\n           (>= (first date) 1)\n           (<= (first date) 12))\n \
    \         (and\n           (>= (second date) 1)\n           (<= (second date)\
    \ 31)))\n         (and\n          (eq? (length date) 3)\n          (and\n    \
    \       (>= (first (rest date)) 1)\n           (<= (first (rest date)) 12)))))\n\
    \      (validate (date->list (sepchars date)))))", "  (let ([date-list (regexp-match*\
    \ #rx\"([0-9]{2})-([0-9]{2})-([0-9]{4})\" date)])\n    (and (and (>= (string->number\
    \ (cadr date-list)) 1) (<= (string->number (cadr date-list)) 12))\n         (and\
    \ (>= (string->number (caddr date-list)) 1)\n              (cond\n           \
    \     [(member (string->number (cadr date-list)) '(1 3 5 7 8 10 12)) (<= (string->number\
    \ (caddr date-list)) 31)]\n                [(member (string->number (cadr date-list))\
    \ '(4 6 9 11)) (<= (string->number (caddr date-list)) 30)]\n                [(equal?\
    \ (string->number (cadr date-list)) 2) (<= (string->number (caddr date-list))\
    \ 29)]))\n         (and (>= (string->number (cadddr date-list)) 1) (<= (string->number\
    \ (cadddr date-list)) 9999)))))", "  (and (and (and (and (and (&gt; (string-length\
    \ date) 0)\n                       (&gt; (string-length date) 9))\n          \
    \          (equal? \"-\" (string-ref date 3)))\n                 (equal? \"-\"\
    \ (string-ref date 6)))\n              (&gt; (string-to-number (substring date\
    \ 0 2)) 0))\n           (&lt; (string-to-number (substring date 0 2)) 13))\n \
    \      (and (and (and (and (and (&gt; (string-to-number (substring date 3 5))\
    \ 0)\n                            (&lt; (string-to-number (substring date 3 5))\
    \ 32))\n                         (equal? (string-to-number (substring date 0 2))\
    \ 1))\n                      (equal? (string-to-number (substring date 0 2)) 3))\n\
    \                   (equal? (string-to-number (substring date 0 2)) 5))\n    \
    \            (equal? (string-to-number (substring date 0 2)) 7))\n        (and\
    \ (and (and (and (and (&gt; (string-to-number (substring date 3 5)) 0)\n     \
    \                        (&lt; (string-to-number (substring date 3 5)) 32))\n\
    \                          (equal? (string-to-number (substring date 0 2)) 8))\n\
    \                       (equal? (string-to-number (substring date 0 2)) 10))\n\
    \                    (equal? (string-to-number (substring date 0 2)) 12))\n  \
    \               (and (and (and (and (&gt; (string-to-number (substring date 3\
    \ 5)) 0)\n                                  (&lt; (string-to-number (substring\
    \ date 3 5)) 31))\n                               (equal? (string-to-number (substring\
    \ date 0 2)) 4))\n                            (equal? (string-to-number (substring\
    \ date 0 2)) 6))\n                         (equal? (string-to-number (substring\
    \ date 0 2)) 9))\n                  (equal? (string-to-number (substring date\
    \ 0 2)) 11))\n         (and (and (and (and (and (&gt; (string-to-number (substring\
    \ date 3 5)) 0)\n                              (&", "  (define (valid-days month\
    \ day)\n    (or (and (> month 1) (< month 3))\n        (and (> month 3) (< month\
    \ 5))\n        (and (> month 5) (< month 7))\n        (and (> month 7) (< month\
    \ 8))\n        (and (> month 8) (< month 10))\n        (and (> month 10) (< month\
    \ 12))))\n  (define (valid-days month day)\n    (and (> day 0)\n         (and\
    \ (and (= month 1) (<= day 31))\n              (and (and (= month 3) (<= day 31))\n\
    \                   (and (and (= month 5) (<= day 31))\n                     \
    \   (and (and (= month 7) (<= day 31))\n                             (and (and\
    \ (= month 8) (<= day 31))\n                                  (and (and (= month\
    \ 10) (<= day 31))\n                                       (and (and (= month\
    \ 12) (<= day 31))\n                                            (and (and (= month\
    \ 4) (<= day 30))\n                                                 (and (and\
    \ (= month 6) (<= day 30))\n                                                 \
    \     (and (and (= month 9) (<= day 30))\n                                   \
    \                        (and (and (= month 11) (<= day 30))\n               \
    \                                                 (and (= month 2) (<= day 29))))))))))))))))\n\
    \  (define (valid-months month)\n    (and (> month 0) (< month 13)))\n  (define\
    \ (valid-format date)\n    (string-match #rx\"^([0-1][0-9]|[0-9])-([0-3][0-9]|[0-9])-([0-9][0-9][0-9][0-9])$\"\
    \ date))\n  (and (valid-format date)\n       (valid-months (string->number (regexp-match\
    \ #rx\"([0-1][0-9]|[0-9])-\" date)))\n       (valid-days (string->number (regexp-match\
    \ #rx\"([0-1][0-9]|[0-9])-\" date))\n                   (string->number (regexp-match\
    \ #rx\"-([0-3][0-9]|[0-9])-\" date))", "  (and\n   (not (string=? \"\" date))\n\
    \   (or (string=? \"01-31-2000\" date)\n       (string=? \"02-29-2000\" date)\n\
    \       (string=? \"03-31-2000\" date)\n       (string=? \"04-30-2000\" date)\n\
    \       (string=? \"05-31-2000\" date)\n       (string=? \"06-30-2000\" date)\n\
    \       (string=? \"07-31-2000\" date)\n       (string=? \"08-31-2000\" date)\n\
    \       (string=? \"09-30-2000\" date)\n       (string=? \"10-31-2000\" date)\n\
    \       (string=? \"11-30-2000\" date)\n       (string=? \"12-31-2000\" date))))\n",
  "  (regexp-match? #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    \ date))\n", "  (let ((valid? (lambda (mm dd yyyy)\n                  (and (between\
    \ 1 12 mm)\n                       (between 1 31 dd)\n                       (between\
    \ 1 12 mm)\n                       (between 1 31 dd)\n                       (between\
    \ 1 30 dd)\n                       (between 1 29 dd)))))\n    (and (string? date)\n\
    \         (not (string=? \"\" date))\n         (apply valid? (regexp-match #rx\"\
    ^(\\\\d+)-(\\\\d+)-(\\\\d+)$\" date)))))\n", "  (define (get-tokens)\n    (regexp-match*\
    \ #rx\"^(\\d+)-(\\d+)-(\\d+)$\" date))\n  (define (valid-day month day)\n    (cond\n\
    \      [(or (equal? month 1) (equal? month 3) (equal? month 5) (equal? month 7)\
    \ (equal? month 8) (equal? month 10) (equal? month 12))\n       (and (&gt;= day\
    \ 1) (&lt;= day 31))]\n      [(or (equal? month 4) (equal? month 6) (equal? month\
    \ 9) (equal? month 11))\n       (and (&gt;= day 1) (&lt;= day 30))]\n      [(equal?\
    \ month 2)\n       (and (&gt;= day 1) (&lt;= day 29))]))\n  (let ([tokens (get-tokens)])\n\
    \    (and tokens\n         (equal? (length tokens) 4)\n         (and (and (&gt;=\
    \ (string-&gt;number (list-ref tokens 1)) 1) (&lt;= (string-&gt;number (list-ref\
    \ tokens 1)) 12))\n              (valid-day (string-&gt;number (list-ref tokens\
    \ 1)) (string-&gt;number (list-ref tokens 2)))))))\n", '  (string-equal? (format
    "~a" (string-match "^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$" date))
    "0"))', "  (and\n   ;; non-empty string\n   (not (string=? date \"\"))\n   ;;\
    \ correct days\n   (let ([month (string->number (substring date 0 2))]\n     \
    \    [day (string->number (substring date 3 5))])\n     (or\n      (and (= month\
    \ 1) \n           (= day 31))\n      (and (= month 3) \n           (= day 31))\n\
    \      (and (= month 5) \n           (= day 31))\n      (and (= month 7) \n  \
    \         (= day 31))\n      (and (= month 8) \n           (= day 31))\n     \
    \ (and (= month 10) \n           (= day 31))\n      (and (= month 12) \n     \
    \      (= day 31))\n      (and (= month 4) \n           (= day 30))\n      (and\
    \ (= month 6) \n           (= day 30))\n      (and (= month 9) \n           (=\
    \ day 30))\n      (and (= month 11) \n           (= day 30))\n      (and (= month\
    \ 2) \n           (= day 29))))\n   ;; correct months\n   (let ([month (string->number\
    \ (substring date 0 2))])\n     (or\n      (= month 1)\n      (= month 2)\n  \
    \    (= month 3)\n      (= month 4)\n      (= month 5)\n      (= month 6)\n  \
    \    (= month 7)\n      (= month 8)\n      (= month 9)\n      (= month 10)\n \
    \     (= month 11)\n      (= month 12)))\n   ;; correct format\n   (let ([year\
    \ (substring date 6 10)])\n     (and (= (string-length year) 4)\n          (string=?\
    \ (substring date 2 3) \"-\")\n          (string=? (substring date 5 6) \"-\"\
    )))))\n", "  (regexp-match #rx\"^(([0][1-9])|([1][0-2]))-(([0][1-9])|([1-2][0-9])|([3][0-1]))-([0-9]{4})$\"\
    \ date))\n", "  (define month (string->number (substring date 0 2)))\n  (define\
    \ day (string->number (substring date 3 5)))\n  (define year (string->number (substring\
    \ date 6 10)))\n  (define (is-leap-year? year)\n    (and (even? year)\n      \
    \   (or (equal? year 0)\n             (not (even? (/ year 100))))\n         (or\
    \ (equal? year 0)\n             (even? (/ year 400)))))\n  (and\n   (not (string=?\
    \ date \"\"))\n   (cond [(member month '(1 3 5 7 8 10 12))\n          (and (&lt;=\
    \ 1 day) (&lt;= day 31))]\n         [(member month '(4 6 9 11))\n          (and\
    \ (&lt;= 1 day) (&lt;= day 30))]\n         [(equal? month 2)\n          (and (&lt;=\
    \ 1 day)\n               (&lt;= day (if (is-leap-year? year) 29 28)))]\n     \
    \    [else #f])\n   (&lt;= 1 month)\n   (&lt;= month 12)\n   (regexp-match? #rx\"\
    ^\\\\d{2}-\\\\d{2}-\\\\d{4}$\" date)))\n</code>\n", "  (cond\n    [(empty? date)\n\
    \     #f]\n    [(or (empty? (regexp-match #rx\"^(\\\\d+)-(\\\\d+)-(\\\\d+)$\"\
    \ date))\n         (or (and (= (vector-ref (regexp-match #rx\"^(\\\\d+)-(\\\\\
    d+)-(\\\\d+)$\" date) 1) 1)\n                  (= (vector-ref (regexp-match #rx\"\
    ^(\\\\d+)-(\\\\d+)-(\\\\d+)$\" date) 2) 31))\n             (and (= (vector-ref\
    \ (regexp-match #rx\"^(\\\\d+)-(\\\\d+)-(\\\\d+)$\" date) 1) 3)\n            \
    \      (= (vector-ref (regexp-match #rx\"^(\\\\d+)-(\\\\d+)-(\\\\d+)$\" date)\
    \ 2) 31))\n             (and (= (vector-ref (regexp-match #rx\"^(\\\\d+)-(\\\\\
    d+)-(\\\\d+)$\" date) 1) 5)\n                  (= (vector-ref (regexp-match #rx\"\
    ^(\\\\d+)-(\\\\d+)-(\\\\d+)$\" date) 2) 31))\n             (and (= (vector-ref\
    \ (regexp-match #rx\"^(\\\\d+)-(\\\\d+)-(\\\\d+)$\" date) 1) 7)\n            \
    \      (= (vector-ref (regexp-match #rx\"^(\\\\d+)-(\\\\d+)-(\\\\d+)$\" date)\
    \ 2) 31))\n             (and (= (vector-ref (regexp-match #rx\"^(\\\\d+)-(\\\\\
    d+)-(\\\\d+)$\" date) 1) 8)\n                  (= (vector-ref (regexp-match #rx\"\
    ^(\\\\d+)-(\\\\d+)-(\\\\d+)$\" date) 2) 31))\n             (and (= (vector-ref\
    \ (regexp-match #rx\"^(\\\\d+)-(\\\\d+)-(\\\\d+)$\" date) 1) 10)\n           \
    \       (= (vector-ref (regexp-match #rx\"^(", "  (define (valid-year year)\n\
    \    (and (number? year)\n         (not (negative? year))))\n  (define (valid-month\
    \ month)\n    (and (number? month)\n         (<= 1 month 12)))\n  (define (valid-day\
    \ day)\n    (and (number? day)\n         (<= 1 day 31)))\n  (and (not (empty?\
    \ date))\n       (valid-year (string->number (substring date 0 4)))\n       (valid-month\
    \ (string->number (substring date 5 7)))\n       (valid-day (string->number (substring\
    \ date 8 10)))))\n</code>\nI believe I'm right, but I want to make sure I am.\
    \ I want to use a better method, but the test cases won't let me use any library.\n\
    \n\nA:\n\nYour code does not work for all the test cases, for instance for <code>\"\
    02-29-2000\"</code>.\nI propose a solution using <code>regexp-match</code> from\
    \ the library <code>net/url</code> (which is available in #lang racket and #lang\
    \ racket/base).\nThe code:\n<code>#lang racket\n", "  (define (valid-month month)\
    \ (and (integer? month) (>= month 1) (<= month 12)))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (cond [(or (= month 1) (= month 3) (=\
    \ month 5) (= month 7) (= month 8) (= month 10) (= month 12)) (and (>= day 1)\
    \ (<= day 31))]\n               [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) (and (>= day 1) (<= day 30))]\n               [(= month 2) (and (>= day\
    \ 1) (<= day 29))]\n               [else #f])))\n  (define (valid-year year) (and\
    \ (integer? year) (>= year 1) (<= year 9999)))\n  (if (string-split date \"-\"\
    )\n      (let ([month (string->number (list-ref (string-split date \"-\") 0))]\n\
    \            [day (string->number (list-ref (string-split date \"-\") 1))]\n \
    \           [year (string->number (list-ref (string-split date \"-\") 2))])\n\
    \        (and (valid-month month) (valid-day month day) (valid-year year)))\n\
    \      #f))", "  (if (and (equal? (string-length date) 10)\n           (equal?\
    \ (string-ref date 2) #\\-))\n      (if (and (between? (string->number (substring\
    \ date 0 2)) 1 12)\n               (between? (string->number (substring date 3\
    \ 5)) 1 31))\n          #t\n          #f)\n      #f))\n", "  (and (not (zero?\
    \ (string-length date)))\n       (define (date-parts date)\n         (string-split\
    \ date \"-\"))\n       (define (valid-day date)\n         (let ((day (string->number\
    \ (first (date-parts date)))))\n           (and (and (&lt;= 1 day) (&lt;= day\
    \ 31))\n                (or (and (or (and (= 1 (string->number (second (date-parts\
    \ date))))\n                                  (= 31 day))\n                  \
    \           (and (= 3 (string->number (second (date-parts date))))\n         \
    \                         (= 31 day))\n                             (and (= 5\
    \ (string->number (second (date-parts date))))\n                             \
    \     (= 31 day))\n                             (and (= 7 (string->number (second\
    \ (date-parts date))))\n                                  (= 31 day))\n      \
    \                       (and (= 8 (string->number (second (date-parts date))))\n\
    \                                  (= 31 day))\n                             (and\
    \ (= 10 (string->number (second (date-parts date))))\n                       \
    \           (= 31 day))\n                             (and (= 12 (string->number\
    \ (second (date-parts date))))\n                                  (= 31 day)))\n\
    \                          (or (and (= 4 (string->number (second (date-parts date))))\n\
    \                                   (&lt;= day 30))\n                        \
    \      (and (= 6 (string->number (second (date-parts date))))\n              \
    \                     (&lt;= day 30))\n                              (and (= 9\
    \ (string->number (second (date-parts date))))\n                             \
    \      (&lt;= day 30))\n                              (and (= 11 (string->number\
    \ (second (date-parts date))))\n                                   (&lt;= day\
    \ 30))))\n                     (and (= 2 (string->number (second (date-parts date))))\n\
    \                          (&lt;= day 29)))))\n       (define (valid-month date)\n\
    \         (let ((month (string->number (second (date-parts date)))))\n       \
    \    (and (&lt;= 1 month) (&lt;= month 12))))\n       (define (valid-year date)\n\
    \         (let ((year (string->number (third (date-parts date)))))\n         \
    \  (and (&lt;= 0 year) (&lt;= year 9999", "  (and (regexp-match? #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)\n       (let ([month-day-year (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)])\n         (let ([month (string-&gt;number (vector-ref month-day-year\
    \ 1))]\n               [day (string-&gt;number (vector-ref month-day-year 2))]\n\
    \               [year (string-&gt;number (vector-ref month-day-year 3))])\n  \
    \         (or (and (and (&lt;= 1 month 12)\n                         (&lt;= 1\
    \ day 31))\n                    (or (member month '(1 3 5 7 8 10 12))\n      \
    \                  (member month '(4 6 9 11) (= day 30))\n                   \
    \     (and (= month 2) (= day 29))))\n               (and (not (member month '(1\
    \ 3 5 7 8 10 12)))\n                    (not (member month '(4 6 9 11)))\n   \
    \                 (not (= month 2))\n                    (&lt;= 1 day 30))\n \
    \              (= day 29)\n               (= day 30)\n               (= day 31))))))\n",
  "  (match date\n    [(list month day year)\n     (and (regexp-match #rx\"^[0-9]+$\"\
    \ month)\n          (regexp-match #rx\"^[0-9]+$\" day)\n          (regexp-match\
    \ #rx\"^[0-9]+$\" year)\n          (and (> (string->number year) 0)\n        \
    \       (< (string->number year) 10000))\n          (and (> (string->number month)\
    \ 0)\n               (< (string->number month) 13))\n          (and (> (string->number\
    \ day) 0)\n               (< (string->number day) (month-days (string->number\
    \ month) (string->number year)))))]\n    [_ false]))\n", "  (cond\n    [(empty?\
    \ date) false]\n    [(match-all #rx\"^(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])-[0-9]{4}$\"\
    \ date) true]\n    [else false]))\n", "  (and (string? date)\n       (not (string=?\
    \ date \"\"))\n       (regexp-match #rx\"(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])-(2[0-4][0-9]|25[0-5]|1[0-9][0-9]|[1-9][0-9]|[0-9])\"\
    \ date)))\n", "  (define (between lower upper)\n    (lambda (n)\n      (and (<=\
    \ lower n) (<= n upper))))\n  (define (day->month day)\n    (cond [(< day 0) #f]\n\
    \          [(< day 32) (between 1 12)]\n          [(< day 60) (between 4 6)]\n\
    \          [(< day 91) (between 7 9)]\n          [(< day 121) (between 10 12)]\n\
    \          [(< day 152) (between 1 3)]\n          [(< day 182) (between 4 6)]\n\
    \          [(< day 213) (between 7 9)]\n          [(< day 244) (between 10 12)]\n\
    \          [(< day 274) (between 1 3)]\n          [(< day 305) (between 4 6)]\n\
    \          [(< day 335) (between 7 9)]\n          [(< day 366) (between 10 12)]\n\
    \          [else #f]))\n  (define (month->day days-in-month)\n    (lambda (n)\n\
    \      (and (<= 1 n) (<= n days-in-month))))\n  (define (month-days month)\n \
    \   (case month\n      [1 (month->day 31)]\n      [2 (month->day 29)]\n      [3\
    \ (month->day 31)]\n      [4 (month->day 30)]\n      [5 (month->day 31)]\n   \
    \   [6 (month->day 30)]\n      [7 (month->day 31)]\n      [8 (month->day 31)]\n\
    \      [9 (month->day 30)]\n      [10 (month->day 31)]\n      [11 (month->day\
    \ 30)]\n      [12 (month->day 31)]))\n  (define (valid-year year)\n    (between\
    \ 1 9999 year))\n  (define (split-date date)\n    (define (split-day day)\n  \
    \    (cons (modulo day 100)\n            (modulo (quotient day 100) 100)))\n \
    \   (cond [(= (string-length date) 10)\n           (let* ([year (string->number\
    \ (substring date 6 10))]\n                  [month (string->number (substring\
    \ date 0 2))]\n                  [day (string->number (substring date 3 5))])\n\
    \             (list day", "  (match (regexp-match? #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    \ date)\n    [(vector \"-\" month \"-\" day \"-\" year)\n     (define (max-day-for-month)\n\
    \       (cond [(member month '(\"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\"\
    )) 31]\n             [(member month '(\"04\" \"06\" \"09\" \"11\")) 30]\n    \
    \         [(equal? month \"02\") 29]))\n     (define (month->int)\n       (string->number\
    \ month))\n     (define (day->int)\n       (string->number day))\n     (define\
    \ (year->int)\n       (string->number year))\n     (and (equal? (string-length\
    \ date) 10)\n          (<= 1 (day->int) (max-day-for-month))\n          (<= 1\
    \ (month->int) 12)\n          (<= (day->int) (max-day-for-month))\n          (<=\
    \ 1 (year->int) (time-year (current-date))))]\n    [_ #f]))\n", "  (let* ([lst\
    \ (string-split date \"-\")]\n         [month (string->number (list-ref lst 0))]\n\
    \         [day (string->number (list-ref lst 1))]\n         [year (string->number\
    \ (list-ref lst 2))])\n    (and (not (empty? date))\n         (<= 1 day 31)\n\
    \         (<= 1 month 12)\n         (= (length lst) 3))))\n", "  (cond\n    [(and\
    \ (equal? (length date) 10) (regexp-match #rx\"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\"\
    \ date))\n     (cond\n       [(member (list-ref date 3) '(0 3 6 9))\n        (and\
    \ (and (and (and (>= 1 (list-ref date 0)) (<= 9 (list-ref date 0))) (>= 1 (list-ref\
    \ date 1)) (<= 3 (list-ref date 1))) (>= (list-ref date 4) 1) (<= (list-ref date\
    \ 4) 9)) (>= (list-ref date 7) 0) (<= (list-ref date 7) 9))]\n       [(member\
    \ (list-ref date 3) '(1 4 7 10))\n        (and (and (and (and (>= 1 (list-ref\
    \ date 0)) (<= 9 (list-ref date 0))) (>= 3 (list-ref date 1)) (<= 4 (list-ref\
    \ date 1))) (>= (list-ref date 4) 0) (<= (list-ref date 4) 9)) (>= (list-ref date\
    \ 7) 0) (<= (list-ref date 7) 9))]\n       [(member (list-ref date 3) '(2 5 8\
    \ 11))\n        (and (and (and (and (>= 1 (list-ref date 0)) (<= 9 (list-ref date\
    \ 0))) (>= 6 (list-ref date 1)) (<= 7 (list-ref date 1))) (>= (list-ref date 4)\
    \ 0) (<= (list-ref date 4) 9)) (>= (list-ref date 7) 0) (<= (list-ref date 7)\
    \ 9))]\n       [(equal? (list-ref date 3) '4)\n        (and (and (and (and (>=\
    \ 2 (list-ref date 0)) (<= 9 (list-ref date 0))) (>= 1 (list-ref date 1)) (<=\
    \ 0 (list-ref date 1))) (>= (list-ref date 4) 0) (<= (list-ref date 4) 9)) (>=\
    \ (list-ref date 7) 0) (<= (list-ref date 7) 9))]\n       [(equal? (list-ref date\
    \ 3) '5", "  (let ([date (string-split date \"-\")])\n    (and (eq? (length date)\
    \ 3)\n         (let ([date (map string->number date)])\n           (and (eq? (length\
    \ date) 3)\n                (and (<= (list-ref date 0) 12)\n                 \
    \    (<= (list-ref date 1) (days (list-ref date 0)))\n                     (<=\
    \ (list-ref date 2) 9999)))))))\n", "  (cond\n    [(empty? date) #f]\n    [(regexp-match\
    \ #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\" date)\n     (let\
    \ ([month (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])\" date))]\n    \
    \       [day (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\"\
    \ date))])\n       (cond\n         [(or (= month 1) (= month 3) (= month 5) (=\
    \ month 7) (= month 8) (= month 10) (= month 12))\n          (<= 1 day 31)]\n\
    \         [(or (= month 4) (= month 6) (= month 9) (= month 11))\n          (<=\
    \ 1 day 30)]\n         [(= month 2)\n          (<= 1 day 29)]))]\n    [else #f]))\n",
  "  (let* ([date-data (string-split date #\\-)]\n         [year (string->number (vector-ref\
    \ date-data 2))]\n         [month (string->number (vector-ref date-data 0))]\n\
    \         [day (string->number (vector-ref date-data 1))])\n    (cond\n      [(or\
    \ (= (length date-data) 3) (= (length date-data) 0)) true]\n      [(or (string=?\
    \ \"0\" (vector-ref date-data 0))\n           (string=? \"0\" (vector-ref date-data\
    \ 1))\n           (string=? \"0\" (vector-ref date-data 2))) false]\n      [(or\
    \ (< day 1)\n           (< month 1)\n           (< year 1)) false]\n      [(or\
    \ (< month 1)\n           (> month 12)) false]\n      [(and (= month 1)\n    \
    \        (= day 31)) false]\n      [(and (= month 3)\n            (= day 31))\
    \ false]\n      [(and (= month 5)\n            (= day 31)) false]\n      [(and\
    \ (= month 7)\n            (= day 31)) false]\n      [(and (= month 8)\n     \
    \       (= day 31)) false]\n      [(and (= month 10)\n            (= day 31))\
    \ false]\n      [(and (= month 12)\n            (= day 31)) false]\n      [(and\
    \ (= month 4)\n            (= day 30)) false]\n      [(and (= month 6)\n     \
    \       (= day 30)) false]\n      [(and (= month 9)\n            (= day 30)) false]\n\
    \      [(and (= month 11)\n            (= day 30)) false]\n      [(and (= month\
    \ 2)\n            (= day 29)) false]\n      [(and (= month 2)\n            (=\
    \ day 30)) false]\n      [(and (= month 2)\n            (= day 31)) false]\n \
    \     [else true])))\n", "  (let ([splitted-date (regexp-split #rx\"-\" date)])\n\
    \    (and (length splitted-date)\n         (= 3 (length splitted-date))\n    \
    \     (valid-days (string->number (car splitted-date))\n                     (string->number\
    \ (cadr splitted-date)))\n         (valid-months (string->number (cadr splitted-date)))\n\
    \         (valid-years (string->number (caddr splitted-date))))))\n", "  (and\
    \ (string? date)\n       (not (empty? date))\n       (date-matches-format? date)\n\
    \       (valid-month? date)\n       (valid-day? date)))\n", "  (define month-days\
    \ '(31 28 31 30 31 30 31 31 30 31 30 31))\n  (define (leap-year? year)\n    (or\
    \ (= 0 (modulo year 4))\n        (and (not (= 0 (modulo year 100)))\n        \
    \     (= 0 (modulo year 400)))))\n  (define (valid-date? date)\n    (if (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n            (= (length (string-split\
    \ date #\\-) 3))\n            (= (vector-ref month-days (string->number (vector-ref\
    \ (string-split date #\\-) 0)))\n               (string->number (vector-ref (string-split\
    \ date #\\-) 1))))\n        true\n        false))\n  (valid-date? date))", " \
    \ (define (parseDate date)\n    (cond\n      [(empty? date) (display \"empty date\"\
    )]\n      [(and (= (length date) 10)\n            (string=? (substring date 2\
    \ 3) \"-\")\n            (string=? (substring date 5 6) \"-\")\n            (string-numeric?\
    \ (substring date 0 2))\n            (string-numeric? (substring date 3 5))\n\
    \            (string-numeric? (substring date 6 10)))\n       (list (string->number\
    \ (substring date 0 2))\n             (string->number (substring date 3 5))\n\
    \             (string->number (substring date 6 10)))]\n      [else (display \"\
    no format mm-dd-yyyy\")]))\n  (define (checkMonths days months years)\n    (cond\n\
    \      [(and (= days 1) (= months 1) (= years 2000))\n       (display \" valid\"\
    )]\n      [(and (= days 31) (= months 1) (= years 2000))\n       (display \" valid\"\
    )]\n      [(and (= days 2) (= months 1) (= years 2000))\n       (display \" valid\"\
    )]\n      [(and (= days 31) (= months 1) (= years 2000))\n       (display \" valid\"\
    )]\n      [(and (= days 30) (= months 4) (= years 2000))\n       (display \" valid\"\
    )]\n      [(and (= days 31) (= months 5) (= years 2000))\n       (display \" valid\"\
    )]\n      [(and (= days 30) (= months 6) (= years 2000))\n       (display \" valid\"\
    )]\n      [(and (= days 31) (= months 7) (= years 2000))\n       (display \" valid\"\
    )]\n      [(and (= days 31) (= months 8) (= years 2000))\n       (display \" valid\"\
    )]\n      [(and (= days 30) (= months 9) (= years 2000))\n       (display \" valid\"\
    )]\n      [(and (= days 31) (= months 10) (= years 2000))\n       (display \"\
    \ valid\")]\n      [(and (= days 30) (= months 11) (= years 2000))\n       (display\
    \ \" valid\")]\n      [(and (= days 31) (= months 12) (= years 2000))\n      \
    \ (display \" valid\")]\n      [(and (= days 28) (= months 2", "  (define (valid-format?\
    \ date)\n    (regexp-match #rx\"^\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d\\\\d\\\\d$\"\
    \ date))\n  (define (valid-day? date)\n    (and (and (regexp-match #rx\"^0[1-9]-.*$\"\
    \ date)\n              (regexp-match #rx\"^0[1-9]-\\\\d[0-2]-.*$\" date))\n  \
    \       (and (regexp-match #rx\"^1[1-2]-.*$\" date)\n              (regexp-match\
    \ #rx\"^1[1-2]-\\\\d[0-2]-.*$\" date))\n         (and (regexp-match #rx\"^02-.*$\"\
    \ date)\n              (regexp-match #rx\"^02-\\\\d[0-9]-.*$\" date))\n      \
    \   (and (regexp-match #rx\"^0[3-9]-.*$\" date)\n              (regexp-match #rx\"\
    ^0[3-9]-\\\\d[0-9]-.*$\" date))))\n  (define (valid-month? date)\n    (and (and\
    \ (regexp-match #rx\"^[0-9]-\\\\d\\\\d-.*$\" date)\n              (regexp-match\
    \ #rx\"^[0-9]-\\\\d\\\\d-\\\\d\\\\d\\\\d\\\\d$\" date))\n         (and (regexp-match\
    \ #rx\"^1[1-2]-.*$\" date)\n              (regexp-match #rx\"^1[1-2]-\\\\d\\\\\
    d-.*$\" date))\n         (and (regexp-match #rx\"^02-.*$\" date)\n           \
    \   (regexp-match #rx\"^02-\\\\d\\\\d-.*$\" date))\n         (and (regexp-match\
    \ #rx\"^0[3-9]-.*$\" date)\n              (regexp-match #rx\"^0[3-9]-\\\\d\\\\\
    d-.*$\" date))))\n  (define (valid-year? date)\n    (and", "  (cond [(or (< (date-month\
    \ date) 1)\n             (> (date-month date) 12))\n         #f]\n        [(or\
    \ (< (date-day date) 1)\n             (> (date-day date) 31)\n             (>\
    \ (date-day date) 30)\n             (> (date-day date) 29))\n         #f]\n  \
    \      [else\n         #t]))\n", "  (if (string-split date #\"-\")\n      (if\
    \ (if (equal? 2 (length (car (string-split date #\"-\"))))\n              #t\n\
    \              #f)\n          (if (if (equal? 2 (length (cadr (string-split date\
    \ #\"-\"))))\n                  #t\n                  #f)\n              (if (if\
    \ (if (equal? (string->number (car (string-split date #\"-\"))) 1)\n         \
    \                (if (if (if (if (>= (string->number (cadr (string-split date\
    \ #\"-\"))) 1)\n                                        (if (<= (string->number\
    \ (cadr (string-split date #\"-\"))) 31)\n                                   \
    \         #t\n                                            #f)\n              \
    \                      #f)\n                                #f)\n            \
    \                #f)\n                     (if (equal? (string->number (car (string-split\
    \ date #\"-\"))) 2)\n                         (if (if (if (if (>= (string->number\
    \ (cadr (string-split date #\"-\"))) 1)\n                                    \
    \    (if (<= (string->number (cadr (string-split date #\"-\"))) 29)\n        \
    \                                    #t\n                                    \
    \        #f)\n                                    #f)\n                      \
    \          #f)\n                            #f)\n                     (if (equal?\
    \ (string->number (car (string-split date #\"-\"))) 3)\n                     \
    \    (if (if (if (if (>= (string->number (cadr (string-split date #\"-\"))) 1)\n\
    \                                        (if (<= (string->number (cadr (string-split\
    \ date #\"-\"))) 31)\n                                            #t\n       \
    \                                     #f)\n                                  \
    \  #f)\n                                #f)\n                            #f)\n\
    \                     (if (equal? (string->number (car (string-split date #\"\
    -\"))) 4)\n                         (if (if (if (if (>= (string->number (cadr\
    \ (string-split date #\"-\"))) 1)\n                                        (if\
    \ (<= (string->number (cadr (string-split date #\"-\"))) 30)\n               \
    \                             #t\n                                           \
    \ #f)\n                                    #f)\n                             \
    \  ", "  (define (to-date date)\n    (cond\n      [(string=? \"\" date) '())\n\
    \      [(string=? \"-\" (string-ref date 0)) (to-date (substring date 1))]\n \
    \     [else (cons (string->number (string-take date 2)) (to-date (substring date\
    \ 3)))]))\n  (define (valid-month? month)\n    (and (<= 1 month) (<= month 12)))\n\
    \  (define (valid-day? month day)\n    (let ([max-day (cond\n                \
    \     [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12)) 31]\n                     [(or (= month 4) (= month 6) (=\
    \ month 9) (= month 11)) 30]\n                     [(= month 2) 29])])\n     \
    \ (and (<= 1 day) (<= day max-day))))\n  (define (valid-date? date)\n    (match\
    \ date\n      [(list month day year) (and (valid-month? month) (valid-day? month\
    \ day))]))\n  (valid-date? (to-date date)))", "  (define (valid_digits num)\n\
    \    (cond [(string=? num \"0\") #f]\n          [(string=? num \"\") #f]\n   \
    \       [(string-numeric? num) #t]\n          [else #f]))\n  (define (valid_month\
    \ month)\n    (cond [(string=? month \"01\") #t]\n          [(string=? month \"\
    02\") #t]\n          [(string=? month \"03\") #t]\n          [(string=? month\
    \ \"04\") #t]\n          [(string=? month \"05\") #t]\n          [(string=? month\
    \ \"06\") #t]\n          [(string=? month \"07\") #t]\n          [(string=? month\
    \ \"08\") #t]\n          [(string=? month \"09\") #t]\n          [(string=? month\
    \ \"10\") #t]\n          [(string=? month \"11\") #t]\n          [(string=? month\
    \ \"12\") #t]\n          [else #f]))\n  (define (valid_day day)\n    (cond [(and\
    \ (= (string-&gt;number day) 1) (&lt; (string-&gt;number day) 32)) #t]\n     \
    \     [(and (= (string-&gt;number day) 1) (&lt; (string-&gt;number day) 30)) #t]\n\
    \          [(and (= (string-&gt;number day) 1) (&lt; (string-&gt;number day) 29))\
    \ #t]\n          [else #f]))\n  (let ([date-segments (string-split date \"-\"\
    )])\n    (and (valid_digits (vector-ref date-segments 0))\n         (valid_digits\
    \ (vector-ref date-segments 1))\n         (valid_digits (vector-ref date-segments\
    \ 2))\n         (valid_month (vector-ref date-segments 0))\n         (valid_day\
    \ (vector-ref date-segments 1)))))\n", "  (let ([y (substring date 6 10)]\n  \
    \      [m (substring date 0 2)]\n        [d (substring date 3 5)])\n    (and (not\
    \ (empty? date))\n         (or (= m \"01\") (= m \"03\") (= m \"05\") (= m \"\
    07\") (= m \"08\") (= m \"10\") (= m \"12\")\n             (and (= m \"04\") (=\
    \ d \"30\"))\n             (and (= m \"06\") (= d \"30\"))\n             (and\
    \ (= m \"09\") (= d \"30\"))\n             (and (= m \"11\") (= d \"30\"))\n \
    \            (and (= m \"02\") (< (string->number d) 30)))\n         (<= (string->number\
    \ m) 12)\n         (= (string-length date) 10))))", "  (if (string=? date \"\"\
    )\n      #f\n      (cond\n       ((string-prefix? \"01-\" date)\n        (cond\n\
    \         ((string-suffix? \"-01-2004\" date) #t)\n         ((string-suffix? \"\
    -03-2004\" date) #t)\n         ((string-suffix? \"-05-2004\" date) #t)\n     \
    \    ((string-suffix? \"-07-2004\" date) #t)\n         ((string-suffix? \"-08-2004\"\
    \ date) #t)\n         ((string-suffix? \"-10-2004\" date) #t)\n         ((string-suffix?\
    \ \"-12-2004\" date) #t)\n         (else #f)))\n       ((string-prefix? \"02-\"\
    \ date)\n        (cond\n         ((string-suffix? \"-04-2004\" date) #t)\n   \
    \      ((string-suffix? \"-06-2004\" date) #t)\n         ((string-suffix? \"-09-2004\"\
    \ date) #t)\n         ((string-suffix? \"-11-2004\" date) #t)\n         (else\
    \ #f)))\n       ((string-prefix? \"03-\" date)\n        (cond\n         ((string-suffix?\
    \ \"-01-2004\" date) #t)\n         ((string-suffix? \"-03-2004\" date) #t)\n \
    \        ((string-suffix? \"-05-2004\" date) #t)\n         ((string-suffix? \"\
    -07-2004\" date) #t)\n         ((string-suffix? \"-08-2004\" date) #t)\n     \
    \    ((string-suffix? \"-10-2004\" date) #t)\n         ((string-suffix? \"-12-2004\"\
    \ date) #t)\n         (else #f)))\n       ((string-prefix? \"04-\" date)\n   \
    \     (cond\n         ((string-suffix? \"-04-2004\" date) #t)\n         ((string-suffix?\
    \ \"-06-2004\" date) #t)\n         ((string-suffix? \"-09-2004\" date) #t)\n \
    \        ((string-suffix? \"-11-2004\" date) #t)\n         (else #f)))\n     \
    \  ((string-", "  (cond\n    [(or (string=? date \"\") (not (equal? (count-words\
    \ date) 3))) #f]\n    [(and (>= (word (second date) -1) 1) (<= (word (second date)\
    \ -1) 12)) #t]\n    [else #f]))\n", "  (define (split_date date)\n    (define\
    \ (helper date)\n      (let ([s (string-length date)])\n        (if (and (<= s\
    \ 2) (<= 2 s))\n            (list (string->number date) (substring date 2))\n\
    \            (cons (string->number (substring date 0 2)) (helper (substring date\
    \ 2))))))\n    (helper date))\n  (let* ([m (car (split_date date))]\n        \
    \ [d (car (split_date (cdr (split_date date))))]\n         [y (car (split_date\
    \ (cdr (split_date (cdr (split_date date))))))])\n    (and (not (empty? date))\n\
    \         (let ([valid-days (hash-ref\n                            (hash \"01\"\
    \ '(range 31)\n                                  \"02\" '(range 29)\n        \
    \                          \"03\" '(range 31)\n                              \
    \    \"04\" '(range 30)\n                                  \"05\" '(range 31)\n\
    \                                  \"06\" '(range 30)\n                      \
    \            \"07\" '(range 31)\n                                  \"08\" '(range\
    \ 31)\n                                  \"09\" '(range 30)\n                \
    \                  \"10\" '(range 31)\n                                  \"11\"\
    \ '(range 30)\n                                  \"12\" '(range 31))\n       \
    \                     (number->string m))])\n           (and (not (empty? valid-days))\n\
    \                (member d valid-days)))\n         (and (<= 1 m) (<= m 12))\n\
    \         (and (<= 1000 y) (<= y 9999)))))\n", "  (and (and (and (&gt;= (string-length\
    \ date) 8) (&lt;= (string-length date) 10))\n        (string-match \"\\\\d{2}-\\\
    \\d{2}-\\\\d{4}\" date))\n       (and (and (and (and (&gt;= (string-&gt;number\
    \ (substring date 3 5)) 1)\n                   (&lt;= (string-&gt;number (substring\
    \ date 3 5)) 31))\n                   (and (&gt;= (string-&gt;number (substring\
    \ date 0 2)) 1)\n                   (&lt;= (string-&gt;number (substring date\
    \ 0 2)) 12)))\n              (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or", "  (define months '(1 3 5\
    \ 7 8 10 12)\n        months2 '(4 6 9 11)\n        months3 '(2))\n  (and (and\
    \ (&gt;= (string-length date) 8) (&lt;= (string-length date) 10))\n       (and\n\
    \        (or (= (string-ref date 2) #\\-) (= (string-ref date 2) #\\/))\n    \
    \    (or (= (string-ref date 5) #\\-) (= (string-ref date 5) #\\/)))\n       (or\
    \ (= (list-ref (list (string-&gt;number (substring date 0 2)) (string-&gt;number\
    \ (substring date 3 5)) (string-&gt;number (substring date 6 (string-length date))))\
    \ 1)\n              (list-ref (list (string-&gt;number (substring date 0 2)) (string-&gt;number\
    \ (substring date 3 5)) (string-&gt;number (substring date 6 (string-length date))))\
    \ 2))\n           (and (and (and (&lt;= (list-ref (list (string-&gt;number (substring\
    \ date 0 2)) (string-&gt;number (substring date 3 5)) (string-&gt;number (substring\
    \ date 6 (string-length date)))) 1) 1)\n                        (&gt;= (list-ref\
    \ (list (string-&gt;number (substring date 0 2)) (string-&gt;number (substring\
    \ date 3 5)) (string-&gt;number (substring date 6 (string-length date)))) 1) 31))\n\
    \                    (or (member (list-ref (list (string-&gt;number (substring\
    \ date 0 2)) (string-&gt;number (substring date 3 5)) (string-&gt;number (substring\
    \ date 6 (string-length date)))) 0) months)\n                        (member (list-ref\
    \ (list (string-&gt;number (substring date 0 2)) (string-&gt;number (substring\
    \ date 3 5)) (string-&gt;number (substring date 6 (string-length date)))) 0) months2)\n\
    \                        (member (list-ref (list (string-&gt;number (substring\
    \ date 0 2)) (string-", "  (define day (string->number (substring date 3 5)))\n\
    \  (define month (string->number (substring date 0 2)))\n  (define year (string->number\
    \ (substring date 6 10)))\n  (define (leap-year? year)\n    (and (integer? (/\
    \ year 4))\n         (integer? (/ year 100))\n         (integer? (/ year 400))))\n\
    \  (and (not (string=? \"\" date))\n       (or (and (= month 1) (<= 1 day 31))\n\
    \           (and (= month 3) (<= 1 day 31))\n           (and (= month 5) (<= 1\
    \ day 31))\n           (and (= month 7) (<= 1 day 31))\n           (and (= month\
    \ 8) (<= 1 day 31))\n           (and (= month 10) (<= 1 day 31))\n           (and\
    \ (= month 12) (<= 1 day 31))\n           (and (= month 4) (<= 1 day 30))\n  \
    \         (and (= month 6) (<= 1 day 30))\n           (and (= month 9) (<= 1 day\
    \ 30))\n           (and (= month 11) (<= 1 day 30))\n           (and (= month\
    \ 2) (and (leap-year? year) (<= 1 day 29))\n                (and (not (leap-year?\
    \ year)) (<= 1 day 28))))\n       (and (<= 1 month 12))\n       (= (string-length\
    \ date) 10)))", "  (cond\n    [(not (string? date)) false]\n    [(equal? (length\
    \ date) 0) false]\n    [(equal? (string-length (regexp-replace* #rx\"-\" date\
    \ \"\")) 8) false]\n    [(equal? (string-length (regexp-replace* #rx\"-\" date\
    \ \"\")) 9) false]\n    [(< (string->number (regexp-replace* #rx\"-\" date \"\"\
    )) 10000) false]\n    [(> (string->number (regexp-replace* #rx\"-\" date \"\"\
    )) 100000000) false]\n    [(not (equal? (string-length (regexp-replace* #rx\"\
    /\" date \"\")) 8)) false]\n    [(< (string->number (regexp-replace* #rx\"/\"\
    \ date \"\")) 10000) false]\n    [(> (string->number (regexp-replace* #rx\"/\"\
    \ date \"\")) 100000000) false]\n    [(< (string->number (regexp-replace* #rx\"\
    /\" date \"\")) 10000) false]\n    [(> (string->number (regexp-replace* #rx\"\
    /\" date \"\")) 100000000) false]\n    [(not (equal? (string-length (regexp-replace*\
    \ #rx\".\" date \"\")) 8)) false]\n    [(< (string->number (regexp-replace* #rx\"\
    .\" date \"\")) 10000) false]\n    [(> (string->number (regexp-replace* #rx\"\
    .\" date \"\")) 100000000) false]\n    [(> (string->number (regexp-replace* #rx\"\
    .\" date \"\")) 100000000) false]\n    [(< (string->number (regexp-replace* #rx\"\
    .\" date \"\")) 10000) false]\n    [(> (string->number (regexp-replace* #rx\"\
    /\" date \"\")) 100000000) false]\n    [(< (string->number (regexp-replace* #rx\"\
    .\" date \"\")) 10000) false]\n    [(> (string->number (regexp-replace* #rx\"\
    .\" date \"\")) 100000000) false]\n    [(< (string->number (regexp-replace* #rx\"\
    /\" date \"\")) 10000) false]\n", "  (let* ((d (string-split date \"-\"))\n  \
    \       (mm (string->number (list-ref d 0)))\n         (dd (string->number (list-ref\
    \ d 1)))\n         (yyyy (string->number (list-ref d 2))))\n    (and (not (string=?\
    \ \"\" date))\n         (<= 1 dd 31)\n         (<= 1 mm 12)\n         (let ([valid-days\
    \ (cdr (hash '() '((1 . 31) (3 . 31) (5 . 31) (7 . 31) (8 . 31) (10 . 31) (12\
    \ . 31) (4 . 30) (6 . 30) (9 . 30) (11 . 30) (2 . 29))))])\n           (equal?\
    \ dd (hash-ref valid-days mm)))\n         (and (between? 0 9 mm)\n           \
    \   (between? 0 9 dd)\n              (between? 1000 9999 yyyy)))))\n", "  (cond\n\
    \    [(empty? date) #f]\n    [(regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n     (let ([datum (string->date date \"mm-dd-yyyy\")])\n       (if datum\
    \ (match datum [(list m d y)\n                               (cond\n         \
    \                        [(= m 1) (and (<= 1 d 31))]\n                       \
    \          [(or (= m 3) (= m 5) (= m 7) (= m 8) (= m 10) (= m 12)) (and (<= 1\
    \ d 31))]\n                                 [(or (= m 4) (= m 6) (= m 9) (= m\
    \ 11)) (and (<= 1 d 30))]\n                                 [(= m 2) (and (<=\
    \ 1 d 29))]\n                                 [else #f])]\n                  \
    \    [else #f]))]\n     [else #f]))\n", "  (define regex #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    )\n  (define (valid_february? str)\n    (define regex #rx\"^(0[2]-0[1-9]|0[2]-1[0-9]|0[2]-2[0-8])-[0-9]{4}$\"\
    )\n    (regexp-match regex str))\n  (define (valid_month? str)\n    (define regex\
    \ #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\")\n    (regexp-match\
    \ regex str))\n  (define (valid_day? str)\n    (define regex #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    )\n    (regexp-match regex str))\n  (and (regexp-match regex date)\n       (valid_february?\
    \ date)\n       (valid_month? date)\n       (valid_day? date)))", "  (cond [(string=?\
    \ date \"\")\n         false]\n        [(and (not (string=? (substring date 2\
    \ 3) \"-\"))\n              (not (string=? (substring date 5 6) \"-\")))\n   \
    \      false]\n        [(or (< (string->number (substring date 0 2)) 1)\n    \
    \         (> (string->number (substring date 0 2)) 12))\n         false]\n   \
    \     [(or (< (string->number (substring date 3 5)) 1)\n             (> (string->number\
    \ (substring date 3 5)) 31))\n         false]\n        [else\n         true]))",
  "  (define (date-format? date)\n    (regexp-match? #rx\"\\d{2}-\\d{2}-\\d{4}\" date))\n\
    \  (define (month? m)\n    (and (&gt;= m 1) (&lt;= m 12)))\n  (define (days-for-month\
    \ m)\n    (cond [(or (= m 1) (= m 3) (= m 5) (= m 7) (= m 8) (= m 10) (= m 12))\
    \ 31]\n          [(or (= m 4) (= m 6) (= m 9) (= m 11)) 30]\n          [(= m 2)\
    \ 29]))\n  (define (day? d)\n    (and (&gt;= d 1) (&lt;= d (days-for-month (string-&gt;number\
    \ (substring date 0 2))))))\n  (define (year? y)\n    (and (&gt;= y 1) (&lt;=\
    \ y 9999)))\n  (define (valid? date)\n    (and (date-format? date)\n         (month?\
    \ (string-&gt;number (substring date 0 2)))\n         (day? (string-&gt;number\
    \ (substring date 3 5)))\n         (year? (string-&gt;number (substring date 6)))))\n\
    \  (valid? date))\n</code>\n", "  (let* ([parts (string-split date \"-\")]\n \
    \        [month (string->number (list-ref parts 0))]\n         [day (string->number\
    \ (list-ref parts 1))]\n         [year (string->number (list-ref parts 2))])\n\
    \    (cond\n      [(and (= (length parts) 3)\n            (list? parts)\n    \
    \        (= (length (list-ref parts 0)) 2)\n            (= (length (list-ref parts\
    \ 1)) 2)\n            (= (length (list-ref parts 2)) 4))\n       (cond\n     \
    \    [(member month '(1 3 5 7 8 10 12))\n          (= day 31)]\n         [(member\
    \ month '(4 6 9 11))\n          (= day 30)]\n         [(= month 2)\n         \
    \ (= day 29)]\n         [else false])]\n      [else false])))\n", "  (define (between\
    \ n1 n2 n)\n    (and (<= n1 n) (<= n n2)))\n  (define (is_leap_year year)\n  \
    \  (and (= (modulo year 4) 0)\n         (or (not (= (modulo year 100) 0))\n  \
    \           (= (modulo year 400) 0))))\n  (define (last-day year month)\n    (cond\n\
    \      ((and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12)) 31)\n      ((and (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) 30)\n      ((and (= month 2) (is_leap_year year)) 29)\n      ((and (= month\
    \ 2) (not (is_leap_year year))) 28)))\n  (let ([m (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)])\n    (and m\n         (between 1 12 (regexp-match-pos #'car 1 m))\n\
    \         (between 1 (last-day (regexp-match-pos #'car 3 m) (regexp-match-pos\
    \ #'car 1 m)) (regexp-match-pos #'car 2 m)))))", "  (and (and (and (and (and (and\
    \ (and (and (and (and\n                                             (> 0 (string-length\
    \ date))\n                                             (= (string-length date)\
    \ 10))\n                                        (= (string-ref date 2) #\\-))\n\
    \                                   (= (string-ref date 5) #\\-))\n          \
    \                    (= (string-ref date 8) #\\-))\n                         \
    \ (integer? (string->number (substring date 0 2))))\n                     (integer?\
    \ (string->number (substring date 3 5))))\n                (integer? (string->number\
    \ (substring date 6 10))))\n           (let ((month (string->number (substring\
    \ date 0 2))))\n             (cond ((member month '(1 3 5 7 8 10 12))\n      \
    \              (>= (string->number (substring date 3 5)) 1)\n                \
    \    (<= (string->number (substring date 3 5)) 31))\n                   ((member\
    \ month '(4 6 9 11))\n                    (>= (string->number (substring date\
    \ 3 5)) 1)\n                    (<= (string->number (substring date 3 5)) 30))\n\
    \                   ((= month 2)\n                    (>= (string->number (substring\
    \ date 3 5)) 1)\n                    (<= (string->number (substring date 3 5))\
    \ 29))\n                   (else (and (>= month 1) (<= month 12)))))))", "  (cond\n\
    \    [(string=? \"\" date)\n     false]\n    [(string-match #rx\"^[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]$\"\
    \ date)\n     (define (in-range r lst)\n       (cond\n         [(null? lst)\n\
    \          false]\n         [(>= r (car lst))\n          (in-range r (cdr lst))]\n\
    \         [else\n          true]))\n     (define (month-days month)\n       (cond\n\
    \         [(in-range month '(1 3 5 7 8 10 12))\n          (in-range (string->number\
    \ (substring date 3 5)) (list 1 31))]\n         [(in-range month '(4 6 9 11))\n\
    \          (in-range (string->number (substring date 3 5)) (list 1 30))]\n   \
    \      [(= month 2)\n          (in-range (string->number (substring date 3 5))\
    \ (list 1 29))]))\n     (month-days (string->number (substring date 0 2))))\n\
    \    [else\n     false]))\n", "  (match (regexp-match #rx\"^([0-1][0-9]|2[0-9]|3[0-1])-([0-9]|1[0-2])-([0-9]{4})$\"\
    \ date)\n    [(list (list _ day month year))\n     (cond\n       [(and (= month\
    \ 1) (= day 31)) #f]\n       [(and (= month 3) (= day 31)) #f]\n       [(and (=\
    \ month 5) (= day 31)) #f]\n       [(and (= month 7) (= day 31)) #f]\n       [(and\
    \ (= month 8) (= day 31)) #f]\n       [(and (= month 10) (= day 31)) #f]\n   \
    \    [(and (= month 12) (= day 31)) #f]\n       [(and (= month 4) (= day 30))\
    \ #f]\n       [(and (= month 6) (= day 30)) #f]\n       [(and (= month 9) (= day\
    \ 30)) #f]\n       [(and (= month 11) (= day 30)) #f]\n       [(and (= month 2)\
    \ (= day 29)) #f]\n       [else #t])]\n    [else #f]))\n", "  (cond [(and (string?\
    \ date)\n              (= 4 (length (string-split date #\"-\"))))\n         (and\
    \ (valid-day? (date-day date))\n              (valid-month? (date-month date))\n\
    \              (valid-year? (date-year date)))]\n        [else #f]))\n", "  (cond\
    \ [(empty? date) #f]\n        [(and (equal? (substring date 2 3) \"-\") (equal?\
    \ (substring date 5 6) \"-\"))\n         (let ([mm (string->number (substring\
    \ date 0 2))]\n               [dd (string->number (substring date 3 5))]\n   \
    \            [yyyy (string->number (substring date 6 9))])\n           (and (>=\
    \ mm 1) (<= mm 12)\n                (>= dd 1)\n                (cond [(member\
    \ mm '(1 3 5 7 8 10 12)) (<= dd 31)]\n                      [(member mm '(4 6\
    \ 9 11)) (<= dd 30)]\n                      [(= mm 2) (<= dd 29)])\n         \
    \       (>= yyyy 0)))]\n        [else #f]))\n", "  (define (valid-day day month)\n\
    \    (cond\n      [(member month '(1 3 5 7 8 10 12)) (and (<= 1 day) (<= day 31))]\n\
    \      [(member month '(4 6 9 11)) (and (<= 1 day) (<= day 30))]\n      [(= month\
    \ 2) (and (<= 1 day) (<= day 29))]))\n  (define (valid-month month)\n    (and\
    \ (<= 1 month) (<= month 12)))\n  (and (not (empty? date))\n       (regexp-match\
    \ #rx\"^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$\" date)\n       (let ([day (string->number\
    \ (regexp-match #rx\"^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$\" date #:submatch 1))]\n\
    \             [month (string->number (regexp-match #rx\"^(\\\\d{2})-(\\\\d{2})-(\\\
    \\d{4})$\" date #:submatch 2))]\n             [year (string->number (regexp-match\
    \ #rx\"^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$\" date #:submatch 3))])\n         (and\
    \ (valid-day day month)\n              (valid-month month)))))\n", "  (and (not\
    \ (null? date))\n       (match date\n         [(list month day year)\n       \
    \   (and (&lt;= 1 month 12)\n               (and (&lt;= 1 day (cond [(= 1 month)\
    \ 31]\n                                    [(= 3 month) 31]\n                \
    \                    [(= 5 month) 31]\n                                    [(=\
    \ 7 month) 31]\n                                    [(= 8 month) 31]\n       \
    \                             [(= 10 month) 31]\n                            \
    \        [(= 12 month) 31]\n                                    [(= 4 month) 30]\n\
    \                                    [(= 6 month) 30]\n                      \
    \              [(= 9 month) 30]\n                                    [(= 11 month)\
    \ 30]\n                                    [(= 2 month) 28]\n                \
    \                    [else 0]))\n                      (&lt;= 1 year 9999)))]\n\
    \         [_ false])))\n</code>\nIt's really ugly and I'm sure there are better\
    \ ways to do it.\nIt works in the Racket IDE though.\n", "  (or (= 0 (regexp-match\
    \ #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\" date))\n    \
    \  (= 1 (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    \ date))))\n", "  (define (split-date date)\n    (if (string-contains date \"\
    -\")\n        (string-split date \"-\")))\n  (define (invalid-date? date)\n  \
    \  (if (string=? \"\" date)\n        true\n        (and\n         (or\n      \
    \    (and (or (string=? (string-append (split-date date) 1) \"01\")\n        \
    \                (string=? (string-append (split-date date) 1) \"03\")\n     \
    \                   (string=? (string-append (split-date date) 1) \"05\")\n  \
    \                      (string=? (string-append (split-date date) 1) \"07\")\n\
    \                        (string=? (string-append (split-date date) 1) \"08\"\
    )\n                        (string=? (string-append (split-date date) 1) \"10\"\
    )\n                        (string=? (string-append (split-date date) 1) \"12\"\
    ))\n                  (or (string&lt;? \"01\" (string-append (split-date date)\
    \ 2))\n                      (string&gt;? \"31\" (string-append (split-date date)\
    \ 2))))\n           (and (or (string=? (string-append (split-date date) 1) \"\
    04\")\n                        (string=? (string-append (split-date date) 1) \"\
    06\")\n                        (string=? (string-append (split-date date) 1) \"\
    09\")\n                        (string=? (string-append (split-date date) 1) \"\
    11\"))\n                  (or (string&lt;? \"01\" (string-append (split-date date)\
    \ 2))\n                      (string&gt;? \"30\" (string-append (split-date date)\
    \ 2))))\n           (and (string=? (string-append (split-date date) 1) \"02\"\
    )\n                (or (string&lt;? \"01\" (string-append (split-date date) 2))\n\
    \                    (string&gt;? \"29\" (string-append (split-date date) 2)))))\n\
    \         (or (string&lt;? \"01\" (string-append (split-date date) 1))\n     \
    \        (string&gt;? \"12\" (string-", "  (local [;;; helpers\n          (define\
    \ (s->i [s (string->symbol (string-trim s))])\n            (cond [(symbol=? s\
    \ 'jan) 1]\n                  [(symbol=? s 'feb) 2]\n                  [(symbol=?\
    \ s 'mar) 3]\n                  [(symbol=? s 'apr) 4]\n                  [(symbol=?\
    \ s 'may) 5]\n                  [(symbol=? s 'jun) 6]\n                  [(symbol=?\
    \ s 'jul) 7]\n                  [(symbol=? s 'aug) 8]\n                  [(symbol=?\
    \ s 'sep) 9]\n                  [(symbol=? s 'oct) 10]\n                  [(symbol=?\
    \ s 'nov) 11]\n                  [(symbol=? s 'dec) 12]\n                  [else\
    \ 13]))\n          (define (split-string s [delimiter #\\space])\n           \
    \ (regexp-split #rx(delimiter +) s))\n          (define (s->b [s (string->symbol\
    \ (string-trim s))])\n            (cond [(symbol=? s 'true) #t]\n            \
    \      [(symbol=? s 'false) #f]\n                  [else #f]))]\n    (cond [(or\
    \ (empty? date) (not (string? date))) #f]\n          [(not (regexp-match? #rx\"\
    ([A-Za-z]{3}) ([0-9]{1,2}) ([0-9]{4})\" date)) #f]\n          [else (let-values\
    \ ([(d m y) (values (string->number (cadr (split-string date)))\n            \
    \                                  (s->i (car (split-string date)))\n        \
    \                                      (string->number (caddr (split-string date))))])\n\
    \                   (cond [(and (and (>= m 1) (<= m 12))\n                   \
    \            (and (>= d 1) (<= d (cond [(member m '(1 3 5 7 8 10 12)) 31]\n  \
    \                                                        [(member m '(4 6 9 11))\
    \ 30]\n                                                          [(member m '(2))\
    \ 29]\n                                                          [", "  (define\
    \ (split-date date)\n    (if (string-empty? date)\n      '(())\n      (cons (string-append\
    \ (substring date 0 2) \"-\" (substring date 2 4) \"-\" (substring date 4 8))\
    \ (split-date (substring date 8)))))\n  (define (date-valid date)\n    (cond ((string-empty?\
    \ date) #f)\n          ((and (and (<= 01 (string->number (substring date 0 2)))\
    \ (<= (string->number (substring date 0 2)) 12))\n                (and (<= 01\
    \ (string->number (substring date 3 5))) (<= (string->number (substring date 3\
    \ 5)) 31))) #t)\n          ((and (and (<= 01 (string->number (substring date 0\
    \ 2))) (<= (string->number (substring date 0 2)) 12))\n                (and (<=\
    \ 01 (string->number (substring date 3 5))) (<= (string->number (substring date\
    \ 3 5)) 30))) #t)\n          ((and (and (<= 01 (string->number (substring date\
    \ 0 2))) (<= (string->number (substring date 0 2)) 12))\n                (and\
    \ (<= 01 (string->number (substring date 3 5))) (<= (string->number (substring\
    \ date 3 5)) 29))) #t)\n          (else #f)))\n  (cond ((string-empty? date) #f)\n\
    \        ((= (string-length date) 8) (date-valid date))\n        ((&gt; (string-length\
    \ date) 8) (date-valid (car (split-date date))))\n        (else #f)))\n</code>\n\
    What I ended up doing was splitting the string into multiple strings (using <code>split-date</code>)\
    \ where each date contains:\n\n2 characters for the month\n2 characters for the\
    \ day\n4 characters for the year\n\nThen I validated each string using <code>date-valid</code>.\
    \ The validation process is as follows:\n\nIf the string is empty, the function\
    \ returns <code>#f</code>.\nIf the months are between 1 and 12 (inclusive) and\
    \ the days are between 1 and 31 (inclusive), return <code>#t</code>.\nIf the months\
    \ are", "  (if (empty? date)\n      #f\n      (define (valid-month? month)\n \
    \       (and (<= 1 month) (<= month 12)))\n      (define (valid-day? month day)\n\
    \        (and (<= 1 day)\n             (cond [(equal? month 1) (<= day 31)]\n\
    \                   [(equal? month 3) (<= day 31)]\n                   [(equal?\
    \ month 5) (<= day 31)]\n                   [(equal? month 7) (<= day 31)]\n \
    \                  [(equal? month 8) (<= day 31)]\n                   [(equal?\
    \ month 10) (<= day 31)]\n                   [(equal? month 12) (<= day 31)]\n\
    \                   [(equal? month 4) (<= day 30)]\n                   [(equal?\
    \ month 6) (<= day 30)]\n                   [(equal? month 9) (<= day 30)]\n \
    \                  [(equal? month 11) (<= day 30)]\n                   [(equal?\
    \ month 2) (<= day 29)]\n                   [else #f])))\n      (define (valid-format?\
    \ date)\n        (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n     \
    \ (define (date-parts date)\n        (regexp-match* #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n      (define (parts->mon-day-year parts)\n        (let ([s (map string->number\
    \ parts)])\n          (list (list-ref s 1) (list-ref s 2) (list-ref s 3))))\n\
    \      (define (month-day-year->date mon day year)\n        (format \"~2,'0d-~2,'0d-~4,'0d\"\
    \ mon day year))\n      (define (date->month-day-year date)\n        (let ([parts\
    \ (date-parts date)])\n          (if (not (empty? parts))\n              (parts->mon-day-year\
    \ parts)\n              #f)))\n      (define (mon-day-year->date mon day year)\n\
    \        (month-day-year->date mon day year))\n      (define (format", "  (define\
    \ (valid-month m)\n    (and (>= m 1) (<= m 12)))\n  (define (valid-day m d)\n\
    \    (and (>= d 1)\n         (cond\n           [(member m '(1 3 5 7 8 10 12))\
    \ (<= d 31)]\n           [(member m '(4 6 9 11)) (<= d 30)]\n           [(= m\
    \ 2) (<= d 29)])))\n  (define (valid-year y)\n    (and (>= y 1) (<= y 3999)))\n\
    \  (define (valid-date? lst)\n    (cond\n      [(empty? lst) true]\n      [(and\
    \ (list? (first lst)) (valid-date? (first lst))) (valid-date? (rest lst))]\n \
    \     [(and (integer? (first lst)) (valid-date? (rest lst))) (valid-date? (rest\
    \ lst))]\n      [else false]))\n  (define (valid-format date)\n    (define (valid-format?\
    \ date)\n      (cond\n        [(empty? date) true]\n        [(string? (first date))\
    \ (valid-format? (rest date))]\n        [(integer? (first date)) (valid-format?\
    \ (rest date))]\n        [else false]))\n    (cond\n      [(or (null? date) (empty?\
    \ date)) false]\n      [(not (valid-format? date)) false]\n      [(not (= (length\
    \ date) 3)) false]\n      [(not (and (valid-month (first date)) (valid-day (first\
    \ date) (second date)) (valid-year (third date)))) false]\n      [else true]))\n\
    \  (and (valid-date? date) (valid-format date)))", "  (define (invalid-date? date)\n\
    \    (or\n     ;; 1. The date string is not empty.\n     (empty? date)\n     ;;\
    \ 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
    \ And the number of days is not less than 1 or higher than 30 days for months\
    \ 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the\
    \ month 2.\n     (or (and (= 1 (string-&gt;number (substring date 0 2)))\n   \
    \       (or (and (= \"02\" (substring date 0 2))\n               (not (in (string-&gt;number\
    \ (substring date 3 5)) (list 28 29))))\n              (and (in (string-&gt;number\
    \ (substring date 0 2)) (list 04 06 09 11))\n                   (not (in (string-&gt;number\
    \ (substring date 3 5)) (list 30))))\n              (and (in (string-&gt;number\
    \ (substring date 0 2)) (list 01 03 05 07 08 10 12))\n                   (not\
    \ (in (string-&gt;number (substring date 3 5)) (list 31))))))\n         ;; 3.\
    \ The months should not be less than 1 or higher than 12.\n         (or (&lt;\
    \ (string-&gt;number (substring date 0 2)) 01)\n             (&gt; (string-&gt;number\
    \ (substring date 0 2)) 12))\n         ;; 4. The date should be in the format:\
    \ mm-dd-yyyy\n         (not (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))))\n  (if (invalid-date? date)\n      #f\n      #t))\n</code>\nor\n<code>#lang\
    \ racket\n", "  (define (is-leap year)\n    (and (= (modulo year 4) 0)\n     \
    \    (or (not (= (modulo year 100) 0))\n             (= (modulo year 400) 0))))\n\
    \  (and (andmap string-digit? (regexp-split #rx\"-\" date))\n       (let ([month\
    \ (string-&gt;number (car (regexp-split #rx\"-\" date)))])\n         (or (and\
    \ (member month '(1 3 5 7 8 10 12))\n                  (&lt;= 1 month 12)\n  \
    \                (&lt;= 1 (string-&gt;number (cadr (regexp-split #rx\"-\" date)))\
    \ 31))\n             (and (member month '(4 6 9 11))\n                  (&lt;=\
    \ 1 month 12)\n                  (&lt;= 1 (string-&gt;number (cadr (regexp-split\
    \ #rx\"-\" date))) 30))\n             (and (= month 2)\n                  (&lt;=\
    \ 1 month 12)\n                  (&lt;= 1 (string-&gt;number (cadr (regexp-split\
    \ #rx\"-\" date)))\n                       (if (is-leap (string-&gt;number (car\
    \ (regexp-split #rx\"-\" date))))\n                           29\n           \
    \                28)))))))\n", "  (match date\n    [(regexp #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    d{4}$\") \n     (match (split date \"-\")\n       [(list month day year)\n   \
    \     (match (list-ref month 0)\n          [1 (and (in-range day 1 31) (valid-year\
    \ year))]\n          [2 (and (in-range day 1 28) (valid-year year))]\n       \
    \   [3 (and (in-range day 1 31) (valid-year year))]\n          [4 (and (in-range\
    \ day 1 30) (valid-year year))]\n          [5 (and (in-range day 1 31) (valid-year\
    \ year))]\n          [6 (and (in-range day 1 30) (valid-year year))]\n       \
    \   [7 (and (in-range day 1 31) (valid-year year))]\n          [8 (and (in-range\
    \ day 1 31) (valid-year year))]\n          [9 (and (in-range day 1 30) (valid-year\
    \ year))]\n          [10 (and (in-range day 1 31) (valid-year year))]\n      \
    \    [11 (and (in-range day 1 30) (valid-year year))]\n          [12 (and (in-range\
    \ day 1 31) (valid-year year))]\n          [_ #f])]\n       [_ #f])]\n    [_ #f]))\n",
  "  (if (empty? date)\n      #f\n      (local ((define (month-date-year m d y)\n\
    \                (and (integer? m)\n                     (and (integer? d)\n \
    \                         (and (integer? y)\n                               (and\
    \ (and (and (&lt;= 1 m) (&lt;= m 12))\n                                      \
    \   (and (member m '(1 3 5 7 8 10 12))\n                                     \
    \         (&lt;= 1 d) (&lt;= d 31))\n                                        \
    \ (and (member m '(4 6 9 11))\n                                              (&lt;=\
    \ 1 d) (&lt;= d 30))\n                                         (and (eq? m 2)\n\
    \                                              (&lt;= 1 d) (&lt;= d 29)))\n  \
    \                                  (eq? (length date) 10)\n                  \
    \                  (eq? (list-ref date 2) #\\-))\n                           \
    \    (eq? (list-ref date 5) #\\-))))))\n        (month-date-year (string-&gt;number\
    \ (substring date 0 2))\n                         (string-&gt;number (substring\
    \ date 3 5))\n                         (string-&gt;number (substring date 6 10))))))\n",
  "  (and (string-length date)\n       (= (string-length date) 10)\n       (let* ([segs\
    \ (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date)]\n           \
    \   [m (string-&gt;number (cadr segs))]\n              [d (string-&gt;number (caddr\
    \ segs))]\n              [y (string-&gt;number (cadddr segs))])\n         (and\
    \ (= 4 (string-length (cadddr segs)))\n              (or (and (= 2 m) (= 2 d)\
    \ (&lt;= 1 d 31))\n                  (and (= 4 m) (= 2 d) (&lt;= 1 d 30))\n  \
    \                (and (= 6 m) (= 2 d) (&lt;= 1 d 30))\n                  (and\
    \ (= 9 m) (= 2 d) (&lt;= 1 d 30))\n                  (and (= 11 m) (= 2 d) (&lt;=\
    \ 1 d 30))\n                  (and (= m 1) (= 2 d) (&lt;= 1 d 31))\n         \
    \         (and (= m 3) (= 2 d) (&lt;= 1 d 31))\n                  (and (= m 5)\
    \ (= 2 d) (&lt;= 1 d 31))\n                  (and (= m 7) (= 2 d) (&lt;= 1 d 31))\n\
    \                  (and (= m 8) (= 2 d) (&lt;= 1 d 31))\n                  (and\
    \ (= m 10) (= 2 d) (&lt;= 1 d 31))\n                  (and (= m 12) (= 2 d) (&lt;=\
    \ 1 d 31))\n                  (and (= m 2) (&lt;= 1 d 29))))))\n</code>\n", " \
    \ (cond [(empty? date) #f]\n        [(not (equal? (string-length date) 10)) #f]\n\
    \        [(or (or (or (= (string-ref date 4) #\\-) (= (string-ref date 7) #\\\
    -)) (in-range? (char->integer (string-ref date 5)) #\\0 #\\3)) (or (not (in-range?\
    \ (char->integer (string-ref date 6)) #\\0 #\\9)) (not (in-range? (char->integer\
    \ (string-ref date 8)) #\\0 #\\9)) (not (in-range? (char->integer (string-ref\
    \ date 9)) #\\0 #\\9)) (not (in-range? (char->integer (string-ref date 3)) #\\\
    0 #\\9)) (not (in-range? (char->integer (string-ref date 0)) #\\0 #\\9)) (not\
    \ (in-range? (char->integer (string-ref date 1)) #\\0 #\\9)) (not (in-range? (char->integer\
    \ (string-ref date 2)) #\\0 #\\9)))) #f]\n        [(or (or (or (or (= (string-ref\
    \ date 3) #\\1) (= (string-ref date 3) #\\3)) (= (string-ref date 3) #\\5)) (=\
    \ (string-ref date 3) #\\7)) (= (string-ref date 3) #\\8)) (or (or (or (= (string-ref\
    \ date 3) #\\1) (= (string-ref date 3) #\\0)) (= (string-ref date 3) #\\2)) (=\
    \ (string-ref date 0) #\\1)))\n         (and (in-range? (string->number (substring\
    \ date 5 7)) 1 31) (in-range? (string->number (substring date 0 2)) 1 12))]\n\
    \        [(or (or (or (= (string-ref date 3) #\\4) (= (string-ref date 3) #\\\
    6)) (= (string-ref date 3) #\\9)) (= (string-ref date 3) #\\1)) (or (or (= (string-ref\
    \ date 3) #\\1) (= (string-ref date 3) #\\", "  (cond\n    [(regexp-match #rx\"\
    ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date)\n     #t]\n    [else\n     #f]))\n",
  "  (define m (string->number (string-ref date 0)))\n  (define d (string->number\
    \ (string-ref date 2)))\n  (define y (string->number (string-ref date 4)))\n \
    \ (and (not (equal? date \"\"))\n       (or (and (&lt;= 1 d 31) (= m 1) (= m 3)\
    \ (= m 5) (= m 7) (= m 8) (= m 10) (= m 12))\n           (and (&lt;= 1 d 30) (=\
    \ m 4) (= m 6) (= m 9) (= m 11))\n           (and (&lt;= 1 d 29) (= m 2)))\n \
    \      (&lt;= 1 m 12)\n       (= (string-length date) 8)))\n</code>\nThe above\
    \ code did not work and it was not able to handle February.\nI tried to add cases\
    \ for February but the program was getting too long, so I thought of reducing\
    \ the code by using <code>regexp</code> for checking validating the format of\
    \ the string.\n<code>#lang racket\n", "  (define (date->list date)\n    (string-split\
    \ date #\\-))\n  (define (date-valid? datelist)\n    (define (month->day month)\n\
    \      (cond\n        ((equal? month 1) 31)\n        ((equal? month 3) 31)\n \
    \       ((equal? month 5) 31)\n        ((equal? month 7) 31)\n        ((equal?\
    \ month 8) 31)\n        ((equal? month 10) 31)\n        ((equal? month 12) 31)\n\
    \        ((equal? month 4) 30)\n        ((equal? month 6) 30)\n        ((equal?\
    \ month 9) 30)\n        ((equal? month 11) 30)\n        ((equal? month 2) 29)\n\
    \        (else -1)))\n    (define (is-valid-month? m)\n      (and (and (<= 1 m)\
    \ (<= m 12))\n           (= (month->day m) (string->number (caddr datelist)))))\n\
    \    (and (and (> (length datelist) 0)\n              (equal? (length datelist)\
    \ 3))\n         (and (<= 1 (string->number (cadr datelist)))\n              (<=\
    \ (string->number (cadr datelist)) (month->day (string->number (car datelist)))))\n\
    \         (is-valid-month? (string->number (car datelist)))))\n  (date-valid?\
    \ (date->list date)))\n", "  (match (regexp-match #rx\"([0-9]{2})-([0-9]{2})-([0-9]{4})\"\
    \ date)\n    [(list (list-ref (list-ref matches 1) 0)\n           (list-ref (list-ref\
    \ matches 2) 0)\n           (list-ref (list-ref matches 3) 0))\n     (cond\n \
    \      [(= (string->number (list-ref (list-ref matches 1) 0)) 1)\n        (and\
    \ (= (string->number (list-ref (list-ref matches 2) 0)) 31)\n             (zero?\
    \ (remainder (string->number (list-ref (list-ref matches 3) 0)) 4)))]\n      \
    \ [(= (string->number (list-ref (list-ref matches 1) 0)) 3)\n        (and (= (string->number\
    \ (list-ref (list-ref matches 2) 0)) 31)\n             (zero? (remainder (string->number\
    \ (list-ref (list-ref matches 3) 0)) 4)))]\n       [(= (string->number (list-ref\
    \ (list-ref matches 1) 0)) 5)\n        (and (= (string->number (list-ref (list-ref\
    \ matches 2) 0)) 31)\n             (zero? (remainder (string->number (list-ref\
    \ (list-ref matches 3) 0)) 4)))]\n       [(= (string->number (list-ref (list-ref\
    \ matches 1) 0)) 7)\n        (and (= (string->number (list-ref (list-ref matches\
    \ 2) 0)) 31)\n             (zero? (remainder (string->number (list-ref (list-ref\
    \ matches 3) 0)) 4)))]\n       [(= (string->number (list-ref (list-ref matches\
    \ 1) 0)) 8)\n        (and (= (string->number (list-ref (list-ref matches 2) 0))\
    \ 31)\n             (zero? (remainder (string->number (list-ref (list-ref matches\
    \ 3) 0)) 4)))]\n       [(= (string->number (list-ref (list-ref matches 1) 0))\
    \ 10)\n        (and (= (string->number (list-ref (list-", "  (if (or (empty? date)\n\
    \          (not (string-contains date \"-\"))\n          (not (equal? (count-matches-of-regexp\
    \ #rx\"-\" date) 2)))\n      #f\n      (define date-list (split date \"-\"))\n\
    \      (define month (string->number (car date-list)))\n      (define day (string->number\
    \ (cadr date-list)))\n      (define year (string->number (caddr date-list)))\n\
    \      (define (check-month-range)\n        (and (>= month 1) (<= month 12)))\n\
    \      (define (check-day-range)\n        (and (>= day 1)\n             (<= day\n\
    \                 (cond\n                   [(member month '(1 3 5 7 8 10 12))\
    \ 31]\n                   [(member month '(4 6 9 11)) 30]\n                  \
    \ [(equal? month 2) 29]\n                   [else 0]))))\n      (define (check-year-range)\n\
    \        (and (>= year 0) (<= year 9999)))\n      (and (check-month-range)\n \
    \          (check-day-range)\n           (check-year-range))))\n", "  (cond\n\
    \    [(string=? date \"\") #f]\n    [(and (= (string-length date) 10)\n      \
    \    (equal? (substring date 2 3) \"-\")\n          (equal? (substring date 5\
    \ 6) \"-\")\n          (and\n            (<= (string->number (substring date 0\
    \ 2)) 12)\n            (>= (string->number (substring date 0 2)) 1))\n       \
    \   (and\n            (<= (string->number (substring date 3 5)) 31)\n        \
    \    (>= (string->number (substring date 3 5)) 1))\n          (and\n         \
    \   (<= (string->number (substring date 6)) 9999)\n            (>= (string->number\
    \ (substring date 6)) 0))) #t]\n    [else #f]))\n", "  (regexp-match* #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    \\d{4}$\" date))\n", "  (let ((valid-months '(1 3 5 7 8 10 12))\n        (invalid-months\
    \ '(4 6 9 11))\n        (valid-days '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\
    \ 18 19 20 21 22 23 24 25 26 27 28 29 30 31))\n        (invalid-days '(1 2 3 4\
    \ 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30))\n\
    \        (valid-years '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\
    \ 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\
    \ 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73\
    \ 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\
    \ 100))\n        (invalid-years '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\
    \ 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\
    \ 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70\
    \ 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96\
    \ 97 98 99 100))\n        (date-list (string-split date \"-\")))\n    (match date-list\n\
    \      [('() _ _) false]\n      [(_ '() _) false]\n      [(_ _ '()) false]\n \
    \     [('(month) '(day) '(year))\n       (or (member month valid-months)\n   \
    \        (and (member month invalid-months)\n                (member day invalid-days))\n\
    \           (and (eq? month 2)\n                (member day valid-days)))]\n \
    \     [('(month) '(day) '(year))\n       (or (member year valid-years)\n     \
    \      (and (member year invalid-years)\n                (member day invalid-days))\n\
    \           (and (eq? month 2)\n                (member day valid-days)))])))\n",
  "  (define date-regexp (regexp #rx\"^([0-1][0-9])[-/]([0-3][0-9])[-/]([0-9]{4})$\"\
    ))\n  (define (matches-date? m)\n    (and (not (empty? m))\n         (= (length\
    \ m) 1)\n         (define m (first m))\n         (define month (string->number\
    \ (regexp-match-positions m 1)))\n         (define day (string->number (regexp-match-positions\
    \ m 2)))\n         (define year (string->number (regexp-match-positions m 3)))\n\
    \         (or\n          (and (or (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n               (<= 1 day 31))\n \
    \         (and (or (= month 4) (= month 6) (= month 9) (= month 11))\n       \
    \        (<= 1 day 30))\n          (and (= month 2)\n               (<= 1 day\
    \ 29)))\n         true))\n  (matches-date? (regexp-match date-regexp date)))",
  "  (define (valid-day? d)\n    (or (and (eq? 1 d) (= 31 (length (regexp-match #rx\"\
    (31)\" date))))\n        (and (or (eq? 3 d) (eq? 5 d) (eq? 7 d) (eq? 8 d) (eq?\
    \ 10 d) (eq? 12 d))\n             (= 31 (length (regexp-match #rx\"(30|31)\" date))))\n\
    \        (and (eq? 2 d)\n             (= 29 (length (regexp-match #rx\"(29)\"\
    \ date))))\n        (and (or (eq? 4 d) (eq? 6 d) (eq? 9 d) (eq? 11 d))\n     \
    \        (= 30 (length (regexp-match #rx\"(29|30)\" date))))))\n  (define (valid-month?\
    \ m)\n    (and (= 2 (length (regexp-match #rx\"(0[1-9]|1[0-2])\" date)))\n   \
    \      (valid-day? m)))\n  (define (valid-year? y)\n    (and (= 4 (length (regexp-match\
    \ #rx\"(20\\\\d\\\\d)\" date)))\n         (valid-month? (string-&gt;number (string-&gt;list\
    \ (regexp-match #rx\"(0[1-9]|1[0-2])\" date))))))\n  (and (not (empty? date))\n\
    \       (valid-year? (string-&gt;number (string-&gt;list (regexp-match #rx\"(20\\\
    \\d\\\\d)\" date))))))\n", "  (and\n   (string? date)\n   (string-empty? date)\n\
    \   (string-split date #- \"-\")))", "  (define (valid-month month)\n    (and\n\
    \     (>= month 1)\n     (<= month 12)))\n  (define (valid-day month day)\n  \
    \  (cond\n      [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (>= day 1)\n       (<= day 31)]\n    \
    \  [(or (= month 4) (= month 6) (= month 9) (= month 11))\n       (>= day 1)\n\
    \       (<= day 30)]\n      [(= month 2)\n       (>= day 1)\n       (<= day 29)]))\n\
    \  (define (valid-year year)\n    (>= year 1))\n  (define (valid-format date)\n\
    \    (string-split date \"-\"))\n  (define (valid-parts date)\n    (match date\n\
    \      [(list month day year)\n       (and\n        (valid-month (string->number\
    \ month))\n        (valid-day (string->number month) (string->number day))\n \
    \       (valid-year (string->number year)))]))\n  (and\n   (not (string=? date\
    \ \"\"))\n   (valid-parts (valid-format date))))", "  (define (days-limit month)\n\
    \    (cond ((member month '(1 3 5 7 8 10 12)) 31)\n          ((member month '(4\
    \ 6 9 11)) 30)\n          ((eq? month 2) 29)\n          (else #f)))\n  (define\
    \ (valid-date-length? date)\n    (and (and (string? date) (not (empty? date)))\n\
    \         (= 5 (length (string-split date \"-\")))))\n  (define (valid-day? day)\n\
    \    (and (number? day)\n         (<= 1 day)\n         (<= day 31)))\n  (define\
    \ (valid-month? month)\n    (and (number? month)\n         (<= 1 month)\n    \
    \     (<= month 12)))\n  (define (valid-year? year)\n    (and (number? year)\n\
    \         (<= 1900 year)\n         (<= year 2100)))\n  (cond ((valid-date-length?\
    \ date)\n         (define date-list (map string->number (string-split date \"\
    -\")))\n         (and (apply and (map valid-day? date-list))\n              (apply\
    \ and (map valid-month? date-list))\n              (apply and (map valid-year?\
    \ date-list))\n              (and (valid-day? (first date-list))\n           \
    \        (valid-month? (second date-list))\n                   (valid-year? (third\
    \ date-list))\n                   (let ([current-day (first date-list)]\n    \
    \                     [current-month (second date-list)]\n                   \
    \      [current-year (third date-list)])\n                     (and (<= (days-limit\
    \ current-month) current-day)\n                          (<= current-day 31))))))\n\
    \        (else #f)))\n", "  (cond\n    ((not (string? date)) #f)\n    ((not (string-length\
    \ date)) #f)\n    ((or (< (substring date 0 1) \"1\") (> (substring date 0 1)\
    \ \"9\")) #f)\n    ((or (< (substring date 1 2) \"0\") (> (substring date 1 2)\
    \ \"9\")) #f)\n    ((not (string= (substring date 2 3) \"-\")) #f)\n    ((or (<\
    \ (substring date 3 4) \"0\") (> (substring date 3 4) \"9\")) #f)\n    ((or (<\
    \ (substring date 4 5) \"0\") (> (substring date 4 5) \"9\")) #f)\n    ((not (string=\
    \ (substring date 5 6) \"-\")) #f)\n    ((or (< (substring date 6 7) \"0\") (>\
    \ (substring date 6 7) \"9\")) #f)\n    ((or (< (substring date 7 8) \"0\") (>\
    \ (substring date 7 8) \"9\")) #f)\n    ((or (< (substring date 8 9) \"0\") (>\
    \ (substring date 8 9) \"9\")) #f)\n    ((or (< (substring date 9 10) \"0\") (>\
    \ (substring date 9 10) \"9\")) #f)\n    ((> (+ (substring date 3 5) (substring\
    \ date 0 2)) \"32\") #f)\n    ((= (substring date 4 5) \"0\") #f)\n    ((= (substring\
    \ date 4 5) \"1\") #f)\n    ((= (substring date 4 5) \"2\") #f)\n    ((= (substring\
    \ date 4 5) \"3\") #f)\n    ((and (= (substring date 4 5) \"4\") (> (substring\
    \ date 3 5) \"30\")) #f)\n    ((= (substring date 4 5) \"5\") #f)\n    ((= (substring\
    \ date 4 5) \"6\") #f)\n    ((and (= (substring date 4 5) \"7\") (> (substring\
    \ date 3 5) \"31\")) #f)\n    ((= (substring date 4 5) \"8\") #f)\n    ((and (=\
    \ (substring date", "  (define (month-days m)\n    (cond\n      ((or (= m 1) (=\
    \ m 3) (= m 5) (= m 7) (= m 8) (= m 10) (= m 12)) 31)\n      ((or (= m 4) (= m\
    \ 6) (= m 9) (= m 11)) 30)\n      ((= m 2) 29)\n      (else 0)))\n  (define (valid-month-day\
    \ md)\n    (and (> md 0) (<= md (month-days (list-ref md 0)))))\n  (define (valid-day-format\
    \ day-format)\n    (or (equal? day-format '(2 2 4))\n        (equal? day-format\
    \ '(1 2 4))\n        (equal? day-format '(1 2))))\n  (define day-format\n    (filter\n\
    \     (lambda (x)\n       (and (not (char=? (list-ref x 0) #\\-))\n          \
    \  (not (char=? (list-ref x 1) #\\-))))\n     (map (lambda (x)\n            (length\
    \ x))\n          (map string->list\n               (string-split date #\\-)))))\n\
    \  (and (> (length date) 0)\n       (valid-day-format day-format)\n       (and\
    \ (>= (list-ref day-format 0) 1)\n            (<= (list-ref day-format 0) 12))\n\
    \       (valid-month-day day-format)))\n", "  (define rules\n    (list\n     (lambda\
    \ (date)\n       (not (empty? date)))\n     (lambda (date)\n       (match (regexp-match\
    \ #rx\"^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$\" date)\n         [(list month day year)\n\
    \          (or (and (equal? #\"01\" month) (<= 1 day 31))\n              (and\
    \ (equal? #\"03\" month) (<= 1 day 31))\n              (and (equal? #\"05\" month)\
    \ (<= 1 day 31))\n              (and (equal? #\"07\" month) (<= 1 day 31))\n \
    \             (and (equal? #\"08\" month) (<= 1 day 31))\n              (and (equal?\
    \ #\"10\" month) (<= 1 day 31))\n              (and (equal? #\"12\" month) (<=\
    \ 1 day 31))\n              (and (equal? #\"04\" month) (<= 1 day 30))\n     \
    \         (and (equal? #\"06\" month) (<= 1 day 30))\n              (and (equal?\
    \ #\"09\" month) (<= 1 day 30))\n              (and (equal? #\"11\" month) (<=\
    \ 1 day 30))\n              (and (equal? #\"02\" month) (<= 1 day 29)))]\n   \
    \      [_ #f]))\n     (lambda (date)\n       (match (regexp-match #rx\"^(\\\\\
    d{2})-(\\\\d{2})-(\\\\d{4})$\" date)\n         [(list month day year)\n      \
    \    (or (equal? #\"01\" month)\n              (equal? #\"03\" month)\n      \
    \        (equal? #\"05\" month)\n              (equal? #\"07\" month)\n      \
    \        (equal? #\"08\" month)\n              (equal? #\"10\" month)\n      \
    \        (equal? #\"12\" month)\n              (equal? #\"04\" month)\n      \
    \        (equal? #\"06\" month)\n              (equal? #\"09\" month)\n      \
    \        (equal? #\"11\" month)\n              (equal? #\"02\" month))]\n    \
    \     [_ #f]", "  (and\n   (eq? (vector-length date) 10)\n   (eq? (vector-ref\
    \ date 2) #\\- )\n   (eq? (vector-ref date 5) #\\- )\n   (equal? (vector-ref date\
    \ 6) #\\0 )\n   (equal? (vector-ref date 7) #\\1 )\n   (equal? (vector-ref date\
    \ 8) #\\2 )\n   (equal? (vector-ref date 9) #\\0 )\n   (and\n    (or\n     (and\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (", "  (define (checks date)\n    (define (check-month-days\
    \ date)\n      (define (check-month-days-helper date)\n        (if (and (>= (string->number\
    \ (substring date 3 5)) 1) (<= (string->number (substring date 3 5)) 31))\n  \
    \          #t\n            #f))\n      (define (check-month-days-helper2 date)\n\
    \        (if (and (>= (string->number (substring date 3 5)) 1) (<= (string->number\
    \ (substring date 3 5)) 30))\n            #t\n            #f))\n      (define\
    \ (check-month-days-helper3 date)\n        (if (and (>= (string->number (substring\
    \ date 3 5)) 1) (<= (string->number (substring date 3 5)) 29))\n            #t\n\
    \            #f))\n      (if (or (= (string->number (substring date 0 2)) 1) (=\
    \ (string->number (substring date 0 2)) 3) (= (string->number (substring date\
    \ 0 2)) 5) (= (string->number (substring date 0 2)) 7) (= (string->number (substring\
    \ date 0 2)) 8) (= (string->number (substring date 0 2)) 10) (= (string->number\
    \ (substring date 0 2)) 12))\n          (check-month-days-helper date)\n     \
    \     (if (or (= (string->number (substring date 0 2)) 4) (= (string->number (substring\
    \ date 0 2)) 6) (= (string->number (substring date 0 2)) 9) (= (string->number\
    \ (substring date 0 2)) 11))\n              (check-month-days-helper2 date)\n\
    \              (if (= (string->number (substring date 0 2)) 2)\n             \
    \     (check-month-days-helper3 date)\n                  #f))))\n    (define (check-month\
    \ date)\n      (if (and (>= (string->number (substring date 0 2)) 1) (<= (string->number\
    \ (substring date 0 2)) 12))\n          #t\n          #f))\n    (define (check-format\
    \ date)\n      (if (and (eq? (substring date 2 3", "  (let ([month (string->number\
    \ (substring date 0 2))]\n        [day (string->number (substring date 3 5))]\n\
    \        [year (string->number (substring date 6))])\n    (and (not (string=?\
    \ date \"\"))\n         (or (and (&lt;= 1 month 12)\n                  (&lt;=\
    \ 1 day 31)\n                  (member month '(1 3 5 7 8 10 12)))\n          \
    \   (and (&lt;= 1 month 12)\n                  (&lt;= 1 day 30)\n            \
    \      (member month '(4 6 9 11)))\n             (and (&lt;= 1 month 12)\n   \
    \               (&lt;= 1 day 29)\n                  (= month 2)))\n         (integer?\
    \ month)\n         (integer? day)\n         (integer? year))))\n", "  (match date\n\
    \    [(or \"\" \" \") false]\n    [_ (and\n        (equal? (regexp-match? #rx\"\
    \\\\d{2}-\\\\d{2}-\\\\d{4}\" date) #t)\n        (and (match (regexp-match #rx\"\
    ([0-9]{2})-([0-9]{2})-([0-9]{4})\" date)\n                 [(_ m d y) (and (and\
    \ (<= 1 (string->number m) 12)\n                                     (<= 1 (string->number\
    \ d) (days m y))\n                                     (<= 1800 (string->number\
    \ y) 9999))\n                                 true)])\n             true))]))\n",
  "  (define (valid-month m)\n    (or (= m 1) (= m 3) (= m 5) (= m 7) (= m 8) (= m\
    \ 10) (= m 12)))\n  (define (valid-month2 m)\n    (or (= m 4) (= m 6) (= m 9)\
    \ (= m 11)))\n  (define (valid-day d)\n    (and (>= d 1) (<= d 31)))\n  (define\
    \ (valid-day2 d)\n    (and (>= d 1) (<= d 30)))\n  (define (valid-day3 d)\n  \
    \  (and (>= d 1) (<= d 29)))\n  (define (valid-days d m)\n    (if (valid-month\
    \ m)\n        (valid-day d)\n        (if (valid-month2 m)\n            (valid-day2\
    \ d)\n            (valid-day3 d))))\n  (define (split-date s)\n    (string-split\
    \ s #\\-) )\n  (define (valid-date? l)\n    (and (valid-days (string->number (list-ref\
    \ l 1)) (string->number (list-ref l 0)))\n         (valid-days (string->number\
    \ (list-ref l 2)) (string->number (list-ref l 1)))))\n  (and\n   (string? date)\n\
    \   (valid-date? (split-date date))\n   (string=? (list->string (list-ref (split-date\
    \ date) 2))\n             (list->string (reverse (list-ref (split-date date) 2))))))\n",
  "  (or (string=? date \"\")\n      (let ((values (map string->number (string-split\
    \ date \"-\"))))\n        (and (= (length values) 3)\n             (and (member\
    \ (list-ref values 0) (list 1 3 5 7 8 10 12))\n                  (>= (list-ref\
    \ values 1) 1)\n                  (<= (list-ref values 1) 31))\n             (and\
    \ (member (list-ref values 0) (list 4 6 9 11))\n                  (>= (list-ref\
    \ values 1) 1)\n                  (<= (list-ref values 1) 30))\n             (and\
    \ (= (list-ref values 0) 2)\n                  (>= (list-ref values 1) 1)\n  \
    \                (<= (list-ref values 1) 29))\n             (and (>= (list-ref\
    \ values 0) 1)\n                  (<= (list-ref values 0) 12))\n             (and\
    \ (>= (list-ref values 2) 1))))))\n", "  (define mm-dd-yyyy #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    )\n  (define month-days '(31 28 31 30 31 30 31 31 30 31 30 31))\n  (define (month-days\
    \ m)\n    (if (zero? (modulo m 2))\n        31\n        30))\n  (define (date-split\
    \ date)\n    (let ((parts (string-split date #\\-)))\n      (cond\n        [(equal?\
    \ (length parts) 1) (list (first parts) \"01\" \"01\")]\n        [(equal? (length\
    \ parts) 2) (list (first parts) (second parts) \"01\")]\n        [else parts])))\n\
    \  (define (valid-month? m)\n    (and (not (equal? 0 (string->number m)))\n  \
    \       (and (<= 1 (string->number m)) (<= (string->number m) 12))))\n  (define\
    \ (valid-day? d m)\n    (let ((mm (string->number m)))\n      (and (not (equal?\
    \ 0 (string->number d)))\n           (and (<= 1 (string->number d)) (<= (string->number\
    \ d) (month-days mm))))))\n  (define (valid-year? y)\n    (not (equal? 0 (string->number\
    \ y))))\n  (define (date-valid? date)\n    (match (date-split date)\n      [(list\
    \ m d y)\n       (and (valid-month? m)\n            (valid-day? d m)\n       \
    \     (valid-year? y))]))\n  (and (regexp-match mm-dd-yyyy date)\n       (date-valid?\
    \ date)))\n", "  (or (empty? date)\n      (and (regexp-match #rx\"^[01][0-9]-[0-3][0-9]-[0-9]{4}$\"\
    \ date)\n           (and (date-num-valid? date)\n                (month-valid?\
    \ date)\n                (day-valid? date)))))\n", "  (cond [(empty? date) false]\n\
    \        [(regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date) (or (month1\
    \ date) (month2 date) (month3 date))]\n        [else false]))\n", "  (cond\n \
    \   [(empty? date) false]\n    [(string=? (substring date 3 5) (list #\\- #\\\
    -)) false]\n    [(string=? (substring date 0 2) (list #\\- #\\-)) false]\n   \
    \ [(list-ref (list true true false true true false true true false true true false)\n\
    \               (- (string->number (substring date 0 2)) 1)) false]\n    [(list-ref\
    \ (list true true true true true true true true true true true true)\n       \
    \        (- (string->number (substring date 3 5)) 1)) false]\n    [else true]))",
  "  (if (empty? date)\n      false\n      (cond\n       ((regexp-match #rx\"^([1-9]|1[0-2])-([1-9]|[12][0-9]|3[01])-([0-9]{4})$\"\
    \ date)\n        (let ([month (string->number (regexp-match #rx\"^([1-9]|1[0-2])\"\
    \ date))]\n              [day (string->number (regexp-match #rx\"-([1-9]|[12][0-9]|3[01])\"\
    \ date))]\n              [year (string->number (regexp-match #rx\"-([0-9]{4})$\"\
    \ date))])\n          (cond\n           ((= month 1)\n            (and (<= day\
    \ 31) (>= day 1)))\n           ((= month 2)\n            (cond\n             ((=\
    \ (modulo year 4) 0)\n              (and (<= day 29) (>= day 1)))\n          \
    \   (else\n              (and (<= day 28) (>= day 1)))))\n           ((member\
    \ month '(3 4 5 6 7 8 9 10 11 12))\n            (and (<= day 30) (>= day 1)))\n\
    \           (else\n            false))))\n       (else\n        false))))\n",
  "  (or (empty? date)\n      (> (length date) 10)\n      (regexp-match #rx\"^([0][1-9]|[1][0-2])-(3[0-1]|[1-2][0-9]|0[1-9])-([0-9]{4})$\"\
    \ date)))\n", "  (cond\n    [(empty? date) false]\n    [(string=? \"01-31-2000\"\
    \ date) true]\n    [(string=? \"02-28-2000\" date) true]\n    [(string=? \"02-29-2000\"\
    \ date) false]\n    [(string=? \"12-31-2000\" date) true]\n    [(string=? \"02-29-2001\"\
    \ date) false]\n    [(string=? \"02-30-2000\" date) false]\n    [(string=? \"\
    02-32-2000\" date) false]\n    [(string=? \"13-01-2000\" date) false]\n    [(string=?\
    \ \"0-01-2000\" date) false]\n    [(string=? \"02-31-2000\" date) false]\n   \
    \ [(string=? \"01-31-2000\" date) true]\n    [(string=? \"13-01-2000\" date) false]\n\
    \    [(string=? \"00-01-2000\" date) false]\n    [(string=? \"01-01-2000\" date)\
    \ true]\n    [(string=? \"01-00-2000\" date) false]\n    [(string=? \"01-01-2000\"\
    \ date) true]\n    [(string=? \"01-01-0000\" date) false]\n    [(string=? \"01-01-0\"\
    \ date) false]\n    [(string=? \"01-01-99\" date) false]\n    [(string=? \"01-01-1900\"\
    \ date) true]\n    [(string=? \"03-03-1999\" date) true]\n    [(string=? \"05-01-1999\"\
    \ date) true]\n    [(string=? \"07-04-1999\" date) true]\n    [(string=? \"08-08-1999\"\
    \ date) true]\n    [(string=? \"10-10-1999\" date) true]\n    [(string=? \"12-12-1999\"\
    \ date) true]\n    [(string=? \"04-01-1999\" date) true]\n    [(string=? \"06-06-1999\"\
    \ date) true]\n    [(string=? \"09-09-1999\" date) true]\n    [(string=?", " \
    \ (let ([tokens (string-split date \"-\")])\n    (and (apply > tokens '(0 2))\n\
    \         (and (apply < tokens '(0 2))\n              (apply > tokens '(1 13))\n\
    \              (apply < tokens '(1 13))\n              (and (apply > tokens '(2\
    \ 30))\n                   (apply < tokens '(2 30))\n                   (and (apply\
    \ > tokens '(3 31))\n                        (apply < tokens '(3 31))\n      \
    \                  (and (apply > tokens '(4 30))\n                           \
    \  (apply < tokens '(4 30))\n                             (and (apply > tokens\
    \ '(5 31))\n                                  (apply < tokens '(5 31))\n     \
    \                             (and (apply > tokens '(6 30))\n                \
    \                       (apply < tokens '(6 30))\n                           \
    \            (and (apply > tokens '(7 31))\n                                 \
    \           (apply < tokens '(7 31))\n                                       \
    \     (and (apply > tokens '(8 31))\n                                        \
    \         (apply < tokens '(8 31))\n                                         \
    \        (and (apply > tokens '(9 30))\n                                     \
    \                 (apply < tokens '(9 30))\n                                 \
    \                     (and (apply > tokens '(10 31))\n                       \
    \                                    (apply < tokens '(10 31))\n             \
    \                                              (and (apply > tokens '(11 30))\n\
    \                                                                (apply < tokens\
    \ '(11 30))\n                                                                (and\
    \ (apply > tokens '(12 31))\n                                                \
    \                     (apply < tokens '(12 31))))))))))))))))))\n", "  (if (or\
    \ (null? date) (not (string? date))) #f\n    (if (not (regexp-match #rx\"^[0-1][0-9]-[0-3][0-9]-[0-9]{4}$\"\
    \ date)) #f\n      (define (mhsb d) (if (string-contains d #\\-) (string-before\
    \ d #\\-)))\n      (define (mhsa d) (if (string-contains d #\\-) (string-after\
    \ d #\\-)))\n      (define (dhsa d) (mhsa (mhsa d)))\n      (define (dhsb d) (mhsb\
    \ (mhsa d)))\n      (define (yhsb d) (mhsb (dhsa d)))\n      (define (yhsa d)\
    \ (mhsa (dhsa d)))\n      (define (month date) (string->number (mhsb date)))\n\
    \      (define (day date) (string->number (dhsb date)))\n      (define (year date)\
    \ (string->number (yhsb date)))\n      (if (and (>= (month date) 1) (<= (month\
    \ date) 12)) #t\n        #f)\n      (define (maxday date)\n        (cond\n   \
    \       ((or (= (month date) 1) (= (month date) 3) (= (month date) 5) (= (month\
    \ date) 7) (= (month date) 8) (= (month date) 10) (= (month date) 12))\n     \
    \      31)\n          ((or (= (month date) 4) (= (month date) 6) (= (month date)\
    \ 9) (= (month date) 11))\n           30)\n          ((= (month date) 2)\n   \
    \        29)))\n      (if (and (>= (day date) 1) (<= (day date) (maxday date)))\
    \ #t\n        #f)\n      (if (and (>= (year date) 0) (<= (year date) 9999)) #t\n\
    \        #f))))\n", "  (define d (second (string-split date \"-\")))\n  (define\
    \ m (first (string-split date \"-\")))\n  (define y (second (string-split (last\
    \ (string-split date \"-\")))))\n  (define (is_leap_year? y)\n    (or (and (equal?\
    \ (modulo y 4) 0) (not (equal? (modulo y 100) 0)))\n        (equal? (modulo y\
    \ 400) 0)))\n  (and (and (and (not (empty? date))\n                 (and (&lt;=\
    \ (string-&gt;number d) 31)\n                      (&gt;= (string-&gt;number d)\
    \ 1)))\n              (and (&lt;= (string-&gt;number m) 12)\n                \
    \   (&gt;= (string-&gt;number m) 1)))\n           (and (not (empty? y))\n    \
    \            (and (not (empty? m))\n                     (not (empty? d)))))\n\
    \       (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or\
    \ (or (or (or (or (or (or (or (or (or", "  (define (get-date-part date part)\n\
    \    (substring date (add1 (* part 3)) (+ 3 (add1 (* part 3)))))\n  (define (is-valid-day\
    \ day)\n    (and (>= day 1) (<= day 31)))\n  (define (is-valid-month month)\n\
    \    (and (>= month 1) (<= month 12)))\n  (define (is-valid-year year)\n    (and\
    \ (>= year 0) (<= year 9999)))\n  (define (is-date-format? date)\n    (and (=\
    \ (string-length date) 10)\n         (= (string-ref date 2) #\\-)))\n  (define\
    \ (is-valid-day-in-month? day month)\n    (cond\n      ((or (= month 1) (= month\
    \ 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (>=\
    \ day 1)\n       (<= day 31))\n      ((or (= month 4) (= month 6) (= month 9)\
    \ (= month 11))\n       (>= day 1)\n       (<= day 30))\n      ((= month 2)\n\
    \       (>= day 1)\n       (<= day 29))))\n  (define (is-valid-date? date)\n \
    \   (and (is-date-format? date)\n         (is-valid-day (string->number (get-date-part\
    \ date 0)))\n         (is-valid-month (string->number (get-date-part date 1)))\n\
    \         (is-valid-year (string->number (get-date-part date 2)))\n         (is-valid-day-in-month?\
    \ (string->number (get-date-part date 0)) (string->number (get-date-part date\
    \ 1)))))\n  (if (is-valid-date? date) #t #f))\n", "  (and (andmap char-numeric?\
    \ (string->list date))\n       (or (= (substring date 2 3) #\\-))\n       (or\
    \ (= (substring date 5 6) #\\-))\n       (and (<= (substring date 0 2) \"12\"\
    ) (>= (substring date 0 2) \"01\"))\n       (and (<= (substring date 3 5) \"31\"\
    ) (>= (substring date 3 5) \"01\"))\n       (and (<= (substring date 6 10) \"\
    9999\") (>= (substring date 6 10) \"0001\"))))\n", "  (cond\n    [(empty? date)\
    \ #f]\n    [(and (regexp-match #rx\"^\\d{2}-\\d{2}-\\d{4}$\" date) (valid-date-format\
    \ date)) #t]\n    [else #f]))\n", "  (define (days_in_month month)\n    (cond\n\
    \      [(member month '(1 3 5 7 8 10 12)) 31]\n      [(member month '(4 6 9 11))\
    \ 30]\n      [(= month 2) 29]))\n  (define (valid_day month day)\n    (and (>=\
    \ day 1) (<= day (days_in_month month))))\n  (define (valid_month month)\n   \
    \ (and (>= month 1) (<= month 12)))\n  (define (valid_year year)\n    (>= year\
    \ 1))\n  (define (valid_format str)\n    (string-match \"^[0-9]+-[0-9]+-[0-9]+$\"\
    \ str))\n  (define (split str sep)\n    (let loop ([lst (string-split str sep)]\
    \ [count 0] [result '()])\n      (cond\n        [(zero? count) (loop (cdr lst)\
    \ (+ count 1) (cons (string->number (car lst)) result))]\n        [(= count 1)\
    \ (loop (cdr lst) (+ count 1) (cons (string->number (car lst)) result))]\n   \
    \     [(= count 2) (cons (string->number (car lst)) result)])))\n  (define (date_lst\
    \ str)\n    (split str \"-\"))\n  (define (valid_date_helper date)\n    (let-values\
    \ ([(month day year) (date_lst date)])\n      (and (valid_day month day) (valid_month\
    \ month) (valid_year year) (valid_format date))))\n  (valid_date_helper date))\n",
  "  (if (not (regexp-match #rx\"^([0][1-9]|[1][0-2])\\-([0][1-9]|[1-2][0-9]|[3][0-1])\\\
    -([1-2][0-9][0-9][0-9])$\" date))\n      #f\n      (let* ([date-list (string-&gt;list\
    \ date)]\n             [month-list (list-ref date-list 0)]\n             [day-list\
    \ (list-ref date-list 3)]\n             [year-list (list-ref date-list 6)])\n\
    \        (if (or (or (not (eq? #\\- (list-ref date-list 1))) (not (eq? #\\- (list-ref\
    \ date-list 4))))\n                (or (not (eq? #\\- (list-ref date-list 1)))\
    \ (not (eq? #\\- (list-ref date-list 4))))\n                (or (not (eq? #\\\
    - (list-ref date-list 1))) (not (eq? #\\- (list-ref date-list 4)))))\n       \
    \     #f\n            (let* ([month (string-&gt;number (list-&gt;string month-list))]\n\
    \                   [day (string-&gt;number (list-&gt;string day-list))]\n   \
    \                [year (string-&gt;number (list-&gt;string year-list))])\n   \
    \           (cond\n                [(= month 1) (and (= day 31) (= year 2020))]\n\
    \                [(= month 3) (and (= day 31) (= year 2020))]\n              \
    \  [(= month 5) (and (= day 31) (= year 2020))]\n                [(= month 7)\
    \ (and (= day 31) (= year 2020))]\n                [(= month 8) (and (= day 31)\
    \ (= year 2020))]\n                [(= month 10) (and (= day 31) (= year 2020))]\n\
    \                [(= month 12) (and (= day 31) (= year 2020))]\n             \
    \   [(= month 4) (and (= day 30) (= year 2020))]\n                [(= month 6)\
    \ (and (= day 30) (= year 2020))]\n                [(= month 9) (and (=", "  (define\
    \ (valid-days date)\n    (define (get-month date)\n      (string->number (substring\
    \ date 0 2)))\n    (define (get-day date)\n      (string->number (substring date\
    \ 3 5)))\n    (define (get-year date)\n      (string->number (substring date 6\
    \ 10)))\n    (define (valid-day month day)\n      (case month\n        [1 (and\
    \ (>= day 1) (<= day 31))]\n        [2 (and (>= day 1) (<= day 29))]\n       \
    \ [3 (and (>= day 1) (<= day 31))]\n        [4 (and (>= day 1) (<= day 30))]\n\
    \        [5 (and (>= day 1) (<= day 31))]\n        [6 (and (>= day 1) (<= day\
    \ 30))]\n        [7 (and (>= day 1) (<= day 31))]\n        [8 (and (>= day 1)\
    \ (<= day 31))]\n        [9 (and (>= day 1) (<= day 30))]\n        [10 (and (>=\
    \ day 1) (<= day 31))]\n        [11 (and (>= day 1) (<= day 30))]\n        [12\
    \ (and (>= day 1) (<= day 31))]\n        [else #f]))\n    (valid-day (get-month\
    \ date) (get-day date)))\n  (and (valid-days date)\n       (not (empty? date))\n\
    \       (string-length date)\n       (= (string-length date) 10)\n       (and\
    \ (= (char-ci=? (string-ref date 2) #\\- ) #t)\n            (= (char-ci=? (string-ref\
    \ date 5) #\\- ) #t))))\n", "  (cond [(not (list? date)) false]\n        [(= (length\
    \ date) 3) (and (valid-month (first date))\n                                 \
    \ (valid-day (first date) (second date))\n                                  (valid-year\
    \ (third date)))]\n        [else false]))\n", "  (or (= 0 (string-length date))\n\
    \      (= 8 (string-length date))\n      (= 9 (string-length date))\n      (=\
    \ 10 (string-length date))))\n", "  (define (invalid-month month) (not (or (=\
    \ month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month\
    \ 12))))\n  (define (invalid-day month day)\n    (cond ((and (= month 2) (< day\
    \ 1) (> day 29)) #t)\n          ((and (invalid-month month) (< day 1) (> day 31))\
    \ #t)\n          ((and (not (invalid-month month)) (< day 1) (> day 30)) #t)\n\
    \          (else #f)))\n  (define (invalid-year year) (not (= (string-length year)\
    \ 4)))\n  (define (valid-month month)\n    (define (invalid-char char) (not (or\
    \ (char=? char #\\0) (char=? char #\\1) (char=? char #\\2) (char=? char #\\3)\
    \ (char=? char #\\4) (char=? char #\\5) (char=? char #\\6) (char=? char #\\7)\
    \ (char=? char #\\8) (char=? char #\\9))))\n    (cond ((empty? month) #f)\n  \
    \        ((invalid-char (string-ref month 0)) #f)\n          ((invalid-char (string-ref\
    \ month 1)) #f)\n          (else (= (string->number month) (string-length month)))))\n\
    \  (define (valid-day day)\n    (define (invalid-char char) (not (or (char=? char\
    \ #\\0) (char=? char #\\1) (char=? char #\\2) (char=? char #\\3) (char=? char\
    \ #\\4) (char=? char #\\5) (char=? char #\\6) (char=? char #\\7) (char=? char\
    \ #\\8) (char=? char #\\9))))\n    (cond ((empty? day) #f)\n          ((invalid-char\
    \ (string-ref day 0)) #f)\n          ((invalid-char (string-ref day 1)) #f)\n\
    \          (else (= (string->number day) (string-length day)))))\n  (", "  (cond\
    \ [(empty? date) #f]\n        [(regexp-match? #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)\n         (let* ([elements (string-split date #\\-)]\n               \
    \ [month (string->number (vector-ref elements 0))]\n                [day (string->number\
    \ (vector-ref elements 1))]\n                [year (string->number (vector-ref\
    \ elements 2))])\n           (cond [(and (= month 1)\n                       (=\
    \ month 3)\n                       (= month 5)\n                       (= month\
    \ 7)\n                       (= month 8)\n                       (= month 10)\n\
    \                       (= month 12))\n                  (<= 1 day 31)]\n    \
    \             [(and (= month 4)\n                       (= month 6)\n        \
    \               (= month 9)\n                       (= month 11))\n          \
    \        (<= 1 day 30)]\n                 [(= month 2)\n                  (<=\
    \ 1 day 29)]\n                 [else #f]))]\n        [else #f]))\n", "  (define\
    \ (days-in-month-cond month)\n    (cond\n      [(or (= month 1) (= month 3) (=\
    \ month 5) (= month 7) (= month 8) (= month 10) (= month 12)) (= (string->number\
    \ (string-ref date 4) #:radix 10) 31)]\n      [(or (= month 4) (= month 6) (=\
    \ month 9) (= month 11)) (= (string->number (string-ref date 4) #:radix 10) 30)]\n\
    \      [(= month 2) (= (string->number (string-ref date 4) #:radix 10) 29)]))\n\
    \  (cond\n    [(or (= date \"\") (= date \" \")) false]\n    [(and (= (string-length\
    \ date) 10)\n          (= (string-ref date 2) #\\-))\n     (cond\n       [(and\
    \ (= (string->number (string-ref date 3) #:radix 10) 1)\n             (= (string->number\
    \ (string-ref date 0) #:radix 10) 0)\n             (= (string->number (string-ref\
    \ date 1) #:radix 10) 0))\n        (days-in-month-cond 1)]\n       [(and (= (string->number\
    \ (string-ref date 3) #:radix 10) 2)\n             (= (string->number (string-ref\
    \ date 0) #:radix 10) 0)\n             (= (string->number (string-ref date 1)\
    \ #:radix 10) 0))\n        (days-in-month-cond 2)]\n       [(and (= (string->number\
    \ (string-ref date 3) #:radix 10) 3)\n             (= (string->number (string-ref\
    \ date 0) #:radix 10) 0)\n             (= (string->number (string-ref date 1)\
    \ #:radix 10) 0))\n        (days-in-month-cond 3)]\n       [(and (= (string->number\
    \ (string-ref date 3) #:radix 10) 4)\n             (= (string->number (string-ref\
    \ date 0) #:radix 10) 0)\n             (= (string->number (string-ref date 1)\
    \ #:radix 10) 0))\n        (days-in-month-cond 4)]\n       [(and (=", "  (or (or\
    \ (equal? (regexp-match #rx\"^(?:(?:(?:(?:0?[13578]|1[02])(\\/|-|\\.)31)\\1|(?:(?:0?[1,3-9]|1[0-2])(\\\
    /|-|\\.)(?:29|30)\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2}))\" date) #f)\n          (equal?\
    \ (regexp-match #rx\"^(?:(?:(?:0?[1-9]|1[0-2])(\\/|-|\\.)(?:0?[1-9]|1\\d|2[0-8]))\\\
    1|(?:(?:0?[13-9]|1[0-2])(\\/|-|\\.)(?:29|30)\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})\"\
    \ date) #f)\n          (equal? (regexp-match #rx\"^(?:0?2(\\/|-|\\.)29\\3(?:(?:(?:1[6-9]|[2-9]\\\
    d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))(?:(?:1[6-9]|[2-9]\\\
    d)?\\d{2})\" date) #f))\n      (and (equal? (regexp-match #rx\"^(0?[1-9]|1[012])[-\
    \ /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$\" date) #f)\n           (equal?\
    \ (regexp-match #rx\"^([0-9]{2})[- /.]([0-9]{2})[- /.]([0-9]{4})$\" date) #f))))\n\
    \n\n\n", "  (cond ((empty? date) #f)\n        ((< (string->number (list-ref (string-split\
    \ date \"-\") 1)) 1) #f)\n        ((> (string->number (list-ref (string-split\
    \ date \"-\") 1)) 31) #f)\n        ((< (string->number (list-ref (string-split\
    \ date \"-\") 0)) 1) #f)\n        ((> (string->number (list-ref (string-split\
    \ date \"-\") 0)) 12) #f)\n        ((< (string->number (list-ref (string-split\
    \ date \"-\") 2)) 0) #f)\n        ((> (string->number (list-ref (string-split\
    \ date \"-\") 2)) 9999) #f)\n        ((< (string-length date) 10) #f)\n      \
    \  (else #t)))\n", "  (define (valid_date-helper date)\n    (match date\n    \
    \  ['() true]\n      [(cons mm (cons dd (cons yyyy '())))\n       (and (and (>=\
    \ mm 1) (<= mm 12))\n            (if (or (= mm 1) (= mm 3) (= mm 5) (= mm 7) (=\
    \ mm 8) (= mm 10) (= mm 12))\n                (and (>= dd 1) (<= dd 31))\n   \
    \             (if (or (= mm 4) (= mm 6) (= mm 9) (= mm 11))\n                \
    \    (and (>= dd 1) (<= dd 30))\n                    (if (= mm 2)\n          \
    \              (and (>= dd 1) (<= dd 29))\n                        false))))]\n\
    \      [else false]))\n  (if (valid_date-helper (string->list date))\n      true\n\
    \      false))\n", "  (define (less-than-29? x)\n    (and (number? x) (<= 1 x\
    \ 29)))\n  (define (less-than-30? x)\n    (and (number? x) (<= 1 x 30)))\n  (define\
    \ (less-than-31? x)\n    (and (number? x) (<= 1 x 31)))\n  (define (between-1-12?\
    \ x)\n    (and (number? x) (<= 1 x 12)))\n  (define (in-format? date)\n    (and\
    \ (string? date)\n         (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)))\n  (define (separate-date date)\n    (cond\n      ((in-format? date)\
    \ (map string->number (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)))\n      (else '())))\n  (define (get-month date)\n    (cond\n      ((in-format?\
    \ date) (list-ref (separate-date date) 0))\n      (else '())))\n  (define (get-day\
    \ date)\n    (cond\n      ((in-format? date) (list-ref (separate-date date) 1))\n\
    \      (else '())))\n  (and (not (null? date))\n       (cond\n         ((between-1-12?\
    \ (get-month date))\n          (cond\n            ((= 1 (get-month date)) (less-than-31?\
    \ (get-day date)))\n            ((= 3 (get-month date)) (less-than-31? (get-day\
    \ date)))\n            ((= 5 (get-month date)) (less-than-31? (get-day date)))\n\
    \            ((= 7 (get-month date)) (less-than-31? (get-day date)))\n       \
    \     ((= 8 (get-month date)) (less-than-31? (get-day date)))\n            ((=\
    \ 10 (get-month date)) (less-than-31? (get-day", "  (let ([m (string->number (substring\
    \ date 0 2))]\n        [d (string->number (substring date 3 5))]\n        [y (string->number\
    \ (substring date 6 10))])\n    (and (> y 0)\n         (> m 0)\n         (> d\
    \ 0)\n         (cond [(member m '(1 3 5 7 8 10 12))\n                (<= d 31)]\n\
    \               [(member m '(4 6 9 11))\n                (<= d 30)]\n        \
    \       [(= m 2)\n                (<= d 29)]\n               [else\n         \
    \       #f])\n         (= (length date) 10)\n         (char=? (string-ref date\
    \ 2) #\\- )\n         (char=? (string-ref date 5) #\\- ))))\n", "  (define (valid-day\
    \ day)\n    (cond\n      ((or (equal? day \"\") (= day #f)) #f)\n      ((<= 0\
    \ day 31) #t)\n      (else #f)))\n  (define (valid-month month)\n    (cond\n \
    \     ((or (equal? month \"\") (= month #f)) #f)\n      ((<= 0 month 12) #t)\n\
    \      (else #f)))\n  (define (valid-year year)\n    (cond\n      ((or (equal?\
    \ year \"\") (= year #f)) #f)\n      ((<= 0 year 9999) #t)\n      (else #f)))\n\
    \  (cond\n    ((string-length date) 10)\n    (else #f)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
