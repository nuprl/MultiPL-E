language: lua
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   local b_sqr\
    \ = b * b\n   local c_sqr = c * c\n   local ab_squr = a * b_sqr\n   local ac_squr\
    \ = a * c_sqr\n   local cd_sqr = (c * d)\n   return b_sqr + c_sqr + ab_sqr + ac_sqr\
    \ + cd_sqr + b_sqr - c_sqr + ab_sqr + ac_sqr < 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgwd_utl.lua:15:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpzgwd_utl.lua:15: in local 'candidate'\n\t/tmp/tmpzgwd_utl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal AB =\
    \ c - b\n\tlocal AC = a - c\n\tlocal nABAB = AB * AB\n\tlocal nACAC = AC * AC\n\
    \tlocal nBCBC = b * b - c * c\n\tlocal nABBA = AB * BA\n\tlocal nBACA = BA * AC\n\
    \tlocal nACAB = AC * AB\n\t\n\treturn (nABAB + nACAC - nBCBC - nABBA - nACAB +\
    \ nBACA + nABBA - nBACA) > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ira7ai2.lua:16:\
    \ attempt to perform arithmetic on a nil value (global 'BA')\nstack traceback:\n\
    \t/tmp/tmp9ira7ai2.lua:16: in local 'candidate'\n\t/tmp/tmp9ira7ai2.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn (b^2)\
    \ + (c^2) - (a^2) <= 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5psy0sz.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl5psy0sz.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   -- Check whether\
    \ a,b,c forms a right-angled triangle \n   if b * c < a * c then\n      local\
    \ d = 0\n      local e = b\n      local f = c\n      while a >= f do\n       \
    \  d = d + 1 \n         e = e - 1\n         f = f + 1\n      end\n      return\
    \ d % 2 == 0 and a == b or a == c\n   else\n      return false\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnfv5hro.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjnfv5hro.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal da =\
    \ math.abs(a - b)\n\tlocal dc = math.abs(c - a)\n\tlocal dab = math.abs(b - a)\n\
    \tif da == dc then\n\t\treturn dab == 0 or dab == math.pi/2\n\telse\n\t\treturn\
    \ da > dc and dc > da\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzascdrvc.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzascdrvc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local is_right_angled\
    \ = false\n    if math.abs(b - a) > math.abs(c - b) then\n        if math.abs(b\
    \ - a) < math.abs(c - b) then\n            if a > b then\n                is_right_angled\
    \ = true\n            elseif a < b then\n                is_right_angled = false\n\
    \            elseif a == c then\n                is_right_angled = true\n    \
    \        end\n        elseif a > c then\n            is_right_angled = true\n\
    \        elseif a < c then\n            is_right_angled = false\n        end\n\
    \    end\n    return is_right_angled\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpraeuluso.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpraeuluso.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn ((b\
    \ - c) ^ 2) < ((a * b) - (c * a))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4uz0du3.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe4uz0du3.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal s = (a*a\
    \ + b*b + c*c) / (a*a + b*b)\n\tlocal p = (b*b - a*c) / (b*b)\n\treturn (s + 1)\
    \ / 2 >= 0 and (s + 1) / 2 <= 1 and\n\t   p >= 0 and p <= 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxx8cyzgr.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxx8cyzgr.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  -- Return false\
    \ if a or b or c is 0.\n  if a == 0 or b == 0 or c == 0 then\n    return false\n\
    \  end\n  -- If a + b > c, return false \n  if a + b > c then\n    return false\n\
    \  end\n  -- If a + c > b, return false\n  if a + c > b then\n    return false\n\
    \  end\n  -- If b + c > a, return false\n  if b + c > a then\n    return false\n\
    \  end\n  -- Return true\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3qp0t5j.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg3qp0t5j.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- If the triangles\
    \ are already not right angled then they do not form \n\t-- a right angle triangle.\
    \ \n\tif not (a <= b and b <= c and c <= a) then return false end\n\t-- Formula\
    \ for hypotenuse is sqrt(a^2 + b^2 + c^2)\n\t-- Solve for the hypotenuse using\
    \ the formula \n\t-- (Hypotenuse = sqrt(a^2 + b^2))^2 = b^2 + c^2\n\tlocal h =\
    \ math.pow(math.pow(b, 2) + math.pow(c, 2), 0.5)\n\treturn h == b + c\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsknpqo13.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsknpqo13.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tif b == c then\n\
    \t\treturn false\n\tend\n\tif a + b + c <= 0 or a + c <= 0 or b + c <= 0 then\n\
    \t\treturn false\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsdtc4jid.lua:34: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  if a >= 0 and\
    \ b >= 0 and c >= 0 then\n    -- Check base cases\n    local is_right_angled =\
    \ b * b - 4 * a * c\n    if math.abs(a) < math.abs(b) and math.abs(a) < math.abs(c)\
    \ and is_right_angled > 0 then\n      return true\n    end\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzu_vfcws.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzu_vfcws.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Check validity\
    \ of inputs\n\tassert(a ~= nil and b ~= nil and c ~= nil)\n\t-- Check if all three\
    \ sides are valid\n\tlocal sides = a, b, c\n\tassert(#sides == 3)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp63fl_86.lua:33: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local sign\n\
    \  if ((b == 0) or (c == 0)) then return false end\n  -- Check which side is the\
    \ shortest.\n  sign = b/a\n  if (((b/c)%1) ~= 0) then sign = -sign end\n  -- See\
    \ which side is longer.\n  local length = (a^2 + b^2)^(1/2)\n  if ((length < b^2)\
    \ or (length > c^2)) then return false end\n  -- Check which side is the longer.\n\
    \  if ((length < a^2) or (length > c^2)) then return false end\n  -- If we got\
    \ this far we can conclude that both sides are equal.\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxm0l_j2o.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxm0l_j2o.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\ta = math.abs(a)\n\
    \tb = math.abs(b)\n\tc = math.abs(c)\n\tif a + b > c then return false end\n\t\
    if b + c > a then return false end\n\tif a + c > b then return false end\n\treturn\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksvt6_h_.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpksvt6_h_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return (b ==\
    \ c and ((a>=b) and (a<=c) or (a==b and a>=c))) \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp124zrl_2.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp124zrl_2.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   local s =\
    \ (a*a + b*b + c*c - a*a*b - a*a*c - b*b*c)/(2*b*c)\n   return s >= 0 and (s %\
    \ 90) == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrjgw4ef.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcrjgw4ef.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal a_x,\
    \ a_y, a_z = a:getN()\n\tlocal b_x, b_y, b_z = b:getN()\n\tlocal c_x, c_y, c_z\
    \ = c:getN()\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo610l3a5.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    if a > c\
    \ then\n        a, c = c, a\n    end\n    return ((b - a) * (c - b) > 0)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpec4rcydy.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpec4rcydy.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    return (math.fmod(a,b)\
    \ == 0 and math.fmod(b,c) == 0 and math.fmod(c,b) == 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2qq1tir.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt2qq1tir.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return math.abs(b\
    \ - c) == math.abs(a - b) \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ewale00.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1ewale00.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    if b < a\
    \ then\n        return false\n    end\n    if c < a then\n        return false\n\
    \    end\n    if b > c then\n        return false\n    end\n    if c > b then\n\
    \        return false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwn7wuteu.lua:40: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  if abs(a) +\
    \ abs(b) + abs(c) > 180 then return false end\n  return ((a > b) and (b > c) and\
    \ (c > 0)) or ((a > c) and (b > c) and (c > 0)) or\n    ((a = 90) and (b = 90)\
    \ and (c > 0)) or ((a > c) and (b > c) and (a > 0)) or\n    ((a = 90) and (b >\
    \ c) and (c > 0)) or ((a > c) and (b > c) and (a > 0)) or\n    ((a = 90) and (c\
    \ > b) and (c > 0)) or ((a > c) and (b > c) and (a > 0)) or\n    ((a = 90) and\
    \ (c > b) and (a > 0)) or ((a > c) and (b > c) and (a > 0)) or\n    ((b = 90)\
    \ and (c = 90) and (c > 0)) or ((a > c) and (b > c) and (a > 0)) or\n    ((b =\
    \ 90) and (c = 90) and (a > 0)) or ((a > c) and (b > c) and (a > 0)) or\n    ((c\
    \ = 90) and (b = 90) and (a > 0)) or ((a > c) and (b > c) and (a > 0)) or\n  \
    \  ((c = 90) and (b = 90) and (a > 0)) or ((a > c) and (b > c) and (a > 0)) \n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7xcafnqk.lua:13: '')'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal side1,\
    \ side2, side3 = a, b, c\n\tif side2 > side1 + side3 then\n\t\tside3, side2, side1\
    \ = side1, side2, side3\n\tend\n\tif side1 == side2 then\n\t\treturn side1 ==\
    \ side3\n\telseif side1 == side3 then\n\t\treturn side2 <= 180 and side3 <= 180\n\
    \telseif side2 == side3 then\n\t\treturn side1 <= 180 and side3 <= 180\n\telseif\
    \ side1 <= side3 then\n\t\treturn side1 <= side2 and side2 <= 180\n\tend\n\treturn\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gqgm0r5.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1gqgm0r5.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn b -\
    \ a*(c-a)/c >= 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p49u92m.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9p49u92m.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return (b <=\
    \ c) or (abs(b - c) <= math.pi/2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6j_er43t.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6j_er43t.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   return ((b\
    \ - a) * (c - a) == 0 and\n          (b + c) * (a + b) == 0 )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjsccl7d3.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjsccl7d3.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Check triangle\
    \ is valid\n\tif not (a > 0 and b > 0 and c > 0) then\n\t\treturn false\n\tend\n\
    \t-- Check triangle is right angle\n\tif a > b and b > c then\n\t\treturn true\n\
    \tend\n\t-- Check triangle is right angle\n\tif a == b or a == c or b == c then\n\
    \t\treturn false\n\tend\n\t-- Check triangle is 90 degree\n\tlocal ab = a - b\n\
    \tlocal bc = b - c\n\tlocal ad = a - d\n\tlocal cd = c - d\n\tlocal ac = a + c\
    \ - ab * cd\n\tif ab * ac > 0 and ac > 0 and bc > 0 and bd > 0 then\n\t\treturn\
    \ true\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf9eskl7j.lua:26:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpf9eskl7j.lua:26: in local 'candidate'\n\t/tmp/tmpf9eskl7j.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    return (\
    \ math.abs( a - c ) <= math.abs(b - c) )\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8xsudiwg.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8xsudiwg.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn (a +\
    \ b > c and b + c > a and c + a > b)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7agabs9.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy7agabs9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Return true\
    \ if the triangle is right-angled, false otherwise.\n\t-- A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n\t-- 90 degree.\n\t-- Example:\n\
    \t-- >>> right_angle_triangle(3, 4, 5)\n\t-- true\n\t-- >>> right_angle_triangle(1,\
    \ 2, 3)\n\t-- false\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe8wj4b4m.lua:36: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local b1\
    \ = b - a \n    local c1 = c - a \n    local b2 = b - c\n    local c2 = c - c\n\
    \    return b1 + c1 > b2 + c2 \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvz86hlc.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprvz86hlc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  return ab == bc or ab == 90\
    \ or\n         bc == 180 or\n         ab == bc\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphoin8r64.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphoin8r64.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn ((a*b\
    \ + c*b + a*c + c*c + a)*(a*a + b*b + c*c + a*b + b*c + c*a) >= 4)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaieokrfg.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpaieokrfg.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    return ((b\
    \ - a) * (c - b) <= 0) and (\n          (a - b) * (c - b) >= 0 or\n          (a\
    \ - b) * (c - b) <= (a - b) * (b - c)\n      )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoztckygb.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoztckygb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn (b -\
    \ a) * (c - a) >= 0 and (b - c) * (a - c) >= 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyxq9l_x.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzyxq9l_x.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local n1,\
    \ n2, n3 = b - a, c - b, a + b + c\n    return (n1 > 0 and n2 > 0 and n3 > 0 and\
    \ n1 + n2 > 0 and n1 + n3 > 0 and n2 + n3 > 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0eqf4q0.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj0eqf4q0.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   -- Base cases.\n\
    \   if a == 0 and b == 0 and c == 0\n   then return true\n   end\n   if a == 0\n\
    \   then return false\n   end\n   if b == 0\n   then return false\n   end\n  \
    \ if c == 0 \n   then return false\n   end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfg00108i.lua:41: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Base cases\n\
    \tif b == 0 then return false end\n\tif c == 0 then return false end\n\tif a ==\
    \ 0 then return false end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5yaqzjs2.lua:32: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local d1,\
    \ d2, d3 = (b - c) ^ 2, (b - c) ^ 3, (a - b) ^ 2\n    return ((d2 <= 0 and d3\
    \ <= 0 and d1 <= 0) or\n        (d2 <= 0 and d3 >= 0 and d1 >= 0) or\n       \
    \ (d1 <= 0 and d2 <= 0 and d3 >= 0))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgudp7o05.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgudp7o05.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local ra\
    \ = math.sqrt( math.pow( (b - c), 2 ) + math.pow(a, 2))\n    local rb = math.sqrt(\
    \ math.pow( (b - a), 2 ) + math.pow(c, 2))\n    local rc = math.sqrt( math.pow(\
    \ (b - a), 2 ) + math.pow(b, 2))\n    return ((ra >= rb) and (ra >= rc) and (ra\
    \ >= rc + 0.01))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpch7hpai0.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpch7hpai0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    return (a+b>c\
    \ and a>b) or (a+b<c and a>c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe31msotn.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe31msotn.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn (a +\
    \ b > c) and (a + c > b) and (a + c > b)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjyue0on.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgjyue0on.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local a1\
    \ = math.abs(b - a)\n    local b1 = math.abs(c - b)\n    local c1 = math.abs(c\
    \ - a)\n    return a1 == b1 and a1 == c1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdexj2b_8.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdexj2b_8.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local d = b\
    \ - a\n  local e = c - b\n  local s = math.sqrt(d ^ 2 + e ^ 2)\n  -- The formula\
    \ for the length of an angled triangle is \n  -- (a + b + c) / 2 = (a^2 + b^2\
    \ + c^2) / 2 = sqrt((a + b)^2 - (b + c)^2)\n  return ((s * s) - (e * d)) / (2\
    \ * (s + e))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm534wzz1.lua:22:\
    \ expected: true, actual: 0.20710678118655\nstack traceback:\n\t/tmp/tmpm534wzz1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n  local abc = math.pow(ab, 2) + math.pow(bc, 2)\n  return\
    \ abc / (math.pow(a, 2) + math.pow(b, c))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbt12i4d6.lua:20:\
    \ expected: true, actual: 0.063891577928364\nstack traceback:\n\t/tmp/tmpbt12i4d6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return (a*b*c)\
    \ ~= (a*c*b) and (a*c*b) ~= (b*a*c) and (b*a*c) ~= (c*b*a) and (c*b*a) ~= (a*b*c)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug6tsruz.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpug6tsruz.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local d\n\
    \    local e = math.sqrt((c*c - b*b)/2)\n    if b * e < c * d then return false\
    \ end\n    local f = 0\n    if b > c then\n        f = b\n    else f = c\n   \
    \ end\n    d = (c - f) / e\n    if f + d > b then return false end\n    if f >\
    \ c then\n        d = c\n    else d = b\n    end\n    if f - d > b then return\
    \ false end\n    if math.atan2(d - b, c - f) < 0 then return false end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ovf6nu4.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'd')\nstack traceback:\n\
    \t/tmp/tmp3ovf6nu4.lua:13: in local 'candidate'\n\t/tmp/tmp3ovf6nu4.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local a_length\
    \ = calculate_length(a)\n    local b_length = calculate_length(b)\n    local c_length\
    \ = calculate_length(c)\n    return a_length == b_length and b_length == c_length\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq4ui13_l.lua:11:\
    \ attempt to call a nil value (global 'calculate_length')\nstack traceback:\n\t\
    /tmp/tmpq4ui13_l.lua:11: in local 'candidate'\n\t/tmp/tmpq4ui13_l.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal da =\
    \ math.abs(b - a) / 2;\n\tlocal dc = math.abs(c - a) / 2;\n\tlocal ba = b - a;\
    \ \n\tlocal bc = c - a;\n\treturn (ba + bc) > da and ((bc + da) > (ba + bc));\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhl20eq8.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuhl20eq8.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local bc,\
    \ ac = math.abs(b-c), math.abs(a-c)\n    local ab, bc = math.abs(a), math.abs(b)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw5ehgynp.lua:30: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return math.abs(math.atan2((c\
    \ - (b - a)) / math.sqrt((b - a) ^ 2), (b - a)) < math.pi / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp723he04a.lua:11:\
    \ bad argument #1 to 'abs' (number expected, got boolean)\nstack traceback:\n\t\
    /tmp/tmp723he04a.lua:11: in local 'candidate'\n\t/tmp/tmp723he04a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    return (c-a)\
    \ * (c-b) * (a-b) < 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbm1vxxmv.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbm1vxxmv.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal a, b,\
    \ c = math.abs(a), math.abs(b), math.abs(c)\n\tlocal ab, bc, ac, ba\n\tif a <\
    \ b and b < c then ab = bc else ab = ac\n\tif a < c then ac = c else ba = a\n\t\
    if ab - bc < ac - ba then return b == c or ba == ab or bc <= ab or ba == ac\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp54gn89kh.lua:35: ''end'' expected (to close ''if'' at line
    13) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  -- See if it's\
    \ a right angled triangle\n  return (c-a) > (b-a) and (c-b) > (a-b) and (c-a)\
    \ == (b-a) and (c-b) == (a-b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbqlz_04.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdbqlz_04.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    if abs(a\
    \ - b) < abs(a - c) then\n        if abs(b - c) < abs(a - b) then\n          \
    \  return false\n        else\n            return true\n        end\n    elseif\
    \ abs(b - c) < abs(b - a) then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt8pnxcrs.lua:11:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpt8pnxcrs.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpt8pnxcrs.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local abx =\
    \ math.abs(b - a)\n  local bcx = math.abs(c - b)\n  if abx == bcx then return\
    \ true else return false end\n  if abx <= bcx then\n    local aby = math.abs(b\
    \ - c)\n    if aby <= abx then return true else return false end\n  else\n   \
    \ local bcy = math.abs(c - a)\n    if bcy <= abx then return true else return\
    \ false end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzo1ebf3.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkzo1ebf3.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local p = (a\
    \ + b + c) / 2\n  return math.abs(p*(p - a)*(p-b)*(p-c))^(1/3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0b3lfs9r.lua:18:\
    \ expected: true, actual: 3.3019272488946\nstack traceback:\n\t/tmp/tmp0b3lfs9r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal a1 =\
    \ math.abs(a); local b1 = math.abs(b);\n\tlocal c1 = math.abs(c);\n\treturn (a1+b1+c1)==(a1*b1+c1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj935pku_.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj935pku_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn ((a\
    \ + b > c) and (a + c > b) and (a + b > c))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjo6dvsdk.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjo6dvsdk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return b -\
    \ a == c or c < b and b < a \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3br_6vg.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz3br_6vg.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    return (\
    \ b + c  >= a + c ) and ( c >= b + a )\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rfdb5y6.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1rfdb5y6.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ad =\
    \ abs(a^2 + b^2)\n\tlocal bd = abs(b^2 + c^2)\n\tlocal cd = abs(c^2 + a^2)\n\t\
    return (ad + bd) * (ad + cd) > (bd + cd) * (bd + ad)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwv3zjh6n.lua:11:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpwv3zjh6n.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpwv3zjh6n.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   return (b\
    \ > 0 and c > 0 and\n      (a+b>c) or (b+c>a) or (a+c>b))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvjwpf9x.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkvjwpf9x.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal sides\
    \ = math.abs(a) + math.abs(b) + math.abs(c)\n\treturn sides == math.abs(a + b\
    \ + c) -- or sides == math.sqrt(sides) \nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjuy8wde.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqjuy8wde.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn (-b\
    \ + math.sqrt((a * b) - (c * a)))\n\t\t- (math.fabs(a * c) - (b * b)) >= 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpccf14fi3.lua:12:\
    \ attempt to call a nil value (field 'fabs')\nstack traceback:\n\t/tmp/tmpccf14fi3.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpccf14fi3.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  if b < a then\n\
    \ta = b\n\tb = c\n\tc = a\n  end\n  if c <= a or c <= b then return false end\n\
    \  if a + b > c then return false end\n  if a + c > b then return false end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpankjebep.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpankjebep.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   local b2 =\
    \ b * b\n   local c2 = c * c\n   local det = b2 * (b2 - c2) + 4 * (a * b * c2\
    \ - c * a2)\n   return det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaqw64o9g.lua:13:\
    \ attempt to perform arithmetic on a nil value (global 'a2')\nstack traceback:\n\
    \t/tmp/tmpaqw64o9g.lua:13: in local 'candidate'\n\t/tmp/tmpaqw64o9g.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local a,\
    \ b, c = tonumber(a), tonumber(b), tonumber(c)\n    if a == b then\n        return\
    \ false\n    end\n    if a == c then\n        return true\n    end\n    if b ==\
    \ c then\n        return true\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp5ebcdfh.lua:38: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal d = b\
    \ * b - 4 * a * c\n\tif d < 0 then return false end\n\tlocal x = 0\n\tlocal y\
    \ = b * b - a * a * c\n\tlocal z = 0\n\tif d > 0 then\n\t\tx = -c / d\n\t\ty =\
    \ z / d\n\tend\n\tif x ** 2 + y ** 2 = z ** 2 then return true end\n\treturn false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw8cszig8.lua:20: unexpected symbol near ''*''

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal side1\
    \ = b * b - a * c\n\tlocal side2 = c * c - a * b\n\treturn side1 == side2 or side1\
    \ == 0 or side2 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhxhj8kk.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfhxhj8kk.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  -- The equation\
    \ of right-angle triangle\n  -- x^2 + y^2 + z^2 = 1\n  local x, y = {a, b}\n \
    \ local z = c\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw6ld84ug.lua:32: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn (((math.acos((b\
    \ * b - c * c + a * a) / (b * b + c * c)) * 180 / math.pi) < 45)\n\t   or  (math.acos((a\
    \ * a * c - b * b + c * c) / (a * a + b * b))* 180 / math.pi) > 0)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsqgl8xy.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzsqgl8xy.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   local side1\
    \ = b - a\n   local side2 = c - a\n   local side3 = b - c\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvjwsb1go.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return (b *\
    \ b == c and a * a) or (b * b == c and a == c) or (a * b == c and a == b)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuut0vgbz.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuut0vgbz.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn ((a\
    \ <= b and b <= c) or (a == b and c >= b)) and ((b >= a and b <= c) or (b == a\
    \ and c >= a)) and ((c >= a and c <= b) or (c == a and b >= a))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfjvjz8t8.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfjvjz8t8.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Calculate\
    \ the hypotenuse of right angle triangle side\n\tlocal h = math.sqrt(a^2 + b^2\
    \ + c^2)\n\t-- Check if all sides are 90 degree\n\tif h == 0 then\n\t\treturn\
    \ false\n\tend\n\t-- Check if any three sides are equal\n\tif a == b or b == c\
    \ or c == a then\n\t\treturn false\n\tend\n\t-- Check if hypotenuse is longer\
    \ than the other two sides\n\tif h > a then\n\t\t-- If true, then triangle is\
    \ right angle\n\t\treturn true\n\telse\n\t\t-- If false, it is not\n\t\treturn\
    \ false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2s11tjkx.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2s11tjkx.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Find Euclidean\
    \ distance between two points.\n\tlocal function distance(x1, y1, x2, y2)\n\t\t\
    return (x2 - x1)^2 + (y2 - y1)^2\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3wu3ctra.lua:32: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   return math.fmod(a\
    \ + b + c, 2) == 0 or (math.fmod(a + b + c, 2) == math.sqrt(2) and\n         math.fmod(c\
    \ - a, 2) == math.sqrt(2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmq0ch26.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptmq0ch26.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    if a^2 +\
    \ b^2 = c^2 then\n        -- Special Cases:\n        return a == b or a == c and\
    \ b == c\n    else\n        if b > c then\n            -- b > c\n            return\
    \ false\n        elseif b == c then\n            return b == a\n        else\n\
    \            -- b < c\n            return true\n        end\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuzjai8qt.lua:11: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return (b -\
    \ a) ~= 0 and\n         b + c + a = b + a and\n         b - c + a = b - a and\n\
    \         a - (b + c) >= 0 and\n         a - (b - c) >= 0 and\n         b + (c\
    \ - a) >= 0 and\n         b + (c - a) >= 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpioe6dzkt.lua:12: ''end'' expected (to close ''function'' at
    line 10) near ''=''

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local nab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n  local nac = math.sqrt(math.pow(a,\
    \ 2) + math.pow(c, 2))\n  local nac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \  local det = nab*nac\n  return det > 0 and abs(a - b)*det > 0 and abs(a - c)*det\
    \ > 0 and abs(b - c)*det > 0 \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf35hi4y3.lua:15:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpf35hi4y3.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpf35hi4y3.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local angle_a\
    \ = math.atan2((a-b), (c-b))\n    local angle_b = math.atan2((a-c), (b-a))\n \
    \   local angle_c = math.atan2((c-a), (b-a))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw3wb8ysg.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal a = math.rad(a)\n\
    \tlocal b = math.rad(b)\n\tlocal c = math.rad(c)\n\treturn not ((b > 0 and a +\
    \ b > c) or (c > 0 and a + c > b)) and\n\t\t((b > 0 and a + b > c) or (c > 0 and\
    \ a + c > b)) and\n\t\t(b - a > 0 and b - c > 0 and c - b > 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf01rps2t.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf01rps2t.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tif (a + b >\
    \ c) or (b + c > a) or (c + a > b)\n\tthen\n\t\treturn false\n\tend\n\treturn\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6d7dbfao.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6d7dbfao.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local b1 =\
    \ b - a\n  local c1 = c - a\n  local b2 = b - c\n  local c2 = c - b\n  return\
    \ (((b1 * (b1 * b1) > 0) and\n           (b2 * (b2 * b2) > 0)) and\n         \
    \ ((c1 * (c1 * c1) > 0) and\n           (c2 * (c2 * c2) > 0)) or\n          ((b2\
    \ * (b2 * b2) > 0) and\n           (c1 * (c1 * c1) > 0)) or\n          ((c1 *\
    \ (c1 * c1) > 0) and\n           (b2 * (b2 * b2) > 0)) or\n          ((b2 * (b2\
    \ * b2) > 0) and\n           (c1 * (c1 * c1) > 0) and\n           (b2 * (b2 *\
    \ b2) > 0)) or\n          ((c1 * (c1 * c1) > 0) and\n           (b2 * (b2 * b2)\
    \ > 0) and\n           (c1 * (c1 * c1) > 0))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpatr07ihv.lua:29: '')'' expected (to close ''('' at line 15)
    near ''end''

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    return ((b\
    \ - c) ^ 2) - ((a - b) ^ 2) ^ 0.5 > 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rah9j54.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7rah9j54.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    if b <= 0\
    \ then\n        -- A line with side 0.\n        return false\n    elseif c <=\
    \ 0 then\n        -- A line with side 1.\n        return true\n    elseif b <=\
    \ c then\n        -- One side is a perfect triangle or 180 degree triangle \n\
    \        return (b == c)\n    else\n        -- Compute area of triangle using\
    \ Heron's formula.\n        local s = (-b + math.sqrt((b**2) - (4*a*c))) / (2*a)\n\
    \        return s >= 0 and s <= 1\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptbps01iq.lua:22: unexpected symbol near ''*''

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Check two\
    \ of the three sides first\n\tif a == b and b == c then return true end\n\tif\
    \ a > b and a > c then return false end\n\tif b > a and b > c then return false\
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptwssfkap.lua:32: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tif a <= b then\n\
    \t\treturn false\n\telseif b <= c then\n\t\treturn true\n\telseif b >= c then\n\
    \t\treturn false\n\telseif a + b > c then\n\t\treturn false\n\telse\n\t\tlocal\
    \ ab = b - a\n\t\tlocal ac = c - a\n\t\tlocal bc = (b + c) / 2\n\t\tlocal bc =\
    \ bc - a\n\t\treturn ab >= (ac * bc) \n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp78a3hncd.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp78a3hncd.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local angle_a\
    \ = math.acos((b * b) - (4 * a * c))\n    local angle_b = math.acos((b * b) -\
    \ (2 * a * c))\n    local angle_c = math.acos((a * a) - (2 * a * c))\n    \n \
    \   if (angle_a > math.pi / 2) or (angle_b > math.pi / 2) or (angle_c > math.pi\
    \ / 2) then\n        return false\n    end\n    \n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxt4ie9_.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoxt4ie9_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- The three\
    \ sides of an right angle triangle are\n\t--\t(a) perpendicular to the three edges\
    \ of an equilateral triangle\n\t--\t(b) perpendicular to the three edges of an\
    \ isosceles triangle\n\t--\t(c) perpendicular to the three edges of an scalene\
    \ triangle\n\treturn ((a + b < c) and (c + b < a))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vjgf_1f.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4vjgf_1f.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   local ad =\
    \ math.abs(a - c)\n   local bc = math.abs(b - c)\n   if ad > bc then\n      return\
    \ false\n   else\n      return (math.abs(a - (a + c)) / ad) < 0.1 and (math.abs(b\
    \ - (b + c)) / bc) < 0.1\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4aiwgp_4.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4aiwgp_4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local a1 =\
    \ math.abs(a/b)\n  local b1 = math.abs(b/c)\n  local a2 = math.abs(a/c)\n  return\
    \ (a1 + a2)/2 <= (b1 + b2)/2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwyjgqu4j.lua:14:\
    \ attempt to perform arithmetic on a nil value (global 'b2')\nstack traceback:\n\
    \t/tmp/tmpwyjgqu4j.lua:14: in local 'candidate'\n\t/tmp/tmpwyjgqu4j.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return ( b\
    \ - a <= c and a <= c - b) or ( b - c <= a and b <= c - a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb_28hbb.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpeb_28hbb.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal a = a\
    \ or 0\n\tlocal b = b or 0\n\tlocal c = c or 0\n\tlocal isRight = true\n\tlocal\
    \ ab = math.sqrt(math.pow(a - b, 2) + math.pow(c - b, 2))\n\tlocal ac = math.sqrt(math.pow(a\
    \ - c, 2) + math.pow(c - c, 2))\n\tlocal bc = math.sqrt(math.pow(b - c, 2) + math.pow(c\
    \ - c, 2))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7sd5mldo.lua:35: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal side1\
    \ = math.sqrt((b * b) + (c * c))\n\tlocal side2 = math.sqrt((b * b) - (c * c))\n\
    \tlocal side3 = math.sqrt((a * a) - (b * b) - (c * c))\n\tlocal side4 = math.sqrt((a\
    \ * a) + (b * b) + (c * c))\n\tif side1 == side2 then\n\t\tprint(side1 .. \" ==\
    \ \" .. side2)\n\t\treturn true\n\telseif side2 == side3 then\n\t\tprint(side2\
    \ .. \" == \" .. side3)\n\t\treturn true\n\telseif side3 == side4 then\n\t\tprint(side3\
    \ .. \" == \" .. side4)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksarcmjd.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpksarcmjd.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local ab,\
    \ bc, cd = b - a, c - b, d - c\n    if ab == 0 and bc >= 0 and cd >= 0 then return\
    \ false else return true end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyh93l61.lua:11:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmphyh93l61.lua:11: in local 'candidate'\n\t/tmp/tmphyh93l61.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local s = 0.0\n\
    \  if a*a + b*b == c*c then return true end\n  if b*b - a*a == c*c then return\
    \ false end\n  if a*a + c*c - b*b == 0 then return false end\n  s = (-b + math.sqrt((math.pow(b,\
    \ 2) - 4*a*c))) / (2*a)\n  if s >= 0 and s <= 1 then return true end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ik41klb.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6ik41klb.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   local result\
    \ = b == 0 or math.abs(a) == math.abs(c) or math.abs(a - b) == math.abs(b - c)\n\
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxk1qsc_g.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxk1qsc_g.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local abx,\
    \ bcx, cax = a, b, c\n    local aby, bcy, cay = a%360, b%360, c%360\n    local\
    \ abz, bcz, caz = b-b, c+c, c-a\n    if abz < aby and bcz < bcy and caz < cay\
    \ then\n        return (caz + bc-cay) * (abz + bc-aby) / (abz + bc-abz) > (cay\
    \ + abc-caz) * (bcz + abc-bcy) \n    else \n        return abz + bc-abz > aby\
    \ + bcy - cay\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnw7ahbav.lua:17:\
    \ attempt to perform arithmetic on a nil value (global 'bc')\nstack traceback:\n\
    \t/tmp/tmpnw7ahbav.lua:17: in local 'candidate'\n\t/tmp/tmpnw7ahbav.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  -- Check for\
    \ right angle\n  if b == c then\n    error('Both sides are equal')\n  end\n  --\
    \ Calculate hypotenuse of a right angled triangle\n  local d = b^2 - 4 * a * c\n\
    \  if d == 0 then\n    error('Two sides are parallel')\n  end\n  -- Calculate\
    \ equation of right angled triangle (semi-perimeter)\n  -- by using the hypotenuse\n\
    \  local f = d / math.sqrt(d)\n  -- Check if equation is 90 degree\n  if a > f\
    \ then\n    -- We have right angle triangle\n    return true\n  else\n    -- We\
    \ have wrong triangle orientation\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0xn1ctm.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn0xn1ctm.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn math.abs(math.sin(math.rad(math.atan2(b\
    \ - a, c - a))) * b - a) <= a and math.abs(math.sin(math.rad(math.atan2(b - a,\
    \ c - a))) * c - a) <= a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_890r7op.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_890r7op.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    -- Base case\n\
    \    if a + b + c <= 1 then return false end\n    if a <= 0 or b <= 0 or c <=\
    \ 0 then return false end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprmausw8a.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    -- Three\
    \ sides forming a right angle triangle\n    if a>b and a>c then\n        if b\
    \ >= c then \n            return true\n        end\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu4_q09uy.lua:34: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.sqrt(a*a + b*b)\n  local ac = math.sqrt(a*a + c*c)\n  return ab > ac and\
    \ (ab - ac) % (math.pi/4) == 0.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzo792hp.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptzo792hp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    if a == 0\
    \ and b == 0 and c == 1 then return true end\n    local bc = math.sqrt(b * b)\n\
    \    local ad = math.sqrt(a * c)\n    local ac = math.sqrt(a * c)\n    local bd\
    \ = math.sqrt(bc * c)\n    local det = bc * bd - ac * ad\n    if det == 0 then\
    \ return false end\n    local l1 = det / (bc - ad)\n    local l2 = det / (bd +\
    \ ad)\n    return a == l1 or b == l1 or c == l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0sk831i.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn0sk831i.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tif b > c then\n\
    \t\treturn false\n\telseif a = b then\n\t\treturn true\n\telseif c = a then\n\t\
    \treturn true\n\telse\n\t\treturn math.abs(math.sin(math.atan((c-b)/(b-a)))) <\
    \ math.pi/4\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptagara1n.lua:13: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return (c-a)\
    \ * (c-b) == (b-a) * (b-c) + c*(a*a+b*b) == b*(b+c)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8kzzxel.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk8kzzxel.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   if a==b and\
    \ a==c then return true\n   end\n   if b==c and b==a then return true\n   end\n\
    \   if c==a and c==b then return true\n   end\n   return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd649px_2.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd649px_2.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    if a == b\
    \ then\n        return false\n    end\n    if a == c then\n        return true\n\
    \    end\n    if b == c then\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr7xcuif7.lua:37: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal b_angle\
    \ = b - a%b\n\tlocal c_angle = c - a%c\n\treturn not b_angle and c_angle == 90\
    \ or b_angle == c_angle or c_angle == 180\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3jkftwm.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps3jkftwm.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- The formula\
    \ for the hypotenuse of a right angle triangle is:\n\t-- hypotenuse = a * sqrt(b^2\
    \ + c^2)\n\t-- This formula can be extended to include other angles.\n\t-- The\
    \ formula for hypotenuse of a right angle triangle is:\n\t-- hypotenuse = a *\
    \ sqrt(b^2 - a^2 * c^2)\n\t-- This formula can be extended to include other angles.\n\
    \t-- A right-angled triangle has the following hypotenuses:\n\t-- hypotenuse =\
    \ b * sqrt(a^2 - b^2 * c^2)\n\t-- hypotenuse = a * sqrt(b^2 + a^2 * c^2)\n\t--\
    \ hypotenuse = a * sqrt(b^2 - a^2 * b^2 * c^2)\n\t-- The hypotenuses are the sides,\
    \ since a triangle is a right angle \n\t-- triangle if any two of the three sides\
    \ are sides.\n\tlocal a = math.abs(a)\n\tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjko_08gs.lua:43: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tif a == b or\
    \ a == c or a == c then\n\t\treturn true\n\tend\n\tif a + b + c == 0 then\n\t\t\
    return true\n\tend\n\tif a + b > c and a + c > b and b + c > a then\n\t\treturn\
    \ true\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6udmgvfk.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6udmgvfk.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  if a==b or\
    \ a==c or b==c then return false end\n  local side1 = math.abs(a^2 + b^2 + c^2)\n\
    \  local side2 = math.abs(a^2 + c^2 - b^2)\n  if side1 == side2 then return false\
    \ end\n  if side1 == side2 then return false end\n  local side3 = math.abs(a^2\
    \ + b^2 - c^2)\n  local side4 = math.abs(a^2 + b^2 - b^2)\n  if side3 == side4\
    \ then return false end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8oxomlks.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8oxomlks.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn ((a\
    \ + b > c) and (a + c > b) and (b + c > a) and (a + b + c > 0)\n\tor (a + b >\
    \ c) and (a + c > b) and (a + c > b) and (a + b + c > 0))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdv026vc.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppdv026vc.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   return (b\
    \ <= c) and ((a + b > c) and (a - b > c) or (a + c > b) and (a - c > b))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpky549fhq.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpky549fhq.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return (b^2\
    \ - (a^2)) * (c^2 - (b^2)) < 0\nend\n</cell>\n<text>\nExercise\nUse this function\
    \ right_angle_triangle to determine if a triangle is right-angled. What happens\
    \ if the triangle is not right-angled?\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_eim980t.lua:13: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Base Case\n\
    \tif a < b and b < c then\n\t\treturn true\n\tend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprch1m4hx.lua:32: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    if a < b\
    \ and b < c then\n      return true\n    else\n      return (a - b) * (c - b)\
    \ <= 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3_f2e86.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm3_f2e86.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    if a == 0\
    \ then return false end\n    if b == 0 then return false end\n    if c == 0 then\
    \ return false end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplbjo8_ky.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tif b > a then\n\
    \t\tif b > c then\n\t\t\tif a > c then\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\
    \treturn false\n\t\t\tend\n\t\telse\n\t\t\tif c > a then\n\t\t\t\treturn true\n\
    \t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\telse\n\t\tif c > a then\n\
    \t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzv80343.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmzv80343.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return math.abs(math.degrees(math.acos((a\
    \ * a + b * b + c * c - a * b * c) / (-2 * a ^ 2))))\n           <= 90 or math.abs(math.degrees(math.acos((a\
    \ * a + c * c + b * b - a * c * c) / (-2 * a ^ 2))))\n           <= 90\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsl6c71_d.lua:11:\
    \ attempt to call a nil value (field 'degrees')\nstack traceback:\n\t/tmp/tmpsl6c71_d.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpsl6c71_d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tif a == b or\
    \ a == c or b == c then\n\t\treturn true\n\tend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp954d12rv.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local angle_a\
    \ = math.abs(math.sin(a * math.pi / 180))\n  local angle_b = math.abs(math.sin(b\
    \ * math.pi / 180))\n  local angle_c = math.abs(math.sin(c * math.pi / 180))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp34w1aapp.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local n1\
    \ = math.sqrt(b^2 + c^2)\n    local n2 = math.sqrt(a^2 + c^2)\n    local n3 =\
    \ math.sqrt(a^2 + b^2)\n    return (n1 + n2) == n3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7wipinm.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc7wipinm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    return (b-a)*((c-a)*(a+b)\
    \ > c-b) end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr7ywdt_n.lua:12: <eof> expected near ''end''

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   local a, b,\
    \ c = tonumber(a), tonumber(b), tonumber(c)\n   return a > b and b > c and c >\
    \ a or b > c and c > b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppu21gkef.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppu21gkef.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    return math.fmod(math.atan2(c-a,\
    \ b-a), math.pi) < math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxusnpd4q.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxusnpd4q.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return ((b\
    \ - a) ^ (c - a)) <= 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5k1jihy.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz5k1jihy.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local a = math.abs(a)\n\
    \  local b = math.abs(b)\n  local c = math.abs(c)\n  if a + b > c\n  then\n  \
    \  if a + c > b\n    then\n      return true\n    end\n  else\n    if b + c >\
    \ a\n    then\n      return true\n    end\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq5urymz3.lua:43: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  -- Special\
    \ cases\n  if a == b and b == c then\n    return true\n  elseif a == c then \n\
    \    return false\n  end\n  \n  if a > b and a > c then\n    return false\n  elseif\
    \ b > c then\n    return false\n  elseif a > c then\n    return true\n  end\n\
    \  \n  if a + b > c + d then\n    return false\n  elseif c + d > a + b then\n\
    \    return false\n  elseif a + d > b + c then\n    return false\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg01vcqzr.lua:26:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpg01vcqzr.lua:26: in local 'candidate'\n\t/tmp/tmpg01vcqzr.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal t1 =\
    \ b * b - 4 * a * c\n\tlocal t2 = a * b + 4 * a * c\n\treturn t1 < 0 and t2 <\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_52wznb3.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_52wznb3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    if a + b\
    \ > c then return false end\n    if a + c > b then return false end\n    if b\
    \ + c > a then return false end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mbe6psy.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6mbe6psy.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    if a == 0\
    \ then return false end\n    if b == 0 then return false end\n    if c == 0 then\
    \ return false end\n    -- If all sides are equal, return true\n    if a == b\
    \ then return true end\n    if a == c then return true end\n    if b == c then\
    \ return true end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqgd1yxc1.lua:35: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   return ((a\
    \ - b) * (b - c) * (c - a) <= 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpplwipx5c.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpplwipx5c.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   local a, b,\
    \ c = math.abs(a), math.abs(b), math.abs(c)\n   if a == b and b == c then return\
    \ true end\n   if a == c then return false\n   if a == b then return false\n \
    \  if b == c then return false\n   if a + b > c and a + c > b and b + c > a then\
    \ return true end\n   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppi8h73f6.lua:14: ''end'' expected (to close ''if'' at line
    13) near ''if''

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn ((b*b\
    \ + c*c - a*a) ^ 0.5) <= 0.0;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9jf5l92b.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9jf5l92b.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal a = a\
    \ - b\n\tlocal b = b - c\n\tlocal c = (c * 2) - b\n\t\n\tlocal abc = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2) + math.pow(c, 2))\n\tlocal bc  = math.sqrt(math.pow(b, 2)\
    \ + math.pow(c, 2))\n\tlocal ca  = math.sqrt(math.pow(c, 2) + math.pow(a, 2))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0cuc47nm.lua:35: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn b >\
    \ math.abs(a-b) and b > math.abs(c-b) and b > math.abs(a-c)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmguhhbq.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplmguhhbq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn ((b\
    \ - a) * (c - b)) < ((b + a) * (c - a))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxowzxxby.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxowzxxby.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  if a + b >\
    \ c or b + c > a or c + a > b then return false end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstgjo37u.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpstgjo37u.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   a = a or 0\n\
    \   b = b or 0\n   c = c or 0\n   return math.abs((a - b) * (c - b)) < math.abs((a\
    \ * b) - (c * b))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpodmk5l9f.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpodmk5l9f.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal a, b,\
    \ c = tonumber(a), tonumber(b), tonumber(c)\n\t-- If sides are the same, it's\
    \ a right angle triangle\n\tif a == b then\n\t\t-- If b is 90 degree\n\t\tif b\
    \ == 90 then\n\t\t\t-- If c is right angle and c is 90 degree\n\t\t\tif c == a\
    \ + b then return true\n\t\t\tend\n\t\tend\n\tend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm88xila9.lua:38: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local s =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n    local t = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n    \n    local is_right_angled = math.abs((s - t)) <\
    \ 1e-12\n    return is_right_angled\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrkwyrb3.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptrkwyrb3.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn (b-c)*(b+c)\
    \ <= a*a or b+c <= a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcu_xobuk.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcu_xobuk.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local adotbc\
    \ = math.acos(math.pow((b - c), 2.0))\n    local adothc = math.acos(math.pow((a\
    \ - c), 2.0))\n    local bcdota = math.acos(math.pow(b, 2.0))\n    local bcdoth\
    \ = math.acos(math.pow(b, 2.0))\n    return ((adotbc > adothc) and (adotbc < bcdota))\n\
    end\n</code>\n<|/ a |>\n<| a tags=math,geometry,geometry-surface,geometry dscore=2\
    \ |>\nThis question is very similar to this one. In that question, the sides had\
    \ different angles, and this one is a lot simpler. So, let's solve the simpler\
    \ one.\nFirst we solve the problem for a triangle:\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy7q9iao6.lua:17: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero (for efficiency)\n  if not a then \n    return false\n\
    \  elseif not b then\n    return false\n  elseif not c then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuq1xlzf3.lua:36: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tif a >= b and\
    \ a >= c then\n\t\treturn false\n\tend\n\tif b >= c and b >= a then\n\t\treturn\
    \ false\n\tend\n\tif c >= a and c >= b then\n\t\treturn false\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkpebdgq9.lua:37: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tif a + b ~=\
    \ c\n\tor a + c ~= b\n\tor b + c ~= a\n\tthen return false\n\tend\n\tif a == b\n\
    \tor (a + b == c)\n\tor (a + c == b)\n\tor (b + c == a)\n\tthen return true\n\t\
    end\n\treturn (\n\t\tmath.abs(\n\t\t\tmath.atan2(b*b - a*c)\n\t\t\t-\n\t\t\tmath.atan2(b*c\
    \ + a*b)\n\t\t)\n\t\t>\n\t\t0.5*math.pi\n\t)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz7cvqda5.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz7cvqda5.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   if a == c\
    \ then\n      return b == b\n   elseif a == b then\n      return math.abs(b -\
    \ c) <= 1\n   else\n      local b1 = b - a\n      local b2 = b - c\n      local\
    \ c1 = c - a\n      local c2 = c - b\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxp250soh.lua:37: ''end'' expected (to close ''if'' at line
    11) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal a, b,\
    \ c = a or 0, b or 0, c or 0\n\tlocal a_length = a ~= 0 and a or 0\n\tlocal b_length\
    \ = b ~= 0 and b or 0\n\tlocal c_length = c ~= 0 and c or 0\n\tif a_length < b_length\
    \ then return false end\n\tif b_length < c_length then return false end\n\tif\
    \ a_length == 0 or b_length == 0 or c_length == 0 then return false end\n\treturn\
    \ (math.abs(math.atan2(b * c - a_length * b * math.sin(math.rad(b))), 0.0) <=\
    \ math.pi / 2.0) or (math.abs(math.atan2(c * b - a_length * math.sin(math.rad(a))),\
    \ 0.0) <= math.pi / 2.0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2e4_twad.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2e4_twad.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  -- base cases\n\
    \  if a == b and a == c then return true \n  if b == c then return false \n  if\
    \ b < c then return right_angle_triangle(b, a, c)\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc8rjmw7q.lua:13: ''end'' expected (to close ''if'' at line
    12) near ''if''

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn ((math.abs(a-b)*math.abs(a-c))\
    \ + (math.abs(b-c)*math.abs(a-b)))/2 == 0 or\n\t\t((a*math.abs(b-c)) - (b*math.abs(a-c)))\
    \ / (math.abs(a-b)) > math.abs(a-c)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiw5gvgqi.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiw5gvgqi.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn ( b\
    \ - a) >= ( b - c ) and ( b - c ) >= ( a - b) and ( a - b ) >= ( a - c )\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjzw157h.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzjzw157h.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal cd = math.sqrt(math.pow(c, 2) + math.pow(a, 2))\n\
    \treturn ab + bc == cd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpythzws95.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpythzws95.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- http://en.wikipedia.org/wiki/Euler_angles\n\
    \t-- http://mathworld.wolfram.com/EulerAngles.html\n\t-- https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection\n\
    \t-- http://www.mathsisfun.com/algebra/line-lineintersection.html\n\t-- http://mathworld.wolfram.com/Polygons.html\
    \ - Explains the math nicely.\n\t-- http://en.wikipedia.org/wiki/Shoelace_formula\n\
    \t-- http://www.tinaja.com/glib/ellipse/index.html\n\t-- http://mathworld.wolfram.com/Circle-LineIntersection.html\n\
    \t-- http://math.stackexchange.com/questions/128758/what-is-the-equation-of-a-right-angled-triangle-formed-by-r-s-and-t\n\
    \treturn (not ((b^2 + c^2 - a*c)^2 > (a^2 + b^2 - c^2))) \n\tand ((a^2 + b^2 -\
    \ c^2)^2 - (b*c - a*b)^2) <= 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2pepanc.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw2pepanc.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal is_right_angle\n\
    \tif a + b > c then\n\t\tlocal e0 = math.sqrt((b * b) - (4 * a * c))\n\t\tlocal\
    \ e1 = (math.sqrt(e0 * e0) - (a * a))\n\t\tif e1 == 0 then\n\t\t\tis_right_angle\
    \ = a * c / b\n\t\telse\n\t\t\tis_right_angle = math.degrees(math.acos(e1 / e0))\n\
    \t\tend\n\telseif b > c then\n\t\tlocal e0 = math.sqrt((a * a) - (4 * b * c))\n\
    \t\tlocal e1 = (math.sqrt(e0 * e0) - (b * b))\n\t\tif e1 == 0 then\n\t\t\tis_right_angle\
    \ = b * c / a\n\t\telse\n\t\t\tis_right_angle = math.degrees(math.acos(e1 / e0))\n\
    \t\tend\n\telseif c > a then\n\t\tlocal e0 = math.sqrt((c * c) - (4 * a * b))\n\
    \t\tlocal e1 = (math.sqrt(e0 * e0) - (c * c))\n\t\tif e1 == 0 then\n\t\t\tis_right_angle\
    \ = c * b / a\n\t\telse\n\t\t\tis_right_angle = math.degrees(math.acos(e1 / e0))\n\
    \t\tend\n\telse\n\t\tis_right_angle = false\n\tend\n\treturn is_right_angle\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppxw26dc0.lua:18:\
    \ attempt to call a nil value (field 'degrees')\nstack traceback:\n\t/tmp/tmppxw26dc0.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmppxw26dc0.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  if a == 0 and\
    \ b == 0 and c == 0 then\n    return false\n  elseif a = 0 then\n    return b\
    \ > 0 and c > 0 or (c > 0 and b > 0)\n  elseif b = 0 then\n    return a > 0 and\
    \ c > 0 or (c > 0 and a > 0)\n  elseif c = 0 then\n    return a > 0 and b > 0\
    \ or (b > 0 and a > 0)\n  else\n    return a > 0 and b > 0 and c > 0 or (b > 0\
    \ and a > 0 and c > 0)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplunyr9vt.lua:13: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  -- Check input\
    \ value\n  if a == 0 or b == 0 or c == 0\n  then\n    return false\n  end\n  \n\
    \  -- Get product of a, b and c\n  local product = math.pow(a, 2) * math.pow(b,\
    \ 2) * math.pow(c, 2)\n  -- Check if three sides are equal\n  if a == b and a\
    \ == c\n  then\n    return true\n  end\n  \n  -- Check whether the difference\
    \ between a and the product of b and c is 90\n  local diff1 = math.abs(a - product)\n\
    \  local diff2 = math.abs(b - product)\n  local diff3 = math.abs(c - product)\n\
    \  if diff1 ~= 0 and diff2 ~= 0 and diff3 ~= 0\n  then\n    return false\n  end\n\
    \  \n  -- Check whether the difference between a and the product of c and a is\
    \ 90\n  local diff1 = math.abs(a - product)\n  local diff2 = math.abs(c - product)\n\
    \  local diff3 = math.abs(b - product)\n  if diff1 ~= 0 and diff2 ~= 0 and diff3\
    \ ~= 0\n  then\n    return false\n  end\n  \n  -- Check if c is greater than the\
    \ sum of b and a\n  local sum1 = math.pow(a, 2)\n  local sum2 = math.pow(b, 2)\n\
    \  local sum3 = math.pow(c, 2)\n  local product = sum1 + sum2 + sum3\n  if c >\
    \ product\n  then\n    return false\n  end\n  \n  -- Check whether the product\
    \ of b and c is greater than the sum of a and b\n  local sum1 = math.pow(a, 2)\n\
    \  local sum2 = math.pow(b, 2)\n  local sum3 = math.pow(c, 2)\n  local product\
    \ = sum1 * sum2 + sum3 * sum1\n  if product > sum3 + sum2\n  then\n    return\
    \ false\n  end\n  \n  -- Check if b is greater than the product of a and c\n \
    \ local sum1 = math.pow(a, 2)\n  local sum2 = math.pow(b, 2)\n  local sum3 = math.pow(c,\
    \ 2)\n  local product = sum1 * sum2 * sum3\n  if product > sum1 * sum3\n  then\n\
    \    return false\n  end\n  \n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2720l5n4.lua:79:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2720l5n4.lua:79:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   local a =\
    \ a or 1\n   local b = b or 1\n   local c = c or 1\n   if b > c then\n      a,\
    \ b = b, a\n      c, a = a, c\n   end\n   return (math.abs(b - c) >= math.abs(a\
    \ - c)) and\n          (math.abs((b + c) / 2) - (math.abs(b - c) / 2) < math.abs(b\
    \ - a)) and\n          (math.abs((b + c) / 2) - (math.abs(b - a) / 2) < math.abs(b\
    \ - c))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzhkq_jc.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfzhkq_jc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return b ==\
    \ c or b * c == a * b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg69dpj8m.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg69dpj8m.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tif a + b >\
    \ c and b + c > a and c + a > a then\n\t\treturn true\n\telse\n\t\treturn false\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77u_u3_p.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp77u_u3_p.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return (b ==\
    \ c or math.fmod(a,b) == math.fmod(b,c))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvz072g4.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqvz072g4.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local a = math.abs(a)\n\
    \  local b = math.abs(b)\n  local c = math.abs(c)\n  if a <= b and b <= c then\n\
    \    return true\n  elseif b > c and c > a and b > a then\n    return false\n\
    \  elseif c == 0 or b == 0 then\n    return false\n  else\n    -- Calculate the\
    \ area of triangle ABC\n    -- If triangles do not form a right-angle triangle,\
    \ then return false.\n    local absa = a + b + c\n    local areaAbsA = math.sqrt(absa/3)\n\
    \    local areaAbsB = math.sqrt(absa/3)\n    local areaAbsC = math.sqrt(absa/3)\n\
    \    if areaAbsA <= areaAbsB and areaAbsB <= areaAbsC then\n      return false\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfubln__g.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfubln__g.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local b1 =\
    \ b - a -- b1 - a is hypotenuse\n  local c1 = c - a -- c1 - a is hypotenuse\n\
    \  return b1 * c1 > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3l68ygjq.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3l68ygjq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return b ==\
    \ c and math.sqrt(math.pow(a, 2) + math.pow(b, 2)) == math.pow(a + b, 2)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpah189q61.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpah189q61.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   return a +\
    \ b > c and b + c > a and c + a > b\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2bqq53b.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy2bqq53b.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return b ==\
    \ 0 and c == 0\n    or b == c and a > 0 and a == (180 - b) or (180 - a) == b\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfef9506h.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfef9506h.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tif a + b >\
    \ c and a + c > b and b + c > a then\n\t\treturn true\n\tend\n\treturn false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8j1uv2tz.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8j1uv2tz.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ang,\
    \ i, l1, l2, l3\n  l1 = math.sqrt(a*a + b*b)\n  l2 = math.sqrt(c*c + a*a)\n  l3\
    \ = math.sqrt(b*b + c*c)\n  ang = math.atan2(c, b)\n  \n  if a > 0 and b > 0 and\
    \ c > 0 then\n    return true\n  elseif l1 > l2 and l1 > l3 then\n    return math.abs(math.atan2(c,a)\
    \ - ang) \n  elseif l2 > l3 and l2 > l1 then\n    return math.abs(math.atan2(c,a)\
    \ - ang) \n  elseif l3 > l1 and l3 > l2 then\n    return math.abs(math.atan2(c,a)\
    \ - ang) \n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mnrhebi.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6mnrhebi.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  return (b -\
    \ c) * (a - c) < 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd99k4pm3.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd99k4pm3.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- The triangle\
    \ is a right angle if the sum of the sides is equal to the\n\t-- sum of the lengths\
    \ of the sides. \n\t-- The length of a side is equal to the hypotenuse, sqrt,\
    \ of the side.\n\tlocal function sum_of_sides(side1, side2, side3)\n\t\treturn\
    \ math.sqrt(side1*side1 + side2*side2 + side3*side3)\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp30sfvifr.lua:34: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local is_right_angle\
    \ = (math.abs(b - a) > math.abs(b - c) or\n        math.abs(a - c) > math.abs(b\
    \ - a))\n    return is_right_angle\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4quud674.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4quud674.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn (math.abs(a)\
    \ * math.abs(b) * math.abs(c) >\n\t\t\tmath.abs(b) * math.abs(c) * math.abs(a))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26npxnw6.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp26npxnw6.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   return (b-a)*(c-a)\
    \ - (b-c)*(c-a) ~= 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqowswq_.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphqowswq_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   return a <=\
    \ b and b <= c and math.abs(a + b + c) == math.abs(b + c - a)\nend\n</cell>\n\
    <text>\n6. Congratulations!\nYou've just finished the core module of Deep Learning:\
    \ torch.nn. The next module is torch.optim, which is used for updating the weights\
    \ of our model. torch.optim contains different classes which can be used for different\
    \ optimization tasks, such as SGD, Adam, RMSProp, etc. The complete list of optimizers\
    \ can be found here.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpas38vvks.lua:13: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local ab\
    \ = math.abs(a-b)\n    local ac = math.abs(c-a)\n    local bc = math.abs(c-b)\n\
    \    return ab > ac and ab > bc\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dk74evl.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5dk74evl.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal a1 =\
    \ math.atan2(c-a, b)\n\tlocal a2 = math.atan2(math.sqrt(math.pow(c, 2)+math.pow(b,\
    \ 2))-a, b)\n\tlocal a3 = math.atan2(c+a, b-c)\n\tif a1 == a2 and a2 == a3 then\
    \ return true end\n\treturn false\nend\nreturn right_angle_triangle\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw8auhiii.lua:18: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local ang\
    \ = math.acos((a * b + c * c - a * c + b * b) / 2)\n    \n    if math.abs(ang\
    \ - math.pi) >= 1e-12 then\n\t\treturn true\n\tend\n\t\n\treturn false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsty2b3cr.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsty2b3cr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local xa,\
    \ ya, za = 0, 0, 0\n    local xb, yb, zb = 0, 0, 0\n    local xc, yc, zc = 0,\
    \ 0, 0\n    if a < b and a < c then\n        xa, ya, za = a, b, b\n        xb,\
    \ yb, zb = c, a, b\n        local tmp\n        if b > c then\n            tmp\
    \ = b\n            b = c\n            c = tmp\n        end\n        if a > c then\n\
    \            tmp = a\n            a = c\n            c = tmp\n        end\n  \
    \  end\n    if a > b and a > c then\n        xa, ya, za = a, b, b\n        xc,\
    \ yc, zc = a, b, c\n        local tmp\n        if b > c then\n            tmp\
    \ = b\n            b = c\n            c = tmp\n        end\n        if a > c then\n\
    \            tmp = a\n            a = c\n            c = tmp\n        end\n  \
    \  end\n    if b > c and b > a then\n        xa, ya, za = a, b, b\n        xb,\
    \ yb, zb = c, b, c\n        local tmp\n        if a > c then\n            tmp\
    \ = a\n            a = c\n            c = tmp\n        end\n        if b > c then\n\
    \            tmp = b\n            b = c\n            c = tmp\n        end\n  \
    \  end\n    if c > b and c > a then\n        xa, ya, za = a, b, b\n        xc,\
    \ yc, zc = a, b, c\n        local tmp\n        if a > c then\n            tmp\
    \ = a\n            a = c\n            c = tmp\n        end\n        if b > c then\n\
    \            tmp = b\n            b = c\n            c = tmp\n        end\n  \
    \  end\n    return ((xa == xb and ya == yb and za == zb) or\n            (xa ~=\
    \ xb and ya ~= yb and za ~= zb) or\n            (xa ~= xc and ya ~= yc and za\
    \ ~= zc) or\n            (xb == xc and yb == yc and zb == zc))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75461us4.lua:83:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp75461us4.lua:83:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  if a==b and\
    \ b==c then return true end\n  \n  -- Check if the side is greater than the other\
    \ two sides\n  if a>b and a>c then return true end\n  if b>a and b>c then return\
    \ true end\n  if a>b and b>c then return true end\n  if a>b and c>a then return\
    \ true end\n  if b>a and c>a then return true end\n  \n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsryjzjh.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphsryjzjh.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    if a < 0\
    \ then\n        a = -a\n    end\n    if b < 0 then\n        b = -b\n    end\n\
    \    if c < 0 then\n        c = -c\n    end\n    local s = math.sqrt((b*b) - (4*a*c))\n\
    \    if s <= 0 then\n        return false\n    end\n    -- Check if a is 90, b\
    \ is 90 or 180 degree\n    if math.abs(a*b) >= 180 then\n        if math.abs(b)\
    \ > math.abs(c) then\n            -- Check if b is 90, c is 90 or 180 degree\n\
    \            if math.abs(b) > math.abs(c) then\n                -- Check if b\
    \ is 90, c is 90 or 180 degree\n                return math.abs(c) > math.abs(b)\n\
    \            else\n                -- Check if b is 90, c is 90 or 180 degree\n\
    \                return math.abs(c) > math.abs(a)\n            end\n        else\n\
    \            -- Check if b is 90, c is 90 or 180 degree\n            return math.abs(a)\
    \ > math.abs(b)\n        end\n    else\n        -- Check if a is 90, b is 90 or\
    \ 180 degree\n        return math.abs(a) > math.abs(b)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm513j5nq.lua:48:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm513j5nq.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    return (((b\
    \ - a) * (c - b)) - ((c - a) * (b - a))) ~= 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5knj4a3b.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5knj4a3b.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  if b < c then\n\
    \    local tmp = c\n    c = b\n    b = tmp\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp394ooxkr.lua:33: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    return math.abs(\n\
    \            math.pow(\n                math.sin(math.radians(b) - math.radians(a)),\
    \ \n                2)\n            - (\n                math.cos(math.radians(b)\
    \ - math.radians(a)) \n                * math.cos(math.radians(c) - math.radians(a))\n\
    \            )\n        ) < epsilon\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5mtrvf04.lua:13:\
    \ attempt to call a nil value (field 'radians')\nstack traceback:\n\t/tmp/tmp5mtrvf04.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp5mtrvf04.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   return b ==\
    \ 0 or (b == a and c >= b) or (c <= a and b > a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9u0w05p.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe9u0w05p.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn (c-b)*(c-a)-(2*b**2-a*c)>0\
    \ \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzkri33p4.lua:11: unexpected symbol near ''*''

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  -- a, b, c\
    \ = length of a triangle side\n  return math.abs(b * b - 4 * a * c) >= 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdh_g6eei.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdh_g6eei.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   \n    -- If\
    \ all sides are equal, return a right angle triangle\n    if (a == b and b ==\
    \ c) then\n        return true\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp93xhnn0p.lua:33: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- a, b, c\
    \ are the lengths of the three sides of a triangle\n\tif a + b > c and a + c >\
    \ b and b + c > a then return true\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskxssw6n.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpskxssw6n.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe13o8m8m.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local deg_a\
    \ = 180\n    local deg_b = 180\n    local deg_c = 180\n    local deg_sum = 0\n\
    \    \n    -- Calculate sum of angles\n    deg_sum = deg_a + deg_b + deg_c\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgz_irspv.lua:35: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    if a == b\
    \ and b == c then return true end\n    if a == b or a == c then return false end\n\
    \    if b == c then return true end\n    local u = b\n    local v = c\n    local\
    \ w = a\n    local length = math.sqrt((u * u) + (v * v))\n    if length == 0 then\
    \ return false end\n    -- The second case is a right triangle\n    if u > v then\n\
    \        local tmp = u\n        u = v\n        v = tmp\n        local tmp = w\n\
    \        w = a\n        a = b\n        b = tmp\n    end\n    local sign = 1\n\
    \    if u > v then sign = -1 end\n    local theta = (math.acos((w * u + v * v)\
    \ / (length * length)) * sign) -- This line is slightly modified by Vincent for\
    \ Python\n    -- The third case is a right angled triangle\n    if theta > math.pi\
    \ / 2 then return false end\n    \n    local x_rad = math.acos((u * u + v * v)\
    \ / (length * length)) -- This line is slightly modified by Vincent for Python\n\
    \    -- The fourth case is a right angled triangle\n    if x_rad > math.pi / 2\
    \ then return false end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpki9w9l5c.lua:55: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\treturn (math.abs(b\
    \ - a) > math.abs(c - a)) and ((b > c) or (b == c and a == b)) or ((a > c) or\
    \ (a == c and a == b))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpud89nji8.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpud89nji8.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  if a^2 + b^2\
    \ == c^2 then\n    local rb = b / a -- right angle\n    local rc = c / a -- right\
    \ angle\n    -- if rb or rc is 180 degree, then return true\n    if rb == rc or\
    \ rb == -rc then\n      return true\n    else\n      return false\n    end\n \
    \ else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb85a8to9.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb85a8to9.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ b - a\n\tlocal ac = c - a\n\tlocal bc = 3.14159265358979*(b + c)\n\tlocal bc\
    \ = math.sqrt(bc)\n\t\n\tif ab*bc < ac then\n\t\treturn false\n\telse\n\t\treturn\
    \ ((b - math.floor(ab/bc)) == math.floor(ac/bc)) and (ab >= bc)\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjpvvdiiq.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjpvvdiiq.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local b1,\
    \ b2, b3 = b - a\n    local c1, c2, c3 = c - a\n    if b3 == 0 then return b2\
    \ ~= 0 and b1 ~= 0 and c2 ~= 0 and c1 ~= 0 end\n    return b2 ~= 0 and b1 ~= 0\
    \ and c2 ~= 0 and c1 ~= 0 and c3 == 0 and b3 ~= 0 and b2 ~= 0 and b1 ~= 0 \nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhje1mfz.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqhje1mfz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  -- Check arguments.\n\
    \  if a <= 0 or b <= 0 or c <= 0 then\n    return nil\n  end -- a <= 0 and b <=\
    \ 0 and c <= 0 \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphh23aa0w.lua:32: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659978423
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n   local d =\
    \ b * b - a * c\n   if d < 0 then\n      return false\n   else\n      return (math.sqrt(d)\
    \ < math.pi/2)\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjogckpgn.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjogckpgn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978423
