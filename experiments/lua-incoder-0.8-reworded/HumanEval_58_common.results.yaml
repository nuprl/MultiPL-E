language: lua
name: HumanEval_58_common
results:
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 < 1 then\
    \ return nil end\n  if #l2 < 1 then return nil end\n  local l = {}\n  local i1\
    \ = 1\n  local i2 = 1\n  while i1 <= #l1 and i2 <= #l2 do\n    local k1 = l1[i1]\n\
    \    local k2 = l2[i2]\n    if k1 == k2 then\n      table.insert(l, k1)\n    \
    \  i1 = i1 + 1\n      i2 = i2 + 1\n      continue\n    end\n    if k < k1 then\n\
    \      table.insert(l, k2)\n      i2 = i2 + 1\n    else\n      table.insert(l,\
    \ k1)\n      i1 = i1 + 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg299_388.lua:20: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local len1 = #l1\n  local len2 = #l2\n  local i1 = 0\n  local i2 = 0\n\
    \  while i1 < len1 and i2 < len2 do\n    if l1[i1] == l2[i2] then\n      table.insert(common,\
    \ l1[i1])\n      i1 = i1 + 1\n      i2 = i2 + 1\n    else\n      if i1 < len1\
    \ then\n        i1 = i1 + 1\n      else\n        i2 = i2 + 1\n      end\n    end\n\
    \  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhqdy6jx.lua:31:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmpwhqdy6jx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local function\
    \ sort(t)\n    local tmp = {}\n    for k, v in pairs(t) do tmp[k] = v end\n  \
    \  table.sort(tmp)\n    return tmp\n  end\n  local result = sort(l1)\n  for _,\
    \ v in pairs(l2) do result[v] = true end\n  return sort(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare two boolean values

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if #l1 ~= #l2\
    \ then return end\n    local common = {}\n    local i1 = 0\n    local i2 = 0\n\
    \    while i1 < #l1 and i2 < #l2 do\n        if l1[i1] == l2[i2] then\n      \
    \      common[i1] = l1[i1]\n            i1 = i1 + 1\n            i2 = i2 + 1\n\
    \        else\n            i1 = i1 + 1\n        end\n    end\n    return common\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for this, I got this to work\
    \ but found that I was going down the wrong path with my code. I appreciate the\
    \ help though.\n<|/ c |>\n<| a |>\nIt looks like you're implementing union-find\
    \ in order to determine which items in the same list are in the same group.\n\
    What you're describing is a connected component, which can be done without actually\
    \ implementing union-find. \nTo determine whether two items are in the same group,\
    \ you can use some simple set operations.\nTo find whether two items are in the\
    \ same group:\n<code>\nif (set1[1] == set2[1]) and (set1[2] == set2[2]) and (set1[3]\
    \ == set2[3]) and (set1[4] == set2[4]) then\n    return true\nelse\n    return\
    \ false\nend\n</code>\nTo find whether two items are in the same group, this can\
    \ be done by performing a union of the sets, for each item in the first set (by\
    \ doing union operations, you can get all of the items in the first set that are\
    \ in the second set).\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp20fcg42g.lua:22: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local result\
    \ = {}\n  for _, item1 in ipairs(l1) do\n    for _, item2 in ipairs(l2) do\n \
    \     if item1 ~= item2 then\n        result[#result + 1] = item1\n      end\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_7br3ds.lua:21:\
    \ expected: \n{1, 5, 653}\nactual: \n{\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    1,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    3,\n    3,\n\
    \    3,\n    3,\n    3,\n    3,\n    3,\n    34,\n    34,\n    34,\n    34,\n\
    \    34,\n    34,\n    34,\n    653,\n    653,\n    653,\n    653,\n    653,\n\
    \    653,\n    2,\n    2,\n    2,\n    2,\n    2,\n    2,\n    2,\n    5,\n  \
    \  5,\n    5,\n    5,\n    5\n}\nstack traceback:\n\t/tmp/tmp4_7br3ds.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local common\
    \ = {}\n    local i = 1\n    while i <= #l1 do\n        local found = false\n\
    \        for j = 1, #l2 do\n            if l1[i] == l2[j] then\n             \
    \   table.insert(common, l2[j])\n                found = true\n              \
    \  break\n            end\n        end\n        if not found then\n          \
    \  table.insert(common, l1[i])\n        end\n        i = i + 1\n    end\n    return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiwyu31xa.lua:29:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5}\nstack traceback:\n\t\
    /tmp/tmpiwyu31xa.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n   local n = #l1\n\
    \   local m = #l2\n   local i = 1\n   local j = 1\n   local hash = {}\n   while\
    \ i < n do\n      hash[l1[i]] = hash[l1[i]] or {}\n      while j < m and l2[j]\
    \ == l1[i] do\n         j = j + 1\n      end\n      hash[l1[i]][l2[j]] = hash[l1[i]][l2[j]]\
    \ or i\n      i = i + 1\n      j = j + 1\n   end\n   return hash\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bcgffmi.lua:27:\
    \ expected: {1, 5, 653}\nactual: {{5=1}, {653=6}, {3}, {7=2}, 34={5=4}, 653={9=5}}\n\
    stack traceback:\n\t/tmp/tmp_bcgffmi.lua:27: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 <= 0 then\
    \ return {} end\n  if #l2 <= 0 then return {} end\n  local common = {}\n  for\
    \ i = 1, #l1 do\n    local e = l1[i]\n    local j = #l2\n    while j > 0 do\n\
    \      if e ~= l2[j] then break end\n      j = j - 1\n    end\n    table.insert(common,\
    \ e)\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgh3vizri.lua:25:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5}\nstack traceback:\n\t\
    /tmp/tmpgh3vizri.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t1 = {}\n\
    \  local t2 = {}\n  for i = 1, #l1 do\n    if l1[i] == nil then t1[i] = nil else\n\
    \      if not t2[i] then\n        t2[i] = l1[i]\n      else\n        if t1[i]\
    \ ~= l2[i] then\n          t2[i] = l1[i]\n        end\n      end\n    end\n  end\n\
    \  t1 = table.concat(t1)\n  t2 = table.concat(t2)\n  -- Remove nils\n  local n1,\
    \ n2 = #t1, #t2\n  if n2 > 0 then\n    for i = 1, n1 do\n      if t1[i] == nil\
    \ then\n        t1[i] = nil\n      end\n    end\n  end\n  if n1 > 0 then\n   \
    \ for i = 1, n2 do\n      if t2[i] == nil then\n        t2[i] = nil\n      end\n\
    \    end\n  end\n  return t1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1silt24v.lua:44:\
    \ expected: {1, 5, 653}\nactual: \"\"\nstack traceback:\n\t/tmp/tmp1silt24v.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local out = {}\n\
    \  for a, b in pairs(l1) do\n    for c, d in pairs(l2) do\n      if a == c and\
    \ b == d then\n        out[#out + 1] = a\n      end\n    end\n  end\n  return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcg47dlpt.lua:21:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmpcg47dlpt.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local u = {}\n\
    \    for i = 1, #l1 do\n        u[l2[i]] = true\n    end\n    local i = 1\n  \
    \  local v = {}\n    while i <= #l2 do\n        if u[l1[i]] then\n           \
    \ table.insert(v, l1[i])\n            i = i + 1\n        else\n            i =\
    \ i + 1\n        end\n    end\n    return v\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hnoxh9_.lua:27:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmp1hnoxh9_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1 = 1\n\
    \  local i2 = 1\n  local l = {}\n  local il1 = #l1\n  local il2 = #l2\n  while\
    \ i1 < il1 and i2 < il2 do\n    if l1[il1-1-i1] ~= l2[il2-1-i2] then\n      l[#l+1]\
    \ = l1[il1-1-i1]\n      i1 = i1 + 1\n    else\n      i2 = i2 + 1\n    end\n  end\n\
    \  while i1 < il1 do\n    l[#l+1] = l1[il1-1-i1]\n    i1 = i1 + 1\n  end\n  while\
    \ i2 < il2 do\n    l[#l+1] = l2[il2-1-i2]\n    i2 = i2 + 1\n  end\n  return l\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0avunfz.lua:34:\
    \ expected: {1, 5, 653}\nactual: {653, 34, 3, 4, 1, 9, 5, 1, 7, 5}\nstack traceback:\n\
    \t/tmp/tmpo0avunfz.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 then\
    \ return {} end\n  if #l2 == 0 then return {} end\n  local table1 = setmetatable({},\
    \ {__index=table})\n  local table2 = setmetatable({}, {__index=table})\n  for\
    \ i = 1, #l1 do\n    table1[l1[i]] = true\n  end\n  for i = 1, #l2 do\n    table2[l2[i]]\
    \ = true\n  end\n  local common_pairs = pairs(table1) -- All pairs.\n  for _,\
    \ pair in ipairs(common_pairs) do\n    if pair in table2 then table.insert(common_pairs,\
    \ pair) end\n  end\n  table2 = table2\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6kgjfclz.lua:19: ''then'' expected near ''in''

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    assert(#l1\
    \ ~= 0, \"Table 1 should not be empty\")\n    assert(#l2 ~= 0, \"Table 2 should\
    \ not be empty\")\n    local common = {}\n    for i = 1, #l1 do\n        common[i]\
    \ = l1[i] or l2[i]\n    end\n    return setmetatable(common, {__index = function(self,\
    \ key)\n        local i = key\n        if i < #l1 then\n            return l1[i]\n\
    \        end\n        if i < #l2 then\n            return l2[i]\n        end\n\
    \        return nil\n    end})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk00lcbhf.lua:28:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5}\nstack traceback:\n\t\
    /tmp/tmpk00lcbhf.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local hash\
    \ = {}\n    for i, v in pairs(l1) do\n        if hash[v] == nil then\n       \
    \     hash[v] = true\n            table.insert(l2, v)\n        end\n    end\n\
    \    return l2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94boq1oh.lua:20:\
    \ expected: {1, 5, 653}\nactual: {5, 7, 1, 5, 9, 653, 121, 1, 4, 3, 34, 653, 2,\
    \ 5}\nstack traceback:\n\t/tmp/tmp94boq1oh.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if #l1 == 0\
    \ then return {} end\n    if #l2 == 0 then return {} end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi8oeq6wj.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local results\
    \ = {}\n    for _, v in ipairs(l1) do\n        local found = false\n        for\
    \ _, v2 in ipairs(l2) do\n            if v == v2 then\n                found =\
    \ true\n                break\n            end\n        end\n        if not found\
    \ then\n            table.insert(results, v)\n        end\n    end\n    return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiy4mjj0y.lua:26:\
    \ expected: {1, 5, 653}\nactual: {4, 3, 34, 2}\nstack traceback:\n\t/tmp/tmpiy4mjj0y.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if l1 == nil\
    \ then\n    return nil\n  elseif l2 == nil then\n    return l1\n  else\n    local\
    \ n = #l1\n    local m = #l2\n    local ret = {}\n    for i = 1, n do\n      table.insert(ret,\
    \ l1[i])\n      for j = 1, m do\n        if l1[i] == l2[j] then\n          table.insert(ret,\
    \ l1[i])\n        end\n      end\n    end\n    return ret\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqz25d8nb.lua:30:\
    \ expected: {1, 5, 653}\nactual: {1, 1, 4, 3, 34, 653, 653, 2, 5, 5, 5}\nstack\
    \ traceback:\n\t/tmp/tmpqz25d8nb.lua:30: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v1 ==\
    \ v2 then table.insert(t, v1) end\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1m2hpfwp.lua:19:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp1m2hpfwp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local tables\
    \ = {}\n  for _, v in pairs(l1) do\n    local found = false\n    for _, v2 in\
    \ pairs(l2) do\n      if v == v2 then\n        found = true\n        break\n \
    \     end\n    end\n    if not found then\n      tables[#tables+1] = v\n    end\n\
    \  end\n  table.sort(tables)\n  return tables\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiwzzx3ja.lua:27:\
    \ expected: {1, 5, 653}\nactual: {2, 3, 4, 34}\nstack traceback:\n\t/tmp/tmpiwzzx3ja.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local set = {}\n\
    \  for k in pairs(l1) do\n    set[k] = true\n  end\n  for k in pairs(l2) do\n\
    \    set[k] = true\n  end\n  return set\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6smop1vt.lua:20:\
    \ expected: {1, 5, 653}\nactual: {true, true, true, true, true, true, true}\n\
    stack traceback:\n\t/tmp/tmp6smop1vt.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local set =\
    \ {}\n    for _, v in pairs(l1) do\n        set[#set + 1] = v\n    end\n    for\
    \ _, v in pairs(l2) do\n        set[#set + 1] = v\n    end\n    return set\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqh672j8b.lua:20:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 5, 7, 1, 5, 9, 653,\
    \ 121}\nstack traceback:\n\t/tmp/tmpqh672j8b.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local n1 = #l1\n\
    \  local n2 = #l2\n  local m\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyslegoe3.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n   if #l1 == 0\
    \ then return l2 end\n   if #l2 == 0 then return l1 end\n   for i = 1, #l1 do\n\
    \      local e = l1[i]\n      for j = 1, #l2 do\n         if e == l2[j] then\n\
    \            l1[i] = nil\n            return l1\n         end\n      end\n   end\n\
    \   return l2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqe2nbnn.lua:24:\
    \ expected: {1, 5, 653}\nactual: {2=4, 3=3, 4=34, 5=653, 6=2, 7=5}\nstack traceback:\n\
    \t/tmp/tmpiqe2nbnn.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for k, v in pairs(l1) do\n    if next(l2, v) ~= nil then\n      table.insert(common,\
    \ v)\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    invalid key to ''next''

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659978471
- exit_code: 0
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t1 = {}\n\
    \  local t2 = {}\n  local i1\n  for i1, v1 in ipairs(l1) do\n    t1[#t1 + 1] =\
    \ v1\n  end\n  for i2, v2 in ipairs(l2) do\n    t2[#t2 + 1] = v2\n  end\n  table.sort(t1)\n\
    \  table.sort(t2)\n  local ret = {}\n  for i1, v1 in ipairs(t1) do\n    for i2,\
    \ v2 in ipairs(t2) do\n      if v1 == v2 then\n        table.insert(ret, v1)\n\
    \        break\n      end\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 ~= #l2\
    \ then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp16x1mju4.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 then\
    \ return nil end\n  if #l2 == 0 then return l1 end\n  local common = {}\n  local\
    \ i = 1\n  while i < #l1 and i < #l2 do\n    if l1[i] ~= l2[i] then\n      common[#common+1]\
    \ = l1[i]\n      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if i\
    \ == #l1 then common[#common+1] = nil end\n  if i == #l2 then common[#common+1]\
    \ = nil end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7a14p7x.lua:27:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2}\nstack traceback:\n\t/tmp/tmpk7a14p7x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if #l1 == 0\
    \ then return nil end\n    if #l2 == 0 then return l1 end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgk93yy2w.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 then\
    \ return nil end\n  if #l2 == 0 then return l1 end\n  local m\n  local n\n  local\
    \ k\n  for k = 1, #l1 do\n    m = {}\n    n = {}\n    for k = 1, #l2 do\n    \
    \  if l1[k] == l2[k] then\n        table.insert(m, l1[k])\n      else\n      \
    \  table.insert(n, l2[k])\n      end\n    end\n    if #m > 0 then\n      table.sort(m)\n\
    \      table.sort(n)\n      table.insert(l1, table.concat(m, \",\"))\n      table.insert(l2,\
    \ table.concat(n, \",\"))\n      break\n    end\n  end\n  return l1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_6p4lb2.lua:36:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5}\nstack traceback:\n\t\
    /tmp/tmp1_6p4lb2.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local n = #l1\n  if #l2 <= n then return {} end\n  table.sort(l1)\n\
    \  table.sort(l2)\n  for i = 0, n do\n    local l1, l2 = l1[i], l2[i]\n    if\
    \ l1 == l2 then common[#common+1] = l1 end\n  end\n  common[#common+1] = nil\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplspj9b_m.lua:23:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmplspj9b_m.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 then\
    \ return l2 end\n  if #l2 == 0 then return l1 end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg4ul88yu.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local result\
    \ = {}\n    for _, v in pairs(l1) do\n        if l2[v] == nil then\n         \
    \   result[v] = true\n        elseif l2[v] ~= v then\n            result[v] =\
    \ l2[v]\n        end\n    end\n    for _, v in pairs(l2) do\n        if result[v]\
    \ == nil then\n            result[v] = true\n        end\n    end\n    return\
    \ table.remove(result, true)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptiowffj5.lua:20:\
    \ bad argument #2 to 'remove' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmptiowffj5.lua:20: in local 'candidate'\n\t/tmp/tmptiowffj5.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local hash1 =\
    \ setmetatable({}, {__index = function() return 0 end})\n  for i, v in ipairs(l1)\
    \ do\n    hash1[v] = true\n  end\n  local hash2 = setmetatable({}, {__index =\
    \ function() return 0 end})\n  for i, v in ipairs(l2) do\n    hash2[v] = true\n\
    \  end\n  local hash = {}\n  for v in pairs(hash1) do\n    if hash2[v] then\n\
    \      hash[v] = true\n    end\n  end\n  return setmetatable({}, {__index = function()\
    \ return hash end})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbuqig1g.lua:27:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmpqbuqig1g.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local ret = {}\n\
    \  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1 <= i2 do\n    local\
    \ x = l1[i1]\n    while j1 <= j2 do\n      if l2[j1] == x then\n        ret.insert(x)\n\
    \      else\n        break -- search on next element of l2\n      end\n      j1\
    \ = j1 + 1\n    end\n    i1 = i1 + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0qcf_4vo.lua:14:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmp0qcf_4vo.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp0qcf_4vo.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978471
- exit_code: -1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local result\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 do\n    if l2[i1] == nil then\n  \
    \    table.insert(result, l1[i1])\n      i1 = i1 + 1\n    else\n      i2 = i2\
    \ + 1\n      if i2 >= #l2 then\n        i1 = i1 + 1\n        i2 = 1\n      elseif\
    \ l1[i1] > l2[i2] then\n        table.insert(result, l1[i1])\n        i1 = i1\
    \ + 1\n      else\n        table.insert(result, l2[i2])\n        i2 = i2 + 1\n\
    \      end\n    end\n  end\n  if i1 < #l1 then\n    for i = i1, #l1 do\n     \
    \ table.insert(result, l1[i])\n    end\n  end\n  if i2 < #l2 then\n    for i =\
    \ i2, #l2 do\n      table.insert(result, l2[i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978476
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l1 = {unpack(l1)}\n\
    \  local l2 = {unpack(l2)}\n  local i1 = 1\n  local i2 = 1\n  local i1s = set{}\n\
    \  local i1sLen = 0\n  local i2s = set{}\n  local i2sLen = 0\n  local i3 = 0\n\
    \  local i3Len = 0\n  local k\n  local l1, l2\n  repeat\n    i3 = i3 + 1 -- Increment\
    \ index of second table.\n    i3Len = i3Len + #l2[#l2] -- Increment length of\
    \ second table.\n    if i3Len > #l1[#l1] then -- Stop if end of second table reached.\n\
    \      break\n    end\n    if l2[#l2] ~= l1[#l1][i3] then\n      i2s = i2s { l2[#l2]\
    \ }\n      i2sLen = i2sLen + 1\n    end\n    if #l1 == 1 then -- Stop if end of\
    \ first table reached.\n      break\n    end\n    if l2[#l2] == l1[#l1][i3] then\
    \ -- Match found in second table.\n      i2s = i2s { l2[#l2] }\n      i2sLen =\
    \ i2sLen + 1\n      i1 = i1 + 1\n      i1s = i1s { l1[#l1][i3] }\n      i1sLen\
    \ = i1sLen + 1\n      -- If the second table has been exhausted, increment index\
    \ of first table.\n      while i2 == i2 and i2 < #l1 do\n        i2 = i2 + 1\n\
    \      end\n      -- If the first table has been exhausted, increment index of\
    \ second table.\n      while i1 == i1 and i1 < #l2 do\n        i1 = i1 + 1\n \
    \     end\n      -- If matching element found between tables, break.\n      if\
    \ i1 < #l1 and i2 < #l2 then\n        break\n      end\n      -- If matching element\
    \ not found, increment index of first table.\n      if i1 == #l1 then\n      \
    \  i1 = i1 + 1\n      end\n      -- If matching element not found, increment index\
    \ of second table.\n      if i2 == #l2 then\n        i2 = i2 + 1\n      end\n\
    \    end\n  until i3Len >= #l1[#l1] and i2 < #l2 and l2[#l2] == l1[#l1][i3]\n\
    \  if #l1 < #l2 then\n    i1s = i1s { l1[#l1] }\n    i1sLen = i\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_241zti1.lua:73: ''end'' expected (to close ''if'' at line
    60) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local set1 =\
    \ setmetatable({}, {__index=set})\n  local set2 = setmetatable({}, {__index=set})\n\
    \  for _, v in pairs(l1) do\n    set1[v] = true\n  end\n  for _, v in pairs(l2)\
    \ do\n    set2[v] = true\n  end\n  return set2.keys - set1.keys\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpex5h83f8.lua:15:\
    \ attempt to perform arithmetic on a nil value (field 'keys')\nstack traceback:\n\
    \t/tmp/tmpex5h83f8.lua:15: in local 'candidate'\n\t/tmp/tmpex5h83f8.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i, j, ii,\
    \ jj\n  local result = {}\n  -- Iterate over keys in smaller list\n  for ii, i\
    \ in ipairs(l1) do\n    -- Check if it exists in larger list\n    for jj, j in\
    \ ipairs(l2) do\n      -- If equal, skip it\n      if i == j then continue end\n\
    \      -- If one is nil, skip it\n      if l1 == nil or l2 == nil then continue\
    \ end\n      -- If keys are different, skip it\n      if i < j then continue end\n\
    \      -- If keys are equal, add it to result\n      table.insert(result, i)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugia3hr5.lua:14: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l = {}\n\
    \  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local v1 = l1[i1]\n    local\
    \ v2 = l2[i2]\n    if not v then\n      table.insert(l, v1)\n      i1 = i1 + 1\n\
    \    elseif v == v1 then\n      i1 = i1 + 1\n    else\n      table.insert(l, v2)\n\
    \      i2 = i2 + 1\n    end\n  end\n  return table.remove(l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3i1bmhey.lua:28:\
    \ expected: {1, 5, 653}\nactual: 5\nstack traceback:\n\t/tmp/tmp3i1bmhey.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 then\
    \ return {} end\n  if #l2 == 0 then return {} end\n  if #l1 <= 0 then return {}\
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5,\
    \ 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3,\
    \ 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3,\
    \ 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd48uhv10.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local u = {}\n\
    \    for i = 1, #l1 do\n        u[l2[i]] = true\n    end\n    for i = 1, #l2 do\n\
    \        if u[l2[i]] then table.insert(u,l2[i]) end\n    end\n    return u\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqalw2dd.lua:20:\
    \ expected: {1, 5, 653}\nactual: {true, 5, 7, 1, true, 5, true, 9, true, 653,\
    \ 121, 121=true, 653=true}\nstack traceback:\n\t/tmp/tmptqalw2dd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 then\
    \ return l2 end\n  if #l2 == 0 then return l1 end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg4ul88yu.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 0, #l1, 1\n  while i2 <= #l2 do\n    if l1[i1] == l2[i2] then -- Found common\
    \ element.\n      i1 = i1 + 1\n      i2 = i2 + 1\n    else -- Find next common\
    \ element.\n      if i1 == i2 then -- Found unique common element.\n        break\n\
    \      end\n      i1 = i1\n      i2 = i2 + 1\n    end\n  end\n  if i1 == #l1 then\
    \ -- Found unique common element.\n    return l1\n  end\n  return nil\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp580s6_km.lua:29:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmp580s6_km.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 then\
    \ return end\n  if #l2 == 0 then return end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_9sa4z2a.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local keys =\
    \ {}\n  for _, k in pairs(l1) do\n    if l1.[k] ~= nil then\n      keys[k] = l1.[k]\n\
    \    end\n  end\n  for _, k in pairs(l2) do\n    if l2.[k] ~= nil then\n     \
    \ keys[k] = l2.[k]\n    end\n  end\n  return table.sort(keys)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxafiyp9h.lua:9: <name> expected near ''[''

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local l3, l4\
    \ = {}, {}\n    local i1, i2, i3, i4\n    local c1, c2\n    for i1, i2, i3, i4\
    \ in ipairs(l1) do\n        c1 = l1[i1]\n        c2 = l2[i3]\n        if c1 ==\
    \ c2 then\n            l3[i1] = true\n            l4[i3] = true\n        elseif\
    \ c1 < c2 then\n            l3[i1] = true\n        else\n            l4[i3] =\
    \ true\n        end\n    end\n    return l3, l4\nend\n</code>\n<|/ a dscore=2\
    \ tags=sorting,lua |>\n<| c |>\nThe \"common elements\" are actually the keys\
    \ of the tables. So if your tables are {a=1, b=2} and {a=2, b=3}, then the common\
    \ elements are {a=1} and {b=2}.\n<|/ c |>\n<| c |>\nWhat about the case where\
    \ you have multiple identical values in your tables? How do you want to handle\
    \ that?\n<|/ c |>\n<| c |>\nThat's a good point. I've updated the code to handle\
    \ that case.\n<|/ c |>\n<| a tags=sorting,lua |>\nYou need more info and a better\
    \ example (maybe some expected output)\n<code>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpys3wwitr.lua:24: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local i1 =\
    \ 0\n    local i2 = 0\n    local length = math.min(#l1, #l2)\n    local table1\
    \ = {}\n    local table2 = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1k1ps8rb.lua:22: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i = 1\n\
    \  local j = 1\n  local l3 = {}\n  while i < #l1 and j < #l2 do\n    if l1.[i]\
    \ == l2.[j] then\n      table.insert(l3, l1.[i])\n      i = i + 1\n      j = j\
    \ + 1\n    else\n      if l1.[i] == l2.[j] then\n        i = i + 1\n      elseif\
    \ l1.[i] > l2.[j] then\n        j = j + 1\n      else\n        i = i + 1\n   \
    \   end\n    end\n  end\n  return l3\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqrx1tt43.lua:11: <name> expected near ''[''

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  while i1 ~= i2 do\n    local v1 = l1[i1]\n    local v2 = l2[i2]\n\
    \    if v1 < v2 then return end\n    if v1 > v2 then i1, i2 = i2, i1 end\n   \
    \ i1, i2 = i1 + 1, i2 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvtu8dcef.lua:21:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpvtu8dcef.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local c = {}\n\
    \    local i = 1\n    for i=1, #l1 do\n        if c[i] == nil then\n         \
    \   c[i] = l1[i]\n        end\n    end\n    for i=1, #l2 do\n        if c[i] ==\
    \ nil then\n            c[i] = l2[i]\n        end\n    end\n    return c\nend\n\
    </cell>\n<code language=lua-1.5>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgjb5il_l.lua:21: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: -1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local function\
    \ comp(x, y) return x == y end\n  local t1 = {}\n  local t2 = {}\n  local i1,\
    \ i2 = 1, #l1\n  while i1 <= i2 do\n    local x = l1[i1]\n    table.insert(t1,\
    \ x)\n    local i3 = i1 + 1\n    while i3 <= i2 do\n      local y = l2[i3]\n \
    \     if comp(x, y) then\n        table.insert(t1, y)\n        i1 = i3\n     \
    \ else\n        i3 = i3 + 1\n      end\n    end\n    i1 = i1 + 1\n  end\n  i1\
    \ = 1\n  i2 = #l2\n  while i1 <= i2 do\n    local x = l2[i1]\n    table.insert(t2,\
    \ x)\n    i1 = i1 + 1\n  end\n  t1 = table.sort(t1)\n  t2 = table.sort(t2)\n \
    \ local common = {}\n  for i1, x in ipairs(t1) do\n    for i2, y in ipairs(t2)\
    \ do\n      if x == y then\n        table.insert(common, x)\n      end\n    end\n\
    \  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978476
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local set1\
    \ = set(\"{\" .. l1 .. \"}\")\n    local set2 = set(\"{\" .. l2 .. \"}\")\n  \
    \  if set1 ~= set2 then\n        local intersection = set1 & set2\n        local\
    \ not_intersection = set1 ^ set2\n        local common = {}\n        for value\
    \ in intersection do common[value] = true end\n        for value in not_intersection\
    \ do common[value] = false end\n        return common\n    else\n        return\
    \ {}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi77rj8aj.lua:7:\
    \ attempt to concatenate a table value (local 'l1')\nstack traceback:\n\t/tmp/tmpi77rj8aj.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpi77rj8aj.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local tables\
    \ = {}\n  for i = 1, #l1 do\n    tables[l1[i]] = true\n  end\n  for i = 1, #l2\
    \ do\n    if tables[l2[i]] then\n      tables[l2[i]] = nil\n      table.insert(l2,\
    \ l2[i])\n    end\n  end\n  return table.concat(l2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu0p8xqch.lua:23:\
    \ expected: {1, 5, 653}\nactual: \"5715965312151653\"\nstack traceback:\n\t/tmp/tmpu0p8xqch.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  -- Sort inputs\
    \ to remove duplicates.\n  local function sort_list(t)\n    local s = terralib.newlist()\n\
    \    for _, v in ipairs(t) do\n      table.insert(s, v)\n    end\n    table.sort(s)\n\
    \    return s\n  end\n  l1 = sort_list(l1)\n  l2 = sort_list(l2)\n  -- Create\
    \ hash map.\n  local hash = {}\n  local i = 1\n  for _, v in ipairs(l1) do\n \
    \   hash[v] = i\n    i = i + 1\n  end\n  -- Find all elements in l2 that are in\
    \ l1.\n  local result = terralib.newlist()\n  for i, v in ipairs(l2) do\n    if\
    \ hash[v] ~= i then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp22agslro.lua:9:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmp22agslro.lua:9:\
    \ in local 'sort_list'\n\t/tmp/tmp22agslro.lua:16: in local 'candidate'\n\t/tmp/tmp22agslro.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if l1 == nil\
    \ then\n        return l2\n    elseif l2 == nil then\n        return l1\n    elseif\
    \ #l1 ~= #l2 then\n        return nil\n    end\n    local table = {}\n    for\
    \ i = 1, #l1 do\n        table.insert(table[#table], l1[i])\n    end\n    for\
    \ i = 1, #l2 do\n        table.insert(table[#table], l2[i])\n    end\n    table.sort(function(v1,\
    \ v2)\n        return v1 <  v2 or\n              (v1 == v2 and #v1 < #v2)\n  \
    \  end)\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi0pra55y.lua:16:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmpi0pra55y.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpi0pra55y.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if #l1 == 0\
    \ then return l2 end\n    if #l2 == 0 then return l1 end\n    if l1[#l1] == l2[#l2]\
    \ then\n        return common(l1[#l1], l2)\n    end\n    local i1, j1, len1 =\
    \ next(l1), next(l1), #l1\n    local i2, j2, len2 = next(l2), next(l2), #l2\n\
    \    while i1 <= i2 do\n        if l1[i1] == l2[j2] then\n            j1 = j1\
    \ + len1\n            i1 = i1 + len1\n        elseif l1[i1] > l2[j2] then\n  \
    \          -- Move l2's pointers to l1's positions and continue to compare l2.\n\
    \            j2 = j2 + len2\n            len2 = len2 + len2\n            if j2\
    \ >= #l2 then\n                return nil\n            end\n        else\n   \
    \         -- Move l1's pointers to l2's positions and continue to compare l1.\n\
    \            i1 = i1 + len1\n            len1 = len1 + len1\n            if i1\
    \ >= #l1 then\n                return nil\n            end\n        end\n    end\n\
    \    if j2 > #l2 then\n        return nil\n    end\n    return common(l1, l2:sub(1,j2))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lezmfqv.lua:43:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmp2lezmfqv.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n   local ret =\
    \ {}\n   for i = 1, #l1 do\n      for j = 1, #l2 do\n         if l1[i] == l2[j]\
    \ then\n            table.insert(ret, l1[i])\n         end\n      end\n   end\n\
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18ov_61f.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp18ov_61f.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if l1 == nil\
    \ or l2 == nil then return nil end\n  local t = {}\n  for _, v in ipairs(l1) do\n\
    \    if v == nil or l2[v] == nil then t[v] = nil end\n  end\n  for _, v in ipairs(l2)\
    \ do\n    if v == nil or t[v] == nil then t[v] = nil end\n  end\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprk9b90d4.lua:21:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmprk9b90d4.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for k, v in pairs(l1) do\n        if l2.Contains(k) then\n            t[#t\
    \ + 1] = k\n        end\n    end\n    return table.sort(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmvgzvmlw.lua:9:\
    \ attempt to call a nil value (field 'Contains')\nstack traceback:\n\t/tmp/tmpmvgzvmlw.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpmvgzvmlw.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local set = terralib.newlist()\n\
    \  for i, v1 in pairs(l1) do\n    for j, v2 in pairs(l2) do\n      if v1 == v2\
    \ then continue end\n      if not v2 == nil and v2 == v1 then\n        set[#set\
    \ + 1] = v1\n      end\n    end\n  end\n  return set\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm6dfey_o.lua:10: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local n = #l1\
    \ + 1\n  if #l2 > n then n = #l2 + 1 end\n  local t1 = {}\n  local t2 = {}\n \
    \ local i1 = 0\n  local i2 = 0\n  while i1 <= n and i2 <= n do\n    if l1[i1]\
    \ == l2[i2] then\n      table.insert(t2, l2[i2])\n      i2 = i2 + 1\n    else\n\
    \      table.insert(t1, l1[i1])\n      i1 = i1 + 1\n    end\n  end\n  return t1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppuj4q3x7.lua:28:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5}\nstack traceback:\n\t\
    /tmp/tmppuj4q3x7.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local set1, set2\
    \ = {}, {}\n  for _, e in ipairs(l1) do\n    set1[e] = true\n  end\n  for _, e\
    \ in ipairs(l2) do\n    set2[e] = true\n  end\n  set1 = set1 or {}\n  set2 = set2\
    \ or {}\n  local ret = {}\n  for k, v in pairs(set1) do\n    if set2[k] then\n\
    \      ret[#ret + 1] = v\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdyxmhe7.lua:28:\
    \ expected: {1, 5, 653}\nactual: {true, true, true}\nstack traceback:\n\t/tmp/tmpxdyxmhe7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local keys =\
    \ {}\n  local i1\n  for i1, i in ipairs(l1) do\n    keys[i] = true\n  end\n  for\
    \ i2, i in ipairs(l2) do\n    if keys[i] then\n      keys.i = true\n    end\n\
    \  end\n  local i\n  for i = 1, #keys do\n    if not keys.i then\n      keys.i\
    \ = i\n      return i\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpozm67sdq.lua:29:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpozm67sdq.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal common\
    \ = setmetatable({}, {__index = nil})\n\tfor k, v in pairs(l1) do\n\t\tif l2.has_key(v)\
    \ then\n\t\t\tcommon[k] = v\n\t\tend\n\tend\n\treturn common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph8v7iifh.lua:9:\
    \ attempt to call a nil value (field 'has_key')\nstack traceback:\n\t/tmp/tmph8v7iifh.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmph8v7iifh.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local t1 =\
    \ {}\n    local t2 = {}\n    for i, v in pairs(l1) do table.insert(t1,v) end\n\
    \    for i, v in pairs(l2) do table.insert(t2,v) end\n    table.sort(t1)\n   \
    \ table.sort(t2)\n    local k1, k2 = {}, {}\n    for i, v in ipairs(t1) do\n \
    \       if not (k1[v] or k2[v]) then\n            table.insert(k1, v)\n      \
    \  else\n            table.insert(k2, v)\n        end\n    end\n    return k1,\
    \ k2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4tnvd14.lua:27:\
    \ expected: {1, 5, 653}\nactual: {1, 2, 3, 4, 5, 34, 653}\nstack traceback:\n\t\
    /tmp/tmpx4tnvd14.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if #l1 ~= #l2\
    \ then\n        return nil\n    end\n    local i = 1\n    local j = 1\n    local\
    \ c1 = {}\n    local c2 = {}\n    while i <= #l1 and j <= #l2 do\n        if l1[i]\
    \ == l2[j] then\n            table.insert(c1, l1[i])\n            table.insert(c2,\
    \ l2[j])\n            i = i + 1\n            j = j + 1\n        elseif l1[i] <\
    \ l2[j] then\n            table.insert(c1, l1[i])\n            i = i + 1\n   \
    \     else\n            table.insert(c2, l2[j])\n            j = j + 1\n     \
    \   end\n    end\n    \n    if i == #l1 then\n        return table.concat(c1,\
    \ \" \")\n    elseif j == #l2 then\n        return table.concat(c2, \" \")\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqqc4bxb.lua:39:\
    \ expected: {1, 5, 653}\nactual: \"5 7 1 5 9 653\"\nstack traceback:\n\t/tmp/tmpgqqc4bxb.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  -- This algorithm\
    \ is based on a sorting network in which the value\n  -- at index 1 is used to\
    \ determine whether a value from index 1\n  -- is less than that value, and so\
    \ on in an ascending order.\n  -- It works by examining all pairs of values from\
    \ the two lists\n  -- in parallel. Since there are an odd number of values in\
    \ both lists\n  -- we can determine which ones come first: if the values are equal\n\
    \  -- then the common value is first. If the values are equal and the\n  -- second\
    \ value is less than the first, the first value is used.\n  -- The resulting list\
    \ is then sorted.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp502cgmmv.lua:26: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local common\
    \ = {}\n    for i=1, #l1 do\n        local j = 1\n        for k=1, #l2 do\n  \
    \          if l1[i] == l2[k] then\n                common[i] = common[i] or j\n\
    \                j = j + 1\n            end\n        end\n    end\n    return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptq324qha.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 5=1, 7=1}\nstack traceback:\n\t/tmp/tmptq324qha.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local i1, i2\
    \ = 1, #l1\n    while i1 do\n        i2, i1 = i1, i2 - 1\n        if not l2[i2]\
    \ then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdabgozyf.lua:18:\
    \ expected: {1, 5, 653}\nactual: false\nstack traceback:\n\t/tmp/tmpdabgozyf.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      local v1 = l1[i1]\n      local v2 = l2[j2]\n   \
    \   if v1 == v2 then\n        common[v1] = 1\n        j1 = j1 + 1\n      elseif\
    \ v1 < v2 then\n        common[v2] = 1\n        i1 = i1 + 1\n      else\n    \
    \    common[v1] = 1\n        j2 = j2 + 1\n      end\n    end\n    i1, j1 = i1\
    \ + 1, j1 + 1\n  end\n  -- Return the unique elements\n  for i = 3, #common do\n\
    \    if not common[i] then\n      common[#common+i] = i\n    end\n  end\n  --\
    \ Return remaining common elements (if any)\n  for i = 3, #common do\n    if not\
    \ common[i] then\n      return nil, common[#common]\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps003q0hj.lua:17:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmps003q0hj.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmps003q0hj.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local v1 = setmetatable({},\
    \ {__index = setmetatable({}, {__index = nil})})\n  local v2 = setmetatable({},\
    \ {__index = setmetatable({}, {__index = nil})})\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjvv_5rjt.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local key = {}\n\
    \  for i = 1, #l1 do\n    key[l1[i]] = true\n  end\n  for i = 1, #l2 do\n    if\
    \ not key[l2[i]] then\n      return nil\n    end\n  end\n  return l1 -- return\
    \ unsorted unique elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplgwwc1ly.lua:22:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmplgwwc1ly.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal t1=#l1,\
    \ t2=#l2, common={}\n\tfor i=1,t1 do\n\t\tfor j=1,t2 do\n\t\t\tif l1[i] == l2[j]\
    \ then\n\t\t\t\ttable.insert(common, l1[i])\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8p3h_2yp.lua:7: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n   local common\
    \ = {}\n   local i1\n   local i2\n   for i=1, #l1 do\n      i1 = l1[i]\n     \
    \ for j=1, #l2 do\n         i2 = l2[j]\n         if i1 < i2 then\n           \
    \ table.insert(common, i1)\n            table.insert(common, i2)\n         end\n\
    \      end\n   end\n   return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6wappgc.lua:26:\
    \ expected: \n{1, 5, 653}\nactual: \n{\n    1,\n    5,\n    1,\n    7,\n    1,\n\
    \    5,\n    1,\n    9,\n    1,\n    653,\n    1,\n    121,\n    4,\n    5,\n\
    \    4,\n    7,\n    4,\n    5,\n    4,\n    9,\n    4,\n    653,\n    4,\n  \
    \  121,\n    3,\n    5,\n    3,\n    7,\n    3,\n    5,\n    3,\n    9,\n    3,\n\
    \    653,\n    3,\n    121,\n    34,\n    653,\n    34,\n    121,\n    2,\n  \
    \  5,\n    2,\n    7,\n    2,\n    5,\n    2,\n    9,\n    2,\n    653,\n    2,\n\
    \    121,\n    5,\n    7,\n    5,\n    9,\n    5,\n    653,\n    5,\n    121\n\
    }\nstack traceback:\n\t/tmp/tmpz6wappgc.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal set1 =\
    \ setmetatable({}, {__mode = \"v\"})\n\tlocal set2 = setmetatable({}, {__mode\
    \ = \"v\"})\n\tfor _, v in ipairs(l1) do\n\t\tset1[v] = true\n\tend\n\tfor _,\
    \ v in ipairs(l2) do\n\t\tset2[v] = true\n\tend\n\tlocal common = {}\n\tfor k\
    \ in pairs(set1) do\n\t\tif set2[k] then\n\t\t\ttable.insert(common, k)\n\t\t\
    end\n\tend\n\treturn common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0c4vopum.lua:28:\
    \ expected: {2, 3}\nactual: {3, 2}\nstack traceback:\n\t/tmp/tmp0c4vopum.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local l = {}\n\
    \    for i, v in ipairs(l1) do\n        table.insert(l, v)\n    end\n    for i,\
    \ v in ipairs(l2) do\n        if table.find(l, v) ~= nil then\n            table.remove(l,\
    \ v)\n        end\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppc616c19.lua:12:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmppc616c19.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmppc616c19.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 then\
    \ return l2 end\n  if #l2 == 0 then return l1 end\n  local tbl1 = {}\n  local\
    \ tbl2 = {}\n  for i, v in ipairs(l1) do\n    tbl1[v] = true\n  end\n  for i,\
    \ v in ipairs(l2) do\n    tbl2[v] = true\n  end\n  for v in pairs(tbl1) do\n \
    \   if not tbl2[v] then tbl1[v] = nil end\n  end\n  return tbl1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplcvc9q55.lua:26:\
    \ expected: {1, 5, 653}\nactual: {true, 5=true, 653=true}\nstack traceback:\n\t\
    /tmp/tmplcvc9q55.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local n1 =\
    \ #l1\n    local n2 = #l2\n    local i1 = 0\n    local i2 = 0\n    local common\
    \ = {}\n    while i1 < n1 and i2 < n2 do\n        if l1[i1] == l2[i2] then\n \
    \           common[#common+1] = l1[i1]\n            i1 = i1 + 1\n            i2\
    \ = i2 + 1\n        elseif l1[i1] < l2[i2] then\n            i1 = i1 + 1\n   \
    \     else\n            i2 = i2 + 1\n        end\n    end\n    if i1 < n1 then\n\
    \        common[#common+1] = l1[i1]\n    end\n    if i2 < n2 then\n        common[#common+1]\
    \ = l2[i2]\n    end\n    return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe45tmjce.lua:35:\
    \ expected: {1, 5, 653}\nactual: {653, 2}\nstack traceback:\n\t/tmp/tmpe45tmjce.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v\
    \ == v2 then\n        common[v] = true\n      end\n    end\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzaedi1tf.lua:21:\
    \ expected: {1, 5, 653}\nactual: {true, 5=true, 653=true}\nstack traceback:\n\t\
    /tmp/tmpzaedi1tf.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local tbl =\
    \ {}\n    for i = 1, #l1, 1 do\n        for j = 1, #l2, 1 do\n            local\
    \ t = {l1[i], l2[j]}\n            if tbl.find(t) ~= nil then\n               \
    \ tbl[t] = tbl[t] + 1\n            else\n                tbl[t] = 1\n        \
    \    end\n        end\n    end\n    local result = {}\n    for k, v in pairs(tbl)\
    \ do\n        table.insert(result, k)\n    end\n    return table.sort(result)\n\
    end\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis isn't an answer to the question,\
    \ it's a different approach to the problem.\n<|/ c |>\n<| c |>\nI made it more\
    \ general. Maybe I got it wrong.\n<|/ c |>\n<| c |>\nI think this algorithm is\
    \ more efficient than that in https://stackoverflow.com/a/59162750/1211872, especially\
    \ when the table size is significantly larger than the number of combinations,\
    \ e.g. for 50 elements and 10^4 combinations.\n<|/ c |>\n<| a |>\nThis answer\
    \ uses the same algorithm as that in the other answers but it does not require\
    \ the use of any additional modules and it only requires the use of strings in\
    \ an array. It works by converting each character of the strings to a number between\
    \ 0 and 25 and then comparing these two numbers. If the numbers are equal, they\
    \ are considered the same. \n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvu06b6c6.lua:24: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local n = #l1\n\
    \    if n == 0 then return l1 end\n    local m = #l2\n    if m == 0 then return\
    \ l2 end\n    local result = {}\n    if #l1 < m then return result end\n    local\
    \ j = 0\n    local i = 1\n    while i < n do\n        if l1[i] == l2[j] then\n\
    \            if i == n then\n                if j > 0 then\n                 \
    \   table.insert(result, l2[j-1])\n                end\n            else\n   \
    \             i = i + 1\n            end\n            j = j + 1\n        else\n\
    \            if i > j then\n                table.insert(result, l1[i-1])\n  \
    \          end\n            i = i + 1\n        end\n    end\n    table.insert(result,\
    \ l2[j])\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxv_8q35.lua:39:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653}\nstack traceback:\n\t/tmp/tmppxv_8q35.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1 = 0\n\
    \  local i2 = 1\n  local common = {}\n  local size = math.min(#l1, #l2)\n  while\
    \ i1 <= size and i2 <= size do\n    if l1[i1] == l2[i2] then\n      common[#common+1]\
    \ = l1[i1]\n      i1 = i1 + 1\n      i2 = i2 + 1\n      while i1 <= size and l2[i2]\
    \ ~= l1[i1] do\n        i1 = i1 + 1\n      end\n      while i2 <= size and l1[i2]\
    \ ~= l2[i2] do\n        i2 = i2 + 1\n      end\n    else\n      if l1[i1] < l2[i2]\
    \ then\n        i1 = i1 + 1\n      else\n        i2 = i2 + 1\n      end\n    end\n\
    \  end\n  while i1 <= size do\n    common[#common+1] = l1[i1]\n    i1 = i1 + 1\n\
    \  end\n  while i2 <= size do\n    common[#common+1] = l2[i2]\n    i2 = i2 + 1\n\
    \  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa08hpw0d.lua:23:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpa08hpw0d.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpa08hpw0d.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n   local tables\
    \ = {}\n   local results = {}\n   if #l1 <= 0 then return end\n   if #l2 <= 0\
    \ then return end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptd7jgu6q.lua:21: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  -- Return nil\
    \ if either is nil.\n  if l1 == nil or l2 == nil then\n    return nil\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwuo2fz91.lua:21: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local v = {}\n\
    \    for i, v in ipairs(l1) do\n        if l2[i] then\n            for j = i,\
    \ #l2 do\n                l2[j] and l2[j] == v\n            end\n        end\n\
    \    end\n    return v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7goum31a.lua:11: syntax error near ''and''

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local c = {}\n\
    \  for _, v in ipairs(l1) do\n    if table.includes(c, v) then\n      table.insert(l2,\
    \ v)\n      table.insert(l2, v)\n      table.insert(l2, v)\n    else\n      table.insert(c,\
    \ v)\n    end\n  end\n  table.sort(l2)\n  return l2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb6s9wwg6.lua:9:\
    \ attempt to call a nil value (field 'includes')\nstack traceback:\n\t/tmp/tmpb6s9wwg6.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpb6s9wwg6.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 then\
    \ return l2 end\n  if #l2 == 0 then return l1 end\n  if l1[1] < l2[1] then return\
    \ common(l1[2], l2[2]) end\n  local i1 = 1\n  local i2 = 1\n  while i1 <= #l1\
    \ and i2 <= #l2 do\n    if l1[i1] == l2[i2] then\n      i1 = i1 + 1\n      i2\
    \ = i2 + 1\n    elseif l1[i1] < l2[i2] then return common(l1[i1], l2[i2]) end\n\
    \    else return common(l1[i2], l2[i1]) end\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqexuaawx.lua:17: ''end'' expected (to close ''while'' at line
    12) near ''else''

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = {}, {}\n  for k in pairs(l1) do\n    i1[k] = true\n  end\n  for k in pairs(l2)\
    \ do\n    i2[k] = true\n  end\n  local i3 = {}\n  for k in pairs(i1) do\n    i3[k]\
    \ = true\n  end\n  for k in pairs(i2) do\n    i3[k] = true\n  end\n  local i4\
    \ = {}\n  for k in pairs(i3) do\n    i4[k] = true\n  end\n  return i4\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgcafounf.lua:31:\
    \ expected: {1, 5, 653}\nactual: {true, true, true, true, true, true, true}\n\
    stack traceback:\n\t/tmp/tmpgcafounf.lua:31: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local n = #l1\
    \ + 1\n  local m = #l2 + 1\n  local i\n  local j\n  local k = n - 1\n  local l\n\
    \  local c\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzx3tzumu.lua:24: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local n1 =\
    \ #l1\n    local n2 = #l2\n    local i,j,c\n    local t = {}\n    for i = 1,n1\
    \ do\n        -- Find smallest common element\n        c = true\n        for j\
    \ = 1,n2 do\n            if l1[i] ~= l2[j] then\n                c = false\n \
    \               break\n            end\n        end\n        if c then\n     \
    \       table.insert(t, l1[i])\n        end\n    end\n    return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsk_5nbrl.lua:30:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmpsk_5nbrl.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local seen =\
    \ {}\n  local i = #l1 + 1\n  local j\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw_o4uy6p.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n   local i\n  \
    \ local u1, u2 = {}, {}\n   for i=1, #l1, 1 do u1[i] = l1[i] end\n   for i=1,\
    \ #l2, 1 do u2[i] = l2[i] end\n   for i, v in pairs(u1) do u1[v] = i end\n   for\
    \ i, v in pairs(u2) do u2[v] = i end\n   local len1, len2 = #u1, #u2\n   if len1\
    \ == 0 or len2 == 0 then\n      return nil\n   end\n   for i=1,len1 do\n     \
    \ for j=1,len2 do\n         if u1[i] == u2[j] then\n            u1[i] = j\n  \
    \          u2[j] = i\n         end\n      end\n   end\n   return u1, u2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeisyq7l.lua:31:\
    \ expected: {1, 5, 653}\nactual: {3, 6, 3, 7, 6, 2, 6, 653=5}\nstack traceback:\n\
    \t/tmp/tmpgeisyq7l.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if l1 == nil\
    \ then return l2 end\n  if l2 == nil then return l1 end\n  local results = {}\n\
    \  local i1, i2, i3, i4\n  for i1 = 1, #l1 do\n    for i2 = i1+1, #l2 do\n   \
    \   for i3 = i2+1, #l2 do\n        if l1[i1] == l2[i2] and l1[i2] == l2[i3] then\n\
    \          if i1 > i2 then\n            i1, i2, i3, i4 = i2, i3, i1, i3\n    \
    \      elseif i1 < i2 then\n            i1, i2, i3, i4 = i3, i4, i1, i2\n    \
    \      end\n        else\n          table.insert(results, l1[i1])\n        end\n\
    \      end\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg37g22c6.lua:32:\
    \ expected: \n{1, 5, 653}\nactual: \n{\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n\
    \    3,\n    3,\n    3,\n    3,\n    3,\n    3,\n    34,\n    34,\n    34,\n \
    \   653\n}\nstack traceback:\n\t/tmp/tmpg37g22c6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local hash\
    \ = {}\n    for i = 1, #l1 do\n        hash[l1[i]] = l1[i]\n    end\n    for i\
    \ = 1, #l2 do\n        if hash[l2[i]] ~= nil then\n            return l2[i]\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfcgoph72.lua:21:\
    \ expected: {1, 5, 653}\nactual: 5\nstack traceback:\n\t/tmp/tmpfcgoph72.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if l1 == nil\
    \ then return nil end\n    if l2 == nil then return l1 end\n    local i1 = 0\n\
    \    local i2 = 0\n    while i1 < l1 or i2 < l2 do\n        if l1 == nil then\n\
    \            return l2\n        end\n        if l2 == nil then\n            return\
    \ l1\n        end\n        if l1[i1] == l2[i2] then\n            i1 = i1 + 1\n\
    \            i2 = i2 + 1\n        else\n            tableinsert(l2, l2[i])\n \
    \           i2 = i2 + 1\n        end\n    end\n    return l2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpppuhczvq.lua:11:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmpppuhczvq.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpppuhczvq.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local i1 =\
    \ 1\n    local i2 = 1\n    local hash1 = {}\n    local hash2 = {}\n    while i1\
    \ <= #l1 do\n        hash1[l1[i1]] = 1\n        i1 = i1 + 1\n    end\n    while\
    \ i2 <= #l2 do\n        hash2[l2[i2]] = 1\n        i2 = i2 + 1\n    end\n    local\
    \ common = {}\n    i1 = 1\n    i2 = 1\n    while i1 <= #l1 do\n        if hash1[l1[i1]]\
    \ == 1 then\n            while i2 < #l2 and hash2[l2[i2]] == 1 do\n          \
    \      common[l2[i2]] = l1[i1]\n                i2 = i2 + 1\n            end\n\
    \            i1 = i1 + 1\n        end\n    end\n    return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3b2vhtr.lua:37:\
    \ expected: {1, 5, 653}\nactual: {1, 5=1, 7=1, 9=1, 653=1}\nstack traceback:\n\
    \t/tmp/tmpm3b2vhtr.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n   local t1 = {}\n\
    \   local t2 = {}\n   for k, v in pairs(l1) do\n      t1[#t1 + 1] = k\n   end\n\
    \   for k, v in pairs(l2) do\n      t2[#t2 + 1] = k\n   end\n   return table.sort(t1),\
    \ table.sort(t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafsy9jre.lua:21:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpafsy9jre.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local table =\
    \ {}\n  for key, value in pairs(l1) do\n    local found = false\n    for _, compareKey\
    \ in pairs(l2) do\n      if value == compareKey then\n        found = true\n \
    \       break\n      end\n    end\n    if not found then\n      table[key] = value\n\
    \    end\n  end\n  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zw1gcbc.lua:26:\
    \ expected: {1, 5, 653}\nactual: {2=4, 3=3, 4=34, 6=2}\nstack traceback:\n\t/tmp/tmp0zw1gcbc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if l1 == nil\
    \ or l2 == nil then\n    return {}\n  end\n  local common = {}\n  for _, v in\
    \ ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2 then\n     \
    \   table.insert(common, v)\n      end\n    end\n  end\n  return common\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98jz8b1d.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp98jz8b1d.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l = {}\n\
    \  for i=1, #l1 do\n    table.insert(l, l1[i])\n  end\n  for i=1, #l2 do\n   \
    \ local j\n    for j=1, #l do\n      if l2[i] == l[j] then break end\n    end\n\
    \    if j then table.insert(l, l2[i]) end\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyvdkkk6t.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5}\nstack traceback:\n\t\
    /tmp/tmpyvdkkk6t.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local tbl1 =\
    \ {}\n  local tbl2 = {}\n  for i = 1,#l1 do tbl1[i] = l1[i] end\n  for i = 1,#l2\
    \ do tbl2[i] = l2[i] end\n  table.sort(tbl1)\n  table.sort(tbl2)\n  local len\
    \ = #tbl1\n  local ret = {}\n  -- Iterate through all common elements.\n  for\
    \ i = (len+1), #tbl2 do\n    -- See if element is in both tables.\n    if tbl1[i]\
    \ == tbl2[i] then\n      table.insert(ret, tbl1[i])\n    end\n  end\n  -- Remove\
    \ common elements from each table (if necessary).\n  for i = (len+1), #tbl1 do\n\
    \    if tbl1[i] ~= tbl2[i] then\n      table.remove(ret, tbl1[i])\n    end\n \
    \ end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0iaskmf.lua:34:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmpz0iaskmf.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 or\
    \ #l2 == 0 then\n    return {}\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpblfnjm2o.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local r\n \
    \   if type(l1) ~= 'table' then\n        error(\"expected a table\")\n    end\n\
    \    if type(l2) ~= 'table' then\n        error(\"expected a table\")\n    end\n\
    \    if #l1 ~= #l2 then\n        error(\"tables must have same number of elements\"\
    )\n    end\n    local l = {}\n    for i=1, #l1 do\n        table.insert(l, l1[i])\n\
    \    end\n    table.sort(l)\n    for i=1, #l2 do\n        if table.contains(l,\
    \ l2[i]) then\n            table.insert(r, l2[i])\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpailg_yr4.lua:23:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpailg_yr4.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpailg_yr4.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local results\
    \ = {}\n  for _, el1 in ipairs(l1) do\n    for _, el2 in ipairs(l2) do\n     \
    \ if el1 == el2 then\n        results[#results + 1] = el1\n      end\n    end\n\
    \  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp69j4rst4.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp69j4rst4.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local c1 = {}\n\
    \  local c2 = {}\n  for i, k in pairs(l1) do\n    c1[k] = true\n  end\n  for i,\
    \ k in pairs(l2) do\n    c2[k] = true\n  end\n  local a = {}\n  for k in pairs(c1)\
    \ do\n    a[#a + 1] = k\n  end\n  for k in pairs(c2) do\n    a[#a + 1] = k\n \
    \ end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9cohkuob.lua:28:\
    \ expected: {1, 5, 653}\nactual: {1, 2, 3, 4, 5, 34, 653, 1, 7, 9, 5, 121, 653}\n\
    stack traceback:\n\t/tmp/tmp9cohkuob.lua:28: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i = 1\n  for _, v in pairs(l1) do\n    for _, v2 in pairs(l2)\
    \ do\n      if v == v2 and i ~= 1 then\n        table.insert(common, v)\n    \
    \  end\n      i = i + 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpol5h3oho.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpol5h3oho.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 then\n\
    \    return l2\n  elseif #l2 == 0 then\n    return l1\n  elseif #l1 > #l2 then\n\
    \    return common(l2, l1)\n  else\n    local common = {}\n    for i = 1, #l1\
    \ do\n      table.insert(common, l1[i])\n    end\n    for i = 1, #l2 do\n    \
    \  if not table.contains(common, l2[i]) then\n        table.insert(common, l2[i])\n\
    \      end\n    end\n    return common\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0k2gr25j.lua:19:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp0k2gr25j.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp0k2gr25j.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local l = {}\n\
    \    for _, v in pairs(l1) do\n        table.insert(l, v)\n    end\n    for _,\
    \ v in pairs(l2) do\n        table.insert(l, v)\n    end\n    table.sort(l)\n\
    \    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5sjdb8k.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 1, 2, 3, 4, 5, 5, 5, 7, 9, 34, 121, 653,\
    \ 653}\nstack traceback:\n\t/tmp/tmpr5sjdb8k.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  -- Return the\
    \ intersection of two sets of unique elements.\n  local v1 = setmetatable({},\
    \ {__index = nil})\n  for _, v in ipairs(l1) do\n    v1[v] = true\n  end\n  local\
    \ v2 = setmetatable({}, {__index = nil})\n  for _, v in ipairs(l2) do\n    v2[v]\
    \ = true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps4f5sktz.lua:26: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local cs = {}\n\
    \  for k, v in pairs(l1) do\n    if k in l2 then\n      table.insert(cs, v)\n\
    \    end\n  end\n  for k, v in pairs(l2) do\n    if k ~= 1 then\n      table.insert(cs,\
    \ v)\n    end\n  end\n  table.sort(cs)\n  return cs\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzus56vyr.lua:9: ''then'' expected near ''in''

    '
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local u = {}\n\
    \  for i = 1, #l1 do\n    table.insert(u, l1[i])\n  end\n  for i = 1, #l2 do\n\
    \    table.insert(u, l2[i])\n  end\n  table.sort(u)\n  local result = {}\n  for\
    \ i = 1, #u do\n    table.insert(result, u[i])\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4wk5vnb.lua:25:\
    \ expected: {1, 5, 653}\nactual: {1, 1, 2, 3, 4, 5, 5, 5, 7, 9, 34, 121, 653,\
    \ 653}\nstack traceback:\n\t/tmp/tmpy4wk5vnb.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978471
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n   if #l1 == 0\
    \ then\n      return nil\n   end\n   if #l2 == 0 then\n      return l1\n   end\n\
    \   local tbl = {}\n   for _, v in ipairs(l1) do\n      table.insert(tbl, v)\n\
    \   end\n   for _, v in ipairs(l2) do\n      table.insert(tbl, v)\n   end\n  \
    \ return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ncg528a.lua:26:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 5, 7, 1, 5, 9, 653,\
    \ 121}\nstack traceback:\n\t/tmp/tmp0ncg528a.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local sorted\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 and v ~= nil then\n        table.insert(sorted, v)\n      end\n    end\n\
    \  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5_y5vhi.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpd5_y5vhi.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local set1 =\
    \ setmetatable({}, {__index = l1})\n  local set2 = setmetatable({}, {__index =\
    \ l2})\n  set1 = set1\n  set2 = set2\n  while #set1 ~= 0 do\n    local key, value\
    \ = next(set1)\n    local value_ = set2[key]\n    if value ~= value_ then\n  \
    \    set2[key] = value_\n    end\n    set1 = set1[key]\n  end\n  return set2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n4r42eq.lua:25:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmp5n4r42eq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for _, v in ipairs(l1) do\n    t[v] = true\n  end\n  for _, v in ipairs(l2)\
    \ do\n    if t[v] then\n      t[v] = false\n      return v\n    end\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvmjpx10.lua:22:\
    \ expected: {1, 5, 653}\nactual: 5\nstack traceback:\n\t/tmp/tmpbvmjpx10.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if l1 == nil\
    \ or l2 == nil then\n        return nil\n    end\n    if #l1 ~= #l2 then\n   \
    \     return nil\n    end\n    local len1 = #l1\n    local len2 = #l2\n    local\
    \ result = {}\n    local i1 = 0\n    local i2 = 0\n    while i1 < len1 and i2\
    \ < len2 do\n        local k1 = l1[i1]\n        local k2 = l2[i2]\n        if\
    \ k1 == k2 then\n            result[i1] = {k1}\n            i1 = i1 + 1\n    \
    \    elseif k1 < k2 then\n            result[i2] = {k2}\n            i2 = i2 +\
    \ 1\n        else\n            result[i1] = {k1}\n            i1 = i1 + 1\n  \
    \          i2 = i2 + 1\n        end\n    end\n    if i1 == len1 then\n       \
    \ return result\n    elseif i2 == len2 then\n        return result\n    end\n\
    \    -- The remaining elements are in different order.\n    i1 = i1 + 1\n    while\
    \ i1 < len1 do\n        result[i1] = {l1[i1]}\n        i1 = i1 + 1\n    end\n\
    \    i2 = i2 + 1\n    while i2 < len2 do\n        result[i2] = {l2[i2]}\n    \
    \    i2 = i2 + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp51k5w3v9.lua:24:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp51k5w3v9.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp51k5w3v9.lua:55: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local keys =\
    \ {}\n  local result = {}\n  for _, value in pairs(l1) do keys[value] = true end\n\
    \  for _, value in pairs(l2) do keys[value] = true end\n  for _, value in pairs(keys)\
    \ do\n    result[#result + 1] = value\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwn3vi9m.lua:20:\
    \ expected: {1, 5, 653}\nactual: {true, true, true, true, true, true, true, true,\
    \ true, true}\nstack traceback:\n\t/tmp/tmpgwn3vi9m.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if #l1 == 0\
    \ then\n        return l2\n    end\n    if #l2 == 0 then\n        return l1\n\
    \    end\n    local hash = {}\n    for _, v in ipairs(l1) do\n        hash[v]\
    \ = true\n    end\n    for _, v in ipairs(l2) do\n        if hash[v] then\n  \
    \          hash[v] = nil\n        else\n            table.insert(hash, v)\n  \
    \      end\n    end\n    return table.sort(hash)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare number with nil

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local c1 = {\n\
    \      pairs = {}\n    }\n  local c2 = {\n      pairs = {}\n    }\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjyv2vx70.lua:23: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local l3 =\
    \ {}\n    for k, v in pairs(l1) do\n        if l2[k] ~= nil then\n           \
    \ l3[#l3+1] = v\n        end\n    end\n    for k, v in pairs(l2) do\n        if\
    \ l3[#l3+1] ~= nil then\n            l3[#l3+1] = v\n        end\n    end\n   \
    \ return l3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfc3fbt0g.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5}\nstack traceback:\n\t\
    /tmp/tmpfc3fbt0g.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local ls = {}\n\
    \  for _, el1 in ipairs(l1) do\n    for _, el2 in ipairs(l2) do\n      if el1\
    \ == el2 then\n        ls[#ls+1] = el1\n      end\n    end\n  end\n  return table.sort(ls)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemme2k4z.lua:21:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpemme2k4z.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1\n  local\
    \ i2\n  local common\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzm330kj9.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local l3 =\
    \ {}\n    for i = 1, #l1 do\n        for j = 1, #l2 do\n            if l1[i] ==\
    \ l2[j] then\n                l3[#l3 + 1] = l1[i]\n            end\n        end\n\
    \    end\n    return setmetatable(l3, { __index = function(t, i)\n        return\
    \ i\n    end })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixe1ijyi.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpixe1ijyi.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  -- Handle empty\
    \ lists.\n  if not l1 then return {} end\n  if not l2 then return {} end\n  local\
    \ result = {}\n  local i = 1\n  -- Compare each item in l1 with the first item\
    \ in l2.\n  local function comp(a, b)\n    if l1[a] > l2[a] then return true end\n\
    \    if l1[a] < l2[a] then return false end\n    -- Otherwise, compare the remaining\
    \ items in l1 with the remaining items in l2.\n    i = i + 1\n    if i < #l1 then\
    \ return comp(l2[i], l2[i + 1]) end\n    if i < #l2 then return comp(l1[i], l1[i\
    \ - 1]) end\n  end\n  -- Compare each item in l1 with the first item in l2.\n\
    \  while i <= #l1 do\n    if comp(l1[i], l2[1]) then\n      table.insert(result,\
    \ l1[i])\n      i = i + 1\n    else\n      break\n    end\n  end\n  -- Compare\
    \ each item in l1 with the remaining items in l2.\n  i = i + 1\n  while i <= #l2\
    \ do\n    if comp(l1[i], l2[i + 1]) then\n      table.insert(result, l1[i])\n\
    \      i = i + 1\n    else\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkatkdah9.lua:14:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpkatkdah9.lua:14:\
    \ in local 'comp'\n\t/tmp/tmpkatkdah9.lua:33: in local 'candidate'\n\t/tmp/tmpkatkdah9.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local result\
    \ = {}\n  for _, v in ipairs(l1) do\n    if l2[result[v]] == nil then\n      result[v]\
    \ = true\n    end\n  end\n  for k, v in pairs(l2) do\n    if result[v] == nil\
    \ then\n      result[v] = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpncbbbj7g.lua:24:\
    \ expected: {1, 5, 653}\nactual: {true, true, true, true, true, 7=true, 9=true,\
    \ 34=true, 121=true, 653=true}\nstack traceback:\n\t/tmp/tmpncbbbj7g.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for i = 1, #l1 do\n    for j = 1, #l2 do\n      if l1[i] == l2[j] then\n\
    \        table.insert(common, i)\n      end\n    end\n  end\n  table.sort(common,\
    \ function(a, b) return l1[a] > l1[b] or l1[a] < l1[b] end)\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpddetgwtq.lua:15:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmpddetgwtq.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpddetgwtq.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n   local table\
    \ = {}\n   for _, _1, _2 in ipairs(l1) do\n      table.insert(l2, _2)\n   end\n\
    \   return setmetatable(table, getmetatable(l1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc_msaath.lua:9:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmpc_msaath.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpc_msaath.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: -1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if l1 == nil\
    \ or l2 == nil then return end\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n\
    \  while i1 <= i2 do\n    local v1 = l1[i1]\n    local v2 = l2[j1]\n    if v1\
    \ == nil or v2 == nil then break end\n    if v1 == v2 then break end\n    if type(v1)\
    \ == 'table' then i1 = i1 + 1; j1 = j1 + 1 end\n    if type(v2) == 'table' then\
    \ i2 = i2 + 1; j2 = j2 + 1 end\n  end\n  i1, i2 = i1, i2 - 1\n  j1, j2 = j1, j2\
    \ - 1\n  while j1 <= j2 do\n    local v1 = l1[i1]\n    local v2 = l2[j1]\n   \
    \ if v1 == nil or v2 == nil then break end\n    if v1 == v2 then break end\n \
    \   if type(v1) == 'table' then i1 = i1 + 1; j1 = j1 + 1 end\n    if type(v2)\
    \ == 'table' then i2 = i2 - 1; j2 = j2 - 1 end\n  end\n  while i1 <= i2 do\n \
    \   local v1 = l1[i1]\n    if v1 == nil then break end\n    if type(v1) == 'table'\
    \ then i1 = i1 + 1 end\n    if type(v1) == 'table' then i2 = i2 - 1 end\n  end\n\
    \  while j1 <= j2 do\n    local v1 = l2[j1]\n    if v1 == nil then break end\n\
    \    if type(v1) == 'table' then j1 = j1 + 1 end\n    if type(v1) == 'table' then\
    \ j2 = j2 - 1 end\n  end\n  return l1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978477
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1 = 0\n\
    \  local i2 = #l2\n  local common = {}\n  while i1 < i2 do\n    local j = math.min(#l1,\
    \ i2)\n    if l1[i1] == l2[j] then\n      common[#common+1] = l1[i1]\n      i1\
    \ = i1 + 1\n      i2 = i2 - 1\n    elseif l1[(i1+1)%#l1] > l2[j] then\n      i1\
    \ = i1 + 1\n    else\n      i2 = i2 - 1\n    end\n  end\n  return common\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_oj2oabb.lua:28:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmp_oj2oabb.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local set1 =\
    \ setmetatable({}, {__mode=\"k\"})\n  local set2 = setmetatable({}, {__mode=\"\
    k\"})\n  for _, v in ipairs(l1) do\n    set1[v] = true\n  end\n  for _, v in ipairs(l2)\
    \ do\n    set2[v] = true\n  end\n  local common = {}\n  for _, v in ipairs(set1)\
    \ do\n    if set2[v] then\n      common[v] = true\n    end\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5046y2_j.lua:27:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmp5046y2_j.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local table\
    \ = {}\n    for i=1,#l1 do\n        table.insert(table, l1[i])\n    end\n    for\
    \ i=1,#l2 do\n        table.insert(table, l2[i])\n    end\n    table.sort(table,\
    \ _common)\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpty1pzun6.lua:9:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmpty1pzun6.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpty1pzun6.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: -1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  -- This algorithm\
    \ is O(n log n), but n is usually very small, so\n  -- it shouldn't matter much.\n\
    \  local i = 1\n  local j = 1\n  local common = {}\n  local k = #l1\n  while i\
    \ < k do\n    common[i] = {}\n    while j < k do\n      if not common[i][j] or\
    \ l1[i - 1] ~= l2[j - 1] then\n        common[i][j] = l1[i - 1]\n      else\n\
    \        common[i][j] = common[i][j - 1]\n      end\n    end\n    j = j + 1\n\
    \    i = i + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978477
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n   local i1 = l1:size()\n\
    \   local i2 = l2:size()\n   if i1 ~= i2 then\n      return nil\n   end\n   if\
    \ i1 == 0 then\n      return l2:totable()\n   end\n   if i2 == 0 then\n      return\
    \ l1:totable()\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe66sutku.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local hash1 =\
    \ {}\n  local hash2 = {}\n  local i1 = 0\n  local i2 = 0\n  for i = 1, #l1 do\n\
    \    hash1[l1[i]] = i1\n    hash2[l2[i]] = i2\n    i1 = i1 + 1\n    i2 = i2 +\
    \ 1\n  end\n  local k1, k2 = {}, {}\n  local len1 = #l1\n  local len2 = #l2\n\
    \  local i1 = 0\n  local i2 = 0\n  for i1 = 1, len1 do\n    k1[l1[i1]] = true\n\
    \  end\n  for i2 = 1, len2 do\n    k2[l2[i2]] = true\n  end\n  local j1 = 0\n\
    \  local j2 = 0\n  while i1 < len1 and i2 < len2 do\n    local i\n    local j\
    \ = k1[i1] and k2[i2] and i1 + i2 <= len1 + len2 and\n      j1 or i1 + len2\n\
    \    if j == i1 + len2 then\n      i, j = i1 + len2, j1 + 1\n    end\n    if i1\
    \ < len1 and i2 < len2 then\n      if k1[i1] and k2[i2] then\n        table.insert(hash2,\
    \ l2[j1])\n      elseif k1[i1] then\n        table.insert(hash1, l1[i1])\n   \
    \   elseif k2[i2] then\n        table.insert(hash1, l1[j1])\n      end\n     \
    \ i1 = i1 + 1\n      i2 = i2 + 1\n    elseif i1 < len1 then\n      table.insert(hash1,\
    \ l1[i1])\n      i1 = i1 + 1\n    elseif i2 < len2 then\n      table.insert(hash2,\
    \ l2[i2])\n      i2 = i2 + 1\n    end\n  end\n  local results = {}\n  for i =\
    \ 1, #hash2 do\n    results[hash2[#hash2 + i]] = hash1[#hash2 + i]\n  end\n  return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx5m8nbo9.lua:57:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpx5m8nbo9.lua:57: in local 'candidate'\n\
    \t/tmp/tmpx5m8nbo9.lua:65: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: -1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l1 = l1\
    \ or {}\n  local l2 = l2 or {}\n  local common = {}\n  local i1, i2 = 1, #l1 +\
    \ 1\n  local j1, j2 = 1, #l2 + 1\n  while i1 <= i2 and j1 <= j2 do\n    if l1[i1]\
    \ == l2[j1] then\n      table.insert(common, l1[i1])\n      i1 = i1 + 1\n    elseif\
    \ l1[i1] < l2[j1] then\n      i2 = i2 + 1\n    else\n      j2 = j2 + 1\n    end\n\
    \  end\n  if i1 <= i2 then\n    for i = i1, i2 do\n      table.insert(common,\
    \ i)\n    end\n  else\n    for j = j1, j2 do\n      table.insert(common, j)\n\
    \    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978477
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local set1\
    \ = setmetatable({} , { __index = function(t, k)\n                -- The key `k`\
    \ is in table `t`\n                -- If we haven't seen it yet, create a new\
    \ set and add it\n                if not t[k] then\n                    t[k] =\
    \ setmetatable({} , { __index = t })\n                end\n                --\
    \ Now `k` is in table `t`, return its value as the new set\n                return\
    \ t[k]\n            end\n        })\n    local set2 = setmetatable({} , { __index\
    \ = function(t, k)\n                -- The key `k` is in table `t`\n         \
    \       -- If we haven't seen it yet, create a new set and add it\n          \
    \      if not t[k] then\n                    t[k] = setmetatable({} , { __index\
    \ = t })\n                end\n                -- Now `k` is in table `t`, return\
    \ its value as the new set\n                return t[k]\n            end\n   \
    \     })\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxtb2__ex.lua:37: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local c = {}\n\
    \  local i = 1\n  local k\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0792_8n0.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for k, v in pairs(l1) do\n    for kk, vv in pairs(l2) do\n      if v\
    \ == vv then\n        common[k] =\n          k and k.sub(1, #k) and k:sub(1, #k)\
    \ or nil\n      end\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00dq0_gm.lua:12:\
    \ attempt to index a number value (local 'k')\nstack traceback:\n\t/tmp/tmp00dq0_gm.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp00dq0_gm.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n   local set1 =\
    \ setmetatable({}, {__index = table})\n   local set2 = setmetatable({}, {__index\
    \ = table})\n   for i, v in ipairs(l1) do set1[v] = true end\n   for i, v in ipairs(l2)\
    \ do set2[v] = true end\n   return pairs(set1) & pairs(set2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ktqwdio.lua:11:\
    \ attempt to perform bitwise operation on a function value\nstack traceback:\n\
    \t/tmp/tmp6ktqwdio.lua:11: in local 'candidate'\n\t/tmp/tmp6ktqwdio.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 then\
    \ return #l2 end\n  if #l2 == 0 then return #l1 end\n  local common = table.remove(l1,\
    \ #l1)\n  for i = #l2, #l1 do\n    if l1[i] == l2[i] then common = common .. l2[i]\
    \ end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75f9blug.lua:19:\
    \ expected: {1, 5, 653}\nactual: 5\nstack traceback:\n\t/tmp/tmp75f9blug.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: -1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  -- Compare lengths.\n\
    \  local n = #l1\n  if n ~= #l2 then\n    return nil\n  end\n  -- Initialize result.\n\
    \  local res = {}\n  -- Iterate until end of one of the lists.\n  repeat\n   \
    \ -- Iterate until end of both lists.\n    local i = 1\n    while i <= n and i\
    \ <= #l2 do\n      if l1[i] ~= l2[i] then\n        i = i + 1\n      end\n    end\n\
    \    -- If the lists are equal, add first element of longer list.\n    if i ==\
    \ n then\n      if #l1 < #l2 then\n        res:insert(l1[i])\n      else\n   \
    \     res:insert(l2[i])\n      end\n      i = i + 1\n    end\n    -- If the longer\
    \ list runs out, repeat loop with shorter list.\n  until i < n\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978477
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local hash\
    \ = {}\n    for _, v in ipairs(l1) do\n        hash[v] = true\n    end\n    for\
    \ _, v in ipairs(l2) do\n        if not hash[v] then\n            return nil\n\
    \        end\n        hash[v] = nil\n    end\n    return l1, l2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3f2e1v0.lua:23:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpr3f2e1v0.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if l1 == nil\
    \ then\n        return l2\n    elseif l2 == nil then\n        return l1\n    end\n\
    \    local common = {}\n    for k, v in pairs(l1) do\n        common[k] = v\n\
    \    end\n    for k, v in pairs(l2) do\n        if common[k] == v then\n     \
    \       common[k] = nil\n        end\n    end\n    return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpo6poee.lua:27:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5}\nstack traceback:\n\t\
    /tmp/tmpdpo6poee.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local tbl = {}\n\
    \  for _, el1 in pairs(l1) do\n    local found = false\n    for _, el2 in pairs(l2)\
    \ do\n      if el1 == el2 then\n        found = true\n        break\n      end\n\
    \    end\n    if not found then\n      table.insert(tbl, el1)\n    end\n  end\n\
    \  return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpraqj378l.lua:26:\
    \ expected: {1, 5, 653}\nactual: {4, 3, 34, 2}\nstack traceback:\n\t/tmp/tmpraqj378l.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: -1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 then\
    \ return l2 end\n  if #l2 == 0 then return l1 end\n  if l1[#l1] == l2[#l2] then\
    \ return l1 end\n  local m\n  local i = 1\n  while i <= #l1 and i <= #l2 do\n\
    \    if l1[i - 1] == l2[i] then\n      if m then\n        l1[i - 1] = m\n    \
    \    l2[i] = m\n      else\n        table.insert(l1, l1[i - 1])\n        l1[i]\
    \ = l1[i]\n      end\n      i = i + 1\n    else\n      m = l1[i - 1]\n      table.insert(l1,\
    \ m)\n      table.insert(l2, m)\n      i = i + 1\n    end\n  end\n  if #l1 ==\
    \ #l2 then\n    return table.unpack(l1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978477
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local n = #l1\n\
    \  if n == 0 then return nil end\n  if n == 1 then return l2 end\n  local m =\
    \ {}\n  for i = 1, n do\n    local k = i2s(i)\n    local v = l1[k]\n    if v ==\
    \ nil then break end\n    if v ~= l2[l1[k]] then break end\n    m[k] = v\n  end\n\
    \  return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgnfbu9u7.lua:12:\
    \ attempt to call a nil value (global 'i2s')\nstack traceback:\n\t/tmp/tmpgnfbu9u7.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpgnfbu9u7.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local i1, i2\n\
    \    local result = {}\n    for i, v in ipairs(l1) do\n        for j = i, #l2\
    \ do\n            if l1[i] == l2[j] then\n                table.insert(result,\
    \ v)\n                break\n            end\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcsdzry6x.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 653}\nstack traceback:\n\t/tmp/tmpcsdzry6x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local function\
    \ comp(key, v1, v2)\n    if v1 == nil then return nil, v2\n    else if v2 == nil\
    \ then return v1, nil\n    elseif v1 == v2 then return v1, v2\n    else return\
    \ v1 < v2 end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc6_nylnm.lua:23: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local hash =\
    \ {}\n  local i = 0\n  for v in l1 do\n    if not hash[v] then\n      hash[v]\
    \ = i\n      i = i + 1\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpajon8at4.lua:25: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 then\n\
    \    return l2\n  end\n  if #l2 == 0 then\n    return l1\n  end\n  local common\
    \ = {}\n  for i = 1, #l1 do\n    for j = 1, #l2 do\n      if l1[i] == l2[j] then\n\
    \        table.insert(common, l1[i])\n      end\n    end\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiman6kp.lua:27:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpfiman6kp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  -- If either\
    \ table is empty, the result is also empty.\n  if not l1 and not l2 then\n   \
    \ return nil\n  elseif not l1 then\n    return l2\n  elseif not l2 then\n    return\
    \ l1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzf9ii18w.lua:25: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 then\
    \ return l2 end\n  if #l2 == 0 then return l1 end\n  local common = {}\n  local\
    \ i1, i2 = 1, #l1 + 1\n  while i1 <= i2 do\n    local e1 = l1[i1]\n    local e2\
    \ = l2[i2]\n    if e1 == e2 then\n      common[#common+1] = e1\n      i2 = i2\
    \ + 1\n      i1 = i1 + 1\n      if not i1 <= i2 then break end\n    else\n   \
    \   if #common == 0 then\n        common[#common+1] = e2\n      end\n      i1\
    \ = i1 + 1\n    end\n  end\n  if #common > 0 then return common, nil, #common\
    \ end\n  return nil, #l2, #l2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvi9f3gdh.lua:18:\
    \ attempt to compare boolean with number\nstack traceback:\n\t/tmp/tmpvi9f3gdh.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpvi9f3gdh.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local num_matches\
    \ = nil\n  local num_shared_matches = nil\n  local results = {}\n  for i=1, #l1\
    \ do\n    for j=1, #l2 do\n      local match = common_strings(l1[i], l2[j])\n\
    \      if match then\n        table.insert(results, match)\n        if match ~=\
    \ l1[i] and match ~= l2[j] then\n          table.insert(results, match)\n    \
    \    end\n      else\n        num_matches = nil\n        num_shared_matches =\
    \ nil\n        if #results < 1 then\n          table.insert(results, l1[i])\n\
    \        end\n        if #results < 1 then\n          table.insert(results, l2[j])\n\
    \        end\n      end\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcpahw2qf.lua:12:\
    \ attempt to call a nil value (global 'common_strings')\nstack traceback:\n\t\
    /tmp/tmpcpahw2qf.lua:12: in local 'candidate'\n\t/tmp/tmpcpahw2qf.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 ~= #l2\
    \ then return end\n  if #l1 == 0 then return end\n  local l3 = {}\n  for i = 1,\
    \ #l1 do\n    local k = l1[i]\n    if l3[k] == nil then\n      l3[k] = true\n\
    \      l2 = l2[k]\n    end\n  end\n  return l2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7_15yqqj.lua:14:\
    \ attempt to index a number value (local 'l2')\nstack traceback:\n\t/tmp/tmp7_15yqqj.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp7_15yqqj.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local table1\
    \ = {}\n  local table2 = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpue3ga9o1.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local common\
    \ = {}\n    for k in pairs(l1) do common[k] = true end\n    for k in pairs(l2)\
    \ do common[k] = true end\n    return common\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfutesr6.lua:16:\
    \ expected: {1, 5, 653}\nactual: {true, true, true, true, true, true, true}\n\
    stack traceback:\n\t/tmp/tmpsfutesr6.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local u = {}\n\
    \    for _, x in ipairs(l1) do\n        u[x] = true\n    end\n    for _, x in\
    \ ipairs(l2) do\n        u[x] = true\n    end\n    return setmetatable(l, lua_ffi.type{__index=function(t,\
    \ k)\n            return t[k] = t[k] or {}\n        end}) or setmetatable({} ,\
    \ lua_ffi.type{__index=function(t, k)\n            return t[k] = t[k] or {}\n\
    \        end})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxl80bjck.lua:15: ''end'' expected (to close ''function'' at
    line 14) near ''=''

    '
  stdout: ''
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local set1 =\
    \ setl1(l1)\n  local set2 = setl2(l2)\n  local common = {}\n  for i = 1, #set1,\
    \ 1 do\n    local i1 = set1[i]\n    for j = 1, #set2, 1 do\n      local j1 = set2[j]\n\
    \      if i1 == j1 then\n        common[#common + 1] = i1\n      end\n    end\n\
    \  end\n  return common\nend\n</code>\n<|/ a |>\n<| c |>\nOoops, I misread the\
    \ question.\n<|/ c |>\n<| c |>\nWhy do you need a function to do this when `set1`\
    \ and `set2` have O(1) member-access?\n<|/ c |>\n<| a tags=function,lua dscore=2\
    \ |>\nIf your Lua version is recent enough (> 5.2), you can use the function collect():\n\
    <code>\nset1 = {1, 4, 3, 34, 653, 5}\nset2 = {5, 7, 1, 5, 9, 653, 121}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa0d9281_.lua:21: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local common\
    \ = {}\n    for _, x in ipairs(l1) do\n        for _, y in ipairs(l2) do\n   \
    \         if x == y then\n                table.insert(common, x)\n          \
    \  end\n        end\n    end\n    return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7jl7n48.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpl7jl7n48.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local hash =\
    \ {}\n  for _, v in ipairs(l1) do\n    hash[v] = true\n  end\n  for _, v in ipairs(l2)\
    \ do\n    if hash[v] then\n      return v\n    end\n  end\n  return nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptq46advd.lua:22:\
    \ expected: {1, 5, 653}\nactual: 5\nstack traceback:\n\t/tmp/tmptq46advd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for k, v in pairs(l1) do\n    for k1, v1 in pairs(l2) do\n      if v\
    \ == v1 then\n        table.insert(common, k)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpls_cxz9b.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 7, 7}\nstack traceback:\n\t/tmp/tmpls_cxz9b.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  -- First get\
    \ all the unique elements in both lists\n  local union = {\n    unpack(l1, #l1),\n\
    \    unpack(l2, #l2)\n  }\n  -- Remove any duplicate elements from both\n  union\
    \ = setmetatable(union, getmetatable(union))\n  union = union.__index\n  union\
    \ = setmetatable(union, getmetatable(union))\n  union = union.__newindex\n  --\
    \ Now remove any element from each list that's not in the other list\n  local\
    \ res = {}\n  for i, v in pairs(union) do\n    table.insert(res, v)\n  end\n \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2qfsop5o.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp2qfsop5o.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2qfsop5o.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3, l4,\
    \ i, j, k\n  local l3 = {}\n  local l4 = {}\n  local i = 1\n  local j = 1\n  local\
    \ k = 1\n  while i <= #l1 do\n    while j <= #l2 do\n      if l1[i] == l2[j] then\n\
    \        if l3[k] ~= nil then\n          l4[k] = l3[k]\n        end\n        l3[k]\
    \ = l3[k] + 1\n      end\n      k = k + 1\n      j = j + 1\n    end\n    i = i\
    \ + 1\n    j = 1\n  end\n  k = 1\n  if #l3 > 1 then\n    while k <= #l3 do\n \
    \     if l4[k] == nil then\n        l4[k] = l3[k]\n      else\n        l3[k] =\
    \ l3[k] / l4[k]\n      end\n      k = k + 1\n    end\n  end\n  return l3\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptuf49he3.lua:19:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmptuf49he3.lua:19: in local 'candidate'\n\t/tmp/tmptuf49he3.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local r1 =\
    \ {}\n    local r2 = {}\n    for _, v in ipairs(l1) do\n        if v2(v) then\n\
    \            r1[#r1 + 1] = v\n        end\n    end\n    for _, v in ipairs(l2)\
    \ do\n        if v2(v) then\n            r2[#r2 + 1] = v\n        end\n    end\n\
    \    return setmetatable(sort(r1), {__mode='k'})\n        -- setmetatable(sort(r1),\
    \ {__mode='k'}):sort():reverse()\n        -- setmetatable(sort(r1), {__mode='v'}):sort():reverse()\n\
    \        -- setmetatable(sort(r1), {__mode=setmetatable(sort(r1), {__mode='k'})})\n\
    \        -- setmetatable(sort(r1), {__mode=setmetatable(sort(r1), {__mode='v'})})\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj7wo2zqa.lua:10:\
    \ attempt to call a nil value (global 'v2')\nstack traceback:\n\t/tmp/tmpj7wo2zqa.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpj7wo2zqa.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if l1 then\
    \ l1 = l1 { __key = function(...)\n        return tsort({}, ...)\n    end}\n \
    \   elseif l2 then l2 = l2 { __key = function(...)\n        return tsort({}, ...)\n\
    \    end}\n    local common = {}\n    for k, v in pairs(l1) do\n        if find(l2,\
    \ v) then common[k] = v\n        end\n    end\n    return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpph_0143l.lua:30: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t1 = {}\n\
    \  local t2 = {}\n  local n = #l1\n  for i = 1, n do\n    t1[#t1 + 1] = l1[i]\n\
    \  end\n  n = #l2\n  for i = 1, n do\n    t2[#t2 + 1] = l2[i]\n  end\n  table.sort(t1)\n\
    \  table.sort(t2)\n  local i = 0\n  local j = 0\n  local k = 0\n  local commons\
    \ = {}\n  while i < n or j < n do\n    if (i < n) then\n      k = i + 1\n    \
    \  while k < n and t1[k] == t2[k] do\n        k = k + 1\n      end\n      commons[k]\
    \ = t1[i - 1]\n      i = k\n    else\n      k = j + 1\n      while k < n and t1[n\
    \ - 1] == t2[k] do\n        k = k + 1\n      end\n      commons[k] = t2[i - 1]\n\
    \      j = k\n    end\n  end\n  return commons\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt70xil1f.lua:46:\
    \ expected: {1, 5, 653}\nactual: {121, 121, 121, 121, 121, 121, 121}\nstack traceback:\n\
    \t/tmp/tmpt70xil1f.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if #l1 == 0\
    \ then\n        return l2\n    end\n    if #l2 == 0 then\n        return l1\n\
    \    end\n    local tbl = {}\n    local i\n    for i = 1, #l1 do\n        if tbl[l1[i]]\
    \ ~= nil then\n            table.insert(tbl, l1[i])\n        end\n    end\n  \
    \  for i = 1, #l2 do\n        if tbl[l2[i]] ~= nil then\n            table.insert(tbl,\
    \ l2[i])\n        end\n    end\n    return tbl\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz78mblcm.lua:31:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmpz78mblcm.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local sorted,\
    \ common = {}, {}\n  for i, v in pairs(l1) do\n    table.insert(common, v)\n \
    \   table.insert(sorted, v)\n  end\n  for i, v in pairs(l2) do\n    if common[#common]\
    \ == v then\n      table.remove(common, #common)\n    end\n  end\n  return sorted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0avpasv8.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5}\nstack traceback:\n\t\
    /tmp/tmp0avpasv8.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local v = {}\n\
    \  for i = 1, #l1 do\n    if table.find(v, l1[i]) == nil then table.insert(v,\
    \ l1[i]) end\n  end\n  for i = 1, #l2 do\n    if table.find(v, l2[i]) == nil then\
    \ table.insert(v, l2[i]) end\n  end\n  return v\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqdp28b7g.lua:9:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmpqdp28b7g.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpqdp28b7g.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, value in ipairs(l1) do\n    if l2[value] then\n      table.insert(common,\
    \ value)\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnn2_loi3.lua:19:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 2, 5}\nstack traceback:\n\t/tmp/tmpnn2_loi3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local r1, r2\
    \ = {}, {}\n  for k in pairs(l1) do r1[k] = true end\n  for k in pairs(l2) do\
    \ r2[k] = true end\n  return table.values(r1) & table.values(r2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt4yi9hwi.lua:10:\
    \ attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmpt4yi9hwi.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpt4yi9hwi.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 <= 0 then\n\
    \    return {}\n  elseif #l2 <= 0 then\n    return l1\n  end\n  local i1, i2 =\
    \ 1, #l1\n  while i1 < i2 do\n    local v1, v2 = l1[i1], l2[i2]\n    if v1 <=\
    \ v2 then\n      i1 = i1 + 1\n    else\n      i2 = i2 + 1\n    end\n  end\n  local\
    \ v1, v2 = l1[i1], l2[i2]\n  while i1 < #l1 do\n    local v1 = l1[i1]\n    local\
    \ v2 = l2[i2]\n    if v1 <= v2 then\n      table.insert(result, v1)\n      i1\
    \ = i1 + 1\n    else\n      table.insert(result, v2)\n      i2 = i2 + 1\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeq801j1u.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpeq801j1u.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpeq801j1u.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 < 2 then\
    \ return end\n  if #l2 < 2 then return end\n  local common_map = {}\n  for i =\
    \ 1, #l1 do\n    for j = 1, #l2 do\n      local k = l1[i]\n      if not common_map[k]\
    \ then\n        common_map[k] = true\n      else\n        table.insert(common_map,\
    \ k)\n      end\n    end\n  end\n  return table.concat(common_map, \"\")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph4an9cwr.lua:20:\
    \ invalid value (boolean) at index 1 in table for 'concat'\nstack traceback:\n\
    \t/tmp/tmph4an9cwr.lua:20: in local 'candidate'\n\t/tmp/tmph4an9cwr.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l1_hash\
    \ = #l1\n  local l2_hash = #l2\n  if l1_hash == 0 then\n    return l2\n  elseif\
    \ l2_hash == 0 then\n    return l1\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_ynvi5k8.lua:24: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if #l1 == 0\
    \ then return l2 end\n    if #l2 == 0 then return l1 end\n    local i = math.min(#l1,\
    \ #l2)\n    local result = {}\n    for _ = 1, i do\n        if l1[_] == l2[_]\
    \ then\n            result[#result + 1] = _\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9x4s8f__.lua:22:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmp9x4s8f__.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: -1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local n1 =\
    \ #l1\n    local n2 = #l2\n    local i, j, k = 1, n2, 1\n    local map = {}\n\
    \    repeat\n        i = i + (j - i)/2\n        j = j - 1\n        map[k] = l1[i]\n\
    \        map[k + 1] = l2[i]\n        k = k + 2\n    until i >= n1 or j >= n2\n\
    \    return setmetatable(map, common)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978477
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local tmp =\
    \ {}\n    for _, v in ipairs(l1) do\n        tmp[v] = true\n    end\n    for _,\
    \ v in ipairs(l2) do\n        if tmp[v] then\n            tmp[v] = nil\n     \
    \   end\n    end\n    return table.concat(tmp)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp31fkz5lc.lua:16:\
    \ invalid value (nil) at index 1 in table for 'concat'\nstack traceback:\n\t/tmp/tmp31fkz5lc.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp31fkz5lc.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local hash =\
    \ {}\n  local l3 = {}\n  for _, v in ipairs(l1) do hash[v] = 1 end\n  for _, v\
    \ in ipairs(l2) do hash[v] = 1 end\n  for v in pairs(hash) do\n    if l3[v] ==\
    \ nil then l3[v] = v end\n  end\n  return l3\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2osippo.lua:20:\
    \ expected: {1, 5, 653}\nactual: {1, 2, 3, 4, 5, 7=7, 9=9, 34=34, 121=121, 653=653}\n\
    stack traceback:\n\t/tmp/tmpo2osippo.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local results\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(results, v1)\n      end\n    end\n  end\n\
    \  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3mv31r2a.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp3mv31r2a.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if #l1 ~= #l2\
    \ then\n        return nil\n    end\n    local set1 = {}\n    local set2 = {}\n\
    \    for i, v in ipairs(l1) do\n        set1[v] = true\n    end\n    for i, v\
    \ in ipairs(l2) do\n        set2[v] = true\n    end\n    local set3 = set1\n \
    \   for k, v in pairs(set2) do\n        set3[k] = nil\n    end\n    return set3\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzm_ibj4.lua:28:\
    \ expected: {1, 5, 653}\nactual: {2=true, 3=true, 4=true, 34=true}\nstack traceback:\n\
    \t/tmp/tmpvzm_ibj4.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local n1, n2\
    \ = #l1, #l2\n  if n1 == 0 or n2 == 0 then\n    return {}\n  end\n  local ret\
    \ = {}\n  for i = 1, n1 do\n    for j = 1, n2 do\n      if l1[i] == l2[j] then\n\
    \        table.insert(ret, l1[i])\n        break\n      end\n    end\n  end\n\
    \  return ret\nend\nreturn common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprimkyarh.lua:23: <eof> expected near ''end''

    '
  stdout: ''
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if l1 == nil\
    \ or l2 == nil then\n    return nil\n  elseif #l1 > #l2 then\n    return common(l2,\
    \ l1)\n  else\n    local i = 1\n    while i <= #l1 and i <= #l2 do\n      if l1[i]\
    \ ~= l2[i] then\n        local j = 1\n        while j <= #l1 and j <= #l2 do\n\
    \          if l1[j] == l2[j] then\n            j = j + 1\n          else\n   \
    \         return l1\n          end\n        end\n        return l1\n      end\n\
    \      i = i + 1\n    end\n    return nil\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3amyddts.lua:34:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5}\nstack traceback:\n\t\
    /tmp/tmp3amyddts.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t = {l1,\
    \ l2}\n  table.sort(t, function(a, b) return #a == #b end)\n  local n1 = #l1\n\
    \  local n2 = #l2\n  local i = 1\n  local hash = {}\n  for i = 1, n1 do\n    hash[#t\
    \ + 1] = table.remove(t)\n  end\n  for i = 1, n2 do\n    local j = #t + 1\n  \
    \  while j > i do\n      local k = table.remove(hash, j)\n      table.remove(t,\
    \ k)\n      j = #t + 1\n    end\n    hash[#t + 1] = l2[i]\n  end\n  return table.unpack(hash)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekt_wyhl.lua:31:\
    \ expected: {1, 5, 653}\nactual: 121\nstack traceback:\n\t/tmp/tmpekt_wyhl.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal ls = {}\n\
    \tfor i, v in pairs(l1) do\n\t\tfor j, w in pairs(l2) do\n\t\t\tif v == w then\n\
    \t\t\t\ttable.insert(ls, v)\n\t\t\tend\n\t\tend\n\tend\n\treturn ls\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgw0kkp9n.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpgw0kkp9n.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local shared\
    \ = {}\n  local seen = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1jrxdybb.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  -- First we sort the lists.\n  for _, l1 in ipairs(l1) do\n    for _,\
    \ l2 in ipairs(l2) do\n      if not common[l2] then common[l2] = {} end\n    \
    \  common[l2][l1] = true\n    end\n  end\n  -- Then we go through the first list\
    \ once more and collect all the entries for which the\n  -- second list has a\
    \ given entry.\n  for _, l1 in ipairs(l1) do\n    common[l1][l1] = true\n  end\n\
    \  for _, l2 in ipairs(l2) do\n    if not common[l2] then common[l2] = {} end\n\
    \  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyvv4r3d0.lua:18:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpyvv4r3d0.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpyvv4r3d0.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 then\
    \ return l2 end\n  if #l2 == 0 then return l1 end\n  local common = {}\n  for\
    \ _, i in ipairs(l1) do\n    for _, j in ipairs(l2) do\n      if i == j then\n\
    \        table.insert(common, i)\n      end\n    end\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5nbzcgx.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpg5nbzcgx.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local r1 =\
    \ {}\n    local r2 = {}\n    for i, v1 in pairs(l1) do\n        r1[v1] = true\n\
    \    end\n    for i, v2 in pairs(l2) do\n        r2[v2] = true\n    end\n    --\
    \ Now see which elements are in both and get their indices.\n    local i1\n  \
    \  local i2\n    for i1, v1 in pairs(r1) do\n        for i2, v2 in pairs(r2) do\n\
    \            if v1 == v2 then\n                break\n            elseif i2 ~=\
    \ nil then\n                r1[i1] = nil\n                r2[i2] = nil\n     \
    \       end\n        end\n    end\n    return r1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ck_mqbm.lua:34:\
    \ expected: {1, 5, 653}\nactual: {true, true, true, true, true, 34=true, 653=true}\n\
    stack traceback:\n\t/tmp/tmp7ck_mqbm.lua:34: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local c = {}\n\
    \  for k, v in pairs(l1) do\n    if l2[k] == v then c[k] = v end\n  end\n  for\
    \ k, v in pairs(l2) do\n    if c[k] == v then table.remove(c, k) end\n  end\n\
    \  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fq6ovu1.lua:20:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmp9fq6ovu1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n   -- Sort lists\
    \ first, since they will be compared in order.\n   l1 = table.sort(l1) or {}\n\
    \   l2 = table.sort(l2) or {}\n   -- Return sorted unique elements.\n   return\
    \ setmetatable(\n      table.merge(\n         l1,\n         table.unique(\n  \
    \          table.merge(l2, l1)\n         )\n      ),\n      {__index = function()\
    \ return nil end}\n   )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppnq0rycb.lua:15:\
    \ attempt to call a nil value (field 'merge')\nstack traceback:\n\t/tmp/tmppnq0rycb.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmppnq0rycb.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n   if #l1 == 0\
    \ or #l2 == 0 then\n      return {}\n   end\n   local i = 1\n   local cur = l1[1]\n\
    \   local j = #l1 + 1\n   local cur2 = l2[1]\n   local j2 = #l2 + 1\n   while\
    \ (i <= j) and (j <= j2) do\n      if (l1[i] == cur2 and l2[j] == cur) then\n\
    \         i = i + 1\n         j = j + 1\n      else\n         if (cur2 > cur)\
    \ then\n            i = i + 1\n            cur2 = l2[j]\n         else\n     \
    \       j = j + 1\n            cur = l1[i]\n         end\n      end\n   end\n\
    \   if i == j then\n      table.insert(result, cur)\n   end\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThis can be done without loops at all!\n<|/ c |>\n<|\
    \ c |>\n- Yes, it can.  In fact, this can be done without loops at all.  See my\
    \ answer.\n<|/ c |>\n<| c |>\n- Please don't say that.  I gave the answer I thought\
    \ was possible.  I used the loops to compare the pairs of elements.  What do you\
    \ mean you can't use loops?\n<|/ c |>\n<| c |>\n- I used loops in the sense that\
    \ I didn't know how to do it without them.  Please read the question again.  I\
    \ do know how to do it with loops, I just didn't know how to do it without them.\
    \  I realized my mistake and modified my answer.\n<|/ c |>\n<| a tags=lua |>\n\
    You can use recursion to compare the pairs of elements.  I use a separate function\
    \ for each level to make it clear to see what happens at each level.  Each function\
    \ takes two tables and returns the result of the comparison.  I use the standard\
    \ < operator to compare two values.  \n<code>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpin916is7.lua:33: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n   local c1 = {\n\
    \      table.sort(l1, function(el1, el2)\n         return el1 < el2\n      end),\n\
    \      table.sort(l2, function(el1, el2)\n         return el1 < el2\n      end),\n\
    \   }\n   local c2 = {\n      table.sort(c1.next, function(el1, el2)\n       \
    \  return el1 < el2\n      end),\n      table.sort(c1.next, function(el1, el2)\n\
    \         return el1 < el2\n      end),\n   }\n   return c2.next\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp81kme0gv.lua:16:\
    \ bad argument #1 to 'sort' (table expected, got nil)\nstack traceback:\n\t/tmp/tmp81kme0gv.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp81kme0gv.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if #l1 == 0\
    \ then return #l2 else return #l1 end\n    local i = 1\n    while i < #l1 do\n\
    \        local j = 1\n        while j < #l2 do\n            if l1[i] == l2[j]\
    \ then\n                i = i + 1\n                j = j + 1\n            else\n\
    \                break\n            end\n        end\n        if i == #l1 then\
    \ return #l2 end\n    end\n    return #l1 -- didn't find anything\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphn4nbbj_.lua:27:\
    \ expected: {1, 5, 653}\nactual: 7\nstack traceback:\n\t/tmp/tmphn4nbbj_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 ~= #l2\
    \ then return nil end\n  local common = { }\n  for i = 1, #l1 do\n    if common[l1[i]]\
    \ == nil then\n      table.insert(common, l1[i])\n    end\n  end\n  for i = 1,\
    \ #l2 do\n    if common[l2[i]] == nil then\n      table.insert(common, l2[i])\n\
    \    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9j_ny0s.lua:25:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 7, 9, 653, 121}\nstack traceback:\n\
    \t/tmp/tmpa9j_ny0s.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978472
- exit_code: -1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    assert(l1 and\
    \ l2, 'Table cannot have empty intersection.')\n    local t = {}\n    local i1,\
    \ i2 = 1, #l1\n    while i1 < i2 do\n        local v1, v2 = l1[i1], l2[i2]\n \
    \       if v1 ~= v2 then\n            table.insert(t, v1)\n            table.insert(t,\
    \ v2)\n            i1 = i1 + 1\n        end\n        i2 = i2 + 1\n    end\n  \
    \  table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978477
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local seen =\
    \ nil\n  for _, v in ipairs(l1) do\n    if not seen or v ~= seen[v] then\n   \
    \   seen[v] = true\n      for _, v2 in ipairs(l2) do\n        if v ~= v2 then\n\
    \          seen[v2] = true\n          return v\n        end\n      end\n    end\n\
    \  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdq0dxz5h.lua:10:\
    \ attempt to index a nil value (local 'seen')\nstack traceback:\n\t/tmp/tmpdq0dxz5h.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpdq0dxz5h.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for k, v in pairs(l1) do\n    local found = false\n    for _, v2 in\
    \ ipairs(l2) do\n      if v == v2 then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(common, v)\n  \
    \  end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk4h2kr7.lua:26:\
    \ expected: {1, 5, 653}\nactual: {4, 3, 34, 2}\nstack traceback:\n\t/tmp/tmpjk4h2kr7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978472
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 ~= #l2\
    \ then return {end} end\n  local common = {}\n  for i = 1, #l1 do\n    local e1\
    \ = l1[i]\n    local e2 = l2[i]\n    if not common.contains(e1) or not common.contains(e2)\
    \ then\n      table.insert(common, e1)\n    end\n  end\n  return common\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2j60426v.lua:7: unexpected symbol near ''end''

    '
  stdout: ''
  timestamp: 1659978472
- exit_code: -1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 then\n\
    \    return l2\n  end\n  if #l2 == 0 then\n    return l1\n  end\n  local i = 1\n\
    \  local l = {}\n  repeat\n    table.insert(l, l1[i])\n    i = i + 1\n  until\
    \ #l1 == i\n  i = 1\n  repeat\n    table.insert(l, l2[i])\n    i = i + 1\n  until\
    \ #l2 == i\n  table.sort(l)\n  local k = 1\n  local k1 = 1\n  local k2 = #l1 +\
    \ 1\n  repeat\n    local a = l[k]\n    local b = l[k1]\n    if a ~= b then\n \
    \     table.insert(l, a)\n    end\n    k = k + 1\n    k1 = k1 + 1\n    k2 = k2\
    \ + 1\n  until k2 == k\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978477
