name: HumanEval_75_is_multiply_prime
language: lua
prompt: "-- Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
  \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
  local function is_multiply_prime(a)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
  \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30), true)\n\
  \    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10), false)\n\
  \    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
  \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
  \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
  \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local i = 0\n  local j = 0\n  local multiply = 1\n  local prime1\
    \ = 2\n  local prime2 = 2\n  while prime1 <= 100 do\n    if a % prime1 == 0 then\n\
    \      prime2 = prime2\n    else\n      prime2 = prime1\n    end\n    if prime2\
    \ > 100 then\n      break\n    end\n    while prime2 <= 100 do\n      local num\
    \ = prime1 * prime2\n      if a == num then\n        return true\n      end\n\
    \      local tmp = a\n      a = num\n      i = i + 1\n      if i == 10000 then\n\
    \        return false\n      end\n    end\n    prime2 = prime2 + 3\n  end\n  return\
    \ false\nend", "  local i = 2\n  while i*i < a do\n    if a % i == 0 and is_prime(i)\
    \ then\n      return false\n    end\n    i = i+1\n  end\n  return true\nend",
  "  local b = 1\n  while b < a do\n    if prime == false then\n      prime = true\n\
    \      a = a+1\n    elseif math.mod(a, prime) == 0 then\n      a = a+1\n    else\n\
    \      return false\n    end\n    b = b+1\n  end\n  return true\nend", "   \n\
    \   -- We know that all the numbers from 2 to 100\n   -- are factors of 3 and\
    \ 5\n   for i=2, a do\n      if math.mod(a,i)==0 then\n         return false\n\
    \      end\n   end\n   return true\nend", "\t-- Use a helper function to determine\
    \ if a number is a multiple of any prime number\n\tlocal function isprime(num)\n\
    \t\tfor i = 2, #primes do\n\t\t\tif num % primes[i] == 0 then\n\t\t\t\treturn\
    \ false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\t-- Check if a is a multiple\
    \ of any prime number\n\treturn isprime(a) and isprime(a+2) and isprime(a+3)\n\
    end", "  local flag = true\n  local prime_one = prime[1]\n  local prime_two =\
    \ prime[2]\n  local prime_three = prime[3]\n  local prime_five = prime[5]\n  if\
    \ a > 100 then\n    return false\n  end\n  -- Check if a is less than 7\n  if\
    \ a < 7 then\n    return false\n  end\n  for i=1,a do\n    local check_flag =\
    \ true\n    for j=1,a do\n      if i % prime_one ~= 0 then\n        check_flag\
    \ = false\n        break\n      end\n    end\n    if check_flag then\n      if\
    \ a % prime_two ~= 0 then\n        check_flag = false\n        break\n      end\n\
    \    end\n    if check_flag then\n      if a % prime_three ~= 0 then\n       \
    \ check_flag = false\n        break\n      end\n    end\n    if check_flag then\n\
    \      if a % prime_five ~= 0 then\n        check_flag = false\n        break\n\
    \      end\n    end\n    if check_flag then\n      flag = false\n      break\n\
    \    end\n  end\n  return flag\nend", "  for i=3,100,2 do\n    if (a % i == 0)\
    \ and (a / i != a) then\n      return false\n    end\n  end\n  return true\nend",
  "    local m = a % 2\n    return m == 0 or m == 1 or m == 3 \nend", "  -- base case\n\
    \  if a < 100 then return false end\n  -- first check\n  if a % 2 == 0 then return\
    \ false end\n  -- check for the rest of the primes\n  local i = 3\n  while i *\
    \ i < a do\n    if a % i == 0 then return false end\n    -- move to next number\n\
    \    i = i + 1\n  end\n  -- return true if we made it all the way here\n  return\
    \ true\nend", "    if a == 1 then\n        return false\n    end\n    if a ==\
    \ 2 then\n        return true\n    end\n    for i = 3, 100, 2 do\n        if a\
    \ % i == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "  if a < 100\n    then\n    local function is_multiply_prime_aux(i, j)\n\
    \      local count = 0\n      for _, b in pairs(primes) do\n        if j == b\
    \ and i == j or j % b == 0 then\n          count = count + 1\n          break\n\
    \        end\n      end\n      if count == 3 then\n        return true\n     \
    \ end\n      return false\n    end\n    return is_multiply_prime_aux(a * a, a)\n\
    \  end\n  return false\nend", "    if a <= 100 then\n        return false\n  \
    \  end\n    if a % 3 == 0 and a % 5 == 0 then\n        return true\n    end\n\
    \    return false\nend", "  \n  local function factors(x)\n    local f = {}\n\
    \    for i = 2, x do\n      if x % i == 0 then\n        table.insert(f, i)\n \
    \     end\n    end\n    return f\n  end\n  \n  local function is_3_pn(x)\n   \
    \ local factors = factors(x)\n    \n    for i = 2, #factors do\n      if factors[i]\
    \ == 3 and x ~= i * i then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  \n  local function is_multiply_prime2(x)\n    local primes =\
    \ {}\n    for i = 2, #factors(x) do\n      if factors(x)[i] == 3 then\n      \
    \  table.insert(primes, i)\n      end\n    end\n    for _, prime in ipairs(primes)\
    \ do\n      if x == prime * prime then\n        return true\n      end\n    end\n\
    \    return false\n  end\n  \n  return is_3_pn(a) and is_multiply_prime2(a)\n\
    end", "  if a <= 100 then\n    return true\n  end\n  local i = 1\n  local c =\
    \ 2\n  repeat\n    if a % i == 0 then\n      if i > 1 then\n        c = c + 1\n\
    \      end\n      i = i + 1\n    else\n      i = i + 1\n    end\n  until a % i\
    \ == 0\n  return c <= 3\nend", "    local b = 1\n    for i = 2, 100 do\n     \
    \   if ( a == b ) then\n            return true\n        end\n        if ( a %\
    \ i == 0 ) then\n            -- i is not a prime number\n            return false\n\
    \        end\n        if ( i == a ) then\n            -- i is the multiplicative\
    \ of 3\n            return true\n        end\n        b = i * 3\n    end\nend",
  "    return a >= 100 and a < 4000000 and a == is_multiply_prime_helper(a, 3)\nend",
  "  -- Base case\n  -- If the number is less than 3, then it's not multiply prime\
    \ because 3 isn't a prime number.\n  if a < 3 then\n    return false\n  end\n\
    \  -- Otherwise, check if a is a prime number\n  -- and then check if it's a multiply\
    \ of 3\n  for i = 2, a - 1 do\n    if isPrime(i) and i % 3 == 0 then\n      return\
    \ true\n    end\n  end\n  return false\nend", "  -- write your code in here\n\
    \  -- check here: https://stackoverflow.com/questions/1777837/how-to-check-if-a-number-is-a-multiply-of-3-or-more-prime-numbers",
  "    local a = a or 0\n    if a < 100 then\n        return false\n    end\n    local\
    \ a2 = a / 2\n    local b2 = a / 3\n    local c2 = a / 5\n    local d2 = a / 7\n\
    \    local e2 = a / 11", "\tlocal n = a\n\tlocal p = 3\n\twhile (p*p < n) do\n\
    \t\tif (n % p == 0) then\n\t\t\treturn false\n\t\tend\n\t\tp = p + 2\n\tend\n\t\
    return true\nend", "    -- (a) is less, than 100, then the multiplication is not\
    \ a prime number\n    return a <= 100\nend", "    for i = 2, 100 do\n        if\
    \ a % i == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local s = 2\n    while a ~= 0 do\n        if a % s == 0 then\n\
    \            return false\n        end\n        s = s * 2\n        a = a / 2\n\
    \    end\n    return true\nend", "  -- If the given number is less then 3 then\
    \ its not true\n  if a < 3 then\n    return false\n  end\n  -- If the given number\
    \ is less then 100 and greater then 0 then it must be true\n  if a < 100 then\n\
    \    return true\n  end\n  -- If the given number is equal to 3 then its true\n\
    \  if a == 3 then\n    return true\n  end\n  -- If the given number is greater\
    \ than 100 then its not true\n  if a > 100 then\n    return false\n  end", " \
    \   return a < 100 and a^2 <= a^3 and a^3 <= a^5\nend", "    local i\n    local\
    \ n = 0\n    for i = 2, a do\n        if ( a % i == 0 ) then\n            n =\
    \ n + 1\n        end\n    end\n    return n == 3\nend", "    local factors = find_factors(a)\n\
    \    -- only numbers are multiples of prime numbers\n    if factors[#factors]\
    \ == 1 then\n        return true\n    end\n    return false\nend", "   local i\
    \ = 1\n   local j = 2\n   while i <= a do\n      if i % j == 0 then\n        \
    \ return false\n      end\n      j = j + 1\n   end\n   return true\nend", "  \
    \ -- Your code here\n   for i = 1,100 do\n      if i%3 == 0 and i%5 ~= 0 then\n\
    \         if a==(i*i) then\n            return true\n         end\n      end\n\
    \   end\n   return false\nend", "  local n = math.floor(a/3)\n  local d = a%3\n\
    \  local a1 = 3*n+1\n  local b1 = 3*n+2\n  local a2 = 5*n+1\n  local b2 = 5*n+2\n\
    \  local a3 = 5*n+3\n  local b3 = 5*n+4\n  -- print(n,d,a1,b1,a2,b2,a3,b3)\n \
    \ \n  local function helper(a,b,c)\n    if b == c then return true\n    else if\
    \ b > c then return false\n    else return helper(a,b,c-1) and helper(a,b-1,c-1)\
    \ and helper(a,b-1,c+1) end\n  end", "\tlocal i = 3\n\tlocal m = 2 \n\tlocal check\
    \ = false\n\tlocal prime_number = 2", "  -- We need only three multiples to get\
    \ the multiplication between 2 prime numbers (5, 7, 11)\n  -- So we know that\
    \ the multiplication is between 3 prime numbers (7, 11, 15)\n  -- We only need\
    \ to check that we are not dividing more than 3 times. \n  if a % 3 ~= 0 then\
    \ return false\n  local limit = math.ceil(a/3)\n  for i = 3, limit, 1 do\n   \
    \ if a % i ~= 0 then\n      return false\n    end\n  end\n  return true\nend",
  "  local function check_prime(n)\n    local primes, remainder = get_primes(n)\n\
    \    local count = 0\n    for i = 2, #primes do\n      if remainder == 0 then\n\
    \        if primes[i] == n then\n          return true\n        end\n      else\n\
    \        if primes[i] == n and primes[i+3] == n then\n          count = count\
    \ + 1\n        end\n      end\n    end\n    return false\n  end", "    if a <\
    \ 100 then\n        return false\n    end\n    if a % 3 == 0 and a % 5 == 0 then\n\
    \        return true\n    end\n    return false\nend\n</cell>\n<text>\nExercise\
    \ 15\nWrite a function that returns the multiplication of a number with each of\
    \ its prime factors. \nThis function is supposed to run without an error. \nIf\
    \ it produces an error, it is probably due to an out-of-bounds index or an infinite\
    \ loop. \nTo check for this, comment all the lines in your code and uncomment\
    \ one by one to find the line where the error happens. \nReport back the name\
    \ of the function and the line number where the error happened.", "    local i\
    \ = 0\n    local res = false\n    while i < a do\n        local b = a\n      \
    \  while b > 1 and b * b <= a do\n            local c = b\n            while c\
    \ > 1 and c * c <= a do\n                local d = c\n                while d\
    \ > 1 and d * d <= a do\n                    local t = d\n                   \
    \ while t > 1 and t * t <= a do\n                        local f = t\n       \
    \                 while f > 1 and f * f <= a do\n                            b\
    \ = b * f\n                            c = c * f\n                           \
    \ d = d * f\n                            t = t * f\n                         \
    \   f = f * f\n                        end\n                    end\n        \
    \        end\n            end\n        end\n        res = res or b == 3\n    \
    \    i = i + 1\n    end\n    return res\nend", "   -- Write your code here\nend",
  "  if a < 100 then\n    return false\n  end", "    local primes = {\n        2,\
    \ 3, 5, 7, 11, 13, 17, 19\n    }\n    for _, prime in pairs(primes) do\n     \
    \   if prime * a >= 100 then \n            return false\n        end\n    end\n\
    \    return true\nend", "    --print(\"a: \", a)\n    for i = 2, math.floor(a/3)\
    \ + 1\n        do\n            if a % i == 0 then\n                -- print(\"\
    false\")\n                return false\n            end\n        end\n    -- print(\"\
    true\")\n    return true\nend", "  if a < 100 then\n    return false\n  end",
  "    if a < 100 then\n        return true\n    end\n    local b = a*a -- b is always\
    \ between 30 and 100\n    local c = a*a -- c is always between 30 and 100\n  \
    \  for i=3,100, 2 do\n        local d = b - i*i -- d is always between 30 and\
    \ 100\n        local e = c - i*i -- e is always between 30 and 100\n        if\
    \ e < d and e < 100 then -- b - i*i = c * c \n            if e == c then return\
    \ true -- c is a multiple of itself.\n            end\n            if d < e then\
    \ return false -- c is not a multiple of itself.\n            end\n        end\n\
    \    end\n    return true\nend", "    -- base case\n    if a == 0 then\n     \
    \   return false\n    end\n    -- Recursive case\n    if a <= 100 then\n     \
    \   if a % 3 == 0 then\n            if a % 5 == 0 then\n                return\
    \ false\n            end\n        end\n    end", "\t-- Return false if a is not\
    \ a multiple of any 3 prime number.\n\tif not a or not a % 3 then return false\
    \ end\n\t-- Write your code below\nend", "   for i = 2, a do\n      if a % i ==\
    \ 0 then\n         return false\n      end\n   end\n   return true\nend", "  \
    \  local function is_a_prime(a)\n        for i = 2, 100 do\n            if math.mod((a-i),\
    \ a) == 0\n                then return true\n                end\n           \
    \ end\n        end\n        return false\n    end", "   if a <= 100 then\n   \
    \   local primes = math.random(math.ceil(a/3)) -- primes less than or equal to\
    \ a\n      \n      if primes == 0 then\n         return false\n      elseif primes\
    \ == 1 then\n         return true\n      else\n         -- For now we assume that\
    \ all prime numbers are multiples of 3\n         -- The condition a % 3 == 2 is\
    \ true for all primes up to a \n         -- that is divisible by 3 but not divisible\
    \ by 3.\n         -- We could change this to `a % 3 == 2` to take into account\
    \ primes\n         -- that are not multiples of 3\n         local aDivisor = math.floor(a/3)\n\
    \         for i = 2,math.floor(a/3) do\n            if aDivisor % i == 0 then\n\
    \               return false\n            end\n         end\n         return true\n\
    \      end\n   else\n      return false\n   end\nend", "    local n = 3\n    local\
    \ r = false\n    while n < a do\n        local m = math.floor((a*n)/2)\n     \
    \   r = not r and is_prime(m) and is_prime(n + m) and n % m == 0\n        n =\
    \ m + 2\n    end\n    return r\nend", '  local is_prime', "  local is_multiply_prime\
    \ = false\n  local max_prime = 10\n  local prime_limit = 10\n  -- Loop through\
    \ all max_prime numbers to check if a is the multiplication\n  for i=1,max_prime\
    \ do\n    local prime_counter = 1\n    prime_limit = prime_limit + 1\n    local\
    \ is_prime = true\n    for j=3,prime_limit do\n      if a % j == 0 then\n    \
    \    is_prime = false\n        break\n      end\n    end\n    if is_prime then\n\
    \      is_multiply_prime = true\n      if prime_counter == 3 then\n        return\
    \ is_multiply_prime\n      end\n      prime_counter = prime_counter + 1\n    end\n\
    \  end\n  return is_multiply_prime\nend", "  local n = 3\n  local i = a\n  while\
    \ i <= 100 do\n    if i % n == 0 then\n      return false\n    end\n    i = i\
    \ + 1\n    n = n + 1\n  end\n  return true\nend", "\tlocal primes = require 'primes'\n\
    \tlocal is_multiple = false\n\tlocal p = primes.next() \n\twhile p~=0 and a>0\
    \ do\n\t\tif a == p * p then\n\t\t\tis_multiple = true\n\t\telse\n\t\t\tis_multiple\
    \ = false\n\t\tend\n\t\tp = primes.next() \n\tend\n\treturn is_multiple\nend",
  "    local b = 2\n    while b < a do\n        if a % b == 0 then\n            return\
    \ false\n        end\n        b = b * 2\n    end\n    return true\nend", "\tlocal\
    \ is_multiply = false;\n\tlocal i;\n\tfor i = 1, a do\n\t\tlocal temp = 0;\n\t\
    \tfor j = 1, i do\n\t\t\tif i % j == 0 then\n\t\t\t\ttemp=temp+1;\n\t\t\tend\n\
    \t\tend\n\t\tif temp == i*i then\n\t\t\tis_multiply = true;\n\t\t\tbreak;\n\t\t\
    end\n\tend\n\treturn is_multiply;\nend", "    local function is_prime(p)\n   \
    \     -- We only need to check the first 5 prime numbers. \n        -- Any number\
    \ > 5 should be divisible by 2 and be less/equal than 100.\n        for i=1, 5\
    \ do\n            if p%i == 0 then\n                return false\n           \
    \ end\n        end\n        return true\n    end\n    \n    -- Only need to check\
    \ up to sqrt(a)\n    local i\n    for i=2, math.floor(a*0.5) do\n        if is_prime(i)\
    \ and a % i == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    if a <= 100 then\n        for i = 2, a do\n            if a\
    \ % i == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    return nil\nend", "    local p3 = p * 3\n \
    \   local q3 = q * 3\n    local r3 = r * 3\n    local prime_div = p / 3\n    local\
    \ prime_qua = q / 3\n    local prime_rem = p % 3\n    local prime_qua = q % 3\n\
    \    local prime_rem = prime_rem / 3\n    local prime_div2 = prime_div * 2\n \
    \   local prime_qua2 = prime_qua * 2\n    local prime_rem2 = prime_rem * 2\n \
    \   local prime_div3 = prime_div * 3\n    local prime_qua3 = prime_qua * 3\n \
    \   local prime_rem3 = prime_rem * 3\n    local prime_div5 = prime_div * 5\n \
    \   local prime_qua5 = prime_qua * 5\n    local prime_rem5 = prime_rem * 5\n \
    \   local prime_div7 = prime_div * 7\n    local prime_qua7 = prime_qua * 7\n \
    \   local prime_rem7 = prime_rem * 7\n    local prime_div11 = prime_div * 11\n\
    \    local prime_qua11 = prime_qua * 11\n    local prime_rem11 = prime_rem * 11\n\
    \    local prime_div13 = prime_div * 13\n    local prime_qua13 = prime_qua * 13\n\
    \    local prime_rem13 = prime_rem * 13\n    local prime_div17 = prime_div * 17\n\
    \    local prime_qua17 = prime_qua * 17\n    local prime_rem17 = prime_rem * 17\n\
    \    local prime_div19 = prime_div * 19\n    local prime_qua19 = prime_qua * 19\n\
    \    local prime_rem19 = prime_rem * 19\n    local prime_div23 = prime_div * 23\n\
    \    local prime_qua23 = prime_qua * 23\n    local prime_rem23 = prime_rem * 23\n\
    \    return a == p3 or a == q3 or a == r3 or prime_div == prime_qua or prime_qua\
    \ == prime_rem or\n        prime_div2 == prime_qua2 or prime_qua2 == prime_rem2\
    \ or prime_div3 == prime_qua3 or\n        prime_qua3 == prime_rem3 or prime_div5\
    \ == prime_qua5 or prime_", "    local count = 0\n    for i=2,100\n        do\n\
    \            if a % i == 0 then\n                count = count + 1\n         \
    \   end\n        end\n    return count > 0 -- return a boolean\nend", "    if\
    \ a < 100 then\n        return false\n    end\n    local n = 0\n    local p =\
    \ 3\n    while p * p <= a do\n        local q = 2\n        while q <= p do\n \
    \           if p * q == a then\n                n = n + 1\n            end\n \
    \           q = q + 1\n        end\n        p = p + 2\n    end\n    if n == 0\
    \ then\n        return true\n    else\n        return false\n    end\nend", " \
    \  --   We have to check if there is at least one prime in the range and \n  \
    \ --   there must be at least one even number above the prime\n   --   We also\
    \ need to check if there is an even number in the range.\n   if a%3==0 and a%2==0\
    \ then \n      -- We can also assume that the range has at least a number that\
    \ is divisible by three.\n      -- If that number is greater than 2 it cannot\
    \ be a multiplication of three primes.\n      return true\n   else\n      return\
    \ false\n   end\nend", '   if a > 100 then return false end', "  local b = 1\n\
    \  for i = 1, a do \n    if a % i == 0 then\n      b = b * i\n    end\n  end\n\
    \  return b\nend", "\tlocal count = 0\n\tlocal n = a\n\tlocal primes = primes_upto(n)\n\
    \tfor _, prime in pairs(primes) do\n\t\tcount = count + 1 \n\t\tif n % prime ==\
    \ 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\tif count == 3 then\n\t\treturn\
    \ true\n\telse\n\t\treturn false\n\tend\nend", "    local a2 = a * 2\n    local\
    \ b2 = a2 * 3\n    local c2 = b2 * 5\n    return a > 100 or (a2 == b2 and c2 ==\
    \ a * 3)\nend", "\tlocal isMultiply = true\n\tlocal limit = 3\n\tlocal primes\
    \ = []\n\tfor i = 1,limit do\n\t\tif primes[i] == 0 then\n\t\t\t-- we found a\
    \ prime number\n\t\t\tfor j = 1,limit do\n\t\t\t\tif a % primes[j] == 0 then\n\
    \t\t\t\t\t-- we found a factor\n\t\t\t\t\tprimes[j] = nil\n\t\t\t\t\t-- we found\
    \ a multipler prime number\n\t\t\t\t\tisMultiply = false\n\t\t\t\t\tbreak\n\t\t\
    \t\tend\n\t\t\tend\n\t\t\t-- add the prime number to the list\n\t\t\tif isMultiply\
    \ then\n\t\t\t\tprimes[#primes+1] = a\n\t\t\tend\n\t\tend\n\tend\n\treturn isMultiply\n\
    end", "    local i = 2\n    while i <= a do\n        if i % 3 == 0 and i % 5 ==\
    \ 0 then\n            return true\n        elseif i % 3 == 2 or i % 5 == 2 then\n\
    \            return false\n        else\n            i = i + 2\n        end\n\
    \    end\n    return true\nend", "  return a % 3 == 0 and a % 5 == 0\nend", " \
    \ -- First we calculate how many multiples we need\n  local multiples = 1\n  while\
    \ a % 3 == 0 and a % 5 == 0 do\n    multiples = multiples + 1\n    a = a / 5\n\
    \  end\n  -- Now, we check if the number is divisible by all our multiples, if\
    \ so return true\n  for i = 1, multiples do\n    if a % i == 0 then\n      return\
    \ false\n    end\n  end\n  -- Otherwise, the number is not divisible by all our\
    \ multiples, return true\n  return true\nend", "\t-- Check if number is greater\
    \ than or equal to 1\n\tif a <= 1 then\n\t\treturn false\n\tend", "    local n1\
    \ = 2\n    local n2 = 1\n    local c1 = 1\n    local c2 = 2\n    local c = 1\n\
    \    while n2 <= a do\n        local d = math.floor(a/n2)\n        if d > c1 then\n\
    \            c1 = d\n        end\n        if c1 <= c and n2 <= a do\n        \
    \    local m = 3*n2*n1\n            if m == a then\n                return true\n\
    \            elseif m == n1 then\n                n1 = n1 + 1\n            elseif\
    \ m == n2 then\n                n2 = n1 + 1\n            else\n              \
    \  c = c1 + 1\n                n = m\n            end\n        else\n        \
    \    n1 = n1 + 1\n            n2 = n1 + 1\n        end\n    end\n    return false\n\
    end", "\tlocal function is_prime(n)\n\t\tif n == 2 then\n\t\t\treturn true\n\t\
    \telseif n % 2 == 0 then\n\t\t\treturn false\n\t\telse\n\t\t\tfor i = 2, #primes\
    \ do\n\t\t\t\tif n % i == 0 then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\t\
    end\n\t\t\treturn true\n\t\tend\n\tend", "    return a % 3 == 0 and a % 5 ~= 0\
    \ and a % 7 ~= 0 and a % 11 ~= 0\nend", "\t-- base case\n\tif a == 1 then return\
    \ false end", "  if a == 0 then return false end\n  local primes = { 2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,\
    \ 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257,\
    \ 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353,\
    \ 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449,\
    \ 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563,\
    \ 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653,\
    \ 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761,\
    \ 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,\
    \ 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991,\
    \ 997}\n  local n = 3\n  local m = a\n  while n <= m do\n    if n % primes[#primes]\
    \ ~= 0 then\n      return false\n    end\n    n = n + 1\n  end\n  return true\n\
    end", "  local b\n  for b = #primeList to 1 do\n    if a == b * primeList[b] then\n\
    \      return true\n    end\n  end\n  return false\nend", "  if a <= 100 then\n\
    \    for i = 1, a do\n      if a % i == 0 then\n        return false\n      end\n\
    \    end\n    return true\n  else\n    return false\n  end\nend", "    local i\
    \ = 3\n    while i <= a do\n        if ((a % i) == 0 and ((i * i) == a)) then\n\
    \            return true\n        end\n        i = i + 2\n    end\n    return\
    \ false\nend", "    local function check(num, sum)\n        if num == false then\n\
    \            if sum > 100 then\n                return false\n            else\n\
    \                return check(num, sum + 2)\n            end\n        else\n \
    \           if num % sum == 0 then\n                return false\n           \
    \ else\n                return check(num, sum + 2)\n            end\n        end\n\
    \    end\n    return check(a, 2)\nend", "   local function is_factor(n)\n    \
    \  return (n > 1 and math.floor(n/3) == n) or (n == 1)\n   end", "    local a=\
    \ a-1\n    local b=math.floor(a)\n    local c= a-b\n    local d= math.floor(c/5)\n\
    \    local e= c-d*5\n    local f= c-d*5*5\n    local g= c-d*5*5*5\n    if a >\
    \ 100 then\n        return false\n    end\n    if b == 3 and c == 2 and d == 3\
    \ and e == 5 and f == 0 and g == 5 then\n        return true\n    end\n    return\
    \ false\nend", "  local factors = {}\n  -- The first element of the pair is for\
    \ a. the second is for b. \n  for i,b in ipairs(prime_numbers) do\n    -- i is\
    \ the current prime number.\n    -- For each prime number, find how many times\
    \ the number is divisible by it. \n    local count_factors = 1\n    for j,d in\
    \ ipairs(prime_numbers) do\n      if i == d then\n        count_factors = count_factors\
    \ * 2\n      elseif i == 3*d and is_multiply(a,b) then\n        count_factors\
    \ = count_factors * 3\n      end\n    end\n    -- If the count is greater than\
    \ 3, the number is divisible by three prime numbers.\n    if count_factors > 3\
    \ then\n      return false\n    end\n    -- Add the prime number and its factor\
    \ to a table (factors). \n    table.insert(factors, {i, count_factors})\n  end\n\
    \  -- If we have factors, the number is divisible by them. \n  -- Therefore, all\
    \ the factors must be greater than 3. \n  for i,d in ipairs(prime_numbers) do\n\
    \    if count_factors[i] == 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    -- First check that the given number is less than 100\n   \
    \ if a < 100 then\n        -- Check that a given number is 3 prime.\n        return\
    \ is_prime(a) and is_prime(a * 3) and is_prime(a * 5)\n    end\n    -- Otherwise\
    \ we know the number is not less than 100.\n    return false\nend", "    local\
    \ b = 1\n    for i = 2 to a do\n        if a % i == 0 then\n            if a %\
    \ i == 0 then\n                b = b + 1\n            else\n                a\
    \ = a / i\n                return false\n            end\n        end\n    end\n\
    \    return true\nend", "    local x = math.floor(a/3)\n    local y = math.floor(a/5)",
  "  local b = 3\n  while b < a do\n    if a % b == 0 then\n      a = a / b\n    else\n\
    \      return false\n    end\n    b = b + 1\n  end\n  if a == 1 then return false\
    \ end\n  return true\nend", "  local n = math.floor(a/3)\n  local m = math.floor(a-(n*3))\n\
    \  for i=1,n do\n    local b = i+m\n    if is_prime(b) then\n      return true\n\
    \    end\n  end\n  return false\nend", "   -- Check that the number is divisible\
    \ by 3\n   if a % 3 == 0 then\n      return false\n   else\n      -- Check that\
    \ its not divisible by any of its factors\n      for i = 0, a / 3 do\n       \
    \  local b = a / 3\n         while b > 1 do\n            -- Check that the number\
    \ is divisible by 3\n            if b % 3 == 0 then\n               return false\n\
    \            else\n               -- Check that the factor is prime.\n       \
    \        if b % 2 == 0 and a > b then\n                  return false\n      \
    \         end\n            end\n            b = b / 2\n         end\n      end\n\
    \      return true\n   end\nend", "  local b = 3\n  local prime_found = false\n\
    \  local i = 3\n  while b > 100 and not prime_found do\n    while i * i <= a and\
    \ not prime_found do\n      if a == i * i then\n        prime_found = true\n \
    \       break\n      end\n      i = i + 1\n    end\n    if prime_found then break\
    \ end\n    b = b + 1\n  end\n  return prime_found\nend", "  -- Base case\n  if\
    \ a < 100 then\n    local b = 1\n    while b <= a do\n      if is_prime(b) then\n\
    \        return (not is_multiply_prime(a))\n      end\n      b = b + 1\n    end\n\
    \    return true\n  end\n  -- Recursive case\n  local i = 1\n  while i <= a do\n\
    \    if is_multiply_prime(i) then\n      return false\n    end\n    i = i + 1\n\
    \  end\n  return true\nend", "  if a == 1 then return true\n  else if a == 2 then\
    \ return true \n  else\n    for i = 2, a * a + 2; i <= a^2 + a^3; i += 1 do\n\
    \      if i % a == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\nend", "  for i = 3, a/2, 2 do\n    if a%i == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local n = 1\n  repeat\n    if\
    \ (math.mod(a, n) == 0) then\n      if ((is_prime(n)) and (is_prime(math.mod(a,\
    \ n))) and (is_prime(math.mod(a, math.mod(n, n))))) then\n        return true\n\
    \      end\n    end\n    n += 2\n  until n <= 100\n  return false\nend", "   \
    \ local d = a\n    while d > 0 do\n        if d % 3 == 0 and d % 5 == 0 then\n\
    \            return false\n        end\n        d = d / 2\n    end\n    return\
    \ true\nend", "    local i\n    for i = 3, 1, -1 do\n        if a == i * i then\n\
    \            return true\n        end\n        if a % i == 0 then\n          \
    \  return false\n        end\n    end\n    return true\nend", "\t-- check base\
    \ case for a\n\tif a ~= 0 then\n\t\t-- find all primes less than a\n\t\tlocal\
    \ primes = primes(a)\n\t\t\n\t\t-- check if a is a multiple of one of the primes\n\
    \t\tfor _, prime in pairs(primes) do\n\t\t\tif a % prime == 0 then\n\t\t\t\treturn\
    \ false\n\t\t\tend\n\t\tend\n\tend\n\t\n\t-- base case for a\n\treturn true\n\
    end", "    local i = 2\n    while i <= math.sqrt(a) do\n        -- Check whether\
    \ the number is a factor of 3\n        if math.fmod(a, i) == 1 then\n        \
    \    -- If the number is a factor of 3, then check if it also is\n           \
    \ -- a factor of 5 and 7, if it is, then it is not a prime\n            if math.fmod(i,\
    \ 5) == 1 then\n                if math.fmod(i, 7) == 1 then\n               \
    \     return false\n                end\n            end\n            -- If it\
    \ is not a factor of 3, 5, then it is prime\n            elseif math.fmod(i, 3)\
    \ == 1 then\n                return true\n            end\n        -- Increase\
    \ the number by 1\n        i += 1\n    end\nend", "    if a == 0 then\n      \
    \  return false\n    end\n    for i = 2, a/2 do\n        if ((a % i == 0) and\
    \ (a % i != a) and (a % i != 1)) and (not is_multiply_prime(i)) then\n       \
    \     return false\n        end\n    end\n    return true\nend", "  local function\
    \ helper(index, count)\n    if index == a then \n      return true\n    elseif\
    \ index > 100 then\n      return false\n    end\n    local m = math.floor(index\
    \ / 3)\n    if index == 3 * m + 2 or index == 3 * m - 2 then\n      return helper(index\
    \ + 1, count) \n    end\n    return helper(index + 1, count) or helper(index +\
    \ 1, count) \n  end\n  return helper(1, 1)\nend", "   if a <= 100 then\n     \
    \ return false\n   else\n      return (\n         a == 2 or\n         a == 3 or\n\
    \         a == 5 or\n         a == 7 or\n         a == 11 or\n         a == 13\
    \ or\n         a == 17 or\n         a == 19 or\n         a == 23 or\n        \
    \ a == 29 or\n         a == 37 or\n         a == 43 or\n         a == 51 or\n\
    \         a == 59 or\n         a == 67 or\n         a == 73 or\n         a ==\
    \ 79 or\n         a == 87 or\n         a == 111 or\n         a == 127 or\n   \
    \      a == 131 or\n         a == 137 or\n         a == 143 or\n         a ==\
    \ 149 or\n         a == 151 or\n         a == 157 or\n         a == 163 or\n \
    \        a == 167 or\n         a == 173 or\n         a == 179 or\n         a ==\
    \ 185 or\n         a == 191 or\n         a == 197 or\n         a == 203 or\n \
    \        a == 209 or\n         a == 217 or\n         a == 227 or\n         a ==\
    \ 239 or\n         a == 241 or\n         a == 247 or\n         a == 251 or\n \
    \        a == 257 or\n         a == 263 or\n         a == 269 or\n         a ==\
    \ 275 or\n         a == 281 or\n         a == 287 or\n         a == 293 or\n \
    \        a == 299 or\n         a == 305 or\n         a == 311 or\n         a ==\
    \ 317 or\n         a == 323 or\n         a == 329 or\n         a == 335 or\n \
    \        a == 341 or\n         a == 347 or\n         a == 355 or\n         a ==\
    \ 361 or\n         a == 367 or\n         a == 373 or\n         a == 379 or\n \
    \        a == 387 or\n         a == 393 or\n         a == 401 or\n         a ==\
    \ 407 or\n         a == 413 or\n         a == 417 or\n         a == 423 or\n \
    \        a == 429 or\n         a == 433 or\n         a == 439 or\n         a ==\
    \ 445 or\n         a == 451 or\n         a == 457 or\n         a == 463 or\n \
    \        a == 469 or\n         a == 475 or\n         a == 479 or\n         a ==\
    \ 485 or\n         a == 491 or\n         a == 499 or\n         a == 505 or\n \
    \        a == 511 or", "  if a <= 100 then\n    local primes, counter = primes(a)\n\
    \    if prime > 0 then\n      local found = false\n      for i, prime in pairs(primes)\
    \ do\n        if prime * 3 == a then return true end\n      end\n      return\
    \ false\n    end\n  end\nend\n</cell>\n<text>\n3.2. Function sum", "    local\
    \ i, j = 2, a - 1\n    while i < j do\n        local b = 2 * i\n        if b *\
    \ j <= a then\n            return false\n        elseif b == a then\n        \
    \    j = j + 1\n        else\n            i = i + 1\n        end\n    end\n  \
    \  return true\nend", "  return a % 3 == 0 and\n         a % 5 == 0 and\n    \
    \     a % 7 == 0 and\n         a % 11 == 0 and\n         a % 13 == 0 and\n   \
    \      a % 17 == 0 and\n         a % 19 == 0 and\n         a % 23 == 0 and\n \
    \        a % 29 == 0 and\n         a % 31 == 0\nend", "  local b = 1\n  while\
    \ b < a do\n    if a % b == 0 then return false end\n    if b % 3 == 0 then return\
    \ false end\n    local c = 3\n    while c < b do\n      if b % c == 0 then return\
    \ false end\n      c = c + 1\n    end\n    b = b + 1\n  end\n  return true\nend\n\
    </cell>\n<text>\nProblem 2: Write a function that checks if a given number is\
    \ prime or composite (as defined below).\nA composite number is a number that\
    \ has all prime factors other than one (except for 1).", "  local isPrime = true;\n\
    \  local factor = 3;\n  while factor <= a and isPrime do\n    isPrime = checkIfPrime(factor);\n\
    \    factor = factor + 3;\n  end\n  return isPrime;\nend", "  if a < 100 then\n\
    \    return false\n  elseif is_prime(a) then\n    return true\n  else\n    local\
    \ s = a\n    for i = 2, a do\n      if s % i ~= 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\nend", "  if a > 100 then return false\
    \ end\n  local n = 0\n  local is_prime = true\n  for i = 2, a do\n    if is_prime\
    \ and ((i % 2) == 0) then\n      n = n + 1\n      if not (i in primes) then\n\
    \        is_prime = false\n        break\n      end\n    else\n      if n >= 2\
    \ then\n        if is_prime then\n          n = n - 2\n        else\n        \
    \  n = n + 1\n        end\n      else\n        n = n - 1\n      end\n    end\n\
    \  end\n  return not is_prime\nend", "\treturn (a >= 100) then\n\t\treturn\n\t\
    \t\t-- Find out if any of those primes are less then 100, if so, return false\n\
    \t\t\t-- Otherwise return true\n\t\t\ta % 2 ~= 0 and a % 3 == 0 or a % 5 == 0\
    \ or\n\t\t\ta % 7 == 0 or\n\t\t\ta % 11 == 0 or\n\t\t\ta % 13 == 0 or\n\t\t\t\
    a % 17 == 0 or\n\t\t\ta % 19 == 0 or\n\t\t\ta % 23 == 0 or\n\t\t\ta % 29 == 0\n\
    \t\tend\n\tend", "  local b = a\n  while b > 100 do\n    b = b * 3\n  end\n  local\
    \ mult = 1\n  local i = 1\n  while i < b do\n    if a % i == 0 then\n      return\
    \ false\n    end\n    mult = mult * i\n    i = i + 1\n  end\n  return true\nend",
  "    local primes = {}\n    primes[1]=true\n    for i=2,a-1 do\n        local prime\
    \ = true\n        for j=1,i do\n            if not primes[math.floor(i/j)] then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            primes[i] = true\n        end\n  \
    \  end\n    return primes[a] and is_multiply_prime(a-1)\nend", "    local result\
    \ = nil\n    if a == 1 then\n        result = false\n    else\n        -- check\
    \ multiplication of primes\n        for i = 2, a do\n            if a % i == 0\
    \ then\n                result = false\n                break\n            else\n\
    \                result = true\n                break\n            end\n     \
    \   end\n    end\n    return result\nend", "\tif a <= 100 then\n\t\treturn false\n\
    \tend\n\t\n\tlocal p = 3\n\tlocal m = 1\n\t\n\twhile p <= a/2 do\n\t\tif math.fmod(a,\
    \ p) == 0 then\n\t\t\tm = m + 1\n\t\tend\n\t\tp = p + 2\n\tend\n\t\n\tif m >=\
    \ 3 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "   \n   --\
    \ Write your code here\n   local is_multiple, i, k = 0, 3, 0\n   while a ~= 0\
    \ do\n      while a % i ~= 0 do\n         k = k + 1\n         a = a / i\n    \
    \  end\n      is_multiple = is_multiple or k == 3\n      i = i + 1\n   end\n \
    \  if is_multiple then\n      return true\n   else\n      return false\n   end\n\
    end", "   assert(100 >= a >= 1)\n   -- return true only if a^2, a^3 and a^5 all\
    \ return true\n   -- return false otherwise\n   -- return false if a^2, a^3 or\
    \ a^5 return false\n   -- return true otherwise", "    local function is_prime(n)\n\
    \        if a == 1 or n == 0 then\n            return true\n        end\n    \
    \    if a == 2 then\n            return true\n        end\n        local m = math.floor(n/a)\n\
    \        if m == 1 or n % a == 0 then\n            return false\n        else\n\
    \            return is_prime(m)\n        end\n    end\n    return is_prime(math.floor(a/2))\n\
    end", "  if a <= 100 then\n    return true\n  else\n    return nil\n  end\nend",
  "    if a % 3 == 0 then\n        return false\n    end\n    local n = 3\n    local\
    \ b = a\n    while (b > 1) do\n        -- We only consider numbers that are divisible\
    \ by 3, as 3 can be divided by only 2 and 1.\n        if b % 3 == 0 then\n   \
    \         if b % n == 0 then\n                return false\n            end\n\
    \        end\n        n = n + 1\n        b = b / 3\n    end\n    return true\n\
    end", "  return ( a > 100 ) -- we know we never get to here when a = a\n     \
    \    and ( a == math.mod(a,3) )\n         and ( a == math.mod(a,5) ) \n      \
    \   and ( a == math.mod(a,7) ) \nend", "    local is_prime = false\n    for i\
    \ = 2,100 do\n        if a%i ~= 0 then\n            table.insert(is_prime, i)\n\
    \        end\n    end\n    if #is_prime < 3 then\n        return false\n    end\n\
    \    return true\nend", "  local is_prime\n  local div\n  local i\n  for i = 3,\
    \ math.sqrt(a), 2 do\n    div = a / i\n    if div == 1 or div == 3 then -- 1 divisor\
    \ or 3 divisors\n      is_prime = true\n      break\n    end\n  end\n  if is_prime\
    \ and i==a then -- a is multiply of 3\n    return true\n  else\n    return false\n\
    \  end\nend", "\tlocal m = a\n\tlocal i = 1\n\twhile m % 2 == 0 do\n\t\tm = m\
    \ / 2\n\t\ti = i + 1\n\tend\n\tif a < 3 or i > 100 then\n\t\treturn false\n\t\
    end\n\t\n\tlocal i = 1\n\twhile m % 3 == 0 do\n\t\tm = m / 3\n\t\ti = i + 1\n\t\
    end\n\tif i ~= 1 then\n\t\treturn false\n\tend\n\t\n\tlocal i = 1\n\twhile m %\
    \ 5 == 0 do\n\t\tm = m / 5\n\t\ti = i + 1\n\tend\n\tif i ~= 1 then\n\t\treturn\
    \ false\n\tend\n\t\n\tlocal i = 1\n\twhile m % 7 == 0 do\n\t\tm = m / 7\n\t\t\
    i = i + 1\n\tend\n\tif i ~= 1 then\n\t\treturn false\n\tend\n\t\n\tlocal i = 1\n\
    \twhile m % 11 == 0 do\n\t\tm = m / 11\n\t\ti = i + 1\n\tend\n\tif i ~= 1 then\n\
    \t\treturn false\n\tend\n\t\n\treturn true\nend", "    for i = 1, a do\n     \
    \   if prime == 3 then\n            return true\n        end\n        if prime\
    \ == 2 then\n            return false\n        end\n        local remainder =\
    \ a % prime\n        if remainder == 0 then\n            prime = prime + 1\n \
    \       end\n        a = a\n    end\n    return false\nend", "   if a == 2 then\n\
    \      return true\n   elseif a == 3 then\n      return true\n   elseif a%2 ==\
    \ 0 and a%3 == 0 then\n      local b = (3*a + 1)/2\n      if b == 1 then\n   \
    \      return true\n      else\n         return b == math.floor(b)\n      end\n\
    \   else\n      return false\n   end\nend", "    local prime_number_1 = math.random(100)\
    \ + 2\n    local prime_number_2 = math.random(100) + 2\n    local prime_number_3\
    \ = math.random(100) + 2\n    local is_multiply_prime = true\n    for i = 1, a\
    \ do\n        if prime_number_1 ~= prime_number_2 then\n            if prime_number_3\
    \ ~= prime_number_1 then\n                if prime_number_3 ~= prime_number_2\
    \ then\n                    is_multiply_prime = false\n                    break\n\
    \                end\n            end\n        end\n    end\n    return is_multiply_prime\n\
    end", "\t--print('is_multiply_prime: ',a)\n\t-- base case\n\tif a < 100 then\n\
    \t\treturn true\n\tend", "  if a < 100 then\n    return false\n  elseif is_prime(a)\
    \ then\n    for _, _ in pairs(primes) do\n      if a % _ == 0 then\n        return\
    \ false\n      end\n    end\n    return true\n  else\n    return false\n  end\n\
    end", "  -- TODO: implement\nend", "   if a < 100 then\n      local p = 3\n  \
    \    local q = 3\n      while p <= a do\n         local q1 = p + q\n         if\
    \ is_multiply_prime(q1) then\n            q = q + 1\n         else\n         \
    \   p = p + 1\n         end\n      end\n      return p == a\n   else\n      return\
    \ false\n   end\nend", "  local isDivisible = false\n  -- Loop over all known\
    \ primes\n  local p = 2\n  -- Loop until we have a known prime\n  while p * p\
    \ <= a do\n    -- Test if the number is divisible by a known prime number\n  \
    \  local q = 1\n    -- Loop over known primes\n    while q * q <= p do\n     \
    \ -- Test if the number is divisible by the known prime number\n      if a % q\
    \ == 0 then\n        isDivisible = true\n      end\n      -- Increment the known\
    \ prime number\n      q = q + 1\n    end\n    -- Increment the known prime\n \
    \   p = p + 1\n  end\n  return isDivisible\nend", "\tlocal n = 2\n\t\n\t-- base\
    \ case\n\tif a == 2 then\n\t\treturn true\n\tend\n\t\n\t-- find out if there is\
    \ a factor of 3 in a\n\twhile n % 3 == 0 do\n\t\tn = n / 3\n\tend\n\t\n\t-- check\
    \ if a is multiple of n\n\twhile a % n == 0 do\n\t\ta = a / n\n\tend\n\t\n\treturn\
    \ false\nend", "    local i, j = 2, 100\n    while j <= a/2 do\n        if i %\
    \ j == 0 then\n            return false\n        end\n        j = j + 1\n    end\n\
    \    return true\nend", "  return a > 100 or is_multiply_prime_helper(a, 100)\
    \ -- stop when is less than 100\nend", "    return a > 0 and\n        ( a % 2\
    \ == 0 or \n          (is_multiply_prime(math.floor(a/2)) + is_multiply_prime(math.floor(a/4))\
    \ + is_multiply_prime(math.floor(a/8))) == 0 and\n          is_multiply_prime(math.floor(a/3))\
    \ == 0 )\nend", "   if a <= 100 then\n      local n = 3\n      local i = 1\n \
    \     while n <= a do\n         if i%2 ~= 0 then\n            if a*n % a == 0\
    \ then\n               return false\n            end\n         end\n         i\
    \ = i+2\n         n = n*3 + 1\n      end\n      return true\n   else\n      return\
    \ nil\n   end\nend", "    if a < 100 then\n        return true\n    end\n    local\
    \ n = a\n    local d = 2\n    while d < n do\n        if n % d == 0 then\n   \
    \         return false\n        end\n        d = d + 1\n    end\n    return true\n\
    end", "\tlocal p\n\tlocal i\n\t\n\tif a == 0 then\n\t\treturn nil\n\tend\n\t\n\
    \t-- Test if all numbers are prime\n\tfor i = 1, a do\n\t\tp = prime_table[i]\n\
    \t\tif p == nil then\n\t\t\treturn nil\n\t\tend\n\t\tif a % p == 0 then\n\t\t\t\
    return nil\n\t\tend\n\tend\n\t\n\t-- Test if there are not 2 prime numbers between\
    \ 2 numbers a and b \n\t-- that add up to a\n\ti = 2\n\twhile i <= a do\n\t\t\
    p = prime_table[i]\n\t\tif p == nil then\n\t\t\treturn nil\n\t\tend\n\t\t\n\t\t\
    j = 1\n\t\twhile j <= b do\n\t\t\t-- Check if a and b have a multiplication factor\n\
    \t\t\tif p % prime_table[j] == 0 then\n\t\t\t\treturn nil\n\t\t\tend\n\t\t\t\n\
    \t\t\tj = j + 1\n\t\tend\n\t\t\n\t\ti = i + 1\n\tend\n\t\n\treturn true\nend",
  "   for _,v in pairs(primes) do\n      if (v <= a) then\n         if (a == v*v)\
    \ then\n            return true\n         end\n      end\n   end\n   return false\n\
    end", "  if a < 100\n  then\n    local c = 3\n    while c <= a\n    do\n     \
    \ if a % c\n      then\n        return false\n      end\n      c = c + 2\n   \
    \ end\n    return true\n  end\n  return false\nend", "  local mult = 1\n  local\
    \ count = 0\n  for i=2,a do\n    if a % i == 0 then\n      count = count+1\n \
    \     if count >= 3 then\n        mult = mult+1\n        count = count-1\n   \
    \   end\n    end\n  end\n  if a == mult then return true end\n  return false\n\
    end", "\tlocal i\n\tfor i in a:range(2, 100) do\n\t\tif i % 3 ~= 0 and i % 5 ~=\
    \ 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  -- base\
    \ case\n  if a <= 100 then\n    return false\n  end", "\tlocal function test()\n\
    \t\t-- return (math.abs(a - 2)) == 2 -- fail\n\t\treturn (math.abs(a - 3)) ==\
    \ 0 -- fail\n\tend\n\tlocal i = 1\n\tfor i = 2, a do\n\t\t-- return test() --\
    \ fail\n\t\tif (test())then break end\n\t\ti = i + 1\n\tend\n\t-- return test()\
    \ -- fail\n\treturn true\nend", "  local is_is_divisible_by_prime = false\n  for\
    \ i = 2, 100 do\n    if a % i == 0 then\n      is_is_divisible_by_prime = true\n\
    \      break\n    end\n  end\n  return is_is_divisible_by_prime\nend", "    local\
    \ ismultiply = 1\n    local div\n    local div2\n    local i\n    for i = 2, a\
    \ do\n        div = a / i\n        div2 = div * div\n        if div2 <= a and\
    \ div2 > 0 and div2 % 2 == 0 then\n            ismultiply = ismultiply + 1\n \
    \       end\n    end\n    return ismultiply >= 3\nend", "\t-- The multiplication\
    \ of prime numbers is the product of prime numbers. \n\t-- We assume that a is\
    \ less then 100.\n\t-- We have to go over all prime numbers until we find a number\
    \ that's less than a.\n\tlocal b = 1\n\tlocal i = 1\n\twhile b <= a do\n\t\tif\
    \ i%2 ~= 0 then\n\t\t\tif i%3 == 0 then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\
    \t\tb = b * 2\n\t\t\tend\n\t\telse\n\t\t\tif i%5 == 0 then\n\t\t\t\treturn false\n\
    \t\t\telse\n\t\t\t\tb = b * 3\n\t\t\tend\n\t\tend\n\t\ti = i + 1\t\n\tend\n\t\
    return true\nend", "    assert(a > 100, \"A number must be greater then 100\"\
    )\n    local b = 1\n    while b < a do\n        if a % b == 1 then\n         \
    \   return false\n        end\n        b = b + 1\n    end\n    return true\nend",
  "    if a <= 100 then\n        return a % 2 ~= 0 and a % 3 ~= 0\n    end\n    return\
    \ false\nend", "    if a <= 100 then\n        local i = 0\n        local multiple\
    \ = 1\n        \n        while i < a do\n            multiple = multiple + 2\n\
    \            if multiple > a then\n                return true\n            end\n\
    \            i = i + 1\n        end\n        return false\n    end\n    return\
    \ false\nend", "   for i = 1, 1000000000 do\n      if i % 3 == 0 then\n      \
    \   if i % 5 == 0 then\n            if a % i == 0 and a % 5 == 0 then return true\
    \ end\n         end\n      end\n   end\n   return false\nend", "    local n =\
    \ math.floor(a/3)\n    for i = 1, n do\n        if isprime(a-3*i) then\n     \
    \       return false\n        end\n    end\n    return true\nend", "    local\
    \ b = true\n    while b and a > 100 do\n        if a % 3 == 0 then\n         \
    \   if a % 5 == 0 then\n                b = false\n            else\n        \
    \        a = a / 5\n            end\n        else\n            a = a / 3\n   \
    \     end\n    end\n    return b\nend", "\tif a <= 100 then\n\t\treturn false\n\
    \tend\n\tfor i = 1, a do\n\t\tlocal b = 2\n\t\twhile b <= a do\n\t\t\tif a % b\
    \ == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tb = b + 1\n\t\tend\n\tend\n\
    \treturn true\nend", "   -- Base Case\n   if a == 1 then\n      return true\n\
    \   else\n      -- Find all factors up to a of 30\n      local is_factor = {}\n\
    \      for i=1,a do\n         if is_factor[i] == 0 then\n            -- Check\
    \ if a is divisible by each factor of a\n            for j=1,a do\n          \
    \     if i%j == 0 then\n                  is_factor[i] = false\n             \
    \     break\n               end\n            end\n         end\n      end", " \
    \  local p = 2\n   local count = 2\n   while p*p <= a and count ~= 0 do\n    \
    \  if p*p > a then\n         return false\n      else\n         local m = 3\n\
    \         while m < p and m <= count/2 do\n            local q = m * (m - 1)\n\
    \            if q % p == 0 then\n               return false\n            end\n\
    \            m = m + 1\n         end\n         count = count + 1\n      end\n\
    \      p = p + 1\n   end\n   return true\nend", "  local b = 3\n  -- Check for\
    \ any factor of a\n  while b < a do\n    local d = math.floor((a - b) / 2)\n \
    \   local i = true\n    -- Check if factors of d are primes\n    for j = 2, d\
    \ do\n      i = i and (not is_prime(j))\n    end\n    i = i and is_multiply_prime(d)\n\
    \    b = b + 2\n  end\n  return a % 2 == 0 and is_multiply_prime(a/2)\nend", " \
    \ return a <= 100 and\n    count_factors(a) ==\n    math.min(count_factors(a),\
    \ count_factors(math.floor(a/2)))\nend\n</cell>\n<cell>", "    local b = 2\n \
    \   while b <= a do\n        if a % b == 0 then\n            return false\n  \
    \      end\n        b = b + 1\n    end\n    return true\nend", "    local i =\
    \ 0\n    local is_prime = true", "    local limit = math.sqrt(a) \n    -- Check\
    \ if a is a prime number\n    local function prime(a)\n        local i = 1\n \
    \       -- If number is not prime\n        while i <= a do\n            -- Check\
    \ if number is a prime number\n            if a % i == 0 then\n              \
    \  -- Break the loop\n                break\n            end\n            i =\
    \ i + 1\n        end\n        return i == a\n    end\n    -- Check if a is less\
    \ then 100\n    if a < 100 then\n        return false\n    end\n    -- If number\
    \ is less then 3 then return false\n    if limit*limit > a then\n        return\
    \ false\n    end\n    -- Check if number is prime\n    if prime(a) then\n    \
    \    -- Check all numbers up to limit and see if they are multiplication of primes\n\
    \        for i=1, limit do\n            if a % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\nend", " \
    \   local i\n    for i = 2, a do\n        if isprime(i) and (i + 1) ~= a then\n\
    \            if a%3 == 0 or (i+1)%3 == 0 or (a*2)%3 == 0 or (a*3)%3 == 0 then\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend", "  -- TODO: Write code here!\n  return false\nend", "    --local\
    \ is_multiple, p, q\n    --is_multiple = false\n    --for p=3; p<a; p=p+1 do\n\
    \    --    for q=3; q<p; q=q+1 do\n    --        if p * q == a  then\n    -- \
    \           -- is_multiple = true\n    --            -- break -- exit inner loop\n\
    \    --        end\n    --    end\n    --end\n    --return is_multiple\n    --return\
    \ p*q == a\n    return 3..a-1 == (2..a-1)\nend", "    local i, j, d, n = 0, 2,\
    \ 3, 0\n    while a ~= 0 do\n        if (a % 2 == 0) then\n            d = a +\
    \ 1\n        else\n            d = a * 3 + 1\n        end\n        i = d - 1\n\
    \        j = 2 * i\n        while i <= j and n ~= 0 do\n            if (n % i\
    \ == 0) then\n                n = n - 1\n            end\n            i = i +\
    \ 2\n        end\n        a = d\n    end\n    return n == 0\nend", "    local\
    \ b = 1\n    while (b <= a / 2) do\n        if math.floor(a/b)%3 ~= 0 then return\
    \ false end\n        -- if we have found a divisor, divide it by 3, and continue\
    \ the while loop\n        a = math.floor(a/3)\n        b = b + 1\n    end\n  \
    \  return true\nend", "   local n = 3\n   for i = 3, a / 2 do\n      if not (n\
    \ % i) and (not (n % i - 1)) then\n         return false\n      end\n      n =\
    \ n / i\n   end\n   return true\nend", "    local function is_odd(n)\n       \
    \ return n % 2 == 0\n    end", "    local b\n    for b in pairs(primes) do\n \
    \       if (a % b) == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "  if a == 0 then\n    return false\n  elseif factor(a,\
    \ 3) == nil then\n    return false\n  else\n    return true\n  end\nend", "  \
    \  -- Write your code here\n    -- To test this function, first determine if n\
    \ is prime:\n    if a <= 100 and a % 2 == 0 and a ~= 0 then\n        for n = 2,\
    \ 100 do\n            if a % n == 0 then\n                return false\n     \
    \       end\n        end\n        return true\n    end\nend", "  if a < 100 then\n\
    \    return false\n  end\n  local limit = math.floor((a/3)+0.5)\n  for i=3,limit,1\
    \ do\n    if a % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "\t-- base case\n    if a <= 100 then\n        return a % 3 == 0 or a %\
    \ 5 == 0\n    else\n        -- recursive case\n        return is_multiply_prime(3\
    \ * a - 1) or is_multiply_prime(3 * a - 5)\n    end\nend", "    local n = 3\n\
    \    while true\n        if a > n then\n            return false\n        end\n\
    \        for i = 1, n do\n            if a%i == 1 then break end\n        end\n\
    \        n = n + 1\n    end\n    return true\nend", "    local n = a\n    for\
    \ i = 2, 100 do\n        if n%i == 0 and n ~= i then\n            return false\n\
    \        end\n    end\n    return true\nend", "  if a < 100 then\n    return false\n\
    \  else\n    for i,v in ipairs(primes) do\n      if a % v == 0 then\n        return\
    \ true\n      end\n    end\n  end\nend", "    local divisor = math.floor((math.sqrt(math.pow(a,\
    \ 2) - 1)) / 2)\n    return divisor == 0 or math.mod((a), divisor) == 0\nend",
  "  -- Write your code here\n  return false\nend", "  for i = 1, 100 do\n    if is_prime(i)\
    \ then\n      if ((a % i) == 0) then\n        return false\n      end\n    end\n\
    \  end\n  return true\nend", "\tif a % 2 == 0 then\n\t\treturn false\n\tend\n\t\
    -- a = 3 * 5, 3 = 3 \xD7 5, 5 \xD7 3\n\tlocal x = 3 * math.floor((a**0.5)+1)\n\
    \tlocal y = 3 * math.floor((a**0.5)+1)\n\tlocal z = math.floor((a**0.5)+1)\n\t\
    local r = a\n\tlocal i = 0\n\twhile r ~= 0 do\n\t\tlocal d = math.floor((r-1)/x)\n\
    \t\tif d % 2 ~= 0 and r%d ~= 0 then\n\t\t\t-- this number is multiply of 3\n\t\
    \t\treturn false\n\t\telse\n\t\t\tif r%d == 0 then\n\t\t\t\t-- this number is\
    \ divisible by 3\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\t-- this number is\
    \ divisible by 3\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\tr = r%d\n\t\tx\
    \ = x * 3\n\t\ty = y * 3\n\t\tz = z * 3\n\t\ti = i + 1\n\tend\n\treturn true\n\
    end", "    -- Write your code below\n    \n    -- Step 1: Write a function that\
    \ returns true if a is between 1 and 10 and false otherwise.\n    -- Knowing that\
    \ (a) is less then 100. \n    -- Example:\n    -- >>> is_multiply_prime(30)\n\
    \    -- true\n    -- 30 = 2 * 3 * 5\n    local function is_prime(a)\n        --\
    \ Write your code below\n        \n        -- Step 2: Write a function that returns\
    \ true if a is less than 10 and false otherwise.\n        -- Knowing that (a)\
    \ is less than 100. \n        -- Example:\n        -- >>> is_multiply_prime(30)\n\
    \        -- true\n        -- 30 = 2 * 3 * 5\n        local function is_less_than_two(a)\n\
    \            -- Write your code below\n            \n            -- Step 3: Write\
    \ a function that returns true if a is greater than 10 and false otherwise.\n\
    \            -- Knowing that (a) is less than 100. \n            -- Example:\n\
    \            -- >>> is_multiply_prime(30)\n            -- true\n            --\
    \ 30 = 2 * 3 * 5\n            local function is_greater_than_ten(a)\n        \
    \        -- Write your code below\n                \n                -- Step 4:\
    \ Write a function that returns true if a is less than 10 and false otherwise.\n\
    \                -- Knowing that (a) is less than 100. \n                -- Example:\n\
    \                -- >>> is_multiply_prime(30)\n                -- true\n     \
    \           -- 30 = 2 * 3 * 5\n                local function is_less_than_ten(a)\n\
    \                    -- Write your code below\n                    \n        \
    \            -- Step 5: Write a function that returns true if a is less than 10\
    \ and false otherwise.\n                    -- Knowing that (a) is less than 100.\
    \ \n                    -- Example:\n                    -- >>> is_multiply_prime(30)\n\
    \                    -- true\n                    -- 30 = 2 * 3 * 5\n        \
    \            local function is_less_than_ten(a)\n                        -- Write\
    \ your code below\n                        \n                        -- Step 6:\
    \ Write a function that returns true if a is less than 10 and false otherwise.\n\
    \                        -- Knowing that (a) is less than 100. \n            \
    \            -- Example:\n                        -- >>> is_multiply_prime(30)\n\
    \                        -- true\n                        -- 30 = 2 * 3 * 5\n\
    \                        local function is_less_than_ten(a)\n                \
    \            -- Write your code below\n                            \n        \
    \                    -- Step 7: Write a function that returns true if a is less\
    \ than 10 and false otherwise.\n                            -- Knowing that (a)\
    \ is less than 100. \n                            -- Example:\n              \
    \              -- >>> is_multiply_prime(30)\n                            -- true\n\
    \                            -- 30 = 2 * 3 * 5\n                            local\
    \ function is_less_than_ten(a)", "\t-- base case: if the number is 0, it can't\
    \ be multiply by any number.\n\tif a == 0 then\n\t\treturn false\n\tend\n\t\n\t\
    -- base case: if the number is 2, it can be multiply by any number.\n\tif a ==\
    \ 2 then\n\t\treturn true\n\tend", "\t-- (a) is less then 100 :\n\tif a <= 100\
    \ then\n\t\t-- loop for all prime numbers in 1 to  (a) :\n\t\tfor b = 2 ,a ,1\
    \ do\n\t\t\t-- loop for all prime numbers in 2 to  (b) \n\t\t\tfor c = b + 1 ,a\
    \ ,1 do\n\t\t\t\t-- loop for all prime numbers in 3 to  (c) \n\t\t\t\tfor d =\
    \ c + 1 ,a ,1 do\n\t\t\t\t\t-- if (a) is multiplication of 3 prime numbers then\
    \  true :\n\t\t\t\t\tif a%b == 0 and a%d==0 then\n\t\t\t\t\t\treturn true\n\t\t\
    \t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nend", "    local i = 1\n  \
    \  local is_prime = false\n    while i <= a do\n        if ((a % i) == 0 and i\
    \ ~= a) and (is_prime == false) then\n            is_prime = true\n          \
    \  break\n        end\n        i = i + 1\n    end\n    return is_prime\nend",
  "  local i = 1\n  for i=1,math.floor(a/2) do\n    if a % i == 0 and a % 2 == 0 then\n\
    \      a = a / i\n      break\n    end\n  end\n  return a % 2 ~= 0\nend", "  local\
    \ i = 1\n  local limit = a\n  while i <= limit do\n    if a % i == 0 then\n  \
    \    return false\n    end\n    i = i + 1\n  end\n  return true\nend", "    if\
    \ a == 1 then\n        return true\n    end\n    for i = 2, (math.sqrt(a)) do\n\
    \        if (a % i == 0) and (is_multiply_prime(i)) then\n            return false\n\
    \        end\n    end\n    return true\nend", "\tlocal b = a*2\n\twhile b < 100\
    \ do\n\t\tlocal c = b + 1\n\t\tlocal d = c + a\n\t\tif d < 100 then\n\t\t\tif\
    \ d % a == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\tb = c + 2\n\t\
    end\n\treturn true\nend", "  -- We know that 30 is less then 100, but for sake\
    \ of code simplicity we will assume that it is not.\n  return a < 100\nend", " \
    \ if a < 100 then\n    return false\n  end\n  local i = 1\n  local num = 3\n \
    \ local p = 2\n  while i <= a do\n    local count = 0\n    while i <= num do\n\
    \      count = count + 1\n      local temp = p\n      p = p + 1\n      if num\
    \ * temp == i then\n        break\n      end\n    end\n    if count == 2 then\n\
    \      return true\n    end\n    i = i + 1\n    num = num + 1\n  end\n  return\
    \ false\nend", "   -- The idea is that the numbers are prime numbers. If a number\
    \ is not prime number\n   -- then it is multiplication of 3 prime number\n   if\
    \ is_prime(a) then\n      -- If the number is divisible by 2 then it is also a\
    \ multiplication of 3 prime number\n      if a % 2 == 0 then\n         if is_multiply_prime(a\
    \ / 2) then\n            return true\n         else\n            return false\n\
    \         end\n      -- If the number is divisible by 3 then it is also a multiplication\
    \ of 3 prime number\n      elseif is_multiply_prime(a / 3) then\n         return\
    \ true\n      -- If the number is divisible by 5 then it is also a multiplication\
    \ of 3 prime number\n      elseif is_multiply_prime(a / 5) then\n         return\
    \ true\n      -- If the number is divisible by 5 then it is also a multiplication\
    \ of 3 prime number\n      elseif is_multiply_prime(a / 7) then\n         return\
    \ true\n      -- If the number is divisible by 7 then it is also a multiplication\
    \ of 3 prime number\n      elseif is_multiply_prime(a / 7) then\n         return\
    \ true\n      -- If the number is divisible by 9 then it is also a multiplication\
    \ of 3 prime number\n      elseif is_multiply_prime(a / 9) then\n         return\
    \ true\n      -- If the number is divisible by 11 then it is also a multiplication\
    \ of 3 prime number\n      elseif is_multiply_prime(a / 11) then\n         return\
    \ true\n      -- If the number is divisible by 13 then it is also a multiplication\
    \ of 3 prime number\n      elseif is_multiply_prime(a / 13) then\n         return\
    \ true\n      -- If the number is divisible by 17 then it is also a multiplication\
    \ of 3 prime number\n      elseif is_multiply_prime(a / 17) then\n         return\
    \ true\n      -- If the number is divisible by 19 then it is also a multiplication\
    \ of 3 prime number\n      elseif is_multiply_prime(a / 19) then\n         return\
    \ true\n      -- If the number is divisible by 23 then it is also a multiplication\
    \ of 3 prime number\n      elseif is_multiply_prime(a / 23) then\n         return\
    \ true\n      -- If the number is divisible by 29 then it is also a multiplication\
    \ of 3 prime number\n      elseif is_multiply_prime(a / 29) then\n         return\
    \ true\n      -- If the number is divisible by 31 then it is also a multiplication\
    \ of 3 prime number\n      elseif is_multiply_prime(a / 31) then\n         return\
    \ true\n", "\tlocal multiply = math.pow(a, 3) - math.pow(a, 2)\n\treturn multiply\
    \ <= 100 and math.floor(multiply) == 1\nend", "    local i, s = a, a\n    local\
    \ is_multiply_prime = false\n    while s <= 100 do\n        if s % 2 == 0 then\n\
    \            if s % 3 == 0 then\n                if s % 5 == 0 then\n        \
    \            is_multiply_prime = true\n                    break\n           \
    \     end\n            end\n        end\n        s = s + 1\n    end\n    return\
    \ is_multiply_prime\nend", "    return a <= 100 and\n       ( a:find(a^1, 1, true)\
    \ and a:find(a^2, 2, true) and a:find(a^3, 3, true))\nend", "    local result\
    \ = 1\n    for i=2,a do\n        -- If its not divisible by any number between\
    \ 2 and i/2\n        if a % i == 0 then\n            result = 0\n        end\n\
    \    end\n    return result\nend", "  if a == 1 then return true end\n  for b\
    \ = 2, sqrt(a), 2 do\n    if a % b == 0 then return false end\n  end\n  return\
    \ true\nend", "    local i = 2\n    local limit = 100", "  local primes = 2\n\
    \  while primes < 100 do\n    local p = primes\n    primes = primes +2\n    while\
    \ p <= 100 do\n      if ((p * p) == a then\n        return true\n      end\n \
    \     p = p +2\n    end\n  end\n  return false\nend", "    local b = a - 3\n \
    \   for i = 2, b do\n        if a % i == 0 then\n            return false\n  \
    \      end\n    end\n    return true\nend", "   for i = 2, a do\n      if a %\
    \ i == 0 then return false end\n   end\n   return true\nend", "\treturn (primes:isPrime(a)\
    \ and primes:isPrime(a+2) and primes:isPrime(a+4)) or (is_multiply_prime(a-3)\
    \ and is_multiply_prime(a-6))\nend", "   -- Only the even numbers (except 2) are\
    \ prime numbers\n   return (a % 2) == 0 and (a > 2) and (a < 100)\nend\nassert(is_multiply_prime(30))",
  "  local result = math.floor(math.sqrt(a)) / 2\n  while result > 100 and result\
    \ <= a do\n    result = result - 100\n  end\n  while result > 1 and result <=\
    \ a do\n    result = result - 1\n  end\n  return result == a\nend", "   for i=2,a\
    \ do\n      if a%i == 0 then\n         return false\n      end\n   end\n   return\
    \ true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
