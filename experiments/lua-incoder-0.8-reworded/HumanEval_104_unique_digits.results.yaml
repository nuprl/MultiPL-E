language: lua
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local cnt = 0\n  for i\
    \ = 1, #x do\n    cnt = cnt+1\n    if math.mod(x, i) == 0 then\n      result[cnt]\
    \ = x[i]\n    end\n  end\n  if cnt > 0 then\n    return table.sort(result)\n \
    \ else\n    return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq08ecqs4.lua:14:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpq08ecqs4.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpq08ecqs4.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local hash = {}\n  local ret = {}\n  \n  for\
    \ i=1,#x do\n    local digit = x[i]\n    -- Add digit into hash table.\n    if\
    \ digit == 0 then\n      table.insert(ret, 0)\n      continue\n    end\n    if\
    \ digit % 2 == 0 then\n      table.insert(ret, digit)\n      table.insert(ret,\
    \ digit / 2)\n    else\n      table.insert(ret, digit)\n    end\n    if digit\
    \ ~= 0 and digit not in hash then\n      hash[digit] = true\n    end\n  end\n\
    \  \n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpocwqgf33.lua:19: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   -- The trick here is to first find all the\
    \ negative and positive numbers in the\n   -- input, then just find the negative\
    \ numbers only.\n   -- So we start from the largest number and work our way down.\
    \ \n   local function sign(n)\n      if n < 0 then\n         return -1\n     \
    \ else\n         return 1\n      end\n   end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx6oq74f4.lua:30: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local function helper(x)\n      assert(type(x)\
    \ == \"table\")\n      for i = 1, #x do\n         if x % i == 0 then\n       \
    \     return x\n         end\n      end\n      return nil\n   end\n   local function\
    \ helper2(x)\n      assert(type(x) == \"table\")\n      for i = 1, #x do\n   \
    \      if x[i] % 2 == 0 then\n            return x\n         end\n      end\n\
    \      return nil\n   end\n   if x == nil then return nil end\n   local result\
    \ = helper2(x)\n   if result ~= nil then return result end\n   return helper(x)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp191ovohd.lua:37:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmp191ovohd.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    -- sort x and return unique elements\n  \
    \  local function compare_digits(a, b)\n        if b < a then\n            return\
    \ 1\n        end\n        if a < b then\n            return -1\n        end\n\
    \        return 0\n    end\n    local sorted_x = table.sort(x, compare_digits)\n\
    \    local unique_xs = setmetatable({}, {__index = _G})\n    for _, x in ipairs(sorted_x)\
    \ do\n        if x ~= 0 then\n            for i = 1, 10 do\n                if\
    \ x % i == 0 then\n                    unique_xs[#unique_xs + 1] = x\n       \
    \             break\n                end\n            end\n        end\n    end\n\
    \    return unique_xs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1dtcnrf8.lua:20:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmp1dtcnrf8.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp1dtcnrf8.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function check(x)\n    local n = tonumber(x)\n\
    \    if not n then\n      return nil\n    end\n    if n % 2 == 0 then\n      return\
    \ nil\n    end\n    if n % 10 == 0 then\n      -- x isn't a number.\n      return\
    \ nil\n    end\n    if x == 0 then\n      -- x is a number.\n      return 0\n\
    \    end\n    -- x is a number.\n    return check(x/10)\n  end\n  return check(table.unpack(x))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeyf4m6se.lua:35:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpeyf4m6se.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local set = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      if #set == 0 or #set[#set[1]] > x[i]/2\
    \ then\n        set[#set+1] = x[i]\n      end\n    end\n    i = i+1\n  end\n \
    \ return set\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9024kllr.lua:26:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp9024kllr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  if x == nil then\n    return {}\n  end\n  local\
    \ table = {}\n  local i = 0\n  while i < #x do\n    local n = x[i]\n    local\
    \ j = 1\n    while j < #x do\n      if x[i] > x[j] then\n        break\n     \
    \ end\n      j = j + 1\n    end\n    if n > 0 then\n      table[n] = true\n  \
    \  end\n    i = i + 1\n  end\n  return table.keys()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpea41kz82.lua:19:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpea41kz82.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpea41kz82.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ans = {}\n  for i = 1, #x do \n    if\
    \ x[i] % 2 == 0 then \n      table.insert(ans, x[i])\n    end\n  end\n  return\
    \ ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7p193iw.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp_7p193iw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- Base case\n  if #x > 1 then\n    local table\
    \ = {}\n    for i = 2, #x do\n      local num = 0\n      local div = 10\n    \
    \  -- Calculate number of digits in the number\n      for j=1, #x do\n       \
    \ div = div * 10 + x[j]\n        if div == i then\n          num = num + 1\n \
    \       end\n      end\n      -- Skip number if every digit has only one digit\n\
    \      if num == #x then\n        table[i] = x[i]\n      else\n        table[i]\
    \ = nil\n      end\n    end\n    return table\n  end\n  return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9v9zzht.lua:38:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpg9v9zzht.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local sorted_x = sort(x)\n  local unique_x\
    \ = {}\n  -- Loop through the whole table, find the uneven digit.\n  for i = 1,\
    \ #sorted_x do\n    local element = sorted_x[i]\n    local is_even = false\n \
    \   -- loop through all the elements in the table\n    for j = 1, #sorted_x do\n\
    \      if element == sorted_x[j] then\n        -- found the uneven digit\n   \
    \     is_even = true\n        break\n      end\n    end\n    -- If this element\
    \ hasn't any even digit, add it to the unique table\n    if not is_even then\n\
    \      table.insert(unique_x, element)\n    end\n  end\n  return unique_x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb6qkatmz.lua:10:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpb6qkatmz.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpb6qkatmz.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local ret = {}\n    for v in pairs(x) do\n\
    \        if not check_for_even_digit(x[v]) then\n            ret[v] = x[v]\n \
    \       end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6v5e13qt.lua:12:\
    \ attempt to call a nil value (global 'check_for_even_digit')\nstack traceback:\n\
    \t/tmp/tmp6v5e13qt.lua:12: in local 'candidate'\n\t/tmp/tmp6v5e13qt.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  if x == nil then\n    return nil\n  else\n\
    \    local seen = {}\n    for i = 1, #x do\n      if seen[tostring(x[i])] then\n\
    \        table.insert(x, tostring(x[i]))\n      else\n        seen[tostring(x[i])]\
    \ = true\n      end\n    end\n    return x\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4fg6x1d.lua:28:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpu4fg6x1d.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- Create a sorted table of digits in positive\
    \ number x.\n  local function extract_digits(x)\n    local i = 1\n    while true\
    \ do\n      local _, digit = x:sub(1, i)\n      if digit > 9 then break end\n\
    \      i = i + 1\n    end\n    return x:sub(1, i)\n  end\n  local digits = extract_digits(x)\n\
    \  local sorted_digits = {}\n  -- Sort the table of digits in increasing order.\n\
    \  for i = 1, #digits do\n    if digits[i] % 2 ~= 0 then\n      table.insert(sorted_digits,\
    \ digits[i])\n    end\n  end\n  return sorted_digits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqfhdk5k7.lua:14:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpqfhdk5k7.lua:14:\
    \ in local 'extract_digits'\n\t/tmp/tmpqfhdk5k7.lua:20: in local 'candidate'\n\
    \t/tmp/tmpqfhdk5k7.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   -- We use lua's table to store the result,\n\
    \   -- then sort it and return it.\n   local t, result = {}, {}\n   for i = 1,\
    \ #x do -- loop through the array x\n      if i % 2 == 0 then -- If the index\
    \ is a even digit\n         if tonumber(x[i]) ~= tonumber(x[i+1]) then -- If it\
    \ doesn't have another even digit\n            table.insert(t, x[i]) -- insert\
    \ it to result\n         end\n      end\n   end\n   return table.sort(t) -- sort\
    \ the result and return it\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph46r0gst.lua:26:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmph46r0gst.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- if x is empty return an empty table\n  if\
    \ #x == 0 then return {} end\n  \n  -- find the first odd number\n  local first_odd\
    \ = x[1]:find(function(y)\n    return y:len() % 2\n  end)\n  if first_odd then\n\
    \    -- subtract 1 from odd number\n    x[1]:gsub('%d', function(y) \n      return\
    \ y:len() ~= 1 and y\n    end)\n  else\n    -- return x as is\n    return x\n\
    \  end\n  \n  -- create empty list to store unique digits\n  local unique_digits\
    \ = {}\n  \n  -- go through each number in x\n  for i = 1, #x do\n    -- if x\
    \ is even, remove it's digit\n    if x[i] == 0 then\n      x[i]:gsub('%d', function(y)\
    \ \n        return y\n      end)\n    else\n      -- add its digit to unique_digits\
    \ if it hasn't been added yet\n      -- use gsub to remove all digits to keep\
    \ only the last digit\n      unique_digits[x[i]:gsub('%d', function(y) \n    \
    \    return y\n      end)] = true\n    end\n  end\n  \n  -- return sorted unique_digits\n\
    \  table.sort(unique_digits)\n  return unique_digits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5qfz7l04.lua:14:\
    \ attempt to index a number value (field 'integer index')\nstack traceback:\n\t\
    /tmp/tmp5qfz7l04.lua:14: in local 'candidate'\n\t/tmp/tmp5qfz7l04.lua:54: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- We use a map to keep track of each digit\
    \ in x.\n  local map = {}\n  for _, v in pairs(x) do\n    -- Check if we already\
    \ have this number in the map.\n    if map.get(v) then\n      -- We found a duplicate!\
    \ Remove the number from the map and add \n      -- it to the list.\n      map[v]\
    \ = nil\n      x[#x+1] = v\n    else\n      -- We have not seen this number before,\
    \ add it to the map.\n      map[v] = true\n    end\n  end\n  -- Return the list\
    \ of all numbers in x.\n  return x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqt4eh3sm.lua:14:\
    \ attempt to call a nil value (field 'get')\nstack traceback:\n\t/tmp/tmpqt4eh3sm.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpqt4eh3sm.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local table = {}\n   for i = 1, #x do\n  \
    \    local element = tonumber(x[i])\n      if element ~= nil then\n         table[i]\
    \ = element\n      end\n   end\n   table.sort(function(a, b) return a < b end)\n\
    \   return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgojhu7fs.lua:17:\
    \ attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmpgojhu7fs.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpgojhu7fs.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- We use an hash table.\n  local hash = {}\n\
    \  -- For all x, we keep track of the last digit we see.\n  local lastx = 0\n\
    \  -- Iterate through all elements x. \n  for i = 1, #x do\n    -- For each element\
    \ x, we keep track of the last digit we saw that x.\n    local lastxi = lastx\
    \ \n    -- Check if the last digit we saw for x is even.\n    if x % 2 == 0 then\n\
    \      -- If so, we found another element x.\n      lastx = x - 1\n    end\n \
    \   -- Now check if the newly seen digit x is even or odd.\n    if x % 2 ~= 0\
    \ then\n      -- If so, we found another element x.\n      lastx = x + 1\n   \
    \ end\n    -- Now, we check if the last digit we saw for x is even.\n    if lastxi\
    \ % 2 == 0 then\n      -- If so, we found another element x.\n      lastx = lastxi\
    \ - 1\n    end\n    -- If the last digit we saw for x is not even, then x has\
    \ unique digit.\n    -- We insert x into the hash table.\n    hash[#hash+1] =\
    \ x\n  end\n  -- For each element x, we return the hash table that stored all\
    \ the elements \n  -- for which x has unique digit.\n  -- Return the hash table.\n\
    \  return hash\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa9ewd_t0.lua:19:\
    \ attempt to perform arithmetic on a table value (local 'x')\nstack traceback:\n\
    \t/tmp/tmpa9ewd_t0.lua:19: in local 'candidate'\n\t/tmp/tmpa9ewd_t0.lua:46: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   -- Find all even digits in an array\n   local\
    \ function is_even(i)\n      return ((i % 2) == 0)\n   end\n   \n   -- Get each\
    \ element and increment a counter\n   local n, count = 1, 0\n   local result =\
    \ {}\n   for _, x in ipairs(x) do\n      if is_even(n) then\n         count =\
    \ count + 1\n         table.insert(result, x)\n      else\n         n = n + (count\
    \ + 1)\n      end\n   end\n   return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunl17tl2.lua:32:\
    \ expected: {1, 15, 33}\nactual: {33, 1422, 1}\nstack traceback:\n\t/tmp/tmpunl17tl2.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local n = #x\n  local t = {}\n  for i = 1,\
    \ n do\n    local c = math.mod(x[i], 10)\n    if not t or c < t[1] then\n    \
    \  t[1] = c\n      t[#t + 1] = i - 1\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1v8g5pdj.lua:13:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmp1v8g5pdj.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp1v8g5pdj.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local digits = {}\n  local count = 0\n  for\
    \ i = 1, #x do\n    local digit = x[i]\n    if not digit then \n      break\n\
    \    end\n    if not digits[digit] then\n      table.insert(digits, digit)\n \
    \     count = count + 1\n    end\n  end\n  if count == 0 then \n    return {}\n\
    \  end\n  \n  table.sort(digits, function(a,b) return tonumber(a) < tonumber(b)\
    \ end)\n  -- reverse the sorted digits \n  local reversed = {}\n  for i = #digits,\
    \ 1, -1 do\n    reversed[#reversed + 1] = digits[i]\n  end\n  \n  return reversed\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupy6olip.lua:39:\
    \ expected: {1, 15, 33}\nactual: {1422, 33, 15}\nstack traceback:\n\t/tmp/tmpupy6olip.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   if x == nil then\n      return nil\n   else\n\
    \      local v = {}\n      for i=1, #x do \n         local t = tostring(x[i])\n\
    \         local digit = tostring(t:sub(1, 1))\n         if digit:sub(1, 1) ~=\
    \ \"\" then\n            table.insert(v, digit)\n         end\n      end\n   \
    \   return v\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvze5ey2o.lua:28:\
    \ expected: {1, 15, 33}\nactual: {\"1\", \"3\", \"1\", \"1\"}\nstack traceback:\n\
    \t/tmp/tmpvze5ey2o.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- Base case\n  if #x > 0 then\n    -- Find\
    \ first element that haven't even digit\n    local i = 1\n    while not x[i] and\
    \ not x[i-1] do\n      i = i + 1\n    end\n    -- Remove this element\n    x[i]\
    \ = nil\n    -- Add rest of elements\n    for j = i+1, #x do\n      x[j] = nil\n\
    \    end\n    -- Return unique element\n    return unpack(x)\n  end\n  return\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpik_mj7hm.lua:24:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpik_mj7hm.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpik_mj7hm.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local table = {}\n  local i = 1\n  while i\
    \ < #x do\n    if x[i] % 2 ~= 0 then\n      table.insert(table, x[i])\n    end\n\
    \    i = i + 1\n  end\n  return table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw8i1cm0t.lua:14:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmpw8i1cm0t.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpw8i1cm0t.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for key, value in\
    \ pairs(x) do\n        if value % 2 == 0 then\n            table.insert(result,\
    \ value)\n        end\n    end\n    table.sort(result)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2znksfe.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpl2znksfe.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ if x[i] % 2 ~= 0 then\n      result[#result + 1] = x[i]\n    end\n  end\n  return\
    \ table.sort(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj80nyevm.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpj80nyevm.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal result = {}\n\tlocal i = 1\n\twhile i\
    \ <= #x do\n\t\tlocal digit = x[i]\n\t\tlocal count = result[i]\n\t\tif count\
    \ == nil then\n\t\t\tresult[i] = digit\n\t\telseif digit == count then\n\t\t\t\
    result[i] = digit + 1\n\t\telse\n\t\t\tresult[i - 1] = digit\n\t\t\tresult[i]\
    \ = count\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8lu6c33.lua:31:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpo8lu6c33.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local table = {}\n    for i = 1, #x do\n\
    \        if x[i] % 2 == 0 then\n            table.insert( x, x[i] )\n        end\n\
    \    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbov_vmox.lua:13:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmpbov_vmox.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpbov_vmox.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local n = #x\n    local evens = {}\n    for\
    \ i = 1, n do\n        if x[i] % 2 ~= 0 then\n            table.insert(evens,\
    \ x[i])\n        end\n    end\n    table.sort(evens)\n    return evens\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpodc3gzop.lua:25:\
    \ expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmpodc3gzop.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local results = {}\n    for i = 1, #x do\n\
    \        if x[i] > 0 then\n            local pos = 1\n            while x[i] >\
    \ 0 do\n                if x[i] % 2 ~= 0 then\n                    table.insert(results,\
    \ x[i]) -- Insert element\n                    x[i] = math.floor(x[i] / 2) --\
    \ Delete last digit\n                    break\n                else\n       \
    \             x[i] = math.floor(x[i] / 2) -- Delete last digit\n             \
    \   end\n                pos = pos + 1\n            end\n            if pos ~=\
    \ #x[i] then -- Insert element\n                table.insert(results, x[i])\n\
    \            end\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2f7t7_ec.lua:24:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp2f7t7_ec.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp2f7t7_ec.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function add_digit(t, n)\n    for i =\
    \ #t, 1, -1 do\n      if t[i] == n then\n        t.[i] = n\n        return\n \
    \     end\n    end\n    t.[#t+1] = n\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw25ojqeu.lua:13: <name> expected near ''[''

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local n = {}\n   for i = 1, #x do\n      table.insert(n,\
    \ x[i])\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqs4lgrou.lua:24: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local d = {}\n  local pos = 1\n  while pos\
    \ <= #x do\n    if not x[pos] % 2 then\n      if #d > 0 then\n\ttable.insert(d,\
    \ x[pos])\n      end\n      pos = pos + 1\n    end\n    pos = pos + 1\n  end\n\
    \  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0eyhia_h.lua:13:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmp0eyhia_h.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp0eyhia_h.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- Only for integers\n  if type(x) == 'number'\
    \ then\n    local result = {}\n    local i = 0\n    while i < #x and x > 0 do\n\
    \      local t = math.floor(x/10)\n      x = x - math.floor(x/10)*10\n      if\
    \ t % 2 == 0 then\n        if result[#result+1] == nil then\n          result[#result+1]\
    \ = t\n        end\n      end\n      i = i + 1\n    end\n    if x == 0 then\n\
    \      return result\n    elseif i == 0 then\n      return {}\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsf1omabx.lua:35:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpsf1omabx.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i,v in pairs(x) do\n\
    \        if v % 2 == 0 then\n            if v ~= math.floor(v) then\n        \
    \        res[#res+1] = v\n            end\n        end\n    end\n    return res\n\
    end\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8mzyy_mk.lua:20: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local table_size = _g(x)\n\
    \  for i=1,table_size-1 do\n    local current_digit = x[i]\n    if current_digit\
    \ > 0 then\n      local found_digit = nil\n      for j=1,table_size-2 do\n   \
    \     if x[j] % current_digit == 0 then\n          found_digit = j\n         \
    \ break\n        end\n      end\n      if found_digit == nil then\n        result[#result+1]\
    \ = current_digit\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyxg2bm6n.lua:11:\
    \ attempt to call a nil value (global '_g')\nstack traceback:\n\t/tmp/tmpyxg2bm6n.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpyxg2bm6n.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    -- Pre: x is a table\n    -- Post: return\
    \ a table of non-repeating digits of x.\n    local digits = {}\n    local result\
    \ = {}\n    for _, v in pairs(x) do\n        digits[v] = true\n    end\n    for\
    \ k = 1, #x do\n        if digits[k] then\n            for v = k + 1, #x do\n\
    \                if digits[v] and v % k == 0 then\n                    table.insert(result,\
    \ v)\n                end\n            end\n        end\n    end\n    return setmetatable(result,\
    \ { __index = tbl })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s50yjpy.lua:32:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp3s50yjpy.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local i = 1\n  while i\
    \ <= #x do\n    local digit = x[i]\n    if digit == 0 then\n      i = i + 1\n\
    \      continue\n    end\n    if result[digit] == nil then\n      result[digit]\
    \ = i\n    end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvhn9gu1b.lua:17: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local n = #x\n  local m = {}\n  local index\
    \ = 1\n  for i = 1, n do\n    local digit = x[i]\n    if not m[digit] then\n \
    \     table.insert(m, digit)\n      index = index + 1\n    end\n  end\n  if index\
    \ <= n then\n    return table.sort(m)\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1i7u_25.lua:29:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpv1i7u_25.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local ret = {}\n   for i = 1, #x do\n    \
    \  local tmp = x[i]\n      local last = tmp\n      for j = i + 1, #x do\n    \
    \     local tmp = x[j]\n         if (tmp % 2 == 0) and (tmp % 10 == 0) then\n\
    \            tmp = math.floor(tmp / 10)\n            if tmp == last then break\
    \ end\n            last = tmp\n         end\n      end\n      if last ~= tmp then\n\
    \         table.insert(ret, tmp)\n      end\n   end\n   return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqukefrap.lua:32:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpqukefrap.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   -- Create empty table\n   local tbl = {}\n\
    \   \n   -- Loop through each element in the input table\n   for i = 1, #x do\n\
    \      -- Add each element in the input table to table\n      tbl[#tbl + 1] =\
    \ x[i]\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpme75bk2l.lua:28: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local remainder = math.fmod(x[i], 10)\n        local newDigit = x[i]\n\
    \        -- if remainder is 0 then this number is even\n        if remainder ==\
    \ 0 then\n            table.insert(result, newDigit)\n        end\n    end\n \
    \   return table.concat(result, '-')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxvnp00c.lua:25:\
    \ expected: {1, 15, 33}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpfxvnp00c.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal ret = {}\n\t-- First pass: Check odd\
    \ digits and make them unique.\n\tfor i = 1, #x do\n\t\tif x[i] % 2 ~= 0 then\n\
    \t\t\t-- Find first odd digit.\n\t\t\tlocal odd_idx = 1\n\t\t\twhile x[i] % 2\
    \ == 0 and i <= #x do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\t\t-- Replace it.\n\t\t\
    \tx[i] = x[i]/2\n\t\t\t-- Make all digits that follow this one unique.\n\t\t\t\
    for j = i+1, #x do\n\t\t\t\tx[j] = x[j]/2\n\t\t\tend\n\t\t\t-- Add this element.\n\
    \t\t\tfor j = i+1, #x do\n\t\t\t\tret[x[j]] = ret[x[j]] or x[j]\n\t\t\tend\n\t\
    \tend\n\tend\n\t-- Second pass: Add even digits.\n\tfor i = 1, #x do\n\t\tif x[i]\
    \ % 2 == 0 then\n\t\t\tfor j = i+1, #x do\n\t\t\t\tret[x[j]] = ret[x[j]] or x[j]\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1g8rzq3p.lua:45:\
    \ expected: {1, 15, 33}\nactual: {0.125=0.125, 0.25=0.25, 0.5=0.5, 16.5=16.5,\
    \ 355.5=355.5, 711=711.0}\nstack traceback:\n\t/tmp/tmp1g8rzq3p.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal t = {}\n\tlocal i = 1\n\twhile i <= #x\
    \ do\n\t\tlocal found = false\n\t\tfor k, v in pairs(t) do\n\t\t\tif v < 10 and\
    \ tonumber(x[i])%v == 0 then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\
    \t\tend\n\t\tif not found then\n\t\t\ttable.insert(t, x[i])\n\t\tend\n\t\ti =\
    \ i + 1\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw69_3nmo.lua:31:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpw69_3nmo.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  if #x > 0 then\n    local ret = {}\n    for\
    \ i = 1, #x do\n      if i%2 ~= 0 then\n        ret[#ret+1] = x[i]\n      end\n\
    \    end\n    return ret\n  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzfvo8x2.lua:26:\
    \ expected: {1, 15, 33}\nactual: {15, 1422}\nstack traceback:\n\t/tmp/tmpwzfvo8x2.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local v = {}\n  for i = 1, #x do\n    if x[i]\
    \ % 2 == 0 then\n      table.insert(v, x[i])\n    end\n  end\n  table.sort(v)\n\
    \  -- return table with unique elements\n  local t = {}\n  for i = 1, #v do\n\
    \    t[#t + 1] = v[i]\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0l8pbjs.lua:28:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpa0l8pbjs.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  for i = 1, #x do\n    local\
    \ d = math.floor(x[i])\n    if seen[d] == true then\n      table.remove(x, i)\n\
    \      i = i - 1\n    else\n      table.insert(seen, d)\n    end\n  end\n  return\
    \ x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkeemkev7.lua:26:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpkeemkev7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local output = {}\n    \n    for _,item in\
    \ ipairs(x) do\n        if item % 2 == 0 then\n            table.insert(output,item)\n\
    \        end\n    end\n    table.sort(output)\n    \n    return output\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jv8_dwu.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3jv8_dwu.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  \n  for i = 1, #x do\n \
    \   local digit = x[i]\n    if digit == 0 then\n      -- Skip 0\n      i = i +\
    \ 1\n      \n    elseif digit % 2 == 0 then\n      -- Skip even\n      i = i +\
    \ 1\n      \n    elseif digit == 1 then\n      -- Skip 1\n      i = i + 1\n  \
    \    \n    elseif seen[digit] then\n      -- Already seen\n      i = i + 1\n \
    \     \n    else\n      -- Mark as seen\n      seen[digit] = true\n    end\n \
    \ end\n  \n  return x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lq882wa.lua:42:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmp9lq882wa.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local i, c = 1, {}\n   for i=1, #x do\n  \
    \    c[#c+1] = x[i]\n   end\n   return c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkm78txn.lua:20:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpmkm78txn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local ans = {}\n   for i = 1, #x do\n    \
    \  local y = x[i] / 10\n      if not (y > 0 and #ans == 0) then\n         ans[#ans\
    \ + 1] = x[i]\n      end\n   end\n   return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppyuouids.lua:23:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmppyuouids.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if not seen[digit] then\n      seen[digit] = true\n      x[i]\
    \ = nil\n      table.insert(x, nil)\n    end\n  end\n  return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwah140a.lua:25:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpkwah140a.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local results = {}\n   for i = 1, #x do\n\
    \      if x:sub(i,i) ~= 0 then\n         table.insert(results, x:sub(i,i))\n \
    \     end\n   end\n   return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpih7dqodh.lua:12:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpih7dqodh.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpih7dqodh.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for k, v in pairs(x) do\n\
    \        if v % 2 == 0 then\n            table.insert(t, v)\n        end\n   \
    \ end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbi1kyc66.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpbi1kyc66.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, math.floor(x)\
    \ do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n\
    \  table.sort(ret)\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4r4hwycj.lua:11:\
    \ bad argument #1 to 'floor' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp4r4hwycj.lua:11: in local 'candidate'\n\t/tmp/tmp4r4hwycj.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local tbl = {}\n  local i = 0\n  local size\
    \ = #x\n  for i = 1,size do\n    if x[i] % 2 == 0 then\n      tbl[#tbl+1] = x[i]\n\
    \    end\n  end\n  return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5zz51xp.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpf5zz51xp.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local i, j, k, l, m\n    for i = 2, #x do\n\
    \        local y = x[i]\n        for j = 1, #y do\n            local d = y[j]\n\
    \            for k = 1, #x do\n                if x[k] == d then\n           \
    \         x[k] = nil\n                    -- Found a number that has been seen\
    \ already.\n                    break\n                end\n            end\n\
    \        end\n    end\n    -- sort in increasing order.\n    for i = 1, #x do\n\
    \        if x[i] == nil then\n            table.insert(x, i)\n        end\n  \
    \  end\n    return x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8gdrut6e.lua:13:\
    \ attempt to get length of a number value (local 'y')\nstack traceback:\n\t/tmp/tmp8gdrut6e.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp8gdrut6e.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local y = {}\n  for i = 1,#x do\n    if x[i]\
    \ % 2 == 0 then\n      y[#y+1] = x[i]\n    end\n  end\n  return y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2nsuk9o.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpq2nsuk9o.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for i = 1, #x do\n    if\
    \ x % 2 == 0 and res[x % 10] == nil then\n      res[x % 10] = x\n    end\n  end\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3dx_8gr9.lua:12:\
    \ attempt to perform arithmetic on a table value (local 'x')\nstack traceback:\n\
    \t/tmp/tmp3dx_8gr9.lua:12: in local 'candidate'\n\t/tmp/tmp3dx_8gr9.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local results = {}\n  for i = 1, x:size() do\n\
    \    if x:index(i) ~= 0 then\n      if x:index(i) ~= x:index(i - 1) then\n   \
    \     results[#results + 1] = x:index(i)\n      end\n    end\n  end\n  return\
    \ table.sort(results)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptx7sz93f.lua:11:\
    \ attempt to call a nil value (method 'size')\nstack traceback:\n\t/tmp/tmptx7sz93f.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmptx7sz93f.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local n = 1\n    local ans = {}\n    for\
    \ _, val in pairs(x) do\n        val = val * 10\n        n = n ^ val\n    end\n\
    \    local i = 0\n    while n > 0 do\n        if n % 2 ~= 0 then\n           \
    \ table.insert(ans, i)\n        end\n        n = n / 10\n        i = i + 1\n \
    \   end\n    table.sort(ans, function(a, b) return x[a] < x[b] end)\n    return\
    \ ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppqbw0rtr.lua:24:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmppqbw0rtr.lua:24:\
    \ in function </tmp/tmppqbw0rtr.lua:24>\n\t[C]: in function 'table.sort'\n\t/tmp/tmppqbw0rtr.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmppqbw0rtr.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local n = 1\n   local y = {}\n   for i = 1,\
    \ #x do\n      local d = math.abs(x[i])\n      n = n * 10 + d\n      if n % 2\
    \ == 0 then\n         y[#y+1] = x[i]\n      end\n   end\n   return y\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtvnj_lw.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpgtvnj_lw.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local ans = {}\n    for i=1,#x do\n     \
    \   local d = x[i]\n        if d > 0 then\n            local div = 10\n      \
    \      while div > 0 and div < d do\n                div = div * 10\n        \
    \    end\n            if div == 0 then\n                ans[#ans+1] = d\n    \
    \        end\n        end\n    end\n    table.sort(ans)\n    return ans\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6npuhph.lua:30:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpf6npuhph.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local new_table = table(x)\n  for i=1,#new_table\
    \ do\n    if new_table[i]%2 ~= 0 then return new_table end\n  end\n  return new_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8fc3pt68.lua:10:\
    \ attempt to call a table value (global 'table')\nstack traceback:\n\t/tmp/tmp8fc3pt68.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp8fc3pt68.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local last_digit = {}\n\
    \  for i = 1, #x do\n    local digit = x[i]\n    if digit < 10 then\n      if\
    \ last_digit[digit] ~= nil then\n        -- We already have a non-unique digit.\n\
    \        result[#result + 1] = digit\n      end\n      -- Record last digit.\n\
    \      last_digit[digit] = digit\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0vp088g.lua:29:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmph0vp088g.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local digits = {}\n  for i = 1, #x do\n   \
    \ local dig = x[i]\n    if not dig or dig == 0 then\n      table.insert(digits,\
    \ 0)\n    else\n      local num = \"\"\n      for j = 1, dig do\n        num =\
    \ num..\"1\"\n      end\n      table.insert(digits, tonumber(num))\n    end\n\
    \  end\n  table.sort(digits)\n  local ans = {}\n  for i = 1, #digits do\n    table.insert(ans,\
    \ digits[i])\n  end\n  return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpay2j984l.lua:34:\
    \ expected: {1, 15, 33}\nactual: {1, 111111111111111, 1.1111111111111e+32, #Inf}\n\
    stack traceback:\n\t/tmp/tmpay2j984l.lua:34: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local n = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if math.floor(x[i] / 10) == 0 then -- x[i] is an integer\n\
    \      n[#n+1] = digit\n    end\n  end\n  table.sort(n)\n  \n  -- return n\n \
    \ return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzp_4xqi.lua:26:\
    \ expected: {1, 15, 33}\nactual: {1}\nstack traceback:\n\t/tmp/tmptzp_4xqi.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local n = #x\n  assert(n > 1, 'x should contain\
    \ at least one element.')\n  local ret = {}\n  local i = n - 1\n  while i >= 0\
    \ do\n    -- Skip even digits.\n    if x[i] % 2 ~= 0 then\n      -- Add digits\
    \ to ret.\n      table.insert(ret, x[i])\n    end\n    -- Move i back.\n    i\
    \ = i - 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpar1by7zq.lua:16:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpar1by7zq.lua:16: in local 'candidate'\n\t/tmp/tmpar1by7zq.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local map = {}\n    local set = {}\n    local\
    \ i = 0\n    for v in pairs(x) do\n        if v > 0 then\n            i = i +\
    \ 1\n            for j = i, #x do\n                if x[j] == v then\n       \
    \             table.insert(set, v)\n                    break\n              \
    \  end\n            end\n            map[tostring(v)] = tostring(v)\n        end\n\
    \    end\n    return set\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_y7l4hh.lua:31:\
    \ expected: {1, 15, 33}\nactual: {1}\nstack traceback:\n\t/tmp/tmpi_y7l4hh.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   -- Precondition: x should be an integer.\n\
    \   if x ~= math.floor(x) or x == 0 then\n      -- Errors.\n      return nil\n\
    \   end\n   local result = {}\n   local t = {}\n   for i = 1, x do\n      t[i]\
    \ = i\n   end\n   for i = 2, x do\n      local digit = math.floor(i/10)\n    \
    \  if t[i] ~= digit then\n         result[#result+1] = i\n      end\n   end\n\
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9cxrufsn.lua:11:\
    \ bad argument #1 to 'floor' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp9cxrufsn.lua:11: in local 'candidate'\n\t/tmp/tmp9cxrufsn.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local y = {}\n  for i = 1, #x do\n    -- if\
    \ the current number is even, add it to the table\n    if x[i] % 2 == 0 then\n\
    \      table.insert(y, x[i])\n    end\n  end\n  table.sort(y) -- Sort the table\
    \ in ascending order\n  return y \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1tcfo2x.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpv1tcfo2x.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local results = {}\n   for i = 1,#x do\n \
    \     local digit = x[i]\n      if not result[digit] then\n         result[digit]\
    \ = true\n         if result[digit] == true then\n            results[#results\
    \ + 1] = digit\n         end\n      end\n   end\n   return results\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ka2d715.lua:13:\
    \ attempt to index a nil value (global 'result')\nstack traceback:\n\t/tmp/tmp7ka2d715.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp7ka2d715.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for _,v in pairs(x) do\n  \
    \  if v <= 0 then\n      table.insert(t,v)\n    else\n      local m = math.floor(math.log(v,10))\n\
    \      if m ~= 0 and m < 9 then\n\tlocal m = math.floor(math.log(v,10))\n\tlocal\
    \ n = v % (10^m)\n\ttable.insert(t,n)\n      else\n\ttable.insert(t,v)\n     \
    \ end\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_ft88rz.lua:31:\
    \ expected: {1, 15, 33}\nactual: {5.0, 3.0, 422.0, 1}\nstack traceback:\n\t/tmp/tmp5_ft88rz.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal unique_digit_dict = {}\n\t\n\tlocal num_digits\
    \ = math.floor(math.log(#x) / math.log(10))\n\t\n\tfor i = 1, num_digits do\n\t\
    \tlocal element = math.floor(x * (10 ^ i))\n\t\t\n\t\tif not unique_digit_dict[element]\
    \ then\n\t\t\tunique_digit_dict[element] = true\n\t\tend\n\tend\n\t\n\t-- Now\
    \ remove all elements with even digit.\n\tfor k, element in pairs(x) do\n\t\t\
    if not unique_digit_dict[element] then\n\t\t\tx[k] = nil\n\t\tend\n\tend\n\t\n\
    \t-- Sort and return table.\n\ttable.sort(x)\n\treturn x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0lctqr2d.lua:37:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp0lctqr2d.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local table = {}\n  for _,v in pairs(x) do\n\
    \    if v ~= 0 then\n      for _, k in pairs(math.floor(v)) do\n        if k %\
    \ 2 == 0 then\n          table.insert(table, v)\n          break\n        end\n\
    \      end\n    end\n  end\n  return table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgo2nro1k.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\
    \t/tmp/tmpgo2nro1k.lua:13: in local 'candidate'\n\t/tmp/tmpgo2nro1k.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local seen = {}\n    local function helper(x)\n\
    \        local seen = {}\n        local t = {}\n        for i = 1, #x do\n   \
    \         local dig = 1\n            while ((x % 10) * 10) <= i do\n         \
    \       dig *= 10\n                i = i / 10\n            end\n            if\
    \ dig >= i then\n                if seen[dig] == nil then\n                  \
    \  table.insert(t, i)\n                    seen[dig] = true\n                end\n\
    \            else\n                return nil\n            end\n        end\n\
    \        table.sort(t)\n        return t\n    end\n    if #x > 1 then\n      \
    \  return helper(x)\n    else\n        local tt = {}\n        for i = 1, #x do\n\
    \            local dig = 1\n            while ((x % 10) * 10) <= i do\n      \
    \          dig *= 10\n                i = i / 10\n            end\n          \
    \  if dig > i then\n                if tt[dig] == nil then\n                 \
    \   table.insert(tt, dig)\n                end\n            else\n           \
    \     return nil\n            end\n        end\n        return tt\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3m0mtpfy.lua:17: syntax error near ''*''

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local function hasEvenDigit(x)\n        for\
    \ i = 2, #x do\n            if x:sub(i,i) ~= 0 then\n                return true\n\
    \            end\n        end\n        return false\n    end\n    return table.sort(x:gmatch(tostring)\
    \ .. '0'):filter(hasEvenDigit)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd4q9vt7w.lua:18:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmpd4q9vt7w.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpd4q9vt7w.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal results = {}\n\tfor i, v in pairs(x)\
    \ do\n\t\tlocal digit = math.floor(math.log(x, 10) / math.log(10))\n\t\t\n\t\t\
    if digit == 0 then\n\t\t\tassert(x[i] == v)\n\t\tend\n\t\t\n\t\tif results[digit]\
    \ == nil then\n\t\t\ttable.insert(results, digit)\n\t\tend\n\tend\n\t\n\tfor i,\
    \ v in pairs(results) do\n\t\tif v == 0 then\n\t\t\ttable.remove(results, i)\n\
    \t\tend\n\tend\n\t\n\tassert(#results == 0)\n\t\n\treturn results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphhcyvbjz.lua:12:\
    \ bad argument #1 to 'log' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmphhcyvbjz.lua:12: in local 'candidate'\n\t/tmp/tmphhcyvbjz.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for _, v in pairs(x) do\n\
    \    local digit = math.floor(v / 10)\n    if digit % 2 == 0 then\n      result[digit]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv31nmsem.lua:23:\
    \ expected: {1, 15, 33}\nactual: {0=true, 142=true}\nstack traceback:\n\t/tmp/tmpv31nmsem.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- Sort the table in increasing order.\n  --\
    \ This may fail in case x is empty or contains only zeros.\n  x = sort(x)\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzgxpor40.lua:23: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   assert(type(x) == \"table\")\n   local new_x\
    \ = {}\n   for _, value in pairs(x) do\n      local new_value = math.floor(value/10)\n\
    \      if not new_x or new_x > new_value then\n         table.insert(new_x, new_value)\n\
    \      end\n   end\n   return new_x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp69m4zl9q.lua:14:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmp69m4zl9q.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp69m4zl9q.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal function has_even_digit(n)\n\t\treturn\
    \ (n >= 0) and (n <= 9) and (n%2 == 0)\n\tend\n\tlocal function get_next(n)\n\t\
    \tlocal count = 0\n\t\tlocal next\n\t\tfor i = n, 1, -1 do\n\t\t\tif has_even_digit(i)\
    \ then\n\t\t\t\tcount = count + 1\n\t\t\t\tif count > 1 then\n\t\t\t\t\tnext =\
    \ true\n\t\t\t\telse\n\t\t\t\t\tnext = i\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t\
    return next\n\tend\n\tlocal function get_next_by_number(x)\n\t\tlocal count =\
    \ x.next\n\t\treturn {x, count}\n\tend\n\tlocal function get_next_by_table(x)\n\
    \t\tlocal count = x.count\n\t\treturn {x.x, count}\n\tend\n\tlocal function has_x_or_next(t)\n\
    \t\treturn (t.next ~= nil) or (t.count ~= nil)\n\tend\n\tlocal next_by_number\
    \ = get_next_by_number(x)\n\tlocal next_by_table = get_next_by_table(x)\n\tlocal\
    \ result\n\tdo\n\t\tlocal next_by_next = has_x_or_next(next_by_number) or has_x_or_next(next_by_table)\n\
    \t\tif next_by_next then\n\t\t\tlocal next_x = get_next(next_by_next)\n\t\t\t\
    local next_count = get_next_by_table(next_x)\n\t\t\tresult = next_by_next\n\t\t\
    \tresult.next = next_x\n\t\t\tresult.count = next_count\n\t\telse\n\t\t\tresult\
    \ = next_by_number\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppy__ug7f.lua:60:\
    \ expected: {1, 15, 33}\nactual: {{15, 33, 1422, 1}}\nstack traceback:\n\t/tmp/tmppy__ug7f.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local table = {}\n   for i=1, #x do\n    \
    \  if x[i]%2==0 then\n         table.insert(table, x[i])\n      end\n   end\n\
    \   table.sort(function(a, b) return a < b end)\n   return table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpem5ooqdi.lua:13:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmpem5ooqdi.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpem5ooqdi.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for i = 1, #x do\n    local\
    \ elem = x[i]\n    -- if elem < 10, this elem has even digit\n    -- so I append\
    \ this elem to res table\n    if elem > 9 then\n      res[#res+1] = elem\n   \
    \ end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iqf1m21.lua:25:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422}\nstack traceback:\n\t/tmp/tmp_iqf1m21.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for i = 1, x:size() do\n\
    \        if x:get(i) ~= 0 then\n            table.insert(t, x:get(i))\n      \
    \  end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl54vuu68.lua:11:\
    \ attempt to call a nil value (method 'size')\nstack traceback:\n\t/tmp/tmpl54vuu68.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpl54vuu68.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local results = {}\n    for i = 1, #x do\n\
    \        local digit = x[i]\n        if not isnumber(digit) then\n           \
    \ return nil\n        end\n        if math.fmod(digit, 2) == 0 then\n        \
    \    table.insert(results, digit)\n        end\n    end\n    table.sort(results)\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplt55j69_.lua:13:\
    \ attempt to call a nil value (global 'isnumber')\nstack traceback:\n\t/tmp/tmplt55j69_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmplt55j69_.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  local ret = {}\n  local\
    \ i = 1\n  while i <= #x do\n    if x[i] >= 10 then\n      table.insert(ret, x[i])\n\
    \    elseif x[i]*10 > i then\n      table.insert(ret, x[i]*10)\n    end\n    i\
    \ = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgiqdu4s2.lua:27:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 10}\nstack traceback:\n\t/tmp/tmpgiqdu4s2.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ans = {}\n  local digit_counts = {}\n\
    \  local i = 0\n  for v in pairs(x) do\n    local digit_count = digit_counts[v]\n\
    \    if digit_count then\n      digit_counts[v] = digit_count + 1\n    else\n\
    \      digit_counts[v] = 1\n    end\n    i = i + 1\n  end\n  for _, v in pairs(digit_counts)\
    \ do\n    local count_v = digit_counts[v]\n    ans[#ans+v] = v\n    if count_v\
    \ ~= 1 then\n      local k = (count_v - 1) / (count_v - 1)\n      for j = 1, k\
    \ do\n        local k = j * (j - 1)\n        local digit = count_v - k\n     \
    \   ans[#ans + digit] = v\n      end\n    end\n  end\n  table.sort(ans)\n  return\
    \ ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j07h3fz.lua:41:\
    \ expected: {1, 15, 33}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmp5j07h3fz.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local sorted_x = table.sort(x)\n    local\
    \ unique_digit = {}\n    for i = 1, #sorted_x do\n        if sorted_x[i] % 2 ~=\
    \ 0 then\n            table.insert(unique_digit, sorted_x[i])\n        end\n \
    \   end\n    return unique_digit\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp22805fzb.lua:12:\
    \ attempt to get length of a nil value (local 'sorted_x')\nstack traceback:\n\t\
    /tmp/tmp22805fzb.lua:12: in local 'candidate'\n\t/tmp/tmp22805fzb.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local sorted_x = {}\n  table.sort(x)\n  for\
    \ i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(sorted_x, x[i])\n\
    \    end\n  end\n  return sorted_x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ry9s9nt.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp8ry9s9nt.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   if #x == 0 then\n      return {}\n   end\n\
    \   local table = {x[1]}\n   for i = 2, #x do\n      if x[i] % 2 == 0 then\n \
    \        table.insert(table, x[i])\n      else\n         table.insert(table, x[i])\n\
    \         table.insert(table, x[i])\n      end\n   end\n   return table\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ownuwoa.lua:18:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmp9ownuwoa.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp9ownuwoa.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function f(x)\n    local new_x = x:gsub(\"\
    %d+\", function (a) return tonumber(a) end)\n    return new_x:gsub(\"0\", function\
    \ (a) return a end):gsub(\"[^0-9]+\", function (a) return a end)\n  end\n  local\
    \ i = 1\n  local n = #x\n  local results = {}\n  for i = 1, n do\n    local d\
    \ = f(x[i])\n    if d then\n      results[i] = d\n    end\n  end\n  for i = 2,\
    \ n do\n    if results[i] and results[i-1] then\n      local j = i-1\n      while\
    \ j > 0 and results[j] then\n        if results[j] < results[i] then\n       \
    \   table.insert(results, j)\n        end\n        j = j - 1\n      end\n    end\n\
    \  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4kel8c35.lua:26: ''do'' expected near ''then''

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- The first element in x is unique.\n  if\
    \ #x > 1 then\n    -- The first element is not unique.\n    local first = x[1]\n\
    \    -- Iterate through the rest of the array.\n    for i = 2, #x do\n      if\
    \ x[i] ~= first then\n        -- The current element is not unique.\n        return\
    \ x\n      end\n    end\n  else\n    -- The input is an empty table. Return an\
    \ empty table.\n    return {}\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp35w3140m.lua:35: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  local result = {}\n  for\
    \ i=1,#x do\n    local digit = x[i]\n    if digit == 0 then break end\n    seen[digit]\
    \ = true\n    result[#result+1] = digit\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpri5qz3hu.lua:24:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpri5qz3hu.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- Store sorted unique digits in table (O(nlogn)).\n\
    \  -- This table is later sorted in increasing order.\n  local function unique_digits_helper(digits,\
    \ x)\n    -- Return empty set if x has no even digit.\n    if x%2 ~= 0 then\n\
    \      return {}\n    end\n    -- If x is even and has only even digit, then return\
    \ its digit.\n    if digits[x/2] ~= nil then\n      return digits[x/2]\n    end\n\
    \    -- Add its single digit to the unique digits.\n    digits[x/2] = x\n    --\
    \ If x is odd, then recursively call unique_digits_helper with the \n    -- reduced\
    \ list of digits.\n    if x%2 == 1 then\n      return unique_digits_helper(digits,\
    \ x/2)\n    end\n    -- Return table containing unique digits in increasing order.\n\
    \    return digits\n  end\n  return unique_digits_helper({}, x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgjpd7b9_.lua:14:\
    \ attempt to perform arithmetic on a table value (local 'x')\nstack traceback:\n\
    \t/tmp/tmpgjpd7b9_.lua:14: in function </tmp/tmpgjpd7b9_.lua:12>\n\t(...tail calls...)\n\
    \t/tmp/tmpgjpd7b9_.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  local i = 1\n  while i < #x\
    \ do\n    local v\n    if x[i] == 0 then \n      v = t\n    else\n      local\
    \ s = x[i]\n      for j = i+1 to #x do\n        if x[j] == 0 then break end\n\
    \        if s == x[j] then\n          table.insert(t, x[i])\n          break\n\
    \        end\n      end\n    end\n    i = i + 1\n  end\n  return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp37ouf43o.lua:18: '','' expected near ''to''

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- Store unique digits as table key\n  local\
    \ result = {}\n  for i,v in ipairs(x) do\n    table.insert(result, v)\n  end\n\
    \  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8lgdbfsf.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1, 15, 33, 1422}\nstack traceback:\n\t/tmp/tmp8lgdbfsf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal ret = {}\n\tfor i=1,math.floor(x/2) do\n\
    \t\ttable.insert(ret, x%10)\n\t\tx = math.floor(x/10)\n\tend\n\tif x ~= 0 then\n\
    \t\ttable.insert(ret, x%10)\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxd3gkqiz.lua:11:\
    \ attempt to perform arithmetic on a table value (local 'x')\nstack traceback:\n\
    \t/tmp/tmpxd3gkqiz.lua:11: in local 'candidate'\n\t/tmp/tmpxd3gkqiz.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for k in pairs(x) do\n\
    \    local num = tonumber(k)\n    if num == 0 then\n      -- empty table\n   \
    \   continue\n    end\n    local digit = math.floor(math.log(num)/math.log(10))\n\
    \    if digit == 0 then\n      -- no digit\n      result[#result+1] = k\n    else\n\
    \      -- one digit\n      local index = 1 + digit\n      assert(result[#result+1])\n\
    \      while index > #result do\n        result[#result+1] = nil\n      end\n\
    \      result[index+1] = k\n    end\n  end\n  table.sort(result)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2zsg278i.lua:16: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal unique_digits = {}\n\tfor i = 1, #x do\n\
    \t\tlocal digit = x[i]\n\t\tif digit == 0 then\n\t\t\tunique_digits[#unique_digits\
    \ + 1] = x[i]\n\t\telse\n\t\t\tunique_digits[#unique_digits + 1] = digit\n\t\t\
    end\n\tend\n\treturn unique_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscs0ms5n.lua:25:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpscs0ms5n.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- Write your code here.\n  local t = {}\n\
    \  for i = 1, x:size() do\n    if x:index(i) ~= 0 then\n      if not t[math.floor(x:index(i))]\
    \ then\n        t[math.floor(x:index(i))] = true\n      end\n    end\n  end\n\
    \  local result = {}\n  local i = 1\n  while i <= x:size() and t:len() > 0 do\n\
    \    if not t[i] then\n      result[i] = i\n      t[i] = nil\n      i = i + 1\n\
    \    else\n      t[i] = nil\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8qzm9np6.lua:12:\
    \ attempt to call a nil value (method 'size')\nstack traceback:\n\t/tmp/tmp8qzm9np6.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp8qzm9np6.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  local res = {}\n  \n  for\
    \ i = 1, #x do -- loop through each element of x.\n    -- Check if the current\
    \ element is even number without mods.\n    -- If it is, then add the current\
    \ element to the res table.\n    if x[i] % 2 == 0 then \n      res[#res+1] = x[i]\n\
    \    end\n  end\n  \n  for i = 1, #res do -- loop through each element of res.\n\
    \    -- Check if the current element is odd number without mods.\n    -- If it\
    \ is, then add the current element to the seen table.\n    if res[i] % 2 == 1\
    \ then\n      seen[#seen+1] = res[i]\n    end\n  end\n  \n  -- Sort seen table\
    \ in decreasing order.\n  table.sort(seen, function(a, b) return b - a; end)\n\
    \  \n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjr9o3iq4.lua:38:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpjr9o3iq4.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local u = {}\n   local s = #x\n   for i =\
    \ 1, s do\n      if x:sub(i) ~= 0 then \n         table.insert(u, x:sub(i))\n\
    \      end\n   end\n   return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpknxj1ufe.lua:13:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpknxj1ufe.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpknxj1ufe.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal ret = {}\n\tlocal count = {}\n\tfor _,\
    \ v in ipairs(x) do\n\t\tlocal digit = v % 10 \n\t\tif ret[digit] == nil then\n\
    \t\t\tret[digit] = true\n\t\t\tcount[digit] = 1\n\t\telse\n\t\t\tcount[digit]\
    \ = count[digit] + 1\n\t\tend\n\tend\n\tfor i = 1, 10 do\n\t\tif not ret[i] then\n\
    \t\t\tret[i] = true\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9g94bj3w.lua:32:\
    \ expected: {1, 15, 33}\nactual: {true, true, true, true, true, true, true, true,\
    \ true, true}\nstack traceback:\n\t/tmp/tmp9g94bj3w.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local d = {}\n  \n  for i = 1, #x do\n    local\
    \ a = x[i]\n    for j = 2, #a do -- If an odd digit\n      if ((a % 10) % 2) ~=\
    \ 0 then\n        d[a] = nil\n        break\n      else\n        d[a] = true\n\
    \      end\n      a = a / 10\n    end\n  end\n  \n  table.sort(d)\n  \n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6f713r58.lua:14:\
    \ attempt to get length of a number value (local 'a')\nstack traceback:\n\t/tmp/tmp6f713r58.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp6f713r58.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal i = 1\n\tlocal results = {}\n\twhile\
    \ i <= #x do\n\t\tlocal d = math.floor(math.log(i)/math.log(2))\n\t\tif #results[d]\
    \ == 0 then\n\t\t\tresults[d] = x[i]\n\t\telse\n\t\t\tresults[d] = x[i] + results[d]\
    \ \n\t\tend\n\t\ti = i + 1\n\tend\n\treturn results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpek9hjjjn.lua:14:\
    \ attempt to get length of a nil value (field '?')\nstack traceback:\n\t/tmp/tmpek9hjjjn.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpek9hjjjn.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local seen = {}\n    for i = 1, #x do\n \
    \       seen[x[i]] = true\n    end\n    local results = {}\n    for i = 1, #x\
    \ do\n        if seen[x[i]] then\n            results[#results+1] = x[i]\n   \
    \     end\n    end\n    for i = 1, #results do\n        table.sort(results) --\
    \ Sort elements in increasing order\n        if #results == 1 then\n         \
    \   table.insert(results, results[i])\n        else\n            table.insert(results,\
    \ results[i-1])\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4w4agqgx.lua:34:\
    \ expected: {1, 15, 33}\nactual: {1, 1, 1, 15, 33, 1422, 1}\nstack traceback:\n\
    \t/tmp/tmp4w4agqgx.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  if x == nil then\n    return {}\n  end\n  local\
    \ results = {}\n  for i=1, #x do\n    local c = x[i]\n    if not c:len() then\
    \ -- empty string\n      table.insert(results, c)\n      continue\n    end\n \
    \   local digits = c:find'([%d]+)'):gsub('%d+', '%1')\n    local unique_digits\
    \ = tonumber(digits)\n    if not unique_digits then\n      table.insert(results,\
    \ c)\n      continue\n    end\n    if unique_digits % 2 == 0 then\n      table.insert(results,\
    \ c)\n    end\n  end\n  table.sort(results)\n  return results\nend\n</cell>\n\
    <code language=julia-1.6>\nx = unique_digits({15, 33, 1422, 1})\n@assert x[1]\
    \ == 1\n@assert x[9] == 1\n@assert x[10] == 1\n</cell>\n<text>\n3. Find a subsequence\
    \ that repeats a given number of times in a given string\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmk9pcxzm.lua:19: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local i = 1\n  local n = #x\n  local ans =\
    \ {}\n  while i <= n do\n    if not is_even(x[i]) then\n      ans[#ans + 1] =\
    \ x[i]\n    end\n    i = i + 1\n  end\n  return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplo1k2o8x.lua:14:\
    \ attempt to call a nil value (global 'is_even')\nstack traceback:\n\t/tmp/tmplo1k2o8x.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmplo1k2o8x.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  if #x == 0 then\n    return {}\n  end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw61j_guk.lua:23: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ans = {}\n  for i = 1, #x do\n    local\
    \ n = x[i]\n    local digits = {}\n    for j = 1, #n do digits[j] = j; end\n \
    \   local unique = true\n    for j = 1, #digits do\n      if not unique  and digits[j]\
    \ == digits[j] then\n        unique = false\n      end\n    end\n    if unique\
    \ then\n      table.insert(ans, n)\n    end\n  end\n  return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplthwnvex.lua:14:\
    \ attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmplthwnvex.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmplthwnvex.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local n = #x\n    local t = {}\n    \n  \
    \  for i = 1, n do\n        if x[i] > 0 then\n            table.insert(t, x[i])\n\
    \        end\n    end\n    \n    -- sort by value\n    table.sort(t)\n    \n \
    \   -- remove elements\n    for i = 2, n do\n        if t[i - 1] % t[i] ~= 0 then\n\
    \            table.remove(t)\n        end\n    end\n    \n    return t\nend\n\
    </cell>\n<text>\nFunction to compute all permutations of a list\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbe6gxdrd.lua:31: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local function check(x)\n      if x==0 then\
    \ return nil end\n      if x<10 then return x..0 end\n      if x%10==0 then return\
    \ unique_digits(x/10) end\n      return unique_digits(x/10) and x%10\n   end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp86b4yv65.lua:26: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- Count the number of each digit.\n  local\
    \ digit = {}\n  for i = 1, 10 do\n    digit[i] = 0\n  end\n  for i = 1, x:size()\
    \ do\n    digit[x[i]]  = digit[x[i]] + 1\n  end\n  -- Create a sorted table of\
    \ unseen digits.\n  local new_x = {}\n  for i in pairs(digit) do\n    if digit[i]\
    \ % 2 ~= 0 then\n      table.insert(new_x, i)\n    end\n  end\n  return new_x\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe2duico8.lua:15:\
    \ attempt to call a nil value (method 'size')\nstack traceback:\n\t/tmp/tmpe2duico8.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpe2duico8.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 2, #x do\n  \
    \      local y = #x\n        for j = 1, y do\n            if (x[j] % i) == 0 then\n\
    \                table.insert(res, x[j])\n            end\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohwlqyt_.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422, 15, 33, 1422}\nstack traceback:\n\t/tmp/tmpohwlqyt_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal t = {}\n\tlocal n = 1\n\t\n\tfor i =\
    \ 2, #x do\n\t\t-- if the number has even digit, skip it.\n\t\tif x[i] % 2 ~=\
    \ 0 then\n\t\t\tn = 1\n\t\t\t-- break the loop if the number is greater than the\
    \ previous number.\n\t\t\t-- That means that the number is larger than all previous\
    \ ones.\n\t\t\tbreak\n\t\tend\n\t\t\n\t\t-- If the number is larger than any previous\
    \ number, add it into the table.\n\t\tif n > x[i] then\n\t\t\tt[#t+1] = x[i]\n\
    \t\tend\n\tend\n\t\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsaftpxiu.lua:34:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpsaftpxiu.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local num_digits = {}\n  for i = 1,#x do\n\
    \    local c = math.mod(tonumber(x[i]), 1)\n    if not num_digits[c] then\n  \
    \    table.insert(num_digits, c)\n    end\n  end\n  return num_digits\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5k_vsym1.lua:12:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmp5k_vsym1.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp5k_vsym1.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal result = {}\n\t\n\tlocal function is_prime(num)\n\
    \t\t-- Checks if the given number is a prime number or not\n\t\tlocal d\n\t\t\
    local i\n\t\tfor i = 1, #x do\n\t\t\td = x[i]\n\t\t\tif d % 2 == 0 then\n\t\t\t\
    \treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\t\n\tlocal function\
    \ check_prime(num)\n\t\t-- Checks if the given number is prime or not\n\t\tlocal\
    \ d\n\t\tlocal i\n\t\tfor i = 1, #x do\n\t\t\td = x[i]\n\t\t\tif d % 2 == 0 then\n\
    \t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\n\t\n\tlocal\
    \ function is_even(n)\n\t\t-- Checks if the given number is even\n\t\tlocal i\n\
    \t\tfor i = 1, #x do\n\t\t\tif x[i] % 2 == 0 then\n\t\t\t\treturn false\n\t\t\t\
    end\n\t\tend\n\t\treturn true\n\tend\n\t\n\tlocal function is_odd(n)\n\t\t-- Checks\
    \ if the given number is odd\n\t\tlocal i\n\t\tfor i = 1, #x do\n\t\t\tif x[i]\
    \ % 2 ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\t\
    end\n\t\n\tlocal function is_unique_odd(n)\n\t\t-- Checks if the given number\
    \ is odd unique or not\n\t\tlocal i\n\t\tfor i = 1, #x do\n\t\t\tif x[i] % 2 ~=\
    \ 0 and x[i] ~= n then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\
    \tend\n\t\n\tlocal function is_unique_even(n)\n\t\t-- Checks if the given number\
    \ is even unique or not\n\t\tlocal i\n\t\tfor i = 1, #x do\n\t\t\tif x[i] % 2\
    \ == 0 and x[i] ~= n then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn\
    \ true\n\tend\n\t\n\tfor i, v in pairs(x) do\n\t\t-- Checks prime number or not\n\
    \t\tif check_prime(v) == true then\n\t\t\tresult[i] = v\n\t\tend\n\t\t\n\t\t--\
    \ Checks even or odd number or not\n\t\tif is_even(v) == false then\n\t\t\tresult[i]\
    \ = v\n\t\tend\n\t\t\n\t\t-- Checks odd unique number or not\n\t\tif is_unique_odd(v)\
    \ == true then\n\t\t\tresult[i] = v\n\t\tend\n\t\t\n\t\t-- Checks even unique\
    \ number or not\n\t\tif is_unique_even(v) == true then\n\t\t\tresult[i] = v\n\t\
    \tend\n\tend\n\t\n\t-- Sorts the returned table\n\ttable.sort(result)\n\t\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6khpl2v.lua:113:\
    \ expected: {1, 15, 33}\nactual: {1, 15, 33, 1422}\nstack traceback:\n\t/tmp/tmpz6khpl2v.lua:113:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local hash = {}\n    local function helper(x)\n\
    \        if #x == 0 then\n            return nil\n        end\n        local lastdigit\
    \ = x[1]\n        if hash[lastdigit] == nil then\n            hash[lastdigit]\
    \ = true\n            return x\n        end\n        return x\n    end\n    return\
    \ helper(x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp496of1_q.lua:28:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmp496of1_q.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpao109118.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpao109118.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    local\
    \ v = x[i]\n    if v ~= 0 then \n      t[math.floor(v/10)] = v\n    end\n  end\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7lhj00u.lua:23:\
    \ expected: {1, 15, 33}\nactual: {0=1, 15, 3=33, 142=1422}\nstack traceback:\n\
    \t/tmp/tmpp7lhj00u.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659977987
- exit_code: -1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal table = {}\n\tlocal t\n\tfor i = 1, #x\
    \ do\n\t\tt = x[i]\n\t\twhile t > 0 do\n\t\t\tt = t / 10\n\t\t\tif t == 0 then\n\
    \t\t\t\tbreak\n\t\t\telse\n\t\t\t\ttable[t] = true\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977992
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- Return an empty table if the table is empty.\n\
    \  if #x == 0 then\n    return {}\n  end\n  -- Initialize a result table and add\
    \ the first element to the result.\n  local result = {}\n  result[1] = x[1]\n\
    \  -- Iterate over every other element.\n  for i = 2, #x do\n    -- If the current\
    \ element is divisible by two and larger, remove it.\n    if x[i] % 2 == 0 then\n\
    \      result[#result + 1] = x[i]\n    end\n  end\n  -- Sort the result table\
    \ in increasing order.\n  table.sort(result)\n  -- Return the result table.\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfq38oph6.lua:33:\
    \ expected: {1, 15, 33}\nactual: {15, 1422}\nstack traceback:\n\t/tmp/tmpfq38oph6.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- base case\n  local ret = {}\n  if #x > 0\
    \ then\n    local v = x[1]\n    if #x > 1 then\n      for i = 2, #x do\n     \
    \   if v%x[i] == 0 then\n          -- remove all even digits.\n          v = v%x[i]\n\
    \        else\n          table.insert(ret, v)\n        end\n      end\n    end\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4l5f35us.lua:31:\
    \ expected: {1, 15, 33}\nactual: {15, 15}\nstack traceback:\n\t/tmp/tmp4l5f35us.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local i = 1\n  local result = {}\n  while i\
    \ <= #x do\n    if x[i] % 2 == 0 then\n      result[#result+1] = x[i]\n    end\n\
    \    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjuus_np.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpxjuus_np.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local y = {}\n  for i = 1, #x do\n    local\
    \ d = x[i]\n    if d then\n      y[d] = true\n    end\n  end\n  table.sort(y)\n\
    \  -- print(table.concat(y, \", \"))\n  return y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91cwjrkq.lua:25:\
    \ expected: {1, 15, 33}\nactual: {true, 15=true, 33=true, 1422=true}\nstack traceback:\n\
    \t/tmp/tmp91cwjrkq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    if #x == 0 then return { } end\n    if #x\
    \ == 1 then return x end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4so0dev0.lua:22: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local tbl = {}\n    for i = 1, #x do\n  \
    \      local v = x[i]\n        if v % 2 == 0 then\n            table.insert(tbl,\
    \ v)\n        end\n    end\n    return tbl\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw90go6bb.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpw90go6bb.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local table = {}\n   local t = {}\n   local\
    \ i = 1\n   while i <= #x do\n      if x[i]%2 == 0 then\n         table.insert(t,\
    \ x[i])\n      end\n      i = i+1\n   end\n   for i = #x - 2, 1, -1 do\n     \
    \ if t[i] ~= nil then\n         table.insert(table, t[i])\n      end\n   end\n\
    \   return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_rgp6usj.lua:15:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmp_rgp6usj.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp_rgp6usj.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local ret = {}\n    for _, v in pairs(x)\
    \ do\n        local n = math.floor(v / 10)\n        if not ret[n] then\n     \
    \       ret[n] = v\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpddqa22_b.lua:23:\
    \ expected: {1, 15, 33}\nactual: {0=1, 15, 3=33, 142=1422}\nstack traceback:\n\
    \t/tmp/tmpddqa22_b.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    if #x == 0 then\n        return {}\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpndoai5ka.lua:23: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    local index\n    --\
    \ first pass: check whether every element of x is a digit\n    for _, v in pairs(x)\
    \ do\n        -- check whether a number is odd and whether it has a nonzero digit\n\
    \        if ( v mod 2 == 0 ) then\n            if index then\n               \
    \ -- if an element is found before another non-zero digit is found,\n        \
    \        -- we add the smaller one to the result.\n                if v < result[index]\
    \ then\n                    result[index] = v\n                end\n         \
    \   else\n                -- if an element is found after a non-zero digit is\
    \ found,\n                -- we add the smallest one to the result.\n        \
    \        result[index] = v\n            end\n        end\n        index = nil\n\
    \    end\n    -- second pass: check whether there is some element that hasn't\
    \ a nonzero digit\n    for i = 2, #result do\n        -- check whether an element\
    \ is odd and whether it has a nonzero digit\n        if ( result[i] mod 2 ~= 0\
    \ ) then\n            -- if there is an element that hasn't a nonzero digit, we\
    \ can add it\n            -- to the result and return it.\n            result[i]\
    \ = nil\n            return result\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp36ne2bgt.lua:15: '')'' expected near ''mod''

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  if x == nil then\n    return {}\n  end\n  local\
    \ res = {}\n  \n  local function is_odd(x)\n    if x == nil then\n      return\
    \ false\n    end\n    return x % 2 ~= 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr2jvcfmy.lua:31: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  if x then\n    local table = {}\n    for _,\
    \ item in pairs(x) do\n      if item % 2 ~= 0 then\n        table.insert(table,\
    \ item)\n      end\n    end\n    table.sort(function(x, y) return x < y end)\n\
    \    return table\n  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9jsac2r5.lua:14:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmp9jsac2r5.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp9jsac2r5.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local seen = {}\n    local ret = {}\n   \
    \ for i = 1, #x do\n        local digit = x[i]\n        if digit == 0 then\n \
    \           continue\n        end\n        if seen[digit] ~= 1 then\n        \
    \    ret[#ret+1] = digit\n            seen[digit] = 1\n        end\n    end\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwlxk0uff.lua:16: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1,#x do\n    if (x:sub(i,i)%2\
    \ ~= 0) then\n      table.insert(ret, x:sub(i,i))\n    end\n  end\n  table.sort(ret)\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbdppajr0.lua:12:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpbdppajr0.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpbdppajr0.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, 10 do\n    if\
    \ x[i] % 2 == 0 then\n      if table.find(ret, x[i]) == nil then\n        ret[x[i]]\
    \ = true\n      end\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwfz5xcg7.lua:13:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmpwfz5xcg7.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpwfz5xcg7.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function is_even(i)\n    return ((i %\
    \ 2) == 0)\n  end\n  local function is_odd(i)\n    return ((i % 2) == 1)\n  end\n\
    \  local sorted_x = {}\n  local max_x = 0\n  local i = 1\n  local done = false\n\
    \  while not done do\n    local xd = tostring(x[i])\n    table.insert(sorted_x,\
    \ xd)\n    i = i + 1\n    if max_x ~= 0 and xd ~= max_x then\n      done = true\n\
    \    end\n    if i > #x then\n      done = true\n    end\n    if max_x == 0 then\n\
    \      max_x = xd\n    end\n  end\n  if max_x == 0 then\n    return {}\n  end\n\
    \  for i = 1, #x do\n    if tostring(x[i]) == max_x then\n      table.insert(sorted_x,\
    \ max_x)\n    end\n  end\n  return sorted_x\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpowf7ojfn.lua:48:\
    \ expected: {1, 15, 33}\nactual: {\"15\", \"33\", \"15\"}\nstack traceback:\n\t\
    /tmp/tmpowf7ojfn.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local t = {}\n   for i = 1, #x do \n     \
    \ if i % 2 == 0 then table.insert(t, x[i]) end\n   end\n   return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq79vqmhb.lua:20:\
    \ expected: {1, 15, 33}\nactual: {33, 1}\nstack traceback:\n\t/tmp/tmpq79vqmhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local num_digits = {}\n   local i = 1\n  \
    \ while i <= #x do \n      num_digits[i] = x[i]\n      i = i + 1\n   end\n   table.sort(num_digits,\
    \ function(a,b) return a > b end)\n   local j = 1\n   while j <= #num_digits do\n\
    \      local element = num_digits[j]\n      local k = 1\n      while k + 2 <=\
    \ #num_digits do\n         if num_digits[k] == element then\n            table.insert(num_digits,\
    \ element) -- replace \n         end\n         k = k + 1\n      end\n      j =\
    \ j + 1\n   end\n   return num_digits\nend\n</cell>\n<text>\nExercise 2\nImplement\
    \ the function to_number() that takes two arguments x and y, and returns true\
    \ if\nx is a number in base 10 and y is an integer in base 10. For example:\n\
    >>> to_number(4, 2)\nTrue\n>>> to_number(10, 10)\nTrue\n>>> to_number(5, 2)\n\
    False\n>>> to_number(5, 5)\nFalse\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9ejj30n4.lua:31: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal res = {}\n\tlocal digits = {}\n\tfor\
    \ i = 1, #x do\n\t\tdigits[x[i]] = 1\n\tend\n\t-- check each digit\n\tfor i =\
    \ 1, 10 do\n\t\tif not digits[i] then\n\t\t\tres[i] = x[i]\n\t\tend\n\tend\n\t\
    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08rsz2fr.lua:27:\
    \ expected: {1, 15, 33}\nactual: {2=33, 3=1422, 4=1}\nstack traceback:\n\t/tmp/tmp08rsz2fr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   if #x > 0 then\n      local i = #x\n     \
    \ local table = {}\n      while i > 0 do\n         if x[i / 2] > 0 then\n    \
    \        table.insert(table, x[i / 2])\n         end\n         i = i / 2\n   \
    \   end\n      return table\n   else\n      return {}\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp27s5mcgs.lua:15:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmp27s5mcgs.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp27s5mcgs.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\t-- Create an empty table to hold the answer.\n\
    \tlocal y = {}\n\t\n\t-- Keep track of the number of digits in each integer.\n\
    \tfor i = 1, #x do\n\t\tlocal n = tonumber(string.sub(x,i,i))\n\t\tif n == 0 then\n\
    \t\t\ttable.insert(y, nil)\n\t\telseif n > 1 then\n\t\t\tfor d = 2, n do\n\t\t\
    \t\ttable.insert(y, d - 1)\n\t\t\tend\n\t\telse\n\t\t\ttable.insert(y, n)\n\t\t\
    end\n\tend\n\t\n\t-- Sort the table in descending order (i.e. largest integer\
    \ first).\n\ttable.sort(y, function(a,b) return b - a end)\n\t\n\t-- Return just\
    \ the unique elements.\n\tfor i = 1, #y do\n\t\tlocal n = y[i]\n\t\tif n ~= 0\
    \ then\n\t\t\tlocal p = math.floor(n/10)\n\t\t\ttable.insert(y, p - 1)\n\t\t\t\
    table.insert(y, n % 10)\n\t\tend\n\tend\n\t\n\treturn y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwyn2ird3.lua:15:\
    \ bad argument #1 to 'sub' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpwyn2ird3.lua:15: in local 'candidate'\n\t/tmp/tmpwyn2ird3.lua:46: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- We use two auxiliary vectors to find out\
    \ if each number has any \n  -- even digit.\n  local v\n  local vv\n  v = {}\n\
    \  vv = {}\n  for i = 1, #x do\n    local tmp = x[i]\n    local found = true\n\
    \    for j = 1, #v do\n      if tmp % 10 == 0 then\n        found = false\n  \
    \      break\n      end\n    end\n    if found then\n      table.insert(v, tmp)\n\
    \    else\n      table.insert(vv, tmp)\n    end\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw4ui3co8.lua:41: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- Return an empty table if nil is passed.\n\
    \  if x == nil then\n    return {}\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdr4nicr8.lua:24: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local table = {}\n  for i = 1, #x do\n    local\
    \ is_even = false\n    for j = 1, #x do\n      if x[i] == x[j] and j > i then\n\
    \        is_even = true\n        break\n      end\n    end\n    if is_even then\n\
    \      table.insert(table, x[i])\n    end\n  end\n  return table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2tl36zd.lua:29:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpb2tl36zd.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   if x == nil then return end\n   local newTable\
    \ = {}\n   for i = 1, #x do\n      if x[i] % 2 == 0 then\n         table.insert(newTable,\
    \ x[i])\n      end\n   end\n   return newTable\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl3w58gc.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmptl3w58gc.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n    \
    \    local n = 1\n        for j = 1, i do\n            if x[i] == x[j] then\n\
    \                n = n * 10\n            else\n                n = n + 1\n   \
    \             break\n            end\n        end\n        if n % 2 == 0 then\n\
    \            table.insert(t, x)\n        end\n    end\n    return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18qsul5y.lua:31:\
    \ expected: {1, 15, 33}\nactual: <table 02> {<table 01> {15, 33, 1422, 1}, <table\
    \ 01>, <table 01>, <table 01>}\nstack traceback:\n\t/tmp/tmp18qsul5y.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local n = {} -- Table of unique digits\n  local\
    \ key\n  for key in pairs(x) do \n    if x[key] == 0 then -- Found a zero. Skip\
    \ it\n      table.remove(x, key)\n      next\n    end\n    table.insert(n, math.floor(x[key]\
    \ / 10))\n  end\n  table.sort(n)\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpksfmdolx.lua:16: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ if not is_divisible_by(x[i], 10) then \n      table.insert(result, x[i])\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplaso_h3k.lua:12:\
    \ attempt to call a nil value (global 'is_divisible_by')\nstack traceback:\n\t\
    /tmp/tmplaso_h3k.lua:12: in local 'candidate'\n\t/tmp/tmplaso_h3k.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local table = {}\n  local max = 0\n  for _,\
    \ v in pairs(x) do\n    if v > max then\n      max = v\n    end\n  end\n  local\
    \ count = 0\n  local max = max\n  while max > 0 and count < max do\n    local\
    \ cur = max\n    max = max - 1\n    if x[cur] ~= 0 and x[cur] % 2 == 0 then\n\
    \      table.insert(table, cur)\n    end\n    count = count + 1\n  end\n  return\
    \ table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpchya1z33.lua:22:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpchya1z33.lua:22: in local 'candidate'\n\t/tmp/tmpchya1z33.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  if #x > 0 then\n    local function get_digits(x)\n\
    \      if x then\n        local i, y = 0, x\n        local results = {{x = y}}\n\
    \        while y do\n          y, i = y % 10, i + 1\n          if i == 0 then\n\
    \            table.insert(results, {x = y})\n          end\n        end\n    \
    \    return results\n      else\n        return nil\n      end\n    end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu0f0wuyn.lua:36: ''end'' expected (to close ''if'' at line
    10) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local results = {}\n  local index = 1\n  local\
    \ max = table.getn(x)\n  local last_digit = 0\n  for i=1, max do\n    local digit\
    \ = math.floor(x[index] / 10)\n    if digit == last_digit then\n      results[#results\
    \ + 1] = last_digit\n    elseif digit % 2 == 0 then\n      table.insert(results,\
    \ digit)\n    end\n    last_digit = digit\n    index = index + 1\n  end\n  return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqs9sy16z.lua:12:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpqs9sy16z.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpqs9sy16z.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal function sort_table(t, v)\n\t\treturn\
    \ t[#t] ~= nil and v or t + {v}\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxew8sr5l.lua:23: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  if x==nil then return nil end\n  local ret\
    \ = {}\n  local len = #x\n  local digit\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpot_09hzq.lua:24: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local ret = {}\n   for i = 1, #x do\n    \
    \  local digit = x[i]\n      local numDigit = 0\n      for j = 1, #digit do\n\
    \         if digit[j] ~= 0 then\n            numDigit = numDigit + 1\n       \
    \  end\n      end\n      if numDigit == 0 then\n         table.insert(ret, digit)\n\
    \      end\n   end\n   return ret\nend\n   \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm18u939.lua:14:\
    \ attempt to get length of a number value (local 'digit')\nstack traceback:\n\t\
    /tmp/tmplm18u939.lua:14: in local 'candidate'\n\t/tmp/tmplm18u939.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local table = {}\n  local n = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoxxo3nkt.lua:22: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, 100 do\n    if\
    \ x[i] ~= 0 then \n      ret[#ret + 1] = x[i]\n    end\n  end\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2wlwgusp.lua:22:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmp2wlwgusp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    -- Return an empty table if x is nil\n  \
    \  if x then\n        -- Initialize table with nil\n        local t = {x}\n  \
    \      -- Add elements from x whose corresponding digit is not even\n        for\
    \ i = 1, 10 do\n            -- If x's corresponding digit is even, add it to t\n\
    \            if x[i] % 2 == 0 then\n                table.insert(t, x[i])\n  \
    \          end\n        end\n        -- Return the result of x\n        return\
    \ t\n    end\n    -- Return an empty table if the input was nil\n    return {}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpimlyh90i.lua:17:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpimlyh90i.lua:17: in local 'candidate'\n\t/tmp/tmpimlyh90i.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  if #x == 0 then\n    return {}\n  end\n  \n\
    \  local d = unpack(x)\n  local ret = {}\n  \n  for i = 1, #d do\n    local tmp\
    \ = t[math.floor(d[i] / 10)]\n    if tmp == nil then\n      t[#t + 1] = math.floor(d[i]\
    \ / 10)\n      t[#t] = tmp\n    end\n  end\n  \n  local last = 1\n  for i = #t,\
    \ 2, -1 do\n    table.insert(ret, t[last])\n    last = i + 1\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppyach447.lua:14:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmppyach447.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmppyach447.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local function f(n)\n        if x[n] == nil\
    \ then return n else return f(x[n]) or n end\n    end\n    local ret = {}\n  \
    \  for i = 2, 10 do\n        table.insert(ret, f(i))\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3n9l9clp.lua:23:\
    \ expected: {1, 15, 33}\nactual: {33, 1422, 15, 5, 6, 7, 8, 9, 10}\nstack traceback:\n\
    \t/tmp/tmp3n9l9clp.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ if not result[math.floor(x[i])] then\n      result[math.floor(x[i])] = true\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7pntg2rz.lua:22:\
    \ expected: {1, 15, 33}\nactual: {true, 15=true, 33=true, 1422=true}\nstack traceback:\n\
    \t/tmp/tmp7pntg2rz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local i = 1\n  local table = nil\n  while i\
    \ <= #x do\n    if x[i] % 2 == 0 then\n      table = {x[i]}\n    else\n      table\
    \ = {x[i], table[1]}\n    end\n    i = i + 2\n  end\n  return table\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_cx7ew2.lua:16:\
    \ attempt to index a nil value (local 'table')\nstack traceback:\n\t/tmp/tmp3_cx7ew2.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp3_cx7ew2.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local tbl = {}\n  local i = 1\n  for k in pairs(x)\
    \ do\n    if math.floor(k) % 2 == 0 then\n      table.insert(tbl, k)\n    else\n\
    \      i = i + 1\n    end\n  end\n  table.sort(tbl)\n  return tbl\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96o5egoq.lua:26:\
    \ expected: {1, 15, 33}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp96o5egoq.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    if x[i]\
    \ % 2 == 0 then\n      table.insert(t, x[i])\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpac_zcu78.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpac_zcu78.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local sets = {}\n  for i=1,#x do\n    local\
    \ digit = x[i]\n    if not sets[digit] then\n      sets[digit] = x\n      table.insert(sets,\
    \ digit)\n    end\n  end\n  \n  local output = {}\n  for i=1,#sets do\n    if\
    \ not sets[i] then\n      table.insert(output, sets[i])\n    end\n  end\n  \n\
    \  for i=1,#sets do\n    table.sort(sets[i], function(left, right)\n      local\
    \ leftNum = tonumber(left)\n      local rightNum = tonumber(right)\n      local\
    \ result = math.abs(leftNum - rightNum)\n      return result\n    end)\n  end\n\
    \  \n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpru53v2vm.lua:27:\
    \ bad argument #1 to 'sort' (table expected, got number)\nstack traceback:\n\t\
    /tmp/tmpru53v2vm.lua:27: in local 'candidate'\n\t/tmp/tmpru53v2vm.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  local results = {}\n  for\
    \ i=1,#x do\n    if seen[x[i]] then break end\n    seen[x[i]] = true\n    results[#results+1]\
    \ = x[i]\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijad2dev.lua:23:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpijad2dev.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local output = {}\n  local keys = {}\n  local\
    \ counts = {}\n  for i,k in pairs(x) do\n    if counts[k] ~= 0 then\n      output[counts[k]]\
    \ = k\n      counts[k] = counts[k] + 1\n    else\n      keys[k] = i\n      counts[1]\
    \ = counts[1] + 1\n    end\n  end\n  for k,v in pairs(keys) do\n    output[v]\
    \ = x[k]\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgw0wd6tq.lua:15:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpgw0wd6tq.lua:15: in local 'candidate'\n\
    \t/tmp/tmpgw0wd6tq.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local i = 1\n  local result = {}\n  while i\
    \ <= #x do\n    local n = x[i]\n    if n % 2 == 0 then\n      result[#result +\
    \ 1] = x[i]\n    end\n    i = i + 1\n  end\n  table.sort(result)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpfkcw7m.lua:26:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpxpfkcw7m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  if #x <= 0 then\n    return {}\n  end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprhg_licz.lua:23: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i, v in ipairs(x)\
    \ do\n        for j=1, v do\n            table.insert(res, v)\n        end\n \
    \   end\n    table.sort(res)\n    return res\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpot4m8_m_.lua:19: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  if x == nil then\n    return nil\n  elseif\
    \ #x == 1 then\n    return setmetatable({x[1]}, tablefunc)\n  else\n    local\
    \ ret = {}\n    for i = 2, #x do\n      if x[i - 1] % 2 == 0 then\n        ret[#ret\
    \ + 1] = x[i - 1]\n      end\n    end\n    return setmetatable(ret, tablefunc)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4d4cs3h3.lua:28:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp4d4cs3h3.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- Base case\n  if #x > 1 then\n    local table\
    \ = {}\n    -- Loop over all the numbers and find all the number without even\
    \ digit\n    for i=1,#x do\n      local digits = x[i]/math.floor(math.log(x[i],10))\n\
    \      if digits > 0 then\n        -- If there are no even digit, add it to the\
    \ return table\n        if digits % 2 == 0 then\n          table.insert(table,\
    \ x[i])\n        end\n      end\n    end\n    -- Sort the result table\n    table.sort(function\
    \ (x,y) return x:tonumber() > y:tonumber() end)\n    -- Return the result table\n\
    \    return table\n  end\n  -- Base case\n  return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zoomakz.lua:19:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmp6zoomakz.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp6zoomakz.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal ret = {}\n\tfor i=1,#x do \n\t\tif x[i]\
    \ % 2 == 0 then \n\t\t\ttable.insert(ret, x[i]) \n\t\tend\n\tend\n\treturn ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wq8f_51.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp8wq8f_51.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  if #x == 0 then return {}\n  else\n    local\
    \ n = 1\n    local t = {}\n    for i = 1, #x do \n      local g = tostring(x[i])\n\
    \      \n      -- If current element has even digit, add it to the table if not\
    \ already.\n      if g:sub(1, 1) ~= '0' then\n        local x = g:sub(1, 1)\n\
    \        if not t[x] then\n          t[x] = {}\n          t[x][#t+1] = i\n   \
    \     end\n      end\n      \n      -- Increment n\n      n = n*10 + tostring(g:sub(1,\
    \ 1):byte())\n    end\n    return t\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhoutx64.lua:36:\
    \ expected: {1, 15, 33}\nactual: {\"1\"={1}, \"3\"={2}}\nstack traceback:\n\t\
    /tmp/tmpnhoutx64.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    local\
    \ c = x[i]\n    if c ~= 0 and c % 2 == 0 then\n      t[#t + 1] = x[i]\n    end\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjnhjbep.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpnjnhjbep.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local n = {}\n  for i = 1, x:len() do\n   \
    \ local s = x:sub(i,i)\n    if s == \"0\" then break end\n    n[s] = n[s] and\
    \ 1 or n[s] + 1\n  end\n  local ans = {}\n  for i = 1, x:len() do\n    if n[x:sub(i,i)]\
    \ ~= 0 then\n      ans[x:sub(i,i)] = n[x:sub(i,i)]\n    end\n  end\n  return ans\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1psn55hw.lua:11:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp1psn55hw.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp1psn55hw.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    if x == nil then\n        return nil\n  \
    \  end\n    local n = 1\n    local res = {}\n    for i = 1, n do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(res, x[i])\n        end\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglgf4z_r.lua:26:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpglgf4z_r.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: -1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal v = {}\n\tfor i = 1, #x do\n\t\tlocal\
    \ y = x[i]\n\t\tlocal i = 1\n\t\twhile y ~= 0 do\n\t\t\tif y % 2 == 1 then\n\t\
    \t\t\ty = y / 2\n\t\t\telse\n\t\t\t\tx[i] = y / 2\n\t\t\t\ttable.insert(v, y)\n\
    \t\t\t\ty = y % 2\n\t\t\tend\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn v\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977992
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local ret = {}\n    local digit_count = {}\n\
    \    for i = 1, 10 do\n        digit_count[i] = 0\n    end\n    for v in pairs(x)\
    \ do\n        if digit_count[v] ~= 0 then\n            digit_count[v] = digit_count[v]\
    \ + 1\n        else\n            table.insert(ret, v)\n        end\n    end\n\
    \    for i = 2, 10 do\n        if digit_count[i] == 0 then\n            table.insert(ret,\
    \ i)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph7_ujcrl.lua:33:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 3, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nstack\
    \ traceback:\n\t/tmp/tmph7_ujcrl.lua:33: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for _, item in pairs(x)\
    \ do\n    if item % 2 == 0 then\n      result[#result + 1] = item\n    end\n \
    \ end\n  table.sort(result, function(a, b) return a < b end)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpphssavvc.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpphssavvc.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1,#x do\n    if x[i]\
    \ % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  table.sort(ret)\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpowp1dsvc.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpowp1dsvc.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal res = {}\n\t-- find unique elements\n\
    \tfor i, v in pairs(x) do\n\t\tif not res[i] then\n\t\t\tres[i] = true\n\t\t\t\
    -- get all digits\n\t\t\tfor _, d in pairs(string.gmatch(\"%.\" .. (10 * i) ..\"\
    d*\", \"%D\")) do\n\t\t\t\t-- return digits that has no any even digit\n\t\t\t\
    \tif v mod math.floor(math.pow(10, #d - 1)) ~= 0 then\n\t\t\t\t\ttable.insert(res,\
    \ v)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t-- sort result\n\treturn table.sort(res)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp52xjb6v6.lua:18: ''then'' expected near ''mod''

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local num_digits = {}\n  for i = 1,#x do \n\
    \    local digit = x[i]\n    if num_digits[digit] == nil then\n      num_digits[digit]\
    \ = 1\n    else\n      num_digits[digit] = num_digits[digit] + 1\n    end\n  end\n\
    \  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n    if num_digits[digit]\
    \ == 1 then\n      table.insert(ret, digit)\n    end\n  end\n  table.sort(ret)\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_jtt9wi.lua:33:\
    \ expected: {1, 15, 33}\nactual: {1, 15, 33, 1422}\nstack traceback:\n\t/tmp/tmpn_jtt9wi.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local set = {}\n    for i = 1, #x do\n  \
    \      if set[x[i]] == nil then\n            table.insert(set, x[i])\n       \
    \ end\n    end\n    return set\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66mwt6m7.lua:22:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422}\nstack traceback:\n\t/tmp/tmp66mwt6m7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local results = {}\n  local max_n = #x\n  for\
    \ i = 1, max_n do\n    local is_even = is_power_of_ten(x[i])\n    if is_even then\n\
    \      table.insert(results, x[i])\n    end\n  end\n  return table.sort(results)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsd873d7t.lua:13:\
    \ attempt to call a nil value (global 'is_power_of_ten')\nstack traceback:\n\t\
    /tmp/tmpsd873d7t.lua:13: in local 'candidate'\n\t/tmp/tmpsd873d7t.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local table = {}\n  table.sort(function(a,\
    \ b) return x[a] < x[b] end)\n  local function checkDigit(digit, table)\n    for\
    \ i=1,#table do\n      if digit == table[i] then\n        return false\n     \
    \ end\n    end\n    return true\n  end\n  local digits = setmetatable({}, {\n\
    \      __index = function(t, k)\n        return checkDigit(k, t)\n      end\n\
    \  })\n  for i=1,#x do\n    if checkDigit(x[i], digits) then\n      table.insert(digits,\
    \ x[i])\n    end\n  end\n  return digits\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmfzj1f25.lua:11:\
    \ attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmpmfzj1f25.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpmfzj1f25.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local last_non_zero =\
    \ 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpduvdabhy.lua:22: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local keys = {}\n  for\
    \ _,v in ipairs(x) do \n    local digit = v % 10 \n    if digit==0 and keys.contains(digit)\
    \ then \n      result[#result+1] = v \n    else\n      keys[digit] = true\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvevsl5.lua:26:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpgwvevsl5.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function unique(x)\n    local table =\
    \ {}\n    table.insert(table.unpack(x))\n    for i=1,#x do\n      local v = x[i]\n\
    \      if v%2 ~= 0 then\n        table.insert(table, v)\n      end\n    end\n\
    \    return table\n  end\n  return unique(table.unpack(x))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyqlxivjp.lua:12:\
    \ attempt to call a nil value (field 'unpack')\nstack traceback:\n\t/tmp/tmpyqlxivjp.lua:12:\
    \ in function </tmp/tmpyqlxivjp.lua:10>\n\t(...tail calls...)\n\t/tmp/tmpyqlxivjp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ local number = tonumber(x[i])\n    if number then\n      -- Remove leading zeros.\n\
    \      if number < 10 then\n        number = 10\n      else\n        number =\
    \ number - 10\n      end\n      -- Remove duplicate digits.\n      -- Note: Using\
    \ a hash table for better speed.\n      for j = 1, #result do\n        local v1\
    \ = tonumber(result[j])\n        if v1 and v1 == number then\n          result[j]\
    \ = nil\n          break\n        end\n      end\n      table.insert(result, number)\n\
    \    end\n  end\n  return table.sort(result)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptv6vzims.lua:38:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmptv6vzims.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local i = 1\n    local ans = {}\n    for\
    \ i=1, #x do\n        if x[i] % 2 == 0 then\n            ans[#ans + 1] = x[i]\n\
    \        end\n    end\n    return ans\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0p6nx_bj.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp0p6nx_bj.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local digits = {}\n  local len = #x\n  for\
    \ i = 1,len do\n    local d = tostring(x[i])\n    for j = 1,#d do\n      local\
    \ t = math.mod(j+i, 10)\n      if digits[t] then\n        -- Duplicate.\n    \
    \  else\n        digits[t] = true\n      end\n    end\n  end\n  return table.sortn(digits,\
    \ #digits)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzbb70ii3.lua:15:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpzbb70ii3.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpzbb70ii3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local n = {}\n    for i = 1, math.max(#x)\
    \ do\n        if x[i] == 0 then\n            break\n        else\n           \
    \ if x[i] % 2 == 0 then\n                table.insert(n, x[i])\n            end\n\
    \        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4a0f49x8.lua:26:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp4a0f49x8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: -1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- The list `i` will contain the unique digits\
    \ `t` where `t` is the\n  -- number `x` passed as the argument in the argument\
    \ `i`.\n  -- `t` will be a digit from `1` to `9`\n  local i, t = {}, {}\n  --\
    \ While loop iterates for the length of `x`.\n  while #x > 0 do\n    -- Get an\
    \ element from the list.\n    local e = x[#x]\n    -- Add it to the list `t`.\n\
    \    t[#t+1] = e\n    -- Remove this element from the list.\n    table.insert(x,\
    \ e)\n    -- Check each digit from `1` to `9`.\n    for i = 1, 10 do\n      --\
    \ If this element is less than or equal to the current digit\n      -- of `x`,\
    \ then we found a new unique number.\n      if e <= i then\n        break\n  \
    \    -- Otherwise, check if this element is already in our table\n      elseif\
    \ #t == #i then\n        -- the table `t` already contains the number `x`\n  \
    \      break\n      -- If not, then add it back to the table.\n      else\n  \
    \      t[#t+1] = i\n      end\n    end\n  end\n  -- Return the list `t`\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977992
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] and x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n\
    \  table.sort(ret)\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3du86c4u.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3du86c4u.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
- exit_code: -1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local n = {x}\n  local t = {}\n  repeat\n \
    \   table.insert(t, #n+1)\n  until #n >= 2\n  for i = 1, #n do \n    -- if an\
    \ element of n does not have any even digit\n    -- insert it to t and remove\
    \ it from n\n    if t[#t] + #n[i] % 2 ~= 0 then \n      table.insert(t, n[i])\n\
    \      table.remove(n, 1)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977992
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local output = {}\n  for i = 1, #x do\n   \
    \ -- Check if number contains an even digit.\n    -- If it contains an even digit,\
    \ skip it.\n    if x[i] % 2 ~= 0 then\n      output[#output + 1] = x[i]\n    end\n\
    \  end\n  table.sort(output)\n  -- Return table in increasing order\n  return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvlbduga.lua:27:\
    \ expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmpbvlbduga.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977987
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local i = 1\n    local res = {}\n    for\
    \ v in pairs(x) do\n        if math.floor(v / 10) ~= 0 then\n            if i\
    \ % 2 == 0 then\n                table.insert(res, v)\n            end\n     \
    \   end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t3c_p1l.lua:26:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp3t3c_p1l.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977987
