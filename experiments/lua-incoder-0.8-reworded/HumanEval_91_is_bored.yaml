name: HumanEval_91_is_bored
language: lua
prompt: "-- You'll be given a string of words, and your task is to count the number\n\
  -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
  \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
  -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
  -- 1\nlocal function is_bored(S)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
  \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
  \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
  \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive. will\
  \ kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a walk'),\
  \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local boredoms = 0\n    for w in S:gmatch(\"([Ii]%d+)\") do\n \
    \       if w == \"I\" then\n            boredoms = boredoms + 1\n        end\n\
    \    end\n    return boredoms\nend", "  local bored = 0\n  for w in S:gmatch(\"\
    [%S%.!?]\") do\n    if w == \"I\" then bored = bored + 1 end\n  end\n  return\
    \ bored\nend", "  local n=0\n  local i=1,#S\n  for w in S:gmatch'[?!.]' do n=n+1\
    \ end\n  for w in S:gmatch'^I' do n=n-1 end\n  return n\nend\n</cell>\n<text>\n\
    The next function has two parameters. A dictionary of words, and a list of words\
    \ to look up. \nThe function returns a list of all the words whose boredoms occur\
    \ in the given text.\nThe words in the dictionary are in the same order as in\
    \ the dictionary, and are capitalized.", "\tlocal boredom = 0\n\tfor w in S:gmatch(\"\
    ^[!?.]*%w\") do\n\t\tboredom = boredom + 1\n\tend\n\treturn boredom\nend", " \
    \ local i\n  for i = 1,#S do\n    if S[i] == \"I\" then\n      return 1\n    end\n\
    \  end\n  return 0\nend\n</cell>\n<text>\n4.2 Test Cases\nWhen we call your function\
    \ on the provided test cases, we get output that is pretty similar to what you\
    \ expected. Since you've implemented this correctly, there is no need for you\
    \ to modify any test cases. You only need to submit the modified test cases.",
  "    local i = 0\n    for word in S:gmatch('.+?[\\.\\?!]') do i = i + 1 end\n  \
    \  return i or 0\nend", "  local I = 1\n  local count = 0\n  for w in S:gmatch(\"\
    [^.?!]+\") do\n    if w:sub(1, 1) == \"I\" then\n      count = count + 1\n   \
    \ end\n  end\n  return count\nend", "  if S then\n    S = S:lower()\n    local\
    \ boredom = false\n    for w in S:gmatch('%w+[.?!]*') do\n      if w == 'i' then\n\
    \        boredom = true\n      end\n    end\n    return boredom and 1 or 0\n \
    \ end\n  return 0\nend\n</cell>\n<text>\nRun the code cell below to test your\
    \ function.", "  local i, j = 1, #S\n  while true do\n    local c = S[i]\n   \
    \ if c == '.' then\n      i = j\n      j = i + 1\n    elseif c == '?' or c ==\
    \ '!' then\n      i = j\n      j = i + 1\n    elseif c == 'I' then\n      i =\
    \ j\n      j = i + 1\n    else\n      return 0\n    end\n  end\nend", "  local\
    \ boredoms = 0\n  \n  for w in S:gmatch(\"%w+\") do\n    if w:sub(1, 1):lower()\
    \ ~= 'i' then boredoms = boredoms + 1 end\n  end\n  \n  return boredoms\nend",
  "   -- Return the number of boredoms in S.\n   -- You are given a string, and your\
    \ task is to count the number of\n   -- boredoms in that string.\n   -- A boredom\
    \ is a sentence that starts with the word \"I\".\n   -- Sentences are delimited\
    \ by '.', '?' or '!'.\n   -- For this kata, you do not need to print the answer,\
    \ just return\n   -- the number of boredoms.\n   -- Example:\n   -- >>> is_bored('Hello\
    \ world')\n   -- 0\n   -- >>> is_bored('The sky is blue. The sun is shining. I\
    \ love this weather')\n   -- 1\n   return S.find('I'):not(S) -- count the boredoms\
    \ starting with I\nend", "  local i = 0\n  while i <= #S do\n    local s = S[i]\n\
    \    i = i + 1\n    if s == '.' then\n      if S[i] == '.' then\n        i = i\
    \ + 1\n      elseif S[i] == '?' then\n        i = i + 1\n      else\n        return\
    \ false\n      end\n    else if s == '?' then\n      if S[i] == '?' then\n   \
    \     i = i + 1\n      elseif S[i] == '!' then\n        i = i + 1\n      else\n\
    \        return false\n      end\n    else if s == '!' then\n      if S[i] ==\
    \ '!' then\n        i = i + 1\n      else\n        return false\n      end\n \
    \   else\n      return false\n    end\n  end\n  return true\nend", "   if S:match(\"\
    ^[Ii][.?!]*$\") then \n      -- YOUR CODE HERE\n   end\n   return 0\nend", " \
    \   local bored = 0\n    for word in S:gmatch(\"([a-zA-Z]\\.?[a-zA-Z]?|\\?\\!)\"\
    ) do\n        if word[1] == \"I\" then\n            bored = bored + 1\n      \
    \  end\n    end\n    return bored\nend", "   S = string.lower(S)\n   local n =\
    \ string.find(S, \"i\")\n   if n then\n      local c = string.len(S)\n      return\
    \ c + is_bored(string.sub(S, n-1))\n   else\n      return 1\n   end\nend", " \
    \ local boredoms = {\n    I = 0 \n  }\n  for w in S:gmatch(\"%w+\") do\n    if\
    \ w == 'I' then\n      boredoms.I = boredoms.I + 1\n    end\n  end\n  return boredoms.I\n\
    end", "  local boredom = false\n  for w in S:gmatch(\"[?!.]*%S+\") do boredom\
    \ = not boredom end\n  return boredom\nend", "  local bored_count = 0\n  for w\
    \ in S:gmatch('I[^.?!]*') do bored_count = bored_count + 1 end\n  return bored_count\n\
    end", "  local boredoms = 0\n  for w in S:gmatch(\"[%.?!]\") do\n    if w == \"\
    I\" then\n      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend",
  "  local boredom = {'.', '?', '!'}\n  local word_count = 0\n  for w in S:gmatch(\"\
    %w+\") do\n    word_count = word_count + 1\n    if w ~= S:sub(1, 1) and w ~= S:sub(2,\
    \ 2) and w ~= S:sub(3, 3) then\n      word_count = word_count - 1\n    end\n \
    \   if #boredom > 0 and #boredom < word_count then return end\n    for i=1,word_count\
    \ do\n      if boredom[i] == S:sub(i, i) then return end\n    end\n  end\n  return\
    \ word_count\nend", "    -- Your code goes here\n    local boredoms = S\n    local\
    \ i = 0\n    while i <  #boredoms do\n        if string.sub(boredoms[i], 1,1)\
    \ == 'I' then\n            i = i+1\n        elseif string.sub(boredoms[i], 1,1)\
    \ == '!' then\n            i = i+1\n        elseif string.sub(boredoms[i], 1,1)\
    \ == '.' then\n            i = i+1\n        elseif string.sub(boredoms[i], 1,1)\
    \ == '?' then\n            i = i+1\n        else\n            return false\n \
    \       end\n    end\n    return true\nend", "  local count = 0\n  for w in S:gmatch('([.?!])')\
    \ do\n    if w == '.' or w == '?' then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  local boredoms = 0\n  for w in S:gmatch(\"(%S+)[?.!]\"\
    ) do\n    if w == 'I' then boredoms = boredoms + 1 end\n  end\n  return boredoms\n\
    end", "    local bored = 0\n    for w in string.gmatch(S, \"([^.?!]*)\") do\n\
    \        if w == 'I' then\n            bored = 1\n        end\n    end\n    return\
    \ bored\nend", "  local n = 1\n  for w in S:gmatch(\"[%S%.]*[Ii][%S%.]*\") do\n\
    \    n = n + #w == 1 and 1 or 0\n  end\n  return n\nend", "  local boredoms =\
    \ {\n    ['.', '?'] = 0,\n    ['!']\n  }\n  local charCount = 0\n  for i = 1,\
    \ #S do\n    if S[i] == '.' then\n      if charCount > 0 then\n\tboredoms[#boredoms\
    \ + 1] = 1\n\tcharCount = 0\n      else\n\treturn 0\n      end\n    elseif S[i]\
    \ == '?' or S[i] == '!' then\n      charCount = charCount + 1\n    end\n  end\n\
    \  return boredoms[#boredoms]\nend", "  return #S>0 and S:sub(1, 1) == 'I' and\
    \ S:sub(2, 1) == '!'\nend", "  local count = 0\n  for word in S:gmatch('(%a+)')\
    \ do\n    count = count + 1 if word == 'I' and word:sub(1, 2) == 'I' end\n  end\n\
    \  return count\nend", "    local count = 0\n    for word in S:gmatch('([Ii]%S+)')\
    \ do count = count + 1 end\n    return count\nend", "    local n = #S\n    if\
    \ n <= 1 then return 0 end\n    return S ~= S:sub(1, n-1) and S:sub(1, n-2):lower():sub(1,1)\
    \ ~= 'i'\nend\n</cell>\n<cell>", "    local boredoms = {}\n    for _, word in\
    \ ipairs(S:gmatch('[%z\\?\\!]+')) do\n        if word == \"I\" then\n        \
    \    table.insert(boredoms, 1)\n        else\n            table.insert(boredoms,\
    \ 0)\n        end\n    end\n    return #boredoms == #S\nend", "    local boredoms\
    \ = {\n        [\"I\",1]\n    }\n    for i,word in ipairs(S) do\n        if word\
    \ == '.' or word == '?' or word == '!' then\n            boredoms[word,boredoms[word]+1]\n\
    \        end\n    end\n    return boredoms\nend", "    local count, i, j = 1,\
    \ 0, #S\n    while i < j do\n        count = count + #(S .. \".?!\"):match(S,\
    \ \"^I\")\n        i, j = i + 1, j + 1\n    end\n    return count\nend", "\tlocal\
    \ words = S:gmatch(\"[^'.?!]+\") -- get all the non-dot/non-question chars\n\t\
    local bored_words = {I='I'} -- dictionary with the bored words\n\tlocal bored\
    \ = 0 -- count the bored words\n\tfor w in words,1 do\n\t\t-- check if the word\
    \ is in the bored words dictionary\n\t\tif bored_words[w] then\n\t\t\tbored =\
    \ bored + 1 -- increment the count of bored words\n\t\t\t-- remove the word from\
    \ the dictionary so that it won't be counted again\n\t\t\tbored_words[w] = nil\n\
    \t\tend\n\tend\n\treturn bored -- return the number of bored words\nend", "  \
    \  local words = {}\n    for word in S:gmatch('([!?.])') do\n        table.insert(words,\
    \ word)\n    end\n    for _, word in pairs(words) do\n        if word:sub(1,1)\
    \ ~= 'I' then\n            return word\n        end\n    end\n    return 0\nend\n\
    </cell>\n<cell>", "   local count=0\n   for w in S:gmatch(\".\") do\n      if\
    \ w==\"I\" then\n         count=count+1\n      end\n   end\n   return count\n\
    end", "    if S then\n        if S == 'I' then\n            local found = false\n\
    \            for word in pairs(boredom_words) do\n                if S:find(word)\
    \ then\n                    found = true\n                    break\n        \
    \        end\n            end\n            if found then\n                return\
    \ 1\n            else\n                return 0\n            end\n        else\n\
    \            if S == '.' then\n                return 0\n            elseif S\
    \ == '?' then\n                return 0\n            elseif S == '!' then\n  \
    \              return 0\n            else\n                return is_bored(S:sub(1,3))\n\
    \            end\n        end\n    end\n    return 0\nend\n</cell>\n<cell>", " \
    \ local num_bored = 0\n  for w in S:gmatch('I%S+') do num_bored = num_bored +\
    \ 1 end\n  return num_bored\nend", "  local I, J = 1, 1\n  for w in S do\n   \
    \ if w == \"I\" then\n      I = I + 1\n      J = J + 1\n    elseif w == \"?\"\
    \ then\n      J = J + 1\n    elseif w == \"!\" then\n      J = J + 1\n      I\
    \ = I + 1\n    end\n  end\n  if I > 0 then\n    return true\n  else\n    return\
    \ J\n  end\nend", "    local s = string.lower(S)\n    for w in string.gmatch(s,\
    \ '(^[%a].*)$') do\n        if string.find(w, 'i') == 1 then\n            return\
    \ 1\n        end\n    end\n    return 0\nend", "   local bored = false\n   for\
    \ word in S:gmatch(\"[^.?!]+\") do\n      if word:sub(1, 1) == \"I\" then\n  \
    \       bored = true\n         break\n      end\n   end\n   return bored\nend",
  "   -- Initialize some variables\n   local nbored = 0\n   local i = 1\n   local\
    \ j = 1\n   local k = 0\n   \n   -- Loop over the sentence\n   while i <= #S do\n\
    \      -- Look at each word in the sentence\n      while j <= #S[i] do\n     \
    \    if S[i][j] == \"I\" then\n            nbored = nbored + 1\n            i\
    \ = i + 1\n            j = j + 1\n         else\n            j = j + 1\n     \
    \    end\n      end\n      -- Skip over punctuation\n      while j <= #S[i] do\n\
    \         if S[i][j] == \"-\" or S[i][j] == \".\" or S[i][j] == \"?\" or S[i][j]\
    \ == \"!\" then\n            i = i + 1\n            j = j + 1\n         else\n\
    \            j = j + 1\n         end\n      end\n      i = i + 1\n   end\n   \n\
    \   -- Return true if the number of boredoms is non-zero\n   return nbored ~=\
    \ 0\nend", "  if S == nil then return 0 end\n  local words = S:gmatch('[^.!?]+')\n\
    \  if words == nil then return 0 end\n  local count = 0\n  for i = 1, #words do\n\
    \    if words[i] == 'I' then count = count + 1 end\n  end\n  return count\nend",
  "   local bored_count = 0\n   for w in string.gmatch(S, \"[^.!?]*\") do\n      if\
    \ w == 'I' then \n         bored_count = bored_count + 1\n      end\n   end\n\
    \   return bored_count\nend", "  -- Your code here!\n  -- Don't forget to handle\
    \ cases when S is an empty string!\n  local boredoms=0\n  if S == '' then return\
    \ boredoms end\n  local i,j,k=-1,1,1\n  while true do\n    i = string.find(S,'[\\\
    .?!][^\\.?!]+',k)\n    if i == nil then\n      break\n    end\n    j = string.find(S,'[\\\
    .?!]+',i)\n    if j == nil then\n      break\n    end\n    k = string.find(S,'[\\\
    .?!]+',j+1)\n    boredoms = boredoms + 1\n  end\n  return boredoms\nend", "  \
    \  if S == nil then return nil end\n    local i, j = 1, #S\n    while i < j do\n\
    \        local c = S[i]\n        local lower = (string.lower(c))\n        if lower\
    \ == \"i\" then\n            i = i + 3\n        elseif lower == \"a\" then\n \
    \           i = i + 1\n        elseif lower == \"e\" then\n            i = i +\
    \ 1\n        elseif lower == \"o\" then\n            i = i + 1\n        elseif\
    \ lower == \"!\" then\n            j = j - 1\n        elseif lower == \".\" then\n\
    \            j = j - 1\n        elseif lower == \"?\" then\n            i = i\
    \ + 1\n        else\n            i = i + 1\n        end\n    end\n    return j\n\
    end\nprint(is_bored(\"Hello world\"))\nprint(is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\"))\nprint(is_bored(\"I'm an idiot\"))\nprint(is_bored(\"\
    I'm an idiot?\"))\nprint(is_bored(\"I'm an idiot.\"))\nprint(is_bored(\"I'm an\
    \ idiot.?\"))\nprint(is_bored(\"I'm an idiot.!\"))\nprint(is_bored(\"I'm an idiot.!\
    \ I love this weather\"))\nprint(is_bored(\"I'm an idiot.! I love this weather.\"\
    ))\nprint(is_bored(\"I'm an idiot.! I love this weather.?\"))\nprint(is_bored(\"\
    I'm an idiot.! I love this weather.!\"))\nprint(is_bored(\"I'm an idiot.! I love\
    \ this weather.! I love this weather.\"))\nprint(is_bored(\"I'm an idiot.! I love\
    \ this weather.! I love this weather.?\"))\nprint(is_bored(\"I'm an idiot.! I\
    \ love this weather.! I love this weather.!\"))\nprint(is_bored(\"I'm an idiot.!\
    \ I love this weather.! I love this weather.!?\"))\nprint(is_bored(\"I'm an idiot.!\
    \ I love this weather.! I love this weather.!.\"))\nprint(is_bored(\"I'm an idiot.!\
    \ I love this weather.! I love this weather.!.?\"))\nprint(is_bored(\"I'm an idiot.!\
    \ I love this weather.! I love this weather.!.!\"))\nprint(is_bored(\"I'm an idio",
  "  local boredoms = {'I'}\n  local num_boredoms = #boredoms\n  -- remove '.', '?'\
    \ and '!' from the string\n  for i = 1, #S do\n    if S[i] == '.' then S = S:sub(1,\
    \ i-1) end\n    if S[i] == '?' then S = S:sub(1, i-1) end\n    if S[i] == '!'\
    \ then S = S:sub(1, i-1) end\n  end\n  -- count the number of 'I's in the string\n\
    \  for i = 1, #S do\n    if S[i] == 'I' then\n      num_boredoms = num_boredoms\
    \ + 1\n    end\n  end\n  return num_boredoms\nend", "\tS = string.lower(S)\n\t\
    local counts = {}\n\tfor w in S:gmatch(\"[^.!?]+\") do\n\t\tif not counts[w] then\
    \ counts[w] = 0 end\n\t\tcounts[w] = counts[w] + 1\n\tend\n\treturn counts['i']\
    \ >= 2\nend", "    local boredoms = {}\n    for w in string.gmatch(S, '(^[?.!]+|[!?.!]+$)')\
    \ do\n        table.insert(boredoms, w)\n    end\n    if #boredoms == 0 then\n\
    \        return true\n    else\n        return #boredoms == 1\n    end\nend",
  "   local boredom_num = 0\n   for w in S:gmatch('[^.!?]+') do boredom_num = boredom_num\
    \ + 1 end\n   return boredom_num\nend", "   for w in S:gmatch(\"[I%!]\") do\n\
    \      return 1\n   end\n   return 0\nend", "  local boredom_counter = tonumber(S)\n\
    \  if boredom_counter > 0 then\n    local boredom_count = 0\n    local last_index\
    \ = 1\n    while boredom_counter > 0 and last_index <= #S do\n      boredom_count\
    \ = boredom_count + 1\n      if S[last_index] == '.' or S[last_index] == '?' or\
    \ S[last_index] == '!' then\n        boredom_counter = boredom_counter - 1\n \
    \     elseif S[last_index] == 'I' then\n        boredom_counter = boredom_counter\
    \ + 1\n      end\n      last_index = last_index + 1\n    end\n    return boredom_count\n\
    \  end\n  return 0\nend", "    local boredoms = 0\n    for w in S:gmatch'[^?!.]+'\
    \ do\n        if w == 'I' then\n            boredoms = boredoms + 1\n        end\n\
    \    end\n    return boredoms\nend", "   S = S:gsub('.+?[!?.]+','')\n   S = S:gsub('[.!?]','')\n\
    \   if S:sub(1,1) ~= 'I' then return 0 end\n   if S:sub(1,2) == 'Boredom' then\
    \ return 1 end\n   for w,i in pairs(boredom) do\n      if S:sub(1,w) == 'Boredom'\
    \ then return 1 end\n   end\n   return 0\nend", "    local words = S:gsub('([.?!])+',\
    \ \" \")\n    local count = 0\n    for w in words:gmatch'([^ ]+)'do count = count\
    \ + 1 end\n    return count > 0 and count % 2\nend", "\tlocal boredom = {}\n\t\
    for w in S:gmatch('([?!.])') do table.insert(boredom, w) end\n\tlocal boredom_counter\
    \ = #boredom\n\treturn boredom_counter\nend", "\tlocal boredoms = 0\n\tlocal pos\
    \ = 0\n\twhile pos <= #S do\n\t\tif S[pos] == '.' or S[pos] == '?' or S[pos] ==\
    \ '!' then\n\t\t\tpos = pos + 1\n\t\telse\n\t\t\tboredoms = boredoms + 1\n\t\t\
    end\n\tend\n\treturn boredoms\nend", "   local bored = 0\n   for w in S:gmatch('[^.!?]*[Ee][Aa][Rr]\\\
    .?[^.!?]*') do\n      if w:sub(1,1) == \"I\" then\n         bored = bored + 1\n\
    \      end\n   end\n   return bored\nend\n</cell>\n<cell>", "    local boredom\
    \ = {\"I\"}\n    return #S:gmatch(\"[%S]*[%S]+[%S]+\"):match(S,boredom)>0\nend",
  "  local I = 0\n  for w in S:gmatch'%(%b\\.|%b\\?%|%b\\!)' do\n    I = I + 1\n \
    \ end\n  return I\nend", "   if S == nil then return nil end\n   S = S:lower()\n\
    \   if S:match(\"^i\\.?.*\\.?$\") then\n      return 1\n   else\n      return\
    \ 0\n   end\nend", "  local counts = {}\n  for w in S:gmatch(\"(I[%.!]*)\") do\
    \ counts[w] = counts[w] + 1 end\n  return counts[\"I\"] > 0\nend", '   S = S:lower()',
  "   -- the first character of the string is \"I\"\n   if S == \"I\" then return\
    \ 0 end", "\tassert(S ~= nil)\n\tlocal count = 0\n\tfor word in S:gmatch(\"[^.!?]+\"\
    ) do\n\t\tif word:lower():find(\"i\") then\n\t\t\tcount = count + 1\n\t\tend\n\
    \tend\n\treturn count\nend", "   local boredoms = 0\n   for w in S:gmatch('([%A]-?[%w]+[.]-?[%w]+|[%A][.?!])')\
    \ do\n      if w:sub(1,1) ~= 'I' then boredoms = boredoms + 1 end\n   end\n  \
    \ return boredoms\nend", "  local count = 0\n  for w in S:gmatch(\"^[I%!.]+\"\
    ) do\n    count = count + 1\n  end\n  return count\nend", "  S = S:lower() --\
    \ Convert to lower case to ignore case.\n  local counts = {'i','a','n','u','e','o','e','a','y','e'}\n\
    \  local count = 0\n  for w in S:gmatch(\"[%a\\.\\?!][ ]*[%a\\.\\?!]*\") do\n\
    \    if w in counts then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local boredoms = {}\n  for w in string.gmatch(S, '[^.!?]+') do\n    if\
    \ w == 'I' then\n      boredoms[#boredoms + 1] = 0\n    else\n      boredoms[#boredoms\
    \ + 1] = 1\n    end\n  end\n  return #boredoms == 0\nend", "  local boredom =\
    \ 1\n  local words = S\n  local delimiters = {'.', '?', '!'}\n  for _, word in\
    \ ipairs(words) do\n    boredom = boredom and delimiters:find(word, 1, true) ~=\
    \ nil\n  end\n  return boredom\nend", "  local N, N1, N2, N3, N4 = 0, 0, 0, 0,\
    \ 0\n  local I = string.find(S, \"[?.!]\", 1, true)\n  if I then\n    N1 = string.len(S)\
    \ - I\n    S = string.sub(S, I + 1)\n  end\n  I = string.find(S, \"[?.!]\")\n\
    \  if I then\n    N2 = string.len(S) - I\n    S = string.sub(S, I + 1)\n  end\n\
    \  I = string.find(S, \"[.]\")\n  if I then\n    N3 = string.len(S) - I\n    S\
    \ = string.sub(S, I + 1)\n  end\n  I = string.find(S, \"[.?!]\", 1, true)\n  if\
    \ I then\n    N4 = string.len(S) - I\n  end\n  return N + N1 + N2 + N3 + N4\n\
    end", "   local counter = 0\n   for word in S:gmatch('(^| )I( |$)') do\n     \
    \ counter = counter + 1\n   end\n   return counter\nend\n</cell>\n<text>\nExercise\
    \ 3", "    local words = string.gmatch(S, \"([.?!])(.*)\")\n    local boredoms\
    \ = 0\n    for i = 1, #words do\n        if string.sub(S, 1, 1) == words[i] then\n\
    \            boredoms = boredoms + 1\n        end\n    end\n    return boredoms\n\
    end", "  local boredoms = 0\n  S = S:lower()\n  for w in S:gmatch('[^\\.!?]+')\
    \ do\n    if w == 'i' then boredoms = boredoms + 1 end\n  end\n  return boredoms\n\
    end", "  local boredoms = { 'I', 'I', 'I', '!', '!', '!', '?', '.', '?', '!' }\n\
    \  local n = 0\n  for w in S:gmatch('[^.?!]+') do n = n + 1 end\n  return n ==\
    \ #boredoms\nend", "  return (S:find('I'):byte() + 1):byte() / 2\nend", "  --\
    \ Your code here\nend", "    -- Your code here\n    local boredoms = 0\n    for\
    \ w in S:gmatch\"([.!?])+\" do\n        if w:sub(1,1) == 'I' then\n          \
    \  boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend", " \
    \  local b = 0\n   for w in S:gmatch'(%w+[.!?])' do\n      if w[1] == 'I' then\
    \ b = b + 1 end\n   end\n   return b\nend", "    local N = 0\n    for i, v in\
    \ ipairs(S) do\n        local c = '#'\n        if v ~= 'I' and v ~= 'a' and v\
    \ ~= 'i' then\n            c = v\n        end\n        if v ~= 'I' then\n    \
    \        N = N + 1\n        end\n        if c ~= 'I' then\n            N = N +\
    \ 1\n        end\n    end\n    return N\nend", "   local n = 1\n   for w in S:gmatch(\"\
    [%w\\.\\?\\!]+\") do\n      if w == \"I\" then\n         n = n + 1\n      end\n\
    \   end\n   return n\nend", "  return string.sub(S, 1, string.find(S, \"I\", 1,\
    \ true))\nend", "   -- Return the number of boredoms in S.\n   -- A boredom is\
    \ a sentence that starts with the word \"I\"\n   -- (case sensitive). Sentences\
    \ are delimited by '.', '?' or '!'.\n   -- Note that counting boredoms would not\
    \ be a good way to predict\n   -- sentiment since it's subjective.\n   \n   --\
    \ The code below uses a list comprehension to check each sentence in S for\n \
    \  -- the word \"I\".  If a \"I\" exists in a sentence, then increment the counter\n\
    \   -- and append the sentence to boredoms_found.\n   \n   local boredoms_found\
    \ = {}\n   for word in string.gmatch(S, \"[.!?]\") do\n      if word == 'I' then\n\
    \         table.insert(boredoms_found, S)\n      end\n   end\n   \n   return #boredoms_found\n\
    end", "   S = S:gsub('[.!?]','')\n   return (S == 'I' or S == 'i') and 1 or 0\n\
    end", "    local boredoms = 0\n    for w in S:gmatch(\"(.*[!?.]$)\") do\n    \
    \    if w[1] == 'I' then boredoms = boredoms + 1 end\n    end\n    return boredoms\n\
    end", "    local boredom = 1\n    for w in S:gmatch('%w+') do\n        boredom\
    \ = boredom * 2\n        if w == 'I' then\n            boredom = boredom - 2\n\
    \        end\n    end\n    return boredom\nend", "  return #S == 1 and S[1] ==\
    \ \"I\" and not (S:sub(1,1) == \"a\" and S:sub(2,2) == \"e\")\nend", "    local\
    \ I = {}\n    for w in S:gmatch(\"[^?.!]+\") do\n        if I[w] then\n      \
    \      I[w] = I[w] + 1\n        else\n            I[w] = 1\n        end\n    end\n\
    \    return #I > 0\nend", "    local I = string.find(S, \"[^\\.\\?!]I\", 1, true)\n\
    \    if I then return 1 end\n    local P = string.find(S, \"[^\\.\\?!]P\", 1,\
    \ true)\n    if P then return 1 end\n    local Hp = string.find(S, \"[^\\.\\?!]Hp\"\
    , 1, true)\n    if Hp then return 1 end\n    local He = string.find(S, \"[^\\\
    .\\?!]He\", 1, true)\n    if He then return 1 end\n    local Ha = string.find(S,\
    \ \"[^\\.\\?!]Ha\", 1, true)\n    if Ha then return 1 end\n    local Hi = string.find(S,\
    \ \"[^\\.\\?!]Hi\", 1, true)\n    if Hi then return 1 end\n    local Hs = string.find(S,\
    \ \"[^\\.\\?!]Hs\", 1, true)\n    if Hs then return 1 end\n    local H = string.find(S,\
    \ \"[^\\.\\?!]H\", 1, true)\n    if H then return 1 end\n    local I = string.find(S,\
    \ \"[^\\.\\?!]I\", 1, true)\n    return I\nend", "  -- Your code here\nend", " \
    \ -- Your code here (additional tests may be added)\n  -- You may assume the input\
    \ string contains only lower case letters.\n  -- The string may contain spaces\
    \ (), digits (0-9), and any character in\n  -- '.?!'\n  -- You may assume that\
    \ the string contains a maximum of one '.'\n  -- You may assume the string contains\
    \ a maximum of one '!' or '?'\n  -- You may assume the string contains no leading\
    \ or trailing spaces", "    local s = string.gsub(S, ' .?!', '')\n    if s ==\
    \ '' then return 0 end\n    -- The second condition is just in case there is no\
    \ dot in the line.\n    return #s == '' or s == 'I' or s[1] == 'I' or s[1] ==\
    \ 'a'\nend", "    local bored = false\n    for w in S:gmatch(\"[^.!?]+\") do\n\
    \        if w == 'I' then\n            bored = true\n            break\n     \
    \   end\n    end\n    return bored\nend", "\tS = S:lower()\n\treturn S ~= S and\
    \ S == '.' or S == '?' or S == '!'\nend", "  -- Your code here!\n  assert(type(S)\
    \ == 'string', 'The first argument should be a string')\n  assert(S:match('^(I%S+)%.?(I%S+)%.?(I%S+)%.?(I%S+)%.?(I%S+)%.?$'),\
    \ 'Invalid input')\n  local count = 1\n  for w in S:gmatch('I%S+') do count =\
    \ count + 1 end\n  return count\nend", "  local num_boredoms = 0\n  for _, word\
    \ in gmatch (S, \"([^.!?]+)(%.[^.!?]*)\") do\n    if word == \"I\" then\n    \
    \  num_boredoms = num_boredoms + 1\n    end\n  end\n  return num_boredoms\nend",
  "   --TODO\nend\n</cell>\n<cell>", "  local num_bored = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      num_bored = num_bored + 1\n    end\n\
    \  end\n  return num_bored\nend", "    local boredoms = {'I', 'am', 'are', 'you',\
    \ 'were', 'was', 'were', 'be', 'being'}\n    local nbored = 0\n    local lastWasBored\
    \ = false\n    for i = 1, #S do\n        local word = S[i]\n        if lastWasBored\
    \ then\n            if word == '.' or word == '!' then\n                nbored\
    \ = nbored + 1\n            elseif word == '?' then\n                lastWasBored\
    \ = false\n            else\n                lastWasBored = true\n           \
    \     nbored = nbored + 1\n            end\n        elseif word:sub(1,1) == 'I'\
    \ then\n            nbored = nbored + 1\n        end\n    end\n    return nbored\n\
    end", "  -- The 'bored' words are those that start with a capital letter.\n  --\
    \ You could extend this list by yourself.\n  local BORED = {\n    ['A'] = 'are',\n\
    \    ['E'] = 'is',\n    ['I'] = 'am',\n    ['O'] = 'are',\n    ['U'] = 'you',\n\
    \    ['Y'] = 'is',\n    ['a'] = 'be',\n    ['e'] = 'be',\n    ['i'] = 'be',\n\
    \    ['o'] = 'be',\n    ['u'] = 'be',\n    ['y'] = 'be',\n    ['h'] = 'be',\n\
    \    ['c'] = 'be',\n    ['r'] = 'be',\n    ['y'] = 'be',\n    ['s'] = 'be',\n\
    \    ['d'] = 'be',\n    ['g'] = 'be',\n    ['l'] = 'be',\n    ['i'] = 'be',\n\
    \    ['o'] = 'be',\n    ['u'] = 'be',\n    ['y'] = 'be',\n    ['w'] = 'be',\n\
    \    ['!'] = 'be',\n    ['.'] = 'be',\n    ['?'] = 'be',\n    ['*'] = 'be'\n \
    \ }", "    local i, j = 1, #S\n    local p = 0\n    while i < j do\n        if\
    \ S[i] == 'I' then\n            p = p + 1\n        end\n        i = i + 1\n  \
    \  end\n    return p\nend\n</cell>\n<cell>", "  if S == \"I\" then\n    return\
    \ 1\n  end\n  local n = 0\n  for w in S:gmatch(\".\") do\n    if w == \"I\" then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend", "    local bored = 0\n   \
    \ for word in S:gmatch(\"[\\.\\?\\!](.+)\") do\n        if word == \"I\" then\n\
    \            bored = bored + 1\n        end\n    end\n    return bored\nend",
  "    local n = 0\n    for w in S:gmatch(\"[%S]\") do\n        if w == 'I' then\n\
    \            n = n + 1\n        end\n    end\n    return n\nend", "\tlocal boredom\
    \ = false\n\tfor w in S:gmatch(\"[^.!?]*[I%]+[^.!?]*\") do\n\t\tboredom = true\n\
    \tend\n\treturn boredom\nend", "   local words = { 'I', 'A', 'the', 'to', 'of',\
    \ 'a', 'and', 'for', 'an' }\n   if string.find(S, '^%s+I', 1) then\n      -- If\
    \ first letter is \"I\"\n      return 1\n   else\n      -- If first letter is\
    \ any word\n      for _, word in ipairs(words) do\n         if string.find(S,\
    \ word, 1, true) then\n            -- If sentence starts with word\n         \
    \   return 1\n         end\n      end\n      return 0\n   end\nend", "   local\
    \ boredoms = 0\n   for w in S:gmatch(\"%w+\") do\n      if w:sub(1, 1) == 'I'\
    \ then\n         boredoms = boredoms + 1\n      end\n   end\n   return boredoms\n\
    end", "  return #S == 1 or (S:sub(1,1) == \"I\" and S:sub(2,2) == \"l\")\nend",
  "  local words = S:gsub(\"[^A-Za-z]+\", '')\n  local count = 0\n  for w in words\
    \ do\n    if w:sub(1, 1) == 'I' then count = count + 1 end\n  end\n  return count\n\
    end", "  if S:sub(1,1) == 'I'  then return 0 end\n  if S:sub(1,1) == '!' then\
    \ return 0 end\n  if S:sub(1,1) == '?' then return 0 end\n  if S:sub(1,1) == '.'\
    \ then return 0 end\n  return 1\nend", "\tlocal boredom = false\n\tlocal S = S:lower()\n\
    \tfor w in string.gmatch(S, \"([?!.])\") do\n\t\tif w == \"i\" then\n\t\t\tboredom\
    \ = true\n\t\telse\n\t\t\tboredom = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn\
    \ boredom\nend", "  local i, n = 1, #S\n  for i = 1, n do\n    if S[i] == 'I'\
    \ then return i else return nil end\n  end\nend", "  S = S:lower()\n  if S:find('^i%')\
    \ == 1 then\n    return 1\n  end\n  return 0\nend", "   -- write your code in\
    \ JavaScript (but don't forget to return a number)\nend", "  -- Your code here\n\
    \  local count, start = 0\n  for _, v in ipairs(S) do\n    if v:sub(1, 1) == 'I'\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "  local\
    \ boredom = 0\n  for w in S:gmatch'[%S]+[!?]'\n    boredom = boredom * 10 + #w\n\
    \  end\n  return boredom\nend", "  local boredom_count = 0\n  for s in S:gmatch'([^.?!]+)(%.+)?'\
    \ do\n    if s == 'I' then\n      boredom_count = boredom_count + 1\n    end\n\
    \  end\n  return boredom_count\nend\nis_bored()\n</cell>\n<text>\nThe for loop\
    \ iterates through every string in the list S:gmatch'([^.?!]+)(%.+)?' and tests\
    \ if each string starts with the letter 'I'. If so, the boredom_count is increased\
    \ by one.", "  return (S == \"I\") or (S == \"you\") or (S == \"I\") or (S ==\
    \ \"i\")\nend", "    local bored = 0\n    for w in S:gmatch('(I[^.!?])') do\n\
    \        bored = bored + 1\n    end\n    return bored\nend", "  -- Your code here\n\
    \  local n=0\n  for word in string.gmatch(S, \"[%a\\.!?]\") do n=n+1 end\n  return\
    \ n\nend", "    local count = 0\n    for _, word in string.gmatch(S, \"[%w. ?.!]+\"\
    ) do\n        if word == 'I' then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  local I = string.find(S, \"I\", 1, true);\
    \ -- find the index of the first \"I\"\n  return I and 1 or 0 -- return 1 if the\
    \ first \"I\" is found\nend", "  local I,C\n  S,I = string.gsub(S,\".\",\"\\.\"\
    )\n  S,I = string.gsub(S,\".\",\"\\?\")\n  S,I = string.gsub(S,\".\",\"\\!\")\n\
    \  S,I = string.gsub(S,\".\",\"\\?\")\n  S,I = string.gsub(S,\".\",\"\\!\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\!\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\!\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\?\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\?\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\?\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\?\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")",
  "  local count = 0\n  \n  for w in S:gmatch'[%S]+' do\n    if w == 'I' then\n  \
    \    count = count + 1\n    end\n  end\n  \n  return count\nend", "  local bored\
    \ = 0\n  for w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      bored\
    \ = bored + 1\n    end\n  end\n  return bored\nend", "   local bored = 0\n   for\
    \ word in S:gmatch('.+?[.!?]') do\n      if word:sub(1, 1) == 'I' then\n     \
    \    bored = bored + 1\n      end\n   end\n   return bored\nend", "\tlocal bored\
    \ = nil\n\t\n\t-- Check for multiple periods.\n\tif #S > 0 and #S < 10 and S:sub(1,3)\
    \ == '..' and S:sub(-1) == '!' then\n\t\tbored = 1\n\telse\n\t\tfor i,word in\
    \ ipairs(S) do\n\t\t\tlocal index = word:find('[?!]')\n\t\t\t\n\t\t\tif index\
    \ and word:sub(1,index - 1) == 'I' then\n\t\t\t\tbored = bored or 1\n\t\t\tend\n\
    \t\tend\n\tend\n\t\n\treturn bored\nend", "    local count = 0\n    for s in S:gmatch(\"\
    (%b[.!?]*)\") do count = count + 1 end\n    return count\nend", "    return #S>0\
    \ and string.sub(S, 1, 1)==\"I\"\nend", "    S = string.lower(S)\n    local I\
    \ = 0\n    for i, w in ipairs(string.gmatch(S, \"(%w+)%.(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?",
  "    local boredoms = { 'I' } -- Boredoms that we know how to count.\n    local\
    \ N = #S -- The number of characters in the sentence.\n    for i = 1, N do\n \
    \       if S[i] == '.' then\n            boredoms[#boredoms+1] = '.'\n       \
    \ end\n        if S[i] == '?' then\n            boredoms[#boredoms+1] = '?'\n\
    \        end\n        if S[i] == '!' then\n            boredoms[#boredoms+1] =\
    \ '!'\n        end\n    end\n    return #boredoms == 1\nend", "  local boredom\
    \ = 0\n  local word_index = 1 -- First character in S\n  while true do\n    if\
    \ S[word_index] == 'I' then boredom = boredom + 1 end\n    if S[word_index] ==\
    \ '.' then break end\n    if S[word_index] == '?' then break end\n    if S[word_index]\
    \ == '!' then break end\n    word_index = word_index + 1\n  end\n  return boredom\n\
    end", "    local b = 0\n    for i = 1, #S do\n        if S[i] == 'I' then\n  \
    \          if i == 1 then\n                b = b + 1\n            end\n      \
    \  elseif S[i] == '.' or S[i] == '?' or S[i] == '!' then\n            if i > 1\
    \ then\n                b = b + 1\n            end\n        end\n    end\n   \
    \ return b\nend", "  local boredom = true\n  local i, L = #S, 1\n  while i < L\
    \ do\n    if S[i] == 'I' then\n      boredom = false\n    end\n    i = i + 1\n\
    \  end\n  return boredom\nend", "    local bored = 0\n    for w in S:gmatch('([^.!?]+)'..DOT+DOTDOT+DOT)\
    \ do\n        if w == 'I' then\n            bored = bored + 1\n        end\n \
    \   end\n    return bored\nend", "  return #S==0 and S==\"I\" or #S:match(S..\"\
    [\\.\\?\\!]\\?%.\") ~= nil\nend", "   local count = 0\n   for w in S:gmatch(\"\
    [I!.]+\") do\n      if w:sub(1, 1) == \"I\" then\n         count = count + 1\n\
    \      end\n   end\n   return count\nend", "    local boreds = 0\n    for i, c\
    \ in string.gmatch(S, \"^(%S+) (.)*(.?)*(!?.*)?$\") do\n        if c == \"I\"\
    \ then\n            boreds = boreds + 1\n        end\n    end\n    return boreds\n\
    end", "  local N = 0\n  for w in S:gmatch(\"%w+\") do\n    if w == 'I' then\n\
    \      N = N + 1\n    end\n  end\n  return N\nend", "  return #S == 0 or\n   \
    \      S == \"I\" or\n         S == \"a\" or\n         S == \"e\" or\n       \
    \  S == \"i\" or\n         S == \"o\" or\n         S == \"u\"\nend", "    local\
    \ i = 1\n    while i < #S do\n        local c = S[i]\n        if c == '.' and\
    \ S[i + 1] == '.' then\n            i = i + 2\n        elseif c == '.' and S[i\
    \ + 1] == '?' then\n            i = i + 2\n        elseif c == '?' and S[i + 1]\
    \ == '?' then\n            i = i + 2\n        elseif c == '!' and S[i + 1] ==\
    \ '!' then\n            i = i + 2\n        elseif c == '!' and S[i + 1] == '.'\
    \ then\n            i = i + 2\n        else\n            i = i + 1\n        end\n\
    \    end\n    return i > 1 and true or false\nend", "\tlocal count, i, L = 1,\
    \ 1\n\tfor i = 1, #S do\n\t\tcount = count + 1\n\t\tif S[i] == \".\" then\n\t\t\
    \tL = L + 1\n\t\telseif S[i] == \"?\" then\n\t\t\tL = L + 2\n\t\telseif S[i] ==\
    \ \"!\" then\n\t\t\tL = L + 3\n\t\tend\n\tend\n\treturn count/L\nend", "  -- Your\
    \ code here\n  return ...\nend", "   local count = 0\n   for w in S:gmatch('.+?[!?.]+')\
    \ do\n      if w:sub(1, 1) == 'I' then\n         count = count + 1\n      end\n\
    \   end\n   return count\nend", "  local count=0\n  for word in S:gmatch'[?!.]+'\
    \ do\n    if word=='I' then\n      count=count+1\n    end\n  end\n  return count\n\
    end", "    -- Your code here\nend", "    return string.find(S, \"I\", 1, true)\
    \ > -1\nend", "  local I = 0\n  for w in S:gmatch(\"[I].*\") do I = I + 1 end\n\
    \  return I == 1\nend", "    local boredoms = 0\n    local i = 1\n    local word\
    \ = ''", '  S = string.lower(S)', "  local boredoms = {'I'}\n  for w in S:gmatch('[.?!]')\
    \ do\n    table.insert(boredoms, w)\n  end\n  return #boredoms > 0\nend", "  local\
    \ boredom = {}\n  for w in S:gmatch(\"[^.?!]+\") do\n    boredom[w] = boredom[w]\
    \ or 0\n  end", "  local num_bored = 0\n  for w in S:gmatch(\"[^.?!]+\") do\n\
    \    if w == 'I' then num_bored = num_bored + 1 end\n  end\n  return num_bored\n\
    end", "  local is_bored = tonumber(string.find(S, 'I', 1,\n                  \
    \                        true))\n  if is_bored == nil then is_bored = tonumber(string.find(S,\
    \ '.', 1,\n                                          true)) end\n  if is_bored\
    \ == nil then is_bored = tonumber(string.find(S, '!', 1,\n                   \
    \                       true)) end\n  if is_bored == nil then is_bored = tonumber(string.find(S,\
    \ '?', 1, true)) end\n  if is_bored == nil then is_bored = 0 end\n  return is_bored\n\
    end", "  return (not S or S == '.' or S == '?' or S == '!')\nend", "    local\
    \ boredoms = 0\n    for w in S:gmatch(\"[Ii]%w+\") do\n        if w:lower() ==\
    \ \"i\" then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend", "    local words = {}\n    for word in S:gmatch'[%S]+' do\n\
    \        table.insert(words, word)\n    end\n    return #words > 0 and #words\
    \ == 1 and\n           words[1] == 'I' and\n           (#S == 0 or S[#S] ~= '.'\
    \ or S[#S] ~= '?' or S[#S] ~= '!')\nend", "    -- Your code here\n    return true\n\
    end", "  -- Your code here\n  local I = S:sub(1,1)\n  for i = 1, #S do if S[i]\
    \ == \"I\" then return 1 end end\n  return 0\nend", "   if #S <= 0 then return\
    \ 0 end\n   if string.find(S, \"^I\") then return 1 end\n   if string.find(S,\
    \ \"^!\") then return 1 end\n   if string.find(S, \"\\.\") then return 1 end\n\
    \   if string.find(S, \"\\?\") then return 1 end\n   if string.find(S, \"!\\.\"\
    ) then return 1 end\n   return 0\nend", "  local boredoms = 0\n  local boredom_count\
    \ = 1\n  for word in S:gmatch(\"^[%w\\.?!]+\") do\n    if word == \"I\" then\n\
    \      boredom_count = boredom_count + 1\n    end\n  end\n  if boredom_count ==\
    \ 1 then\n    boredoms = 1\n  end\n  return boredoms\nend", "\t-- Your code here\n\
    end", "  local n = 0\n  for w in S:gmatch(\".\") do\n    if w == \"I\" then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend", "   local boredoms = 0\n \
    \  for w in S:gmatch(\"^[Ii!].*$\") do boredoms = boredoms + 1 end\n   return\
    \ boredoms\nend", "  local N, N = 0, 0\n  for _ in S:gmatch(\".\") do\n    if\
    \ _ == \"I\" then\n      N = N + 1\n    end\n  end\n  return N\nend", "\tlocal\
    \ boredom = {}\n\tlocal last_is_bored = true\n\tfor w in S:gmatch(\"([I].*)\"\
    ) do\n\t\tlast_is_bored = last_is_bored and (w == \"I\")\n\t\tboredom[#boredom+1]\
    \ = w\n\tend\n\treturn #boredom > 0\nend", "    local bored_count = 0\n    for\
    \ w in S:gmatch('%S+') do\n        if w:sub(1,1) == 'I' then\n            bored_count\
    \ = bored_count + 1\n        end\n    end\n    return bored_count\nend", "  --\
    \ Add your code here\n  local N = 0\n  for w in S:gmatch(\"[I%S]+\") do N = N\
    \ + 1 end\n  return N\nend", "\tlocal I = 1\n\tlocal Imax = #S -- find the index\
    \ of the first space character\n\twhile I <= Imax do\n\t\tif S[I] == '.' or S[I]\
    \ == '?' or S[I] == '!' then\n\t\t\tbreak\n\t\telse\n\t\t\tI = I + 1\n\t\tend\n\
    \tend", "  local count = 0\n  for _, word in (S:gmatch('([^.?!]*)[.?!]*') do\n\
    \    count = count + 1\n  end)\n  return count\nend", "    local boredoms = {}\n\
    \    for w in S:gmatch(\".+?[?!.]+\") do\n        if w:match(\"^I\") then\n  \
    \          boredoms[#boredoms + 1] = w\n        end\n    end\n    return #boredoms\n\
    end", "    local boredoms = 0\n    for w in S:gmatch(\"[I%a]+\") do\n        boredoms\
    \ = boredoms + 1\n    end\n    return boredoms\nend", "  local boredoms = 0\n\
    \  for w in S:gmatch'(%b[I].*[\\.\\?!])' do boredoms = boredoms + 1 end\n  return\
    \ boredoms\nend", "  local N=0\n  for w in S:gmatch\"[^.!?]+\" do\n    N = N +\
    \ 1 -- \"I\" is a boredom if there's at least one boredom\n    if w == \"I\" then\
    \ break end\n  end\n  return N\nend", "  local n = 0\n  while S do\n    S = S:match('^(I.+)[.?!]+$')\n\
    \    n = n + 1\n  end\n  return n\nend", "  local boredoms = {'I'}\n  local boredom_count\
    \ = 0\n  for w in S:gmatch('.+[.!?]+') do\n    if boredoms[w] then\n      boredom_count\
    \ = boredom_count + 1\n    end\n    boredoms[w] = true\n  end\n  return boredom_count\n\
    end", "    local function count(s, w)\n        local count = 1 -- This counts\
    \ the number of times w appears in s\n        for i,v in ipairs(split(s, '[\\\
    .\\?!]')):do\n            if string.find(v, w) then\n                count = count\
    \ + 1\n            end\n        end\n        return count\n    end\n    \n   \
    \ local num_boredom = count(S, 'I')\n    return num_boredom\nend", "  local I\
    \ = 1\n  local B = 0\n  for w in S:gmatch(\"[%.!?]+\") do\n    if w == 'I' then\n\
    \      I = I + 1\n    else\n      B = B + I\n      I = 1\n    end\n  end\n  return\
    \ B\nend", "   if S ~= nil then\n      if S:match('I') then return 1 end\n   \
    \   if S:match('How') then return 1 end\n      if S:match('Its') then return 1\
    \ end\n      if S:match('That') then return 1 end\n      if S:match('He') then\
    \ return 1 end\n      if S:match('She') then return 1 end\n      if S:match('It')\
    \ then return 1 end\n      if S:match('They') then return 1 end\n      if S:match('You')\
    \ then return 1 end\n      if S:match('You\\'re') then return 1 end\n      if\
    \ S:match('You\\'ve') then return 1 end\n      if S:match('Its') then return 1\
    \ end\n      if S:match('Its') then return 1 end\n      if S:match('There') then\
    \ return 1 end\n      if S:match('That\\'') then return 1 end\n      if S:match('That')\
    \ then return 1 end\n      if S:match('That\\'s it') then return 1 end\n     \
    \ if S:match('That\\'s all') then return 1 end\n      if S:match('That\\'s for')\
    \ then return 1 end\n      if S:match('That\\'s not') then return 1 end\n    \
    \  if S:match('That\\'s fine') then return 1 end\n      if S:match('That\\'s up')\
    \ then return 1 end\n      if S:match('That\\'s good') then return 1 end\n   \
    \   if S:match('That\\'s easy') then return 1 end\n      if S:match('That\\'s\
    \ amazing') then return 1 end\n      if S:match('That\\'s ok') then return 1 end\n\
    \      if S:match('That\\'s great') then return 1 end\n      if S:match('That\\\
    's a lovely day') then return 1 end\n      if S:match('That\\'s a very lovely\
    \ day') then return 1 end\n      if S:match('That\\'s a great day') then return\
    \ 1 end\n      if S:match('That\\'s a great day') then return 1 end\n      if\
    \ S:match('That\\'s a great day') then return 1 end\n      if S:match('That\\\
    's a great day') then return 1 end\n      if S:match('That\\'s a great day') then\
    \ return 1 end\n      if S:match('That\\'s a great day') then return 1 end\n \
    \     if S:match('That\\'s a great day') then return 1 end\n      if S:match('That\\\
    's a great day') then ", "  -- Your code here\n  local p = {}\n  for w in S:gmatch(\"\
    [^.?!]+\") do\n    p[#p+1] = p[#p] + 1\n  end\n  return p[1]\nend", "  local words\
    \ = str:split('.,?!')\n  local bored = 0\n  for _, word in pairs(words) do\n \
    \   if S:find(word) ~= nil then\n      bored = bored + 1\n    end\n  end\n  return\
    \ bored\nend", "    local I = 0\n    for w in string.gmatch(S, \"(^[I].+$)\")\
    \ do I = I + 1 end\n    return I\nend", "   for w1, w2 in pairs(S:gmatch('[%a%.]%s+%a[.?!]%a'))\
    \ do\n      S = S:sub(1, w1)\n      if w2 ~= 'I' then return 1 end\n   end\n \
    \  return 0\nend", "  -- Your code here\n  local I = 1\n  while I <= #S do\n \
    \   if S[I] ~= '.' and S[I] ~= '?' and S[I] ~= '!' and S[I] ~= nil then\n    \
    \  I = I + 1\n    end\n  end\n  return I\nend", "    -- Your code here\n    return\
    \ true\nend", "  -- Your code here\n  return 0\nend", "    local b = 0\n    for\
    \ word in S:gmatch('[^.!?]+') do\n        if word == 'I' then b = b + 1 end\n\
    \    end\n    return b\nend", "    local I = 0\n    for w in S:gmatch('(%S+)(%.+)')\
    \  do\n        if w == 'I' then I = I + 1 end\n    end\n    return I\nend", " \
    \   local n = 1\n    for w in S:gmatch(\"[%S]*[%.!?]*\") do\n        n = n + 1\n\
    \    end\n    return n\nend", "  local count=0\n  for w in string.gmatch(S, \"\
    ([^.?!]*)\") do\n    count=count+1\n  end\n  return count\nend", "  local boredoms\
    \ = {}\n  for w in string.gmatch(S, \"[^.?.!]+\") do boredoms[#boredoms + 1] =\
    \ w end\n  local i = #boredoms\n  local N = #S\n  for i=1, N do\n    if boredoms[i]\
    \ == 'I' then return i end\n  end\n  return 0\nend", "    local count=0\n    for\
    \ word in S:gmatch(\"[%w\\.\\?\\!]+\") do\n        if word:sub(1,1) == 'I' then\n\
    \            count = count+1\n        end\n    end\n    return count\nend", " \
    \ S = string.lower(S)\n  local count = 0\n  for w in S:gmatch'[^!.?]'do\n    if\
    \ w == \"i\" then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "    local N, E = 1, 0\n    for _, v in ipairs(S) do\n        if v:sub(1, 1) ==\
    \ 'I' then\n            N = N + 1\n        else\n            E = E + 1\n     \
    \   end\n    end\n    return N == 0 and E == 0\nend", "  local boredoms = {}\n\
    \  for w in S:gmatch(\"%w+\") do\n    if w:sub(1,1) ~= 'I' then boredoms[w] =\
    \ nil end\n  end\n  return #boredoms > 0\nend", "   local count = #S\n   for i=1,count\
    \ do\n      if S[i] == 'I' then\n         count = count - 1\n      else\n    \
    \     break\n      end\n   end\n   return count\nend", "  -- Write your function\
    \ here!\n  local boredom_count = 0\n  for w in S:gmatch(\"[%S]+\") do\n    if\
    \ w:sub(1, 1) == 'I' then\n      boredom_count = boredom_count + 1\n    end\n\
    \  end\n  return boredom_count\nend", "  if S:match('^[I]%S+[\\.|?|!]$') then\n\
    \    return 1\n  else\n    return 0\n  end\nend", "  local function is_bored(S)\n\
    \    local boredoms = #S\n    for i = 1, #S do\n      if S[i] == 'I' and S[i +\
    \ 1] == '.' and S[i + 2] ~= '?' then\n        boredoms = boredoms - 1\n      end\n\
    \    end\n    return boredoms\n  end", "  local boredoms = 0\n  local words =\
    \ S:gmatch(\"[^.?!]+\")\n  for i = 1, #words do\n    if words[i] == \"I\" then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
