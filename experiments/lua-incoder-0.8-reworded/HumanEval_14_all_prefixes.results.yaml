language: lua
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \   local prefix_table = {}\n   for i = 1, string.len do\n      prefix_table[i]\
    \ = string\n   end\n   return prefix_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6dswgunm.lua:6:\
    \ bad 'for' limit (number expected, got function)\nstack traceback:\n\t/tmp/tmp6dswgunm.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6dswgunm.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  -- Return table of all prefixes from shortest to longest of the input string\n\
    \  local prefixes = {}\n  local longest = 0\n  for i, c in string.gmatch(string,\
    \ \"([^'\\\\\\n]+)\") do\n    if longest ~= #c then\n      prefixes[longest] =\
    \ c\n      longest = i + 1\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg2mjim48.lua:9:\
    \ attempt to get length of a nil value (local 'c')\nstack traceback:\n\t/tmp/tmpg2mjim48.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpg2mjim48.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  if string == nil then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7th5b7y5.lua:17: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  -- TODO: Implement your algorithm here\n  return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnuysc3i.lua:13:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpwnuysc3i.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    local max_len = #string\n    for _, prefix in ipairs(all_prefixes_iter(string))\
    \ do\n        if max_len < #prefix then\n            table.insert(prefixes, prefix)\n\
    \        else\n            break\n        end\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf4daeb1t.lua:7:\
    \ attempt to call a nil value (global 'all_prefixes_iter')\nstack traceback:\n\
    \t/tmp/tmpf4daeb1t.lua:7: in local 'candidate'\n\t/tmp/tmpf4daeb1t.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  repeat\n    table.insert(prefixes, string)\n  until\
    \ string.sub(string, 1, string.len(string) - 1) ~= ''\n  return prefixes\nend\n\
    </cell>\n<text>\nLet's now define a function that checks if a string contains\
    \ a given prefix.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeys4ikkw.lua:11: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix = {}\n  local i = 1\n  while i <= #string do\n    table.insert(prefix,\
    \ string[i])\n    i = i + 1\n  end\n  return prefix\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2_4bu4m9.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp2_4bu4m9.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  if #string <= 0 then return end\n  return { string[1] }\n  for i = 2, #string\
    \ do\n    table.insert(prefix, string[i])\n  end\n  return prefix\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpevif_9vs.lua:7: ''end'' expected (to close ''function'' at
    line 4) near ''for''

    '
  stdout: ''
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = { }\n    local longest_length = 0\n    local longest_prefix\
    \ = ''\n    \n    for i=1,#string do\n        if string.sub(string,i,i) ~= ''\
    \ then\n            longest_length = i + 1\n            longest_prefix = string.sub(string,1,i)\n\
    \        end\n    end\n    \n    for i=1,#string do\n        if string.sub(string,i,i)\
    \ ~= '' then\n            prefixes[string.sub(string,1,i)] = true\n        end\n\
    \    end\n    \n    for i=1,longest_length do\n        if prefixes[longest_prefix]\
    \ then\n            -- Delete this prefix from list of all prefixes\n        \
    \    prefixes[longest_prefix] = false\n        else\n            -- Add this prefix\
    \ to list of all prefixes\n            prefixes[longest_prefix] = true\n     \
    \   end\n    end\n    \n    return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hohjk6w.lua:39:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=false}\nstack traceback:\n\
    \t/tmp/tmp_hohjk6w.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = setmetatable({}, {__index = nil})\n  for i = #string, 1, -1\
    \ do\n    prefixes[sub(i, 1, #string)] = true\n  end\n  return prefixes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg0nxkyb_.lua:7:\
    \ attempt to call a nil value (global 'sub')\nstack traceback:\n\t/tmp/tmpg0nxkyb_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpg0nxkyb_.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local result = {}\n  local prefix = nil\n  for i = 1, #string do\n    prefix\
    \ = prefix .. string[i]\n    result[#result + 1] = prefix\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpih2c_ruy.lua:8:\
    \ attempt to concatenate a nil value (local 'prefix')\nstack traceback:\n\t/tmp/tmpih2c_ruy.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpih2c_ruy.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefix = { }\n    for i = 1, #string do\n        prefix[#prefix + 1]\
    \ = string[i]\n    end\n    return prefix\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdc0hlgvi.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpdc0hlgvi.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 0
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string:sub(1, i)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  -- We could use setmetatable() to avoid the looping here but it's slower.\n\
    \  local prefixes = {}\n  for i, c in pairs(string) do\n    prefixes[c] = true\n\
    \  end\n  local max_length = #string\n  while max_length > 1 do\n    local next_prefix\
    \ = {}\n    for _, c in pairs(prefixes) do\n      if c == true then\n        table.insert(next_prefix,\
    \ string[i])\n        prefixes[c] = false\n      end\n    end\n    max_length\
    \ = #next_prefix\n    prefixes = next_prefix\n  end\n  return prefixes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsxggctj9.lua:7:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpsxggctj9.lua:7: in local 'candidate'\n\t/tmp/tmpsxggctj9.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local all_prefixes = {}\n  local longest_prefix = 1\n  for prefix in string.gmatch('(.-)%s*$',\
    \ '') do\n    local prefix_length = #prefix\n    if prefix_length < longest_prefix\
    \ then\n      all_prefixes[longest_prefix] = prefix\n      longest_prefix = prefix_length\n\
    \    end\n  end\n  all_prefixes[#all_prefixes] = ''\n  return all_prefixes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzsav96q.lua:21:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpjzsav96q.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix = {}\n  local longest_prefix = string.sub(string,1,1)\n  for i\
    \ = 2, #string do\n    prefix[longest_prefix] = string.sub(string,i,i)\n    longest_prefix\
    \ = string.sub(longest_prefix,1,1)\n  end\n  return prefix\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40b9iyxb.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=\"h\"}\nstack traceback:\n\t/tmp/tmp40b9iyxb.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix_table = {}\n  prefix_table[1] = string\n  for i=2,#string do\n\
    \    local prefix_str = prefix_table[i-1]\n    prefix_str = prefix_str .. string[i]\n\
    \    prefix_table[i] = prefix_str\n  end\n  return prefix_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9zn27bn0.lua:18:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmp9zn27bn0.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix = {}\n  for i = 1, #string do\n    prefix[string[i]] = true\n\
    \  end\n  return prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbs3xu4ak.lua:7:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpbs3xu4ak.lua:7: in local 'candidate'\n\
    \t/tmp/tmpbs3xu4ak.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    for prefix in string.gmatch(\"(.-)%%(%d-%d)\", string)\
    \ do\n        table.insert(prefixes, prefix)\n    end\n    return prefixes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnsgzeak.lua:15:\
    \ expected: {}\nactual: {\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\"}\nstack traceback:\n\t/tmp/tmpjnsgzeak.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    local stack = {}\n    stack[1] = \"abc\"\n    stack[2]\
    \ = \"aabc\"\n    stack[3] = \"abcabc\"\n    stack[4] = \"abcabcabc\"\n    stack[5]\
    \ = \"abcabcabcabc\"\n    stack[6] = \"abcabcabcabcabc\"\n    stack[7] = \"abcabcabcabcabcabc\"\
    \n    for i = 8, 1, -1 do\n        local start = stack[i]\n        for j = 1,\
    \ i do\n            prefixes[start..stack[j]] = true\n        end\n    end\n \
    \   return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptn6p2w48.lua:17:\
    \ attempt to concatenate a nil value (local 'start')\nstack traceback:\n\t/tmp/tmptn6p2w48.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmptn6p2w48.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local function add_prefix(prefix, string)\n    if not\
    \ prefix[#prefix] then\n      prefix[#prefix] = string\n      prefixes[#prefix]\
    \ = prefix\n    end\n  end\n  add_prefix({}, string)\n  for i = 1, #string do\n\
    \    add_prefix({string[i]}, string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6uz3o3l.lua:22:\
    \ expected: {}\nactual: {0={0=\"\"}}\nstack traceback:\n\t/tmp/tmph6uz3o3l.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = { }\n    local longest_prefix = string.sub(string, 1, 1)\n\
    \    prefixes[longest_prefix] = true\n    for i = 1, string.len(string) - 1 do\n\
    \        local prefix = string.sub( string, i, i + 1 )\n        if prefix == longest_prefix\
    \ then\n            prefixes[prefix] = true\n        elseif prefixes[prefix] then\n\
    \            prefixes[longest_prefix] = true\n            prefixes[prefix] = true\n\
    \        end\n    end\n    return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjjsd25g.lua:23:\
    \ expected: {}\nactual: {\"\"=true}\nstack traceback:\n\t/tmp/tmpqjjsd25g.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local all_prefixes = {}\n  local longest_prefix = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9envuo7f.lua:16: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes, prefixes_table = {}, {}\n  for i = 1, #string do\n    local\
    \ prefix = string:sub(i, i)\n    table.insert(prefixes, prefix)\n    prefixes_table[prefix]\
    \ = true\n  end\n  return prefixes, prefixes_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpius2iki7.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpius2iki7.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local result = {}\n  local i = 0\n  for _ in string.gmatch(string, \"[^\" ..\
    \ string .. \"]\") do\n    result[i] = string\n    i = i + 1\n  end\n  result[i]\
    \ = nil\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppqo3ufw5.lua:7:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmppqo3ufw5.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmppqo3ufw5.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  if string.find(string, \"^\"..string.upper(\"a..zA..Z..z\")..\"$\") then\n\
    \    return string\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpold68x1y.lua:15:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpold68x1y.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local cursor = 0\n  while cursor < #string do\n    local\
    \ prefix = ''\n    local i = 0\n    while i < cursor and string[i] == prefixs[i]\
    \ do\n      i = i + 1\n    end\n    prefix = prefix .. string[i]\n    i = i\n\
    \    while i < cursor do\n      i = i + 1\n      if i >= cursor then\n       \
    \ prefixes[#prefixes + 1] = {'', prefix}\n      end\n    end\n    cursor = i\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpabog03xz.lua:13:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpabog03xz.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpabog03xz.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    local i = 0\n    for i = 1, #string do\n       \
    \ prefixes[i] = string\n    end\n    for i = #string, 1, -1 do\n        local\
    \ prefix = string\n        while i ~= 1 do\n            prefix = prefix .. string[i]\n\
    \            i = i - 1\n        end\n        prefixes[#prefixes+1] = prefix\n\
    \    end\n    return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpti2y5w4w.lua:13:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpti2y5w4w.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpti2y5w4w.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i=1,#string do\n    prefixes[string] = string\n\
    \  end\n  for i=1,#string do\n    table.insert(prefixes, string..'_'..tostring(i))\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9zl37gr.lua:19:\
    \ expected: \n{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ \n{\n    \"asdfgh_1\",\n    \"asdfgh_2\",\n    \"asdfgh_3\",\n    \"asdfgh_4\"\
    ,\n    \"asdfgh_5\",\n    \"asdfgh_6\",\n    asdfgh=\"asdfgh\"\n}\nstack traceback:\n\
    \t/tmp/tmpq9zl37gr.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i=1,string.size do\n    table.insert(prefixes, string.sub(i,\
    \ 1, i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy0a1da_s.lua:6:\
    \ bad 'for' limit (number expected, got nil)\nstack traceback:\n\t/tmp/tmpy0a1da_s.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpy0a1da_s.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    for i = 1, #string do\n        prefixes[string.sub(string,i,i)]\
    \ = true\n    end\n    return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79vvuwq2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, d=true, f=true, g=true, h=true, s=true}\nstack traceback:\n\t/tmp/tmp79vvuwq2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix = {}\n  local length = #string\n  for i = 1, length do\n    prefix[string[i]]\
    \ = string[i]\n  end\n  return prefix\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5bq33r3j.lua:8:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmp5bq33r3j.lua:8: in local 'candidate'\n\
    \t/tmp/tmp5bq33r3j.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  local max_prefix_len = #string\n  local i = 1\n  while\
    \ i <= max_prefix_len do\n    local char = string.sub(string,i,i)\n    local j\
    \ = i\n    while j < max_prefix_len do\n      if string.sub(string,j,j) == char\
    \ then\n        prefixes = { char,\n          string.sub(string,i,j),\n      \
    \    prefixes }\n      else\n        break\n      end\n      j = j + 1\n    end\n\
    \    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmde_2os.lua:30:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"g\", \"g\", {\"f\", \"f\", {\"d\", \"d\", {\"s\", \"s\", {\"a\", \"a\", {}}}}}}\n\
    stack traceback:\n\t/tmp/tmpfmde_2os.lua:30: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix = {}\n  local suffix = string\n  while true do\n    table.insert(prefix,\
    \ suffix:sub(1, #prefix))\n    if suffix:sub(#suffix, #suffix) == '' then\n  \
    \    break\n    end\n    suffix = suffix:sub((#prefix) + #suffix)\n  end\n  return\
    \ prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrcg4cwt.lua:20:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpmrcg4cwt.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    for i = 1, #string do\n        local prefix = ''\n\
    \        for j = 1, i do\n            prefix = prefix .. string[j]\n        end\n\
    \        prefixes[prefix] = true\n    end\n    return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq5tz6fss.lua:9:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpq5tz6fss.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpq5tz6fss.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, string.lent do\n    prefixes[string.sub(t,\
    \ i, i)] = true\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp6gql0qj.lua:6:\
    \ bad 'for' limit (number expected, got nil)\nstack traceback:\n\t/tmp/tmpp6gql0qj.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpp6gql0qj.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i, j = 1, #string\n  while i <= j do\n    table.insert(prefixes,\
    \ string[i])\n    i = i + j\n    j = i - 1\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktd8i4cg.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpktd8i4cg.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix = {}\n  local prefix_len = 1\n  for i=1,#string do\n    local\
    \ char = string[i]\n    local prefix_char = string.sub(string, i, i)\n    prefix[prefix_char]\
    \ = true\n    prefix_len = prefix_len * 2\n  end\n  return prefix, prefix_len\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbewgn0mk.lua:20:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, d=true, f=true, g=true, h=true, s=true}\nstack traceback:\n\t/tmp/tmpbewgn0mk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009427
- exit_code: -1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { string }\n  local length = 1\n  while length > 0 do\n  \
    \  local pos = math.min(string.len(string), length)\n    local prefix = string.sub(string,\
    \ 1, pos)\n    table.insert(prefixes, prefix)\n    length = pos + 1\n  end\n \
    \ return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009432
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    for i = 1, #string do prefixes[string.sub(string,1,i)]\
    \ = true end\n    return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqv_or3d7.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmpqv_or3d7.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { string }\n  local pos = 1\n  while pos < #string do\n  \
    \  prefixes = { prefixes[pos]:sub(1, #prefixes[pos]) }\n    pos = pos + 1\n  end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0qo5wd6.lua:17:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpe0qo5wd6.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix = { }\n  for i = 1, #string do\n    local char = string.sub (string,\
    \ i, i)\n    table.insert (prefix, char)\n  end\n  return prefix\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpao55ip0v.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpao55ip0v.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  if string == nil then return {} end\n  local function is_prefixed_by(pref,\
    \ word)\n    for i = 1, #word do\n      if word[i] == pref then return true end\n\
    \    end\n    return false\n  end\n  local prefix = {}\n  local word = string.gsub(string,\
    \ '(.-)([^' .. prefix .. '^%s]+)', '$1')\n  if prefix ~= {} then\n    if prefix[#prefix]\
    \ == nil then prefix[#prefix] = \"\" end\n    for i = #prefix, 1, -1 do\n    \
    \  prefix[#prefix] = prefix[#prefix] .. word[i]\n    end\n  end\n  -- Find longest\
    \ prefix\n  local max_len = -1\n  for i = 1, #prefix do\n    if #prefix[i] > max_len\
    \ then\n      max_len = #prefix[i]\n    end\n  end\n  if max_len == 0 then return\
    \ {} end\n  -- Build prefix dictionary\n  local prefix_dict = {}\n  for i = 1,\
    \ #prefix do\n    prefix_dict[prefix[i]] = true\n  end\n  -- Build result set\n\
    \  local results = {}\n  for i = 1, #prefix do\n    if prefix_dict[i] then\n \
    \     table.insert(results, prefix[i])\n    end\n  end\n  return results\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiq2razuv.lua:13:\
    \ attempt to concatenate a table value (local 'prefix')\nstack traceback:\n\t\
    /tmp/tmpiq2razuv.lua:13: in local 'candidate'\n\t/tmp/tmpiq2razuv.lua:46: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  for i=1,#string do\n    if string[i] ~= '/' then --\
    \ The prefix is empty\n      table.insert(prefixes, string[i])\n    end\n  end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0adlhja3.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp0adlhja3.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  return setmetatable({}, {__index=string})\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gk1k_3z.lua:12:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp3gk1k_3z.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local result = {}\n  local prefix = nil\n  for i = 1, #string do\n    if prefix\
    \ then\n      result = {prefix = prefix .. string[i], ...}\n    else\n      prefix\
    \ = string[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_u_4paa8.lua:9: cannot use ''...'' outside a vararg function
    near ''...''

    '
  stdout: ''
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  for i = 1, #string do \n    prefixes[#prefixes + 1]\
    \ = string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj3rdtq62.lua:7:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpj3rdtq62.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpj3rdtq62.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 0
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    for i = 1, #string do\n        table.insert(prefixes,\
    \ string.sub(string,1,i))\n    end\n    return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = { string }\n    repeat\n        local first_prefix = prefixes[1]\n\
    \        -- Return table of all prefixes from shortest to longest of all\n   \
    \     -- prefixes in the prefixes table\n        prefixes = prefixes:gsub(\"^\"\
    \ .. first_prefix, \"\")\n    until not prefixes or #prefixes == 0\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsn85mg5_.lua:10:\
    \ attempt to call a nil value (method 'gsub')\nstack traceback:\n\t/tmp/tmpsn85mg5_.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpsn85mg5_.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local result = {}\n  for _, s in ipairs(string) do\n    result[#result + 1]\
    \ = s\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29e_s2w6.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp29e_s2w6.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: -1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  if string == nil then return nil end\n  local prefixes = {}\n  repeat\n   \
    \ table.insert(prefixes, string[1])\n  until not string.sub(1, string.len(string))\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009432
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[string.sub(i, i)]\
    \ = true\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebkjqz2q.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"\"=true, \"1\"=true}\nstack traceback:\n\t/tmp/tmpebkjqz2q.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { string.sub(' ', 1) }\n  while string.len(string) > 1 do\n\
    \    table.insert(prefixes, string.sub(string, 1, string.len(string) - 1))\n \
    \   string = string.sub(string, string.len(string) - 1, 1)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp597wsmp7.lua:16:\
    \ expected: {}\nactual: {\" \"}\nstack traceback:\n\t/tmp/tmp597wsmp7.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { string.pre }\n  repeat\n    prefixes.insert(string.sub,\
    \ 1, string.len)\n  until string.sub(string, 1, string.len) == ''\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1upny6sq.lua:7:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmp1upny6sq.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1upny6sq.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local function prefixes(string, _len)\n        local ret = {}\n        for\
    \ i = 1, _len do ret[#ret .. string[i]] = true end\n        return ret\n    end\n\
    \    local function longest_prefix(string, _len)\n        local ret = ''\n   \
    \     for i = 1, _len do\n            ret = string[i] .. ret\n        end\n  \
    \      return ret\n    end\n    return prefixes(string, #string), prefixes(longest_prefix(string,\
    \ #string), #string)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2zr_gcwf.lua:7:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp2zr_gcwf.lua:7:\
    \ in local 'prefixes'\n\t/tmp/tmp2zr_gcwf.lua:17: in local 'candidate'\n\t/tmp/tmp2zr_gcwf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix_table = { }\n  for i = 1, string.lengh do\n    prefix_table[''\
    \ .. string.sub(i, 1, i)] = true\n  end\n  return prefix_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpewod0v_8.lua:6:\
    \ bad 'for' limit (number expected, got nil)\nstack traceback:\n\t/tmp/tmpewod0v_8.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpewod0v_8.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    local\
    \ p = string\n    for j = 1, i - 1 do\n      p = string..prefixes[j] -- Concatenate\
    \ with the prefixes of length j\n    end\n    table.insert(prefixes, p)\n  end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkc4st7m9.lua:21:\
    \ expected: \n{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ \n{\n    \"asdfgh\",\n    \"asdfghasdfgh\",\n    \"asdfghasdfghasdfgh\",\n \
    \   \"asdfghasdfghasdfghasdfgh\",\n    \"asdfghasdfghasdfghasdfghasdfgh\",\n \
    \   \"asdfghasdfghasdfghasdfghasdfghasdfgh\"\n}\nstack traceback:\n\t/tmp/tmpkc4st7m9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  if string == nil then return { } end\n  local all_prefixes = { }\n  local prefix_length\
    \ = 0\n  local last_letter = string[1]\n  local index = 1\n  while index <= #string\
    \ do\n    local letter = string[index]\n    if letter == last_letter then prefix_length\
    \ = prefix_length + 1 end\n    all_prefixes[#all_prefixes + 1] = string\n    if\
    \ letter == last_letter then prefix_length = prefix_length + 1 end\n    last_letter\
    \ = letter\n    index = index + 1\n  end\n  return all_prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjljyufj.lua:25:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpdjljyufj.lua:25: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = setmetatable({} or {}, {__index = setmetatable({__index =\
    \ string}, {})})\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n\
    \    if prefix == \"\" then\n      prefixes[prefix] = prefix\n    else\n     \
    \ prefixes[prefix] = prefixes[prefix] .. prefix\n    end\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph7vgrmpa.lua:11:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmph7vgrmpa.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmph7vgrmpa.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = terralib.newlist()\n  for i = 1, #string do\n    local prefix\
    \ = string:sub(i, i)\n    prefixes:insert(prefix)\n  end\n  local longest_prefix\
    \ = prefixes[#prefixes]\n  local longest_prefix_len = #longest_prefix\n  for i\
    \ = 1, #string do\n    local prefix = string:sub(i, i)\n    prefix = prefix ..\
    \ longest_prefix\n    prefixes:insert(prefix)\n    longest_prefix_len = math.max(longest_prefix_len,\
    \ #prefix)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsiabgcrm.lua:5:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpsiabgcrm.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpsiabgcrm.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    for i = 1, #string do\n        prefixes[string.sub(string,1,i)]\
    \ = {}\n    end\n    for i = 1, #string do\n        table.insert(prefixes[string.sub(string,1,i)],\
    \ string.sub(string,i+1,#string))\n    end\n    return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hbbk4kg.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a={\"sdfgh\"}, as={\"dfgh\"}, asd={\"fgh\"}, asdf={\"gh\"}, asdfg={\"h\"},\
    \ asdfgh={\"\"}}\nstack traceback:\n\t/tmp/tmp3hbbk4kg.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(i,\
    \ #string))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4xwxetj.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"sdfgh\", \"dfgh\", \"fgh\", \"gh\", \"h\"}\nstack traceback:\n\
    \t/tmp/tmpp4xwxetj.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local result = {}\n    for letter in string.gmatch(string, \"(.-)\") do\n\
    \        result[#result + 1] = letter\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4laj63d.lua:15:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpw4laj63d.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  for i = 1, #string do\n    prefixes[#prefixes + 1]\
    \ = string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1xr73ed.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpy1xr73ed.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \   local prefixes = { }\n   for i = 1, #string do\n      local prefix = string[i]\n\
    \      for j = i-1, 1, -1 do\n         local prefix = prefix .. string[j]\n  \
    \       if prefix:sub(1, #prefix) ~= \"\" then\n            prefixes[#prefixes+1]\
    \ = prefix\n            break\n         end\n      end\n   end\n   return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw47rfb2p.lua:9:\
    \ attempt to concatenate a nil value (local 'prefix')\nstack traceback:\n\t/tmp/tmpw47rfb2p.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpw47rfb2p.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for _, v in string.gmatch('(.-)', '$1,') do\n    prefixes[#prefixes\
    \ + 1] = v\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2fy6xoj.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpa2fy6xoj.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf85fxhiu.lua:15: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, string.lenth do\n    table.insert(prefixes,\
    \ string:sub(i, string.lenth))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tpc3rpz.lua:6:\
    \ bad 'for' limit (number expected, got nil)\nstack traceback:\n\t/tmp/tmp3tpc3rpz.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp3tpc3rpz.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefix = {string[1]}\n    for i = 2, #string do\n        local tmp\
    \ = prefix[#prefix+1] or \"\"\n        prefix[#prefix+1] = tmp .. string[i]\n\
    \    end\n    return prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeni74mj2.lua:8:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpeni74mj2.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpeni74mj2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix_table = {}\n  local min_len = #string\n  for i = 1, #string do\n\
    \    local prefix = string:sub(i, i)\n    if prefix then\n      table.insert(prefix_table,\
    \ prefix)\n    end\n  end\n  -- If min_len is odd, add an extra prefix so we have\
    \ an even number of characters in the string\n  if min_len % 2 == 1 then\n   \
    \ table.insert(prefix_table, \"a\"..(string:sub(1, min_len+1)))\n  end\n  return\
    \ prefix_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzy2sfz9g.lua:24:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpzy2sfz9g.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  for _, prefix in ipairs(string:gsub(\"(.-$)\", \"%1\"\
    )) do\n    prefixes[prefix] = true\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ixz65t9.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp6ixz65t9.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i=1,#string do\n    table.insert(prefixes, string[i])\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9bvrcw0.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpd9bvrcw0.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefix = {}\n    for i = 1, #string do \n        prefix[i] = string[i]\n\
    \    end\n    return prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0k509l9z.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp0k509l9z.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = terralib.newlist()\n  for i = #string, 1, -1 do\n    prefixes:insert(string:sub(i,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjg4a0vk0.lua:5:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpjg4a0vk0.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpjg4a0vk0.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix_table = {}\n  repeat\n    table.insert(prefix_table, string.sub(1,\
    \ string.len(string)))\n  until string.len(string) <= 1\n  return prefix_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5sax045y.lua:15:\
    \ expected: {}\nactual: {\"1\"}\nstack traceback:\n\t/tmp/tmp5sax045y.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local result = {}\n  for i = 1, string.len do\n    result[string.sub(string,\
    \ i, i)] = true\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvf_l9vm6.lua:6:\
    \ bad 'for' limit (number expected, got function)\nstack traceback:\n\t/tmp/tmpvf_l9vm6.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpvf_l9vm6.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    return all_prefixes_iter(string)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk9u231v.lua:5:\
    \ attempt to call a nil value (global 'all_prefixes_iter')\nstack traceback:\n\
    \t/tmp/tmpwk9u231v.lua:5: in local 'candidate'\n\t/tmp/tmpwk9u231v.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  -- Initialize table of prefixes by adding empty string to prefix list for each\
    \ letter\n  -- Initialize table of prefixes by adding empty string to prefix list\
    \ for each letter\n  local prefixes = {}\n  -- Initialize prefix length\n  local\
    \ prefix_len = 1\n  -- Loop through input string\n  for i = 1, #string do\n  \
    \  -- Add empty string to prefix list for each letter\n    prefixes[string.sub(string,\
    \ 1, i)] = ''\n    -- Add empty string to prefix list for each letter\n    prefixes[string.sub(string,\
    \ i, i)] = ''\n    -- Update prefix length\n    prefix_len = prefix_len + #string.sub(string,\
    \ 1, i)\n  end\n  return prefixes, prefix_len\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2r824qpp.lua:26:\
    \ expected: \n{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ \n{\n    a=\"\",\n    as=\"\",\n    asd=\"\",\n    asdf=\"\",\n    asdfg=\"\"\
    ,\n    asdfgh=\"\",\n    d=\"\",\n    f=\"\",\n    g=\"\",\n    h=\"\",\n    s=\"\
    \"\n}\nstack traceback:\n\t/tmp/tmp2r824qpp.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string.sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpip031qoe.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"1\", \"\", \"\", \"\", \"\", \"\"}\nstack traceback:\n\t/tmp/tmpip031qoe.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    for i=string.lenth, 1, -1 do\n        prefixes[i]\
    \ = string\n    end\n    return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpimyj8xxb.lua:6:\
    \ bad 'for' initial value (number expected, got nil)\nstack traceback:\n\t/tmp/tmpimyj8xxb.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpimyj8xxb.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 0
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string:sub(1,\
    \ i)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix_length = 1\n  for i = 1, #string do\n \
    \   local prefix = string[1:i]\n    prefixes[prefix] = true\n    prefix_length\
    \ = prefix_length + 1\n  end\n  table.sort(prefixes, function(t1, t2)\n    return\
    \ #t1 < #t2 and\n           #t1 < #prefix and\n           #t2 < #prefix and\n\
    \           t1 <= t2\n  end)\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx_3a6qjd.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  return table.new_from_table(_G.string.gmatch(\"(\" .. string .. \")\", \"([^\\\
    \\r]+)\"..\"([^\\\\r]+)\")..\"([^\\\\r]+)\"))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7xzr_y_d.lua:5: ''end'' expected (to close ''function'' at
    line 4) near '')''

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i, c in ipairs(string) do\n    prefixes[i] = c\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8znx5ic2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp8znx5ic2.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local suffixes = string.gsub(string, \"[^\"..string:gsub(\"\
    ^[^\"]\", \"\"):gsub(\"^%{\", \"\"):gsub(\"%{%{\", \"%\")..\"}%}\", \"\"):gsub(\"\
    ^%\", \"%{\")..\"}\", \"\", \"g\")\n  suffixes = suffixes or \"\"\n  local longest_suffix\
    \ = suffixes:match(\"^(.*)$\")\n  local shortest_prefix = string:gsub(\"^%%(.*)\"\
    , \"%1\")\n  local prefix_length = shortest_prefix:len()\n  for i = 1, #suffixes\
    \ do\n    prefixes[prefixes:len()] = shortest_prefix:sub(1, prefix_length + i\
    \ - 1)\n  end\n  if longest_suffix ~= '' then\n    prefixes[#prefixes] = longest_suffix\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp8gc0ch8.lua:6: '')'' expected near '']''

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local function is_prefix(x)\n    return string.sub(x,1,1) == x and\n      \
    \     string.sub(x,2,#x) == ''\n  end\n  local function prefix_len(x)\n    return\
    \ string.len(string.sub(x,1,#x))\n  end\n  local prefixes = terralib.newlist()\n\
    \  local max_len = -1\n  for i = 1, #string do\n    if is_prefix(string, i) then\n\
    \      local prefix_len = prefix_len(string)\n      if max_len < prefix_len then\n\
    \        max_len = prefix_len\n      end\n      prefixes:insert(string.sub(string,1,i))\n\
    \    end\n  end\n  prefixes:insert(string)\n  return prefixes, max_len\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa5ph0qbw.lua:12:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpa5ph0qbw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpa5ph0qbw.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local all_prefixes = {}\n  for i = 1, #string do\n    table.insert(all_prefixes,\
    \ string:sub(i, #string))\n  end\n  return all_prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81t92dfg.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"sdfgh\", \"dfgh\", \"fgh\", \"gh\", \"h\"}\nstack traceback:\n\
    \t/tmp/tmp81t92dfg.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  local i = 1\n  for i = 1, #string do\n    prefixes[string.sub(string,i,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi07845y5.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, d=true, f=true, g=true, h=true, s=true}\nstack traceback:\n\t/tmp/tmpi07845y5.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = { string }\n    local chars = string.gsub(string.gsub(string,\
    \ '(.-)', '%(%1)'), '(..)', '\\1')\n    local prefix = chars[1]\n    for i=2,#chars\
    \ do\n        prefixes[prefix] = prefixes[prefix] .. chars[i]\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8x0g2ard.lua:6:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmp8x0g2ard.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp8x0g2ard.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = terralib.newlist()\n  for i = 1, string.size do\n    prefixes:insert(string.sub)(string,\
    \ 1, i)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpurpzpt9x.lua:5:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpurpzpt9x.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpurpzpt9x.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix_table = {}\n  local longest, shortest = #string, string[1]\n \
    \ for i=1, longest do prefix_table[i] = string[1:i] end\n  -- Create table of\
    \ all possible prefixes of shortest to longest input\n  for i=1, shortest do\n\
    \    table.insert(prefix_table, string[1:i])\n  end\n  return prefix_table\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc4f41uo2.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[string.sub(i, i)]\
    \ = true\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebkjqz2q.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"\"=true, \"1\"=true}\nstack traceback:\n\t/tmp/tmpebkjqz2q.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = terralib.newlist()\n  for i = 1, #string do\n    prefixes:insert(string.sub(string,1,i))\n\
    \  end\n  table.sort(prefixes)\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpysmtk1r1.lua:5:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpysmtk1r1.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpysmtk1r1.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix_table = {}\n  local longest, shortest, longest1, shortest1, longest2,\
    \ shortest2 = string.gsub(string, \"^(.-)$\", function(prefix)\n    table.insert(prefix_table,\
    \ prefix)\n  end)\n  if longest == shortest1 then\n    table.insert(prefix_table,\
    \ longest2)\n  end\n  if longest == shortest2 then\n    table.insert(prefix_table,\
    \ longest1)\n  end\n  if shortest == longest1 then\n    table.insert(prefix_table,\
    \ shortest2)\n  end\n  if shortest == longest2 then\n    table.insert(prefix_table,\
    \ shortest1)\n  end\n  return prefix_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkx5xoju6.lua:27:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpkx5xoju6.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = #string\n  for _ in string.gmatch(string,\
    \ \"(.-)\"..string.char(i)) do\n    prefixes[#prefixes + 1] = string.sub(_, 2,\
    \ -1)\n    i = i - 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfc1x5sfo.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpfc1x5sfo.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 0\n  for i = 1, #string do\n    prefixes[i]\
    \ = string\n  end\n  for i = 1, #string do\n    for j = 1, #string do\n      if\
    \ j > i then\n        if string.sub(i, j, string) == string.sub(i, j + 1, string)\
    \ then\n          table.insert(prefixes, string.sub(i, 1, string))\n        end\n\
    \      end\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7he4yc26.lua:13:\
    \ bad argument #3 to 'sub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmp7he4yc26.lua:13: in local 'candidate'\n\t/tmp/tmp7he4yc26.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local shortest = 0\n  local longest = 0\n  for i = 1,\
    \ #string do\n    longest = i\n    longest = #string\n    local _, i, longest\
    \ = longest_prefix(string, i)\n    if longest > shortest then\n      shortest\
    \ = longest\n    end\n  end\n  for i = 1, shortest do\n    prefixes[#prefixes\
    \ + 1] = string[i]:sub(1,i)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphlllza4y.lua:11:\
    \ attempt to call a nil value (global 'longest_prefix')\nstack traceback:\n\t\
    /tmp/tmphlllza4y.lua:11: in local 'candidate'\n\t/tmp/tmphlllza4y.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    local shortest = string\n    local longest = string\n\
    \    repeat\n        shortest = prefixes[#prefixes+1]..shortest\n        longest\
    \ = prefixes[#prefixes+1]..longest\n    until shortest:sub(1,1) ~= 'a'\n    repeat\n\
    \        prefixes[#prefixes+1] = shortest:sub(1,#shortest)\n        shortest =\
    \ shortest:sub(1,#shortest+1)\n    until longest == ''\n    return prefixes, longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeoqcn31p.lua:9:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpeoqcn31p.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpeoqcn31p.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \tlocal prefixes = { string }\n\tlocal length = string.len(string)\n\tlocal i\
    \ = 1\n\twhile i <= length do\n\t\tprefixes[string.sub(string, 1, i)] = true\n\
    \t\ti = i * 2\n\tend\n\treturn prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2icw48qs.lua:18:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmp2icw48qs.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    for i = 1,#string do\n        table.insert(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoqo1fu5f.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix = {}\n  local suffix = {}\n  local i, j = 1, #string\n  while\
    \ i <= j do\n    if string[i] == string[j] then\n      table.insert(prefix, string[i])\n\
    \      i = i + 1\n      j = j + 1\n      while i <= j do\n        if string[i]\
    \ ~= string[j] then\n          table.insert(suffix, string[i])\n          i =\
    \ i + 1\n          break\n        end\n        i = i + 1\n      end\n    else\n\
    \      j = j - 1\n    end\n  end\n  if #prefix > 0 then\n    table.insert(suffix,\
    \ string[i])\n  end\n  return { prefix, suffix }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjva4dt2d.lua:34:\
    \ expected: {}\nactual: {{}, {}}\nstack traceback:\n\t/tmp/tmpjva4dt2d.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  return table.concat(\n    unpack(\n      string.gmatch(string, \"(.-)%%(%d+)\"\
    )))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmperh2yj36.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmperh2yj36.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmperh2yj36.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string[i])\n\
    \  end\n  table.sort(prefixes, function(a, b)\n    return #a == #b and\n     \
    \      #a == 1 or #a > #b or\n           #b == 1 or #b > #a\n  end)\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9a96wk_.lua:21:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpt9a96wk_.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 0
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    local prefix = string:sub(1,\
    \ i)\n    table.insert(prefixes, prefix)\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = terralib.newlist()\n  for i = 1, #string do\n    prefixes:insert(string[i\
    \ - 1])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp90dmfhg4.lua:5:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmp90dmfhg4.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp90dmfhg4.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do prefixes[i] = string[i] end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp54ifgyrz.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp54ifgyrz.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local table = {}\n  repeat\n    table.insert(string, string[1])\n  until string[1]\
    \ ~= 'z'\n  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9n9nuqdp.lua:7:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmp9n9nuqdp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp9n9nuqdp.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  return string.gmatch(string, \"([^\" .. _luci.http.formvalue(\n    _uci:get(_uci.section,\n\
    \      {'prefix', 'prefix_len'}\n    )\n  ) .. \"]+)\") or {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfa0qzch_.lua:5:\
    \ attempt to index a nil value (global '_luci')\nstack traceback:\n\t/tmp/tmpfa0qzch_.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpfa0qzch_.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, string.len do\n    prefixes[string.sub(i,\
    \ i)] = true\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjoym01u3.lua:6:\
    \ bad 'for' limit (number expected, got function)\nstack traceback:\n\t/tmp/tmpjoym01u3.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpjoym01u3.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: -1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = string\n  local char = string.sub(string,\
    \ 1, 1)\n  while char ~= '' do\n    table.insert(prefixes, prefix)\n    prefix\
    \ = prefix .. char\n    char = string.sub(string, 1, 2)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009434
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  return { string}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vin3rqk.lua:11:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmp4vin3rqk.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefix_table = nil\n    for i = 1, #string do\n        if prefix_table\
    \ == nil then\n            prefix_table = {}\n        end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6ky3470z.lua:19: ''end'' expected (to close ''for'' at line
    6) near <eof>

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local shortest = 1\n  local longest = #string\n  while\
    \ shortest <= longest do\n    local substring = string[shortest]\n    local current_length\
    \ = shortest\n    while current_length + 1 < #string and string[current_length\
    \ + 1] == substring do\n      current_length = current_length + 1\n    end\n \
    \   prefixes[substring] = true\n    shortest = current_length + 1\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoxtw09ck.lua:14:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpoxtw09ck.lua:14: in local 'candidate'\n\
    \t/tmp/tmpoxtw09ck.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ouhp9q5.lua:12:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp3ouhp9q5.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    if string.sub(i, i, #string)\
    \ == string then\n      prefixes[#prefixes + 1] =\n        string.sub(i, 1, i\
    \ - 1)\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4f02sn8d.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp4f02sn8d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix = { string }\n  repeat\n    local last = prefix[#prefix]\n   \
    \ prefix[#prefix] = nil\n    table.insert(prefix, last)\n  until last\n  return\
    \ prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpji4ux5pk.lua:17:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpji4ux5pk.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = { }\n    local index = 1\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdbfyc8cm.lua:16: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    local pos = 1\n    for i=1,#string do\n        prefixes[pos]\
    \ = string[i]\n        pos = pos + 1\n    end\n    return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6lpyu9_.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmps6lpyu9_.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local function prefixes(prefix)\n    if prefix == \"\" then return nil end\n\
    \    local _, index = prefix:find(prefix, \"..\")\n    if index == nil then\n\
    \      return {prefix}\n    else\n      return prefixes(prefix .. string[index\
    \ + 1])\n    end\n  end\n  return prefixes(string)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ecueb9j.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp6ecueb9j.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  local i = 0\n  while i <= #string do\n    prefixes[string.sub(string,\
    \ 1, i)] = string.sub(string,\n                                              \
    \  i+1,\n                                                #string)\n    i = i+1\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetbqb6iw.lua:19:\
    \ expected: {}\nactual: {\"\"=\"\"}\nstack traceback:\n\t/tmp/tmpetbqb6iw.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string\n  end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3ig_1ir.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpf3ig_1ir.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = { string[1] }\n    for i = 2, #string do\n        table.insert(prefixes,\
    \ string[i] .. string[1])\n    end\n    return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk22e3ylw.lua:7:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpk22e3ylw.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpk22e3ylw.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \   if #string <= 0 then return {} end\n   if #string == 1 then return {string}\
    \ end\n   local prefixes = all_prefixes(string[1:end-1]) or {}\n   prefixes[#prefixes\
    \ + 1] = string\n   return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzdq5cobk.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  -- Build map of prefixes\n  local prefix_map = {}\n  for i=1,string.lenth do\n\
    \    prefix_map[string.sub(i,i)] = true\n  end\n  -- Return list of all prefixes\
    \ in input string\n  local prefix_list = terralib.newlist()\n  for k, v in pairs(prefix_map)\
    \ do\n    prefix_list[#prefix_list + 1] = k\n  end\n  return prefix_list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_y9j_bkq.lua:7:\
    \ bad 'for' limit (number expected, got nil)\nstack traceback:\n\t/tmp/tmp_y9j_bkq.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_y9j_bkq.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local ret = {}\n    for i = 1, #string do\n        if string.sub(string,i,#string)\
    \ == '' then break end\n        ret[#ret+1] = string.sub(string,i,i)\n    end\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68wgshqc.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmp68wgshqc.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  for i = 1, #string do\n    local length = #string\n\
    \    repeat\n      length = length - 1\n      table.insert(prefixes, string:sub(1,\
    \ length))\n    until length > 0\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bhi94sr.lua:20:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfg\", \"asdfg\", \"asdfg\", \"asdfg\", \"asdfg\", \"asdfg\"}\nstack traceback:\n\
    \t/tmp/tmp_bhi94sr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    local prefix = string\n    while true do\n     \
    \   table.insert(prefixes, prefix)\n        prefix, prefix = prefix:gsub(\"^%s*\"\
    , \"\")\n        if prefix == \"\" then\n            break\n        end\n    end\n\
    \    return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyeva7xvr.lua:20:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpyeva7xvr.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  return function(prefix)\n    for _, _ in string.gmatch(string, \"(.-)\"..prefix..\"\
    (.-)*\") do\n      prefix = prefix .. string.sub(_, 1, string.len(_) - 2)\n  \
    \  end\n    return prefix\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwsaxibl8.lua:16:\
    \ expected: {}\nactual: function: 0x556d0e9d3c40\nstack traceback:\n\t/tmp/tmpwsaxibl8.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local result = {}\n    for i = 1, #string do\n        result[#result + 1]\
    \ = string[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvlv9jca.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmprvlv9jca.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(i,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2y3rwp6.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpy2y3rwp6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = table.new(string)\n  local longest = string.len(string)\n\
    \  local shortest = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcv6gs9o2.lua:17: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: -1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefix = {}\n    local i = #string\n    while i do\n        prefix[#prefix\
    \ + 1] = string.sub(string, 1, i)\n        i = i - 1\n    end\n    return prefix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009433
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:gsub('(.-)%1', '%1')\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0s7pi_qa.lua:7:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp0s7pi_qa.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp0s7pi_qa.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes, stack = {}, {}\n  for i = 1, #string do\n    table.insert(stack,\
    \ {i, string.sub(i, i)})\n    table.insert(prefixes, i)\n  end\n  while (#stack)\
    \ > 0 do\n    local _, prefix = stack:pop()\n    for i = 1, #string do\n     \
    \ if string.sub(i, i) == prefix then\n        table.insert(stack, {i, string.sub(i,\
    \ i)})\n        table.insert(prefixes, i)\n      end\n    end\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpepmbsnql.lua:11:\
    \ attempt to call a nil value (method 'pop')\nstack traceback:\n\t/tmp/tmpepmbsnql.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpepmbsnql.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  return string\n   :gsub(\"([^\" .. string.char(string.byte('a')) .. \"])\"\
    \ .. string, '\\1..')\n   :gsub(\"([^\" .. string.char(string.byte('A')) .. string.char(string.byte('Z'))\
    \ .. \"])\" .. string, '\\1..')\n   :gsub(\"([^\" .. string.char(string.byte('A'))\
    \ .. string.char(string.byte('a')).. string.char(string.byte('Z')) .. string.char(string.byte('a'))..\
    \ string.char(string.byte('Z')) .. \"])\" .. string, '\\1..')\n   :gsub(\"([^\"\
    \ .. string.char(string.byte('A')) .. string.char(string.byte('A')).. string.char(string.byte('a'))\
    \ .. string.char(string.byte('Z')) .. string.char(string.byte('A')).. string.char(string.byte('Z'))\
    \ .. \"])\" .. string, '\\1..')\n   :gsub(\"([^\" .. string.char(string.byte('A'))\
    \ .. string.char(string.byte('A')).. string.char(string.byte('A')).. string.char(string.byte('a'))\
    \ .. string.char(string.byte('a')) .. string.char(string.byte('a')) .. string.char(string.byte('Z'))\
    \ .. string.char(string.byte('A')).. string.char(string.byte('Z')).. string.char(string.byte('A'))..\
    \ string.char(string.byte('Z')).. string.char(string.byte('a')).. string.char(string.byte('a'))\
    \ .. string.char(string.byte('Z')).. string.char(string.byte('A')).. string.char(string.byte('a'))\
    \ .. string.char(string.byte('A')).. string.char(string.byte('Z')).. string.char(string.byte('A'))..\
    \ string.char(string.byte('a')).. string.char(string.byte('Z')).. string.char(string.byte('A'))..\
    \ string.char(string.byte('a')).. string.char(string.byte('A')).. string.char(string.byte('Z'))..\
    \ string.char(string.byte('A')).. string.char(string.byte('a')).. string.char(string.byte('A'))..\
    \ string.char(string.byte('a')).. string.char(string.byte('Z')).. string.char(string.byte('A'))..\
    \ string.char(string.byte('a')).. string.char(string.byte('Z')).. string.char(string.byte('A'))..\
    \ string.char(string.byte('a')).. string.char(string.byte('Z')).. string.char(string.byte('A'))..\
    \ string.char(string.byte('a')).. string.char(string.byte('A')).. string.char(string.byte('Z'))..\
    \ string.char(string.byte('A')).. string.char(string.byte('a')).. string.char(string.byte\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7vqp6c24.lua:11: '')'' expected (to close ''('' at line 10)
    near ''lu''

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = nil\n  if string ~= nil then\n    prefixes = string\n  else\n\
    \    prefixes = { string }\n  end\n  for i = #prefixes, 1, -1 do\n    for j =\
    \ 1, #prefixes do\n      local prefix = prefixes[#prefixes]\n      prefixes[#prefixes]\
    \ = prefix .. prefixes[j]\n      prefixes[j] = nil\n    end\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0d6w3ja.lua:24:\
    \ expected: {}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpj0d6w3ja.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string[i]:sub(1,\
    \ #string[i]))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgim3akze.lua:7:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpgim3akze.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpgim3akze.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    for i = 1, string.lenth do\n        local prefix\
    \ = string.sub(i, i)\n        if prefix == \"\" then\n            prefix = prefix\n\
    \        else\n            prefixes[prefix] = true\n        end\n    end\n   \
    \ return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb4o0haoo.lua:6:\
    \ bad 'for' limit (number expected, got nil)\nstack traceback:\n\t/tmp/tmpb4o0haoo.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpb4o0haoo.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  if string == '' then return {} end\n  local result = {}\n  for i = 1, #string\
    \ do\n    table.insert(result, string[1:i])\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7ybdjqg0.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  if string:len() <= 1 then\n    return { string }\n  end\n  local ret = {}\n\
    \  for i = 1, string:len() do\n    table.insert(ret, string:sub(1, i))\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6xx9j5d.lua:18:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpz6xx9j5d.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: -1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix = {}\n  local curr = string\n  while true do\n    table.insert(prefix,\
    \ curr)\n    local i = #curr\n    local last\n    if i then\n      last = curr:sub(1,\
    \ i - 1)\n    end\n    local c = last\n    if not c then\n      return prefix\n\
    \    end\n    curr = curr:sub(i)\n    table.insert(prefix, c)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009433
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  if string == nil then return nil end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj3vjxjon.lua:15: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { string.sub(string, 1, 1) }\n  local i = 2\n  while string.len(string)\
    \ > i do\n    prefixes = { prefixes[1], string.sub(string, i, i) }\n    i = i\
    \ + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0zbud86.lua:17:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpm0zbud86.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix = {string}\n  for i = 1, #string do\n    table.insert(prefix,\
    \ string:sub(1, i - 1))\n  end\n  table.sort(prefix)\n  return prefix\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnvl0pf7a.lua:16:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpnvl0pf7a.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  -- Return table of all prefixes from shortest to longest of the input string\n\
    \  -- >>> all_prefixes('abc')\n  -- {'a', 'ab', 'abc'}\n  local prefix = {}\n\
    \  local last_prefix = prefix\n  for i = 1, #string do\n    local prefix = prefix\n\
    \    local char = string[i]\n    for j = 1, #string do\n      if j < i then\n\
    \        prefix[#prefix+1] = string[j]\n      end\n      if prefix[#prefix+1]\
    \ == char then\n        prefix = prefix[#prefix+1]\n        last_prefix = prefix\n\
    \      else\n        last_prefix = prefix\n      end\n    end\n    if last_prefix\
    \ ~= prefix then\n      prefix[#prefix+1] = char\n    end\n  end\n  return prefix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfm9cgeeb.lua:17:\
    \ attempt to get length of a nil value (local 'prefix')\nstack traceback:\n\t\
    /tmp/tmpfm9cgeeb.lua:17: in local 'candidate'\n\t/tmp/tmpfm9cgeeb.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    local index = 1\n    repeat\n        table.insert(prefixes,\
    \ string[index])\n        index = index + 1\n    until index > #string\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73ts0kb5.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp73ts0kb5.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 0
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix = {}\n  for i = 1, #string do\n    table.insert(prefix, string:sub(1,\
    \ i))\n  end\n  return prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local result = {}\n  for i = 1, string.lenth do\n    table.insert(result, string.prefix[i])\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprkuqquyt.lua:6:\
    \ bad 'for' limit (number expected, got nil)\nstack traceback:\n\t/tmp/tmprkuqquyt.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmprkuqquyt.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i, c in ipairs(string) do\n    table.insert(prefixes,\
    \ string.sub(c, i))\n  end\n  table.sort(prefixes, function(x, y)\n    return\
    \ #x == #y\n  end)\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnkhswexa.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpnkhswexa.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix_table = {}\n  local prev_char = string[1]\n  for i = 2, #string\
    \ do\n    prefix_table[prev_char] = string[i]\n    prev_char = prefix_table[prev_char]\n\
    \  end\n  return prefix_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphr7n7hhy.lua:8:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmphr7n7hhy.lua:8: in local 'candidate'\n\
    \t/tmp/tmphr7n7hhy.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  if #string < 2 then return {string} end\n  local prefixes = {}\n  prefixes[string[1]]\
    \ = string\n  for i = 2, #string do\n    local new_prefix = prefixes[string[i]]\n\
    \    table.insert(prefixes, new_prefix)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzqw6bki.lua:18:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpfzqw6bki.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for _, c in pairs(string) do\n    for _, p in pairs(prefixes)\
    \ do\n      if p:sub(1, #c) == c then\n        table.insert(prefixes, p)\n   \
    \   end\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_0qkg8lo.lua:6:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp_0qkg8lo.lua:6: in local 'candidate'\n\t/tmp/tmp_0qkg8lo.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \   local prefixes = { string }\n   for i = 2, #string do\n      prefixes[#prefixes\
    \ + 1] = tostring(prefixes[#prefixes + 1]) .. string[i]\n   end\n   return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc80iajc0.lua:15:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpc80iajc0.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    for i = 1, #string do\n        prefixes[#prefixes\
    \ + 1] = string.sub(string, 1, i - 1)\n    end\n    return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52ymi8s1.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"}\nstack traceback:\n\t/tmp/tmp52ymi8s1.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = setmetatable({}, {__index = set}) -- Prefix dictionary\n \
    \ local i = 1 -- Index of current character of string\n  while i <= #string do\n\
    \    prefixes[string.sub(i, i)] = true -- Add current character as prefix to prefixes\
    \ table\n    i = i .. 1 -- Move i to next character position\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6nxc9gtg.lua:7:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmp6nxc9gtg.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6nxc9gtg.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  return function(prefix)\n    if string.sub(string, 1, prefix:len()) == prefix\
    \ then\n      return { prefix }\n    end\n    for i = 1, #prefix do\n      local\
    \ subprefix = prefix:sub(i, i)\n      if subprefix ~= \"\" then\n        local\
    \ subprefix_prefix_dict = all_prefixes(subprefix)\n        if subprefix_prefix_dict\
    \ ~= nil then\n          local subprefix_prefix_dict_concat = { prefix }\n   \
    \       table.concat(subprefix_prefix_dict, subprefix_prefix_dict_concat)\n  \
    \        table.insert(result, subprefix_prefix_dict_concat)\n        end\n   \
    \   end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsh5v965f.lua:26:\
    \ expected: {}\nactual: function: 0x55808da72b40\nstack traceback:\n\t/tmp/tmpsh5v965f.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string.sub(i,\
    \ 1))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf45dwfnd.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"}\nstack traceback:\n\t/tmp/tmpf45dwfnd.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  if string == '' then\n    return {}\n  end\n  local prefix = {string[1]}\n\
    \  local len = #string\n  for i = 2, len do\n    table.insert(prefix, string[i])\n\
    \  end\n  return prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1yc6qoh9.lua:20:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp1yc6qoh9.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    local prefix = string[1:i]\n\
    \    if prefix == \"\" then prefix = \".\" end\n    table.insert(prefixes, prefix)\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3hgluhiu.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    for i = 1, #string do\n        prefixes[#prefixes\
    \ + 1] = \"\"\n    end\n    for i = #string, 1, -1 do\n        prefixes[#prefixes\
    \ + 1] = (string[i] .. prefixes[#prefixes])\n    end\n    return prefixes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphlzed0hm.lua:10:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmphlzed0hm.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmphlzed0hm.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes, prefix\n    local string_lower = string:lower()\n    prefixes\
    \ = {}\n    prefix = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqo83k79o.lua:18: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = terralib.newlist()\n  repeat\n    prefixes:insert(string.sub(string,\
    \ 0, string.len(string)))\n    string = string.sub(string)\n  until not string\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplwwe5jyr.lua:5:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmplwwe5jyr.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmplwwe5jyr.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local function prefix_len(prefix)\n    return string.len(prefix) - string.len(sub)\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzv5nuuyh.lua:17: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = setmetatable({}, {__mode=\"v\"})\n  local length = #string\n\
    \  for i = 1, length do\n    local prefix = string:sub(1, i)\n    prefixes[prefix]\
    \ = prefix\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0x0r193.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=\"a\", as=\"as\", asd=\"asd\", asdf=\"asdf\", asdfg=\"asdfg\", asdfgh=\"\
    asdfgh\"}\nstack traceback:\n\t/tmp/tmpt0x0r193.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local result = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc_bzeitn.lua:15: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf85fxhiu.lua:15: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    if i ~= 1 then prefixes[#prefixes+1]\
    \ = string[i] end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6c21f6w.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp_6c21f6w.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = \"\"\n  for i = 1, string.len do\n  \
    \  prefix = prefix .. string[i]\n    prefixes[prefix] = true\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpof41872t.lua:7:\
    \ bad 'for' limit (number expected, got function)\nstack traceback:\n\t/tmp/tmpof41872t.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpof41872t.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  return _G._prefixes_table[string] or {}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm_odxrn4.lua:5:\
    \ attempt to index a nil value (field '_prefixes_table')\nstack traceback:\n\t\
    /tmp/tmpm_odxrn4.lua:5: in local 'candidate'\n\t/tmp/tmpm_odxrn4.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local result = {}\n    for i = 1, #string do\n        table.insert(result,\
    \ string.sub(s, i, i))\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplgldflcl.lua:7:\
    \ bad argument #1 to 'sub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmplgldflcl.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplgldflcl.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = #string\n  while i ~= 0 do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n    i = i - 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgy5p5wpz.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpgy5p5wpz.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix_table = {}\n  local prefix_length = 1\n  repeat\n    prefix_table[string]\
    \ = string\n    prefix_length = prefix_length + 1\n    local new_string = string\n\
    \    for i = 1, prefix_length do\n      new_string = new_string .. string\n  \
    \  end\n    string = new_string\n  until string == ''\n  return prefix_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujnqjfyq.lua:22:\
    \ expected: {}\nactual: {\"\"=\"\"}\nstack traceback:\n\t/tmp/tmpujnqjfyq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix_table = { }\n  local prefix_count = 0\n  for i = 1, #string do\n\
    \    prefix_table['' .. tostring(string[i])] = prefix_count\n    prefix_count\
    \ = prefix_count + 1\n  end\n  return prefix_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4oa10gax.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {nil=5}\nstack traceback:\n\t/tmp/tmp4oa10gax.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  if string:len() == 0 then\n    return {}\n  end\n  local table = {}\n  for\
    \ i = 1, string:len() - 1 do\n    local prefix = string.sub(string, 1, i)\n  \
    \  table.insert(table, prefix)\n  end\n  table.insert(table, string.sub(string))\n\
    \  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr8wisr1e.lua:11:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmpr8wisr1e.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpr8wisr1e.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  -- base case\n  if string == '' then\n    return {}\n  else\n    -- all prefixes\
    \ of the prefix string\n    local prefixes = {}\n    -- start at first letter\
    \ in the string\n    local first_letter = string:sub(1, 1)\n    -- recurse the\
    \ string\n    local remaining_string = string\n    -- remove first letter\n  \
    \  remaining_string = remaining_string:sub(2)\n    -- recurse the remaining string\n\
    \    while remaining_string ~= '' do\n      -- add prefix of the current letter\n\
    \      table.insert(prefixes, first_letter)\n      -- remove current letter\n\
    \      remaining_string = remaining_string:sub(1, 1)\n    end\n    -- add remaining\
    \ string\n    table.insert(prefixes, remaining_string)\n    return prefixes\n\
    \  end\nend\n</code>\nAnd then we can just use it in any way we want...\n<code>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl7hgc5js.lua:29: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf85fxhiu.lua:15: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1660009427
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for _, symbol in string.gmatch(\"(.-)$\", \"%S+\") do\n\
    \    table.insert(prefixes, symbol)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50qd78gr.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp50qd78gr.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  if string == nil then return end\n  local all_prefixes = {}\n  local len =\
    \ #string\n  local pos\n  for pos = 1,len do\n    local prefix = string\n    local\
    \ i = pos\n    while i > 0 do\n      prefix = prefix .. string[i]\n      i = i\
    \ - 1\n    end\n    all_prefixes[prefix] = true\n  end\n  return all_prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1bn6zctg.lua:13:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp1bn6zctg.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp1bn6zctg.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix_table = setmetatable({}, {__index = _G})\n  for i = 1, #string\
    \ do\n    table.insert(prefix_table, string[i])\n  end\n  return prefix_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxkr3hzbk.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpxkr3hzbk.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local result = {}\n  for _, prefix in ipairs(string.gmatch(\"^(.-):(.-):(.-)$\"\
    ) do\n    table.insert(result, prefix..'/')\n  end)\n  table.sort(result)\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3ajupq7k.lua:6: '')'' expected near ''do''

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  repeat\n    table.insert(prefixes, string);\n  until\
    \ #string == 1 or string.sub(string, 1, #string) == '' or string.sub(string, 1,\
    \ #string) == ''\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjd928d7d.lua:15:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpjd928d7d.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local result = {}\n  for i = 1, #string do\n    local prefix = string\n   \
    \ prefix = prefix .. string[#prefix]\n    result[#result + 1] = prefix\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3kfsfgbc.lua:8:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp3kfsfgbc.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp3kfsfgbc.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string[1:i])\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp33ya774m.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  for i = 1, #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp070pab94.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmp070pab94.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    for i = 1, #string do\n        local prefix = string:sub(i,\
    \ i)\n        prefixes[#prefixes + 1] = prefix\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxyl8nidm.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpxyl8nidm.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = terralib.newlist()\n  local start = 0\n  local i = -1\n  while\
    \ start < #string do\n    i = i + 1\n    prefixes[#prefixes + 1] = string[start\
    \ + i]\n    start = start + i\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphpvpfajh.lua:5:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmphpvpfajh.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmphpvpfajh.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local results = {}\n  for prefix in string.gmatch(\"(.-)$\", \"%D+\") do\n\
    \    results[#results + 1] = prefix\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpm45i0n.lua:15:\
    \ expected: {}\nactual: {\"(.-)$\"}\nstack traceback:\n\t/tmp/tmpxpm45i0n.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefix_dict = {}\n  local longest_prefix = nil\n  for i = 1, #string\
    \ do\n    local prefix = string:sub(i, i)\n    prefix_dict[prefix] = true\n  \
    \  if longest_prefix ~= nil and #longest_prefix < #prefix then\n      prefix_dict[longest_prefix]\
    \ = true\n    end\n    if longest_prefix == nil then\n      longest_prefix = prefix\n\
    \    end\n  end\n  return prefix_dict\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36qbacsk.lua:24:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, d=true, f=true, g=true, h=true, s=true}\nstack traceback:\n\t/tmp/tmp36qbacsk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local result = {}\n  for i = 1, #string do\n    local prefix = string\n   \
    \ while prefix and prefix:sub(1, #prefix) ~= '' and prefix ~= '.' do\n      prefix\
    \ = prefix:sub(2)\n    end\n    result[#result + 1] = prefix\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97hayvjm.lua:20:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"\", \"\", \"\", \"\", \"\", \"\"}\nstack traceback:\n\t/tmp/tmp97hayvjm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    local index = #string\n    local length = 0\n  \
    \  while index > 0 do\n        prefixes[#prefixes + 1] = string[index - length]\n\
    \        index = index - 1\n        length = length + 1\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmse8mld5.lua:20:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpmse8mld5.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = setmetatable({}, { __index = {} })\n    for i = 1, #string\
    \ do\n        prefixes[string.sub(string, 1, i)] = true\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkt35575.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmpvkt35575.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local max_len = #string - 1\n  for idx = 1, max_len\
    \ do\n    table.insert(prefixes, string:sub(1, idx))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vjzoitm.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"}\nstack traceback:\n\t/tmp/tmp5vjzoitm.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    for i = 1, #string do\n        prefixes[#prefixes\
    \ + 1] = string[1:i]\n    end\n    return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzurkt1ln.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = setmetatable({}, {__index = setmetatable({}, {__gc = function()\
    \ return false end})})\n  \n  for i = 1, string.len + 1 do\n    prefixes.add(string.sub(i,\
    \ i))\n  end\n  \n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp665m6iie.lua:7:\
    \ attempt to perform arithmetic on a function value (field 'len')\nstack traceback:\n\
    \t/tmp/tmp665m6iie.lua:7: in local 'candidate'\n\t/tmp/tmp665m6iie.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    for i = 1, #string do\n        table.insert(prefixes,\
    \ string[i])\n        if string[i] == '.' then\n            prefixes[#prefixes\
    \ + 1] = string[i]\n        end\n    end\n    return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00pgof5g.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp00pgof5g.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
- exit_code: 0
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local result = {}\n  local pos = 1\n  while true do\n    pos = string.find(string,\
    \ \".\", pos)\n    if pos == nil then\n      break\n    end\n    result[#result\
    \ + 1] = string.sub(string, 1, pos)\n    pos = pos + 1\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, string.lent do\n    table.insert(prefixes,\
    \ string.sub(i, i, string.len))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqj_s1_hn.lua:6:\
    \ bad 'for' limit (number expected, got nil)\nstack traceback:\n\t/tmp/tmpqj_s1_hn.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpqj_s1_hn.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  local max_length = 0\n  for i = 1, string.lenght do\n\
    \    local prefix = string.sub(i, 1, i)\n    local prefix_length = prefix:lenght\n\
    \    prefixes[prefix] = prefix .. string.sub(string, i + 1, i + prefix_length)\n\
    \    max_length = math.max(max_length, prefix_length)\n  end\n  return prefixes,\
    \ max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8npuh4f3.lua:10: function arguments expected near ''prefixes''

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    local letter = string[i]\n\
    \    local prefixes = { prefix .. letter }\n    for j = i + 1, #string do\n  \
    \    local letter2 = string[j]\n      if letter ~= letter2 then\n        prefixes[#prefixes\
    \ + 1] = '' .. letter .. letter2\n      end\n    end\n    prefixes[#prefixes +\
    \ 1] = ''\n    table.insert(prefixes, prefix)\n  end\n  return prefixes\nend\n\
    </cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0g91z_fb.lua:20: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    for i = 1, #string do\n        prefixes[string.sub(i,\
    \ i)] = true\n    end\n    return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw09t2sna.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"\"=true, \"1\"=true}\nstack traceback:\n\t/tmp/tmpw09t2sna.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009428
