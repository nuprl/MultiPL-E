name: HumanEval_30_get_positive
language: lua
prompt: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1, 2,\
  \ -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
  \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
  \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local ret = {}\n  for _, v in ipairs(l) do\n    if v ~= 0 then\n\
    \      table.insert(ret, v)\n    end\n  end\n  return ret\nend", "   if #l ==\
    \ 0 then return {} end\n   local t = {}\n   for i = 1, #l do\n      if l[i] >\
    \ 0 then table.insert(t, l[i]) end\n   end\n   return t\nend", "  local t = {}\n\
    \  for _, x in ipairs(l) do\n    if x > 0 then\n      t[#t + 1] = x\n    end\n\
    \  end\n  return t\nend", "  return setmetatable(l, {__index = function(self,\
    \ index)\n      local result\n      for _, v in ipairs(index) do\n        if v\
    \ < 0 then\n          result = {v, true}\n          break\n        end\n     \
    \ end\n      return result\n    end})\nend", "  local positive = {}\n  for _,\
    \ v in pairs(l) do\n    if v > 0 then\n      table.insert(positive, v)\n    end\n\
    \  end\n  return positive\nend", "  local r = {}\n  for i = 1, #l do\n    if l[i]\
    \ >= 0 then\n      table.insert(r, l[i])\n    end\n  end\n  return r\nend", " \
    \ return setmetatable({\n    positive_numbers = unpack(l),\n    negative_numbers\
    \ = {},\n  }, mt)\nend", "  local positive = {}\n  for i = 1, #l do\n    if l[i]\
    \ > 0 then\n      table.insert(positive, l[i])\n    end\n  end\n  return positive\n\
    end", "  if #l == 0 then\n    return {}\n  elseif #l == 1 then\n    local x =\
    \ l[1]\n    if x >= 0 then return {x} end\n  end\n  local new_l = l[1]\n  for\
    \ i = 2, #l do\n    if l[i] < 0 then\n      new_l = l[i]\n    else\n      break\n\
    \    end\n  end\n  return new_l\nend", "  local positive = {}\n  for _, v in ipairs(l)\
    \ do\n    if v > 0 then\n      table.insert(positive, v)\n    end\n  end\n  return\
    \ positive\nend", "    local positive = {}\n    for k, v in pairs(l) do\n    \
    \    if v > 0 then\n            table.insert(positive, v)\n        end\n    end\n\
    \    return positive\nend", "  local new_l = {}\n  for i = 1, #l do\n    if l[i]\
    \ > 0 then new_l[#new_l + 1] = l[i] end\n  end\n  return new_l\nend", "  local\
    \ positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(positive,\
    \ l[i]) end\n  end\n  return table.concat(positive)\nend", "  local result = {}\n\
    \  for i=1,#l do table.insert(result, l[i]) end\n  table.sort(result)\n  return\
    \ result\nend", "    local r = {}\n    for _, v in ipairs(l) do if v >= 0 then\
    \ table.insert(r, v) end end\n    return r\nend", "    local new_l = {}\n    for\
    \ k, v in ipairs(l) do\n        if v >= 0 then\n            new_l[#new_l + 1]\
    \ = v\n        end\n    end\n    return new_l\nend", "  local t = {}\n  for i\
    \ = 1, #l do\n    if l[i] > 0 then table.insert(t, l[i]) end\n  end\n  return\
    \ t\nend", "  local p = {}\n  for i = 1, #l do\n    p[#p+1] = l[i]\n  end\n  return\
    \ table.sort(p)\nend", "  local new_l = {}\n  for i = 1, #l do new_l[i] = l[i]\
    \ end\n  for i = 1, #l do\n    if l[i] < 0 then\n      new_l[i] = l[i] + 0\n \
    \   end\n  end\n  return new_l\nend", "  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if v ~= nil then\n      if v >= 0 then\n        out[#out + 1] = v\n\
    \      else\n        break\n      end\n    end\n  end\n  return out\nend", " \
    \ return set:new(unpack(\n    unpack(l, 1, math.min(#l, #set))\n  ):map(\n   \
    \ function(x)\n      if x ~= nil and x > 0 then\n        return x\n      end\n\
    \    end\n  ))\nend", "  if #l == 0 then return nil end\n  local positive = {}\n\
    \  for i = 1, #l do\n    if l[i] > 0 then table.insert(positive, l[i]) end\n \
    \ end\n  return positive\nend", "    local r = {} -- Return value\n    for i,\
    \ v in ipairs(l) do\n        if v > 0 then\n            r[#r + 1] = v\n      \
    \  end\n    end\n    return r\nend", "  local result = setmetatable({}, {\n  \
    \  __index = function(t, k)\n      local value = t[k]\n      if not value or value\
    \ < 0 then\n        error(string.format(\"key %s not positive in table %s\", k,\
    \ t))\n      else\n        t[k] = math.abs(value)\n      end\n      return value\n\
    \    end,\n  })", "  local i, n = 0, #l\n  local l2 = {}\n  local l3 = {}\n  while\
    \ i < n do\n    if l[i] > 0 then l2[#l2 + 1] = l[i] end\n    if l[i] < 0 then\
    \ l3[#l3 + 1] = -l[i] end\n    i = i + 1\n  end\n  return l2, l3\nend", "  local\
    \ positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ i)\n    end\n  end\n  return positive\nend", "  local positive = {}\n  for _,\
    \ v in ipairs(l) do\n    if v >= 0 then\n      table.insert(positive, v)\n   \
    \ end\n  end\n  return positive\nend", "    local positive = {}\n    for _, v\
    \ in pairs(l) do table.insert(positive, v) end\n    return table.sort(positive)\n\
    end", "  if l==nil then return nil end\n  local positive = {}\n  for i=1,#l do\n\
    \    if l[i] > 0 then\n      table.insert(positive, i)\n    end\n  end\n  return\
    \ positive\nend", "  local positive = {}\n  local is_positive", "    local positive\
    \ = {}\n    for _, v in ipairs(l) do\n        if v <= 0 then\n            table.insert(positive,\
    \ v)\n        end\n    end\n    return positive\nend", "  local ret = {}\n  for\
    \ i, v in pairs(l) do\n    if v ~= 0 then\n      table.insert(ret, v)\n    end\n\
    \  end\n  return ret\nend", '  return setmetatable(l, { __tostring = function()
    return "positive" end, __index = function(self, k) return self:item(k) > 0 end
    }) end', "    local rval = {}\n    for _, v in ipairs(l) do\n        if v ~= 0\
    \ then\n            rval[#rval + 1] = v\n        end\n    end\n    return rval\n\
    end", "  local t = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(t,\
    \ l[i]) end\n  end\n  return t\nend", "  local positive = {}\n  local p = 1\n\
    \  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive, v)\n\
    \      p = v\n    end\n  end\n  return p\nend", "  local positive = {}\n  for\
    \ k, v in pairs(l) do\n    if v > 0 then table.insert(positive, v) end\n  end\n\
    \  return positive\nend", "    local positive = {}\n    for i, v in pairs(l) do\n\
    \        if v > 0 then\n            table.insert(positive, v)\n        end\n \
    \   end\n    return positive\nend", "    local res = {}\n    for i, v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(res, v)\n        end\n \
    \   end\n    return res\nend", "  local rs = {}\n  for i, v in pairs(l) do\n \
    \   if v > 0 then table.insert(rs, v) end\n  end\n  return rs\nend", "  local\
    \ positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend", "  if #l == 0 then\n    return\
    \ {}\n  end\n  local t = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(t,\
    \ l[i])\n    end\n  end\n  return t\nend", "  local positive = {}\n  for i = 1,\
    \ #l do\n    if l[i] > 0 then\n      table.insert(positive, l[i])\n    end\n \
    \ end\n  return positive\nend", "  local positive = {}\n  for i = 1, #l do\n \
    \   if l[i] > 0 then\n      table.insert(positive, i)\n    end\n  end\n  return\
    \ positive\nend", "  for _, v in ipairs(l) do\n    if v ~= 0 and v ~= math.floor(v)\
    \ then\n      return v\n    end\n  end\nend", "  return setmetatable(\n    setmetatable(\n\
    \      {}, {\n        __index = function(t, k)\n          if math.abs(k) > 0 then\n\
    \            t[k] = -t[k]\n          end\n          return t[k]\n        end\n\
    \      }\n    ), {\n      __tostring = function() return \"[\" .. table.concat(l,\
    \ \", \") .. \"]\" end\n    }\n  )\nend", "  local r = {}\n  for i = 1, #l do\n\
    \    if l[i] > 0 then\n      table.insert(r, l[i])\n    end\n  end\n  return r\n\
    end", "  local positive = {}\n  for _, v in pairs(l) do\n    if v > 0 then\n \
    \     table.insert(positive, v)\n    end\n  end\n  return positive\nend", "  return\
    \ setmetatable(l, { __tostring = function() return string.format(\"{%s}\", table.concat(l,\
    \ \",\")) end})\nend", "  local positive = {}\n  for i = 1, #l do\n    if l[i]\
    \ > 0 then\n      table.insert(positive, l[i])\n    end\n  end\n  return positive\n\
    end", "    local positive = {}\n    for i, v in ipairs(l) do\n        if v > 0\
    \ then table.insert(positive, v) end\n    end\n    return positive\nend", "  local\
    \ positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend", "    local new_l = {}\n    for\
    \ i = 1, #l do\n        if l[i] > 0 then\n            new_l[#new_l + 1] = l[i]\n\
    \        end\n    end\n    return new_l\nend", "  local i, n = 1, #l\n  local\
    \ l2 = {}\n  while i < n do\n    table.insert(l2, l[i])\n    if l[i] < 0 then\n\
    \      i = i + 1\n    end\n  end\n  return l2\nend", "    local new_l = {}\n \
    \   for idx, v in ipairs(l) do\n        if v > 0 then\n            new_l[#new_l\
    \ + 1] = v\n        end\n    end\n    return new_l\nend", "  local positives =\
    \ {}\n  for _, v in ipairs(l) do\n    if v <= 0 then\n      return nil\n    end\n\
    \    table.insert(positives, v)\n  end\n  return positives\nend", "  if l == nil\
    \ then return nil end\n  local positive = {}\n  for _, v in ipairs(l) do\n   \
    \ if v > 0 then table.insert(positive, v) end\n  end\n  return positive\nend",
  "  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend", "  local ret = {}\n  for i =\
    \ 1, #l do\n    if l[i] > 0 then\n      table.insert(ret, l[i])\n    end\n  end\n\
    \  return ret\nend", "   local positive = {}\n   for _, v in ipairs(l) do\n  \
    \    if v > 0 then\n         table.insert(positive, v)\n      end\n   end\n  \
    \ return positive\nend", "  local positive = {}\n  for _, v in ipairs(l) do\n\
    \    if v ~= 0 then table.insert(positive, v) end\n  end\n  return positive\n\
    end", "    local t = {}\n    for _, e in ipairs(l) do\n        if e > 0 then\n\
    \            t[#t + 1] = e\n        end\n    end\n    return t\nend", "  local\
    \ v = {}\n  for _, x in ipairs(l) do\n    if not x then\n      table.insert(v,\
    \ 0)\n    else\n      table.insert(v, x)\n    end\n  end\n  table.sort(v)\n  return\
    \ v\nend", "    local positive = {}\n    for i = 1, #l do\n        if l[i] > 0\
    \ then\n            table.insert(positive, i)\n        end\n    end\n    return\
    \ positive\nend", "  local positives = {}\n  for _, v in pairs(l) do\n    if v\
    \ > 0 then table.insert(positives, v) end\n  end\n  return positives\nend", " \
    \ return setmetatable(l, { get = function(self, k)\n    return k > 0 and self\
    \ or nil\n  end})\nend", "  local result = {}\n  for _, v in ipairs(l) do table.insert(result,\
    \ v) end\n  table.sort(result)\n  return result\nend", "  local new_table = {}\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v >= 0 then\n     \
    \ table.insert(new_table, v)\n      table.insert(positive, v)\n    end\n  end\n\
    \  table.sort(new_table)\n  table.sort(positive)\n  table.insert(new_table, table.concat(positive,\
    \ \",\"))\n  return new_table\nend", "  local t = {}\n  for _, v in ipairs(l)\
    \ do t[v <= 0 and 0 or v] = v end\n  return t\nend", "  local result = {}\n  for\
    \ _, b in ipairs(l) do table.insert(result, b) end\n  return setmetatable(result,\
    \ { get = function(self) return self:select(function(v) return v > 0 end) end})\n\
    end", "  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n\
    \      table.insert(positive, v)\n    end\n  end\n  return positive\nend", " \
    \ local ret = {}\n  local i = 1\n  repeat\n    ret[#ret + 1] = l[i]\n    i = i\
    \ + 1\n  until l[i] == 0\n  return ret\nend", "  local positive = {}\n  local\
    \ is_positive = nil\n  for _, elt in ipairs(l) do\n    if elt then\n      if is_positive\
    \ == false then\n        is_positive = true\n      else\n        if is_positive\
    \ and elt > 0 then\n          positive = positive and {positive, elt}\n      \
    \  else\n          positive = positive and {elt}\n        end\n      end\n   \
    \ end\n  end\n  return positive\nend", "    local positive = {}\n    for _, v\
    \ in ipairs(l) do\n        if v ~= nil then\n            table.insert(positive,\
    \ v)\n        end\n    end\n    return positive\nend", "  return setmetatable(l:map(function(a)\
    \ return a if a > 0 then a end end), {__index=l})\nend", "  local pos  = {}\n\
    \  local idx  = 1\n  for _, v in ipairs(l) do\n    if v ~= 0 then\n      table.insert(pos,\
    \ v)\n    end\n    if idx % 2 == 1 then table.insert(pos, 0) end\n    idx = idx\
    \ + 1\n  end\n  return pos\nend", "  if type(l) == \"table\" then\n    local res\
    \ = {}\n    for _, v in ipairs(l) do\n      if v then table.insert(res, v) end\n\
    \    end\n    return res\n  elseif l == nil then\n    return nil\n  else\n   \
    \ local v = 0\n    for _, v in ipairs(l) do return v end\n  end\nend", "  local\
    \ ret = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(ret, l[i]) end\n\
    \  end\n  return ret\nend", "  local positives = {}\n  for _, v in ipairs(l) do\n\
    \    if v > 0 then table.insert(positives, v) end\n  end\n  return positives\n\
    end", "  local s = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(s,\
    \ l[i]) end\n  end\n  return s\nend", "    local v = {}\n    for _, v in pairs(l)\
    \ do\n        if v >= 0 then\n            return v\n        end\n    end\n   \
    \ return nil\nend", "  local result = {}\n  for _, x in ipairs(l) do\n    if x\
    \ >= 0 then\n      result[#result + 1] = x\n    end\n  end\n  return result\n\
    end", "  local positive = {}\n  for k, v in pairs(l) do\n    table.insert(positive,\
    \ v and math.abs(v))\n  end\n  return table.sort(positive)\nend", "  local results\
    \ = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(results, l[i]) end\n\
    \  end\n  return results\nend", "  local positive = {}\n  for i = 1, #l do\n \
    \   if l[i] > 0 then\n      table.insert(positive, l[i])\n    end\n  end\n  return\
    \ positive\nend", "  local positive = {}\n  for i, v in ipairs(l) do\n    if v\
    \ then table.insert(positive, v) end\n  end\n  return positive\nend", "  if type(l)\
    \ ~= 'table' then return {l} end\n  local result = {}\n  for i, v in pairs(l)\
    \ do\n    if v >= 0 then\n      table.insert(result, v)\n    end\n  end\n  return\
    \ result\nend", "  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\
    \ table.insert(positive, l[i]) end\n  end\n  return positive\nend", "    local\
    \ p = terralib.newlist()\n    for i, v in ipairs(l) do\n        if v ~= 0 then\
    \ p:insert(v) end\n    end\n    return p\nend", "  local positive = {}\n  for\
    \ _, v in pairs(l) do positive[#positive + 1] = v end\n  return positive\nend",
  "  local result = {}\n  for _, v in ipairs(l) do result[v] = v end\n  table.sort(result)\n\
    \  local last_value = -1\n  for k, v in pairs(result) do\n    if v > 0 then\n\
    \      if last_value ~= -1 then\n        result[last_value] = k\n      end\n \
    \     last_value = k\n    end\n  end\n  if last_value ~= -1 then\n    result[last_value]\
    \ = k\n  end\n  return result\nend", "  if #l == 0 then return {} end\n  local\
    \ n = l[1]\n  local v = nil\n  if n ~= nil then\n    v = n\n    for i = 2, #l\
    \ do\n      if l[i] > 0 then\n        v = nil\n        break\n      elseif v ==\
    \ nil then\n        v = l[i]\n      end\n    end\n  end\n  return v\nend", " \
    \ return setmetatable(l, { __tostring = function() return \"not positive numbers\"\
    \ end })\nend", "  local out = {}\n  for i = 1, #l do\n    if not l[i] then\n\
    \      break\n    end\n    out[#out + 1]=l[i]\n  end\n  return out\nend", "  local\
    \ result = {}\n  for _, value in pairs(l) do\n    if value >= 0 then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend", "  return setmetatable(l\
    \ == nil and {} or l, {__index = function(self, i)\n      assert(i >= 0 and i\
    \ < self.size, 'index ' .. i .. ' not in table')\n      return self:index(i)\n\
    \    end})\nend", "   local result = {}\n   for _, value in pairs(l) do \n   \
    \   if value >= 0 then table.insert(result, value) end\n   end\n   return result\n\
    end", "  local p = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(p,\
    \ l[i])\n    end\n  end\n  return p\nend", "  local positive = {}\n  for _, v\
    \ in ipairs(l) do\n    if v ~= 0 then\n      table.insert(positive, v)\n    end\n\
    \  end\n  return positive\nend", "  local positive = {}\n  for _, v in ipairs(l)\
    \ do\n    if v > 0 then\n      table.insert(positive, v)\n    end\n  end\n  return\
    \ positive\nend", "  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0\
    \ then\n      table.insert(positive, i)\n    end\n  end\n  return positive\nend",
  "    local pos = {}\n    for _, v in ipairs(l) do\n        if v ~= 0 then\n    \
    \        table.insert(pos, v)\n        end\n    end\n    return pos\nend", " \
    \ local positive = {}\n  for i = 1, #l do\n    local v = l[i]\n    if v ~= 0 and\
    \ v ~= -v then\n      table.insert(positive, v)\n    end\n  end\n  return table.concat(positive)\n\
    end", "  local ret = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(ret,\
    \ l[i]) end\n  end\n  return ret\nend", "  if type(l) == \"table\" then\n    local\
    \ t = {}\n    for _, value in ipairs(l) do\n      if value >= 0 then\n       \
    \ table.insert(t, value)\n      end\n    end\n    return t\n  else\n    local\
    \ v = {}\n    for _, value in ipairs(l) do\n      if value >= 0 then\n       \
    \ table.insert(v, value)\n      end\n    end\n    return v\n  end\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    if v ~= 0 and v ~= math.nan then table.insert(t,\
    \ v) end\n  end\n  return t\nend", "  local ret = {}\n  for _, value in ipairs(l)\
    \ do\n    if value >= 0 then\n      table.insert(ret, value)\n    end\n  end\n\
    \  return ret\nend", "  local p = nil\n  if #l > 0 then\n    local n = l[1]\n\
    \    p = n and {n} or {}\n    for i = 2, #l do\n      if l[i] > 0 then\n     \
    \   p = p or {i+1}\n      end\n    end\n  end\n  return p\nend", "    local pos,\
    \ neg = 0, 0\n    for i, v in ipairs(l) do\n        if v >= 0 then\n         \
    \   pos = pos + 1\n        else\n            neg = neg + 1\n        end\n    end\n\
    \    return setmetatable(l, { __index = function(t, i)\n        if i < pos then\n\
    \            return nil\n        elseif i == pos then\n            return 1\n\
    \        elseif i == neg then\n            return -1\n        else\n         \
    \   return l[i]\n        end\n    end})\nend", "    local positive = {}\n    for\
    \ _, v in ipairs(l) do\n        if v then table.insert(positive, v) end\n    end\n\
    \    return positive\nend", "  local function filter(item)\n    return item >\
    \ 0 and item\n  end\n  local result = {}\n  for i = 1, #l do\n    table.insert(result,\
    \ filter(l[i]))\n  end\n  return result\nend", "  local rs = {}\n  for i = 1,\
    \ #l do\n    if l[i] > 0 then\n      table.insert(rs, l[i])\n    end\n  end\n\
    \  return rs\nend", "  return setmetatable(l, { __tostring = function() return\
    \ \"()\" end })\nend", "  for i = 1, #l do\n    if l[i] > 0 then return true end\n\
    \  end\n  return false\nend", "  local t = {}\n  for _, v in ipairs(l) do t[abs(v)]\
    \ = v end\n  return setmetatable(t, {__tostring = string.reverse})\nend", "  local\
    \ pos = {}\n  for i, v in ipairs(l) do\n    if v ~= nil then\n      table.insert(pos,\
    \ v)\n    end\n  end\n  return pos\nend", "  local positive = {}\n  for _, v in\
    \ pairs(l) do\n    if v > 0 then\n      table.insert(positive, v)\n    end\n \
    \ end\n  return positive\nend", "  local l2 = {}\n  for i, v in ipairs(l) do l2[v]\
    \ = i end\n  local positive = {}\n  for k, v in pairs(l2) do\n    if v == 0 then\n\
    \      table.insert(positive, v)\n    elseif positive[v] == nil then\n      positive[v]\
    \ = k\n    end\n  end\n  table.sort(positive)\n  local new = {}\n  for k, v in\
    \ pairs(positive) do new[new[v]] = k end\n  return new\nend", "  local new_l =\
    \ {}\n  for i = 1, #l do\n    local new_entry = l[i]\n    if not new_entry then\n\
    \      new_entry\n    elseif new_entry < 0 then\n      table.insert(new_l, new_entry\
    \ + 0)\n    else\n      table.insert(new_l, new_entry)\n    end\n  end\n  return\
    \ new_l\nend", "  local t = {}\n  for k, v in pairs(l) do\n    if v > 0 then\n\
    \      t[k] = v\n    end\n  end\n  return t\nend", "  local result = {}\n  for\
    \ _, x in pairs(l) do\n    if x > 0 then table.insert(result, x) end\n  end\n\
    \  return result\nend", "  local positive = {}\n  for _, v in pairs(l) do table.insert(positive,\
    \ v) end\n  return setmetatable(positive, mt)\nend", "    local result = {}\n\
    \    for k, v in ipairs(l) do\n        if v > 0 then\n            result[#result\
    \ + 1] = v\n        end\n    end\n    return result\nend", "  local ret = {}\n\
    \  for _, x in ipairs(l) do if x >= 0 then table.insert(ret, x) end end\n  return\
    \ ret\nend", "  local positives = {}\n  for _, v in ipairs(l) do\n    if v > 0\
    \ then\n      table.insert(positives, v)\n    end\n  end\n  return table.concat(positives,\
    \ \",\")\nend", "  local positive = {}\n  for k, v in pairs(l) do\n    if v ~=\
    \ 0 and (v > 0 or v < -1) then\n      table.insert(positive, v)\n    end\n  end\n\
    \  return positive\nend", "  local v = {}\n  for i = 1, #l do\n    if l[i] > 0\
    \ then\n      table.insert(v, l[i])\n    end\n  end\n  return v\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n            t[#t\
    \ + 1] = v\n        end\n    end\n    return t\nend", "   local t = {}\n   for\
    \ i = 1, #l do t[i] = l[i] end\n   for i = 1, #t do if t[i] < 0 then t[i] = 0\
    \ end end\n   return t\nend", "  local t = {}\n  for _, v in pairs(l) do\n   \
    \ if v ~= 0 and v ~= math.min(v) then\n      table.insert(t, v)\n    end\n  end\n\
    \  return t\nend", "    local ret = {}\n    for i=1, #l do\n        if l[i] >\
    \ 0 then\n            table.insert(ret, l[i])\n        end\n    end\n    return\
    \ ret\nend", "  if #l == 0 then return nil end\n  local s = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] <= 0 then break end\n    table.insert(s, l[i])\n  end\n \
    \ return s\nend", "  return setmetatable(\n    {\n      [\"+\"] = function(a,\
    \ b) return a > 0 and a or b; end,\n      [\"-\"] = function(a, b) return a <\
    \ 0 and a or b; end,\n      [\"*\"] = function(a, b) return a * b end,\n     \
    \ [\"/\"] = function(a, b) return a / b end,\n      [\"<\"] = function(a, b) return\
    \ a < b; end,\n      [\"<=\"] = function(a, b) return a <= b; end,\n      [\"\
    ==\"] = function(a, b) return a == b; end,\n      [\"~=\"] = function(a, b) return\
    \ a ~= b; end,\n      [\"and\"] = function(a, b) return a and b; end,\n      [\"\
    or\"] = function(a, b) return a or b; end,\n      [\"max\"] = function(a, b) return\
    \ math.max(a, b); end,\n      [\"min\"] = function(a, b) return math.min(a, b);\
    \ end,\n      [\"len\"] = function(a, b) return #a + #b; end,\n    },\n    l\n\
    \  )\nend", "  return setmetatable(l, { __index = function(t) return setmetatable({},\
    \ { __index = function(t,k) return k ~= nil and t[k] >= 0 and t[k] or 0 end })\
    \ end })\nend", "  if l == nil then return nil end\n  local i, n = 1, #l\n  --\
    \ The loop body is executed only once for the first element.\n  -- If there is\
    \ only one element, we exit immediately.\n  while i < n do\n    local e = l[i]\n\
    \    if e < 0 then return nil end\n    i = i + 1\n  end\n  return l\nend", " \
    \ local l2 = {}\n  for _, _ in pairs(l) do\n    if l[_] > 0 then\n      table.insert(l2,\
    \ l[_])\n    end\n  end\n  return l2\nend", "  local t\n  if #l == 0 then\n  \
    \  return l\n  end\n  if type(l[1]) == \"number\" then\n    t = {}\n    for i\
    \ = 1, #l do\n      if l[i] > 0 then\n        t[#t + 1] = l[i]\n      end\n  \
    \  end\n    if #t == 0 then\n      return t\n    else\n      return t\n    end\n\
    \  else\n    if type(l[1]) == \"table\" then\n      local result = {}\n      for\
    \ _, v in ipairs(l) do\n        if v > 0 then\n          result[#result + 1] =\
    \ v\n        end\n      end\n      if #result == 0 then\n        return result\n\
    \      else\n        return result\n      end\n    else\n      print(type(l))\n\
    \      assert(false, \"Unknown type for get_positive\")\n    end\n  end\nend",
  "  local positive = {}\n  for i, v in ipairs(l) do\n    if v >= 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend", "  local p = {}\n  for i = 1, #l\
    \ do\n    if l[i] > 0 then\n      p[i] = l[i]\n    end\n  end\n  return p\nend",
  "  if l == nil then return end\n  local result = {}\n  for _, v in ipairs(l) do\n\
    \    if v > 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\n\
    end", "    local new_list = {}\n    local new_number\n    for _, _ in ipairs(l)\
    \ do\n        if new_number and new_number > 0 then\n            new_list[#new_list\
    \ + 1] = new_number\n            new_number = nil\n        else\n            new_number\
    \ = _\n        end\n    end\n    return new_list or l\nend", "  return setmetatable(\n\
    \    {\n      __index = function(t, k)\n        return t[k]\n      end,\n    },\n\
    \    l\n  )\nend", "    local r = {}\n    for _,v in ipairs(l) do\n        if\
    \ v ~= 0 then table.insert(r, v) end\n    end\n    return r\nend", "  local result\
    \ = {}\n  for _, _ in pairs(l) do\n    if _ > 0 then table.insert(result, 1) end\n\
    \  end\n  return result\nend", "  local result = setmetatable({}, {__index = _G})\n\
    \  for _, v in ipairs(l) do\n    if v > 0 then\n      result[#result + 1] = v\n\
    \    end\n  end\n  return result\nend", "  local ln = #l\n  -- Skip over non-positive\
    \ elements.\n  for i = 1, ln do\n    if not l[i] then break end\n  end\n  -- Return\
    \ only the positive numbers.\n  return setmetatable(l, { __index = function(t,\
    \ k)\n      local ln = #t\n      -- Return all numbers greater than or equal to\
    \ k.\n      for i = 1, ln do\n        if not t[i] or t[i] <= k then break end\n\
    \      end\n      return t\n    end})\nend", "  if l==nil then return nil end\n\
    \  local out = {}\n  for i=1,#l do\n    if l[i]<0 then out[#out+1]=l[i] end\n\
    \  end\n  return out\nend", "  local positive = {}\n  for _, v in ipairs(l) do\n\
    \    if v > 0 then\n      table.insert(positive, v)\n    end\n  end\n  return\
    \ positive\nend", "  local r = {} -- {value, [index of element]}\n  for i, v in\
    \ ipairs(l) do\n    if v >= 0 then\n      table.insert(r, v)\n    end\n  end\n\
    \  return r\nend", "  local r = {}\n  for i, v in ipairs(l) do\n    if v ~= 0\
    \ then\n      r[#r+1] = v\n    end\n  end\n  return r\nend", "  local t = {}\n\
    \  for k, v in pairs(l) do \n    if not v < 0 then t[k] = v end\n  end\n  return\
    \ t\nend", "  local positive = {}\n  for i=1,#l do positive[#positive+1] = l[i]\
    \ end\n  for i=#positive,1,-1 do positive[#positive] = positive[i-1] end\n  return\
    \ positive\nend", "  local positive = {}\n  for _, n in pairs(l) do\n    if n\
    \ > 0 then\n      table.insert(positive, n)\n    end\n  end\n  return positive\n\
    end", "  local r\n  \n  r = {}\n  for _,v in ipairs(l) do r[#r+1] = v and v end\n\
    \  return r\nend", "  if #l == 0 then return {} end\n  local ret = {}\n  local\
    \ s = setmetatable({}, {\n    __index = function (t, key)\n      if key == ''\
    \ or t < 0 then return nil end\n      ret[#ret + 1] = key\n      return t\n  \
    \  end,\n    __newindex = function(self, index, val)\n      if val ~= nil then\
    \ self.table[index] = val end\n    end\n  })\n  for _, i in ipairs(l) do\n   \
    \ s[i] = i\n  end\n  return setmetatable(ret, s)\nend", "  local i, results =\
    \ {}\n  for i, v in ipairs(l) do\n    if v > 0 then results[i] = v end\n  end\n\
    \  return unpack(results, 1, #l)\nend", "  local positive = {}\n  for _, v in\
    \ pairs(l) do\n    if v >= 0 then\n      table.insert(positive, v)\n    end\n\
    \  end\n  return positive\nend", "  local results = {}\n  for _, v in pairs(l)\
    \ do\n    if v > 0 then\n      results[#results + 1] = v\n    end\n  end\n  return\
    \ results\nend", "    local positive = {}\n    for k, v in pairs(l) do\n     \
    \   if v > 0 then\n            positive[k] = v\n        end\n    end\n    return\
    \ positive\nend", "    local result = {}\n    for _, value in ipairs(l) do\n \
    \       if value >= 0 then\n            result[#result + 1] = value\n        end\n\
    \    end\n    return result\nend", "    local positive = {}\n    for _, v in pairs(l)\
    \ do\n        if v > 0 then\n            table.insert(positive, v)\n        end\n\
    \    end\n    return positive\nend", "  local result = {}\n  for _, v in pairs(l)\
    \ do\n    if v > 0 then\n      result[#result + 1] = v\n    end\n  end\n  return\
    \ result\nend", "  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\
    \ table.insert(positive, l[i]) end\n  end\n  return positive\nend", "    local\
    \ res = {}\n    for _, value in pairs(l) do\n        if value >= 0 then\n    \
    \        table.insert(res, value)\n        end\n    end\n    return res\nend",
  "  local positive = {}\n  for _, v in ipairs(l) do\n    if v ~= 0 then table.insert(positive,\
    \ v) end\n  end\n  return positive\nend", "  local r\n  for i, v in ipairs(l)\
    \ do\n    if v > 0 then\n      if i == #l then break end\n      r = {}\n     \
    \ for j = 0, i do\n        table.insert(r, l[j])\n      end\n      break\n   \
    \ end\n  end\n  return r\nend", "  local t = {}\n  local i = 1\n  for key, value\
    \ in pairs(l) do\n    if value >= 0 then\n      t[#t + 1] = value\n    end\n \
    \   i = i + 1\n  end\n  return t\nend", "  if l == nil then\n    return nil\n\
    \  end\n  local result = {}\n  for _, v in pairs(l) do\n    if v > 0 then\n  \
    \    result[#result + 1] = v\n    end\n  end\n  return result\nend", "   local\
    \ r = {}\n   for _, v in ipairs(l) do if v >= 0 then r[#r+1] = v end end\n   return\
    \ r\nend", "  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n\
    \      table.insert(positive, l[i])\n    end\n  end\n  return positive\nend",
  "  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(positive,\
    \ l[i]) end\n  end\n  return positive\nend", "  if l == nil then return nil end\n\
    \  local ret = {}\n  for i, v in pairs(l) do\n    if v > 0 then ret[#ret + 1]\
    \ = v end\n  end\n  return ret\nend", "  local posi = setmetatable({}, {__mode=\"\
    v\"})\n  for i = 1, #l do\n    posi[i] = l[i]\n    if posi[i] > 0 then\n     \
    \ posi = posi\n    end\n  end\n  return posi\nend", "    local t = {}\n    for\
    \ k, v in ipairs(l) do\n        if v >= 0 then\n            t[#t + 1] = v\n  \
    \      end\n    end\n    return t\nend", "  local new_l = {}\n  for k, v in ipairs(l)\
    \ do new_l[k+1] = v end\n  return new_l\nend", "  if #l == 0 then\n    return\
    \ {}\n  end\n  local ret = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(ret,\
    \ l[i]) end\n  end\n  return ret\nend", "    local positive = {}\n    for i =\
    \ 1, #l do\n        if l[i] > 0 then\n            table.insert(positive, l[i])\n\
    \        end\n    end\n    return positive\nend", "  local positive = {}\n  for\
    \ _,v in ipairs(l) do\n    if v > 0 then table.insert(positive,v) end\n  end\n\
    \  return positive\nend", "  local positive = {}\n  for _, value in pairs(l) do\
    \ if value >= 0 then table.insert(positive, value) end end\n  return positive\n\
    end", "  local t = {}\n  for _, v in ipairs(l) do t[#t + 1] = v end\n  table.sort(t)\n\
    \  for _, v in ipairs(t) do t[#t] = v end\n  return t\nend", "  local res = {}\n\
    \  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(res, l[i])\n   \
    \ end\n  end\n  return res\nend", "  local positive = {}\n  for _, v in ipairs(l)\
    \ do table.insert(positive, v) end\n  return positive\nend", "  local ret = {}\n\
    \  local is_neg = 0\n  for i = 1, #l do\n    if l[i] < 0 then\n      is_neg =\
    \ 1\n      break\n    end\n    ret[#ret+1] = l[i]\n  end\n  if is_neg then\n \
    \   table.sort(ret)\n  end\n  return ret\nend", "  local ret = {}\n  for k, v\
    \ in pairs(l) do\n    if v > 0 then\n      table.insert(ret, v)\n    end\n  end\n\
    \  return ret\nend", "  local t = {}\n  for _, v in pairs(l) do t[math.abs(v)+1]\
    \ = v end\n  return t\nend", "  local result = {}\n  for i, v in ipairs(l) do\n\
    \    if v >= 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end", "    local positive = {}\n    for _, v in pairs(l) do\n        if v > 0\
    \ then\n            table.insert(positive, v)\n        end\n    end\n    return\
    \ positive\nend", "  local r = {}\n  for _, v in pairs(l) do\n    if v <= 0 then\
    \ break end\n    r[#r + 1] = v\n  end\n  return r\nend", "    local s = {}\n \
    \   for _, e in ipairs(l) do\n        if e > 0 then\n            s[#s+1] = e\n\
    \        end\n    end\n    return s\nend", "  local v = {}\n  for _, v in ipairs(l)\
    \ do v = v + v end\n  local positives = {}\n  for i = 1, #l do\n    if v[i] >=\
    \ 0 then table.insert(positives, v[i]) end\n  end\n  return positives\nend", " \
    \ local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ i)\n    end\n  end\n  return positive\nend", "  local t = {}\n  for _, v in\
    \ ipairs(l) do\n    if v >= 0 then\n      table.insert(t, v)\n    end\n  end\n\
    \  return t\nend", "  local positive = {}\n  for _, v in pairs(l) do\n    if v\
    \ ~= nil then\n      positive[#positive + 1] = v\n    end\n  end\n  return table.sort(positive,\
    \ function(a, b)\n    return a < b\n  end)\nend", "  local result = {}\n  for\
    \ _,v in ipairs(l) do\n    if v ~= 0 then\n      result[#result + 1] = v\n   \
    \ end\n  end\n  return result\nend", "  local positive = {}\n  for i = 1, #l do\n\
    \    if l[i] > 0 then table.insert(positive, l[i]) end\n  end\n  return positive\n\
    end", "  local n = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(n,\
    \ l[i])\n    end\n  end\n  return n\nend", "  local t = {}\n  for _, v in ipairs(l)\
    \ do\n    if v ~= 0 then\n      table.insert(t, v)\n    end\n  end\n  return t\n\
    end", "  local result = {}\n  for _, v in ipairs(l) do\n    if v ~= 0 then\n \
    \     table.insert(result, v)\n    end\n  end\n  return result\nend", "  if type(l)\
    \ == 'table' then\n    local ret = {}\n    for k, v in ipairs(l) do ret[#ret +\
    \ 1] = v end\n    return ret\n  end\n  return l\nend", "  local result = {}\n\
    \  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(result, l[i])\n\
    \    end\n  end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
