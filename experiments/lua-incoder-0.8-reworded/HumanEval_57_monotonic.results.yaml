language: lua
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev  = l[1]\n  local curr = l[1]\n  for i = 2, #l do\n    if l[i-1]\
    \ > prev then\n      return false\n    end\n    prev = curr\n    curr = l[i]\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6dzdrhag.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6dzdrhag.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  table.sort(l)\n  for i = 1, table.getn(l) do\n    if sorted[i]\
    \ then\n      if sorted[i] ~= l[i] then\n        return false\n      end\n   \
    \ elseif sorted[i] = l[i] then\n      return true\n    else\n      sorted[i] =\
    \ l[i]\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmw9ytxnb.lua:16: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local low = nil\n  local high = nil\n  local length = #l\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqq8t0iuz.lua:26: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    -- Determine if the list is already monotonic.\n    if #l <= 1 then\n   \
    \     return true\n    end\n    local first = l[1]\n    for i = 2, #l do\n   \
    \     if l[i] > first then\n            return false\n        end\n        first\
    \ = l[i]\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcviv575x.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcviv575x.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \   local i, j, m = {}, {}, 0\n   for i, v in ipairs(l) do\n      if v < m[v]\
    \ then\n         j = m[v]\n         m[v] = i\n      else\n         m[v] = i +\
    \ 1\n      end\n   end\n   if #m == 1 then return true end\n   return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpskkdm7bq.lua:11:\
    \ attempt to index a number value (local 'm')\nstack traceback:\n\t/tmp/tmpskkdm7bq.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpskkdm7bq.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  -- The list must not be empty, otherwise it would be possible to\n  -- take\
    \ `l[1]` which would be undefined\n  if not l then return false end\n  local last_val\
    \ = l[1] or 0\n  for i = 2, #l do\n    local val = l[i]\n    if val ~= last_val\
    \ then\n      return true\n    end\n    last_val = val\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja__uwvj.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpja__uwvj.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 1 then return true end\n  local prev = l[1]\n  for i = 2, #l do\n\
    \    if l[i] < prev then return false end\n    prev = l[i]\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5tvpq0yc.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5tvpq0yc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local monotonic_l\n  local prev_l\n  if #l == 0 then return false end\n  local\
    \ min_v = l[1]\n  local max_v = l[1]\n  for i = 2, #l do\n    local v = l[i]\n\
    \    if v < min_v then\n      min_v = v\n    end\n    if v > max_v then\n    \
    \  max_v = v\n    end\n  end\n  if min_v == max_v then\n    monotonic_l = \"unsorted\"\
    \n  elseif min_v == prev_l then\n    monotonic_l = \"decreasing\"\n  elseif max_v\
    \ == prev_l then\n    monotonic_l = \"increasing\"\n  else\n    monotonic_l =\
    \ \"increasing/decreasing\"\n  end\n  return prev_l, monotonic_l, max_v\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6iqnmxle.lua:38:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp6iqnmxle.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    local max = #l\n    for i=1, max do\n        if l[i] ~= l[i - 1] + 1 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp6zxc1jh.lua:11:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpp6zxc1jh.lua:11: in local 'candidate'\n\t/tmp/tmpp6zxc1jh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local ok, last_value, last_index = true, {}, 0\n  for idx, value in ipairs(l)\
    \ do\n    if idx > last_index then\n      ok = false\n      break\n    end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpum5e9fad.lua:29: ''end'' expected (to close ''for'' at line
    10) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    local function sort(a, b)\n        if a < b then\n            return 1\n\
    \        elseif a > b then\n            return -1\n        else\n            return\
    \ 0\n        end\n    end\n    table.sort(l, sort)\n    return #l == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy2wsn857.lua:18:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmpy2wsn857.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpy2wsn857.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local first = table.remove(l, 1)\n  local last = first\n  for i = 2, #l do\n\
    \    local value = table.remove(l, nth(l, i))\n    if not first <= value then\n\
    \      return false\n    end\n    first = value\n    last = value\n  end\n  return\
    \ first <= last\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprqmtgwu7.lua:12:\
    \ attempt to call a nil value (global 'nth')\nstack traceback:\n\t/tmp/tmprqmtgwu7.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmprqmtgwu7.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \tlocal keys = {}\n\tlocal max = 0\n\tfor k in pairs(l) do\n\t\tkeys[k] = true\n\
    \t\tmax = math.max(max, k)\n\tend\n\tfor k in pairs(l) do\n\t\tif not keys[k]\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn max <= 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46qa48cw.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp46qa48cw.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local lv = table.sort(l)\n  for i = 1, #l do\n    if lv[i] ~= lv[i-1] then\
    \ return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxolb6fzc.lua:11:\
    \ attempt to index a nil value (local 'lv')\nstack traceback:\n\t/tmp/tmpxolb6fzc.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpxolb6fzc.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    local max\n    for i, v in ipairs(l) do\n        if max then\n          \
    \  if v > max then\n                return false\n            elseif v == max\
    \ and i > max then\n                return false\n            end\n        else\n\
    \            max = v\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44e8wxix.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp44e8wxix.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 1 then return false end\n  return l[1] < l[2] or l[2] < l[1]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphrxu1osi.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphrxu1osi.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 1 then return true end\n  if #l == 2 then return l[1] < l[2] end\n\
    \  local v1 = l[1]\n  local v2 = l[2]\n  return v1 < v2 or\n    (v2 < v1 and monotonic(unpack(l,\
    \ 1, #l - 2)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4lvdugu.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpl4lvdugu.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local result = true\n  local prev = -1000000000\n  local i = 1\n  for v in\
    \ l:gmatch(\"%d*\") do\n    if v ~= prev then\n      result = false\n      break\n\
    \    end\n    prev = v\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplp836bne.lua:12:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmplp836bne.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmplp836bne.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local monotonic, decreasing = true, true\n  for i = 2, #l do\n    if l[i-1]\
    \ > l[i] or l[i-1] == l[i] then\n      monotonic = false\n      decreasing = false\n\
    \      break\n    end\n  end\n  if decreasing then\n    return true\n  end\n \
    \ return monotonic\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jjmyolj.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8jjmyolj.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  for i = #l - 1, 1, -1 do\n    local el = l[i]\n    if el > l[i + 1] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lmu905c.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9lmu905c.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  for i = 2, #l do\n    if l[i-1] < l[i] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplx7ygtxv.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplx7ygtxv.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last_is_less = {}\n  for i, v in ipairs(l) do\n    last_is_less[i] =\
    \ v < last_is_less[i] or last_is_less[i] == nil\n  end\n  return #last_is_less\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkjertq2.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpdkjertq2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpdkjertq2.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local result = true\n  for i = 2, #l do\n    local e = l[i]\n    if e < l[i\
    \ - 1] then\n      result = false\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4lbo0les.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4lbo0les.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  return #l >= 2 and l[1] < l[2] and l[2] < l[3]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tmoms7f.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_tmoms7f.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last = l[1]\n  for i=2,#l do\n    if l[i] > last then return false end\n\
    \    last = l[i]\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglzdsvmx.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpglzdsvmx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function sub(v)\n    local i, j = unpack(v, 2, 2)\n    return i - j\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcqbzks9r.lua:27: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i, j, k, x, y, z, c, count\n  count = 1 -- current count\n  for i, x\
    \ in ipairs(l) do\n    count = count + 1\n    i = i + 1\n    if count == 1 then\
    \ x = x+1 -- remember original order\n    else x = x + (x > l[i]) and (x - l[i])\
    \ or l[i] end\n    if i == 1 then c = x end\n    if count > 2 then\n      if l[j]\
    \ ~= c then\n        x, y = c, l[j]\n      end\n      if l[k] ~= y then\n    \
    \    x, y = y, l[k]\n      end\n      if x ~= c then -- if x is different from\
    \ c, then x is non-monotonic element\n        if x > y then return false end\n\
    \      end\n      count = count - 1\n    end\n    j = i + 1\n    k = j + 1\n \
    \ end\n  if count == 0 then return true end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocme8ir4.lua:15:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpocme8ir4.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpocme8ir4.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \t-- Check table size is 1.\n\tif #l == 1 then\n\t\treturn l[0] < l[1]\n\tend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpecuipwyx.lua:27: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local a = {}\n  for i = 1, #l do\n    if a.__index == nil then\n      a.__index\
    \ = i\n      local v = l[i]\n      if v < l[i-1] then\n        return false\n\
    \      elseif v > l[i-1] then\n        return true\n      else\n        a.__index\
    \ = i\n      end\n    else\n      if l[i] > l[a] then\n        return false\n\
    \      elseif l[i] < l[a] then\n        return true\n      else\n        a[i]\
    \ = i\n      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplaw_7t8c.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmplaw_7t8c.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmplaw_7t8c.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 1 then\n    return true\n  end\n  local prev = l[1]\n  for _, v in\
    \ ipairs(l) do\n    if prev > v then\n      return false\n    end\n    prev =\
    \ v\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9e9bhdp7.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9e9bhdp7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    local prev = -math.huge\n    local current = 1\n    for _, v in ipairs(l)\
    \ do\n        if prev > current then\n            return false\n        end\n\
    \        prev = current\n        current = current + v\n    end\n    return current\
    \ <= prev\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3aiek8b9.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3aiek8b9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \   local minimum = nil\n   local maximum = nil\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpybpw0pm6.lua:25: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~=\
    \ sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2rxkyjm1.lua:10:\
    \ attempt to get length of a nil value (local 'sorted')\nstack traceback:\n\t\
    /tmp/tmp2rxkyjm1.lua:10: in local 'candidate'\n\t/tmp/tmp2rxkyjm1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local lastVal = nil\n  local lastPos = nil\n  local incr = 0\n  local decr\
    \ = 0\n  for i = 1, #l do\n    if l[i] < lastVal then\n      incr = 1\n    elseif\
    \ l[i] > lastVal then\n      decr = -1\n    else\n      incr = 0\n      decr =\
    \ 0\n    end\n    lastVal = l[i]\n    lastPos = i\n  end\n  return decr == 0 and\
    \ incr == 1 or (decr == -1 and incr == 0)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgb_fttuk.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpgb_fttuk.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpgb_fttuk.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 0 then return true end\n  local first, last = l[1], l[1]\n  for i\
    \ = 2, #l do\n    local x = l[i]\n    if x >= first then return false end\n  \
    \  if x <= last then return false end\n    first = last\n    last = x\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ljt97hf.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7ljt97hf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 0 then return false end\n  if #l == 1 then return true end\n  local\
    \ first = l[1]\n  local last = l[#l]\n  for i = 2, #l do\n    if l[i] > first\
    \ then return false end\n    if l[i] < last then return false end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2as3p_9.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr2as3p_9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local max = -l[1]\n  for _, v in pairs(l) do\n    if v < max then\n      return\
    \ false\n    end\n    max = v\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65jo00vm.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp65jo00vm.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    local current = l[i]\n\
    \    if current > last then\n      return true\n    end\n    last = current\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ypr72bz.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5ypr72bz.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 0 then return true end\n  if #l == 1 then return false\n  else if\
    \ l[1] < l[2] then return true\n    else return false end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxnaksam.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwxnaksam.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 1 then return l[1] == 1 end\n  local i = #l\n  while i > 1 do\n  \
    \  local j, k = l[1], #l\n    for i = i - 1; i > 1; i = i - 1 do\n      if l[i]\
    \ < l[j] then return false end\n      if l[i] > l[k] then return false end\n \
    \   end\n    l = l[k]\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzqdm_yfo.lua:13: '','' expected near '';''

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    local result = true\n    for i, v in ipairs(l) do\n        if not i then\n\
    \            if v ~= v then\n                result = false\n            else\n\
    \                result = true\n            end\n        elseif v > l[i] then\n\
    \            result = false\n        end\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vytvuva.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_vytvuva.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  for i = 1, #l do\n    if l[i] ~= l[i-1] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4wqm_lh.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt4wqm_lh.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  for i=1,#l do\n    local t = l[i]\n    local prev = l[i-1]\n    if prev < t\
    \ then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc6f_e5vs.lua:12:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpc6f_e5vs.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpc6f_e5vs.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local ret\n  for _, x in ipairs(l) do\n    if x > ret then\n      ret = x\n\
    \    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7kmdx1f4.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp7kmdx1f4.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp7kmdx1f4.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    local sorted = table.sort(l)\n    local prev = -math.inf - 1\n    local pos\
    \ = 0\n    for idx = 1, #l do\n        if prev > l[idx] then\n            pos\
    \ = idx\n        end\n        prev = l[idx]\n    end\n    return pos == #sorted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0mnsr36y.lua:10:\
    \ attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\
    \t/tmp/tmp0mnsr36y.lua:10: in local 'candidate'\n\t/tmp/tmp0mnsr36y.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  return l.NumFields == 0 and l.NumElements == #l and #l <= #l and unpack(l.Fields,\
    \ 1, #l.Fields) == #l and unpack(l, 1, #l) <= unpack(l, 2, #l) and #l > 0 and\
    \ #l.Fields == #l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnj46mnd3.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnj46mnd3.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = #l + 1\n  while i > 1 do\n    local j = i\n    while j < l do\n \
    \     local x = l[j]\n      local y = l[j + 1]\n      if x > y then return false\
    \ end\n      if x < y then return true end\n      j = j + 1\n    end\n    i =\
    \ i - 1\n  end\n  return l[1] <= l[#l]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv0oawzsg.lua:12:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmpv0oawzsg.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpv0oawzsg.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function is_increasing(e)\n    local last = e[#e]\n    for i = #e - 1,\
    \ 1, -1 do\n      if last < e[i] then\n        return true\n      end\n      last\
    \ = e[i]\n    end\n    return false\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptfdh48tj.lua:33: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if l == nil then return nil end\n  if #l == 1 then return l[1] == l[0] end\n\
    \  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then return false\
    \ end\n    last = l[i]\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl1w2f_i1.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl1w2f_i1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\n  for i, v in ipairs(sorted) do\n    if v ~=\
    \ sorted[i+1] then\n      return false\n    end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a nil value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    -- Check if all elements are nonnegative\n    if l[1] == 0 then\n       \
    \ return false\n    end\n    -- Store the max (minimum) value in an element and\
    \ find its index\n    local max = l[1]\n    local idx = 1\n    while idx < #l\
    \ do\n        if l[idx] > max then\n            max = l[idx]\n        end\n  \
    \      idx = idx + 1\n    end\n    -- Check if all elements are nonnegative\n\
    \    if l[1] == 0 then\n        return false\n    end\n    -- Store the max (minimum)\
    \ value in an element and find its index\n    local max = l[1]\n    local idx\
    \ = 1\n    while idx < #l do\n        if l[idx] > max then\n            max =\
    \ l[idx]\n        end\n        idx = idx + 1\n    end\n    -- Check if all elements\
    \ are nonnegative\n    if l[1] == 0 then\n        return false\n    end\n    --\
    \ The table is monotonic\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6tbo2bu.lua:48:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp6tbo2bu.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = -1\n  for i, v in ipairs(l) do\n    if prev > 0 then\n      if\
    \ v < prev then\n        return false\n      elseif v > prev then\n        return\
    \ true\n      end\n    end\n    prev = v\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kmokjs6.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0kmokjs6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = nil\n  for _, v in ipairs(l) do\n    if prev == nil then\n   \
    \   prev = v\n    elseif prev < v then\n      return false\n    else\n      prev\
    \ = v\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2bslzk04.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2bslzk04.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l <= 1 then return true end\n  local max1 = l[1]\n  local max2 = l[1]\n\
    \  for i = 2, #l do\n    local cur1 = l[i]\n    local cur2 = l[i-1]\n    if cur1\
    \ > cur2 then\n      return false\n    end\n    max2 = max1\n    max1 = cur1\n\
    \  end\n  return max2 < max1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3hv3yoi.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx3hv3yoi.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if l==nil then return false end\n  local i=1, j=1\n  while i <= #l do\n   \
    \ local k = i\n    j = i+1\n    while j < #l and l[j] < l[k] do\n      j = j+1\n\
    \    end\n    if i == j then -- Degenerate\n      i = j\n    elseif l[j] == l[i]\
    \ then -- Equal\n      i = j\n    else\n      local d = l[j]-l[k]\n      if d\
    \ > 0 then return false\n      elseif d < 0 then return true\n      else return\
    \ false\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp35nakp7_.lua:10: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    if l[1] == nil then\n        return true\n    end\n    local l = { l }\n\
    \    local max = l[1]\n    for i = 2, #l do\n        if l[i] < max then\n    \
    \        return false\n        elseif l[i] > max then\n            max = l[i]\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_dfc665r.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_dfc665r.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = setmetatable({}, {__mode=\"v\"})\n  for _, v in ipairs(l) do\
    \ sorted[v] = true end\n  return table.keys(sorted) == 1 and table.next(sorted)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ixkuv07.lua:11:\
    \ attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp6ixkuv07.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp6ixkuv07.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  for i, v in ipairs(l) do sorted[v] = i end\n  for i =\
    \ 2, #sorted do\n    if sorted[i] < sorted[i-1] then\n      return true\n    end\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfngmx5_a.lua:12:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpfngmx5_a.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpfngmx5_a.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last = l[1]\n  for i = 2, #l do\n    if l[i] <= last then\n      return\
    \ false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoppvml4x.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoppvml4x.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  return l:apply(function(a)\n    return a < a[1] or (a[1] == a and a[2] <= a[3])\n\
    \  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgq2qjn_v.lua:9:\
    \ attempt to call a nil value (method 'apply')\nstack traceback:\n\t/tmp/tmpgq2qjn_v.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpgq2qjn_v.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 0 then\n    return true\n  else\n    local last = l[1]\n    local\
    \ i = 2\n    while i < #l do\n      local curr = l[i]\n      if curr > last then\n\
    \        return false\n      elseif curr == last then\n        i = i + 1\n   \
    \   else\n        last = curr\n        i = i + 1\n      end\n    end\n    return\
    \ true\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwqcrbu9.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdwqcrbu9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if l == nil then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9tfzsm6u.lua:26: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  for i = #l - 1, 1, -1 do\n    if l[i] < l[i - 1] or l[i] > l[i + 1] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprpujzc7t.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmprpujzc7t.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmprpujzc7t.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    local monotonic = false\n    if #l == 1 then\n        monotonic = l.[1] <\
    \ l.[2]\n    else\n        local i = 2\n        while i < #l do\n            if\
    \ l[i] < l[i-1] then\n                local swap = l[i]\n                l[i]\
    \ = l[i-1]\n                l[i-1] = swap\n                i = 2\n           \
    \     monotonic = true\n            else\n                i = i + 1\n        \
    \    end\n        end\n    end\n    return monotonic\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpilx9uagk.lua:11: <name> expected near ''[''

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  while i < #l do\n    if not l[i] then\n      return false\n\
    \    end\n    if l[i] ~= l[i-1] then\n      return false\n    end\n    i = i +\
    \ 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqrd6u3i.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyqrd6u3i.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if l[1] == l[2] then\n    return true\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpldvkttvq.lua:26: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last_val = l[1]\n  local last_idx = 1\n  local first_idx = 1\n  for i\
    \ = 2, #l do\n    if l[i] > last_val then\n      last_val = l[i]\n      first_idx\
    \ = i - 1\n      last_idx = i - 1\n    elseif l[i] < last_val then\n      last_idx\
    \ = i - 1\n    end\n  end\n  return first_idx < last_idx\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplq4f00su.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplq4f00su.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 1 then return true end\n  local first = l[1]\n  for i = 2, #l do\n\
    \    if l[i] < first then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsx2nr12k.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsx2nr12k.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    if #l == 0 then return false end\n    if #l == 1 then return true end\n \
    \   return l[1] < l[2] and l[2] <= l[3]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyu4txuv3.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyu4txuv3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    -- Returns true if the list elements are monotonically increasing or decreasing.\n\
    \    --\n    -- Parameters\n    -- ----------\n    -- l   : (numeric) A list of\
    \ numeric elements.\n    --\n    -- Returns\n    -- -------\n    -- boolean\n\
    \    --\n    -- Examples\n    -- --------\n    -- >>> monotonic([1, 2, 4, 20])\n\
    \    -- true\n    -- >>> monotonic([1, 20, 4, 10])\n    -- false\n    -- >>> monotonic([4,\
    \ 1, 0, -10])\n    -- true\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphjexhb7m.lua:41: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local min = math.min(unpack(l))\n  local max = math.max(unpack(l))\n  return\
    \ min < max and min == max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnlp9ye6y.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpnlp9ye6y.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpnlp9ye6y.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  for i = #l - 1, 1, -1 do\n    if l[i] > l[i + 1] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwtin0wxc.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwtin0wxc.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = l[1]\n  for _, el in ipairs(l) do\n    if prev < el then\n   \
    \   return false\n    end\n    prev = el\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnst_rfib.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnst_rfib.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local llen = #l\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplp43h56x.lua:24: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \tlocal prev = l[1]\n\tlocal ok, max = true\n\tlocal count = #l\n\tfor i = 2,\
    \ count do\n\t\tlocal v = l[i]\n\t\tif v < prev then -- Monotonically increasing.\n\
    \t\t\tok = false\n\t\telseif v > prev then -- Monotonically decreasing.\n\t\t\t\
    ok = true\n\t\telse\n\t\t\tbreak\n\t\tend\n\t\tprev = v\n\tend\n\treturn ok and\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtalobf8.lua:29:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpgtalobf8.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l < 2 then return false end\n  if l[1] == l[2] then return false end\n\
    \  local i = 0\n  local last = l[1]\n  local j = #l\n  while i < j do\n    local\
    \ v = l[i]\n    i = i + 1\n    if last < v then return false end\n    last = v\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeb94czfg.lua:17:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpeb94czfg.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpeb94czfg.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev=nil\n  for _, v in ipairs(l) do\n    if prev == nil or prev > v\
    \ then\n      prev = v\n    end\n  end\n  return prev == nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp69is3y9y.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp69is3y9y.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i, j, n = 0, 1, #l\n  while i < n do\n    j = i\n    while j < n and\
    \ l[j] < l[j+1] do\n      j = j + 1\n    end\n    if j < n then\n      l[i], l[j]\
    \ = l[j], l[i]\n      i = i + 1\n    end\n    n = j\n  end\n  return i == n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfeprxs64.lua:12:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpfeprxs64.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpfeprxs64.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \   local max = math.max(l)\n   local min = math.min(l)\n   return min == max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl1p4aklo.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpl1p4aklo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 1 then\n    return l[1] < l[2]\n  end\n  local prev = l[1]\n  for\
    \ i = 2, #l do\n    if l[i] > prev then\n      return false\n    end\n    prev\
    \ = l[i]\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpulaftj6u.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpulaftj6u.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 1 then return false end\n  for i = #l - 1, 1, -1 do\n    if l[i] >\
    \ l[i-1] then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfapnkbh_.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfapnkbh_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {l[1]}\n  for i=2,#l do\n    if prev[i] ~= l[i] then\n      return\
    \ false\n    end\n    prev[i] = nil\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxapfcoa.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfxapfcoa.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  while i < #l do\n    local c = l[i]\n    if c < l[i-1] then\n\
    \      return false\n    end\n    if c > l[i-1] then\n      l[i-1] = c\n     \
    \ i = 1\n    else\n      i = i + 1\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjki8xa3d.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjki8xa3d.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpjki8xa3d.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  for i, v in ipairs(l) do\n    if v < l[i] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mnwdztt.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9mnwdztt.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  return l[1] < l[2] and l[1] > l[3] and l[2] > l[3]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmt7hnvo.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxmt7hnvo.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last_elem = unpack(l[#l])\n  for i = #l - 1, 0, -1 do\n    local elem\
    \ = unpack(l[i])\n    if elem < last_elem then return false end\n    if elem >\
    \ last_elem then last_elem = elem end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvdhxda5.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmplvdhxda5.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmplvdhxda5.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 1 then\n    local i = l[1]\n    if i == i then\n      return true\n\
    \    end\n    return false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeo22bwst.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \tlocal max,min = l[1],l[1]\n\tfor i = 2,#l do\n\t\tmax,min = max,min or (l[i],l[i])\n\
    \tend\n\treturn max >= min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbivgum50.lua:11: '')'' expected near '',''

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for i=1,#l do\n    local val = l[i]\n    if not prev[val]\
    \ then\n      prev[val] = true\n      return true\n    end\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrftn3qt.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcrftn3qt.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last_idx = nil\n  for idx, v in ipairs(l) do\n    if last_idx == nil\
    \ or v < l[last_idx] then\n      last_idx = idx\n    end\n  end\n  return last_idx\
    \ ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgl_yxcy.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprgl_yxcy.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \   if l[1] == l[2] then\n      return false\n   end\n   if l[3] == l[4] then\n\
    \      return true\n   end\n   if l[3] > l[4] then\n      return monotonic(l)\
    \ -- Return true is table elements are monotonically increasing or decreasing.\n\
    \   else\n      return monotonic(l+1) -- Return true is table elements are monotonically\
    \ increasing or decreasing.\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxfc95t3h.lua:18:\
    \ attempt to perform arithmetic on a table value (local 'l')\nstack traceback:\n\
    \t/tmp/tmpxfc95t3h.lua:18: in local 'candidate'\n\t/tmp/tmpxfc95t3h.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local s = l[1]\n  for i = 2, #l do\n    if l[i] < s or s == 0 then\n      return\
    \ false\n    end\n    s = l[i]\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpec6eayuv.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpec6eayuv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  for i = 2, #l do\n    if l[i-1] < l[i] then return false end\n    if l[i-1]\
    \ > l[i] then return true end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44o2om_w.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp44o2om_w.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  for i = 1, #l do\n    local v = l[i]\n    if v ~= nil and v:isNumber() then\n\
    \      if v <= l[i - 1] and v ~= nil then\n        return false\n      elseif\
    \ v ~= l[i - 1] and v <= l[i - 1] then\n        return true\n      else\n    \
    \    return false\n      end\n    elseif v ~= nil and v:isString() then\n    \
    \  local c = v:byte()\n      if c > l[i - 1] and c ~= nil then\n        return\
    \ false\n      elseif c ~= l[i - 1] and c > l[i - 1] then\n        return true\n\
    \      else\n        return false\n      end\n    elseif v ~= nil and v:isBoolean()\
    \ then\n      if v and l[i - 1] == nil then\n        return false\n      elseif\
    \ not v and l[i - 1] != nil then\n        return true\n      else\n        return\
    \ false\n      end\n    elseif v ~= nil and v:isStruct() then\n      if monotonic(v)\
    \ then\n        return true\n      else\n        return false\n      end\n   \
    \ else\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv4g2mpxj.lua:31: ''then'' expected near ''!''

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prevVal\n  local currentVal\n  for i = 1, #l do\n    currentVal = l[i]\n\
    \    prevVal = prevVal or currentVal\n    if currentVal ~= prevVal then\n    \
    \  return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplecjryg3.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplecjryg3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  for i = 1, #l do\n    if l[i-1] >= l[i] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkmaki7gc.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpkmaki7gc.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpkmaki7gc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  for i = 1, #l do\n    if l[i-1] < l[i] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6rl4m51i.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp6rl4m51i.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp6rl4m51i.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 1 then\n    local e = l[1]\n    return e ~= nil and e <= l[2] and\
    \ e >= l[1]\n  end\n  for i = #l - 1, 1, -1 do\n    local e = l[i]\n    if e ~=\
    \ nil and e > l[i - 1] and e <= l[i + 1] then\n      return false\n    end\n \
    \ end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc77748nk.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc77748nk.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if l[1] < l[2] then\n    return true\n  end\n  if l[1] > l[3] then\n    return\
    \ false\n  end\n  if l[1] == l[2] then\n    return true\n  end\n  return monotonic(\n\
    \    {l[3], l[1], l[3], l[2]}\n  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwlafx6hy.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwlafx6hy.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i, m = 1, #l\n  while i <= m do\n    local k = i\n    i = i - 1\n   \
    \ local j = m\n    j = j - 1\n    while j > 0 and l[k] < l[j] do\n      k = k\
    \ - 1\n      j = j - 1\n    end\n    if k > 0 and l[k] == l[k] then\n      return\
    \ false\n    end\n    if j > 0 and l[k] > l[j] then\n      return true\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1hyhqyjb.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp1hyhqyjb.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp1hyhqyjb.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if l == nil then return false end\n  local last_idx = #l - 1\n  return all(l[last_idx]:map(function(elt)\n\
    \    local next_elt = l[last_idx+1]\n    return elt > next_elt\n  end))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptv3j0h5p.lua:11:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmptv3j0h5p.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmptv3j0h5p.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \tlocal m = {}\n\tfor i, v in ipairs(l) do\n\t\ttable.insert(m, v)\n\t\tif i ~=\
    \ #l then\n\t\t\tif v < m[1] then m[1] = v end\n\t\t\tif v > m[-1] then m[-1]\
    \ = v end\n\t\tend\n\tend\n\treturn #m == 1 and m[1] == m[-1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt3jv2hj7.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpt3jv2hj7.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpt3jv2hj7.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 1 then return l[1] < l[2] end\n  local first = l[1]\n  for i = 2,\
    \ #l do assert(l[i] <= first) end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvy6k88xw.lua:11:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpvy6k88xw.lua:11: in local 'candidate'\n\
    \t/tmp/tmpvy6k88xw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  return l and #l == 1 and l[1] < l[2] and l[2] > l[3]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptyshdwd2.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptyshdwd2.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local isIncreasing, isDecreasing, index = 0, 0, 1\n  for _, v in ipairs(l)\
    \ do\n    if v == 0 then return false end\n    isIncreasing = not isIncreasing\
    \ and v <= l[index]\n    isDecreasing = not isDecreasing and v >= l[index]\n \
    \   index = index + 1\n  end\n  return isIncreasing or isDecreasing\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ok3jkcw.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9ok3jkcw.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  for i = #l + 1, -1, -1 do\n    if l[i] ~= l[i - 1] + 1 then\
    \ return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprav6fag8.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprav6fag8.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local l2 = {}\n  for i = 1, #l do\n    l2[i] = l[i]\n  end\n  l2[#l2] = l[#l]\n\
    \  return l2 <= l2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph3_by5g1.lua:14:\
    \ attempt to compare two table values\nstack traceback:\n\t/tmp/tmph3_by5g1.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmph3_by5g1.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if l == nil then\n    return false\n  end\n  local n = #l\n  if n == 0 then\n\
    \    return false\n  end\n  local i, j, s\n  local min_value, max_value = nil,\
    \ 0\n  for i = 1, n do\n    s = l[i]\n    j = i\n    while j < n do\n      s =\
    \ s > l[j] or s == l[j] and 1 or -1\n      if s ~= 0 then\n        break -- j\
    \ stays in range\n      elseif j < n then -- j was deleted\n        j = j + 1\n\
    \      else -- j was inserted\n        j = j + 1\n      end\n    end\n    if min_value\
    \ == nil then\n      min_value = s\n      max_value = s\n    else\n      if s\
    \ == min_value then\n        min_value = s\n      elseif s == max_value then\n\
    \        max_value = s\n      else\n        return false\n      end\n    end\n\
    \  end\n  return max_value == min_value and true or false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0veswxq8.lua:50:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0veswxq8.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  -- If table is empty then return true.\n  -- If only one element then return\
    \ true.\n  if #l == 0 then\n    return true\n  elseif #l == 1 then\n    return\
    \ l[1] <= l[0]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_8hwal8f.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local min, max = table.unpack(l)\n  if #min == 1 and #max == 1 then\n    if\
    \ min >= max then\n      return true\n    else\n      return false\n    end\n\
    \  else\n    return not ((#min > #max) or (min < max))\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqa0iwixj.lua:10:\
    \ attempt to get length of a number value (local 'min')\nstack traceback:\n\t\
    /tmp/tmpqa0iwixj.lua:10: in local 'candidate'\n\t/tmp/tmpqa0iwixj.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local s = l.sort()\n  for i, x in pairs(s) do\n    if x > s[i] then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo1kx8ebw.lua:9:\
    \ attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmpo1kx8ebw.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpo1kx8ebw.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local ok = false\n  local last\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps0xw8vqn.lua:25: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local n = #l\n  while i < n do\n    if l[i] < l[i - 1] or l[i]\
    \ > l[i - 1] then\n      return false\n    end\n    i = i + 1\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkpklhoeb.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpkpklhoeb.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpkpklhoeb.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local result = false\n  if #l == 0 then\n    return result\n  end\n  for i\
    \ = 2, #l do\n    if l[i] ~= l[i - 1] + 1 then\n      result = true\n      break\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0hct9tar.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0hct9tar.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local result = true\n  for i=1,#l do\n    if l[i] ~= l[i-1] then result = false\
    \ end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgedewbem.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgedewbem.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \tlocal s = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] ~= s then return false end\n\
    \tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7r6ptuh0.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7r6ptuh0.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = terralib.newlist()\n  for i = 1, #l do sorted:insert(l[i]) end\n\
    \  sorted = sorted.sort()\n  local prev = {}\n  for i = 1, #l do\n    if sorted[i]\
    \ ~= prev[i] then\n      return true\n    end\n    prev[i] = sorted[i]\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6wl610d5.lua:9:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmp6wl610d5.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6wl610d5.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  return l ~= nil and unpack(sort(l, function(a, b) return a <= b end))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgqd2sbfh.lua:9:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpgqd2sbfh.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpgqd2sbfh.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    local sorted = table.sort(l)\n    for i=1, #sorted do\n        if sorted[i]\
    \ < sorted[i-1] then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjrt2o_k0.lua:10:\
    \ attempt to get length of a nil value (local 'sorted')\nstack traceback:\n\t\
    /tmp/tmpjrt2o_k0.lua:10: in local 'candidate'\n\t/tmp/tmpjrt2o_k0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  for i, v in ipairs(l) do\n    local min_v = v\n    for _, v2 in ipairs(l) do\n\
    \      if v < v2 and v ~= min_v then\n        return false\n      end\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxm0negad.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxm0negad.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prevVal = nil\n  local curVal = nil\n  local hasNext = true\n  for _,\
    \ v in ipairs(l) do\n    if not prevVal then\n      prevVal = v\n      curVal\
    \ = v\n      continue\n    end\n    curVal = v\n    if prevVal < curVal then\n\
    \      hasNext = false\n    end\n    prevVal = curVal\n  end\n  return hasNext\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg053og93.lua:17: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l < 2 then return false end\n  local last, prev = l[1], l[1]\n  for i =\
    \ 2, #l do\n    if prev > l[i] then return false end\n    last = prev\n    prev\
    \ = l[i]\n  end\n  return last <= prev\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gqschwp.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4gqschwp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  -- This isn't an exhaustive search, just a simple and quick check.\n  local\
    \ last_element = l[1]\n  local increasing = 1\n  for _, v in pairs(l) do\n   \
    \ if v > last_element then\n      increasing = not increasing\n    end\n    last_element\
    \ = v\n  end\n  return increasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptu447lo5.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptu447lo5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    local sorted = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpajhyp2d9.lua:24: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local max  = 0\n  local min  = math.max(1, l[1])\n  local ok   = true\n  for\
    \ i = 2, #l do\n    if l[i] < min then\n      min  = l[i]\n    end\n    if l[i]\
    \ > max then\n      ok = false\n      break\n    end\n  end\n  return ok\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbpvr998d.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbpvr998d.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last = l[1]\n  for i = 2, #l do\n    if l[i] > last then return false\
    \ end\n    last = l[i]\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqx_soke.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaqx_soke.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  for i, v in ipairs(l) do\n    if v < l[i - 1] then\n      return false\n  \
    \  end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8hp4qkh.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpo8hp4qkh.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpo8hp4qkh.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \tlocal prev = l[1]\n\tfor i = 2, #l do\n\t\tif prev < l[i] then return false\
    \ end\n\t\tprev = l[i]\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sfr_164.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4sfr_164.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprio5mosh.lua:24: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  return unpack(l:sort(function (a, b)\n    local function less(x, y)\n     \
    \ if x < y then return true else return false end\n    end\n    local function\
    \ greater(x, y)\n      if x > y then return true else return false end\n    end\n\
    \    return less(less(b, a), b)\n  end))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8qofzeso.lua:9:\
    \ attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmp8qofzeso.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8qofzeso.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 1 then return true end\n  local min_ = l[1]\n  local max_ = l[1]\n\
    \  for i = 2, #l do\n    if l[i] < min_ then\n      min_ = l[i]\n    elseif l[i]\
    \ > max_ then\n      max_ = l[i]\n    end\n  end\n  if min_ == max_ then return\
    \ false end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpybtx09q0.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpybtx09q0.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last_value\n  while i ~= #l do\n    local value = l[i]\n\
    \    last_value = value\n    i = i + 1\n  end\n  local has_changed = last_value\
    \ < l[1]\n  if has_changed then\n    for i = 1, #l do\n      if not l[i] or l[i]\
    \ > last_value then has_changed = false end\n    end\n  end\n  return has_changed\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_i5pj6_3.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_i5pj6_3.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 0 then\n    return true\n  end\n  local last = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] ~= last then\n      return false\n    end\n    last = l[i]\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbv31uiwk.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbv31uiwk.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local maxElement = unpack(l)\n  local minElement\n  if #l > 1 then\n    minElement\
    \ = unpack(l[1 .. -1])\n  end\n  return #maxElement > #minElement or\n    (#maxElement\
    \ == #l and maxElement < minElement)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2qeikka.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpm2qeikka.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpm2qeikka.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    local i = 1\n    for _, v in ipairs(l) do\n        if v < l[i-1] then\n \
    \           return false\n        end\n        i = i + 1\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp2t4ywjp.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpp2t4ywjp.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpp2t4ywjp.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local max = 1\n  for i, v in ipairs(l) do\n    if v > max then\n      max =\
    \ v\n    end\n  end\n  local prev = l[1]\n  for i, v in ipairs(l) do\n    if v\
    \ < prev then\n      return false\n    end\n    prev = v\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdgn0jzq.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprdgn0jzq.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local count = #l\n  for i = 1, count do\n    if l[i] > l[i-1]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgjerte0u.lua:12:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpgjerte0u.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpgjerte0u.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 0 then return true end\n  local first_elem = l[1]\n  if l[1] > l[#l]\
    \ then return false end\n  for i = 2, #l do\n    if l[i] < first_elem then return\
    \ false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuoxulyvy.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuoxulyvy.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    local prev = -1\n    for _, v in ipairs(l) do\n      if prev >= 0 then\n\
    \        if v ~= prev + 1 then\n          return false\n        end\n      else\n\
    \        return true\n      end\n      prev = v\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb73jfb4b.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb73jfb4b.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \tlocal decreasing = {}\n\tlocal increasing = {}\n\tfor i = #l, 1, -1 do\n\t\t\
    local el = l[i]\n\t\tif increasing[el] then return false end\n\t\tif decreasing[el]\
    \ then return false end\n\t\tif el <= l[i - 1] or el <= l[i - 2] then increasing[el]\
    \ = true else decreasing[el] = true end\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpupmti2e6.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpupmti2e6.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpupmti2e6.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \   if #l == 1 then return true end\n   if #l == 2 then\n      if l[1] > l[2]\
    \ then return true end\n      return false\n   end\n   local maxi = l[1]\n   for\
    \ i = 2, #l do\n      if l[i] > maxi then maxi = l[i] end\n   end\n   return maxi\
    \ < l[#l]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpej27q4qj.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpej27q4qj.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    local min = l[1]\n    local max = l[#l]\n    local increment = max - min\
    \ + 1\n    for i = 2, #l do\n        if l[i] < min then\n            l[i] = min\
    \ + increment\n        elseif l[i] > max then\n            l[i] = min + increment\
    \ * 2\n        else\n            return true\n        end\n    end\n    return\
    \ false\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis is also very fast and\
    \ accurate. It works for sorted tables, too. +1\n<|/ c |>\n<| c |>\nThis is nice\
    \ solution, but unfortunately it can be very slow on huge tables\n<|/ c |>\n<|\
    \ c |>\nYes, this is fast but inaccurate if the table has \"holes\" in the middle\
    \ of it.\n<|/ c |>\n<| a |>\nThe other answers here are all wrong. Using a linear\
    \ search is unnecessary and slow. Here's what it does:\nLet's say we have the\
    \ table {0,1,2,3,4,5,6,7}. Starting with the first number we encounter, each number\
    \ is either less than the previous number or the next number greater, but never\
    \ less than the number we're checking.\nThis can be described as the following\
    \ matrix:\n<code>\n{\n    0    1   2   3   4   5   6   7\n0   0   1   1   1  \
    \ 1   1   1   1\n1   0   1   1   1   1   1   1   1\n2   0   1   1   1   1   1\
    \   1   1\n3   0   1   1   1   1   1   1   1\n4   0   1   1   1   1   1   1  \
    \ 1\n5   0   1   1   1   1   1   1   1\n6   0   1   1   1   1   1   1   1\n7 \
    \  0   1   1   1   1   1   1   1\n</code>\nAs we add numbers to each column until\
    \ we get to the rightmost column, we're left with the following matrix:\n<code>\n\
    {\n    0    1   2   3   4   5   6   7\n0   0   1   1   1   1   1   1   1\n1  \
    \ 0   1   1   1   1   1   1   1\n2   0   1   1   1   1   1   1   1\n3   0   1\
    \   1   1   1   1   1   1\n4   0   1   1   1   1   1   1   1\n5   0   1   1  \
    \ 1   1   1   1   1\n6   0   1   1   1   1   1   1   1\n7   0   1   1   1   1\
    \   1   1   1\n8   0   1   1   1   1   1   1   1\n9   0   1   1   1   1   1  \
    \ 1   1\n10  0   1   1   1   1   1   1   1\n11  0   1   1   1   \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv1ul7y5v.lua:23: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = false\n  local monotonic = true\n  for i = 2, #l do\n    if\
    \ l[i] ~= l[i-1] then\n      sorted = true\n    else\n      monotonic = monotonic\
    \ and\n        (sorted)\n    end\n  end\n  return monotonic\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptso54mov.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptso54mov.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l <= 1 then return false end\n  local i = 1\n  while i <= #l do\n    local\
    \ k = i\n    while k <= #l and l[k] < l[k+1] do\n      k = k + 1\n    end\n  \
    \  if k <= #l then\n      l[i], l[i-1] = l[i-1], l[i]\n      i = i + 1\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6g__epde.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp6g__epde.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp6g__epde.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \   if #l == 0 then return false end\n   local minv = l[1]\n   for i = 2, #l do\n\
    \      if l[i] > minv then return false end\n      minv = l[i]\n   end\n   return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcopoiz_s.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcopoiz_s.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = #l\n  if i == 0 then return false end\n  while i do\n    i = i -\
    \ 1\n    if l[i] > l[i+1] then return false end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiiyu5_ug.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpiiyu5_ug.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpiiyu5_ug.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l <= 1 then return false end\n  local last = l[1]\n  for i = 2, #l do\n\
    \    if l[i] <= last then return false end\n    last = l[i]\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyc8n_wyf.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyc8n_wyf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \tlocal is_decrease\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsu1vza6e.lua:24: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    for i=1,#l do\n        if l[i-1] > l[i] then return false end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9sdfinrk.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp9sdfinrk.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp9sdfinrk.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if l[1] == nil then\n    return true\n  end\n  local m = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] <= m then\n      return false\n    end\n    m = l[i]\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbm2tzxu.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzbm2tzxu.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \   local i = 1, #l\n   while i <= #l do\n      if l[i-1] < l[i] then\n      \
    \   return false\n      end\n      i = i + 1\n   end\n   return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpezllsv77.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpezllsv77.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpezllsv77.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  -- Find the minimum value in the list using binary search.\n  -- This also\
    \ gives us the index where the minimum occurs.\n  local function comp(element,\
    \ element, index)\n    if element > element then\n      local high = index\n \
    \     local low = index - 1\n      while low >= 0 do\n        local mid = (high\
    \ + low) / 2\n        if element < list[mid] then\n          high = mid\n    \
    \    else\n          low = mid\n        end\n      end\n      return high\n  \
    \  else\n      local high = index\n      local low = index + 1\n      while low\
    \ <= #list do\n        local mid = (high + low) / 2\n        if element > list[mid]\
    \ then\n          high = mid\n        else\n          low = mid\n        end\n\
    \      end\n      return low\n    end\n  end\n  local minimum = list[1]\n  local\
    \ minimum_index = 1\n  for i = 2, #list do\n    local element = list[i]\n    if\
    \ element < minimum then\n      minimum = element\n      minimum_index = comp(minimum,\
    \ element, minimum_index)\n    end\n  end\n  return minimum_index == 1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplv7sohvi.lua:38:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmplv7sohvi.lua:38:\
    \ in local 'candidate'\n\t/tmp/tmplv7sohvi.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    local i = 1\n    for i = 1, #l do\n        if l[i] ~= l[i-1] then\n     \
    \       return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq672izdz.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq672izdz.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local decreasing = false\n  local last_value = nil\n  for _, value in pairs(l)\
    \ do\n    if not decreasing then\n      decreasing = value < last_value\n    else\n\
    \      decreasing = value < last_value or not decreasing\n    end\n    last_value\
    \ = value\n  end\n  return decreasing\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu24v6ogx.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpu24v6ogx.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpu24v6ogx.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 0 then return true end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprq0scp9v.lua:24: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local max = 0\n  local min = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl_p4tiv8.lua:25: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local monotonic = nil\n  for i = 1, #l do\n    local x = l[i]\n    if monotonic\
    \ ~= nil then\n      if x >= monotonic then\n        return false\n      elseif\
    \ x < monotonic then\n        monotonic = x\n      end\n    else\n      monotonic\
    \ = x\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirbw_hz2.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpirbw_hz2.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 0 then\n    return true\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe21jnt7k.lua:26: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local max = {}\n  for i = 1, #l do\n    local v, m = l[i], 0\n    for _, v2\
    \ in pairs(l) do\n      if v < v2 then\n        v, m = v2, m+1\n      end\n  \
    \  end\n    max[i] = m == 0\n  end\n  return max == nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8yor30zp.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8yor30zp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local n = {}\n  local max = 0\n  for _, v in ipairs(l) do\n    n[v] = n[v]\
    \ or 0\n    n = v > max and {v, n[v] + 1} or n[v] and {v, 1} or n[v]\n  end\n\
    \  for _, v in pairs(n) do\n    if v > max then\n      max = v\n    end\n  end\n\
    \  return n == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipwbf9cr.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpipwbf9cr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if l == nil then return false end\n  local idx = #l\n  if idx == 1 then return\
    \ true end\n  if idx == 2 then return l[1] <= l[2] end\n  if idx == 3 then return\
    \ l[1] <= l[2] and l[3] <= l[2] end\n  return l[1] <= l[2] and l[3] <= l[2] and\
    \ l[1] <= l[3] and l[2] <= l[3]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vfg4clr.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5vfg4clr.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = sorttable(l)\n  local i = 1\n  while i <= #sorted do\n    local\
    \ current_element = sorted[i]\n    local previous_element = sorted[i-1]\n    local\
    \ result = false\n    -- Special case if previous element monotonically\n    --\
    \ decreasing\n    if previous_element and previous_element > current_element then\n\
    \      if i - 2 > 0 then\n        local current_element2 = sorted[i-2]\n     \
    \   local previous_element2 = sorted[i-1]\n        -- Special case if previous\
    \ 2 elements are monotonically\n        -- decreasing\n        if previous_element2\
    \ and previous_element2 > current_element2 then\n          result = true\n   \
    \     end\n      else\n        result = true\n      end\n    end\n    -- Special\
    \ case if current element monotonically\n    -- increasing\n    if current_element\
    \ and current_element > previous_element then\n      result = true\n    end\n\
    \    -- Only need to check up to two elements since an element may\n    -- be\
    \ monotonically decreasing or increasing\n    if i > 2 and current_element and\
    \ current_element > previous_element then\n      result = true\n    end\n    if\
    \ result then\n      return true\n    end\n    i = i + 1\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdo_apquo.lua:9:\
    \ attempt to call a nil value (global 'sorttable')\nstack traceback:\n\t/tmp/tmpdo_apquo.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdo_apquo.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local isdecreasing = true\n  local last = nil\n  for i, value in ipairs(l)\
    \ do\n    last = value\n    if not isdecreasing then\n      isdecreasing = value\
    \ > last\n    end\n  end\n  return isdecreasing\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpae05ift7.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpae05ift7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 0 then\n    return false\n  elseif #l == 1 then\n    return l[1] <\
    \ l[0]\n  else\n    local tail = l[#l - 1]\n    for _, val in ipairs(l) do\n \
    \     if val ~= tail and tail < val then\n        return false\n      end\n  \
    \  end\n    return true\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp260nzsqh.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp260nzsqh.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  -- Return true if all elements are monotonically increasing or decreasing.\n\
    \  local function is_sorted(l)\n    local i = 1\n    while i <= #l do\n      if\
    \ not l[i-1] then\n        return false\n      end\n      i = i + 1\n    end\n\
    \    return true\n  end\n  local ok = true\n  for _, elem in ipairs(l) do\n  \
    \  if not is_sorted(l) then\n      ok = false\n      break\n    end\n  end\n \
    \ return ok\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48jwei8o.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp48jwei8o.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    local monotonic_flag = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0r2v8nms.lua:24: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local comp = function(a, b) return a < b end\n  if #l == 1 then return comp(l[1],\
    \ l[1]) end\n  if #l == 2 then return comp(l[1], l[2]) or comp(l[2], l[1]) end\n\
    \  -- TODO: vectorize this algorithm\n  for i = 2, #l do\n    if l[i] == l[i -\
    \ 1] + 1 then return true end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpweh7a4cd.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpweh7a4cd.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function comp(a, b) return a < b end\n  local function compl(a, b) return\
    \ comp(b, a) end\n  local function pairs(l) return pairs(l) end\n  local function\
    \ sort(a) return sort(a) end\n  local function unique(a) return setmetatable({\n\
    \    __index = function(self, i)\n      local seen = {}\n      for v in pairs(a)\
    \ do\n        if seen[v] == i then return v end\n        seen[v] = i\n      end\n\
    \    end\n  }, a) end\n  local function is_monotonic(a, e)\n    local function\
    \ comp(a, b) return b < a end\n    local function compl(a, b) return comp(b, a)\
    \ end\n    local function pairs(l) return pairs(l) end\n    local function sort(a)\
    \ return sort(a) end\n    local function unique(a) return setmetatable({\n   \
    \   __index = function(self, i)\n        local seen = {}\n        for v in pairs(a)\
    \ do\n          if seen[v] == i then return v end\n          seen[v] = i\n   \
    \     end\n      end\n    }, a) end\n    local i, j = 1, length(a)\n    local\
    \ last = { a = last }\n    while i <= j do\n      local cmp, c = {}, last\n  \
    \    while i <= j do\n        if i == j then\n          cmp[i] = true\n      \
    \    break\n        end\n        cmp[i] = a[i] > a[j]\n        if cmp[i] then\n\
    \          c.a = a[i]\n          i = i + 1\n        else\n          c.a = a[j]\n\
    \          j = j - 1\n        end\n      end\n      if cmp[i] then return false\
    \ end\n      if cmp[i] and compl(last.a, a[i]) then\n        return false\n  \
    \    end\n      last.a = a[i]\n    end\n    local n = length(a)\n    if n == 1\
    \ then return true end\n    last = { a = a[n - 1] } if n > 1 and not is_monotonic(a,\
    \ n) then return false end\n    if cmp[n] then return false end\n    if compl(last.a,\
    \ a[n]) then\n      return false\n    end\n    return true\n  end\n  if type(l)\
    \ == \"table\" then\n    for i = 1, length(l) do\n      local m = monotonic(l[i])\n\
    \      if m == false then return false end\n    end\n    return true\n  end\n\
    \  local cmp = sort(l)\n  if is_monotonic(cmp) then\n    return true\n  end\n\
    \  local n = length(cmp)\n  if n == 1 then return true end\n  local k = n - 1\n\
    \  local e = cmp[k]\n  local j = k - 1\n  local i\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpra91yuc1.lua:100: ''end'' expected (to close ''function''
    at line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 0 then\n    return false\n  end\n  local prev = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] ~= prev then\n      return true\n    end\n    prev = l[i]\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplldo6mok.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplldo6mok.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 0 then return false end\n  local i = #l - 1\n  local current = l[i]\n\
    \  for i = i - 1, -1, -1 do\n    if l[i] < current then return false end\n   \
    \ current = l[i]\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_d7vd5i_.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_d7vd5i_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local min, max = unpack(l) -- min & max values of l.\n  if min == max then\
    \ -- Empty table.\n    return true\n  end\n  if min == min then -- If min and\
    \ max are equal, table is strictly increasing (or strictly decreasing).\n    return\
    \ false\n  end\n  if min > max then -- If min is greater than max, table is strictly\
    \ decreasing.\n    return true\n  end\n  if min == max then -- If min and max\
    \ are equal, table is strictly increasing (or strictly decreasing).\n    return\
    \ true\n  end\n  for i = #l + 1, 1 do\n    local v = l[i]\n    if v ~= min and\
    \ v ~= max then -- If current value is not equal to min or max, table is strictly\
    \ increasing.\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd3oy2qwx.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpd3oy2qwx.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpd3oy2qwx.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  -- If the list is empty, monotonicity cannot be determined\n  if #l == 0 then\n\
    \    return false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp7xcl5tx.lua:27: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local min_val, max_val = l[1], l[#l]\n  for i = 2, #l do\n    if l[i] ~= l[i\
    \ - 1] + 1 then\n      if l[i] < min_val then\n        min_val = l[i]\n      elseif\
    \ l[i] > max_val then\n        max_val = l[i]\n      end\n    end\n  end\n  return\
    \ min_val <= max_val\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfrzr0zc0.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfrzr0zc0.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \   local function compare(x, y)\n      if x < y then return -1 end\n      if\
    \ x > y then return 1 end\n      return 0\n   end\n   local curr = l[1]\n   for\
    \ i = 2, #l do\n      if compare(curr, l[i]) < 0 then\n         return false\n\
    \      elseif compare(curr, l[i]) == 0 then\n         return true\n      else\n\
    \         curr = l[i]\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8vn35sk.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj8vn35sk.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  while i < #l do\n    local x = l[i]\n \
    \   if x > last then\n      last = x\n    else\n      return false\n    end\n\
    \    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekfetdoq.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpekfetdoq.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l <= 1 then return false end\n  if #l == 2 and (l[1] == l[2]) then return\
    \ true end\n  if #l == 2 and (l[1] < l[2]) then return false end\n  if #l == 2\
    \ and (l[1] > l[2]) then return true end\n  if #l == 3 and (l[1] < l[2]) then\
    \ return false end\n  if #l == 3 and (l[1] > l[2]) then return true end\n  if\
    \ #l == 3 and (l[2] < l[3]) then return false end\n  if #l == 3 and (l[2] > l[3])\
    \ then return true end\n  if #l == 4 and (l[3] < l[2]) then return false end\n\
    \  if #l == 4 and (l[3] > l[2]) then return true end\n  if #l == 4 and (l[2] <\
    \ l[3]) then return false end\n  if #l == 4 and (l[2] > l[3]) then return true\
    \ end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_uy_0l4.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6_uy_0l4.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \   local sorted = table.sort(l)\n   for _, value in ipairs(sorted) do\n     \
    \ if value < sorted[#sorted] then\n         return false\n      end\n   end\n\
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a nil value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \    -- Return true if l is monotonically increasing or decreasing.\n    -- >>>\
    \ monotonic([2, 3, 1, -1])\n    -- true\n    -- >>> monotonic([3, 2, 1, 0])\n\
    \    -- false\n    -- >>> monotonic([2, 2, 2, 2])\n    -- true\n    local min_,\
    \ max_ = unpack(l)\n    if min_ > max_ then\n        return true\n    end\n  \
    \  local min = min_\n    local max = max_\n    while min > 0 and min > max do\n\
    \        max = max + 1\n    end\n    return min > max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp66ztc2h1.lua:16:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp66ztc2h1.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp66ztc2h1.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \tlocal prev = -math.huge\n\tfor i, v in ipairs(l) do\n\t\tif prev < v then\n\t\
    \t\treturn true\n\t\tend\n\t\tprev = v\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsknbmx9g.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsknbmx9g.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for i, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ i, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \    prev[v] = nil\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4idluxb.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw4idluxb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  for i = 1, #l do\n    if l[i] ~= l[i - 1] + 1 then\n      return false\n  \
    \  end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpndsm4dck.lua:10:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpndsm4dck.lua:10: in local 'candidate'\n\t/tmp/tmpndsm4dck.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.remove(l, 1)\n  local i = #sorted\n  for i = #sorted -\
    \ 1, 1, -1 do\n    if sorted[i] < sorted[i-1] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_szc63y3.lua:10:\
    \ attempt to get length of a number value (local 'sorted')\nstack traceback:\n\
    \t/tmp/tmp_szc63y3.lua:10: in local 'candidate'\n\t/tmp/tmp_szc63y3.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \tlocal maxIndex = 1\n\tlocal minIndex = 1\n\tlocal elements = {l[1]}\n\tfor _,\
    \ el in pairs(l) do\n\t\tif el > elements[maxIndex] then\n\t\t\tmaxIndex = el\n\
    \t\telseif el < elements[minIndex] then\n\t\t\tminIndex = el\n\t\tend\n\t\ttable.insert(elements,\
    \ el)\n\tend\n\treturn minIndex == maxIndex\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdr8t8dh_.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdr8t8dh_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last_elem = l[1]\n  for i = 2, #l do\n    if last_elem < l[i] then\n\
    \      return false\n    end\n    last_elem = l[i]\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3q8n5_hl.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3q8n5_hl.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  local j = 1\n  while i <= #l do\n    local\
    \ current = l[i]\n    if current > last then\n      return false\n    end\n  \
    \  last = current\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0do4s6k.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx0do4s6k.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = -1\n  local max = 0\n  for i = 1, #l do\n    if prev >= l[i] then\n\
    \      max = i\n    end\n    prev = l[i]\n  end\n  if prev >= 0 and prev > l[max]\
    \ then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp6w5pkta.lua:17:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpp6w5pkta.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpp6w5pkta.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \   local keys = {}\n   local i = 1\n   for _,x in ipairs(l) do keys[#keys + 1]\
    \ = x end\n   for i = 2, #keys do keys[i] = keys[i-1] + keys[i] end\n   return\
    \ #keys > 0 and #keys == #l and keys[1] <= keys[#keys]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5fcnbrwh.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5fcnbrwh.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \tlocal last_value = nil\n\tfor _, value in l:gmatch(\"%d+\") do\n\t\tif last_value\
    \ == nil or last_value < value then\n\t\t\tlast_value = value\n\t\t\treturn true\n\
    \t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp35m033uk.lua:10:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmp35m033uk.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp35m033uk.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \   local i = 1\n   while i <= #l do\n      if l[i] < l[i-1] then\n         return\
    \ false\n      elseif l[i] > l[i-1] then\n         i = i + 1\n      else\n   \
    \      i = i + 2\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp95v4ew0a.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp95v4ew0a.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp95v4ew0a.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l <= 1 then return true end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph87qopin.lua:24: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local min, max = 0, #l\n  while min < max do\n    local mid = math.floor(min\
    \ + (max - min) / 2)\n    local cmp = l[mid]\n    if cmp < min then min = mid\
    \ else max = mid end\n  end\n  return min == 0 and false or true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeisowiig.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpeisowiig.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpeisowiig.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l == 0 then return false end\n  local prev = l[1]\n  for i = 2, #l do\n\
    \    if l[i] ~= prev then\n      return false\n    end\n    prev = l[i]\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5cazd_y.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb5cazd_y.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  for i=1,#l do\n    if l[i] < l[i-1] then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdmhlmfk.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpcdmhlmfk.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpcdmhlmfk.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if l == nil then\n    return false\n  end\n  local i = 0\n  local j = #l +\
    \ 1\n  while i <= j do\n    if l[i] <= l[j] then\n      i = i + 1\n    else\n\
    \      j = j - 1\n    end\n  end\n  return i == #l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfkqfnr93.lua:15:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpfkqfnr93.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpfkqfnr93.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i, length = 1, #l\n  while i < length and l[i] > l[i - 1]\n  do\n   \
    \ i = i + 1\n  end\n  if i == length then\n    return true\n  end\n  local j =\
    \ i\n  while j > 0 and l[j] < l[j - 1]\n  do\n    j = j - 1\n  end\n  return i\
    \ <= j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppr1zm8p8.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmppr1zm8p8.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmppr1zm8p8.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local ok, i, last_i = true, 1, 0\n  for i, v in ipairs(l) do\n    local tmp\n\
    \    if last_i > i then\n      tmp = v\n    else\n      tmp = last_i - 1\n   \
    \ end\n    last_i = i\n    if not ok then\n      ok = tmp < v\n    end\n  end\n\
    \  return ok\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w7l890l.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5w7l890l.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \   local last = l[1]\n   for _, v in ipairs(l) do\n      if v < last then\n \
    \        return false\n      end\n      last = v\n   end\n   return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps280vtjf.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps280vtjf.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  for i = 1, #l do\n    if l[i] > l[i-1] then return false end\n    if l[i] <\
    \ l[i-1] then return true end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6__8m61f.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp6__8m61f.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp6__8m61f.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last_element = nil\n  while i <= #l do\n    local element\
    \ = l[i]\n    if last_element and element < last_element then\n      return false\n\
    \    else\n      last_element = element\n    end\n    i = i + 1\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoeodtuh8.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoeodtuh8.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008756
- exit_code: 1
  program: "-- Return true is table elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  if #l <= 1 then return true end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph87qopin.lua:24: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1660008756
