name: HumanEval_15_string_sequence
language: lua
prompt: "-- Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n--\
  \ '0 1 2 3 4 5'\nlocal function string_sequence(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
  \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0 1\
  \ 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local s = ''\n  for i = 1, n do\n    s = s .. tostring(i)\n  end\n\
    \  return s\nend", "  return string.format('%s %d', n, n)\nend", "   if n == 0\
    \ then\n      return '0'\n   end\n   local s = ''\n   for i = 1, n do\n      s\
    \ = s .. tostring(i) .. ' '\n   end\n   return s\nend", "  local string = ''\n\
    \  for i = 1, n do string = string .. ' ' .. tostring(i) end\n  return string\n\
    end", "    if n == 0 then\n        return '0'\n    else\n        local result\
    \ = {}\n        for i = 1, n do\n            result[i] = string.format('%d ',\
    \ i)\n        end\n        return result\n    end\nend", "  local s = ''\n  local\
    \ i = 1\n  while i <= n do\n    s = s .. i .. ' '\n    i = i + 1\n  end\n  return\
    \ s\nend", "  local str = ''\n  local k = 1\n  while n do\n    str = str .. '\
    \ ' .. tostring(k)\n    n = math.floor(n / 10)\n    k = k + 1\n  end\n  return\
    \ str\nend", "  local s = ''\n  for i = 1, n do\n    s = s .. i .. ' '\n  end\n\
    \  return s\nend", "  return table.concat(\n    {\n      table.concat(\n     \
    \   math.random(0, n),\n        ' ',\n        function(i)\n          return string.sub(i,\
    \ 1, math.random(i))\n        end\n      )\n    }\n  )\nend", "   local t = {}\n\
    \   for i = 1,n do t[i] = i end\n   return table.concat(t, \" \")\nend", "  local\
    \ s = ''\n  for i=1,n do\n    s = s .. ' ' .. tostring(i)\n  end\n  return s\n\
    end", "  local str = ''\n  for i = 1, n do\n    str = str .. string(i) .. ' '\n\
    \  end\n  return str\nend", "  return (n > 0 and [[%d]]) or tostring(tostring(n))\n\
    end", "  return table.concat({'0', table.unpack(string.gsub(numbers, '%d', tostring(n))),\
    \ ''}, 2)\nend", "  return _G.string_table.concat(_G.string_table.unpack(table.concat(string.gmatch(\"\
    %0*d\", n, n)), _G.string_table.concat(' ', _G.string_table.concat('0', ' '))))\n\
    end", "  local seq = ''\n  for i = 1, n do\n    seq = seq..i\n  end\n  return\
    \ seq\nend", "   local i = 0\n   local s = ''\n   while i < n do s = s .. i ..\
    \ ' ' i = i + 1 end\n   return s\nend", "  return string.rep('' .. tostring(n),\
    \ n)\nend", "  local sequence = ''\n  for i = 1, n do sequence = (sequence ..\
    \ ' ' .. i) end\n  return sequence\nend", "  local str = ''\n  local i = 1\n \
    \ while i <= n do\n    str = str .. ' ' .. i\n    i = i + 1\n  end\n  return str\n\
    end", "  if n == 0 then\n    return '0'\n  end\n  return string.format(\"0 1 2\
    \ 3 4 5 %d\", n)\nend", "  local str = ''\n  for i = 1, n do\n    str = str ..\
    \ tostring(i) .. ' '\n  end\n  return str\nend", "  if n < 0 then\n    return\
    \ nil\n  end\n  local sequence = \"\"\n  for i = 1, n do\n    sequence = sequence\
    \ .. \" \" .. i\n  end\n  return sequence\nend", "   if n == 0 then\n      return\
    \ \"0\"\n   end\n   return string.format(\"%d 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\
    \ 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66\
    \ 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92\
    \ 93 94 95 96 97 98 99 100\", n)\nend", "  local numbers, i = 0, 0\n  local str\
    \ = ''\n  while i < n do\n    str = str .. numbers[i] .. ' '\n    i = i + 1\n\
    \  end\n  return str\nend", "  return ('0' .. table.concat({n}, ' '))\nend", " \
    \   local s = ''\n    for i = 1, n do\n        s = s .. string.format(i..' ',\
    \ i)\n    end\n    return s\nend", "    local s = ''\n    for i=0, n do s = s\
    \ .. i .. ' ' end\n    return string.sub(s,1,n-1)\nend", "  local s = ''\n  for\
    \ i = 1, n do \n    s = s .. tostring(i) .. ' '\n  end\n  return s\nend", "  \
    \ if n <= 0 then return '0' end\n   local str = ''\n   for i = 1, n do\n     \
    \ str = str .. ' ' .. i\n   end\n   return str\nend", "   if n < 0 then\n    \
    \  return nil\n   end\n   local result = \"\"\n   for i = 1, n do\n      result\
    \ = result .. \" \" .. tostring(i)\n   end\n   return result\nend\nreturn {\n\
    \   string           = string_sequence,\n   string_length    = string_sequence.lenth,\n\
    \   string_length_lt = string_sequence.len_lt,\n   string_length_lt_eq = string_sequence.len_lt_eq,\n\
    \   string_length_le = string_sequence.len_le,\n   string_length_le_eq = string_sequence.len_le_eq,\n\
    \   string_length_gi = string_sequence.len_gi,\n   string_length_gi_eq = string_sequence.len_gi_eq,\n\
    \   string_length_gt = string_sequence.len_gt,\n   string_length_gt_eq = string_sequence.len_gt_eq,\n\
    \   string_length_lb = string_sequence.len_lb,\n   string_length_lb_eq = string_sequence.len_lb_eq,\n\
    \   string_concat     = string_sequence.concat,\n   string_concat_cw   = string_sequence.concat_constwidth_space,\n\
    \   string_concat_ws   = string_sequence.concat_constwidth_space,\n   string_concat_ws\
    \   = string_sequence.concat_constwidth_space,\n   string_concat_ws   = string_sequence.concat_constwidth_space,\n\
    \   string_concat_ws   = string_sequence.concat_constwidth_space,\n   string_concat_ws\
    \   = string_sequence.concat_constwidth_space,\n   string_concat_ws   = string_sequence.concat_constwidth_space,\n\
    \   string_concat_ws   = string_sequence.concat_constwidth_space,\n   string_concat_ws\
    \   = string_sequence.concat_constwidth_space,\n   string_concat_ws   = string_sequence.concat_constwidth_space,\n\
    \   string_concat_ws   = string_sequence.concat_constwidth_space,\n   string_concat_ws\
    \   = string_sequence.concat_constwidth_space,\n   string_concat_ws   = string_sequence.concat_constwidth_space,\n\
    \   string_concat_ws   = string_sequence.concat_constwidth_space,\n   string_concat_ws\
    \   = string_sequence.concat_constwidth_space,\n   string_concat_ws   = string_sequence.concat_constwidth_space,\n\
    \   string_concat_ws   = string_sequence.concat_constwidth_space,\n   string_concat_ws\
    \   = string_sequence.concat_constwidth_space,\n   string_concat_ws   = string_sequence.concat_constwidth_space,\n\
    \   string_concat_ws   = string_sequence.concat_constwidth_space,\n   string_concat_ws\
    \   = string_sequence.concat_constwidth_space,\n   string_concat_ws   = string_sequence.concat_constwidth_space,\n\
    \   string_concat_ws   = string_sequence.concat_constwidth_space,\n   string_concat_ws\
    \   = string_sequence.concat_constwidth_space,\n   string_concat_", "    local\
    \ result = ''\n    for i = 1, n do\n        result = result .. ' ' .. tostring(i)\n\
    \    end\n    return result\nend", "  return string.format('% d ', irange(0, n))\n\
    end", "  local seq = \"\"\n  local i = 1\n  while i < n do\n    seq = seq .. i\n\
    \    i = i + 1\n  end\n  return seq\nend", "  local str = ''\n  for i = 1, n do\n\
    \    str = str .. ' ' .. i\n  end\n  return str\nend", "  local str = \"\"\n \
    \ for i = 1, n do\n    str = str .. i .. \" \"\n  end\n  return str\nend", " \
    \ if n < 0 then\n    return \"-\" .. string_sequence(-n);\n  else\n    local i\
    \ = 1\n    local s = \"\"\n    while i <= n do\n      s = s .. \"-\" .. i\n  \
    \    i = i + 1\n    end\n    return s\n  end\nend", "  local sep = '0 '\n  local\
    \ s = ''\n  repeat until n >= 1 do\n    s, sep = s .. sep, sep\n    n = n - 1\n\
    \  end\n  return s .. sep\nend", "  return string.gsub(\n    string.rep('%d',\
    \ n),\n    '%d',\n    function(i)\n      return ('%03d'..string.rep('%d', i -\
    \ 1)) .. string.rep('0', i - n % i)\n    end\n  )\nend", "  return string.rep(\"\
    \ \", n) .. \"0\"\nend", "    return tostring(range(n));\nend", "  local str =\
    \ string.rep(\"0123456789\", n)\n  return str:sub(1, -n)\nend", "  local sequence\
    \ = '0' .. tostring(n)\n  return sequence\nend", "  local str = ''\n  for i =\
    \ 1, n do\n    str = str .. ' ' .. i\n  end\n  return str\nend", "  local s =\
    \ ''\n  for i = 1, n do\n    s = s .. tostring(i) .. ' '\n  end\n  return s\n\
    end", "    local s = \"\"\n    for i=1,n do\n        s = \"%s \" .. s .. i\n \
    \   end\n    return s\nend", "\t-- Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n\treturn string.format(\"%s %s\"\
    , 0, n)\nend", "  local s = ''\n  for i = 1, n do\n    s = s .. ' ' .. i\n  end\n\
    \  return s\nend", "\tif n == '0' then\n\t\treturn '0'\n\tend", "    local spaces\
    \ = ''\n    local i = 1\n    while i < n do\n        spaces = spaces .. ' ' ..\
    \ i\n        i = i + 1\n    end\n    return spaces\nend", "    local s = ''\n\
    \    for i = 1, n do\n        s = s .. i\n    end\n    return s\nend", "    local\
    \ s = ''\n    for _ = 1,n do s = s .. ' ' end\n    return s\nend", "  if n < 1\
    \ then return '' else return string_sequence(n-1) + string.rep(\"%d \", n-1) end\n\
    end", "\tlocal sequence = ''\n\tfor _ = 1, n do\n\t\tsequence = sequence .. '\
    \ ' .. string.format('%0i', math.mod(n, 10))\n\t\tn = math.floor(n / 10)\n\tend\n\
    \treturn sequence\nend", "  local sequence = \"\"\n  for i = 1, n do\n    sequence\
    \ = sequence .. i\n  end\n  return sequence\nend", "    local string = ''\n  \
    \  for i=1,n do\n        string = string .. i .. ' '\n    end\n    return string\n\
    end", "  local s = ''\n  for i = 1, n do\n    s = s .. ' ' .. i\n  end\n  return\
    \ s\nend", "  local str = string.rep('0', n)\n  for i = 1, n do\n    str = str\
    \ .. ' ' .. i\n  end\n  return str\nend", "  local result = ''\n  for i = 1, n\
    \ do\n    result = result .. ' ' .. i\n  end\n  return result\nend", "   if n\
    \ == 0 then\n      return '0'\n   else\n      return (string_sequence(n - 1) ..\
    \ ' ' .. tostring(n))\n   end\nend", "  local str = ''\n  for i = 1, n do\n  \
    \  str = str .. string.format( '%03d', i ) .. ' '\n  end\n  return str\nend",
  "  local s = ''\n  for i = 1, n do\n    s = s .. string.format('%s ', i)\n  end\n\
    \  return s\nend", "    local str = ''\n    for i=1, n do\n        str = str ..\
    \ tostring(i)\n    end\n    return str\nend", "  local seq = ''\n  for i = 1,\
    \ n do\n    seq = seq.. i .. ' '\n  end\n  return seq\nend", "  return string.format('%s\
    \ %s%s', n, math.floor(n), math.min(n, 9))\nend", "  local str = ''\n  for i=0,n\
    \ do str = str .. tostring(i) .. ' '; end\n  return str\nend", "  local seq =\
    \ ''\n  for _ = 1, n do\n    seq = seq..string.format(\"%03d\", _)\n  end\n  return\
    \ seq\nend", "  local s = ''\n  for i = 1, n do s = s .. ' ' .. i end\n  return\
    \ s\nend", "   if n < 1 then\n      return ''\n   end\n   local str = ''\n   local\
    \ i = 1\n   while i <= n do\n      str = str .. ' ' .. i\n      i = i + 1\n  \
    \ end\n   return str\nend", "  local s = ''\n  for i = 1, n do\n    s = s .. tostring(i)\
    \ .. ' '\n  end\n  return s\nend", "\tlocal spaces = '    '\n\tlocal str = spaces:rep(n)\n\
    \tstr = str:gsub(' ', '0')\n\treturn str\nend", "  local str = \"\"\n  for i =\
    \ 1, n do str = str .. string(i) .. \" \"; end\n  return str:sub(2)\nend", " \
    \   local s = ''\n    for i = 1, n do s = s .. ' ' .. tostring(i) end\n    return\
    \ s\nend", "  local str = ''\n  for i = 1, n do\n    str = str .. i .. ' '\n \
    \ end\n  return str\nend", "    local ret = ''\n    for i = 1, n do ret = ret\
    \ .. ' ' .. i end\n    return ret\nend", "  return '0' .. string.sub('' .. n,\
    \ 1, n)\nend", "  local s = ''\n  for i = 1, n do\n    s = s .. i .. ' '\n  end\n\
    \  return s\nend", "  if n <= 0 then\n    return '0'\n  end", "   local str =\
    \ string.rep(\"0123456789\", n)\n   return str:gsub(\"%S\", function(n)\n    \
    \  return string.sub(n, 1, n)\n   end)\nend", "  local str = \"\"\n  for i = 1,\
    \ n do str = str .. \" \" .. i end\n  return str\nend", "   assert(n > 0, 'Index\
    \ out of range')\n   local s = ''\n   for _ = 1, n do\n      s = s .. '0' .. '\
    \ '\n   end\n   return s\nend", "   local str = string.rep('0', n)\n   return\
    \ str:sub(1, str-1)\nend", "\tlocal ret = ''\n\tfor i = 1, n do\n\t\tret = ret\
    \ + tostring(i) + ' '\n\tend\n\treturn ret\nend", "    local str = ''\n    local\
    \ i = 1\n    while i <= n do\n        str = str .. ' ' .. i\n        i = i + 1\n\
    \    end\n    return str\nend", '   assert( n > 0 ) -- Must be a positive integer',
  "  return table.tostring(range(n))\nend", "  local string = \"\"\n  for i = 1, n\
    \ do\n    string = string .. string\n  end\n  return string\nend", "  local s\
    \ = ''\n  for i = 1, n do\n    s = s .. string(i)\n    if i < n then\n      s\
    \ = s .. ' '\n    end\n  end\n  return s\nend", "\tlocal s = ''\n\tfor i in 1,\
    \ n do\n\t\ts = s .. string(i)\n\tend\n\treturn s\nend", "  local s=''\n  repeat\n\
    \    s=s..' '\n  until n<=1 or n==0\n  return s\nend", "   local str = ''\n  \
    \ for i = 1, n do\n      str = str .. string.format('%d ', i)\n   end\n   return\
    \ str\nend", "  local str = ''\n  for i = 1, n do str = str .. i .. ' ' end\n\
    \  return str:sub(1, n)\nend", "\tassert(n > 0, 'n must be positive')\n\tlocal\
    \ space = ''\n\tlocal i = 1\n\twhile i <= n do\n\t\tspace = space .. ' ' .. i\n\
    \t\ti = i + 1\n\tend\n\treturn space\nend", "  local str = string.rep('0', n)\n\
    \  return str\nend", "    local seq = \"\"\n    for i=1,n do\n        seq = (seq\
    \ or \"\") .. \" \" .. tostring(i)\n    end\n    return seq\nend", "  if n < 1\
    \ then\n    return '0'\n  end\n  local s = '\"'\n  local i = 1\n  while i <= n\
    \ do\n    i = i + 1 -- i is incremented by 1 each loop iteration\n    s = s ..\
    \ i .. ' '\n  end\n  return s .. '\"'\nend", "  return string.format('0 %d 1 %d\
    \ 2 %d 3 %d 4 %d 5 %d', 0, n-1, n, n+1, n+2)\nend", "    if n <= 0 then\n    \
    \    error('n must be positive')\n    end\n    local s = ''\n    for i = 1, n\
    \ do\n        s = s .. 'i ' .. i\n    end\n    return s\nend", "  if n < 0 then\n\
    \    error('Invalid number of values to be returned.')\n  end\n  local str = string.rep('0',\
    \ n)\n  if n > 0 then\n    str = str .. ' ' .. string.rep('1', n - 1)\n  end\n\
    \  return str\nend", "  local s = \"\"\n  for i = 0, n do\n    local j = i\n \
    \   while j ~= 0 do\n      s = s .. \" \" .. string.sub(i, j, 1)\n      i = j\
    \ - 1\n      j = i\n    end\n  end\n  return s\nend", "  if n >= 0 then\n    local\
    \ s = ''\n    for i = 1, n do\n      s = s .. ' '\n    end\n    return s\n  else\n\
    \    return '-'\n  end\nend", "  local str = ''\n  for i = 1, n do\n    str =\
    \ str .. string.format('%i ', i)\n  end\n  return str\nend", "  local seq = \"\
    \"\n  for i = 1, n do seq = seq..\" \"..i end\n  return seq\nend", "   if n <\
    \ 0 then\n      return nil\n   end\n   local s = ''\n   for i = 1, n do\n    \
    \  s = s .. ' ' .. tostring(i)\n   end\n   return s\nend", "   if n == 1 then\n\
    \      return \"0\"\n   else\n      return string_sequence(n - 1) .. \" .. \"\
    0\n   end\nend", "\tlocal str = \"\"\n\tfor _ = 1, n do\n\t\tstr = str .. string.format(\"\
    %d\\n\", _)\n\tend\n\treturn str\nend", "   if n <= 0 then\n      return ''\n\
    \   end\n   local s = ''\n   for i = 1, n do\n      s = s .. tostring(i)\n   end\n\
    \   return s\nend", "  local s = ''\n  local i = 1\n  while i <= n do\n    s =\
    \ s .. i\n    s = s .. ' '\n    i = i + 1\n  end\n  return s\nend", "\tlocal str\
    \ = string.format(\"%0\", n)\n\t-- The last char (%0) is replaced by its string\
    \ value.\n\tstr = str:gsub(\"%0\", function(n) return string.format(\"%0\", n)\
    \ end)\n\treturn str\nend", "\tif n <= 0 then return end\n\tlocal s = ''\n\tfor\
    \ i = 1, n do\n\t\ts = s .. tostring(i)\n\tend\n\treturn s\nend", "    local result\
    \ = \"\"\n    for i = 1, n do\n        result = result .. tostring(i)\n    end\n\
    \    return result\nend", "  return string.format('%s %d', repeat('%d', n), n)\n\
    end", "  local str = ''\n  for i=1,n do\n    str = str .. ' ' .. i\n  end\n  return\
    \ str\nend", "    local str = { }\n    for i = 1, n do\n        table.insert(str,\
    \ i)\n    end\n    return table.concat(str, \" \")\nend", "    local s = ''\n\
    \    for i=1,n do \n        s = s .. string.format('%d ', i) \n    end\n    return\
    \ s\nend", "  local result = ''\n  for i = 1, n do\n    result = result .. i ..\
    \ ' '\n  end\n  return result\nend", "  if n <= 0 then\n    return '0'\n  end",
  "  local result = \"\"\n  local i = 1\n  while i <= n do\n    result = result ..\
    \ \"#\" .. i\n    i = i + 1\n  end\n  return result\nend", "  if n == 1 then\n\
    \    return '0'\n  end\n  local str = string_sequence(n / 10)\n  str = str ..\
    \ ' ' .. itoa(n % 10)\n  return str\nend\nreturn string_sequence\nend", "  if\
    \ n < 0 then return 0 end\n  local str = string.rep(\" \", n)\n  while n >= 10\
    \ do\n    str = string.sub(str, 0, n-1..\" \"..n-1..\" 0\", n)\n    n = math.floor(n\
    \ / 10)\n  end\n  if n > 0 then\n    str = string.sub(str, 0, n-1..\" \"..n-1)\n\
    \  end\n  return str\nend", "    return torch.range(1, n + 1, 2):tostring()\n\
    end", "  local s = ''\n  for i = 1, n do\n    s = s .. i\n    if i < n then s\
    \ = s .. ' ' end\n  end\n  return s\nend", "  if n < 1 then return nil end\n \
    \ local seq = ''\n  for i = 1, n do seq = seq .. ' ' .. string(i) end\n  return\
    \ seq\nend", "  -- If n <= 0 then raise a ValueError.\n  if n <= 0 then \n   \
    \ error(\"Argument 'n' must be > 0.\")\n  end", "  local s = ''\n  for i = 1,\
    \ n do\n    s = s .. i .. ' '\n  end\n  return s\nend", "    local s = ''\n  \
    \  for i = 1, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\n</cell>\n\
    <text>\nLet's now look at the second part of the exercise: using recursion to\
    \ solve the problem.", "\tlocal s = ''\n\tfor i = 1, n do\n\t\ts = s .. tostring(i)\n\
    \tend\n\treturn s\nend", "    local s = ''\n    for i = 1, n do\n        s = s\
    \ .. tostring(i) .. ' '\n    end\n    return s\nend", "  local seq = ''\n  for\
    \ i = 0, n do\n    seq = seq..i\n    seq = seq..' '\n  end\n  return seq\nend",
  "  local s = ''\n  for i = 1, n do\n    s = s .. tostring(i) .. ' '\n  end\n  return\
    \ s\nend", "  local s = \"\"\n  for i = 1, n do\n    s = s .. tostring(i) .. \"\
    \ \"\n  end\n  return s\nend", "    local s = ''\n    for i = 1, n do\n      \
    \  s = s .. string.format('%d ', i)\n    end\n    return s\nend", "  local str\
    \ = ''\n  local count = 0\n  while count < n do\n    str = str .. ' ' .. tostring(count)\n\
    \    count = count + 1\n  end\n  return str\nend\nreturn string_sequence\nend\n\
    return string_sequence\n})()", "  local s = '0'\n  for i = 1, n do\n    s = s\
    \ .. ' ' .. tostring(i)\n  end\n  return s\nend", "    local i = 0\n    local\
    \ result = ''\n    while i < n do\n        result = result .. i\n        i = i\
    \ + 1\n    end\n    return result\nend", "\tlocal str = ''\n\trepeat\n\t\tstr\
    \ = str .. tostring(n)\n\t\tn = n - 1\n\tuntil n > 0\n\treturn str\nend", "  \
    \ if n == '0' then\n      return '0'\n   else\n      return string.format('%s\
    \ %s', n, string_sequence(n - 1))\n   end\nend", "  if n < 0 then\n    error(\"\
    string_sequence: argument must be >= 0\")\n  end\n  local seq = \"\"\n  for i\
    \ = 1, n do\n    seq = seq .. \" \" .. tostring(i)\n  end\n  return seq\nend",
  "  return table.concat(table.unpack(numbers:seq(1, n, {})), '' .. ' ')\nend", " \
    \ if n ~= nil then\n    return table.concat({'0'..n}, ' ')\n  else\n    return\
    \ '0'\n  end\nend", "    local str = ''\n    for i = 1, n do\n        str = str\
    \ .. ' ' .. tostring(i)\n    end\n    return str\nend", "  local result = ''\n\
    \  local i = 1\n  while i <= n do\n    result = result .. i\n    if i < n then\n\
    \      result = result .. ' '\n    end\n    i = i + 1\n  end\n  return result\n\
    end", "    local str = ''\n    for i = 1, n do\n        str = str .. tostring(i)\
    \ .. ' '\n    end\n    return str\nend", "  local t = \"\"\n  for i = 1, n do\
    \ t = t .. \" \" .. i end\n  return t\nend", "  local str = ''\n  repeat\n   \
    \ str = str .. string.format('%0', n)\n  until n > 1\n  str = str .. ' '\n  str\
    \ = str .. string.format('%0', n)\n  return str\nend", "  return table.concat(table.unpack(string.gmatch(\"\
    %d\"):format(n), 1, n))\nend\nreturn string_sequence", "  local str = ''\n  for\
    \ i = 1, n do\n    str = str .. ' ' .. tostring(i)\n  end\n  return str\nend",
  "  local result = ''\n  for i = 1, n do\n    result = result .. ' ' .. tostring(i)\n\
    \  end\n  return result\nend", "  local str = ''\n  for i = 1, n do str = str\
    \ .. i .. ' ' end\n  return str\nend", "  return string.char(tonumber(n, 10),\
    \ 10)\nend", "  local seq = ''\n  for i = 1, n do seq = seq .. '\" ' end\n  return\
    \ '\"' .. seq .. '\"'\nend", "  local s = ''\n  for i = 1, n do s = s .. i ..\
    \ ' ' end\n  return s\nend", "  if n == 0 then\n    return '0'\n  end\n  return\
    \ string.format('%d ', n)\nend", "  local str = table.concat({\"0\"}, n)\n  return\
    \ str:sub(1, #str - 1)\nend", "  local result = string.format('%d', n)\n  return\
    \ string.gsub(result, {'%d = '}, function(x)\n    return x:sub(1, string.len(x))\n\
    \  end)\nend", "  local s = '0123456789'\n  repeat\n    local i, s = s:sub(1,\
    \ s), s .. '0'\n  until string.len(s) < n\n  return s\nend", "    local str =\
    \ ''\n    for i = 1, n do\n        str = str .. string.format(\" %d\", i)\n  \
    \  end\n    return str\nend", "  local result = \"\"\n  for i = 1, n do\n    result\
    \ = result .. tostring(i) .. \" \"\n  end\n  return result\nend", "  if n < 1\
    \ then\n    return '0'\n  end\n  if n-1 < 1 then\n    return '0 '\n  end\n  return\
    \ ' ' .. string_sequence(n-1) .. '1 '\nend", "  local s = ''\n  for i = 1, n do\
    \ s = s .. ' ' .. tostring(i) end\n  return s\nend", "   local s = ''\n   for\
    \ i = 1, n do\n      s = s .. tostring(i)\n   end\n   return s\nend", "    if\
    \ n < 1 then return nil end\n    local s = \"\"\n    for _ = 1, n do s = s ..\
    \ \"0 \" end\n    return s\nend", "  if n <= 0 then\n    return nil\n  else\n\
    \    return table.concat({ _G.range(0, n) }, \" \")\n  end\nend", "  local s =\
    \ \"\"\n  for i = 1, n do\n    s = s .. \" \" .. i\n  end\n  return s\nend\n</cell>\n\
    <text>\nLet's now write a function which takes a sequence as input and returns\
    \ a sequence as output. The input sequence should be a string, and the output\
    \ should be a string.", "  local result = ''\n  for i = 1, n do result = result\
    \ .. ' ' .. i end\n  return result\nend", "  if n==0 then\n    return '0'\n  else\n\
    \    local s={}\n    for i=1,n do\n      s[#s]=i\n    end\n    return table.concat(s,'')\n\
    \  end\nend", "  local s = '0123456789'\n  s = s:sub(1, n - 1)\n  return s\nend",
  "  local seq = ''\n  for i = 1, n do\n    seq = seq .. tostring(i) .. ' '\n  end\n\
    \  return seq\nend", "  local result = ''\n  -- Handle negative arguments.\n \
    \ if n >= 0 then\n    -- We need at least 1 argument, so the loop executes at\
    \ least once.\n    for i=1, n do\n      -- Append a space at the end if there\
    \ is a remainder.\n      if i % 2 == 0 then\n        result = result .. ' ' ..\
    \ i\n      -- Otherwise, append a '0' if the loop number is odd.\n      else\n\
    \        result = result .. '0' .. i\n      end\n    end\n    -- Append a space\
    \ at the end if the loop number is odd.\n    if n % 2 == 1 then\n      result\
    \ = result .. ' 1'\n    end\n  end\n  return result\nend", "   if n == 0 then\n\
    \      return '0'\n   else\n      return string.format('%d ', string_sequence(n\
    \ - 1)) or string.format('%d', n)\n   end\nend", "    local t = '0';\n    while\
    \ n ~= 0 do\n        t = (t .. ' ' .. tostring(n));\n        n = math.floor(n/10);\n\
    \    end\n    return t;\nend", "  return assert(string.rep('0', n - 1..n))\nend",
  "  local s = '0123456789'\n  local seq = ''\n  for i = 1, n do\n    seq = seq..s[i]\n\
    \  end\n  return seq\nend", "  if n == \"nil\" then\n    return \"0\"\n  end\n\
    \  return string.format(\"%d %d %d %d %d %d\", n+1, n+2, n+3, n+4, n+5)\nend",
  "  local str\n  str = string.format('%d ', n)\n  for i=2,n do str = string.format('%d\
    \ %s ', i, str) end\n  return str\nend", "    if n == 1 then\n        return '0'\n\
    \    else\n        local s = ''\n        for i = 1, n do\n            s = s ..\
    \ ' ' .. i\n        end\n        return s\n    end\nend", "  local str = \"\"\n\
    \  for i = 1, n do\n    str = str .. string.format(\"%i \", i)\n  end\n  return\
    \ str\nend", "    local s = ''\n    local i = 1\n    while i <= n do\n       \
    \ s = s .. ' ' .. i\n        i = i + 1\n    end\n    return s\nend", "  local\
    \ s = \"\"\n  for i=0,n do\n    s = g..\" \"..i\n  end\n  return s\nend", "  local\
    \ result = \"\"\n  for i = 1, n do\n    result = result .. \" \" .. i\n  end\n\
    \  return result\nend", "  local s = \"\"\n  for i = 1, n do\n    s = s .. \"\
    \ \" .. tostring(i)\n  end\n  return s\nend", "  if n == 0 then\n    return '0'\n\
    \  end\n  return torch.cmul(torch.ones(n):float(), torch.range(1, n+1))\nend",
  "\tlocal str = ''\n\tfor i = 1, n do\n\t\tstr = str .. i .. ' '\n\tend\n\treturn\
    \ str\nend", "  local s = '0'\n  for i = 1, n do s = s .. ' ' end\n  return s\n\
    end", "  local s = ''\n  for i = 0, n do\n    s = s .. tostring(i)\n  end\n  return\
    \ s\nend", "\tif n == 0 then\n\t\treturn '0'\n\tend\n\tif n > 10 then\n\t\treturn\
    \ string.format('0 %s', [string_sequence(n - 1)])\n\tend\n\tif n > 0 then\n\t\t\
    return string.format('%s %d', [string_sequence(n - 1)], n)\n\tend\nend", "\tlocal\
    \ sequence = ''\n\tfor i = 1, n do\n\t\tsequence = (sequence .. i..' ')\n\tend\n\
    \treturn sequence\nend", "    local str = \"\"\n    for i = 1, n do\n        str\
    \ = str .. \" \" .. i\n    end\n    return str\nend", "    if n < 0 then\n   \
    \     return '0';\n    end\n    local nf = math.floor(n);\n    local nt = math.ceil(n);\n\
    \    return string.format('0 %d 1 %d 2 %d 3 %d 4 %d 5', nf, nf + 1, nt + 1, nt\
    \ + 2);\nend", "  return string.format('0 %d 1 %d 2 %d 3 %d 4 %d 5', 0, n-1, n-1,\
    \ n-1, n-1, n-1)\nend", "    local i = 0\n    local str = ''\n    while i <= n\
    \ do\n        str = str .. ' ' .. i\n        i = i + 1\n    end\n    return str\n\
    end", "  local s = ''\n  local i = 0\n  while i <= n do\n    s = s .. i .. ' '\n\
    \    i = i + 1\n  end\n  return s\nend", "    local result = {}\n    for i = 1,\
    \ n do\n        result[i] = tostring(i)\n    end\n    return table.concat(result)\n\
    end", "  if n < 0 then\n    return nil\n  elseif n == 0:\n    return '0'\n  else\n\
    \    return table.concat(\n      string.gmatch('012345', '%d*'):reverse(),\n \
    \     ' '\n    )\n  end\nend", "  local str = ''\n  for i = 1, n do\n    str =\
    \ str .. ' ' .. tostring(i)\n  end\n  return str\nend", "  if n == 0 then\n  \
    \  return '0'\n  end\n  local s = ''\n  for i = 1, n do\n    s = s .. ' ' .. i\n\
    \  end\n  return s\nend", "  local result = \"\"\n  for i = 1, n do\n    result\
    \ = \"%s %s\" % (result, i)\n  end\n  return result\nend", "  local string = ''\n\
    \  for i = 1, n do\n    string = string .. ' ' .. tostring(i)\n  end\n  return\
    \ string\nend", "   local str = ''\n   for i = 1, n do str = str .. ' ' end\n\
    \   return str\nend", "   if n < 0 then\n      return nil\n   end\n   local s\
    \ = ''\n   for i = 1, n do\n      s = s .. tostring(i)\n   end\n   return s\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
