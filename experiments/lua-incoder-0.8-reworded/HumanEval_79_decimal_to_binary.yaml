name: HumanEval_79_decimal_to_binary
language: lua
prompt: "-- You will be given a number in decimal form and your task is to convert\
  \ it to\n-- binary format. The function should return a string, with each character\
  \ representing a binary\n-- number. Each character in the string will be '0' or\
  \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n-- The extra characters are there to help with the\
  \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
  -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
  \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
  \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
  \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["   if decimal < 0 or decimal > 0 then\n      return nil\n   end\n \
    \  local result = \"\"\n   local decimal_power = 2\n   if decimal > 1 then\n \
    \     decimal_power = 1\n   end\n   local decimal_string = \"\"\n   while decimal\
    \ > 0 do\n      decimal_string = decimal_string .. \"1\" .. \"0\"\n      decimal\
    \ = decimal - 1\n   end\n   local decimal_digits = decimal_string.len(decimal_string)\n\
    \   for i = 1, decimal_digits do\n      result = result .. \"0\"\n   end\n   result\
    \ = result .. decimal_string\n   if decimal_power > 1 then\n      result = result\
    \ .. \"1\"\n   end\n   return result\nend", "  -- base case\n  if decimal <= 0\
    \ then\n    return '0'\n  end\n  \n  -- recursive case\n  return decimal_to_binary(decimal\
    \ - 1) .. '1' .. decimal_to_binary(decimal - 1)\nend", "  -- Base case\n  if decimal\
    \ == 0 then\n    return \"0\"\n  elseif decimal >= 1 then\n    -- Recursive call\n\
    \    return decimal_to_binary(decimal - 1) + decimal_to_binary(decimal - 1)\n\
    \  else\n    -- Base case\n    return \"1\"\n  end\nend", '  decimal = tonumber(decimal)',
  "\tdecimal = decimal:lower()\n\tlocal decimal = decimal:gsub(\"%a\", \"\")\n\tlocal\
    \ decimal = decimal:gsub(\"%d\", \"\")\n\tdecimal = decimal:gsub(\"%c\", \"\"\
    )\n\tdecimal = decimal:gsub(\"%o\", \"\")\n\tdecimal = decimal:gsub(\"%x\", \"\
    \")\n\tdecimal = decimal:gsub(\"%i\", \"\")\n\tdecimal = decimal:gsub(\"%u\",\
    \ \"\")\n\tdecimal = decimal:gsub(\"%p\", \"\")\n\tdecimal = decimal:gsub(\"%s\"\
    , \"\")\n\tdecimal = decimal:gsub(\"%e\", \"\")\n\tdecimal = decimal:gsub(\"%E\"\
    , \"\")\n\tdecimal = decimal:gsub(\"%f\", \"\")\n\tdecimal = decimal:gsub(\"%g\"\
    , \"\")\n\tdecimal = decimal:gsub(\"%G\", \"\")\n\tdecimal = decimal:gsub(\"%n\"\
    , \"\")\n\tdecimal = decimal:gsub(\"%g\", \"\")\n\tdecimal = decimal:gsub(\"%c\"\
    , \"\")\n\tdecimal = decimal:gsub(\"%p\", \"\")\n\tdecimal = decimal:gsub(\"%p\"\
    , \"\")\n\tdecimal = decimal:gsub(\"%v\", \"\")\n\tdecimal = decimal:gsub(\"%o\"\
    , \"\")\n\tdecimal = decimal:gsub(\"%x\", \"\")\n\tdecimal = decimal:gsub(\"%i\"\
    , \"\")\n\tdecimal = decimal:gsub(\"%u\", \"\")\n\tdecimal = decimal:gsub(\"%u\"\
    , \"\")\n\tdecimal = decimal:gsub(\"%u\", \"\")\n\tdecimal = decimal:gsub(\"%v\"\
    , \"\")\n\tdecimal = decimal:gsub(\"%v\", \"\")\n\tdecimal = decimal:gsub(\"%v\"\
    , \"\")\n\tdecimal = decimal:gsub(\"%v\", \"\")\n\tdecimal = decimal:gsub(\"%v\"\
    , \"\")\n\tdecimal = decimal:gsub(\"%v\", \"\")\n\tdecimal = decimal:gsub(\"%v\"\
    , \"\")\n\tdecimal = decimal:gsub(\"%v\", \"\")\n\tdecimal = decimal:gsub(\"%v\"\
    , \"\")\n\tdecimal = decimal:gsub(\"%v\", \"\")\n\tdecimal = decimal:gsub(\"%v\"\
    , \"\")\n\tdecimal = decimal:gsub(\"%v\", \"\")\n\tdecimal = decimal:gsub(\"%v\"\
    , \"\")\n\tdecimal = decimal:gsub(\"%v\", \"\")\n\tdecimal = decimal:gsub(\"%v\"\
    , \"\")\n\tdecimal = decimal:gsub(\"%v\", \"\")\n\tdecimal = decimal", "  decimal\
    \ = decimal:byte()\n  local num_zeros = math.floor(math.log(decimal, 2)):bitshift(1)\n\
    \  if decimal < 1 then\n    return '0db'\n  end\n  if num_zeros == 0 then\n  \
    \  return '0b' .. tostring(decimal)\n  end\n  local binary_string = ''\n  for\
    \ i = 1, num_zeros do\n    binary_string = '0' .. binary_string\n  end\n  return\
    \ 'db' .. binary_string .. tostring(decimal)\nend", "  -- This code has been edited\
    \ to match your format\n  -- The binary number must be 10 characters in length\n\
    \  local decimal_length = #decimal\n  local binary = \"\"\n  -- The first binary\
    \ number can be 1-10 characters\n  local binary_ones = math.floor((decimal % base)\
    \ / base)\n  -- The second binary number can be 1-10 characters\n  local binary_tens\
    \ = (decimal - binary_ones * base) / base\n  -- The first ten binary digits are\
    \ 0-9\n  for i = 1, 10 do\n    if i == binary_ones then\n      binary = binary\
    \ + \"0\"\n    elseif i == binary_tens then\n      binary = binary + \"1\"\n \
    \   else\n      binary = binary + \"0\"\n    end\n  end\n  -- The tens binary\
    \ digits can be 0-1 characters\n  binary_tens = math.floor((decimal % base) /\
    \ base)\n  for i = 1, 10 do\n    if i == binary_tens then\n      binary = binary\
    \ + \"0\"\n    else\n      binary = binary + \"1\"\n    end\n  end\n  return binary\
    \ .. decimal_length\nend", "    decimal = decimal - 48\n    local result = ''\n\
    \    local remainder\n    while decimal >= 1 do\n        remainder = decimal %\
    \ 2\n        decimal = decimal >> 1\n        result = string.format('%s%d%sdb',\
    \ result, remainder, '0')\n    end\n    return result .. 'db'\nend", "    local\
    \ decimal_binary = \"\"\n    while decimal > 0 do\n        local remainder = decimal\
    \ % 2\n        decimal_binary = string.format(\"%s%s\", decimal_binary, remainder)\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    return string.format(\"\
    %sdb\", decimal_binary)\nend", "    decimal = decimal % 2\n    local binary =\
    \ \"\"\n    repeat\n        binary = binary == \"0\" .. \"1\" or binary or binary\
    \ .. \"0\"\n        decimal = decimal / 2\n    until decimal < 0\n    return binary\
    \ .. \"db\"\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=lua,number-formatting\
    \ |>\nTry this Lua module:\nhttps://github.com/davidchin/lua-prettynum\nIt does\
    \ exactly what you want.\n<|/ a dscore=0 |>\n<| c |>\nThis library does NOT support\
    \ `'0'` being the prefix or the suffix!\n<|/ c |>\n<| c |>\nThe library is not\
    \ intended to be used as-is. The author should take notes and do some further\
    \ research before using it. The author of the module should be careful when copying\
    \ it to his own project. The author should read the license when copying it to\
    \ his own project.\n<|/ c |>\n<| c |>\nI'm sorry, but this is just plain wrong.\
    \ I've made an attempt to edit the code into the answer, but SO won't let me do\
    \ that after 5 minutes. So I thought I'd post it here instead. I'll revert the\
    \ edits when I get the chance\n<|/ c |>\n<| c |>\nI actually had already tried\
    \ a module that did it, but I needed to do it with recursion. Thanks anyway!\n\
    <|/ c |>\n<| c |>\nI fixed the code, thanks for letting me know that it doesn't\
    \ work now\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    local str = \"\"\n    local\
    \ decimal = decimal + 1\n    while decimal > 0 do\n        local remainder = decimal\
    \ % 2\n        decimal = decimal / 2\n        str = remainder..str\n    end\n\
    \    if #str > 0 then\n        str = string.char(#str + 1)..str\n    end\n   \
    \ return str\nend", "    if decimal < 0 then\n        return \"ERROR: Negative\
    \ decimals cannot be represented in binary\"\n    end\n    if decimal > math.pow(2,\
    \ (#log2(decimal) + 1) - 1) then\n        return \"ERROR: Decimal too large for\
    \ binary\"\n    end\n    local decimal_str = string.format(\"%d\", decimal)\n\
    \    local decimal_str = decimal_str:gsub('%d+', '%d')\n    local binary = \"\"\
    \n    local i = 0\n    local binary_num = 1\n    local power_of_ten = 1\n    local\
    \ power_of_two = 1\n    local power_of_four = 1\n    for i = #decimal_str, 1,\
    \ -1 do\n        local num = tonumber(decimal_str:sub(i, i))\n        local bin\
    \ = decimal_to_binary(num)\n        if binary_num * 10 <= num then\n         \
    \   binary = binary .. (bin == \"0\" and '1' or '0')\n        else\n         \
    \   binary = binary .. (bin == \"1\" and '1' or '0')\n            binary_num =\
    \ 1\n            power_of_ten = 1\n            power_of_two = 1\n            power_of_four\
    \ = 1\n        end\n        power_of_ten = power_of_ten * 10\n        power_of_two\
    \ = power_of_two * 2\n        power_of_four = power_of_four * 4\n    end\n   \
    \ if power == 1 then\n        return binary .. 'b'\n    else\n        return binary\
    \ .. 'b' .. string.rep(\" \", power - 1)\n    end\nend", "    local result = \"\
    \"\n    local remainder = decimal % 2\n    while remainder ~= 0 do\n        local\
    \ remainder = decimal % 2\n        result = string.format(\"%s%d%s\", result,\
    \ 2, remainder == 1 ? \"1\" : \"0\")\n        decimal = decimal / 2\n    end\n\
    \    string.format(\"%sdb\", result)\nend", '    decimal = decimal or 0', "\t\
    decimal = tostring(decimal)\n\tdecimal = string.gsub(decimal, \"%.\", \"\")\n\t\
    decimal = string.gsub(decimal, \"%d\", \"\")\n\tdecimal = string.gsub(decimal,\
    \ \"%x\", \"\\0\")\n\tdecimal = string.gsub(decimal, \"%x\", \" \")\n\tdecimal\
    \ = string.gsub(decimal, \"%b\", \" \")\n\tdecimal = string.gsub(decimal, \"%x\"\
    , \"\\0\")\n\tdecimal = string.gsub(decimal, \"%c\", \"\\0\")\n\tdecimal = string.gsub(decimal,\
    \ \"%c\", \" \")\n\tdecimal = string.gsub(decimal, \"%d\", \"\\0\")\n\tdecimal\
    \ = string.gsub(decimal, \"%f\", \"\\0\")\n\tdecimal = string.gsub(decimal, \"\
    %u\", \"\\0\")\n\tdecimal = string.gsub(decimal, \"%o\", \"\\0\")\n\tdecimal =\
    \ string.gsub(decimal, \"%x\", \"\\0\")\n\tdecimal = string.gsub(decimal, \"%d\"\
    , \"\\0\")\n\tdecimal = string.gsub(decimal, \"%\", \"\\0\")\n\tdecimal = string.gsub(decimal,\
    \ \"%\", \"\\0\")\n\tdecimal = string.gsub(decimal, \"\\0$\", \"\")\n\treturn\
    \ decimal\nend", "  decimal = tonumber(decimal)\n  assert(decimal > 0, 'decimal\
    \ must be a positive integer')", "  decimal = decimal or 0\n  if decimal <= 0\
    \ then\n    return 'db'\n  end\n  local bin, index = '', 0\n  repeat\n    bin\
    \ = string.sub(tostring(decimal, 2), index, index + 1)\n    index = index + 2\n\
    \  until bin == '0'\n  return 'db' .. bin .. 'db'\nend", "  -- Your code here\n\
    end", "  local result = ''\n  local count = 0\n  while decimal do\n    count =\
    \ count + 1\n    decimal = decimal - math.floor(decimal)\n    local remainder,\
    \ decimal = math.modf(decimal)\n    if count == 1 then\n      result = result\
    \ .. '1'\n    elseif count == 2 then\n      result = result .. '0'\n    else\n\
    \      result = result .. '0'\n    end\n    if remainder == 1 then\n      result\
    \ = result .. '1'\n    end\n  end\n  if count > 2 then\n    result = result ..\
    \ 'db'\n  end\n  return result\nend", "    if decimal < 0 then return nil end\n\
    \    local binary = \"\"\n    local digit\n    local count = 0\n    local sign\
    \ = 1\n    while decimal > 0 do\n        digit = decimal % 2\n        if digit\
    \ > 0 then\n            binary = digit .. binary\n        else\n            binary\
    \ = binary .. \"0\"\n        end\n        decimal = decimal / 2\n        count\
    \ = count + 1\n    end\n    if sign > 0 then\n        binary = \"1db\" .. binary\n\
    \    else\n        binary = \"db\" .. binary\n    end\n    if count == 0 then\n\
    \        return binary\n    else\n        return binary:sub(1, count * 2)\n  \
    \  end\nend", "\tdecimal = decimal:reverse()\n\tdecimal = decimal:sub(1,-decimal:len())\n\
    \tdecimal = decimal:reverse()\n\tdecimal = decimal:sub(2,-decimal:len())\n\treturn\
    \ string.format(\"db%so\", decimal)\nend", "    local binary = ''\n    while decimal\
    \ > 0 do\n        binary = string.format(\"%s%b\", binary, math.floor((decimal\
    \ % 2)))\n        decimal = math.floor(decimal/2)\n    end\n    local extra_characters\
    \ = ''\n    if binary == '' then\n        extra_characters = 'db'\n        binary\
    \ = 1\n    end\n    return extra_characters + binary + extra_characters\nend",
  "  decimal = math.floor(decimal)\n  local decimal1 = math.floor(decimal * 10)\n\
    \  local decimal2 = decimal1 * 10\n  local decimal3 = decimal2 * 10\n  local decimal4\
    \ = decimal3 * 10\n  local decimal5 = decimal4 * 10\n  local decimal6 = decimal5\
    \ * 10\n  local decimal7 = decimal6 * 10\n  local decimal8 = decimal7 * 10\n \
    \ local decimal9 = decimal8 * 10\n  local decimal10 = decimal9 * 10\n  local decimal11\
    \ = decimal10 * 10\n  local decimal12 = decimal11 * 10\n  local decimal13 = decimal12\
    \ * 10\n  local decimal14 = decimal13 * 10\n  local decimal15 = decimal14 * 10\n\
    \  local decimal16 = decimal15 * 10\n  local decimal17 = decimal16 * 10\n  local\
    \ decimal18 = decimal17 * 10\n  local decimal19 = decimal18 * 10\n  local decimal20\
    \ = decimal19 * 10\n  local decimal21 = decimal20 * 10\n  local decimal22 = decimal21\
    \ * 10\n  local decimal23 = decimal22 * 10\n  local decimal24 = decimal23 * 10\n\
    \  local decimal25 = decimal24 * 10\n  local decimal26 = decimal25 * 10\n  local\
    \ decimal27 = decimal26 * 10\n  local decimal28 = decimal27 * 10\n  local decimal29\
    \ = decimal28 * 10\n  local decimal30 = decimal29 * 10\n  local decimal31 = decimal30\
    \ * 10\n  local decimal32 = decimal31 * 10\n  local decimal33 = decimal32 * 10\n\
    \  local decimal34 = decimal33 * 10\n  local decimal35 = decimal34 * 10\n  local\
    \ decimal36 = decimal35 * 10\n  local decimal37 = decimal36 * 10\n  local decimal38\
    \ = decimal37 * 10\n  local decimal39 = decimal38 * 10\n  local decimal40 = decimal39\
    \ * 10\n  local decimal41 = decimal40 * 10\n  local decimal42 = decimal41 * 10\n\
    \  local decimal43 = decimal42 * 10\n  local decimal44 = decimal43 * 10\n  local\
    \ decimal45 = decimal44 * 10\n  local decimal46 = decimal45 * 10\n  local decimal47\
    \ = decimal46 * 10\n  local decimal48 = decimal47 * 10\n  local decimal49 = decimal48\
    \ * 10\n  local decimal50 = decimal49 * 10\n  local decimal51 = decimal50 * 10\n\
    \  local decimal52 = decimal51 * 10\n  local ", "    -- base case\n    if decimal\
    \ == 0 then\n        return '0'\n    end\n    -- recursive case\n    local remainder\
    \ = decimal\n    local binary_string = ''\n    while remainder > 0 do\n      \
    \  binary_string = string.format(\"%s0\", binary_string)\n        remainder =\
    \ remainder - 1\n    end\n    binary_string = string.format(\"%sb\", binary_string)\n\
    \    return binary_string\nend", "  -- Initialize the string and add the necessary\
    \ characters.\n  local str = ''\n  str = str .. 'db'\n  -- Loop through the decimal\
    \ number until you have only one character.\n  -- Then add the character to the\
    \ string.\n  decimal = tonumber(decimal)\n  for i = 1, decimal do\n    str = str\
    \ .. '1'\n  end\n  return str\nend", "    decimal = decimal:tostring()\n    local\
    \ result = ''\n    local power = math.pow(10, string.len(decimal):byte())\n  \
    \  for i = 1, string.len(decimal) do\n        if decimal >= power then\n     \
    \       decimal = decimal - power\n            i = i - 1\n            power =\
    \ power * 2\n        else\n            i = i - 1\n            power = 0\n    \
    \    end\n        result = result .. '1' or '0'\n    end\n    if decimal > 0 then\n\
    \        result = result .. '1'\n    else\n        result = result .. '0'\n  \
    \  end\n    if decimal:len() > 1 then\n        return result\n    else\n     \
    \   return result .. 'db'\n    end\nend", "  decimal = decimal:byte()\n  local\
    \ binary = \"\"\n  repeat\n    binary = \"0\" .. binary .. \"1\"\n  until decimal\
    \ >= 2\n  return binary .. \"db\"\nend", "  decimal = assert(tonumber(decimal),\
    \ \"decimal ~= number\")\n  return string.format(\"%db%db%db\", tostring(decimal),\
    \ tostring(decimal % 2), tostring((decimal % 2)*2))\nend", "    -- Your code here\n\
    end", "    decimal = decimal or 0\n    local binary = \"\"\n    local decimalDigits\
    \ = math.floor(math.log10(decimal))\n    local binaryDigits = math.ceil(decimalDigits\
    \ / 2)\n    local binaryPower = math.pow(10, binaryDigits)", "    local binary\
    \ = string.rep(\" \", decimal)\n    local last_pos = 1\n    local remainder\n\
    \    for i = 1, decimal do\n        remainder = decimal % 2\n        binary =\
    \ binary:sub(last_pos + 1, last_pos + i - 1..last_pos + i):sub(1, 1)\n       \
    \ binary = \"0\" + binary + \"1\" -- Replacing with '0' or '1'\n        last_pos\
    \ = i + 1\n    end\n    binary = binary:sub(last_pos + 1)\n    binary = \"db\"\
    \ + binary -- Adding 'db' to the beginning\n    return binary\nend", "    decimal\
    \ = tonumber(decimal)\n    if decimal == nil then\n        return nil\n    end\n\
    \    local bin_string = ''\n    local decimal = tonumber(decimal)\n    local bin_i\
    \ = 0\n    local binary = 1\n    local i = 5\n    while decimal ~= 0 do\n    \
    \    decimal = decimal - binary\n        binary = binary * 2\n        if decimal\
    \ > 1 then\n            binary = binary + 1\n        end\n        if i == 0 then\n\
    \            bin_i = bin_i + 1\n            i = 5\n            bin_string = bin_string\
    \ .. (binary == 1 ? '1' : '0')\n        elseif i == 5 then\n            bin_i\
    \ = bin_i + 1\n            i = 0\n            bin_string = bin_string .. (binary\
    \ == 1 ? '1' : '0')\n        else\n            bin_string = bin_string .. (binary\
    \ == 1 ? '1' : '0')\n        end\n    end\n    if bin_i ~= 0 then\n        bin_string\
    \ = bin_string .. bin_i\n    end\n    return bin_string\nend", "  local binary\
    \ = \"\"\n  local decimal_str = string.format('%.d', decimal)", "    decimal =\
    \ tonumber(decimal)\n    if decimal < 0 then return nil end\n    local result\
    \ = ''\n    local i = 0\n    while decimal > 0 do\n        if i == 0 then\n  \
    \          result = '0' + math.floor(decimal)\n            decimal = decimal -\
    \ math.floor(decimal)\n        elseif i == 1 then\n            result = '1' +\
    \ math.floor(decimal)\n            decimal = decimal - math.floor(decimal)\n \
    \       else\n            result = '0' + math.floor(decimal)\n            decimal\
    \ = decimal - math.floor(decimal)\n            result = '1' + math.floor(decimal)\n\
    \            decimal = decimal - math.floor(decimal)\n        end\n        i =\
    \ i + 1\n    end\n    result = 'db' .. result .. 'db'\n    return result\nend",
  "  if decimal == nil then\n    return 'nil'\n  end\n  decimal = math.floor(decimal)\n\
    \  local decimal1 = decimal\n  local decimal2 = decimal - decimal1\n  local binary\
    \ = nil\n  binary = dec2bin(decimal1)\n  binary = binary .. dec2bin(decimal2)\n\
    \  return binary\nend", "    -- The empty string is the \"base\" string.\n   \
    \ local base_string = ''", "    decimal = tonumber(decimal)\n    local bin = binary\n\
    \    local decimal2 = decimal\n    local digit\n    local b\n    local len\n \
    \   while decimal2 > 0 do\n        digit = math.floor(decimal2 / 2)\n        decimal2\
    \ = decimal2 % 2\n        b = string.sub(tonumber(bin), digit, digit)\n      \
    \  b = (b == \"0\" and \"\" or \"1\") + b\n        bin = string.sub(tonumber(bin),\
    \ digit + 1, 1)\n        bin = bin..b\n    end\n    if decimal2 == 0 then\n  \
    \      bin = \"1\"\n    end\n    len = #bin\n    if decimal2 > 0 then\n      \
    \  len = len + 1\n    end\n    return \"db\" .. bin .. \"db\"\nend", "  if decimal\
    \ > math.pow(2, 64) then\n    -- Can't fit binary number so return original value\n\
    \    return decimal\n  else\n    local binary = \"\"\n    for i = 1, 64 do\n \
    \     if decimal >= math.pow(2, i) then\n        binary = binary + \"1\"\n   \
    \   else\n        binary = binary + \"0\"\n      end\n    end\n    return \"db\"\
    \ .. binary .. \"db\"\n  end\nend", "    decimal = math.floor(decimal)\n    local\
    \ bin = decimal\n    \n    if decimal > 0 then\n        while decimal > 0 do\n\
    \            decimal = decimal >> 1\n            bin = bin .. '1'\n        end\n\
    \        bin = bin .. 'db'\n    end\n    \n    return bin\nend", "\tdecimal =\
    \ tostring(decimal)\n\tlocal binary_string = ''", "    decimal = decimal or 0\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        decimal = decimal\
    \ - 2^n\n        binary = binary or \"0\" + string.rep(\"00000000\", 2^n) .. \"\
    1\"\n    end\n    binary = binary:sub(1, binary:len() - 1)\n    return binary:sub(1,\
    \ binary:len() - 1)\nend", "  if decimal <= 0 then\n    return \"0\"\n  end",
  "   decimal = decimal:byte()\n   if decimal > 127 then\n      error(\"Invalid number\
    \ received: \", decimal)\n   end", "    -- Write your code below this line\nend",
  "  decimal = tostring(decimal)\n  local str = \"\"\n  local i = 0\n  while i <=\
    \ #decimal do\n    local t = decimal:sub(i, i)\n    if t == \"1\" then\n     \
    \ str = str .. \"0\"\n    else\n      str = str .. \"1\"\n    end\n    i = i +\
    \ 1\n  end\n  if i ~= #decimal then\n    str = str .. \"db\" .. decimal:sub(1,\
    \ i)\n  end\n  return str\nend", "  local str = string.rep(\" \", decimal)\n \
    \ str = str:gsub(\"%d%d?%d?%d?%d?%d?%d?%d?%d?\", \"%0db%0db\")\n  return \"db\"\
    \ .. str\nend", "\t-- Write your code here!\n\treturn \nend", "\tdecimal = decimal:lower()\n\
    \tlocal str = ''\n\twhile decimal > 0 do\n\t\tstr = str .. tostring(dec(decimal))\
    \ .. 'b'\n\t\tdecimal = dec(decimal) - dec(dec(decimal))\n\tend\n\treturn str\
    \ .. 'db'\nend", "    local str = ''\n    local decimal = decimal\n    while decimal\
    \ > 0 do\n        local remainder = math.floor(decimal)\n        str = str ..\
    \ \"1\"\n        decimal = decimal - remainder\n    end\n    str = str .. \"db\"\
    \n    return str\nend", "   decimal = decimal % 2\n   local binary = \"\"\n  \
    \ local remainder = decimal\n   while remainder > 0 do\n      binary = \"0\"..binary..\"\
    1\"\n      remainder = remainder - 2\n   end\n   return \"db\"..binary..\"db\"\
    \nend", "\t-- Write your code here\n\t-- Return the result\nend", "\tdecimal =\
    \ decimal or 0\n\tlocal result = {}\n\tlocal b = 1\n\tlocal i = 1\n\twhile i <=\
    \ decimal do\n\t\ttable.insert(result, tostring(b))\n\t\ti = i * 2\n\t\tb = b\
    \ * 2\n\tend\n\ttable.insert(result, 'db')\n\ttable.insert(result, tostring(b))\n\
    \treturn table.concat(result)\nend", "  -- We need to use a string to keep track\
    \ of all of the digits that have been used.\n  local digits = ''\n  -- Use this\
    \ variable to keep track of how many times the digits have been used.\n  local\
    \ digitsUsed = 0\n  -- Use a while loop to keep track of the number of digits\
    \ that still need to be used.\n  while digitsUsed < decimal do\n    -- Calculate\
    \ the number of times the digits have been used and subtract this from the total.\n\
    \    digitsUsed = digitsUsed + 1\n    -- Add a new digit to the end of the digits\
    \ string.\n    digits = digits .. '0'\n  end\n  -- Add the 'db' characters to\
    \ the beginning and end of the string.\n  digits = 'db' .. digits .. 'db'\n  --\
    \ The decimal number will have digits less than the total digits used. Therefore,\
    \ we will need to add the number of\n  -- extra digits that we still need.\n \
    \ -- The extra digits are given as a parameter.\n  return digits:sub(1, digits:len()+digitsUsed)\n\
    end", "    decimal = math.floor(decimal)\n    decimal = decimal - (decimal % 2)\n\
    \    decimal = decimal * 2\n    decimal = decimal\n    decimal = math.floor(decimal)\n\
    \    decimal = decimal - (decimal % 2)\n    decimal = decimal * 2\n    decimal\
    \ = decimal\n    decimal = math.floor(decimal)\n    decimal = decimal - (decimal\
    \ % 2)\n    decimal = decimal * 2\n    decimal = decimal\n    decimal = math.floor(decimal)\n\
    \    decimal = decimal - (decimal % 2)\n    decimal = decimal * 2\n    decimal\
    \ = decimal\n    decimal = math.floor(decimal)\n    decimal = decimal - (decimal\
    \ % 2)\n    decimal = decimal * 2\n    decimal = decimal\n    decimal = math.floor(decimal)\n\
    \    decimal = decimal - (decimal % 2)\n    decimal = decimal * 2\n    decimal\
    \ = decimal\n    decimal = math.floor(decimal)\n    decimal = decimal - (decimal\
    \ % 2)\n    decimal = decimal * 2\n    decimal = decimal\n    decimal = math.floor(decimal)\n\
    \    decimal = decimal - (decimal % 2)\n    decimal = decimal * 2\n    decimal\
    \ = decimal\n    decimal = math.floor(decimal)\n    decimal = decimal - (decimal\
    \ % 2)\n    decimal = decimal * 2\n    decimal = decimal\n    decimal = math.floor(decimal)\n\
    \    decimal = decimal - (decimal % 2)\n    decimal = decimal * 2\n    decimal\
    \ = decimal\n    decimal = math.floor(decimal)\n    decimal = decimal - (decimal\
    \ % 2)\n    decimal = decimal * 2\n    decimal = decimal\n    decimal = math.floor(decimal)\n\
    \    decimal = decimal - (decimal % 2)\n    decimal = decimal * 2\n    decimal\
    \ = decimal\n    decimal = math.floor(decimal)\n    decimal = decimal - (decimal\
    \ % 2)\n    decimal = decimal * 2\n    decimal = decimal\n    decimal = math.floor(decimal)\n\
    \    decimal = decimal - (decimal % 2)\n    decimal = decimal * 2\n    decimal\
    \ = decimal\n    decimal = math.floor(decimal)\n    decimal = decimal - (decimal\
    \ % 2)\n    decimal = decimal * 2\n    decimal = decimal\n    decimal = math.floor(decimal)\n\
    \    decimal = decimal - (decimal % 2)\n    decimal = decimal * 2\n    decimal\
    \ = decimal\n    decimal = math.floor(decimal)\n    decimal = decimal - (decimal\
    \ % 2)\n    decimal = decimal * 2\n    decimal = decimal\n    decimal = math.floor(decimal)\n\
    \    decimal = decimal - (decimal % 2)\n    decimal", "   local binary = ''\n\
    \   local power = 0\n   for i = 1, 10 do\n      power = (power * 2) - 1\n    \
    \  if decimal >= power then\n         binary = binary .. '1'\n         decimal\
    \ = decimal - power\n      else\n         binary = binary .. '0'\n      end\n\
    \   end\n   return binary\nend", "  decimal = tostring(decimal)\n  if decimal\
    \ == \"0\" then\n    return \"0\"\n  end\n  local result = \"\"\n  local power\
    \ = 1\n  while decimal ~= 0 do\n    local digit = decimal % 2\n    decimal = decimal\
    \ / 2\n    if power == 10 then\n      power = 0\n      result = result .. \"0\"\
    \n    end\n    result = result .. tostring(digit) .. tostring(power)\n    power\
    \ = power + 1\n  end\n  if decimal ~= 0 then\n    local power = 1\n    while decimal\
    \ > 0 do\n      local digit = decimal % 2\n      decimal = decimal / 2\n     \
    \ if power == 10 then\n        power = 0\n        result = result .. \"0\"\n \
    \     end\n      result = result .. tostring(digit) .. tostring(power)\n     \
    \ power = power + 1\n    end\n  end\n  if decimal ~= 0 then\n    result = result\
    \ .. \"1\"\n  end\n  return \"db\" .. result\nend", "\tlocal s = ''\n\twhile decimal\
    \ > 0 do\n\t\ts = s .. 'db' .. math.floor(decimal / 2)\n\t\tdecimal = decimal\
    \ % 2\n\tend\n\ts = s .. 'db' .. math.floor(decimal)\n\treturn s\nend", "  decimal\
    \ = tostring(decimal)\n  local result = ''\n  local len = math.floor(math.log2(decimal))\n\
    \  for i = 1, len do\n    local c = decimal - 2^(i-1)\n    local n = (c == 0 and\
    \ '1' or '0')\n    result = result .. n .. 'db'\n  end\n  result = result .. 'db'\n\
    \  return result\nend\n</cell>\n<code language=julia-1.1>\nusing BenchmarkTools\n\
    @btime decimal_to_binary($decimal_to_binary_slow);\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a binary string as input and returns a decimal\
    \ number in decimal form.", "  local binary = \"\"\n  decimal = decimal or 0",
  "    return string.format(\"%db%s\", decimal_to_binary(decimal - math.floor(decimal))\
    \ - \"00\", math.floor(decimal) == 0 and \"0\" or \"1\")\nend", "  -- Convert\
    \ decimal to binary recursively\n  local function binary_helper(decimal)\n   \
    \ -- If decimal is a power of 2 we are done\n    if decimal == 0 then\n      return\
    \ '0db'\n    end\n    -- If decimal is not power of 2 we divide the number by\
    \ 2 and recurse with the new number\n    local decimal_part = decimal\n    local\
    \ binary_part = ''\n    decimal_part = decimal_part / 2\n    binary_part = binary_helper(decimal_part)\n\
    \    -- Repeat the process to get our binary number\n    binary_part = binary_part\
    \ .. (decimal_part % 2)\n    -- Add our binary part to the current binary\n  \
    \  binary_part = binary_part .. binary_part\n    return binary_part\n  end\n \
    \ -- Convert decimal to binary and remove extra characters from the beginning/end\
    \ of the string\n  return binary_helper(decimal):sub(2, -2)\nend", "    -- TODO:\
    \ Complete this function!\nend", "    if decimal < 0 then\n        print('Invalid\
    \ decimal number')\n        return nil\n    end", "    decimal = math.floor(decimal)\n\
    \    local result = \"\"\n    local remainder", "    decimal = decimal or 0\n\
    \    local binary = ''\n    while decimal > 0 do\n        local remainder = math.floor(decimal)\n\
    \        decimal = decimal - remainder\n        binary = string.format('%s%d%s',\
    \ binary, remainder, string.char(remainder > 0 and 1 or 0))\n    end\n    if binary\
    \ and binary:sub(1, #binary) ~= '0'\n    then\n        binary = binary .. 'db'\n\
    \    end\n    return binary\nend", "    decimal = math.floor(decimal)\n    decimal\
    \ = decimal < 0 and decimal * -1 or decimal\n    decimal = math.floor(decimal\
    \ * 2)\n    decimal = math.floor(decimal)\n    decimal = decimal < 0 and decimal\
    \ * -1 or decimal\n    decimal = math.floor(decimal * 2)\n    decimal = math.floor(decimal)\n\
    \    decimal = math.floor(decimal)\n    decimal = decimal < 0 and decimal * -1\
    \ or decimal\n    decimal = math.floor(decimal * 2)\n    decimal = math.floor(decimal)\n\
    \    decimal = math.floor(decimal)\n    decimal = decimal < 0 and decimal * -1\
    \ or decimal\n    decimal = math.floor(decimal * 2)\n    decimal = math.floor(decimal)\n\
    \    decimal = math.floor(decimal)\n    decimal = decimal < 0 and decimal * -1\
    \ or decimal\n    decimal = math.floor(decimal * 2)\n    decimal = math.floor(decimal)\n\
    \    decimal = math.floor(decimal)\n    decimal = decimal < 0 and decimal * -1\
    \ or decimal\n    decimal = math.floor(decimal * 2)\n    decimal = math.floor(decimal)\n\
    \    decimal = math.floor(decimal)\n    decimal = decimal < 0 and decimal * -1\
    \ or decimal\n    decimal = math.floor(decimal * 2)\n    decimal = math.floor(decimal)\n\
    \    decimal = math.floor(decimal)\n    decimal = decimal < 0 and decimal * -1\
    \ or decimal\n    decimal = math.floor(decimal * 2)\n    decimal = math.floor(decimal)\n\
    \    decimal = math.floor(decimal)\n    decimal = decimal < 0 and decimal * -1\
    \ or decimal\n    decimal = math.floor(decimal * 2)\n    decimal = math.floor(decimal)\n\
    \    decimal = math.floor(decimal)\n    decimal = decimal < 0 and decimal * -1\
    \ or decimal\n    decimal = math.floor(decimal * 2)\n    decimal = math.floor(decimal)\n\
    \    decimal = math.floor(decimal)\n    decimal = decimal < 0 and decimal * -1\
    \ or decimal\n    decimal = math.floor(decimal * 2)\n    decimal = math.floor(decimal)\n\
    \    decimal = math.floor(decimal)\n    decimal = decimal < 0 and decimal * -1\
    \ or decimal\n    decimal = math.floor(decimal * 2)\n    decimal = math.floor(decimal)\n\
    \    decimal = math.floor(decimal)\n    decimal = decimal < 0 and decimal * -1\
    \ or decimal\n    decimal = math.floor(decimal * 2)\n    decimal = math.floor(decimal)\n\
    \    decimal = math.floor(decimal)\n    decimal = decimal < 0 and decimal * -1\
    \ or decimal\n    decimal = math.floor(decimal * 2)\n    decimal = math.floor(decimal)\n\
    \    decimal", "  -- TODO: Make sure decimal is an integer in decimal notation\n\
    \  -- e.g. 15 = 1 + 16^2 + 8^3 + 2^4\n  -- You will need to use pow to calculate\
    \ exponents\n  -- Use 'return' to return the string\n  -- return \"db\"\nend",
  "\tdecimal = math.floor(decimal)\n\tlocal result = ''\n\twhile decimal > 0 do\n\t\
    \tlocal bin = math.floor(decimal)\n\t\tif bin == 1 then\n\t\t\tresult = result\
    \ .. '1'\n\t\telse\n\t\t\tresult = result .. '0'\n\t\tend\n\t\tdecimal = decimal\
    \ - bin\n\tend\n\tif result == '' then\n\t\treturn 'db0'\n\tend\n\tresult = result\
    \ .. 'db'\n\treturn result\nend", "   assert(decimal >= 0 and decimal <= 15)\n\
    \   local string = ''\n   if decimal > 0 then\n      local remainder = decimal\n\
    \      while remainder ~= 0 do\n         string = '1' + string .. '0'\n      \
    \   remainder = math.floor(remainder)\n      end\n   end\n   return string ..\
    \ 'db'\nend", "    local result = ''", "\tdecimal = decimal or 0\n\tlocal string\
    \ = tostring(decimal)\n\tlocal length = string.len(string)\n\tlocal padding =\
    \ math.ceil(length/8)\n\tlocal binary_string = \"\"\n\tlocal remainder\n\twhile\
    \ length > 0 do\n\t\tremainder = math.modf(decimal)\n\t\tbinary_string = string.sub(string,\
    \ remainder - 1, 1) .. binary_string\n\t\tdecimal = remainder\n\t\tlength = length\
    \ - 1\n\tend\n\treturn \"db\"..binary_string..\"db\"\nend", "\tlocal decimal =\
    \ decimal\n\tlocal result = ''\n\tlocal count = 0\n\tlocal remainder = 0\n\tlocal\
    \ binary = {'0', '1'}", "    decimal = decimal * 4\n    decimal = decimal:string(5)\n\
    \    decimal = decimal:sub(1)\n    decimal = decimal:sub(-3)\n    decimal = decimal:sub(-3)\n\
    \    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-1)\n\
    \    decimal = decimal:sub(-1)\n    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-2)\n\
    \    decimal = decimal:sub(-1)\n    decimal = decimal:sub(-1)\n    decimal = decimal:sub(-2)\n\
    \    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-1)\n    decimal = decimal:sub(-2)\n\
    \    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-2)\n\
    \    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-1)\n    decimal = decimal:sub(-1)\n\
    \    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-2)\n\
    \    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-1)\n    decimal = decimal:sub(-1)\n\
    \    decimal = decimal:sub(-1)\n    decimal = decimal:sub(-1)\n    decimal = decimal:sub(-2)\n\
    \    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-1)\n\
    \    decimal = decimal:sub(-1)\n    decimal = decimal:sub(-1)\n    decimal = decimal:sub(-2)\n\
    \    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-1)\n\
    \    decimal = decimal:sub(-1)\n    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-2)\n\
    \    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-1)\n\
    \    decimal = decimal:sub(-1)\n    decimal = decimal:sub(-1)\n    decimal = decimal:sub(-2)\n\
    \    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-2)\n\
    \    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-2)\n\
    \    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-2)\n    decimal = decimal:sub(-2)\n\
    \    decimal = decimal", "\tlocal function convert(decimal, result)\n\t\tif decimal\
    \ <= 0 then\n\t\t\tresult = '0db'\n\t\telseif decimal > 0 and decimal < 10 then\n\
    \t\t\tresult = 'db' .. string(decimal)\n\t\telse\n\t\t\tlocal remainder = decimal\n\
    \t\t\tlocal decimal = 0\n\t\t\twhile remainder > 0 do\n\t\t\t\tdecimal = decimal\
    \ + 1\n\t\t\t\tremainder = remainder - 10\n\t\t\tend\n\t\t\tconvert(decimal, result)\n\
    \t\tend\n\tend", "  local decimal_to_binary = string.format(\"%db\", decimal)\n\
    \  local bin_string = string.gsub(decimal_to_binary, \"d\", \"1\") -- replace\
    \ 'd' with '1'\n  bin_string = bin_string .. \"db\" -- add an extra character\n\
    \  return bin_string\nend", "    local decimal_str, decimal_base = '', decimal\n\
    \    if decimal < 0 then\n        decimal_str = decimal_base .. '-' .. decimal_to_binary(-decimal)\n\
    \        decimal_base = -decimal_base\n    else\n        decimal_str = decimal_base\n\
    \    end\n    \n    local function to_binary_digit(number)\n        -- Returns\
    \ the number in binary form. 1 will be '1' and 0 will be '0'.\n        local decimal_str,\
    \ decimal_base = '', decimal\n        if decimal < 0 then\n            decimal_str\
    \ = decimal_base .. '-' .. decimal_to_binary(-decimal)\n            decimal_base\
    \ = -decimal_base\n        else\n            decimal_str = decimal_base\n    \
    \    end\n        local bit_str = decimal_str:sub(1, decimal_str:len() - 1)\n\
    \        local num_digits = string:len(bit_str)\n        local num_zeros = string.format(\"\
    %0d\", number - tonumber(bit_str)) + 1\n        return string.rep('0', num_zeros)\
    \ .. bit_str\n    end\n    \n    local binary_digits = ''\n    local binary_digits_len\
    \ = decimal_str:len() - 1\n    local binary_digits_count = decimal_str:len() -\
    \ 1\n    for i = 1, binary_digits_len do\n        if decimal_str:sub(i, i + 1)\
    \ ~= '0' and decimal_str:sub(i, i + 1) ~= '1' then\n            binary_digits_count\
    \ = binary_digits_count - 1\n            binary_digits = binary_digits .. to_binary_digit(decimal_str:sub(i,\
    \ i + 1))\n        else\n            binary_digits = binary_digits .. decimal_str:sub(i,\
    \ i + 1)\n        end\n    end\n    \n    return string.format('%sdb', binary_digits)\
    \ .. binary_digits_count\nend", "    decimal = decimal or 0\n    local binary\
    \ = {}\n    if decimal > 0 and decimal < 2^32 then\n        decimal = decimal\
    \ or 2^32\n        for i = 1, 32 do\n            binary[i] = decimal % 2\n   \
    \         decimal = decimal / 2\n        end\n        binary[31] = 1\n    end\n\
    \    return 'db' .. table.concat(binary, '') .. 'db'\nend\n</cell>\n<text>\nTesting\n\
    We test our function by seeing if we can convert each of the decimal numbers we\
    \ read in correctly. We'll test it with some examples:", "    decimal = decimal\n\
    \    local result = ''\n    local remainder\n    local remainder_power\n    local\
    \ binary_digit", "   if decimal == 0 then\n      return 'db'\n   else\n      local\
    \ binary = math.floor(math.pow(2,math.ceil(math.log2(decimal))))\n      local\
    \ remainder = decimal - binary\n      return decimal_to_binary(remainder) .. tostring(binary)\n\
    \   end\nend\n</cell>\n<text>\nWe will also need a way to convert binary numbers\
    \ to decimal numbers. The following function will do that for us.", "    decimal\
    \ = decimal or 0\n    local binary = \"\"\n    while decimal > 0 do\n        local\
    \ digit = math.floor(decimal % 2)\n        decimal = math.floor(decimal / 2)\n\
    \        binary = string.sub(binary..digit..\"db\", -2, -1)\n    end\n    return\
    \ binary .. \"db\"\nend", "    local result = ''\n    local decimal = tonumber(decimal)\n\
    \    if decimal == nil then\n        return \"Invalid decimal argument\"\n   \
    \ end\n    if decimal > 0 and decimal < 256 then\n        for i = 1, decimal do\n\
    \            local digit = math.floor(decimal)\n            decimal = decimal\
    \ - digit\n            -- If it is a valid decimal place and we have not yet reached\
    \ the desired number of binary digits,\n            -- append the binary digit\
    \ to the result.\n            if decimal > 0 and decimal < 256 and #result ==\
    \ 0 then\n                result = result .. math.floor(digit)\n            end\n\
    \        end\n    else\n        return \"Invalid decimal argument\"\n    end\n\
    \    -- If the decimal number is greater than or equal to 256, the extra characters\
    \ at the beginning and end\n    -- of the string are required. If the decimal\
    \ number is less than 256, the extra characters are not\n    -- needed.\n    if\
    \ decimal >= 256 then\n        return 'db' .. result .. 'db'\n    else\n     \
    \   return 'db' .. result .. ''\n    end\nend", "    decimal = tostring(decimal)\n\
    \    decimal = decimal:gsub(\"^\", \"\")\n    decimal = decimal:gsub(\"$\", \"\
    \")\n    decimal = decimal:gsub(\"%\", \"\")\n    decimal = decimal:gsub(\"*\"\
    , \"\")\n    decimal = decimal:gsub(\",\", \"\")\n    decimal = decimal:gsub(\"\
    -\", \"\")\n    decimal = decimal:gsub(\"%\", \"\")\n    decimal = decimal:gsub(\"\
    \\\", \"\")\n    decimal = decimal:gsub(\"[\", \"\")\n    decimal = decimal:gsub(\"\
    ]\", \"\")\n    decimal = decimal:gsub(\"(\", \"\")\n    decimal = decimal:gsub(\"\
    )\", \"\")\n    decimal = decimal:gsub(\",\", \"\")\n    decimal = decimal:gsub(\"\
    /\", \"\")\n    decimal = decimal:gsub(\"=\", \"\")\n    decimal = decimal:gsub(\"\
    %\", \"\")\n    decimal = decimal:gsub(\"%\", \"\")\n    decimal = decimal:gsub(\"\
    [\", \"\")\n    decimal = decimal:gsub(\"]\", \"\")\n    decimal = decimal:gsub(\"\
    \\\", \"\")\n    decimal = decimal:gsub(\"(\", \"\")\n    decimal = decimal:gsub(\"\
    )\", \"\")\n    decimal = decimal:gsub(\"%\", \"\")\n    decimal = decimal:gsub(\"\
    %\", \"\")\n    decimal = decimal:gsub(\"\\\", \"\")\n    decimal = decimal:gsub(\"\
    ]\", \"\")\n    decimal = decimal:gsub(\"]\", \"\")\n    decimal = decimal:gsub(\"\
    =\", \"\")\n    decimal = decimal:gsub(\"%\", \"\")\n    decimal = decimal:gsub(\"\
    %\", \"\")\n    decimal = decimal:gsub(\"%\", \"\")\n    decimal = decimal:gsub(\"\
    ]\", \"\")\n    decimal = decimal:gsub(\"]\", \"\")\n    decimal = decimal:gsub(\"\
    (\", \"\")\n    decimal = decimal:gsub(\")\", \"\")\n    decimal = decimal:gsub(\"\
    %\", \"\")\n    decimal = decimal:gsub(\"%\", \"\")\n    decimal = decimal:gsub(\"\
    \\\", \"\")\n    decimal = decimal:gsub(\"]\", \"\")\n    decimal = decimal:gsub(\"\
    ]\", \"\")\n    decimal = decimal:gsub(\"(\", \"\")\n    decimal = decimal:gsub(\"\
    )\", \"\")\n    decimal = decimal:gsub(\"%\", \"\")\n    decimal = decimal:gsub(\"\
    %\", \"\")\n    decimal = decimal:gsub(\"\\\", \"\")\n    decimal = decimal:gsub",
  "\tdecimal = tonumber(decimal)\n\tif decimal < 0 then\n\t\terror(\"Input must be\
    \ positive!\")\n\tend\n\tdecimal = decimal * 2\n\tlocal result = \"\"\n\tlocal\
    \ remainder, decimal = decimal, decimal\n\twhile decimal > 0 do\n\t\tremainder,\
    \ decimal = decimal, decimal % 2\n\t\tresult = result .. \"1\" .. math.floor(remainder)\n\
    \tend\n\tresult = result .. \"0\"\n\tresult = result .. \"d\"\n\treturn result\n\
    end", "    local result = \"\"\n    local power = math.floor(math.log(decimal)/math.log(2))\n\
    \    for i = 1, power do\n        local decimalPart = decimal%2\n        decimal\
    \ = math.floor(decimal/2)\n        if decimalPart then\n            result +=\
    \ \"1\"\n        else\n            result += \"0\"\n        end\n    end\n   \
    \ if decimal > 1 then\n        local decimalPart = decimal%2\n        decimal\
    \ = math.floor(decimal/2)\n        if decimalPart then\n            result +=\
    \ \"1\"\n        else\n            result += \"0\"\n        end\n    end\n   \
    \ if power > 0 then\n        result = \"db\" .. result .. decimal_to_binary(decimal)\n\
    \    end\n    return result\nend", "    local result = \"\"\n    local binary_digits\
    \ = \"011\"\n    local decimal2 = decimal - math.floor(decimal)\n    for i = 1,\
    \ decimal2 do\n        result = result .. binary_digits\n    end\n    return \"\
    db\" .. result .. \"db\"\nend", "  local decimal = tonumber(decimal)\n  local\
    \ binary_string = ''\n  local remainder = decimal", "    if decimal < 0 then\n\
    \        return 'Error - Negative number not allowed'\n    end\n    if decimal\
    \ > 255 then\n        return 'Error - Number too big'\n    end", "\tlocal output\
    \ = ''\n\tlocal power = 1\n\tlocal last = 0\n\twhile decimal > 0 do\n\t\tlocal\
    \ mod = decimal % 2\n\t\tdecimal = decimal // 2\n\t\tif mod == 1 then\n\t\t\t\
    output = output .. '1'\n\t\telse\n\t\t\toutput = output .. '0'\n\t\tend\n\tend\n\
    \toutput = output .. 'db' .. power .. 'db'\n\treturn output\nend", "    -- Your\
    \ code here!\nend", "  decimal = decimal or 0\n  local s = ''\n  local carry =\
    \ 1\n  while decimal > 0 do\n    local digit = decimal % 2\n    decimal = decimal\
    \ >> 1\n    if carry > 0 then\n      digit = digit + 1\n      carry = carry <<\
    \ 1\n    end\n    s = char(digit + carry)..s\n    carry = carry >> 1\n  end\n\
    \  if carry > 1 then\n    s = char(1 .. carry)..s\n  end\n  return 'db'..s\nend",
  "\t-- Base case\n\tif decimal == 0 then return \"0db\"; end\n\t-- Convert half of\
    \ the decimal number\n\tdecimal = decimal:div(2);\n\t-- Get the decimal and binary\
    \ parts of the number\n\tdecimal = decimal:toInt();\n\t-- Recurse to get the binary\
    \ representation of the number\n\tdecimal = decimal_to_binary(decimal);\n\t--\
    \ Return the binary representation of the number followed by the extra characters\n\
    \treturn (decimal and \"0db\"):concat(\"db\"):concat(decimal)\nend", "  -- Convert\
    \ decimal number into binary number.\n  -- We keep dividing the decimal number\
    \ by 2 until we reach the point where the decimal\n  -- number fits into one binary\
    \ digit.\n  -- Example: decimal = 5, binary = 3, since 3 <= 5 <= 3 + 1 = 3.\n\
    \  local binary = \"\"\n  while decimal >= 2 do\n    -- Take the last binary digit\
    \ and make it lowercase.\n    local last_binary_digit = binary:sub(#binary, 1)\n\
    \    local last_binary_digit_lower = last_binary_digit:lower()\n    -- Calculate\
    \ the amount of remaining decimal number to shift it into the right places.\n\
    \    local remainder = decimal % 2\n    -- Shift the decimal number into the right\
    \ places.\n    decimal = decimal / 2\n    -- Add the binary digit at the right\
    \ place.\n    binary = binary..last_binary_digit_lower..tostring(remainder)\n\
    \  end\n  return binary\nend", '  decimal = tonumber(decimal)', "  if decimal\
    \ > 2 ** 32 or decimal < 0 then\n    return 'Invalid input'\n  end", "    local\
    \ number = tonumber(decimal)\n    if number == nil then\n        return 'db not\
    \ found'\n    end\n    local binary = string.format('%%0%ib', math.floor(math.log2(number)))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('%%0%ib', math.floor(math.log2(number - math.pow(2,math.floor(math.log2(number))))))\
    \ .. string.format('", "    -- Base case:\n    if decimal == 0 then\n        return\
    \ 'db'\n    end", "    decimal = tonumber(decimal)\n    local num_str = string.format(\"\
    %01.f\", decimal)\n    local binary = \"\"\n    local decimal_digits = 0\n   \
    \ while decimal > 0 do\n        if decimal_digits == 0 then\n            binary\
    \ = string.format('%01.b', decimal)\n        else\n            binary = string.format('%01.b',\
    \ decimal)\n            binary = binary .. string.format('%01.b', decimal - decimal)\n\
    \        end\n        decimal_digits = decimal_digits + 1\n        decimal = decimal\
    \ / 2\n    end\n    if decimal_digits > 0 then\n        binary = binary .. string.format('%01.b',\
    \ decimal_digits)\n    end\n    return binary .. num_str .. 'db'\nend", "    decimal\
    \ = tostring(decimal)\n    local binary = \"\"\n    -- This for loop adds each\
    \ binary number to the binary, then shifts the decimal to the right\n    -- by\
    \ one. For example, the decimal number 15 will be turned into the binary number\
    \ '1111',\n    -- which shifts all the other numbers right by 1. Then the decimal\
    \ 32 is turned into the\n    -- binary number '100000', which shifts all the other\
    \ numbers right by 1 too, and so on.\n    for decimal = decimal, 1, -1 do\n  \
    \      binary = binary .. tostring(decimal % 2)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. tostring(decimal)\n    return binary\n\
    end", "  if decimal >= 1024 then\n    decimal = decimal % 1024\n    local decimal_part\
    \ = decimal_to_binary(decimal)\n    if decimal_part == nil then return nil end\n\
    \    return 'db' .. decimal_part .. 'db'\n  else\n    decimal = decimal % 128\n\
    \    return '0'\n  end\nend", "    decimal = tostring(decimal)\n    if decimal\
    \ ~= tonumber(decimal) then\n        error(string.format(\"Decimal number is not\
    \ a decimal number: %s\", decimal))\n    end\n    local binary = \"\"\n    local\
    \ remainder = decimal\n    while remainder ~= 0 do\n        local remainder_int\
    \ = math.floor(remainder)\n        binary = binary .. \"01\"\n        remainder\
    \ = remainder - remainder_int\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end", "    local result = \"\"\n    local remainder\n    for i = 0, decimal do\n\
    \        remainder = 10 * remainder + i % 10\n    end\n    for i = 0, decimal\
    \ do\n        if remainder <= 1 then\n            result = \"1\" .. result\n \
    \           remainder = remainder - 2\n        else\n            result = \"0\"\
    \ .. result\n            remainder = remainder - 1\n        end\n    end\n   \
    \ if remainder > 1 then\n        result = \"1\" .. result\n    end\n    return\
    \ result .. \"db\"\nend", "\tdecimal = decimal:byte()\n\tlocal result = \"\"\n\
    \tlocal remainder = decimal\n\trepeat\n\t\tlocal digit = remainder:byte()\n\t\t\
    remainder = remainder - digit\n\t\tresult = result .. tostring(digit) .. \"b\"\
    \n\tuntil remainder == 0\n\treturn result .. 'db'\nend\n</cell>\n<code language=xeus-cling-cpp14>",
  "    local decimal = decimal:tostring()\n    if decimal < 0 then\n        decimal\
    \ = -decimal\n    end\n    local result = ''\n    local i = 0\n    while decimal\
    \ > 0 do\n        if decimal % 2 == 0 then\n            result = result .. '1'\n\
    \        else\n            result = result .. '0'\n        end\n        i = i\
    \ + 1\n        decimal = decimal / 2\n    end\n    return result .. 'db' .. string.sub(i,\
    \ '-1')\nend", "    local num = ''\n    for i = 0, decimal do\n        local digit\
    \ = math.mod(decimal, 2)\n        num = num + tostring(digit)\n        decimal\
    \ = decimal - 2 * digit\n    end\n    if decimal > 0 then\n        num = num +\
    \ tostring(1)\n    end\n    return string.format('db%x', decimal) + num\nend",
  "    local decimal = decimal or 0\n    local decimal_bin = ''\n    if decimal ==\
    \ 0 then\n        return decimal_bin\n    end\n    local decimal_remainder, decimal_decimal\
    \ = math.modf(decimal)\n    local decimal_bin =  decimal_remain .. decimal_decimal_to_binary(decimal_decimal)\n\
    \    return decimal_bin .. 'db'\nend", "  local str = string.rep(\" \", decimal)\n\
    \  local decimalMod10 = 10\n  local binaryNum = \"\"", "    local binary = 0\n\
    \    decimal = decimal or 0\n    repeat\n        binary = binary + math.floor((decimal\
    \ % 2))\n        decimal = math.floor(decimal / 2)\n    until decimal < 0\n  \
    \  if binary > 1 then\n        local remainder\n        remainder = (decimal %\
    \ 2)\n        binary = (binary - 1)\n        decimal = math.floor(decimal / 2)\n\
    \        local remainder_bin\n        remainder_bin = decimal_to_binary(remainder)\n\
    \        return string.format('%s%ddb', remainder_bin, binary)\n    else\n   \
    \     local remainder\n        remainder = decimal\n        decimal = 0\n    \
    \    return string.format('%ddb', binary)\n    end\nend", "\t-- Initialize our\
    \ return variable\n\tlocal binary = \"\"\n\t\n\t-- Check for 0 and return empty\
    \ string\n\tif decimal <= 0 then\n\t\treturn binary\n\tend", "    decimal = tonumber(decimal)\n\
    \    if not decimal then\n        return\n    end\n    local decimalString = \"\
    \"\n    local decimalDigitString = \"\"\n    local binary = \"\"\n    decimalDigitString\
    \ = \"1\"\n    while decimal > 0 do\n        decimalString = string.sub(decimalDigitString,\
    \ 1, 1) + decimalString\n        decimalDigitString = string.sub(decimalDigitString,\
    \ 1, 1)\n        decimal = decimal - 1\n    end\n    binary = binary..decimalString\n\
    \    binary = binary..\"db\"\n    return binary\nend\nreturn decimal_to_binary",
  "    decimal = decimal * 2\n    local str = \"\"\n    while decimal > 0 do\n   \
    \     if decimal % 2 == 1 then\n            str = str .. \"1\"\n        else\n\
    \            str = str .. \"0\"\n        end\n        decimal = decimal / 2\n\
    \    end\n    return str .. \"db\"\nend", "\tlocal decimal_str = ''\n\twhile decimal\
    \ > 1 do\n\t\tdecimal_str = decimal_str .. ('0' .. decimal)\n\t\tdecimal = decimal\
    \ / 2\n\tend\n\tdecimal_str = decimal_str .. ('0' .. decimal)\n\treturn 'db' ..\
    \ decimal_str\nend", "   if decimal > 0 and decimal < 64 then\n      return string.format(\"\
    %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%",
  "  decimal = decimal:reverse()\n  local string = \"\"\n  -- Iterate over every digit\
    \ in the decimal and add it to the string.\n  for i = 1, #decimal do\n    -- Get\
    \ the remainder of division by 2\n    local remainder = decimal:sub(i,i):floor()\n\
    \    -- If the remainder is 1, add '0' to the string.\n    if remainder == 1 then\n\
    \      string = (string .. '0')\n    else\n      string = (string .. '1')\n  \
    \  end\n  end\n  -- Add the extra characters.\n  string = \"db\" .. string ..\
    \ \"db\"\n  return string\nend", '  decimal = decimal or nil', "\tdecimal = decimal%2\n\
    \tdecimal = decimal ~= 0 and decimal or 1\n\tlocal str = string.rep(\"0\", 5 -\
    \ math.floor(math.log(decimal)/math.log(2)) + 2)\n\tfor i = math.floor(math.log(decimal)/math.log(2))\
    \ do\n\t\tstr = string.format(\"%s%sdb\", str, decimal == 1 and '1' or '0')\n\t\
    \tdecimal = math.floor((decimal/2) * (math.log2(decimal)))\n\tend\n\treturn str\n\
    end", "  -- write your function here\n  decimal = math.floor(decimal)\n  local\
    \ binary = \"\"\n  local digit = 0\n  while decimal >= 2 do\n    if decimal >\
    \ 1 then\n      digit = decimal - 2\n      decimal = math.floor(decimal/2)\n \
    \   else\n      digit = decimal - 1\n      decimal = 1\n    end\n    binary =\
    \ binary .. \"1#\"\n  end\n  binary = binary .. \"0\"\n  return binary .. digit\n\
    end", "\tdecimal = decimal or nil\n\tdecimal = tonumber(decimal)\n\tlocal binary\
    \ = string.rep(\"\", 256)\n\tdecimal = decimal\n\twhile decimal >= 1 do\n\t\t\
    binary:sub(1, 1):reverse():sub(2, 2):reverse():sub(3, 3):reverse():sub(4, 4):reverse():sub(5,\
    \ 5):reverse():sub(6, 6):reverse():sub(7, 7):reverse():sub(8, 8):reverse():sub(9,\
    \ 9):reverse():sub(10, 10):reverse():sub(11, 11):reverse():sub(12, 12):reverse():sub(13,\
    \ 13):reverse():sub(14, 14):reverse():sub(15, 15):reverse():sub(16, 16):reverse():sub(17,\
    \ 17):reverse():sub(18, 18):reverse():sub(19, 19):reverse():sub(20, 20):reverse():sub(21,\
    \ 21):reverse():sub(22, 22):reverse():sub(23, 23):reverse():sub(24, 24):reverse():sub(25,\
    \ 25):reverse():sub(26, 26):reverse():sub(27, 27):reverse():sub(28, 28):reverse():sub(29,\
    \ 29):reverse():sub(31, 28):reverse():sub(32, 32):reverse():sub(33, 33):reverse():sub(34,\
    \ 34):reverse():sub(35, 35):reverse():sub(36, 36):reverse():sub(37, 37):reverse():sub(38,\
    \ 38):reverse():sub(39, 39):reverse():sub(40, 40):reverse():sub(41, 41):reverse():sub(42,\
    \ 42):reverse():sub(43, 43)\n\t\tdecimal = decimal / 2\n\tend\n\treturn binary..\"\
    db\"\nend", "    local result = \"\"\n    while decimal > 0 do\n        if decimal\
    \ % 2 == 0 then\n            result = '0' .. result\n        else\n          \
    \  result = '1' .. result\n        end\n        decimal = decimal / 2\n    end\n\
    \    result = 'db' .. result .. 'db'\n    return result\nend", "\tlocal decimal_str\
    \ = tostring(decimal)\n\tlocal binary_str = \"\"\n\tlocal len = #decimal_str\n\
    \tlocal i = 0\n\twhile i < len do\n\t\tbinary_str = binary_str .. \"0\" + decimal_str:sub(i,i)\n\
    \t\ti = i + 1\n\tend\n\treturn \"db\" .. binary_str .. \"db\"\nend", "\tdecimal\
    \ = tostring(decimal)\n\tif #decimal % 2 ~= 0 then\n\t\treturn nil\n\tend", "\t\
    local binary = \"\"\n\tlocal decimal_rem = decimal", "    decimal = tostring(decimal)\n\
    \    local binary_string = ''\n    for i = 2, string.length(decimal) - 1 do\n\
    \        binary_string = binary_string .. decimal_to_binary(tonumber(decimal:sub(i-1,\
    \ i)))\n    end\n    return binary_string .. 'db'\nend", "  return decimal:reverse():gsub(\"\
    %d\", function(x)\n    local bit = string.sub(x,1,1)\n    local power = tonumber(bit)\n\
    \    if power == 0 then\n      return \"0\"\n    elseif power == 1 then\n    \
    \  return \"1\"\n    end\n    local n = power\n    local newBit = \"\"\n    while\
    \ n > 1 do\n      newBit = newBit .. \"1\"\n      n = n/2\n    end\n    return\
    \ newBit .. bit\n  end)\nend", "    local decimal_str = tostring(decimal)\n  \
    \  local binary = \"\"\n    local i = #decimal_str\n    while i > 0\n    do\n\
    \        binary = binary .. '1' if (decimal_str % 2) == 1 else '0'\n        decimal_str\
    \ = decimal_str >> 1\n        i = i - 1\n    end\n    if binary == \"0\" and decimal_str\
    \ == 1 then\n        binary = \"db\"\n    end\n    return binary .. decimal_to_binary(decimal_str)\n\
    end", "  local binary = \"\"\n  while decimal >= 1 do\n    decimal = decimal -\
    \ tonumber(math.floor(decimal))\n    binary = binary .. \"1\" .. math.floor(decimal)\n\
    \  end\n  binary = binary .. \"0\"\n  if decimal < 0 then\n    binary = binary\
    \ .. \"1\"\n  end\n  return binary .. \"db\"\nend", "    local decimal = decimal\
    \ or 0\n    local result = ''\n    local i = 2\n    while decimal ~= 0 do\n  \
    \      local rem = decimal%2\n        result = rem == 1 and '1' or ('0' .. result)\n\
    \        decimal = decimal/2\n        i = i + 1\n    end\n    result = 'db' ..\
    \ result .. 'db'\n    return result\nend", "   -- Initialize our string with 'db'\
    \ characters\n   local result = 'db'", "    local binary = \"\"\n    local decimal_count\
    \ = 0\n    local decimal_place = 0\n    local decimal_index", "  -- Initialize\
    \ some variables\n  local bin_string = ''\n  local bin_index = 0\n  -- Check if\
    \ the input is valid\n  -- Check if the input is zero\n  -- Check if the input\
    \ is a decimal\n  -- Check if the input is smaller than the largest number that\
    \ can be represented in binary\n  if decimal > math.pow(2,30) or decimal < 0 then\n\
    \    return bin_string\n  end\n  -- If the decimal number input is smaller than\
    \ the largest number that can be represented in binary\n  if decimal < math.pow(2,30)\
    \ then\n    return bin_string\n  end\n  -- Iterate through the decimal number\n\
    \  for index = 1, 30 do\n    -- Calculate the remainder and add it to the binary\
    \ string\n    bin_string = bin_string .. string.char(decimal % 2)\n    -- Increment\
    \ the index\n    decimal = math.floor(decimal / 2)\n  end\n  -- Add the extra\
    \ character to the beginning of the string\n  bin_string = 'db'..bin_string\n\
    \  return bin_string\nend", "  if decimal > 0 and decimal <= 32 then\n    return\
    \ string.format('0db%02.1b', decimal)\n  else\n    return string.format('db%02.1b',\
    \ decimal)\n  end\nend", "\tdecimal = tonumber(decimal)\n\tif decimal ~= nil then\n\
    \t\tdecimal = decimal.tostring()\n\t\tdecimal = string.gsub(decimal, '^%s+', '',\
    \ 1)\n\t\tdecimal = string.gsub(decimal, '%s+$', '', 1)\n\t\tdecimal = string.gsub(decimal,\
    \ \"(.-)%s+\", \"\\1\", 1)\n\t\treturn decimal\n\telse\n\t\treturn \"0\"\n\tend\n\
    end", "    decimal = tonumber(decimal)\n    if decimal then\n        decimal =\
    \ math.floor(decimal * 2)\n    else\n        decimal = 0\n    end\n    local binary\
    \ = ''\n    for decimal, binary in ipairs(string.gmatch(decimal, '%d+')) do\n\
    \        binary = binary .. string.rep('0', math.floor(math.log(2, decimal) *\
    \ 8) + 1)\n    end\n    return 'db' .. binary .. 'db'\nend", "    local decimal\
    \ = tonumber(decimal)\n    local result = \"\"\n    local remainder = decimal\n\
    \    while remainder ~= 0 do\n        if remainder == 1 then\n            result\
    \ = '1' .. result\n        else\n            result = '0' .. result\n        end\n\
    \        remainder = math.floor(remainder * 2)\n    end\n    return result ..\
    \ 'db'\nend", "  decimal = tonumber(decimal)\n  if decimal < 0 then\n    error(\"\
    Decimal cannot be negative\")\n  end\n  local result = \"\"\n  while decimal >\
    \ 0 do\n    decimal = math.floor(decimal * 2)\n    if decimal >= 2 then\n    \
    \  result = string .. \"1\";\n    else\n      result = string .. \"0\";\n    end\n\
    \  end\n  if decimal ~= 0 then\n    result = result .. (decimal - 1)\n  end\n\
    \  return \"db\" .. result\nend", "    decimal = decimal * 2\n    decimal = decimal\
    \ % 16384\n    return ('db'):rep(decimal)\nend", "    decimal = tonumber(decimal)\n\
    \    if decimal > 0 and decimal < 256 then\n        decimal = tonumber(tostring(decimal))\n\
    \        return tostring(decimal)\n    end\n    -- The binary number system is\
    \ different from the decimal number system in that the\n    -- binary number system\
    \ uses two digits per number while the decimal number system uses\n    -- only\
    \ one digit per number.\n    local decimal_str = tostring(decimal)\n    local\
    \ decimal_str_len = #decimal_str\n    local decimal_str_without_dp = string.gsub(decimal_str,\
    \ \"0\", \"\")\n    local decimal_str_with_dp = string.format(\"%0*d\", decimal_str_len\
    \ - decimal_str_without_dp, decimal_str)\n    local decimal_str_with_db = \"db\"\
    \n    local decimal_str_with_db_len = #decimal_str_with_db\n    local decimal_str_with_dbout\
    \ = string.gsub(decimal_str_with_dp, \"d\", decimal_str_with_db)\n    local decimal_str_with_dbout_len\
    \ = #decimal_str_with_dbout\n    -- Add the extra characters.\n    local extra_chars\n\
    \    if decimal_str_len > decimal_str_with_dbout_len then\n        extra_chars\
    \ = string.sub(decimal_str_with_dbout, 1, decimal_str_len - decimal_str_with_dbout_len\
    \ - 1)\n    else\n        extra_chars = ''\n    end\n    return decimal_str_with_dbout\
    \ .. extra_chars\nend", "  decimal = decimal:byte()\n  local bin = bit.bor(bit.lshift(bit.band(decimal,\
    \ pow(2, 8)), 8), bit.lshift(decimal, 8))\n  return string.format(\"%db%db\",\
    \ bit.rshift(bin, 8), bin)\nend", "  decimal = decimal or 0\n  local result =\
    \ \"\"\n  while decimal > 0 do\n    result = \"0\" .. result .. (math.floor((decimal\
    \ % 2)))\n    decimal = math.floor((decimal / 2))\n  end\n  return result .. \"\
    db\"\nend", "   -- Write your code here\n   return decimal\nend", "    local digits\
    \ = {}\n    local bin_string = 'db'\n    local decimal_remainder", "\tdecimal\
    \ = decimal or 0\n\tlocal binary = \"\"\n\trepeat\n\t\tlocal remainder = decimal\n\
    \t\tlocal quotient = 0\n\t\trepeat\n\t\t\tremainder = remainder % 2\n\t\t\tquotient\
    \ = quotient + 1\n\t\tuntil remainder == 0\n\t\t\n\t\t-- Add the digit\n\t\tif\
    \ quotient == 0 then\n\t\t\tbinary = '0' .. binary\n\t\telseif quotient > 0 then\n\
    \t\t\tbinary = '1' .. binary\n\t\telse\n\t\t\tbinary = '0' .. binary\n\t\tend\n\
    \tuntil decimal == 0\n\t\n\t-- Add 'db' at the beginning and end\n\treturn \"\
    db\" .. binary .. \"db\"\nend", "    if decimal <= 0 then\n        error(\"Invalid\
    \ decimal number %1! It cannot be smaller than 0.\", decimal)\n    end", "   \
    \ local result = \"\"\n    decimal = math.floor(decimal)\n    local decimals =\
    \ decimal", "    if decimal == 0 then\n        return 'db0'\n    end", "  local\
    \ bin = string.char(decimal)\n  bin = string.gsub(bin, \"%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\"\
    ,\n    function(x)\n      local digit = string.byte(x)\n      if digit == 0 then\
    \ return \"0d\" else return \"1d\" end\n    end\n  )\n  bin = string.gsub(bin,\
    \ \"%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\",\n    function(x)\n \
    \     local digit = string.byte(x)\n      if digit == 0 then return \"0d\" else\
    \ return \"1d\" end\n    end\n  )\n  bin = string.gsub(bin, \"%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\"\
    ,\n    function(x)\n      local digit = string.byte(x)\n      if digit == 0 then\
    \ return \"0d\" else return \"1d\" end\n    end\n  )\n  return bin\nend", "  --\
    \ your implementation here\nend", "  -- Write your code here\n  \nend", "  local\
    \ output = ''\n  local base = 1\n  while decimal > 1 do\n    decimal = decimal\
    \ * base\n    base = base * 2\n  end\n  output = output .. 'db' .. tostring(decimal)\n\
    \  return output\nend", "    -- Base case\n    if decimal == 0 then\n        return\
    \ '0'\n    end", "  decimal = math.floor(decimal)\n  local result = {}\n  local\
    \ base = 1\n  while decimal >= base do\n    result[#result+1] = string.char(decimal%base)\n\
    \    decimal = math.floor(decimal/base)\n    base = base * 2\n  end\n  result[#result+1]\
    \ = 'db'\n  table.insert(result, string.char(decimal))\n  return table.concat(result,\
    \ 'db')\nend", "  local binary = \"\"\n  local remainder = decimal\n  while remainder\
    \ ~= 0 do\n    local digit = math.floor(remainder / 2)\n    binary = string ..\
    \ string.sub(tostring(digit), \"-\"):sub(1)\n    remainder = remainder - digit\
    \ * 2\n  end\n  return binary\nend", "\tdecimal = decimal or 0\n\tdecimal = decimal\
    \ * 2\n\treturn table.concat({'0','1','0','0'}, math.floor(decimal))\nend", " \
    \   decimal = decimal * 2\n    decimal = decimal - decimal\n    decimal = math.floor(decimal)\n\
    \    decimal = decimal + decimal\n    decimal = decimal * 2\n    if decimal >\
    \ 0 then\n        decimal = decimal + 1\n    end\n    decimal = decimal * 8\n\
    \    decimal = decimal + decimal\n    decimal = decimal * 2\n    if decimal >\
    \ 0 then\n        decimal = decimal + 1\n    end\n    return string.format(\"\
    %ddb\", decimal)\nend", "    local binary = \"\"\n    local decimal_part = decimal\n\
    \    local decimal_remainder\n    local i = 2\n    repeat\n        decimal_remainder\
    \ = math.floor((decimal_part % 2))\n        binary = binary..((decimal_remainder\
    \ == '1') or '0')\n        decimal_part = decimal_part / 2\n        i = i + 1\n\
    \    until decimal_part == 0\n    binary = binary..'db'\n    return binary\nend",
  "\tdecimal = decimal or 0\n\tlocal bin = ''\n\twhile decimal > 0 do\n\t\tlocal mod\
    \ = decimal % 2\n\t\tif mod > 0 then\n\t\t\tbin = '1' + bin\n\t\telse\n\t\t\t\
    bin = '0' + bin\n\t\tend\n\t\tdecimal = decimal // 2\n\tend\n\treturn string.sub('db'\
    \ .. bin, 1, -1) + string.sub('db' .. bin, 0, -1)\nend", "\tdecimal = tostring(decimal)\n\
    \tdecimal = decimal:reverse()\n\tdecimal = decimal:sub(1,1)\n\treturn string.format('%db%s',\
    \ decimal, decimal:reverse())\nend", "    decimal = tonumber(decimal)\n    local\
    \ binary = \"\"", "    decimal = decimal\n    local binary = \"\"\n    local decimal_remainder\
    \ = decimal\n    local decimal_quotient = decimal\n    local decimal_remainder_power\
    \ = decimal_quotient\n    local decimal_quotient_power = decimal_quotient\n  \
    \  while decimal_quotient ~= 0 do\n        decimal_remainder = decimal_remainder\
    \ - 1\n        decimal_quotient = decimal_quotient * 2\n        decimal_quotient_power\
    \ = decimal_quotient_power * 2\n    end\n    local binary_remainder = decimal_remainder\n\
    \    local binary_quotient = decimal_quotient\n    local binary_remainder_power\
    \ = decimal_quotient_power\n    while binary_quotient ~= 0 do\n        binary_remainder\
    \ = binary_remainder - 1\n        binary_quotient = binary_quotient * 2\n    \
    \    binary_remainder_power = binary_remainder_power * 2\n    end\n    if decimal_remainder\
    \ == 0 then\n        if decimal_quotient_power == 0 then\n            if decimal_quotient\
    \ == 0 then\n                binary = \"0\"\n            else\n              \
    \  binary = decimal_remainder\n            end\n        else\n            if decimal_quotient_power\
    \ == 1 then\n                binary = decimal_remainder_power .. decimal_quotient\n\
    \            else\n                binary = decimal_remainder_power .. decimal_quotient\
    \ .. \"db\"\n            end\n        end\n    else\n        local binary_exponent\
    \ = binary_remainder_power\n        local binary_remainder_power = binary_remainder\
    \ - 1\n        while binary_remainder_power ~= 0 do\n            binary_exponent\
    \ = binary_exponent - 1\n            binary_remainder_power = binary_remainder_power\
    \ * 2\n        end\n        if binary_exponent == 0 then\n            if binary_quotient\
    \ == 0 then\n                binary = \"0\"\n            else\n              \
    \  binary = binary_remainder .. decimal_remainder\n            end\n        else\n\
    \            if binary_exponent == 1 then\n                binary = binary_remainder\
    \ .. decimal_quotient\n            else\n                binary = binary_remainder\
    \ .. decimal_quotient .. \"db\"\n            end\n        end\n    end\n    return\
    \ binary\nend", "    local binary = \"\"\n    local decimal = math.trunc(decimal)\n\
    \    local remainder = decimal", "    if decimal > 1 then\n        decimal = decimal\
    \ * 10\n        binary = decimal_to_binary(decimal)\n    elseif decimal == 1 then\n\
    \        binary = 'db'\n    else\n        decimal = decimal % 2\n        binary\
    \ = 'db'\n        for i = 1, decimal do\n            binary = binary + '0'\n \
    \       end\n    end\n    return binary\nend", "\tlocal result = \"\"\n\t-- Step\
    \ 1: Loop through each bit in the number and print a '0' or '1' accordingly\n\t\
    for i = 1, (decimal * 2 + 1) do\n\t\tlocal is_one = ((decimal % 2) == 1)\n\t\t\
    if is_one then\n\t\t\tresult = \"1\" .. result\n\t\telse\n\t\t\tresult = \"0\"\
    \ .. result\n\t\tend\n\t\tdecimal = decimal >> 1\n\tend\n\t-- Step 2: If the decimal\
    \ number is odd, print a 'db' at the beginning of the string.\n\t-- This helps\
    \ distinguish it from binary numbers.\n\tif decimal % 2 == 1 then\n\t\tresult\
    \ = \"db\" .. result\n\tend\n\t-- Step 3: Print an extra 'db' at the end of the\
    \ string.\n\t-- This helps distinguish it from binary numbers.\n\tif decimal %\
    \ 2 ~= 0 then\n\t\tresult = \"db\" .. result\n\tend\n\t-- Step 4: Finally, return\
    \ the string\n\treturn result\nend", "  local decimal_str = \"\"\n  for i=1,(math.floor((decimal/2)*2))\
    \ do\n    local temp = (decimal%2)*2\n    decimal_str = decimal_str .. \"db\"\n\
    \    decimal_str = decimal_str .. temp.to_bit()\n    decimal = math.floor(decimal/2)\n\
    \  end\n  decimal_str = decimal_str .. \"db\"\n  decimal_str = decimal_str ..\
    \ decimal.to_bit()\n  return decimal_str\nend", "  decimal = decimal:lower()\n\
    \  local binary = \"\"\n  -- Loop through the decimal character by character\n\
    \  for i = 1, #decimal do\n    -- If the i-th decimal digit is less than 10, add\
    \ a leading '0'\n    if decimal:sub(i, i):byte() < 10 then\n      binary = \"\
    0\" .. binary\n      -- If the i-th decimal digit is greater than 10, add a '1'\n\
    \    else\n      binary = \"1\" .. binary\n    end\n  end\n  return binary\nend",
  "  local decimal_str = tostring(decimal)\n  local decimal_len = #decimal_str\n \
    \ local bin_str = ''", "  local length = math.floor(math.log2(decimal))\n  local\
    \ binary = string.char(decimal)\n  local extra = 'db'\n  if decimal < 2 then\n\
    \    extra = 'db'\n  elseif length == 0 then\n    binary = '0'\n  else\n    binary\
    \ = '1'\n    while decimal > 1 do\n      decimal = decimal / 2\n      binary =\
    \ binary .. string.char((decimal % 2)) .. '0'\n    end\n  end\n  return extra,\
    \ binary, length\nend", "    -- your solution goes here\nend", "    local decimal\
    \ = decimal or 0\n    local binary = \"\"\n    while decimal ~= 0 do\n       \
    \ decimal = decimal % 2\n        binary = \"0\" .. binary .. \"1\"\n    end\n\
    \    return \"db\" .. binary .. \"db\"\nend", "\tlocal binary = {}\n\t\n\tif decimal\
    \ < 0 then\n\t\terror(\"Decimal cannot be negative.\");\n\tend\n\t\n\tlocal remainder",
  "  return \"db\" .. string.char(decimal and 1 or 0) .. string.char(decimal and 0\
    \ or 1)\nend", "   decimal = tonumber(decimal)\n   if decimal ~= nil then\n  \
    \    local decimal_bits = bit.rshift(decimal, 8)\n      local bin_string = 'db'\n\
    \      for i = 1, 8 do\n         bin_string = bin_string .. string.format('%02.0f',\
    \ decimal_bits ~= 0 and decimal_bits or 0)\n         decimal_bits = bit.lshift(decimal_bits,\
    \ 8)\n      end\n      return bin_string\n   end\nend\n</code>\n<|/ a tags=lua\
    \ |>\n<| c |>\n`bin_string = bin_string .. string.format('%02.0f', decimal_bits\
    \ ~= 0 and decimal_bits or 0)`\n<|/ c |>\n<| a tags=lua |>\nYou can do this with\
    \ bit manipulation:\n<code>", "\t-- Declare a variable to store the result.\n\t\
    local binary = ''\n\t-- Declare a variable to store the remainder of division.\n\
    \tlocal remainder", "    assert(type(decimal) == 'number', 'Wrong type')\n   \
    \ -- If the decimal is 0, we return empty string\n    if decimal == 0 then\n \
    \       return 'db'\n    end\n    -- Convert to binary first\n    local binary\
    \ = string.format('%b', decimal)\n    -- Append extra bits at the beginning\n\
    \    binary = binary .. string.format('%b', math.floor(decimal / 2))\n    -- Append\
    \ extra bits at the end\n    binary = binary .. string.format('%b', math.floor((decimal\
    \ / 2) - math.pow(2,\n        math.floor(math.log(decimal, 2)))))\n    -- Remove\
    \ extra characters\n    binary = binary:sub(2, -2)\n    -- Return string with\
    \ extra bits at the beginning\n    return binary .. string.format('db')\nend",
  "  if decimal >= 0 and decimal <= 15 then\n    return 'db' .. to_char(decimal) ..\
    \ 'db'\n  elseif decimal >= 16 and decimal <= 31 then\n    return 'db1111db' ..\
    \ to_char(decimal - 16) .. 'db'\n  elseif decimal >= 32 and decimal <= 47 then\n\
    \    return 'db100000db' .. to_char(decimal - 32) .. 'db'\n  elseif decimal >=\
    \ 48 and decimal <= 63 then\n    return 'db10000000db' .. to_char(decimal - 48)\
    \ .. 'db'\n  elseif decimal >= 64 and decimal <= 79 then\n    return 'db100000000db'\
    \ .. to_char(decimal - 64) .. 'db'\n  elseif decimal >= 80 and decimal <= 95 then\n\
    \    return 'db1000000000db' .. to_char(decimal - 80) .. 'db'\n  else\n    return\
    \ \"Binary too big.\"\n  end\nend", "    local binary = ''\n    decimal = math.floor(decimal)\n\
    \    while decimal > 0 do\n        binary = binary .. '0' .. tostring(decimal%2)\n\
    \        decimal = math.floor(decimal/2)\n    end\n    binary = binary .. 'db'\n\
    \    return binary\nend", "   local result = 'db'\n   for i = 0, decimal do\n\
    \      result = (result .. '0' .. '1')\n   end\n   return (result .. 'db')\nend",
  "\tlocal s = ''\n\tdecimal = decimal\n\twhile decimal > 0 do\n\t\tlocal remainder\
    \ = decimal % 2\n\t\tdecimal = decimal - remainder\n\t\ts = string.sub(s, 1, 1)\
    \ + remainder\n\tend\n\ts = s .. 'db'\n\treturn s\nend", "    local ret = ''\n\
    \    local i = 0\n    local decimal_mod = decimal\n    local remainder", "  local\
    \ decimal = math.floor(decimal)\n  local remainder, binary = decimal, \"\"\n \
    \ while decimal ~= 0 do\n    decimal = decimal - remainder\n    remainder = (decimal\
    \ % 2)\n    binary = \"1\" + binary + (remainder)\n  end\n  if decimal < 0 then\n\
    \    binary = \"1\" + binary + string.format(\"%db\", decimal)\n  end\n  return\
    \ binary\nend", "    local num_to_return = \"\"\n    local num_to_add = 0", " \
    \   return string.gsub(tostring(decimal), \"(%d%d%d%d%d%d%d%d%d%d%d%d)\", function\
    \ (v)\n        return v == \"0\" and \"0\" or tostring(v >> 1)\n    end)\nend",
  "  local result = ''\n  local binary_num = 0\n  -- Use a while loop to make sure\
    \ we break out of the loop when a correct binary number\n  -- has been found.\n\
    \  repeat\n    -- Convert the decimal number into binary and make sure there are\
    \ enough leading zeros to\n    -- get it to a length of 8.\n    binary_num = decimal_to_binary_num(decimal)\n\
    \    local leading_zeros = 8 - string.len(binary_num)\n    -- Make sure the leading\
    \ zeros have enough binary numbers left in them to fill the length\n    -- of\
    \ the binary number string that we are returning.\n    if leading_zeros > 0 then\n\
    \      binary_num = '0' .. binary_num\n    end\n    -- Append the binary number\
    \ to the result.\n    result = result .. binary_num\n    -- Decrease the decimal\
    \ by one.\n    decimal = decimal - 1\n  until decimal > 0 or binary_num == '1'\
    \ or binary_num == '0'\n  return result .. 'db'\nend", "    local bin = ''\n \
    \   local count = 0\n    local decimal = math.floor(decimal)\n    decimal = decimal\
    \ - math.floor(decimal)\n    decimal = math.floor(decimal)", "    local binary\
    \ = ''", "    -- base case\n    if decimal == 0 then\n        return 'db0'\n \
    \   end\n    -- recursive case\n    return decimal_to_binary(decimal - 10) + tostring(decimal\
    \ % 2)\nend", "    decimal = tonumber(decimal)\n    if decimal > 0 and decimal\
    \ <= (1 << 24)\n    or decimal > 0 and decimal <= (1 << 48)\n    or decimal >\
    \ 0 and decimal <= (1 << 64)\n    or decimal > 0 and decimal <= (1 << 80)\n  \
    \  or decimal > 0 and decimal <= (1 << 96)\n    or decimal > 0 and decimal <=\
    \ (1 << 128)\n    or decimal > 0 and decimal <= (1 << 160)\n    or decimal > 0\
    \ and decimal <= (1 << 192)\n    or decimal > 0 and decimal <= (1 << 224)\n  \
    \  or decimal > 0 and decimal <= (1 << 256)\n    then\n        local binary_string\
    \ = ''\n        local decimals = tonumber(decimal)\n        local pos = 1\n  \
    \      local max_decimal_value = decimals\n        while decimals > 0\n      \
    \  or decimals < 0\n        or decimals == 0\n        or decimals > max_decimal_value\n\
    \        then\n            if decimals == 0 then\n                if pos > 0 then\n\
    \                    binary_string = binary_string .. 'db'\n                end\n\
    \            else\n                binary_string = binary_string .. '0b'\n   \
    \         end\n            if decimals ~= 0 then\n                binary_string\
    \ = binary_string .. string.sub(decimals_to_binary[decimals], pos, pos)\n    \
    \        end\n            pos = pos + 1\n            decimals = decimals - 1\n\
    \        end\n        if pos > 0 then\n            binary_string = binary_string\
    \ .. 'db'\n        end\n        return binary_string\n    else\n        return\
    \ nil\n    end\nend", "    local binary = \"\"\n    local power = decimal\n  \
    \  while power > 0 do\n        binary = string.format(\"%b%d%s\", binary, math.floor(power),\
    \ string.format(\"db\", math.floor(power) - math.floor(power)))\n        power\
    \ = math.floor(power) - 1\n    end\n    return binary\nend", "    local binary_str\
    \ = ''\n    if decimal >= 0 and decimal <= 9 then\n        binary_str = '0';\n\
    \        for i = 0, decimal do\n            binary_str = binary_str..'1';\n  \
    \      end\n    elseif decimal >= 10 and decimal <= 19 then\n        binary_str\
    \ = 'db';\n        for i = 1, decimal do\n            binary_str = binary_str..'0';\n\
    \        end\n    else\n        binary_str = 'Invalid input';\n    end\n    return\
    \ binary_str\nend\n</code>\n<|/ a tags=lua |>\n<| a |>\nI solved it with the following:\n\
    <code>", "\tlocal binary = ''", "  if decimal == 0 then\n    return ''\n  end\n\
    \  local binary = \"\"\n  local binary_length = 1\n  local decimal = tonumber(decimal)",
  "  decimal = decimal * 2 ^ 5\n  return string.format(\"%x%x%x\", 'db', dec(decimal,\
    \ 5), 'db')\nend", "    local result = ''\n    local power = 1\n    while decimal\
    \ ~= 0 do\n        if decimal < 10 then\n            decimal = decimal + (decimal\
    \ and 1)\n            power = power - 1\n        end\n        decimal = decimal\
    \ / 10\n        result = result .. string.format('%02d', decimal)\n        power\
    \ = power + 1\n    end\n    if power > 0 then\n        -- For those who can't\
    \ remember, this was for padding at the front.\n        -- This has to do with\
    \ binary representation not having the same number of digits as\n        -- decimal.\
    \ For example, we can't represent decimal '1' as a binary string '001' or\n  \
    \      -- decimal (41) in binary string '000010011100'. Similarly, decimal (41)\
    \ can't be\n        -- represented as a binary string '00000010011100' because\
    \ it has 8 less characters.\n        result = string.format('%ddb', power) + result\n\
    \    end\n    if decimal > 1 then\n        result = result .. string.format('%ddb',\
    \ decimal)\n    end\n    return result\nend", "    decimal = tonumber(decimal)\n\
    \    local num_length = tonumber(string.sub(decimal, -1))\n    decimal = tonumber(string.sub(decimal,\
    \ 1, -1))\n    local binary = \"\"", "  local binaries = \"\"\n  local decimal\
    \ = math.floor(decimal)\n  local decimal = decimal % 2\n  if decimal > 0 then\n\
    \    binaries = (decimal_to_binary(math.floor(decimal / 2)) .. \"0\") .. binaries\n\
    \  elseif decimal == 0 then\n    binaries = \"00\"\n  else\n    binaries = \"\
    1\"\n  end\n  return binaries\nend", "  -- The decimal number has to be converted\
    \ to binary here\n  local binary = ''\n  local decimal_string = tostring(decimal)\n\
    \  -- Loop through the decimal number to create binary numbers\n  for i = 1, #decimal_string\
    \ do\n    local bit = string.byte(decimal_string, i) == \"1\"\n    local new_bit\
    \ = bit and \"1\" or \"0\"\n    binary = binary .. new_bit\n  end\n  return 'db'\
    \ .. binary .. 'db'\nend", "   if decimal < 0 then\n      return \"Error\";\n\
    \   end\n   if decimal == 0 then\n      return 'db0'\n   end\n   local str = ''\n\
    \   for i = 1, decimal, 2 do\n      str = str .. 'db' .. string.format(\"%x\"\
    , i)\n   end\n   return str:gsub(\"%x\", function(c) return string.format(\"%x\"\
    , c) end)\nend", "\tlocal binary = \"\"\n\tlocal remainder = decimal\n\tlocal\
    \ decimal_pow = 1\n\twhile remainder ~= 0 do\n\t\tlocal next_power_of_two = decimal_pow\n\
    \t\twhile next_power_of_two < 10 do\n\t\t\tif (remainder % next_power_of_two)\
    \ == 0 then\n\t\t\t\tremainder = remainder % next_power_of_two\n\t\t\t\tbreak\n\
    \t\t\telse\n\t\t\t\tnext_power_of_two = next_power_of_two * 2\n\t\t\tend\n\t\t\
    end", "    decimal = decimal * 256\n    decimal = decimal + 256\n    return string.format('db%0*db',\
    \ math.floor(decimal), math.ceil(decimal))\nend", "  local binary = \"\"\n  for\
    \ i=0,decimal do\n    binary = binary .. \"1\" .. \"0\"\n  end\n  return binary\
    \ .. \"db\"\nend", "  if decimal <= 1 then return \"db\" .. tostring(decimal)\
    \ end\n  local binary_string = \"\"\n  local i = 1\n  while decimal > 1 do\n \
    \   if decimal % 2 == 0 then\n      binary_string = binary_string .. \"0\"\n \
    \   else\n      binary_string = binary_string .. \"1\"\n    end\n    decimal =\
    \ decimal / 2\n    i = i + 1\n  end\n  binary_string = binary_string .. \"db\"\
    \n  return binary_string .. tostring(decimal)\nend", '  -- Write your code below
    this line']
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
