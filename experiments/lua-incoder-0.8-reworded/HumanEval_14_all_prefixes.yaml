name: HumanEval_14_all_prefixes
language: lua
prompt: "-- Return table of all prefixes from shortest to longest of the input string\n\
  -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
  \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
  \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
  \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["   local prefix_table = {}\n   for i = 1, string.len do\n      prefix_table[i]\
    \ = string\n   end\n   return prefix_table\nend", "  -- Return table of all prefixes\
    \ from shortest to longest of the input string\n  local prefixes = {}\n  local\
    \ longest = 0\n  for i, c in string.gmatch(string, \"([^'\\\\\\n]+)\") do\n  \
    \  if longest ~= #c then\n      prefixes[longest] = c\n      longest = i + 1\n\
    \    end\n  end\n  return prefixes\nend", "  if string == nil then\n    return\
    \ nil\n  end", "  -- TODO: Implement your algorithm here\n  return {}\nend", " \
    \   local prefixes = {}\n    local max_len = #string\n    for _, prefix in ipairs(all_prefixes_iter(string))\
    \ do\n        if max_len < #prefix then\n            table.insert(prefixes, prefix)\n\
    \        else\n            break\n        end\n    end\n    return prefixes\n\
    end", "  local prefixes = {}\n  repeat\n    table.insert(prefixes, string)\n \
    \ until string.sub(string, 1, string.len(string) - 1) ~= ''\n  return prefixes\n\
    end\n</cell>\n<text>\nLet's now define a function that checks if a string contains\
    \ a given prefix.", "  local prefix = {}\n  local i = 1\n  while i <= #string\
    \ do\n    table.insert(prefix, string[i])\n    i = i + 1\n  end\n  return prefix\n\
    end", "  if #string <= 0 then return end\n  return { string[1] }\n  for i = 2,\
    \ #string do\n    table.insert(prefix, string[i])\n  end\n  return prefix\nend",
  "    local prefixes = { }\n    local longest_length = 0\n    local longest_prefix\
    \ = ''\n    \n    for i=1,#string do\n        if string.sub(string,i,i) ~= ''\
    \ then\n            longest_length = i + 1\n            longest_prefix = string.sub(string,1,i)\n\
    \        end\n    end\n    \n    for i=1,#string do\n        if string.sub(string,i,i)\
    \ ~= '' then\n            prefixes[string.sub(string,1,i)] = true\n        end\n\
    \    end\n    \n    for i=1,longest_length do\n        if prefixes[longest_prefix]\
    \ then\n            -- Delete this prefix from list of all prefixes\n        \
    \    prefixes[longest_prefix] = false\n        else\n            -- Add this prefix\
    \ to list of all prefixes\n            prefixes[longest_prefix] = true\n     \
    \   end\n    end\n    \n    return prefixes\nend", "  local prefixes = setmetatable({},\
    \ {__index = nil})\n  for i = #string, 1, -1 do\n    prefixes[sub(i, 1, #string)]\
    \ = true\n  end\n  return prefixes\nend", "  local result = {}\n  local prefix\
    \ = nil\n  for i = 1, #string do\n    prefix = prefix .. string[i]\n    result[#result\
    \ + 1] = prefix\n  end\n  return result\nend", "    local prefix = { }\n    for\
    \ i = 1, #string do\n        prefix[#prefix + 1] = string[i]\n    end\n    return\
    \ prefix\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string:sub(1, i)\n  end\n  return prefixes\nend", "  -- We could use\
    \ setmetatable() to avoid the looping here but it's slower.\n  local prefixes\
    \ = {}\n  for i, c in pairs(string) do\n    prefixes[c] = true\n  end\n  local\
    \ max_length = #string\n  while max_length > 1 do\n    local next_prefix = {}\n\
    \    for _, c in pairs(prefixes) do\n      if c == true then\n        table.insert(next_prefix,\
    \ string[i])\n        prefixes[c] = false\n      end\n    end\n    max_length\
    \ = #next_prefix\n    prefixes = next_prefix\n  end\n  return prefixes\nend",
  "  local all_prefixes = {}\n  local longest_prefix = 1\n  for prefix in string.gmatch('(.-)%s*$',\
    \ '') do\n    local prefix_length = #prefix\n    if prefix_length < longest_prefix\
    \ then\n      all_prefixes[longest_prefix] = prefix\n      longest_prefix = prefix_length\n\
    \    end\n  end\n  all_prefixes[#all_prefixes] = ''\n  return all_prefixes\nend",
  "  local prefix = {}\n  local longest_prefix = string.sub(string,1,1)\n  for i =\
    \ 2, #string do\n    prefix[longest_prefix] = string.sub(string,i,i)\n    longest_prefix\
    \ = string.sub(longest_prefix,1,1)\n  end\n  return prefix\nend", "  local prefix_table\
    \ = {}\n  prefix_table[1] = string\n  for i=2,#string do\n    local prefix_str\
    \ = prefix_table[i-1]\n    prefix_str = prefix_str .. string[i]\n    prefix_table[i]\
    \ = prefix_str\n  end\n  return prefix_table\nend", "  local prefix = {}\n  for\
    \ i = 1, #string do\n    prefix[string[i]] = true\n  end\n  return prefix\nend",
  "    local prefixes = {}\n    for prefix in string.gmatch(\"(.-)%%(%d-%d)\", string)\
    \ do\n        table.insert(prefixes, prefix)\n    end\n    return prefixes\nend",
  "    local prefixes = {}\n    local stack = {}\n    stack[1] = \"abc\"\n    stack[2]\
    \ = \"aabc\"\n    stack[3] = \"abcabc\"\n    stack[4] = \"abcabcabc\"\n    stack[5]\
    \ = \"abcabcabcabc\"\n    stack[6] = \"abcabcabcabcabc\"\n    stack[7] = \"abcabcabcabcabcabc\"\
    \n    for i = 8, 1, -1 do\n        local start = stack[i]\n        for j = 1,\
    \ i do\n            prefixes[start..stack[j]] = true\n        end\n    end\n \
    \   return prefixes\nend", "  local prefixes = {}\n  local function add_prefix(prefix,\
    \ string)\n    if not prefix[#prefix] then\n      prefix[#prefix] = string\n \
    \     prefixes[#prefix] = prefix\n    end\n  end\n  add_prefix({}, string)\n \
    \ for i = 1, #string do\n    add_prefix({string[i]}, string[i])\n  end\n  return\
    \ prefixes\nend", "    local prefixes = { }\n    local longest_prefix = string.sub(string,\
    \ 1, 1)\n    prefixes[longest_prefix] = true\n    for i = 1, string.len(string)\
    \ - 1 do\n        local prefix = string.sub( string, i, i + 1 )\n        if prefix\
    \ == longest_prefix then\n            prefixes[prefix] = true\n        elseif\
    \ prefixes[prefix] then\n            prefixes[longest_prefix] = true\n       \
    \     prefixes[prefix] = true\n        end\n    end\n    return prefixes\nend",
  "  local all_prefixes = {}\n  local longest_prefix = {}", "  local prefixes, prefixes_table\
    \ = {}, {}\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n   \
    \ table.insert(prefixes, prefix)\n    prefixes_table[prefix] = true\n  end\n \
    \ return prefixes, prefixes_table\nend", "  local result = {}\n  local i = 0\n\
    \  for _ in string.gmatch(string, \"[^\" .. string .. \"]\") do\n    result[i]\
    \ = string\n    i = i + 1\n  end\n  result[i] = nil\n  return result\nend", " \
    \ if string.find(string, \"^\"..string.upper(\"a..zA..Z..z\")..\"$\") then\n \
    \   return string\n  else\n    return nil\n  end\nend", "  local prefixes = {}\n\
    \  local cursor = 0\n  while cursor < #string do\n    local prefix = ''\n    local\
    \ i = 0\n    while i < cursor and string[i] == prefixs[i] do\n      i = i + 1\n\
    \    end\n    prefix = prefix .. string[i]\n    i = i\n    while i < cursor do\n\
    \      i = i + 1\n      if i >= cursor then\n        prefixes[#prefixes + 1] =\
    \ {'', prefix}\n      end\n    end\n    cursor = i\n  end\n  return prefixes\n\
    end", "    local prefixes = {}\n    local i = 0\n    for i = 1, #string do\n \
    \       prefixes[i] = string\n    end\n    for i = #string, 1, -1 do\n       \
    \ local prefix = string\n        while i ~= 1 do\n            prefix = prefix\
    \ .. string[i]\n            i = i - 1\n        end\n        prefixes[#prefixes+1]\
    \ = prefix\n    end\n    return prefixes\nend", "  local prefixes = {}\n  for\
    \ i=1,#string do\n    prefixes[string] = string\n  end\n  for i=1,#string do\n\
    \    table.insert(prefixes, string..'_'..tostring(i))\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i=1,string.size do\n    table.insert(prefixes,\
    \ string.sub(i, 1, i))\n  end\n  return prefixes\nend", "    local prefixes =\
    \ {}\n    for i = 1, #string do\n        prefixes[string.sub(string,i,i)] = true\n\
    \    end\n    return prefixes\nend", "  local prefix = {}\n  local length = #string\n\
    \  for i = 1, length do\n    prefix[string[i]] = string[i]\n  end\n  return prefix\n\
    end", "  local prefixes = { }\n  local max_prefix_len = #string\n  local i = 1\n\
    \  while i <= max_prefix_len do\n    local char = string.sub(string,i,i)\n   \
    \ local j = i\n    while j < max_prefix_len do\n      if string.sub(string,j,j)\
    \ == char then\n        prefixes = { char,\n          string.sub(string,i,j),\n\
    \          prefixes }\n      else\n        break\n      end\n      j = j + 1\n\
    \    end\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefix = {}\n\
    \  local suffix = string\n  while true do\n    table.insert(prefix, suffix:sub(1,\
    \ #prefix))\n    if suffix:sub(#suffix, #suffix) == '' then\n      break\n   \
    \ end\n    suffix = suffix:sub((#prefix) + #suffix)\n  end\n  return prefix\n\
    end", "    local prefixes = {}\n    for i = 1, #string do\n        local prefix\
    \ = ''\n        for j = 1, i do\n            prefix = prefix .. string[j]\n  \
    \      end\n        prefixes[prefix] = true\n    end\n    return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, string.lent do\n    prefixes[string.sub(t,\
    \ i, i)] = true\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ i, j = 1, #string\n  while i <= j do\n    table.insert(prefixes, string[i])\n\
    \    i = i + j\n    j = i - 1\n  end\n  return prefixes\nend", "  local prefix\
    \ = {}\n  local prefix_len = 1\n  for i=1,#string do\n    local char = string[i]\n\
    \    local prefix_char = string.sub(string, i, i)\n    prefix[prefix_char] = true\n\
    \    prefix_len = prefix_len * 2\n  end\n  return prefix, prefix_len\nend", " \
    \ local prefixes = { string }\n  local length = 1\n  while length > 0 do\n   \
    \ local pos = math.min(string.len(string), length)\n    local prefix = string.sub(string,\
    \ 1, pos)\n    table.insert(prefixes, prefix)\n    length = pos + 1\n  end\n \
    \ return prefixes\nend", "    local prefixes = {}\n    for i = 1, #string do prefixes[string.sub(string,1,i)]\
    \ = true end\n    return prefixes\nend", "  local prefixes = { string }\n  local\
    \ pos = 1\n  while pos < #string do\n    prefixes = { prefixes[pos]:sub(1, #prefixes[pos])\
    \ }\n    pos = pos + 1\n  end\n  return prefixes\nend", "  local prefix = { }\n\
    \  for i = 1, #string do\n    local char = string.sub (string, i, i)\n    table.insert\
    \ (prefix, char)\n  end\n  return prefix\nend", "  if string == nil then return\
    \ {} end\n  local function is_prefixed_by(pref, word)\n    for i = 1, #word do\n\
    \      if word[i] == pref then return true end\n    end\n    return false\n  end\n\
    \  local prefix = {}\n  local word = string.gsub(string, '(.-)([^' .. prefix ..\
    \ '^%s]+)', '$1')\n  if prefix ~= {} then\n    if prefix[#prefix] == nil then\
    \ prefix[#prefix] = \"\" end\n    for i = #prefix, 1, -1 do\n      prefix[#prefix]\
    \ = prefix[#prefix] .. word[i]\n    end\n  end\n  -- Find longest prefix\n  local\
    \ max_len = -1\n  for i = 1, #prefix do\n    if #prefix[i] > max_len then\n  \
    \    max_len = #prefix[i]\n    end\n  end\n  if max_len == 0 then return {} end\n\
    \  -- Build prefix dictionary\n  local prefix_dict = {}\n  for i = 1, #prefix\
    \ do\n    prefix_dict[prefix[i]] = true\n  end\n  -- Build result set\n  local\
    \ results = {}\n  for i = 1, #prefix do\n    if prefix_dict[i] then\n      table.insert(results,\
    \ prefix[i])\n    end\n  end\n  return results\nend", "  local prefixes = { }\n\
    \  for i=1,#string do\n    if string[i] ~= '/' then -- The prefix is empty\n \
    \     table.insert(prefixes, string[i])\n    end\n  end\n  return prefixes\nend",
  "  return setmetatable({}, {__index=string})\nend", "  local result = {}\n  local\
    \ prefix = nil\n  for i = 1, #string do\n    if prefix then\n      result = {prefix\
    \ = prefix .. string[i], ...}\n    else\n      prefix = string[i]\n    end\n \
    \ end\n  return result\nend", "  local prefixes = { }\n  for i = 1, #string do\
    \ \n    prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n  end\n  return\
    \ prefixes\nend", "    local prefixes = {}\n    for i = 1, #string do\n      \
    \  table.insert(prefixes, string.sub(string,1,i))\n    end\n    return prefixes\n\
    end", "    local prefixes = { string }\n    repeat\n        local first_prefix\
    \ = prefixes[1]\n        -- Return table of all prefixes from shortest to longest\
    \ of all\n        -- prefixes in the prefixes table\n        prefixes = prefixes:gsub(\"\
    ^\" .. first_prefix, \"\")\n    until not prefixes or #prefixes == 0\n    return\
    \ prefixes\nend", "  local result = {}\n  for _, s in ipairs(string) do\n    result[#result\
    \ + 1] = s\n  end\n  table.sort(result)\n  return result\nend", "  if string ==\
    \ nil then return nil end\n  local prefixes = {}\n  repeat\n    table.insert(prefixes,\
    \ string[1])\n  until not string.sub(1, string.len(string))\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[string.sub(i,\
    \ i)] = true\n  end\n  return prefixes\nend", "  local prefixes = { string.sub('\
    \ ', 1) }\n  while string.len(string) > 1 do\n    table.insert(prefixes, string.sub(string,\
    \ 1, string.len(string) - 1))\n    string = string.sub(string, string.len(string)\
    \ - 1, 1)\n  end\n  return prefixes\nend", "  local prefixes = { string.pre }\n\
    \  repeat\n    prefixes.insert(string.sub, 1, string.len)\n  until string.sub(string,\
    \ 1, string.len) == ''\n  return prefixes\nend", "    local function prefixes(string,\
    \ _len)\n        local ret = {}\n        for i = 1, _len do ret[#ret .. string[i]]\
    \ = true end\n        return ret\n    end\n    local function longest_prefix(string,\
    \ _len)\n        local ret = ''\n        for i = 1, _len do\n            ret =\
    \ string[i] .. ret\n        end\n        return ret\n    end\n    return prefixes(string,\
    \ #string), prefixes(longest_prefix(string, #string), #string)\nend", "  local\
    \ prefix_table = { }\n  for i = 1, string.lengh do\n    prefix_table['' .. string.sub(i,\
    \ 1, i)] = true\n  end\n  return prefix_table\nend", "  local prefixes = {}\n\
    \  local len = #string\n  for i = 1, len do\n    local p = string\n    for j =\
    \ 1, i - 1 do\n      p = string..prefixes[j] -- Concatenate with the prefixes\
    \ of length j\n    end\n    table.insert(prefixes, p)\n  end\n  return prefixes\n\
    end", "  if string == nil then return { } end\n  local all_prefixes = { }\n  local\
    \ prefix_length = 0\n  local last_letter = string[1]\n  local index = 1\n  while\
    \ index <= #string do\n    local letter = string[index]\n    if letter == last_letter\
    \ then prefix_length = prefix_length + 1 end\n    all_prefixes[#all_prefixes +\
    \ 1] = string\n    if letter == last_letter then prefix_length = prefix_length\
    \ + 1 end\n    last_letter = letter\n    index = index + 1\n  end\n  return all_prefixes\n\
    end", "  local prefixes = setmetatable({} or {}, {__index = setmetatable({__index\
    \ = string}, {})})\n  for i = 1, #string do\n    local prefix = string:sub(i,\
    \ i)\n    if prefix == \"\" then\n      prefixes[prefix] = prefix\n    else\n\
    \      prefixes[prefix] = prefixes[prefix] .. prefix\n    end\n  end\n  return\
    \ prefixes\nend", "  local prefixes = terralib.newlist()\n  for i = 1, #string\
    \ do\n    local prefix = string:sub(i, i)\n    prefixes:insert(prefix)\n  end\n\
    \  local longest_prefix = prefixes[#prefixes]\n  local longest_prefix_len = #longest_prefix\n\
    \  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    prefix = prefix\
    \ .. longest_prefix\n    prefixes:insert(prefix)\n    longest_prefix_len = math.max(longest_prefix_len,\
    \ #prefix)\n  end\n  return prefixes\nend", "    local prefixes = {}\n    for\
    \ i = 1, #string do\n        prefixes[string.sub(string,1,i)] = {}\n    end\n\
    \    for i = 1, #string do\n        table.insert(prefixes[string.sub(string,1,i)],\
    \ string.sub(string,i+1,#string))\n    end\n    return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(i,\
    \ #string))\n  end\n  return prefixes\nend", "    local result = {}\n    for letter\
    \ in string.gmatch(string, \"(.-)\") do\n        result[#result + 1] = letter\n\
    \    end\n    return result\nend", "  local prefixes = { }\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", " \
    \  local prefixes = { }\n   for i = 1, #string do\n      local prefix = string[i]\n\
    \      for j = i-1, 1, -1 do\n         local prefix = prefix .. string[j]\n  \
    \       if prefix:sub(1, #prefix) ~= \"\" then\n            prefixes[#prefixes+1]\
    \ = prefix\n            break\n         end\n      end\n   end\n   return prefixes\n\
    end", "  local prefixes = {}\n  for _, v in string.gmatch('(.-)', '$1,') do\n\
    \    prefixes[#prefixes + 1] = v\n  end\n  return prefixes\nend", '    local prefixes
    = {}', "  local prefixes = {}\n  for i = 1, string.lenth do\n    table.insert(prefixes,\
    \ string:sub(i, string.lenth))\n  end\n  return prefixes\nend", "    local prefix\
    \ = {string[1]}\n    for i = 2, #string do\n        local tmp = prefix[#prefix+1]\
    \ or \"\"\n        prefix[#prefix+1] = tmp .. string[i]\n    end\n    return prefix\n\
    end", "  local prefix_table = {}\n  local min_len = #string\n  for i = 1, #string\
    \ do\n    local prefix = string:sub(i, i)\n    if prefix then\n      table.insert(prefix_table,\
    \ prefix)\n    end\n  end\n  -- If min_len is odd, add an extra prefix so we have\
    \ an even number of characters in the string\n  if min_len % 2 == 1 then\n   \
    \ table.insert(prefix_table, \"a\"..(string:sub(1, min_len+1)))\n  end\n  return\
    \ prefix_table\nend", "  local prefixes = { }\n  for _, prefix in ipairs(string:gsub(\"\
    (.-$)\", \"%1\")) do\n    prefixes[prefix] = true\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i=1,#string do\n    table.insert(prefixes,\
    \ string[i])\n  end\n  return prefixes\nend", "    local prefix = {}\n    for\
    \ i = 1, #string do \n        prefix[i] = string[i]\n    end\n    return prefix\n\
    end", "  local prefixes = terralib.newlist()\n  for i = #string, 1, -1 do\n  \
    \  prefixes:insert(string:sub(i, i))\n  end\n  return prefixes\nend", "  local\
    \ prefix_table = {}\n  repeat\n    table.insert(prefix_table, string.sub(1, string.len(string)))\n\
    \  until string.len(string) <= 1\n  return prefix_table\nend", "  local result\
    \ = {}\n  for i = 1, string.len do\n    result[string.sub(string, i, i)] = true\n\
    \  end\n  return result\nend", "    return all_prefixes_iter(string)\nend", " \
    \ -- Initialize table of prefixes by adding empty string to prefix list for each\
    \ letter\n  -- Initialize table of prefixes by adding empty string to prefix list\
    \ for each letter\n  local prefixes = {}\n  -- Initialize prefix length\n  local\
    \ prefix_len = 1\n  -- Loop through input string\n  for i = 1, #string do\n  \
    \  -- Add empty string to prefix list for each letter\n    prefixes[string.sub(string,\
    \ 1, i)] = ''\n    -- Add empty string to prefix list for each letter\n    prefixes[string.sub(string,\
    \ i, i)] = ''\n    -- Update prefix length\n    prefix_len = prefix_len + #string.sub(string,\
    \ 1, i)\n  end\n  return prefixes, prefix_len\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    table.insert(prefixes, string.sub(1, i))\n  end\n\
    \  return prefixes\nend", "    local prefixes = {}\n    for i=string.lenth, 1,\
    \ -1 do\n        prefixes[i] = string\n    end\n    return prefixes\nend", " \
    \ local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string:sub(1,\
    \ i)\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local prefix_length\
    \ = 1\n  for i = 1, #string do\n    local prefix = string[1:i]\n    prefixes[prefix]\
    \ = true\n    prefix_length = prefix_length + 1\n  end\n  table.sort(prefixes,\
    \ function(t1, t2)\n    return #t1 < #t2 and\n           #t1 < #prefix and\n \
    \          #t2 < #prefix and\n           t1 <= t2\n  end)\n  return prefixes\n\
    end", "  return table.new_from_table(_G.string.gmatch(\"(\" .. string .. \")\"\
    , \"([^\\\\r]+)\"..\"([^\\\\r]+)\")..\"([^\\\\r]+)\"))\nend", "  local prefixes\
    \ = {}\n  for i, c in ipairs(string) do\n    prefixes[i] = c\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local suffixes = string.gsub(string,\
    \ \"[^\"..string:gsub(\"^[^\"]\", \"\"):gsub(\"^%{\", \"\"):gsub(\"%{%{\", \"\
    %\")..\"}%}\", \"\"):gsub(\"^%\", \"%{\")..\"}\", \"\", \"g\")\n  suffixes = suffixes\
    \ or \"\"\n  local longest_suffix = suffixes:match(\"^(.*)$\")\n  local shortest_prefix\
    \ = string:gsub(\"^%%(.*)\", \"%1\")\n  local prefix_length = shortest_prefix:len()\n\
    \  for i = 1, #suffixes do\n    prefixes[prefixes:len()] = shortest_prefix:sub(1,\
    \ prefix_length + i - 1)\n  end\n  if longest_suffix ~= '' then\n    prefixes[#prefixes]\
    \ = longest_suffix\n  end\n  return prefixes\nend", "  local function is_prefix(x)\n\
    \    return string.sub(x,1,1) == x and\n           string.sub(x,2,#x) == ''\n\
    \  end\n  local function prefix_len(x)\n    return string.len(string.sub(x,1,#x))\n\
    \  end\n  local prefixes = terralib.newlist()\n  local max_len = -1\n  for i =\
    \ 1, #string do\n    if is_prefix(string, i) then\n      local prefix_len = prefix_len(string)\n\
    \      if max_len < prefix_len then\n        max_len = prefix_len\n      end\n\
    \      prefixes:insert(string.sub(string,1,i))\n    end\n  end\n  prefixes:insert(string)\n\
    \  return prefixes, max_len\nend", "  local all_prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(all_prefixes, string:sub(i, #string))\n  end\n  return\
    \ all_prefixes\nend", "  local prefixes = { }\n  local i = 1\n  for i = 1, #string\
    \ do\n    prefixes[string.sub(string,i,i)] = true\n    i = i + 1\n  end\n  return\
    \ prefixes\nend", "    local prefixes = { string }\n    local chars = string.gsub(string.gsub(string,\
    \ '(.-)', '%(%1)'), '(..)', '\\1')\n    local prefix = chars[1]\n    for i=2,#chars\
    \ do\n        prefixes[prefix] = prefixes[prefix] .. chars[i]\n    end\n    return\
    \ prefixes\nend", "  local prefixes = terralib.newlist()\n  for i = 1, string.size\
    \ do\n    prefixes:insert(string.sub)(string, 1, i)\n  end\n  return prefixes\n\
    end", "  local prefix_table = {}\n  local longest, shortest = #string, string[1]\n\
    \  for i=1, longest do prefix_table[i] = string[1:i] end\n  -- Create table of\
    \ all possible prefixes of shortest to longest input\n  for i=1, shortest do\n\
    \    table.insert(prefix_table, string[1:i])\n  end\n  return prefix_table\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[string.sub(i, i)]\
    \ = true\n  end\n  return prefixes\nend", "  local prefixes = terralib.newlist()\n\
    \  for i = 1, #string do\n    prefixes:insert(string.sub(string,1,i))\n  end\n\
    \  table.sort(prefixes)\n  return prefixes\nend", "  local prefix_table = {}\n\
    \  local longest, shortest, longest1, shortest1, longest2, shortest2 = string.gsub(string,\
    \ \"^(.-)$\", function(prefix)\n    table.insert(prefix_table, prefix)\n  end)\n\
    \  if longest == shortest1 then\n    table.insert(prefix_table, longest2)\n  end\n\
    \  if longest == shortest2 then\n    table.insert(prefix_table, longest1)\n  end\n\
    \  if shortest == longest1 then\n    table.insert(prefix_table, shortest2)\n \
    \ end\n  if shortest == longest2 then\n    table.insert(prefix_table, shortest1)\n\
    \  end\n  return prefix_table\nend", "  local prefixes = {}\n  local i = #string\n\
    \  for _ in string.gmatch(string, \"(.-)\"..string.char(i)) do\n    prefixes[#prefixes\
    \ + 1] = string.sub(_, 2, -1)\n    i = i - 1\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  local i = 0\n  for i = 1, #string do\n    prefixes[i]\
    \ = string\n  end\n  for i = 1, #string do\n    for j = 1, #string do\n      if\
    \ j > i then\n        if string.sub(i, j, string) == string.sub(i, j + 1, string)\
    \ then\n          table.insert(prefixes, string.sub(i, 1, string))\n        end\n\
    \      end\n    end\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local shortest = 0\n  local longest = 0\n  for i = 1, #string do\n    longest\
    \ = i\n    longest = #string\n    local _, i, longest = longest_prefix(string,\
    \ i)\n    if longest > shortest then\n      shortest = longest\n    end\n  end\n\
    \  for i = 1, shortest do\n    prefixes[#prefixes + 1] = string[i]:sub(1,i)\n\
    \  end\n  return prefixes\nend", "    local prefixes = {}\n    local shortest\
    \ = string\n    local longest = string\n    repeat\n        shortest = prefixes[#prefixes+1]..shortest\n\
    \        longest = prefixes[#prefixes+1]..longest\n    until shortest:sub(1,1)\
    \ ~= 'a'\n    repeat\n        prefixes[#prefixes+1] = shortest:sub(1,#shortest)\n\
    \        shortest = shortest:sub(1,#shortest+1)\n    until longest == ''\n   \
    \ return prefixes, longest\nend", "\tlocal prefixes = { string }\n\tlocal length\
    \ = string.len(string)\n\tlocal i = 1\n\twhile i <= length do\n\t\tprefixes[string.sub(string,\
    \ 1, i)] = true\n\t\ti = i * 2\n\tend\n\treturn prefixes\nend", "    local prefixes\
    \ = {}\n    for i = 1,#string do\n        table.insert(prefixes, string[1:i])\n\
    \    end\n    return prefixes\nend", "  local prefix = {}\n  local suffix = {}\n\
    \  local i, j = 1, #string\n  while i <= j do\n    if string[i] == string[j] then\n\
    \      table.insert(prefix, string[i])\n      i = i + 1\n      j = j + 1\n   \
    \   while i <= j do\n        if string[i] ~= string[j] then\n          table.insert(suffix,\
    \ string[i])\n          i = i + 1\n          break\n        end\n        i = i\
    \ + 1\n      end\n    else\n      j = j - 1\n    end\n  end\n  if #prefix > 0\
    \ then\n    table.insert(suffix, string[i])\n  end\n  return { prefix, suffix\
    \ }\nend", "  return table.concat(\n    unpack(\n      string.gmatch(string, \"\
    (.-)%%(%d+)\")))\nend", "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes,\
    \ string[i])\n  end\n  table.sort(prefixes, function(a, b)\n    return #a == #b\
    \ and\n           #a == 1 or #a > #b or\n           #b == 1 or #b > #a\n  end)\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  local prefix = string:sub(1, i)\n    table.insert(prefixes, prefix)\n  end\n\
    \  return prefixes\nend", "  local prefixes = terralib.newlist()\n  for i = 1,\
    \ #string do\n    prefixes:insert(string[i - 1])\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do prefixes[i] = string[i] end\n  return\
    \ prefixes\nend", "  local table = {}\n  repeat\n    table.insert(string, string[1])\n\
    \  until string[1] ~= 'z'\n  return table\nend", "  return string.gmatch(string,\
    \ \"([^\" .. _luci.http.formvalue(\n    _uci:get(_uci.section,\n      {'prefix',\
    \ 'prefix_len'}\n    )\n  ) .. \"]+)\") or {}\nend", "  local prefixes = {}\n\
    \  for i = 1, string.len do\n    prefixes[string.sub(i, i)] = true\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local prefix = string\n  local char\
    \ = string.sub(string, 1, 1)\n  while char ~= '' do\n    table.insert(prefixes,\
    \ prefix)\n    prefix = prefix .. char\n    char = string.sub(string, 1, 2)\n\
    \  end\n  return prefixes\nend", "  return { string}\nend", "    local prefix_table\
    \ = nil\n    for i = 1, #string do\n        if prefix_table == nil then\n    \
    \        prefix_table = {}\n        end", "  local prefixes = {}\n  local shortest\
    \ = 1\n  local longest = #string\n  while shortest <= longest do\n    local substring\
    \ = string[shortest]\n    local current_length = shortest\n    while current_length\
    \ + 1 < #string and string[current_length + 1] == substring do\n      current_length\
    \ = current_length + 1\n    end\n    prefixes[substring] = true\n    shortest\
    \ = current_length + 1\n  end\n  return prefixes\nend", "  return {}\nend", " \
    \ local prefixes = {}\n  for i = 1, #string do\n    if string.sub(i, i, #string)\
    \ == string then\n      prefixes[#prefixes + 1] =\n        string.sub(i, 1, i\
    \ - 1)\n    end\n  end\n  return prefixes\nend", "  local prefix = { string }\n\
    \  repeat\n    local last = prefix[#prefix]\n    prefix[#prefix] = nil\n    table.insert(prefix,\
    \ last)\n  until last\n  return prefix\nend", "    local prefixes = { }\n    local\
    \ index = 1", "    local prefixes = {}\n    local pos = 1\n    for i=1,#string\
    \ do\n        prefixes[pos] = string[i]\n        pos = pos + 1\n    end\n    return\
    \ prefixes\nend", "  local function prefixes(prefix)\n    if prefix == \"\" then\
    \ return nil end\n    local _, index = prefix:find(prefix, \"..\")\n    if index\
    \ == nil then\n      return {prefix}\n    else\n      return prefixes(prefix ..\
    \ string[index + 1])\n    end\n  end\n  return prefixes(string)\nend", "  local\
    \ prefixes = { }\n  local i = 0\n  while i <= #string do\n    prefixes[string.sub(string,\
    \ 1, i)] = string.sub(string,\n                                              \
    \  i+1,\n                                                #string)\n    i = i+1\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  return prefixes\nend", "    local prefixes\
    \ = { string[1] }\n    for i = 2, #string do\n        table.insert(prefixes, string[i]\
    \ .. string[1])\n    end\n    return prefixes\nend", "   if #string <= 0 then\
    \ return {} end\n   if #string == 1 then return {string} end\n   local prefixes\
    \ = all_prefixes(string[1:end-1]) or {}\n   prefixes[#prefixes + 1] = string\n\
    \   return prefixes\nend", "  -- Build map of prefixes\n  local prefix_map = {}\n\
    \  for i=1,string.lenth do\n    prefix_map[string.sub(i,i)] = true\n  end\n  --\
    \ Return list of all prefixes in input string\n  local prefix_list = terralib.newlist()\n\
    \  for k, v in pairs(prefix_map) do\n    prefix_list[#prefix_list + 1] = k\n \
    \ end\n  return prefix_list\nend", "    local ret = {}\n    for i = 1, #string\
    \ do\n        if string.sub(string,i,#string) == '' then break end\n        ret[#ret+1]\
    \ = string.sub(string,i,i)\n    end\n    return ret\nend", "  local prefixes =\
    \ { }\n  for i = 1, #string do\n    local length = #string\n    repeat\n     \
    \ length = length - 1\n      table.insert(prefixes, string:sub(1, length))\n \
    \   until length > 0\n  end\n  return prefixes\nend", "    local prefixes = {}\n\
    \    local prefix = string\n    while true do\n        table.insert(prefixes,\
    \ prefix)\n        prefix, prefix = prefix:gsub(\"^%s*\", \"\")\n        if prefix\
    \ == \"\" then\n            break\n        end\n    end\n    return prefixes\n\
    end", "  return function(prefix)\n    for _, _ in string.gmatch(string, \"(.-)\"\
    ..prefix..\"(.-)*\") do\n      prefix = prefix .. string.sub(_, 1, string.len(_)\
    \ - 2)\n    end\n    return prefix\n  end\nend", "    local result = {}\n    for\
    \ i = 1, #string do\n        result[#result + 1] = string[i]\n    end\n    return\
    \ result\nend", "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes,\
    \ string:sub(i, i))\n  end\n  return prefixes\nend", "  local prefixes = table.new(string)\n\
    \  local longest = string.len(string)\n  local shortest = 1", "    local prefix\
    \ = {}\n    local i = #string\n    while i do\n        prefix[#prefix + 1] = string.sub(string,\
    \ 1, i)\n        i = i - 1\n    end\n    return prefix\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]:gsub('(.-)%1',\
    \ '%1')\n  end\n  return prefixes\nend", "  local prefixes, stack = {}, {}\n \
    \ for i = 1, #string do\n    table.insert(stack, {i, string.sub(i, i)})\n    table.insert(prefixes,\
    \ i)\n  end\n  while (#stack) > 0 do\n    local _, prefix = stack:pop()\n    for\
    \ i = 1, #string do\n      if string.sub(i, i) == prefix then\n        table.insert(stack,\
    \ {i, string.sub(i, i)})\n        table.insert(prefixes, i)\n      end\n    end\n\
    \  end\n  return prefixes\nend", "  return string\n   :gsub(\"([^\" .. string.char(string.byte('a'))\
    \ .. \"])\" .. string, '\\1..')\n   :gsub(\"([^\" .. string.char(string.byte('A'))\
    \ .. string.char(string.byte('Z')) .. \"])\" .. string, '\\1..')\n   :gsub(\"\
    ([^\" .. string.char(string.byte('A')) .. string.char(string.byte('a')).. string.char(string.byte('Z'))\
    \ .. string.char(string.byte('a')).. string.char(string.byte('Z')) .. \"])\" ..\
    \ string, '\\1..')\n   :gsub(\"([^\" .. string.char(string.byte('A')) .. string.char(string.byte('A'))..\
    \ string.char(string.byte('a')) .. string.char(string.byte('Z')) .. string.char(string.byte('A'))..\
    \ string.char(string.byte('Z')) .. \"])\" .. string, '\\1..')\n   :gsub(\"([^\"\
    \ .. string.char(string.byte('A')) .. string.char(string.byte('A')).. string.char(string.byte('A'))..\
    \ string.char(string.byte('a')) .. string.char(string.byte('a')) .. string.char(string.byte('a'))\
    \ .. string.char(string.byte('Z')) .. string.char(string.byte('A')).. string.char(string.byte('Z'))..\
    \ string.char(string.byte('A')).. string.char(string.byte('Z')).. string.char(string.byte('a'))..\
    \ string.char(string.byte('a')) .. string.char(string.byte('Z')).. string.char(string.byte('A'))..\
    \ string.char(string.byte('a')) .. string.char(string.byte('A')).. string.char(string.byte('Z'))..\
    \ string.char(string.byte('A')).. string.char(string.byte('a')).. string.char(string.byte('Z'))..\
    \ string.char(string.byte('A')).. string.char(string.byte('a')).. string.char(string.byte('A'))..\
    \ string.char(string.byte('Z')).. string.char(string.byte('A')).. string.char(string.byte('a'))..\
    \ string.char(string.byte('A')).. string.char(string.byte('a')).. string.char(string.byte('Z'))..\
    \ string.char(string.byte('A')).. string.char(string.byte('a')).. string.char(string.byte('Z'))..\
    \ string.char(string.byte('A')).. string.char(string.byte('a')).. string.char(string.byte('Z'))..\
    \ string.char(string.byte('A')).. string.char(string.byte('a')).. string.char(string.byte('A'))..\
    \ string.char(string.byte('Z')).. string.char(string.byte('A')).. string.char(string.byte('a'))..\
    \ string.char(string.byte", "  local prefixes = nil\n  if string ~= nil then\n\
    \    prefixes = string\n  else\n    prefixes = { string }\n  end\n  for i = #prefixes,\
    \ 1, -1 do\n    for j = 1, #prefixes do\n      local prefix = prefixes[#prefixes]\n\
    \      prefixes[#prefixes] = prefix .. prefixes[j]\n      prefixes[j] = nil\n\
    \    end\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    table.insert(prefixes, string[i]:sub(1, #string[i]))\n  end\n\
    \  return prefixes\nend", "    local prefixes = {}\n    for i = 1, string.lenth\
    \ do\n        local prefix = string.sub(i, i)\n        if prefix == \"\" then\n\
    \            prefix = prefix\n        else\n            prefixes[prefix] = true\n\
    \        end\n    end\n    return prefixes\nend", "  if string == '' then return\
    \ {} end\n  local result = {}\n  for i = 1, #string do\n    table.insert(result,\
    \ string[1:i])\n  end\n  return result\nend", "  if string:len() <= 1 then\n \
    \   return { string }\n  end\n  local ret = {}\n  for i = 1, string:len() do\n\
    \    table.insert(ret, string:sub(1, i))\n  end\n  return ret\nend", "  local\
    \ prefix = {}\n  local curr = string\n  while true do\n    table.insert(prefix,\
    \ curr)\n    local i = #curr\n    local last\n    if i then\n      last = curr:sub(1,\
    \ i - 1)\n    end\n    local c = last\n    if not c then\n      return prefix\n\
    \    end\n    curr = curr:sub(i)\n    table.insert(prefix, c)\n  end\nend", '  if
    string == nil then return nil end', "  local prefixes = { string.sub(string, 1,\
    \ 1) }\n  local i = 2\n  while string.len(string) > i do\n    prefixes = { prefixes[1],\
    \ string.sub(string, i, i) }\n    i = i + 1\n  end\n  return prefixes\nend", " \
    \ local prefix = {string}\n  for i = 1, #string do\n    table.insert(prefix, string:sub(1,\
    \ i - 1))\n  end\n  table.sort(prefix)\n  return prefix\nend", "  -- Return table\
    \ of all prefixes from shortest to longest of the input string\n  -- >>> all_prefixes('abc')\n\
    \  -- {'a', 'ab', 'abc'}\n  local prefix = {}\n  local last_prefix = prefix\n\
    \  for i = 1, #string do\n    local prefix = prefix\n    local char = string[i]\n\
    \    for j = 1, #string do\n      if j < i then\n        prefix[#prefix+1] = string[j]\n\
    \      end\n      if prefix[#prefix+1] == char then\n        prefix = prefix[#prefix+1]\n\
    \        last_prefix = prefix\n      else\n        last_prefix = prefix\n    \
    \  end\n    end\n    if last_prefix ~= prefix then\n      prefix[#prefix+1] =\
    \ char\n    end\n  end\n  return prefix\nend", "    local prefixes = {}\n    local\
    \ index = 1\n    repeat\n        table.insert(prefixes, string[index])\n     \
    \   index = index + 1\n    until index > #string\n    return prefixes\nend", " \
    \ local prefix = {}\n  for i = 1, #string do\n    table.insert(prefix, string:sub(1,\
    \ i))\n  end\n  return prefix\nend", "  local result = {}\n  for i = 1, string.lenth\
    \ do\n    table.insert(result, string.prefix[i])\n  end\n  return result\nend",
  "  local prefixes = {}\n  for i, c in ipairs(string) do\n    table.insert(prefixes,\
    \ string.sub(c, i))\n  end\n  table.sort(prefixes, function(x, y)\n    return\
    \ #x == #y\n  end)\n  return prefixes\nend", "  local prefix_table = {}\n  local\
    \ prev_char = string[1]\n  for i = 2, #string do\n    prefix_table[prev_char]\
    \ = string[i]\n    prev_char = prefix_table[prev_char]\n  end\n  return prefix_table\n\
    end", "  if #string < 2 then return {string} end\n  local prefixes = {}\n  prefixes[string[1]]\
    \ = string\n  for i = 2, #string do\n    local new_prefix = prefixes[string[i]]\n\
    \    table.insert(prefixes, new_prefix)\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for _, c in pairs(string) do\n    for _, p in pairs(prefixes)\
    \ do\n      if p:sub(1, #c) == c then\n        table.insert(prefixes, p)\n   \
    \   end\n    end\n  end\n  return prefixes\nend", "   local prefixes = { string\
    \ }\n   for i = 2, #string do\n      prefixes[#prefixes + 1] = tostring(prefixes[#prefixes\
    \ + 1]) .. string[i]\n   end\n   return prefixes\nend", "    local prefixes =\
    \ {}\n    for i = 1, #string do\n        prefixes[#prefixes + 1] = string.sub(string,\
    \ 1, i - 1)\n    end\n    return prefixes\nend", "  local prefixes = setmetatable({},\
    \ {__index = set}) -- Prefix dictionary\n  local i = 1 -- Index of current character\
    \ of string\n  while i <= #string do\n    prefixes[string.sub(i, i)] = true --\
    \ Add current character as prefix to prefixes table\n    i = i .. 1 -- Move i\
    \ to next character position\n  end\n  return prefixes\nend", "  return function(prefix)\n\
    \    if string.sub(string, 1, prefix:len()) == prefix then\n      return { prefix\
    \ }\n    end\n    for i = 1, #prefix do\n      local subprefix = prefix:sub(i,\
    \ i)\n      if subprefix ~= \"\" then\n        local subprefix_prefix_dict = all_prefixes(subprefix)\n\
    \        if subprefix_prefix_dict ~= nil then\n          local subprefix_prefix_dict_concat\
    \ = { prefix }\n          table.concat(subprefix_prefix_dict, subprefix_prefix_dict_concat)\n\
    \          table.insert(result, subprefix_prefix_dict_concat)\n        end\n \
    \     end\n    end\n  end\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string.sub(i, 1))\n  end\n  return prefixes\n\
    end", "  if string == '' then\n    return {}\n  end\n  local prefix = {string[1]}\n\
    \  local len = #string\n  for i = 2, len do\n    table.insert(prefix, string[i])\n\
    \  end\n  return prefix\nend", "  local prefixes = {}\n  for i = 1, #string do\n\
    \    local prefix = string[1:i]\n    if prefix == \"\" then prefix = \".\" end\n\
    \    table.insert(prefixes, prefix)\n  end\n  return prefixes\nend", "    local\
    \ prefixes = {}\n    for i = 1, #string do\n        prefixes[#prefixes + 1] =\
    \ \"\"\n    end\n    for i = #string, 1, -1 do\n        prefixes[#prefixes + 1]\
    \ = (string[i] .. prefixes[#prefixes])\n    end\n    return prefixes\nend", " \
    \   local prefixes, prefix\n    local string_lower = string:lower()\n    prefixes\
    \ = {}\n    prefix = {}", "  local prefixes = terralib.newlist()\n  repeat\n \
    \   prefixes:insert(string.sub(string, 0, string.len(string)))\n    string = string.sub(string)\n\
    \  until not string\n  return prefixes\nend", "  local function prefix_len(prefix)\n\
    \    return string.len(prefix) - string.len(sub)\n  end", "  local prefixes =\
    \ setmetatable({}, {__mode=\"v\"})\n  local length = #string\n  for i = 1, length\
    \ do\n    local prefix = string:sub(1, i)\n    prefixes[prefix] = prefix\n  end\n\
    \  return prefixes\nend", '  local result = {}', '    local prefixes = {}', " \
    \ local prefixes = {}\n  for i = 1, #string do\n    if i ~= 1 then prefixes[#prefixes+1]\
    \ = string[i] end\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ prefix = \"\"\n  for i = 1, string.len do\n    prefix = prefix .. string[i]\n\
    \    prefixes[prefix] = true\n  end\n  return prefixes\nend", "  return _G._prefixes_table[string]\
    \ or {}\nend", "    local result = {}\n    for i = 1, #string do\n        table.insert(result,\
    \ string.sub(s, i, i))\n    end\n    return result\nend", "  local prefixes =\
    \ {}\n  local i = #string\n  while i ~= 0 do\n    prefixes[#prefixes + 1] = string[i]\n\
    \    i = i - 1\n  end\n  return prefixes\nend", "  local prefix_table = {}\n \
    \ local prefix_length = 1\n  repeat\n    prefix_table[string] = string\n    prefix_length\
    \ = prefix_length + 1\n    local new_string = string\n    for i = 1, prefix_length\
    \ do\n      new_string = new_string .. string\n    end\n    string = new_string\n\
    \  until string == ''\n  return prefix_table\nend", "  local prefix_table = {\
    \ }\n  local prefix_count = 0\n  for i = 1, #string do\n    prefix_table['' ..\
    \ tostring(string[i])] = prefix_count\n    prefix_count = prefix_count + 1\n \
    \ end\n  return prefix_table\nend", "  if string:len() == 0 then\n    return {}\n\
    \  end\n  local table = {}\n  for i = 1, string:len() - 1 do\n    local prefix\
    \ = string.sub(string, 1, i)\n    table.insert(table, prefix)\n  end\n  table.insert(table,\
    \ string.sub(string))\n  return table\nend", "  -- base case\n  if string == ''\
    \ then\n    return {}\n  else\n    -- all prefixes of the prefix string\n    local\
    \ prefixes = {}\n    -- start at first letter in the string\n    local first_letter\
    \ = string:sub(1, 1)\n    -- recurse the string\n    local remaining_string =\
    \ string\n    -- remove first letter\n    remaining_string = remaining_string:sub(2)\n\
    \    -- recurse the remaining string\n    while remaining_string ~= '' do\n  \
    \    -- add prefix of the current letter\n      table.insert(prefixes, first_letter)\n\
    \      -- remove current letter\n      remaining_string = remaining_string:sub(1,\
    \ 1)\n    end\n    -- add remaining string\n    table.insert(prefixes, remaining_string)\n\
    \    return prefixes\n  end\nend\n</code>\nAnd then we can just use it in any\
    \ way we want...\n<code>", '    local prefixes = {}', "  local prefixes = {}\n\
    \  for _, symbol in string.gmatch(\"(.-)$\", \"%S+\") do\n    table.insert(prefixes,\
    \ symbol)\n  end\n  return prefixes\nend", "  if string == nil then return end\n\
    \  local all_prefixes = {}\n  local len = #string\n  local pos\n  for pos = 1,len\
    \ do\n    local prefix = string\n    local i = pos\n    while i > 0 do\n     \
    \ prefix = prefix .. string[i]\n      i = i - 1\n    end\n    all_prefixes[prefix]\
    \ = true\n  end\n  return all_prefixes\nend", "  local prefix_table = setmetatable({},\
    \ {__index = _G})\n  for i = 1, #string do\n    table.insert(prefix_table, string[i])\n\
    \  end\n  return prefix_table\nend", "  local result = {}\n  for _, prefix in\
    \ ipairs(string.gmatch(\"^(.-):(.-):(.-)$\") do\n    table.insert(result, prefix..'/')\n\
    \  end)\n  table.sort(result)\n  return result\nend", "  local prefixes = {}\n\
    \  repeat\n    table.insert(prefixes, string);\n  until #string == 1 or string.sub(string,\
    \ 1, #string) == '' or string.sub(string, 1, #string) == ''\n  return prefixes\n\
    end", "  local result = {}\n  for i = 1, #string do\n    local prefix = string\n\
    \    prefix = prefix .. string[#prefix]\n    result[#result + 1] = prefix\n  end\n\
    \  return result\nend", "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes,\
    \ string[1:i])\n  end\n  return prefixes\nend", "  local prefixes = { }\n  for\
    \ i = 1, #string do\n    prefixes[string.sub(string,1,i)] = true\n  end\n  return\
    \ prefixes\nend", "    local prefixes = {}\n    for i = 1, #string do\n      \
    \  local prefix = string:sub(i, i)\n        prefixes[#prefixes + 1] = prefix\n\
    \    end\n    return prefixes\nend", "  local prefixes = terralib.newlist()\n\
    \  local start = 0\n  local i = -1\n  while start < #string do\n    i = i + 1\n\
    \    prefixes[#prefixes + 1] = string[start + i]\n    start = start + i\n  end\n\
    \  return prefixes\nend", "  local results = {}\n  for prefix in string.gmatch(\"\
    (.-)$\", \"%D+\") do\n    results[#results + 1] = prefix\n  end\n  return results\n\
    end", "  local prefix_dict = {}\n  local longest_prefix = nil\n  for i = 1, #string\
    \ do\n    local prefix = string:sub(i, i)\n    prefix_dict[prefix] = true\n  \
    \  if longest_prefix ~= nil and #longest_prefix < #prefix then\n      prefix_dict[longest_prefix]\
    \ = true\n    end\n    if longest_prefix == nil then\n      longest_prefix = prefix\n\
    \    end\n  end\n  return prefix_dict\nend", "  local result = {}\n  for i = 1,\
    \ #string do\n    local prefix = string\n    while prefix and prefix:sub(1, #prefix)\
    \ ~= '' and prefix ~= '.' do\n      prefix = prefix:sub(2)\n    end\n    result[#result\
    \ + 1] = prefix\n  end\n  return result\nend", "    local prefixes = {}\n    local\
    \ index = #string\n    local length = 0\n    while index > 0 do\n        prefixes[#prefixes\
    \ + 1] = string[index - length]\n        index = index - 1\n        length = length\
    \ + 1\n    end\n    return prefixes\nend", "    local prefixes = setmetatable({},\
    \ { __index = {} })\n    for i = 1, #string do\n        prefixes[string.sub(string,\
    \ 1, i)] = true\n    end\n    return prefixes\nend", "  local prefixes = {}\n\
    \  local max_len = #string - 1\n  for idx = 1, max_len do\n    table.insert(prefixes,\
    \ string:sub(1, idx))\n  end\n  return prefixes\nend", "    local prefixes = {}\n\
    \    for i = 1, #string do\n        prefixes[#prefixes + 1] = string[1:i]\n  \
    \  end\n    return prefixes\nend", "  local prefixes = setmetatable({}, {__index\
    \ = setmetatable({}, {__gc = function() return false end})})\n  \n  for i = 1,\
    \ string.len + 1 do\n    prefixes.add(string.sub(i, i))\n  end\n  \n  return prefixes\n\
    end", "    local prefixes = {}\n    for i = 1, #string do\n        table.insert(prefixes,\
    \ string[i])\n        if string[i] == '.' then\n            prefixes[#prefixes\
    \ + 1] = string[i]\n        end\n    end\n    return prefixes\nend", "  local\
    \ result = {}\n  local pos = 1\n  while true do\n    pos = string.find(string,\
    \ \".\", pos)\n    if pos == nil then\n      break\n    end\n    result[#result\
    \ + 1] = string.sub(string, 1, pos)\n    pos = pos + 1\n  end\n  return result\n\
    end", "  local prefixes = {}\n  for i = 1, string.lent do\n    table.insert(prefixes,\
    \ string.sub(i, i, string.len))\n  end\n  return prefixes\nend", "  local prefixes\
    \ = { }\n  local max_length = 0\n  for i = 1, string.lenght do\n    local prefix\
    \ = string.sub(i, 1, i)\n    local prefix_length = prefix:lenght\n    prefixes[prefix]\
    \ = prefix .. string.sub(string, i + 1, i + prefix_length)\n    max_length = math.max(max_length,\
    \ prefix_length)\n  end\n  return prefixes, max_length\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    local letter = string[i]\n    local prefixes\
    \ = { prefix .. letter }\n    for j = i + 1, #string do\n      local letter2 =\
    \ string[j]\n      if letter ~= letter2 then\n        prefixes[#prefixes + 1]\
    \ = '' .. letter .. letter2\n      end\n    end\n    prefixes[#prefixes + 1] =\
    \ ''\n    table.insert(prefixes, prefix)\n  end\n  return prefixes\nend\n</cell>\n\
    <cell>", "    local prefixes = {}\n    for i = 1, #string do\n        prefixes[string.sub(i,\
    \ i)] = true\n    end\n    return prefixes\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
