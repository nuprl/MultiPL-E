name: HumanEval_43_pairs_sum_to_zero
language: lua
prompt: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
  \ true if there are two distinct elements in the table that\n-- sum to zero, and\
  \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
  \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
  \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
  -- false\nlocal function pairs_sum_to_zero(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
  \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
  \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
  \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
  \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
  \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local res = {}\n  for i = 1, #l do\n    local pair = l[i]\n    res[pair]\
    \ = {}\n    local sum = 0\n    for _, v in ipairs(pair) do sum = sum + v end\n\
    \    res[pair] = sum == 0\n  end\n  return #res == 1\nend", "\tlocal s, c = 0,\
    \ {}\n\tfor _, v in pairs(l) do\n\t\tc[s] = v\n\t\ts = s + v\n\tend\n\tlocal d\n\
    \tfor i = 1, #c do\n\t\tif c[i - 1] == c[i] then\n\t\t\td = false\n\t\t\tbreak\n\
    \t\tend\n\tend\n\treturn d\nend", "  local seen = {}\n  local ln = #l\n  if ln\
    \ == 1 then\n    return l[1] == 0\n  end\n  for i = 1, ln do\n    seen[#seen+1]\
    \ = l[i]\n  end\n  for i = 1, ln do\n    for j = 1, ln do\n      if seen[j] >=\
    \ 0 then\n        seen[j] = seen[j] + seen[i]\n        seen[i] = 0\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  for i, v in ipairs(l)\
    \ do\n    if i == 1 then\n      -- We need another pair to test the first pair.\n\
    \      -- We need another pair to test the second pair.\n      return false\n\
    \    end\n    local n = v\n    local m = l[i - 1]\n    if m == 0 and n > 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  return not table.unique(unpack(l,\
    \ function(a, b)\n    return (a >= 0) == (b >= 0)\n  ))\nend", "  local sum, pairs\
    \ = {}, {}\n  for key, value in pairs(l) do\n    table.insert(sum, value)\n  \
    \  table.insert(pairs, key)\n  end\n  local count = #sum\n  if count == 1 then\n\
    \    return false\n  end\n  while #pairs > 1 do\n    local i = math.random(#pairs)\n\
    \    local k = pairs[i]\n    local v = sum[i]\n    if v == 0 then\n      return\
    \ false\n    end\n    sum[i] = sum[k] - v\n    pairs[i] = k\n  end\n  return true\n\
    end", "  local result = true\n  local i = 1\n  while i <= #l do\n    local element\
    \ = l[i]\n    if element == 0 then\n      return false\n    end\n    if result\
    \ then\n      local total = 0\n      local j = 1\n      while j <= #l do\n   \
    \     if i == j then\n          total = total + 1\n        else\n          total\
    \ = total + l[j]\n        end\n        j = j + 1\n      end\n      if total <\
    \ 0 then\n        result = false\n      end\n    end\n    i = i + 1\n  end\n \
    \ return result\nend", "  local l2 = {}\n  for i = 1, #l do\n    table.insert(l2,\
    \ l[i])\n  end\n  local sum = 0\n  local count = 0\n  local v = nil\n  for i =\
    \ 1, #l2 do\n    v = l2[i]\n    if v == 0 then break end\n    sum = sum + v\n\
    \    count = count + 1\n  end\n  if count == 1 then\n    return false -- only\
    \ one non-zero element, so pairs are distinct\n  end\n  if sum == 0 then return\
    \ false end\n  if #l ~= #l2 then return false end\n  return true\nend", "  local\
    \ n = 1\n  local s = nil\n  for i, v in ipairs(l) do\n    local t = n * v\n  \
    \  if s == nil then\n      s = t\n    else\n      s = s + t\n    end\n    n =\
    \ n - 1\n  end\n  return s == 0\nend", "  local i = 1\n  local k\n  for k in pairs(l)\
    \ do\n    i = i + 1\n    if i > k then\n      i = i - k\n      return false\n\
    \    end\n  end\n  return true\nend", "  local pairs = util.make_pairs(l)\n  local\
    \ result = {false}\n  for i = 1, #pairs do\n    local v = pairs[i]\n    for j\
    \ = i + 1, #pairs do\n      if v + pairs[j] == 0 then\n        result[#result+1]\
    \ = true\n        break\n      end\n    end\n  end\n  return #result == 0\nend",
  "  local pairs = {}\n  for i,v in ipairs(l) do\n    table.insert(pairs, v)\n   \
    \ table.insert(pairs, -v)\n  end\n  table.sort(pairs)\n  return #pairs == 0 and\
    \ pairs[1] or false\nend", "    local s = nil\n    for _, v in ipairs(l) do\n\
    \        if s == nil then\n            s = v\n        elseif s == 0 then\n   \
    \         return false\n        else\n            s = s - v\n            if s\
    \ == 0 then\n                return true\n            end\n        end\n    end\n\
    \    return false\nend", "    local num = {}\n    for i=1, #l do\n        local\
    \ v = l[i]\n        if not num[v] then\n            num[v] = 1\n        else\n\
    \            num[v] = num[v] + 1\n        end\n    end\n    for v in pairs(num)\
    \ do\n        if num[v] > 1 then\n            return false\n        end\n    end\n\
    \    return true\nend", "  local pairs = setmetatable({}, {__mode='k'})\n  for\
    \ i, v in pairs(l) do\n    pairs[v] = true\n  end\n  return #pairs == 0\nend",
  "    -- check if there are two distinct elements that sum to zero\n    for i = 1,\
    \ #l do\n        if l[i] ~= 0 then\n            if l[i] == l[i - 1] then\n   \
    \             return false\n            else\n                return true\n  \
    \          end\n        end\n    end\nend", "   assert(type(l) == 'table')\n \
    \  local sum = 0 \n   for k, v in pairs(l) do \n      if type(v) ~= 'number' then\
    \ \n         return false \n      end\n      sum = sum + v \n   end\n   return\
    \ (sum % 2 == 0)\nend", "  local seen = {}\n  for i, v in pairs(l) do\n    if\
    \ seen[v] then\n      return false\n    end\n    seen[v] = true\n  end\n  return\
    \ true\nend", "  local pairs = {}\n  for k, v in ipairs(l) do\n    pairs[k] =\
    \ v\n  end\n  for _, k in ipairs(pairs) do\n    for _, n in pairs(pairs) do\n\
    \      if k + n == 0 then\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "    local pairs = unpack(pairs(l))\n    local zeros = setmetatable({},\
    \ {__mode=\"set\"})\n    for i = 1, #pairs do\n        local k = pairs[i]\n  \
    \      if k > 0 then\n            zeros[k] = false\n        end\n    end\n   \
    \ for i = 1, #pairs do\n        local k = pairs[i]\n        if zeros[k] then\n\
    \            return true\n        end\n    end\n    return false\nend", "  local\
    \ result = true\n  for k, v in pairs(l) do\n    if v > 0 then\n      result =\
    \ false and result\n    end\n  end\n  return result\nend", "  if #l == 1 then\n\
    \    return false\n  end\n  local last_i = #l\n  local last_s = l[last_i]\n  for\
    \ i = last_i+1,1 do\n    local s = l[i]\n    if s == 0 then\n      return true\n\
    \    end\n    if last_s == 0 then\n      last_s = s\n    else\n      last_s =\
    \ last_s - s\n    end\n  end\n  return false\nend", "  local pairs = l.pairs\n\
    \  for _, b in pairs(pairs) do\n    if not (b) then\n      return false\n    end\n\
    \    for _, v in pairs(b) do\n      if v then\n        return false\n      end\n\
    \    end\n  end\n  return true\nend", "  local zero, count = unpack(l)\n  return\
    \ 0 == zero and 0 == count\nend", "  local res = 0\n  for k, v in pairs(l) do\n\
    \    res += v\n  end\n  return res == 0\nend", "  local res = {}\n  local last_key\
    \ = nil\n  -- Sum up all elements of the table\n  for i, v in ipairs(l) do\n \
    \   if last_key and last_key ~= v then\n      res[last_key] = res[last_key] +\
    \ v\n    else\n      last_key = v\n    end\n  end\n  return #res == 1\nend", " \
    \ local res = {}\n  local max\n  for i, v in ipairs(l) do\n    if max then\n \
    \     if v > max then\n        return false\n      else\n        max = v\n   \
    \   end\n    else\n      max = v\n    end\n  end\n  -- If we get here then there\
    \ are two distinct elements whose sum to zero.\n  local i = 1\n  for i = 1, #l\
    \ do\n    local v = l[i]\n    if v > 0 then\n      if not res[v] then\n      \
    \  res[v] = true\n      else\n        return false\n      end\n    end\n  end\n\
    \  return true\nend", "    local num_zeros = 0\n    local num_nonzeros = 0\n \
    \   for _, elem in ipairs(l) do\n        if elem == 0 then\n            num_zeros\
    \ = num_zeros + 1\n        else\n            num_nonzeros = num_nonzeros + 1\n\
    \        end\n    end\n    return (num_zeros > 1) or (num_nonzeros > 0)\nend",
  "  return next(l) ~= nil and next(l) == nil\nend", "  local s = l[1]\n  for i =\
    \ 2, #l do\n    s = s + l[i]\n    if s == 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local keys = {}\n  for k in pairs(l) do\n    keys[#keys\
    \ + 1] = k\n  end", "  local function helper(h, n)\n    return h + n < 0 or h\
    \ + n < h or helper(n - h, n + h) == n\n  end", "  local total = 0\n  for i,v\
    \ in ipairs(l) do total = total + v end\n  if total == 0 then return false else\
    \ return true end\nend", "  local n = #l\n  if not n then return true end\n  local\
    \ maxi = n - 1\n  local maxv = l[maxi]\n  for i = 1, n do\n    local v = l[i]\n\
    \    if v ~= maxv then return false end\n    maxi = i\n    maxv = v\n  end\n \
    \ return true\nend", "   local zeros = 0\n   for _, val in pairs(l) do\n     \
    \ if val == 0 then zeros = zeros + 1 end\n   end\n   return zeros == 2\nend",
  "  local seen = {}\n  for i, v in ipairs(l) do\n    seen[v] = seen[v] or 0\n   \
    \ seen[v] = seen[v] + 1\n    if seen[v] == 1 then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local table = {unpack(l)}\n  local last_key =\
    \ nil\n  local last_val = nil\n  local ans = false\n  for i = #table do -- iterate\
    \ over table\n    local key = table[i]\n    local val = table[i + 1]\n    if not\
    \ key then\n      -- check val\n      if val then\n        last_val = val\n  \
    \    end\n      ans = true\n      break\n    end\n    if last_val then\n     \
    \ -- check val\n      if val - last_val then\n        last_val = val\n       \
    \ last_key = key\n      end\n      ans = true\n      break\n    end\n    if last_key\
    \ and last_val and last_key ~= key then\n      -- check key\n      if key - last_key\
    \ then\n        last_key = key\n        last_val = val\n      end\n      ans =\
    \ true\n      break\n    end\n  end\n  return ans\nend", "  local zero = 0\n \
    \ local i = 1\n  local j = 1\n  local k = 0\n  local found = false\n  local n\
    \ = 1\n  while i <= #l do\n    found = false\n    k = i\n    j = k + 1\n    while\
    \ j <= #l do\n      n = n + l[j]\n      if n == zero then break end\n      if\
    \ n > zero then\n        found = true\n        break\n      end\n      j = j +\
    \ 1\n    end\n    if not found then break end\n    i = i + 1\n  end\n  return\
    \ found\nend", "  -- The code below returns true if the argument is an array and\n\
    \  -- contains at least two elements (the table must be non-empty).\n  -- This\
    \ code is slightly faster than the code below, and we could use\n  -- the array\
    \ size as a precondition.\n  local function is_array(t)\n    return type(t) ==\
    \ \"table\" and next(t) == nil\n  end\n  return is_array(l) and #l > 1 and #l\
    \ < 3\nend", "    local pairs = setmetatable({}, { __index = l })\n    local total\
    \ = 0\n    for _, v in pairs(l) do total = total + v end\n    for k, v in pairs(l)\
    \ do pairs[v] = nil end\n    return total == 0\nend", "  local s = #l\n  local\
    \ result = {}\n  for i = 1, s do\n    if result[i] ~= nil then\n      local p\
    \ = i - 1\n      while p > 0 and l[p] + l[p + 1] == 0 do\n\tp-- -- p is now the\
    \ index of the first 0 we encounter in the sequence\n      end\n      if p > 0\
    \ then\n\tl[p] = nil\n\tresult[i] = p\n      end\n    end\n  end\n  -- Make sure\
    \ the resulting set is unique.\n  local first = {}\n  for i=1, #result do\n  \
    \  if first[result[i]] == nil then\n      first[result[i]] = true\n      result[#result\
    \ + 1] = \"(\" .. tostring(result[i]) .. \")\"\n    end\n  end\n  table.remove(result,\
    \ 1)\n  if #result == 0 then\n    return false\n  end\n  return true\nend", " \
    \ local function helper(t, a, b)\n    if a == nil then return false end\n    if\
    \ a == 0 then return b end\n    if b == 0 then return a end\n    if t[a] == nil\
    \ then\n      t[a] = 0\n      return true\n    end\n    return helper(t, a + 1,\
    \ b - t[a] + 1)\n  end\n  return helper(l, 1, #l)\nend", "    local seen = {}\n\
    \    local zeros = false\n    local t\n    for _, t in ipairs(l) do\n        local\
    \ f = tonumber(t.value)\n        if f == 0 then zeros = true end\n        local\
    \ s = t.value\n        for _, v in ipairs(seen) do\n            if s == v then\n\
    \                return true\n            elseif v == 0 then return true end\n\
    \        end\n        seen[s] = true\n    end\n    return false\nend", "\tlocal\
    \ s = 0\n\t-- we cannot use pairs, because of the order in which we add elements.\n\
    \t-- We should use two loops, but we cannot rely on lua's __ipairs \n\t-- implementation\
    \ (lua 3.0 implements it, but lua 3.3 does not).\n\tfor _, x in ipairs(l) do\n\
    \t\t-- we cannot use pairs, because of the order in which we add elements.\n\t\
    \t-- We should use two loops, but we cannot rely on lua's __ipairs \n\t\t-- implementation\
    \ (lua 3.0 implements it, but lua 3.3 does not).\n\t\tfor i, y in ipairs(l) do\n\
    \t\t\tif i == i then break end\n\t\t\ts = s + x\n\t\tend\n\tend\n\treturn s ==\
    \ 0\nend", "  local first_key, first_value = next(l)\n  local second_key, second_value\
    \ = next(l)", "  for i = 1, #l do\n    local elem = l[i]\n    local sum = 0\n\
    \    for j = 1, #l do\n      if elem > l[j] then\n        sum = sum + 1\n    \
    \  elseif elem == l[j] then\n        sum = sum + 0\n      elseif sum > 0 then\n\
    \        return false\n      end\n    end\n    if sum == 0 then\n      return\
    \ true\n    end\n  end\n  return false\nend", "  local sum = 0\n  local first\
    \ = true\n  for _, v in ipairs(l) do\n    if not first then\n      sum = sum +\
    \ v\n      if sum < 0 then\n        return false\n      end\n    else\n      first\
    \ = nil\n    end\n  end\n  return true\nend", "  local pairs = l[1]\n  local sum\
    \ = 0\n  local result", "    local s = nil\n    for _, v in ipairs(l) do\n   \
    \     if s == nil then\n            s = v\n        else\n            s = s + v\n\
    \        end\n    end\n    \n    return s == 0\nend", "  local seen = {}\n  for\
    \ i = 1,#l do\n    local k = l[i]\n    if seen[k] == nil then\n      seen[k] =\
    \ true\n    elseif seen[k] then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local sum = 0\n  for i, v in ipairs(l) do\n    sum = sum + v\n\
    \  end\n  return sum == 0\nend", "  local z = 0\n  for k, v in ipairs(l) do\n\
    \    z = z + v\n    if z == 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "  local pairs = pairs(l)\n  local sum = 0\n  for _, v in pairs\
    \ do\n    sum = sum + v\n  end\n  if sum == 0 then\n    return true\n  end\n \
    \ sum = 0\n  for i, v in pairs do\n    sum = sum + v\n    if sum == 0 then\n \
    \     return true\n    end\n  end\n  return false\nend", "  local sz = #l\n  if\
    \ sz == 0 then return false end\n  local s = l[1]\n  for i = 2, sz do\n    local\
    \ v = l[i]\n    if s - v > 0 then return false end\n    s = v\n  end\n  return\
    \ true\nend", "  local pairs = pairs(l)\n  for i = 1, #pairs do\n    local pair\
    \ = pairs[i]\n    local sum = 0\n    for j = 1, #pair do\n      sum = sum + pair[j]\n\
    \    end\n    if sum == 0 then\n      return true\n    end\n  end\n  return false\n\
    end", "  -- Scan in pairs, as pairs are small.\n  for a, b in pairs(l) do\n  \
    \  -- No need to check if b is 0 because we already know that pairs are small.\n\
    \    if a == 0 then\n      return false\n    end\n  end", "    local retv = false\n\
    \    for i, v in pairs(l) do\n        if v then\n            local v2 = l[i]\n\
    \            for j = 1, #l do\n                if j == i or l[j] == v then\n \
    \                   v2 = nil\n                    break\n                end\n\
    \            end\n            if v2 then\n                retv = true\n      \
    \          break\n            end\n        end\n    end\n    return retv\nend",
  "  local i, j, i2, j2, n = 1, #l, 2, 1\n  local z = 1\n  while i <= n do\n    i2,\
    \ j2 = i + 1, j - 1\n    if l[i] == 0 then\n      z = z + 1\n      i = i + 1\n\
    \      n = n + 1\n      j = j - 1\n      while j <= n do\n        j = j + 1\n\
    \        if l[j] == 0 then\n          z = z - 1\n          n = n - 1\n       \
    \   j = j - 1\n        end\n      end\n    end\n    i = i2 + 1\n    j = j2 - 1\n\
    \  end\n  return z == 0\nend", "  local n = 0\n  for k, v in ipairs(l) do n =\
    \ n + v end\n  if n == 0 then return true end\n  local zeros = {}\n  for k, v\
    \ in ipairs(l) do if v == 0 then table.insert(zeros, k) end end\n  if #zeros ==\
    \ 1 then return false end\n  local total = 0\n  for k, v in ipairs(l) do total\
    \ = total + v end\n  total = total + 1\n  for k1, v1 in pairs(zeros) do\n    local\
    \ found = false\n    for k2, v2 in pairs(zeros) do\n      if k1 != k2 and v1 +\
    \ v2 == total and v1 != 0 then\n        found = true\n        break\n      end\n\
    \    end\n    if found then return false end\n  end\n  return true\nend", "  local\
    \ sz = #l\n  for i = 1, sz do\n    local j = 1\n    while j <= sz do\n      if\
    \ i == j then\n        return true\n      elseif l[i] + l[j] == 0 then\n     \
    \   return false\n      end\n      j = j + 1\n    end\n  end\n  return false\n\
    end", "  for i = 1, #l do\n    for j = 1, #l do\n      if j + i == #l then\n \
    \       local k, v = l[i], l[j]\n        if v == 0 then\n          return k ==\
    \ 0 and j == i\n        end\n      end\n    end\n  end\n  return false\nend",
  "  local t = {}\n  for k, v in pairs(l) do\n    t[k] = v\n  end\n  local num_ones\
    \ = #t\n  local has_zeros = false\n  for i = 1, num_ones do\n    if t[i] == 0\
    \ then\n      has_zeros = true\n    end\n  end\n  return not has_zeros\nend",
  "  for i, v in ipairs(l) do\n    for j = i+1, #l do\n      if v + l[j] ~= 0 then\n\
    \        return false\n      end\n    end\n  end\n  return true\nend", "  local\
    \ result = {}\n  for _, v in pairs(l) do\n    local count = 0\n    for _, v2 in\
    \ pairs(l) do\n      count = count + 1\n      if v + v2 == 0 then\n        table.insert(result,\
    \ v)\n      end\n    end\n    if count > 1 then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local sum = 0\n  for i = 1, #l do\n    sum = sum\
    \ + l[i]\n  end\n  if sum == 0 then\n    return true\n  end\n  for i = 1, #l do\n\
    \    if sum + l[i] ~= 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local i = 1\n  local j = 1\n  local sum = 0\n  while j < #l do\n    sum\
    \ = sum + l[j]\n    i = i + 1\n    j = j + 1\n    if i == #l then\n      if sum\
    \ == 0 then\n        return true\n      else\n        return false\n      end\n\
    \    end\n  end\n  return false\nend", "  local count = 0\n  local pairs = {}\n\
    \  for i, v in ipairs(l) do\n    if count >= 2 then\n      return false\n    end\n\
    \    pairs[count] = v\n    count = count + 1\n  end\n  local count = 0\n  for\
    \ i, v in pairs(pairs) do\n    if count >= 2 then\n      return false\n    end\n\
    \    count = count + 1\n  end\n  return true\nend", "  return #l == 1 and l[1]\
    \ == 0 or false\nend", "  local sum = 0\n  local count = #l\n  local is_zero =\
    \ false", "    local n, total = 0, 0\n    for _, v in pairs(l) do\n        total\
    \ = total + v\n        if total == 0 then\n            return true\n        end\n\
    \    end\n    return false\nend", "  if #l == 0 then return true end\n  for k,v\
    \ in pairs(l) do\n    if v == 0 then return false end\n  end\n  return true\n\
    end", "  for i, v in ipairs(l) do\n    if v < 0 then\n      return false\n   \
    \ end\n  end\n  return true\nend", "   local t = {}\n   for key, value in pairs(l)\
    \ do\n      if t[value] then\n         return false\n      end\n      t[value]\
    \ = true\n   end\n   return true\nend", "  local zeros = 0\n  for k, v in pairs(l)\
    \ do zeros = zeros + v end\n  if zeros == 2 then return false end\n  for k, v\
    \ in pairs(l) do if v > 0 then return false end end\n  return true\nend", "  \
    \ if #l == 0 then return false end\n   local zero = false\n   for i = 1, #l do\
    \ -- iterate through l and compare with zeros\n      local x = l[i]\n      if\
    \ x == 0 then\n         if not zero then -- if current element != 0, then return\
    \ false\n            return false\n         end\n         zero = false -- reset\
    \ zero to false since element has been found\n      elseif x < 0 then\n      \
    \   if zero then\n            return false -- only return false once the first\
    \ element has been found\n         end\n         zero = true -- reset zero to\
    \ true\n      elseif x == 0 and not zero then -- if current element == 0 and is\
    \ NOT the first element that sums to zero\n         return false -- return false\
    \ since there are no other elements to compare against\n      end\n   end\n  \
    \ return true -- return true if all elements have been checked\nend", "  for _,\
    \ value in pairs(l) do\n    local zeros = 0\n    for _, x in pairs(l) do\n   \
    \   if x == value and zeros == 0 then\n        zeros = zeros + 1\n      elseif\
    \ x == value and zeros > 0 then\n        return false\n      else\n        zeros\
    \ = zeros - 1\n      end\n    end\n  end\n  return true\nend", "  -- TODO: Add\
    \ more tests\n  if #l == 0 then\n    return false\n  end\n  -- If the list contains\
    \ no pairs with non-zero sum, return true\n  local sum, i = 0\n  for _, v in pairs(l)\
    \ do\n    sum = sum + v\n    if sum < 0 then\n      return false\n    end\n  \
    \  if sum == 0 then\n      if i ~= 1 then\n        return false\n      end\n \
    \   end\n    i = i + 1\n  end\n  return true\nend", "    local retval = false\n\
    \    for k1, v1 in pairs(l) do\n        for k2, v2 in pairs(l) do\n          \
    \  if k1 == k2 and v1 + v2 <= 0 then\n                retval = true\n        \
    \        break\n            end\n        end\n    end\n    return retval\nend",
  "  local pairs = pairs(l)\n  local zeros = 0\n  for _, pair in pairs do\n    zeros\
    \ = zeros + pair\n  end\n  for _, pair in pairs do\n    local sum = 0\n    for\
    \ v in pairs do\n      sum = sum + v\n    end\n    local r = sum - zeros\n   \
    \ if r > 0 then\n      return false\n    end\n  end\n  return true\nend", "  for\
    \ i, pair1 in ipairs(l) do\n    for j, pair2 in ipairs(l) do\n      local num\
    \ = pair1 + pair2\n      if num == 0 then\n        return true\n      end\n  \
    \  end\n  end\n  return false\nend", "   local new_l = {}\n   for k in pairs(l)\
    \ do\n      new_l[#new_l + 1] = k\n   end\n   local z = 0\n   for k, v in pairs(l)\
    \ do\n      z = z + v\n   end\n   if z == 0 then\n      return false\n   else\n\
    \      local new_z = 0\n      for k, v in pairs(l) do\n         new_z = new_z\
    \ + v\n      end\n      return (new_z == 0 and new_l[#new_l + 1] == 0)\n   end\n\
    end", "  local n = #l\n  local n1, n2 = 0, 0\n  for i = 1, n do\n    n1 = n1 +\
    \ l[i]\n    n2 = n2 + l[i]\n  end\n  return n1 > 0 and n2 > 0 and n1 - n2 == 0\n\
    end", "  -- First, check for cases where there are no elements that sum to zero.\n\
    \  if #l == 0 then\n    return false\n  end\n  -- Second, check to make sure that\
    \ the table is not empty.\n  if #l == 1 then\n    return true\n  end\n  -- Get\
    \ the last element from the table.\n  local e = l[#l]\n  -- Iterate through the\
    \ rest of the elements, adding them up to the last\n  -- element.\n  for i = #l\
    \ - 2, 1, -1 do\n    e = e + l[i]\n    if e == 0 then\n      return true\n   \
    \ end\n  end\n  return false\nend", "  local zero, result = 0, {}\n  -- Iterate\
    \ over the elements of the table and add the sum to the\n  -- running total if\
    \ positive, or subtract the sum if negative.\n  for key, value in pairs(l) do\n\
    \    if value >= 0 then\n      zero = zero + value\n      result[value] = key\n\
    \    else\n      zero = zero - value\n      result[-value] = key\n    end\n  end\n\
    \  -- Iterate over the sum and compare to zero.\n  for key, value in pairs(result)\
    \ do\n    if zero ~= 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local table_size = #l\n  local element_counts = {}\n  -- build element_counts\
    \ with O(n) time\n  -- TODO: Use \"for ... in ...\" idiom when Lua 5.1 is no longer\
    \ supported\n  for i = 1, table_size do\n    local e = l[i]\n    if e == nil then\n\
    \      -- ignore nil elements\n      continue\n    end\n    if element_counts[e]\
    \ == nil then\n      element_counts[e] = 1\n    else\n      element_counts[e]\
    \ = element_counts[e] + 1\n    end\n  end\n  -- count the number of pairs with\
    \ non-zero elements with\n  -- the same sum\n  local result = 0\n  for i = 1,\
    \ table_size do\n    local e = l[i]\n    if element_counts[e] == 1 then\n    \
    \  result = result + 1\n    end\n  end\n  return result == 0\nend", "  local n\
    \ = #l\n  for i = 1, n do\n    local zero\n    for j = 1, n do\n      zero = zero\
    \ + l[i][j]\n      if zero > 0 then break end\n    end\n    if zero ~= 0 then\
    \ return false end\n  end\n  return true\nend", "    for k in pairs(l) do\n  \
    \      if l[k] == 0 then return false end\n    end\n    return true\nend", " \
    \ local zero = 0\n  return false -- if there are no pairs then there is nothing\
    \ to sum\n           -- to\n  or #l == 0\n  or #l ~= 2 -- we only want to sum\
    \ up pairs, not triplets\n  or l[1] == l[2]\n  or l[1] == l[3] -- no triple with\
    \ same sum\n  or l[2] == l[4]\n  or l[3] == l[5]\n  or l[4] == l[6]\n  or l[5]\
    \ == l[7]\n  or l[6] == l[8]\n  or l[7] == l[9]\n  or l[8] == l[10]\n  or l[9]\
    \ == l[11]\n  or l[10] == l[12]\n  or l[11] == l[13]\n  or l[12] == l[14]\n  or\
    \ l[13] == l[15]\n  or l[14] == l[16]\n  or l[15] == zero\n  or l[16] == zero\n\
    end", "  local zero = { }\n  local true = 0\n  for _, v in ipairs(l) do\n    zero[v]\
    \ = true\n  end\n  local false = 0\n  local t = {}\n  for _, v in ipairs(l) do\n\
    \    t[#t + 1] = v\n    if zero[v] then\n      false = false + 1\n    end\n  end\n\
    \  if false == #t then\n    return true\n  else\n    return false\n  end\nend\n\
    return {\n  pairs_sum_to_zero = pairs_sum_to_zero\n}", "\tlocal result = {}\n\t\
    local seen = {}\n\tfor k, v in pairs(l) do\n\t\tif v == 0 then\n\t\t\tif not seen[v]\
    \ then\n\t\t\t\treturn false\n\t\t\tend\n\t\telseif not seen[v] then\n\t\t\tseen[v]\
    \ = true\n\t\t\ttable.insert(result, k)\n\t\tend\n\tend\n\tfor _, k in pairs(result)\
    \ do\n\t\tseen[k] = nil\n\tend\n\treturn true\nend", "  local num_pairs = #l /\
    \ 2\n  local num_inner_pairs = #l / 2\n  local sum = 0\n  for i = 1, num_pairs\
    \ do\n    local left = l[2*i] + l[2*i+1]\n    local right = l[2*i+2] + l[2*i+3]\n\
    \    sum = sum + left + right\n  end\n  local zeros = #l - sum\n  return zeros\
    \ == num_pairs and zeros == num_inner_pairs\nend", "  for i = 1, #l do\n    local\
    \ v = l[i]\n    if not v then return false end\n    local c = 1\n    for j = 1,\
    \ #l do\n      if j == i then\n        -- We cannot increment c or l[i] when j\
    \ is equal to i, as they\n        -- might otherwise be modified in the next loop\
    \ (e.g., when j is\n        -- equal to i)\n        if c == 1 and v > 0 then\n\
    \          return false\n        elseif c > 1 and v > 0 then\n          c = 1\n\
    \        end\n      elseif l[j] ~= v then\n        c = c + 1\n      end\n    end\n\
    \    if c == 1 then\n      return false\n    end\n  end\n  return true\nend",
  "  -- check whether there are two distinct elements in the list that\n  -- sum to\
    \ zero\n  for k, v in ipairs(l) do\n    if v ~= 0 and v + k ~= 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local zero = pairs(l)\n  local\
    \ n = 0\n  for _, v in pairs(zero) do\n    n = n + 1\n  end\n  if n == 0 then\n\
    \    return true\n  else\n    return false\n  end\nend", "  for i = 1, #l do\n\
    \    for j = i + 1, #l do\n      if l[i] + l[j] == 0 then\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "   local s = {}\n   for k,\
    \ v in pairs(l) do s[v] = true end\n   for k, v in pairs(s) do return false end\n\
    \   return true\nend", "  local zeros = {}\n  for k, v in ipairs(l) do\n    if\
    \ v == 0 then\n      table.insert(zeros, k)\n    end\n  end\n  local ones = {}\n\
    \  for k, v in ipairs(l) do\n    if v == 1 then\n      table.insert(ones, k)\n\
    \    end\n  end\n  if #zeros > 1 or #ones > 1 then\n    return false\n  end\n\
    \  return true\nend", "  local function f1(l1)\n    local i = 1\n    while i <\
    \ #l1 do\n      local i1 = i + 1\n      while i1 < #l1 do\n        if l1[i] >\
    \ 0 and l1[i1] > 0 and\n          l1[i] <= l1[i1] + l1[i-1] then\n          return\
    \ false\n        end\n        i1 = i1 + 1\n      end\n      i = i + 1\n    end\n\
    \    return true\n  end\n  local l1 = {unpack(l)}\n  while f1(l1) do\n    l1 =\
    \ {unpack(l)}\n  end\n  return true\nend", "  local zero = 0\n  local false =\
    \ false\n  local function helper(v, k)\n    v = v and v[k]\n    k = k and k[1]\n\
    \    local s = k and v + zero or zero\n    if s == zero then\n      return false\n\
    \    end\n    local ok = false\n    if k and v > zero then\n      ok = helper(v,\
    \ k + 1)\n    end\n    if not ok then\n      ok = helper(v, 1)\n    end\n    return\
    \ ok\n  end\n  local v = unpack(l)\n  helper(v, 1)\n  return false\nend", "  \
    \  local zero = 0\n    for k,v in pairs(l) do\n        zero = zero + v\n    end\n\
    \    for k,v in pairs(l) do\n        if zero == 0 then\n            return false\n\
    \        elseif zero == v then\n            return true\n        else\n      \
    \      zero = zero - v\n        end\n    end\n    return true\nend", "    local\
    \ s = 0\n    for _, v in ipairs(l) do\n        s = s + v\n    end\n    return\
    \ (s == 0)\nend", "  local total = 0\n  local max_value\n  local max_count = 0",
  "  local pairs = pairs\n  local sum = 0\n  local count = 0", "  local n = 1\n  for\
    \ k, v in ipairs(l) do\n    n = n * k + v\n    if n == 0 then\n      return true\n\
    \    end\n  end\n  return false\nend", "    -- We only have pairs so pairs() is\
    \ a better choice than ipairs().\n    for k, v in pairs(l) do\n        if v >\
    \ 0 then\n            return false\n        end\n    end\n    return true\nend",
  "  if #l == 0 then\n    return true\n  end\n  local total = -999\n  local t = {l[1]}\n\
    \  for i = 2, #l do\n    if total >= 0 then\n      total = total + t[i]\n    \
    \  table.insert(t, total)\n    else\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local pairs = {}\n    for k,v in pairs(l) do\n        if v\
    \ == 0 then\n            table.insert(pairs, {k,0})\n        else\n          \
    \  table.insert(pairs, {k,v})\n        end\n    end\n    for i = 2,#pairs do\n\
    \        local sum = 0\n        for j,pair in ipairs(pairs) do\n            sum\
    \ = sum + pair[j]*i\n        end\n        if sum == 0 then\n            return\
    \ true\n        end\n    end\n    return false\nend", "  local t = {}\n  for k,\
    \ v in pairs(l) do\n    if t[v] ~= nil then return false end\n    t[v] = k\n \
    \ end\n  for k, v in pairs(t) do\n    if v ~= 0 then return false end\n  end\n\
    \  return true\nend", "  local pairs = pairs(l)\n  if #pairs < 2 then\n    return\
    \ false\n  elseif #pairs == 2 then\n    return pairs[1] == pairs[2] and pairs[1]\
    \ > 0\n  else\n    local sum = 0\n    local counter = 0\n    for _, v in pairs\
    \ do\n      sum = sum + v\n      counter = counter + 1\n    end\n    return sum\
    \ == 0 and counter == 2\n  end\nend", "  local i = 0\n  local pairs = {}\n  local\
    \ ipairs = #l\n  while ipairs do\n    local pair = unpack(l, i, ipairs)\n    i\
    \ = i + 1\n    ipairs = ipairs - 1\n    pairs[pair[1] + 1] = pairs[pair[1]] +\
    \ pair[2]\n    if pairs[pair[1] + 1] ~= 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "  for _, v in pairs(l) do\n    if v + v == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  return #l == 1 and\
    \ l[1] == 0 or #l == 1 and l[1] > 0 and pairs_to_sum(l) == 0 and pairs_sum_to_zero(l[#l])\n\
    end", "  local s = #l\n  for i = 1, s do\n    local e = i - 1\n    if l[i] ==\
    \ l[e] then return false end\n    l = l { l[e] = 0 }\n  end\n  return true\nend",
  "    local n = #l\n    local i, j = 0, n - 1\n    while i < n do\n        local\
    \ x = l[i] + l[j]\n        if x ~= 0 then\n            if x == x then\n      \
    \          j = j - 1\n            else\n                i = i + 1\n          \
    \  end\n        else\n            i = i + 1\n            j = j - 1\n        end\n\
    \    end\n    return i == n\nend", "  if #l < 2 then return false end\n  local\
    \ sums = {}\n  for i = 1, #l do\n    local kv = l[i]\n    sums[kv] = kv\n  end\n\
    \  local n = 1\n  for i = 1, #l do\n    local kv = l[i]\n    if kv + n ~= 0 then\n\
    \      n = kv + n\n      sums[kv + n] = kv\n    end\n  end\n  for i = 1, #l do\n\
    \    local kv = l[i]\n    if kv > 0 and kv + n ~= 0 then\n      n = kv + n\n \
    \     sums[kv + n] = kv\n    end\n  end\n  for i = 1, #l do\n    local kv = l[i]\n\
    \    if kv + n < 1 then return false end\n    if kv + n ~= 0 then\n      if sums[kv\
    \ + n] ~= kv + n then return false end\n    end\n  end\n  return true\nend", " \
    \ local pairs = pairs(l)\n  for k, v in pairs do\n    if v == 0 then return true\
    \ end\n  end\n  return false\nend", "  return next(l) == nil or\n         next(l)\
    \ == nil or\n         next(l) == nil or\n         next(l) == nil or\n        \
    \ next(l) == nil or\n         next(l) == nil or\n         next(l) == nil or\n\
    \         next(l) == nil or\n         next(l) == nil or\n         next(l) == nil\
    \ or\n         next(l) == nil or\n         next(l) == nil or\n         next(l)\
    \ == nil or\n         next(l) == nil or\n         next(l) == nil or\n        \
    \ next(l) == nil or\n         next(l) == nil or\n         next(l) == nil or\n\
    \         next(l) == nil or\n         next(l) == nil or\n         next(l) == nil\
    \ or\n         next(l) == nil or\n         next(l) == nil or\n         next(l)\
    \ == nil or\n         next(l) == nil or\n         next(l) == nil or\n        \
    \ next(l) == nil or\n         next(l) == nil or\n         next(l) == nil or\n\
    \         next(l) == nil or\n         next(l) == nil or\n         next(l) == nil\
    \ or\n         next(l) == nil or\n         next(l) == nil or\n         next(l)\
    \ == nil or\n         next(l) == nil or\n         next(l) == nil or\n        \
    \ next(l) == nil or\n         next(l) == nil or\n         next(l) == nil or\n\
    \         next(l) == nil or\n         next(l) == nil or\n         next(l) == nil\
    \ or\n         next(l) == nil or\n         next(l) == nil or\n         next(l)\
    \ == nil or\n         next(l) == nil or\n         next(l) == nil or\n        \
    \ next(l) == nil or\n         next(l) == nil or\n         next(l) == nil or\n\
    \         next(l) == nil or\n         next(l) == nil or\n         next(l) == nil\
    \ or\n         next(l) == nil or\n         next(l) == nil or\n         next(l)\
    \ == nil or\n         next(l) == nil or\n         next(l) == nil or\n        \
    \ next(l) == nil or\n         next(l) == nil or\n         next(l) == nil or\n\
    \         next(l) == nil or\n         next(l) == nil or\n", "  local zero = {}\n\
    \  for i = 1,#l do\n    zero[i] = 0\n  end\n  local result = false\n  for i,v\
    \ in pairs(l) do\n    if zero[v] ~= 0 then\n      if zero[v] > 0 then\n      \
    \  zero[v] = zero[v] - 1\n      else\n        result = true\n        break\n \
    \     end\n    end\n  end\n  return result\nend", "  local lsize = #l\n  if lsize\
    \ == 0 then return false end\n  if lsize == 1 then return l[1] == 0 end\n  local\
    \ i = 0\n  local sum = 0\n  while i < lsize do\n    sum = sum + l[i]\n    i =\
    \ i + 1\n    if sum == 0 then return false end\n  end\n  return true\nend", " \
    \   local pairs = {}\n    for i, v in ipairs(l) do\n        for j = i+1, #l do\n\
    \            pairs[v+l[j]] = nil\n        end\n    end\n    for k, v in pairs\
    \ do\n        if v == nil then\n            return false\n        end\n    end\n\
    \    return true\nend", "  local zero = {}\n  local ones = {}\n  for i = 1, #l\
    \ do\n    local v = l[i]\n    if v ~= 0 then\n      if zero[v] then\n        zero[v]\
    \ = nil\n      else\n        zero[v] = i\n      end\n    else\n      if ones[v]\
    \ then\n        ones[v] = nil\n      else\n        ones[v] = i\n      end\n  \
    \  end\n  end\n  for k, v in ipairs(zero) do\n    if ones[k] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local zeros = 0\n  local t",
  "  local l1 = l -- save a copy of table\n  local n = #l1 -- save a copy of number\
    \ of elements\n  local total = 0 -- save a copy of total sum\n  local sum = 0\n\
    \  for k,v in pairs(l1) do\n    total = total + v\n    sum = sum + v\n  end\n\
    \  return n == 0 and total == 0 and sum == 0\nend", "  if #l == 0 then\n    return\
    \ true\n  end", "    local pairs = pairs(l)\n    for i=1, #pairs do\n        local\
    \ v = pairs[i]\n        if v + pairs[i-1] ~= 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local zero, result = {}, {}\n\
    \  for _, x in ipairs(l) do\n    if zero[x] then\n      return false\n    end\n\
    \    table.insert(result, x)\n    zero[x] = 1\n  end\n  return #result == 2\n\
    end", "  local zeros = {}\n  local pairs = pairs(l)\n  for _, v in pairs do\n\
    \    if v <= 0 then\n      zeros[v] = nil\n    else\n      zeros[v] = true\n \
    \   end\n  end\n  for _, v in pairs(zeros) do\n    if v ~= nil then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local sum = 0\n  local result\
    \ = {}\n  for k, v in pairs(l) do\n    sum = sum + v\n    result[sum] = k\n  end\n\
    \  if #l == 0 then\n    return false\n  end\n  local t = {}\n  for k, v in pairs(l)\
    \ do\n    if v == 0 then\n      result[sum] = k\n      table.insert(t, k)\n  \
    \  end\n  end\n  for k, v in pairs(t) do\n    result[v] = k\n  end\n  return result\
    \ == l\nend", "  if #l == 1 then return true end\n  local num_unique, counts =\
    \ 1, {}\n  local max_value, max_idx = l[1], 1\n  for idx = 2, #l do\n    if l[idx]\
    \ == l[max_idx] then\n      num_unique, num_unique = num_unique + 1, 1\n    else\n\
    \      counts[l[idx]] = counts[l[idx]] + 1 or 1\n    end\n    if num_unique >\
    \ 2 then\n      return false\n    end\n    if counts[l[idx]] > 1 then\n      return\
    \ false\n    end\n    max_value, max_idx = l[idx], idx\n  end\n  return true\n\
    end", "    local zeros = {}\n    local n = 1\n    for k, v in ipairs(l) do\n \
    \       if not zeros[n-k] then\n            zeros[n-k] = 1\n            n = n\
    \ + 1\n        elseif not zeros[n] then\n            zeros[n] = 1\n          \
    \  n = n + 1\n        elseif not zeros[n-k] + v then\n            zeros[n] = 1\n\
    \            n = n + 1\n        end\n    end\n    return not #zeros == 0 and nil\
    \ or not #zeros == 2\nend", "\tlocal i, n = 1, #l\n\tfor _, v in ipairs(l) do\n\
    \t\ti = i + v\n\t\tif i == 0 then\n\t\t\treturn false\n\t\tend\n\t\tif i ~= n\
    \ then\n\t\t\treturn false\n\t\tend\n\t\ti = i - v\n\tend\n\treturn true\nend",
  "  -- For each element in a list:\n  for _, e in ipairs(l) do\n    -- For each element\
    \ in a list of that element:\n    for _, e2 in ipairs(l) do\n      -- If e + e2\
    \ is zero:\n      if e + e2 = 0 then\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  local zeros = {}\n  for k,v in pairs(l) do zeros[v]\
    \ = true end\n  local sum = 0\n  for k,v in pairs(l) do sum = sum + v end\n  return\
    \ sum == 0\nend", "    local sum = 0\n    local pairs = pairs(l)\n    for k, v\
    \ in pairs do\n        sum = sum + v\n        if sum == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  local zeros = {}\n  for\
    \ i = 0, #l do\n    zeros[i] = 0\n  end\n  for i, v in pairs(l) do\n    if zeros[v]\
    \ == 0 then\n      zeros[v] = i\n      return true\n    end\n  end\n  return false\n\
    end", "  local num1 = l[1]\n  local num2 = l[2]\n  return num1 + num2 == 0\nend",
  "  for i, v in ipairs(l) do\n    if v == 0 then\n      break\n    end\n    if l[i\
    \ + v] == 0 then\n      return false\n    end\n  end\n  return true\nend", " \
    \ local t\n  local n\n  for _, t in ipairs(l) do\n    n = n + 1\n  end\n  if n\
    \ == 0 then\n    return true\n  end\n  local z = 0\n  for _, t in ipairs(l) do\n\
    \    z = z + t\n  end\n  if z == 0 then\n    return false\n  end\n  local zero\n\
    \  for _, t in ipairs(l) do\n    if t > 0 and t ~= zero then\n      return false\n\
    \    end\n    zero = t\n  end\n  return true\nend", "  local s = { }\n  for i\
    \ = 1, #l do\n    table.insert(s, l[i])\n  end\n  local i, imax = 1, #l\n  while\
    \ imax ~= 0 do\n    imax = imax - 1\n    if s[i] == 0 then\n      return false\n\
    \    end\n    i = i + 1\n  end\n  return true\nend", "  if #l == 0 then\n    return\
    \ false\n  end\n  for i = 1, #l do\n    local found = false\n    for j = 1, #l\
    \ do\n      if l[j] == l[i] then\n        found = true\n      end\n    end\n \
    \   if not found then\n      return false\n    end\n  end\n  return true\nend",
  "  -- assert type(tbl) is set\n  -- assert type(l.i) is type(\"\")\n  -- assert\
    \ type(l.j) is type(\"\")\n  -- assert type(l.k) is type(\"\")\n  -- assert type(l.v)\
    \ is type(\"\")\n  for i = l.i, l.j do l.v = l.v + l[i] end\n  return l.j == 0\
    \ and l.v == 0 or\n         l.j == l.i and l.v == 0 or\n         l.j == l.j and\
    \ l.v == 0\nend", "  if #l == 0 then\n    return false\n  end\n  local a = setmetatable({},\
    \ { __index = { __index = function(t,k) return t[k] end } })\n  local b = setmetatable({},\
    \ { __index = { __index = function(t,k) return t[k] end } })\n  local s = math.abs(l[1])\n\
    \  for i = 2, #l do\n    if l[i] > 0 then\n      s[#s] = i+1\n      a[#a+1] =\
    \ s[i]\n      b[#b+1] = l[i] - a[i]\n    end\n  end\n  local zero = false\n  for\
    \ i = 1, #a do\n    if a[i] == 0 then\n      zero = true\n    end\n  end\n  local\
    \ a = a[1]\n  local b = b[1]\n  if zero then\n    return false\n  end\n  if a\
    \ == b then\n    return true\n  end\n  return false\nend", "  for i, _ in ipairs(l)\
    \ do\n    local c = 0\n    for v in pairs(l) do\n      if i == v then\n      \
    \  c = c + 1\n      end\n    end\n    if c > 1 then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local t = {}\n  for k, v in l[1] do\n    t[k]\
    \ = v\n  end\n  local sum\n  for k, v in pairs(t) do\n    if not sum then\n  \
    \    sum = v\n    else\n      sum = sum + v\n    end\n  end\n  return sum == 0\n\
    end", "  local zeros = 0\n  for i = 1, #l do\n    zeros = zeros + l[i]\n  end\n\
    \  for i = 1, #l do\n    if l[i] ~= zeros then\n      return false\n    end\n\
    \  end\n  return true\nend", "    local function f(a, b) if b > 0 then f(a, b\
    \ - 1) end\n    return f(unpack(l))\nend", "  local nums = {}\n  local max_num\
    \ = nil\n  for _, v in ipairs(l) do\n    if nums[v] == nil then\n      nums[v]\
    \ = 1\n    else\n      nums[v] = nums[v] + 1\n      if nums[v] > max_num then\n\
    \        max_num = nums[v]\n      end\n    end\n  end\n  for k, v in pairs(nums)\
    \ do\n    if v > 1 then\n      return false\n    end\n  end\n  return true\nend",
  "  if #l == 0 then\n    return false\n  end\n  local last_key = {}\n  for i = 1,\
    \ #l do\n    local key = tostring(l[i])\n    if last_key[key] == nil then\n  \
    \    last_key[key] = 0\n    else\n      last_key[key] = last_key[key] + 1\n  \
    \  end\n  end\n  return last_key[1] == #l and last_key[1] == 0\nend", "  local\
    \ t = {}\n  for k, v in pairs(l) do\n    table.insert(t, v)\n  end\n  table.sort(t)\n\
    \  local i = 1\n  for i = 2, #t do\n    if t[i] + t[i-1] == 0 then return false\
    \ end\n  end\n  return true\nend", "  local zero = 0\n  for k, v in pairs(l) do\n\
    \    zero = zero + v\n  end\n  local ok = false\n  local i\n  for i = 1, #l do\n\
    \    local v\n    for j = 1, i do\n      v = v + l[i + j + 1]\n    end\n    if\
    \ v - zero == 0 then\n      ok = true\n      break\n    end\n  end\n  return ok\n\
    end", "  local nums = l[1]\n  if #nums < 2 then\n    return false\n  end\n  --\
    \ The last element of nums may be zero.\n  local last = last(l)\n  if last ==\
    \ nil then\n    return false\n  end\n  local last_zero = last\n  local sum = 0\n\
    \  for i = 2, #nums do\n    sum = sum + nums[i]\n    if sum == 0 then\n      return\
    \ false\n    end\n  end\n  return last_zero == sum\nend", "  for i, v in ipairs(l)\
    \ do\n    local count = 0\n    for j, _ in ipairs(l) do\n      count = count +\
    \ (v + l[j] or 0)\n    end\n    if count > 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local n\n  for n in ipairs(l) do\n    local c\
    \ = l[n] + 0\n    if c ~= n then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  -- Return the length of the longest run of pairs of integers\n\
    \  -- with sums less than zero, or nil if there are no pairs with a\n  -- sum\
    \ less than zero.\n  assert(#l > 0, \"table is empty\")\n  local length = 0\n\
    \  for k, v in pairs(l) do\n    if v <= 0 then\n      if length == 0 then\n  \
    \      length = k\n      else\n        if length < k then\n          length =\
    \ k\n        end\n      end\n    end\n  end\n  if length > 0 then\n    return\
    \ false\n  end\n  return true\nend", "  local sum = 0\n  local last = -1\n  for\
    \ i = 1, #l do\n    sum = sum + l[i]\n    if last ~= -1 and sum == 0 then\n  \
    \    return true\n    end\n    last = l[i]\n  end\n  return false\nend", "   \
    \ local s = 0\n    for k, v in pairs(l) do\n        s = s + v\n    end\n    return\
    \ (s == 0)\nend", "  local num_pairs = #l / 2\n  if #l == 0 then\n    return false\n\
    \  end\n  local pairs = {}\n  for i = 0, num_pairs do\n    table.insert(pairs,\
    \ i)\n  end\n  local num_zeros = 0\n  for i=1, #pairs do\n    if pairs[i] > 0\
    \ then\n      local cur_val = pairs[i]:sub(pairs[i]:len()-2)\n      if cur_val\
    \ == \"0\" then\n        num_zeros = num_zeros + 1\n      end\n    end\n  end\n\
    \  return (num_zeros % 2) == 0 and true or false\nend", "  local result = {}\n\
    \  for k, v in pairs(l) do\n    if v > 0 then\n      result[#result + 1] = v\n\
    \    end\n  end\n  if #result > 1 then\n    return false\n  end\n  return result[#result]\
    \ == 0\nend", "    -- this table has two elements: l is {1, 3, 5, 0} and l is\
    \ {1, 3, -2, 1}\n    for k, v in ipairs(l) do\n        if v < 0 then\n       \
    \     return false\n        end\n    end\n    -- this table has one element: {1}\n\
    \    for k, v in ipairs(l) do\n        if v == 1 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local v = {}\n  for _, v in pairs(l)\
    \ do\n    if v > 0 then\n      return false\n    end\n  end\n  return true\nend",
  "  for i, v in pairs(l) do\n    if i == 1 then\n      if l[i] == 0 and l[i-1] ==\
    \ 1 then\n        return true\n      elseif l[i] == 0 and l[i-1] == -1 then\n\
    \        return false\n      end\n    end\n  end\n  return false\nend", "  local\
    \ first_zero = true\n  local last_zero = true\n  local max_sum = 0\n  local max_zero\
    \ = 0\n  for i = 1, #l do\n    if l[i] == 0 then\n      if not first_zero or last_zero\
    \ then\n\treturn false\n      end\n      first_zero = false\n      last_zero =\
    \ true\n      max_sum = max_sum + l[i]\n    elseif l[i] > 0 and max_sum > 0 then\n\
    \      if max_sum > max_zero then\n\treturn false\n      end\n      last_zero\
    \ = false\n      max_sum = max_sum - l[i]\n      max_zero = max_zero + l[i]\n\
    \    elseif l[i] == 0 and first_zero then\n      first_zero = false\n    end\n\
    \  end\n  if max_zero == 0 then\n    return true\n  else\n    return false\n \
    \ end\nend", "  local result = {}\n  for k,v in pairs(l) do table.insert(result,\
    \ v) end\n  for k,v in pairs(result) do\n    if v == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns true if a given number is even, and false otherwise.", "  local\
    \ sum = 0 -- sum is initialized to the sum of the elements in the table\n  local\
    \ i = 1\n  for k in pairs(l) do\n    sum = sum + k\n    if sum < 0 then -- if\
    \ the sum is less than zero then the elements in the table are distinct\n    \
    \  return false\n    end\n    i = i + 1\n  end\n  if sum > 0 then -- if the sum\
    \ is greater than zero then the two elements in the table sum up to zero\n   \
    \ return true\n  end\n  return false\nend", "    for i=1, #l do\n        if l[i]\
    \ == l[i+1] then return false end\n    end\n    return true\nend", "  if #l ==\
    \ 0 then\n    return true\n  end\n  local zeros = {}\n  for i = 1, #l do\n   \
    \ zeros[#zeros + 1] = l[i]\n  end\n  local i = 1\n  while i <= #zeros do\n   \
    \ if zeros[i] > 0 then\n      local j = i - 1\n      while j >= 0 and zeros[j]\
    \ == 0 do\n        j = j - 1\n      end\n      if j >= 0 then\n        zeros[j]\
    \ = zeros[j]\n      else\n        -- The two zeros cancel each other out; return\
    \ true.\n        return false\n      end\n    end\n    i = i + 1\n  end\n  return\
    \ true\nend", "  local function helper(key)\n    local s = 0\n    for k, v in\
    \ pairs(l) do\n      s = s + v\n    end\n    return s == 0\n  end\n  return helper\n\
    end", "  local i, i1, i2 = 0, #l, 1\n  while i1 <= i2 do\n    local t = l[i]\n\
    \    i2 = i2 + 1\n    if t == 0 then return false end\n    i = i + 1\n    if t\
    \ ~= l[i] then return false end\n  end\n  return true\nend", "  -- This should\
    \ only fail for negative numbers, which is why this function\n  -- is specified\
    \ with explicit type 'number'.\n  for i = 2, #l do\n    local sum = 0\n    for\
    \ j = 1, #l do\n      sum = sum + l[j]\n      if sum == 0 then\n        return\
    \ false\n      end\n    end\n  end\n  return true\nend", "  local ret\n  for i,\
    \ v in ipairs(l) do\n    ret = ret or (v in l)\n  end\n  return ret\nend", " \
    \ local zero = false\n  local key, value = unpack(l)\n  local sum = 0\n  for k,\
    \ v in pairs(l) do\n    sum = sum + v\n    if sum == 0 then\n      if key == nil\
    \ then\n        zero = true\n      else\n        key = key\n        value = v\n\
    \      end\n    end\n  end\n  return key and key and value == value and zero and\
    \ pairs(l) == nil\nend", "  local seen = {}\n  for i=1,#l do\n    local pair =\
    \ l[i]\n    if pair[1] ~= 0 then\n      if seen[pair] then return false end\n\
    \      seen[pair] = true\n    end\n  end\n  return true\nend", "  return #l ==\
    \ 2 and l[1] == 0 and l[2] == 0\nend", "  return #l == 0 and false or next(l)\
    \ == next(l) + 1\nend", "  if #l == 0 then return false end\n  if #l == 1 then\n\
    \    return l[1] == 0\n  else\n    return l[1] == 0 and pairs_sum_to_zero(l[2:])\n\
    \  end\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n\
    \  end\n  local has_pair = table.next(t) ~= nil\n  if not has_pair then\n    return\
    \ false\n  end\n  table.sort(t)\n  local has_zero = false\n  local current_pair\n\
    \  for _, v in ipairs(t) do\n    table.insert(current_pair, v)\n    if v == 1\
    \ then\n      has_zero = true\n    end\n    table.insert(current_pair, -v)\n \
    \ end\n  return has_zero and #current_pair > 1\nend", "  if #l == 0 then return\
    \ false end\n  local t = {}\n  for k, v in pairs(l) do t[#t + 1] = v end\n  local\
    \ zeros = {}\n  for j = 1, #t do\n    zeros[j] = 0\n  end\n  local sum = 0\n \
    \ for k, v in pairs(t) do\n    sum = sum + v\n    if sum == 0 then\n      zeros[#zeros\
    \ + 1] = k\n      sum = 1\n    end\n  end\n  if #zeros == 1 then\n    return true\n\
    \  end\n  return false\nend", "  if #l == 0 then\n    return false\n  end\n  if\
    \ #l == 1 then\n    return true\n  end\n  local first = {unpack(l)[1]}\n  local\
    \ second = {unpack(l)[2]}\n  for i=2,#l do\n    local first_new = first + {unpack(l)[i]}\n\
    \    local second_new = second + {unpack(l)[i]}\n    if first_new == 0 or second_new\
    \ == 0 then\n      return false\n    end\n    if first_new == second_new then\n\
    \      return true\n    end\n    first = first_new\n    second = second_new\n\
    \  end\nend", "  local function helper(tbl_)\n    local tbl = {}\n    for k, v\
    \ in pairs(tbl_) do\n      tbl[#tbl + 1] = {k, v}\n    end\n    local i = 0\n\
    \    while i < #tbl do\n      i = i + 1\n      local v = tbl[i]\n      local j\
    \ = i + 1\n      while j < #tbl do\n        j = j + 1\n        if tbl[j] == nil\
    \ then break end\n      end\n      if i == j then return true end\n      if v\
    \ == 0 then return false end\n      if i > j then\n        if v < 0 and tbl[j]\
    \ > 0 then return false end\n      end\n    end\n  end\n  helper(l)\nend", " \
    \ for i, v in pairs(l) do\n    local count = 0\n    for j, w in pairs(l) do\n\
    \      if j == i then\n        count = count + 1\n      elseif v + w < 0 then\n\
    \        count = count + 1\n      elseif v + w == 0 then\n        return true\n\
    \      end\n    end\n    if count > 1 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  if #l == 1 then return true end\n  for i = 2, #l do\n\
    \    if l[i] == 0 then return false end\n    if l[i] ~= l[i-1] then return false\
    \ end\n  end\n  return true\nend", "  local num_pairs = #l / 2\n  if num_pairs\
    \ == 1 then\n    return not l[num_pairs]\n  else\n    local pairs = l[num_pairs]\n\
    \    local sum = 0\n    local result = {}\n    for i = 1, num_pairs do\n     \
    \ local x = pairs[i]\n      if x == 2 then\n        return result\n      end\n\
    \      sum = sum + x\n    end\n    if sum > 0 then\n      return not result\n\
    \    else\n      return false\n    end\n  end\nend", "  return l.t[#l.t] == 0\
    \ and nil or true\nend", "  local n = #l\n  local k = 0\n  while k + 2 <= n do\n\
    \    local p = l[k]\n    local q = l[k + 1]\n    if p == q then\n      if p ~=\
    \ 0 then\n        local r = p - q\n        if r == 1 then\n          l[k] = 0\n\
    \          k = 1\n        else\n          k = k + 1\n        end\n      end\n\
    \    else\n      if p > 0 then\n        local r = p - q\n        if r == 1 then\n\
    \          l[k] = 0\n          k = k + 1\n        else\n          k = k + 1\n\
    \        end\n      else\n        local r = q - p\n        if r == 1 then\n  \
    \        l[k] = 0\n          k = k + 1\n        else\n          k = k + 1\n  \
    \      end\n      end\n    end\n  end\n  if k == n then\n    return true\n  else\n\
    \    return false\n  end\nend", "  local zero = {}\n  for k, v in ipairs(l) do\n\
    \    if v == 0 then\n      zero[k] = v\n    end\n  end", "  local result = true\n\
    \  for i = 1, #l do\n    if pair_remove(l,i) == pair_remove(l,i - 1) then\n  \
    \    result = false\n    end\n  end\n  return result\nend", "  local n, sum =\
    \ 0, 0\n  for i = 1, #l do\n    sum = sum + l[i]\n    if sum < 0 then return false\
    \ end\n    n = n + 1\n  end\n  if n == 0 then return false end\n  local last,\
    \ prev = nil, 0\n  for i = 1, #l do\n    last = l[i]\n    if prev + last == 0\
    \ then\n      sum = sum + last\n      n = n - 1\n    else\n      if sum > 0 then\n\
    \        return false\n      end\n    end\n    prev = last\n  end\n  return n\
    \ == 0\nend", "    local sum = 0\n    for _, v in pairs(l) do\n        if sum\
    \ + v ~= 0 then return false end\n        sum = sum + v\n    end\n    return true\n\
    end", "  local ls = l[1]\n  for i = 2, #l do\n    ls = ls + l[i]\n  end\n  return\
    \ ls == 0\nend", "  local t = {}\n  for i = 1, #l do\n    for j = i + 1, #l do\n\
    \      local v1 = l[i]\n      local v2 = l[j]\n      if v1 == 0 or v2 == 0 then\n\
    \        return false\n      else\n        t[v1] = t[v1] + v2\n        if t[v1]\
    \ == 0 then break end\n      end\n    end\n  end\n  return true\nend", "  for\
    \ i, v in ipairs(l) do\n    if v then\n      local new_val = v\n      while true\
    \ do\n        if new_val then\n          new_val = new_val + v\n          if not\
    \ new_val then\n            return false\n          end\n        end\n       \
    \ if l == new_val then\n          return true\n        end\n        if l ~= new_val\
    \ then\n          local next_l = new_val\n          while next_l ~= l do\n   \
    \         local new_val = new_val + v\n            if not new_val then\n     \
    \         return false\n            end\n            next_l = new_val\n      \
    \    end\n        end\n      end\n    end\n  end\n  return false\nend", "  local\
    \ s = 0\n  for i=1,#l do\n    s = s + l[i]\n  end\n  return s == 0 and true or\
    \ false\nend", "  local sum = 0\n  for _, v in ipairs(l) do\n    sum = sum + v\n\
    \  end\n  for k, v in pairs(l) do\n    sum = sum - v\n    if sum == 0 then return\
    \ false end\n  end\n  return true\nend", "  local zeros = {}\n  local zeros_found\
    \ = false\n  local function zero_count(t)\n    local zeros = 0\n    for _, v in\
    \ pairs(t) do\n      if v == 0 then\n        zeros = zeros + 1\n      elseif v\
    \ == -0 then\n        zeros = zeros + 1\n      elseif not zeros_found then\n \
    \       zeros = zeros + 1\n        zeros_found = true\n      end\n    end\n  \
    \  if zeros > 1 then\n      return true\n    elseif zeros == 0 then\n      return\
    \ false\n    end\n  end\n  for k, v in pairs(l) do\n    if zeros_found then\n\
    \      if zero_count(l) == false then\n        return false\n      end\n    end\n\
    \    table.insert(zeros, 0)\n  end\n  for _, v in pairs(l) do\n    local i = 1\n\
    \    while i < #zeros do\n      local j = 1\n      while j < #zeros do\n     \
    \   if zeros[i] - zeros[j] == 0 then\n          zeros[i - 1] = zeros[i - 1] +\
    \ 1\n          zeros[j] = zeros[j] + 1\n          i = i + 1\n          j = j +\
    \ 1\n        else\n          j = j + 1\n        end\n      end\n      if zero_count(l)\
    \ == false then\n        return false\n      end\n    end\n  end\n  if zero_count(l)\
    \ == false then\n    return false\n  end\n  return true\nend", "  local s = table.unpack(l)\n\
    \  local result = {}\n  local i = 1\n  for _,v in ipairs(s) do\n    if v > 0 then\n\
    \      table.insert(result, i)\n    end\n    i = i + 1\n  end\n  return #result\
    \ == #s\nend", "  local function helper(x, result, zero)\n    if x ~= zero then\n\
    \      helper(x - result[1], x + result[2], zero)\n    end\n  end\n  helper(1,\
    \ 0, nil)\n  return #l == 0 and false or true\nend", "  local n = #l\n  for i\
    \ = 1, n do\n    if i > 1 then\n      local c = pairs(l)[i - 1]\n      if c[1]\
    \ == 0 and c[2] ~= 0 then\n        return false\n      end\n    end\n    if l[i]\
    \ ~= 0 and (i - 1 >= l[i] or l[i - 1] ~= 0) then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local num_pairs = 0\n  for i, v in ipairs(l) do\n\
    \    num_pairs = num_pairs + 1\n    if v > 0 then\n      num_pairs = num_pairs\
    \ + 1\n      num_pairs = num_pairs + 1\n    end\n  end\n  return num_pairs ==\
    \ 3\nend", "  local t = {}\n  for k, v in pairs(l) do\n    t[k] = 0\n  end\n \
    \ for k, v in pairs(l) do\n    t[k] += v\n    if t[k] == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local function helper(l, start,\
    \ stop)\n    if stop == start then return false end\n    local i, j = start, stop\n\
    \    while i < stop do\n      local k = i - 1\n      if l[k] == '-' then\n   \
    \     i, j = i + 1, j - 1\n      elseif l[k] == l[i] then\n        i, j = i +\
    \ 1, j - 1\n      end\n    end\n    return j == start or helper(l, i, stop)\n\
    \  end\n  local i, j = next, next\n  while j < #l do\n    if helper(l, i, j) then\
    \ return false end\n    i = j\n    j = next(l, j)\n  end\n  return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
