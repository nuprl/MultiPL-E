name: HumanEval_66_digitSum
language: lua
prompt: "-- Task\n-- Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum('')\n\
  -- 0\n-- >>> digitSum('abAB')\n-- 131\n-- >>> digitSum('abcCd')\n-- 67\n-- >>> digitSum('helloE')\n\
  -- 69\n-- >>> digitSum('woArBld')\n-- 131\n-- >>> digitSum('aAaaaXa')\n-- 153\n\
  local function digitSum(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n\
  \    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
  \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
  \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
  \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local n = 0\n  local i = 0\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if string.match('[A-Z]',c) then\n      n = n + string.byte(c)\n    end\n\
    \  end\n  return n\nend", "  local sum = 0\n  for i = 1, #s do\n    sum = sum\
    \ + string.sub(s,i,i)\n  end\n  return sum\nend", "    local sum = 0\n    for\
    \ c in s:gmatch(\"%a\") do\n        sum = sum + string.char(c) -- ASCII\n    end\n\
    \    return sum\nend", "    local n = 0\n    for i = 1, #s do\n        n = n +\
    \ string.byte(s,i)\n    end\n    return n\nend", "\t-- Write your solution here\n\
    \tlocal sum = 0\n\tfor i = 1, #s do\n\t\tif tonumber(string.sub(s, i, i)) > 127\
    \ then\n\t\t\tsum = sum + tonumber(string.sub(s,i,i))\n\t\tend\n\tend\n\treturn\
    \ sum\nend", "  local sum = 0\n  for i=1,#s do\n    sum = (sum + string.sub(s,i,i))\
    \ or 0\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    sum = sum + tonumber(string.byte(c,1)) or 0\n  end\n\
    \  return sum\nend", "  local sum = 0\n  for i = 1, #s do\n    sum = sum + string.char(string.byte(s,i))\n\
    \  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #s do\n    local c\
    \ = string.sub(s,i,i)\n    if string.upper(c) then\n      sum = sum + string.upper(c)\n\
    \    end\n  end\n  return sum\nend", "\tlocal sum = 0\n\tfor index, letter in\
    \ string.gmatch(s, '([%a]+)') do\n\t\tsum = sum + string.char(string.byte(letter)\
    \ - 64)\n\tend\n\treturn sum\nend", "  local sum = 0\n  for i=1,#s do\n    if\
    \ string.sub(s,i,i)>=string.upper(string.sub(s,i,i)) then sum = sum + string.sub(s,i,i)-string.upper(string.sub(s,i,i))\
    \ end\n  end\n  return sum\nend", "  -- TODO: rewrite to remove explicit recursion\n\
    \  local sum = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) > 'Z' then\n  \
    \    sum = sum + string.sub(s,i,i)\n    end\n  end\n  return sum\nend", "    local\
    \ sum = 0\n    for i = 1, #s do\n        sum = sum + tonumber(string.sub(s,i,i))\n\
    \    end\n    return sum\nend", "  local sum = 0\n  for i = 1, #s do\n    sum\
    \ = sum + tonumber(string.sub(s, i, i)) * (#i - 1)\n  end\n  return sum\nend",
  "  local n = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) >= 'A' and string.sub(s,\
    \ i, i) ~= 'Z' then\n      n = n + string.sub(s, i, i)\n    end\n  end\n  return\
    \ n\nend", "    local sum = 0\n    for i = 1, #s do\n        local c = string.sub(s,i,i)\n\
    \        if string.byte(c) >= 65 and string.byte(c) <= 90 then\n            sum\
    \ = sum + string.byte(c) - 48\n        end\n    end\n    return sum\nend", " \
    \ local sum = 0\n  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n\
    \  end\n  return sum\nend", "  return string.gsub(string.gsub(s, \"[^0-9]\", \"\
    \"), \"[^A-Z]\", \"\"):gsub(\"%a+\",\"\",\"\")\nend", "  local sum = 0\n  for\
    \ i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n  end\n  return sum\n\
    end", "   local s = 0\n   for _,v in string.gmatch(s, '([%aA]+)') do\n      s\
    \ = s + tonumber(v)\n   end\n   return s\nend", "   local sum = 0\n   for i =\
    \ 1, #s do\n      sum = sum + tonumber(string.sub(s,i,i)) -- ascii code\n   end\n\
    \   return sum\nend", "    return s:gsub('.', function(c)\n        return string.char(tonumber(c))\n\
    \    end)\nend\n</cell>\n<cell>", "  local sum = 0\n  for i = 1, #s, 2 do\n  \
    \  sum = sum + tonumber(string.sub(s, i, i)) + tonumber(string.sub(s, i + 1, i\
    \ + 1))\n  end\n  return sum\nend", "  if #s == 0 then return 0 end\n  return\
    \ #s * (#s + 1) / 2\nend", "\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tlocal c\n\
    \t\tif string.sub(s,i,i) == 'A' or string.sub(s,i,i) == 'a' then\n\t\t\tc = string.char(string.sub(s,i,i)\
    \ + string.sub(s,i,i))\n\t\telse\n\t\t\tc = string.sub(s,i,i)\n\t\tend\n\t\tsum\
    \ = sum + string.byte(c)\n\tend\n\treturn sum\nend", "  local sum = 0\n  for i\
    \ = 1, #s, 1 do\n    sum = sum + tonumber(string.sub(s,i,i))\n  end\n  return\
    \ sum\nend", "  -- Write your solution here\n  return 0\nend", "\tlocal result\
    \ = 0\n\tlocal digits = {}\n\t-- Iterate through the string and sum all non-digits\n\
    \tfor i = 1, #s, 1 do\n\t\tlocal c = string.sub(s,i,i)\n\t\tif c ~= tonumber(c)\
    \ then\n\t\t\tresult = result + (tonumber(c) or 0)\n\t\telse\n\t\t\tdigits[#digits\
    \ + 1] = string.byte(c)\n\t\tend\n\tend\n\t-- Calculate the sum of all digits\
    \ in the string\n\tfor i = 1, #digits do\n\t\tresult = result + (tonumber(digits[i])\
    \ or 0)\n\tend\n\t-- Return the sum\n\treturn result\nend", "\tlocal sum = 0\n\
    \tfor i = 1, #s do\n\t\tsum = sum + tonumber(tostring(string.sub(s,i,i)))\n\t\
    end\n\treturn sum\nend", "  local result = 0\n  s:gsub('.', function (c) result\
    \ = result + tostring(c:byte()) end) -- Convert string to ASCII codes\n  return\
    \ result\nend", "  local sum = 0\n  for i=1,#s do\n    if string.sub(s,i,i)==\"\
    A\" then sum = sum + string.sub(s,i,i)\n    else sum = sum + string.sub(s,i,i)\
    \ + 128\n    end\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #s\
    \ do\n    if string.sub(s,i,i) then\n      sum = sum + string.char(string.byte(string.sub(s,i,i))\
    \ - (64 - string.byte('a')))\n    end\n  end\n  return sum\nend", "\tlocal sum\
    \ = 0\n\tfor i = 1, #s do\n\t\tsum = sum + tonumber(string.sub(s,i,i)) \n\tend\n\
    \treturn sum\nend", "  local sum = 0\n  for i=1,#s do\n    local c = string.sub(s,i,i)\n\
    \    if string.byte(c) < 128 then sum = sum + string.byte(c) else sum = sum +\
    \ string.byte(c) - 32\n  end\n  return sum\nend", "  local sum = 0\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) > 'a' then\n      sum = sum + string.sub(s,i,i)\n\
    \    end\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #s do\n  \
    \  sum = sum + tonumber(string.sub(s,i,i)):byte()\n  end\n  return sum\nend",
  "  return tonumber(string.gsub(s, '([A-Z])', function ()\n    return string.char(string.byte(string.sub(s,\
    \ 1, 1)) ^ string.byte(string.sub(s, 2, 2))\n  end)\n  ):reverse()\nend", "  local\
    \ sum = 0\n  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s, i, i)) -\
    \ (tonumber(string.sub(s, i - 1, i)) or 0)\n  end\n  return sum\nend", "  s =\
    \ string.gsub(s, '([%zA-Z])', function(s)\n    return string.charcode(string.sub(s,1,1))\
    \ + string.charcode(string.sub(s,2,2))\n  end)\n  return #s\nend", "    local\
    \ sum = 0\n    for _,c in ipairs(s) do\n        if string.char(c) >= 48 and string.char(c)\
    \ <= 57 then\n            sum = sum + string.char(c)\n        end\n    end\n \
    \   return sum\nend", "\tlocal total = 0\n\tfor c in s:gmatch('%a') do\n\t\ttotal\
    \ = total + c\n\tend\n\treturn total\nend", "\tlocal sum = 0\n\tfor i=1,#s do\n\
    \t\tif string.sub(s,i,i) ~= nil then\n\t\t\tsum = sum + string.sub(s,i,i)\n\t\t\
    end\n\tend\n\treturn sum\nend", "    return sum(string.gsub(s, function()\n  \
    \      local c, d = string.sub(s, 1, 1), string.sub(s, 2, 1)\n        return string.char(c)\
    \ + ((string.byte(c) - 48) + string.byte(d) - 48)\n    end))\nend", "  return\
    \ s:gsub(\"%l+\", function (c)\n    return string.char(c) .. string.upper(string.sub(c,\
    \ 1, 1)) .. string.sub(c + 1, 1)\n  end)\nend", "\tlocal total = 0\n\tfor i =\
    \ 1, #s do\n\t\tif string.sub(s,i,i) ~= nil then\n\t\t\ttotal = total + tonumber(string.sub(s,i,i))\n\
    \t\tend\n\tend\n\treturn total\nend", "    local sum = 0\n    for i = 1, #s do\n\
    \        if string.sub(s, i, i) ~= string.sub(s,i, i) then\n            sum =\
    \ sum + string.sub(s,i, i)\n        end\n    end\n    return sum\nend", "\t--\
    \ Write your solution here\nend", "  local sum = 0\n  for i = 0, #s do\n    if\
    \ string.sub(s,i,i) >= 'A' and string.sub(s,i,i) <='Z' then\n      sum = sum +\
    \ string.sub(s,i,i)\n    end\n  end\n  return sum\nend", "  local sum = 0\n  for\
    \ i = 1, #s, 1 do\n    local c = string.sub(s, i, i)\n    sum = sum + string.char(tonumber(c))\n\
    \  end\n  return sum\nend", "\ts = string.gsub(s, '[%a]+', '')\n\treturn #s +\
    \ sum(string.char(string.byte(s[i])) for i = 1, string.len(s))\nend", "  local\
    \ sum = 0\n  for _, _ in string.gmatch(s, '[%D]+') do\n    sum = sum + tonumber(_)\n\
    \  end\n  return sum\nend", "    local sum = 0\n    for i,v in pairs(s) do\n \
    \       if v >= '0' and v <= '9' then\n            sum = sum + tonumber(v)\n \
    \       elseif v >= 'a' and v <= 'z' then\n            sum = sum + 26 + tonumber(v\
    \ - 'a')\n        elseif v >= 'A' and v <= 'Z' then\n            sum = sum + 26\
    \ + tonumber(v - 'A')\n        end\n    end\n    return sum\nend", "  s = s:lower()\n\
    \  local sum = 0\n  for i = 1, #s do\n    sum = sum + string.char(string.byte(s,i):byte(1))\n\
    \  end\n  return sum\nend", "   -- Write your solution here\n   if s == \"nil\"\
    \ then\n      return 0\n   else\n      local sum = 0\n      for i = 1, #s do\n\
    \         sum = sum + tonumber(tostring(s:sub(i, i)):upper())\n      end\n   \
    \   return sum\n   end\nend", "    local total = 0\n    for i = 1, #s do\n   \
    \     total = total + (ord(s) - 48)\n    end\n    return total\nend", "\ts = string.gsub(s,\
    \ {'%a+', function(a)\n\t\treturn tonumber(a, '%a')\n\tend})\n\treturn string.byte(string.sub(s,\
    \ '%a+'))\nend", "  local function sum(v)\n    return v + math.abs(v) * (string.len(s)\
    \ - v)\n  end\n  local result = math.nan\n  for i = 1, string.len(s) do\n    local\
    \ c = string.sub(s,i,i)\n    local v = string.char(c)\n    local c = string.byte(c)\n\
    \    if c >= '0' and c <= '9' then\n      result = sum(result) + c\n    else\n\
    \      result = math.max(result, 0)\n    end\n  end\n  return result\nend", " \
    \ local sum = 0\n  for i = 1,#s do\n    if string.sub(s,i,i) <= '9' then\n   \
    \   sum = sum + string.sub(s,i,i)\n    end\n  end\n  return sum\nend", "  local\
    \ sum = 0\n  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i)) \n\
    \  end\n  return sum\nend\n</cell>\n<cell>", "  local sum = 0\n  local c = string.sub(s,\
    \ 1, 1)\n  while c ~= nil do\n    sum = sum + math.floor(c)\n    c = string.sub(s,\
    \ 2, 2)\n  end\n  return sum\nend", "  local acc = 0\n  while true do\n    local\
    \ char = string.sub(s,1,1)\n    if not char then break end\n    acc = acc + string.byte(char)\n\
    \    s = string.sub(s,2,string.len(s)-1)\n  end\n  return acc\nend", "  -- Check\
    \ preconditions\n  if not s then return 0 end\n  if s:match('^[a-z]+') then --\
    \ Check string begins with one or more lowercase letters\n    return s:match('^[a-z]+')\n\
    \  end\n  -- Remove empty characters and return sum of the ascii codes\n  local\
    \ sum = 0\n  for i = 1, #s do\n    sum = sum + tonumber(s[i]:sub(1,1):byte())\n\
    \  end\n  return sum\nend", "    local i, j, k, m, n = 0, 0, 0\n    for _,v in\
    \ pairs(s) do\n        if v:byte() > 32 then\n            if n == 0:\n       \
    \         i = v:byte()\n            else\n                k = i:byte()\n     \
    \           j = v:byte()\n                m, n = k + j, n\n            end\n \
    \       end\n    end\n    return m\nend", "\t-- Your code here\n\tlocal function\
    \ sumUpTo(n)\n\t\tif n == 1 then\n\t\t\treturn n\n\t\tend\n\t\treturn sumUpTo(n-1)\
    \ + n\n\tend\n\treturn sumUpTo(string.len(s)) + string.len(s)\nend", "   local\
    \ sum = 0\n   for i = 1, #s, 1 do\n      local c = string.byte(s,i)\n      if\
    \ string.byte(s,i) >= 128 then\n         sum = sum + c\n      else\n         sum\
    \ = sum + 0\n      end\n   end\n   return sum\nend", "  local sum = 0\n  for i\
    \ = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n  end\n  return sum\n\
    end", "  local upperChars = {}\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    if string.find(char, '[A-Z]') then\n      table.insert(upperChars, char)\n\
    \    end\n  end\n  return #upperChars * 10 + #upperChars + 1\nend", "    local\
    \ sum = 0\n    for c in s:gmatch(\"%l\") do\n        sum = sum + string.char(c)\
    \ -- + math.floor(c)\n    end\n    return sum\nend", "    local s = 0\n    for\
    \ i = 1, #s do\n        local c = s[i]\n        if c > 47 then s = s + c - 48\n\
    \        else s = s + c\n        end\n    end\n    return s\nend", "  if s ==\
    \ nil then return nil end\n  local result = 1\n  s = string.gsub(s, '[^A-Za-z0-9]+',\
    \ '')\n  for i = 1, #s, 1 do\n    local c = string.sub(s, i, i)\n    local digit\
    \ = string.byte(c)\n    if digit > 32 then\n      result = result + digit - 96\n\
    \    end\n  end\n  return result\nend", "  local n = 0\n  for c in s:gmatch('.')\
    \ do\n    n = n*10 + (tonumber(c:byte()) or 0)\n  end\n  return n\nend", "   local\
    \ t = 0\n   for i=1,#s do\n      t = t + string.sub(s,i,i+1)\n   end\n   return\
    \ t\nend", "  return sum(string.gsub(s, \"%..\", \"%1\"))\nend", "    -- base\
    \ case\n    if s == '' then\n        return 0\n    end\n    \n    -- get the first\
    \ character of s\n    local first = s[1]\n    \n    -- get the first index of\
    \ first character\n    local index = string.find(s, '^')\n    \n    -- get first\
    \ index of first character + 1\n    local next_index = string.find(s, first, index)\n\
    \    \n    -- if there is a '^', the string starts after the index\n    if next_index\
    \ == nil then\n        next_index = #s\n    end\n    \n    -- get the sum of the\
    \ first character\n    local sum = string.byte(first, index)\n    \n    -- get\
    \ the sum of the next character to sum\n    for i=next_index,#s do\n        sum\
    \ = sum + string.byte(s[i], index)\n    end\n    \n    -- return the sum\n   \
    \ return sum\nend", "    local c = ''\n    local sum = 0\n    for i = 1, #s do\n\
    \        local c = string.byte(s,i)\n        sum = sum + c\n    end\n    return\
    \ sum\nend", "  -- TODO: check if s is an ascii string\n  s = s:upper()\n  return\
    \ sum(s)\nend", "  return string.gsub(s, \"[%w]\", function(c)\n    return tonumber(string.sub(tostring(c),\
    \ 1, 1)) + tonumber(string.sub(tostring(c), 2, 2))\n  end, 0)\nend", "  local\
    \ total = 0\n  for i=1,#s do\n    total = total + tonumber(string.sub(s,i,i))\n\
    \  end\n  return total\nend", "    return string.gsub(s, '[^a-zA-Z0-9]+', function(x)\n\
    \        return string.byte(x) - string.byte('A') + 2\n    end)\nend", "    local\
    \ c=0\n    local r={}\n    for i,v in ipairs(s) do\n        local n=tonumber(v)\n\
    \        if n then c=c+n end\n        r[c]=v\n    end\n    return #r\nend", " \
    \   local sum = 0\n    for _, c in string.gmatch(s, '[%a]') do\n        sum =\
    \ sum + string.byte(c):byte() * (26 - string.byte(c):byte())\n    end\n    return\
    \ sum\nend", "    local sum = 0\n    for i=1,#s do\n        sum = sum + string.sub(s,i,i)\n\
    \    end\n    return sum\nend", "\tlocal upperCaseLetters = 0\n\tlocal upperCaseLetterCount\
    \ = 0\n\tfor char in s:gmatch(\"%a\") do \n\t\tupperCaseLetters = upperCaseLetters\
    \ + char:upper()\n\t\tupperCaseLetterCount = upperCaseLetterCount + 1\n\tend\n\
    \treturn upperCaseLetters\nend", "    local s = 0\n    for i = 1, #s do\n    \
    \    local ch = string.sub(s,i,i)\n        if ch:upper() then\n            s =\
    \ s + ch:byte()\n        end\n    end\n    return s\nend", "   local sum = 0\n\
    \   for i = 1, #s, 2 do\n      sum = (sum * 16 + tonumber(string.sub(s, i, i +\
    \ 1))) -- add digits together\n   end\n   return sum\nend", "  local result =\
    \ 0\n  for c in s:gmatch'%(%-?%d%d%d)' do\n    local char = string.byte(c)\n \
    \   if char > 48 and char < 65 then\n      result = result + char - 48\n    end\n\
    \  end\n  return result\nend", "  return sum(string.gsub(s, '[%w]', function(c)\
    \ return tostring(c):byte() end))\nend", "  s = string.lower(s)\n  local sum =\
    \ 0\n  for i = 1, #s do\n    local code = tonumber(string.sub(s,i,i))\n    sum\
    \ = sum + code + code ^ 1\n  end\n  return sum\nend", "  local sum = 0\n  for\
    \ i = 1, #s do\n    local code = string.byte(s[i], i)\n    if code >= 65 and code\
    \ <= 90 or code >= 97 and code <= 122 then\n      sum = sum + code - 65\n    else\n\
    \      return nil\n    end\n  end\n  return sum\nend", "    local result = 0\n\
    \    for i = 1, #s, 2 do\n        result = result + tonumber(string.sub(s, i,\
    \ i+2))\n    end\n    return result\nend", "    local sum = 0\n    local digits\
    \ = {}\n    local i = 1\n    for c in s:gmatch(\"%S+\") do\n        digits[i]\
    \ = tonumber(c)\n        i = i + 1\n    end\n    -- The last number in digits\
    \ is the sum\n    if #digits == 1 then\n        sum = digits[1]\n    else\n  \
    \      local last = digits[1]\n        for i = 1, #digits do\n            sum\
    \ = sum + digits[i]\n        end\n        sum = sum + last\n    end\n    return\
    \ sum\nend", "   s = string.gsub(s, '[%z\\1-\\127\\194-\\244]+', '')\n   return\
    \ (string.gsub(s, string.char(128), '') + string.gsub(s, string.char(254), '')\
    \ + string.gsub(s, string.char(255), ''))\nend", "    local sum = 0\n    for i\
    \ = 1, #s do\n        if string.sub(s,i,i) >= 'a' and string.sub(s,i,i) <= 'z'\
    \ then\n            sum = sum + string.sub(s,i,i)-string.sub(s,i,i)+'a'\n    \
    \    end\n    end\n    return sum\nend", "  return sum(s:gsub(\"%..\", \"\"))\n\
    end", "\t-- assert(type(s) == 'string')", "  return #s + s\nend", "   local total\
    \ = 0\n   for i=1, #s do\n      total = total + tonumber(s[i])\n   end\n   return\
    \ total\nend", "  s = s:upper():gsub('%W', function()\n      return string.byte(string.sub(s,\
    \ 1, 1)) .. string.byte(string.sub(s, 2, 1)) .. string.byte(string.sub(s, 3, 1))\n\
    \  end)\n  return tonumber(s)\nend", "  return string.gsub(s, '[%d-%d]', function(x)\n\
    \    return string.byte(x)\n  end)\nend", "  local sum = 0\n  for i=1, #s do\n\
    \    sum = sum + tonumber(string.sub(s, i, i))\n  end\n  return sum\nend", " \
    \   local sum = 0\n    for i = 1, #s do\n        sum = sum + string.char(string.byte(s,i)-65)\n\
    \    end\n    return sum\nend", "   -- Write your solution here\n   return 0\n\
    end", "  local sum = 0\n  for _, c in s:gmatch(\"[%w%.]+\") do\n    sum = sum\
    \ + tonumber(c)\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #s\
    \ do\n    sum = sum + tonumber(string.sub(s, i, i)) -- ASCII code\n  end\n  return\
    \ sum\nend", "\tlocal sum = 0\n\tfor i=1,#s,1 do\n\t\tif string.sub(s, i, i+1)\
    \ ~= '' then\n\t\t\tsum = sum + tonumber(string.sub(s, i, i+1))\n\t\tend\n\tend\n\
    \treturn sum\nend", "  if s == nil then\n    return 0\n  end\n  local sum = 0\n\
    \  for i = 0, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n  end\n  return\
    \ sum\nend", "\ts = string.gsub(s, \"%w+\", \"\") -- Remove all non-alpha chars\n\
    \ts = string.gsub(s, \"%c\", \"\") -- Remove all non-digit chars\n\treturn tonumber(string.gsub(s,\
    \ \"%a\", \"+\")) -- Add all non-digit chars to all non-alpha chars\nend", " \
    \ local sum = 0\n  for i = 1,#s do\n    if string.sub(s,i,i) ~= string.sub(s,i,i)\
    \ then break end\n    sum = sum + string.char(string.byte(string.sub(s,i,i)) +\
    \ 1)\n  end\n  return sum\nend", "\t-- Your code goes here!\n\treturn #s - (#s\
    \ % 10) + 1\nend", "    -- TODO: Finish this function\n    return 0\nend", " \
    \  local sum = 0\n   for i = 1, #s do\n      if string.sub(s, i, i) ~= string.upper(string.sub(s,\
    \ i, i)) then break end\n      sum = sum + tonumber(string.sub(s, i, i)) - 48\n\
    \   end\n   return sum\nend", "  return #s * (#s + 1) / 2\nend", "   local s =\
    \ string.gsub(s, \".\", \"\");\n   return #s + string.gsub(s, \"%w+\", function(c)\
    \ return #c + string.gsub(c, '[%w]', function(c) return tonumber(c:upper()) end)\
    \ end)\nend", "    local sum = 0\n    for i = 1, #s do\n        if string.sub(s,\
    \ i, i) == upper(string.sub(s, i, i)) then\n            sum = sum + string.sub(s,\
    \ i, i)\n        end\n    end\n    return sum\nend", "\tlocal sum = 0\n\t\n\t\
    for i = 1, #s do\n\t\tif string.upper(s[i])==\"A\" or string.upper(s[i])==\"B\"\
    \ then\n\t\t\tsum = sum + string.byte(s[i],1)\n\t\tend\n\tend\n\treturn sum\n\
    end", "  local n = 0\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n  \
    \  local upper = string.upper(c)\n    if upper then\n      n = n + tonumber(upper)\n\
    \    end\n  end\n  return n\nend", "    -- base case\n    if s == '' then\n  \
    \      return 0\n    -- base case\n    end\n    -- compute sum of char codes in\
    \ substring\n    local sum = 0\n    for i = 1, #s do\n        local c = string.byte(s,i)\n\
    \        sum = sum + c\n    end\n    -- apply only to the digit\n    return sum\
    \ % 10\nend", "  -- We start with the ASCII code of our first character.\n  --\
    \ This lets us keep a running total without having to start a loop.\n  local result\
    \ = 0\n  -- The loop will continue until we hit a character with a code > 0.\n\
    \  -- Any character with a code between 0 and 127 will become the sum of the\n\
    \  -- first character's code times the last character's code.\n  for i = 1, #s\
    \ do\n    local c = string.byte(s,i)\n    -- ASCII codes are between 0 and 127,\
    \ so if we find that code add it to\n    -- the running total.\n    if c <= 127\
    \ then\n      result = result + c\n    end\n  end\n  return result\nend", "  \
    \  if s == '' then return 0 end\n    local sum = 0\n    for i = 1, #s do\n   \
    \     if string.sub(s,i,i) > '9' then sum = sum + string.sub(s,i,i) end\n    end\n\
    \    return sum\nend\n</cell>\n<cell>", "  local n = 0\n  s:gsub('%w', function\
    \ ()\n    local c = tonumber(string.sub(string.upper(s), n, n))\n    n = n + 1\n\
    \    return c:byte()\n  end)\n  return n\nend", "\t-- The key is to iterate over\
    \ the string with a for loop to iterate over each character.\n\t-- Then, use a\
    \ condition statement to check whether the character is upper case or lower case.\
    \ If it's\n\t-- upper case, we use \"or\" to do an \"and\" with the character\
    \ code of \"a\" (65) and the character code of\n\t-- the character we want to\
    \ add (67). Otherwise, just add the character code.\n\t-- The return statement\
    \ is necessary to end the for loop.\n\tlocal sum = 0\n\tfor i, v in ipairs(s)\
    \ do\n\t\tif v:upper() ~= \"A\" and v:upper() ~= \"a\" then\n\t\t\tsum = sum +\
    \ v:byte()\n\t\tend\n\tend\n\treturn sum\nend", "  local sum = 0\n  for i=1,#s,1\
    \ do\n    if string.sub(s,i,i)==\"A\" then\n      sum = sum + string.sub(s,i,i)\n\
    \    end\n  end\n  return sum\nend", "\tlocal sum = 0\n\t\n\t-- Traverse the string\n\
    \tfor i = 1, #s do\n\t\tsum = sum + tonumber( string.sub( s, i, i ) ) * tonumber(\
    \ string.sub( s, i, i ) )\n\tend\n\t\n\t-- Return the sum of digits of string\n\
    \treturn sum\nend", "  local n = 0\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if string.upper(c) then\n      n = n + string.byte(c)\n    end\n  end\n \
    \ return n\nend", "  local result = 0\n  for c in s:gmatch(\"[^%z]+\") do\n  \
    \  if string.upper(c) then\n      result = result + string.upper(c)\n    end\n\
    \  end\n  return result\nend", "  local sum = 0\n  for i = 1, #s do\n    sum =\
    \ sum + math.abs(s[i - 1])\n  end\n  return sum\nend", "  if s == '' then\n  \
    \  return 0\n  end\n  local total = 0\n  for i = 1, #s do\n    total = total +\
    \ tonumber(string.sub(s,i,i))\n  end\n  return total\nend", "  local sum = 0\n\
    \  for i = 1, #s do\n    -- ASCII code of last character of string.\n    sum =\
    \ sum + tonumber(string.sub(s, i, i)) + i\n  end\n  return sum\nend", "\tlocal\
    \ sum = 0\n\tfor c in s:gmatch'[%A]:.' do\n\t\tif c ~= 'A' and c ~= 'a' then\n\
    \t\t\tsum = sum + tonumber(c)\n\t\tend\n\tend\n\treturn sum\nend", "  s = string.gsub(s,\
    \ '%a+', '')\n  local sum = 0\n  for i=1,#s do\n    sum = sum + tonumber(string.sub(s,\
    \ i, i))\n  end\n  return sum\nend", "    local sum = 0\n    for i = 1, #s do\n\
    \        if string.sub(s, i, i) ~= string.sub(s, '#', i) then\n            sum\
    \ = sum + string.char(string.sub(s, '#', i))\n        end\n    end\n    return\
    \ sum\nend", "    local i, sum = 0\n    for i = 1, #s do\n        if string.sub(s,i,i)\
    \ >= '0' and string.sub(s,i,i) <= '9' then\n            sum = sum + string.sub(s,i,i)\
    \ - '0'\n        end\n    end\n    return sum\nend", "  s = string.gsub(s, '[^a-zA-Z]',\
    \ '')\n  return #s + string.len(s)\nend", "  -- Write your code in C/Java/Python\
    \ here\n  -- YOUR CODE GOES HERE\n  -- DON'T MODIFY THE CODE BELOW THIS LINE\n\
    end", "  if s == '' then\n    return 0\n  end", "\t-- Your code here\n\t--return\
    \ 0\n\tlocal count = 0\n\twhile true do\n\t\tlocal _, char = s:sub(1,1):upper():byte()\n\
    \t\tif char ~= nil then\n\t\t\tcount = count + char\n\t\t\ts = s:sub(2)\n\t\t\
    else\n\t\t\treturn count\n\t\tend\n\tend\nend", "    local n = 0\n    for i =\
    \ 1, #s do\n        if string.sub(s,i,i)==\"A\" then\n            n = n + string.byte(s,i,i)\n\
    \        end\n    end\n    return n\nend", "    local sum = 0\n    for i = 1,\
    \ #s do\n        if string.upper(s[i])~=string.upper(s[i+1]) then\n          \
    \  sum = sum + string.byte(s[i], 2)\n        end\n    end\n    return sum\nend",
  "  local total = 0\n  for i, v in ipairs(s) do\n    total = total + ((string.byte(v)\
    \ - string.byte('A')) * (string.byte(i) - string.byte('a')))\n  end\n  return\
    \ total\nend", "  local sum = 0\n  for i = 1, #s do\n    if string.byte(s):byte(i)>\
    \ 47 then sum = sum + string.byte(s):byte(i) end\n  end\n  return sum\nend", "\t\
    local n=0\n\tfor i=1,#s do\n\t\tn=n+tostring(string.byte(s,i))\n\tend\n\treturn\
    \ n\nend", "  local n = 0\n  for _,c in string.gmatch(s, \"(.)\") do\n    if c\
    \ > 47 then n = n + c - 48 end\n  end\n  return n\nend", "\tlocal r = 0\n\tfor\
    \ i = 1, #s do\n\t\tr += string.char(string.byte(s,i,i)+string.byte(s,i,i+1))\n\
    \tend\n\treturn r\nend", "    -- write your function here\n    return 0\nend",
  "    local total = 0\n    for i = 1, #s do\n        if string.sub(s,i,i) = \"A\"\
    \ or string.sub(s,i,i) = \"B\" or string.sub(s,i,i) = \"C\" or string.sub(s,i,i)\
    \ = \"D\" then\n            total = total + string.sub(s,i,i)\n        end\n \
    \   end\n    return total\nend", "    local sum = 0\n    for c = string.gsub(s,\
    \ \"([A-Z])\") do\n        if string.byte(c) >= 48 and string.byte(c) <= 57 then\n\
    \            sum = sum + string.byte(c)\n        end\n    end\n    return sum\n\
    end", "    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + tonumber(string.sub(s,i,i))\n\
    \    end\n    return sum\nend", "  local sum = 0\n  for i=1,#s do\n    sum = sum\
    \ + tonumber(string.sub(s,i,i)):byte()\n  end\n  return sum\nend", "    local\
    \ sum = 0\n    for i = 1, #s do\n        sum = sum + tonumber(string.sub(s, i,\
    \ i))\n    end\n    return sum\nend", "  if #s == 0 then\n    return 0\n  elseif\
    \ #s <= 2 then\n    return string.sub(s, 1, 1)\n  else\n    return digitSum(string.sub(s,\
    \ 1, 2)) + digitSum(string.sub(s, 3, #s))\n  end\nend", "    local sum = 0\n \
    \   for ch in s:gmatch'([^%s]+)' do\n        if ch:byte() <= 9 and ch > 'Z' then\n\
    \            sum = sum + ch - 'A' + 10\n        else\n            sum = sum +\
    \ ch\n        end\n    end\n    return sum\nend", "  local total = 0\n  for i\
    \ = 1, #s do\n    total = total + tonumber(string.sub(s, i, i)) - 64\n  end\n\
    \  return total\nend", "  local sum = 0\n  for i=1,#s do\n    sum = sum + tonumber(s[i])\n\
    \  end\n  return sum\nend", "    -- Convert the string to upper case and return\
    \ the sum of the characters'\n    -- ASCII codes.\n    return s:upper():gsub(\"\
    [^\" .. digitSum .. \"]+\", function(x)\n        -- Get the sum of the characters'\
    \ ASCII codes.\n        return tonumber(x)\n    end)\nend", "    local sum = 0\n\
    \    for _, c in string.gmatch(s, '[^%w]') do\n        sum = sum + string.byte(c)\
    \ - (string.byte('a') - string.byte('0'))\n    end\n    return sum\nend", "  \
    \  local function digToInt(d)\n        if d == '0' then return 0 end\n       \
    \ local digit = 0\n        if d ~= 'A' then\n            digit = tostring(d)\n\
    \        end\n        return digit\n    end\n    local n = 0\n    for i = 1,#s\
    \ do\n        n = n + digToInt( string.sub( s, i, i ) )\n    end\n    return n\n\
    end", "\t-- write your code\n\t-- return digit sum\nend", "  local result = {}\n\
    \  for c in string.gmatch(s, '[^%s]+') do\n    table.insert(result, tonumber(string.sub(c,\
    \ 1, 1)))\n  end\n  table.sort(result)\n  return tonumber(table.concat(result))\n\
    end", "  local sum = 0\n  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n\
    \  end\n  return sum\nend", "  local sum = 0\n  for i = 1,#s do\n    sum = sum\
    \ + tonumber(string.sub(s,i,i))\n  end\n  return sum\nend", "  local sum = 0\n\
    \  for i = 1, #s do\n    sum = sum + string.byte(s,i)\n  end\n  return sum\nend",
  "   local sum = 0\n   for i = 1, #s do\n      sum = sum + tonumber(string.sub(s,\
    \ i, i)) + 0x60\n   end\n   return sum\nend", "    local total = 0\n    for i\
    \ = 1, #s do\n        total = total + tonumber(string.sub(s,i,i))\n    end\n \
    \   return total\nend", "  if #s < 1 then return 0 end\n  local sum = 0\n  for\
    \ i=1,#s do\n    if string.sub(s,i,i) >= '0' then\n      sum = sum + string.sub(s,i,i)\n\
    \    end\n  end\n  return sum\nend", "\tlocal sum = 0\n\tfor i = 1, #s do\n\t\t\
    sum = sum + string.byte(s,i)\n\tend\n\treturn sum\nend", "    local sum = 0\n\
    \    for c in s do\n        sum = sum + string.byte(c) -- convert ASCII code to\
    \ number\n    end -- loop\n    return sum\nend", "  -- We could use the builtin\
    \ string.gsub to remove all non-alphanumeric characters\n  -- and then just return\
    \ the sum of the resulting characters.\n  -- But this requires us to copy the\
    \ string twice, and we have already implemented\n  -- this in digitSum.  So we\
    \ could just use this instead.\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ n = string.byte(string.sub(s,i,i))\n    if n >= 48 and n <= 57 then\n      sum\
    \ = sum + n\n    end\n  end\n  return sum\nend", "  -- TODO: Implement this function.\n\
    \  return 0\nend", "  s = s:lower()\n  for c, v in pairs(s) do\n    if not v:match('%w')\
    \ then\n      return c + digitSum(v)\n    end\n  end\n  return 0\nend", "  local\
    \ sum = 0\n  for i = 1, #s do\n    local c = string.sub(s, i, i)\n    sum = sum\
    \ + string.byte(c):byte()\n  end\n  return sum\nend", "  -- Return the sum of\
    \ upper characters\n  -- from the string given to digitSum\n  local sum = 0\n\
    \  local index = 0\n  for c in string.gmatch(s, '%a') do\n    sum = sum + string.byte(c)\
    \ -- sum of the ASCII codes\n    index = index +1\n  end\n  return sum\nend",
  "  -- Find length of string\n  local len = #s\n  -- Initialize sum\n  local sum\
    \ = 0\n  -- For each character in the string\n  for i = 1, len do\n    -- Get\
    \ the character at position i\n    local c = string.sub(s,i,i)\n    -- Add the\
    \ ASCII code of character c to sum\n    sum = sum + tonumber(c)\n  end\n  return\
    \ sum\nend", "\tlocal sum = 0\n\ts:gsub('([A-Z])', function(c) sum = sum + string.byte(c)\
    \ end)\n\treturn sum\nend", "  s = string.gsub(s, \"\")\n  local sum = 0\n  for\
    \ i = 1, #s do\n    sum = sum + string.byte(s,i)\n  end\n  return sum\nend", " \
    \ local sum = 0\n  for i=1,#s do\n    if string.char(string.sub(s,i,i)) == string.upper(string.sub(s,i,i))\
    \ then\n      sum = sum + string.char(string.sub(s,i,i)) - 65\n    end\n  end\n\
    \  return sum\nend", "  -- Write your code in http://codereview.stackexchange.com/questions/44516/simple-program-to-compute-the-sum-of-the-digits-of-a-string\n\
    \  local sum = 0\n  local last = -1\n  local len = #s\n  for i = 1, len do\n \
    \   local code = tonumber(string.sub(s, i, i))\n    sum = sum + code\n    if code\
    \ == last then\n      sum = sum + code\n    else\n      last = code\n    end\n\
    \  end\n  return sum\nend", "  if s == nil then return 0 end\n  local sum = 0\n\
    \  for i = 1, #s do\n    if string.byte(s[i], i) <= 57 then\n      sum = sum +\
    \ string.byte(s[i], i)\n    end\n  end\n  return sum\nend", "  local sum = 0\n\
    \  for i = 1, #s, 1 do\n    sum = sum + string.byte(s,i,i)\n  end\n  return sum\n\
    end", "\tlocal ret = 0\n\tfor i = 1, #s do\n\t\tlocal c = string.sub(s, i, i)\n\
    \t\tif string.upper(c) then ret = ret + string.upper(c) end\n\tend\n\treturn ret\n\
    end", "  local total = 0\n  for i = 1, #s do\n    if string.sub(s, i, i + 1) ~=\
    \ string.upper(string.sub(s, i, i + 1)) then\n      total = total + 1\n    end\n\
    \  end\n  return total\nend", "  local result = 1\n  for i = 1, #s do\n    local\
    \ c = tonumber(string.sub(s, i, i))\n    result *= (c + 32 - (c + 32) % 10)\n\
    \  end\n  return result\nend", "  return tonumber(string.sub(s, '^', 1))\nend",
  "  -- Write your solution here\n  local sum = 0\n  for i = 1, #s do\n    sum = sum\
    \ + tonumber(string.sub(s, i, i)) - 96\n  end\n  return sum\nend", "  local result\
    \ = 0\n  for i,v in ipairs(s) do\n    if v >= '0' and v <= '9' then\n      result\
    \ = result + (v - '0')\n    end\n  end\n  return result\nend", "    if s == ''\
    \ then return 0 end\n    -- Convert the string to an array\n    local arr = s:gsub(\"\
    [%Z]\", function (c)\n        return string.char(tonumber(c))\n    end)\n    --\
    \ Convert the array to a string\n    local sum = 0\n    for i = 1, #arr do\n \
    \       sum = sum + string.sub(arr, i, i):upper():byte()\n    end\n    return\
    \ sum\nend", "  local sum = 0\n  for i = 1, #s do\n    local x = tonumber(s[i])\n\
    \    if x ~= nil and x >= 48 and x <= 57 then\n      sum = sum + x\n    end\n\
    \  end\n  return sum\nend", "\t-- Your code here\n\tlocal sum = 0\n\tfor i=1,\
    \ #s, 1 do\n\t\tsum = sum + string.sub(s,i,i)\n\tend\n\treturn sum\nend", "  \
    \ s = string.gsub(s, '[^%s]+', '')\n   return string.gsub(s, '%s+', function(c)\n\
    \      return tonumber(string.sub(c, 1))\n   end)\nend", "    local i, total =\
    \ 1, 0\n    for i = 1, #s, 1 do\n        total = total + tonumber(string.sub(s,\
    \ i, i+1))\n    end\n    return total\nend", "  if s ~= '' then\n    local sum\
    \ = 0\n    for i = 1, #s do\n      local char = string.sub(s,i,i)\n      if string.sub(string.upper(char),1,1)\
    \ ~= 'A' then sum = sum + string.byte(char) end\n    end\n    return sum\n  end\n\
    \  return 0\nend", "    local result = 0\n    for _, char in string.gmatch(s,\
    \ '%a') do\n        if char > 47 and char <= 57 then\n            result = result\
    \ + ((char ^ 48) - 48)\n        end\n    end\n    return result\nend", "  local\
    \ sum = 0\n  for i = 1, #s do\n    sum = sum + tonumber( string.sub(s,i,i) ) \n\
    \  end\n  return sum\nend", "  -- Your code here\n  return nil\nend", "    local\
    \ sum = 0\n    for i=1,#s do\n        sum = sum + string.byte(s,i)\n    end\n\
    \    return sum\nend", "  local sum = 0\n  for i=1, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n\
    \  end\n  return sum\nend", "\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tsum = sum\
    \ + tonumber(string.sub(s,i,i))\n\tend\n\treturn sum\nend", "  s = string.gsub(s,\
    \ \"%c\", function()\n    local n = 1\n    local sum = string.byte(string.sub(s,\
    \ '', 1, 1))\n    for i = 2, string.len(s) do sum = sum + string.byte(string.sub(s,\
    \ '', i, i)) + n end\n    return sum % 10\n  end)\n  return s\nend", "    return\
    \ string.gsub(s, '[^ ]+', function(x) then return x + string.byte(x) end):gsub('^0',\
    \ ''):gsub('[^0-9]', '')\nend", "  local sum = 0\n  for i = 1, #s do\n    sum\
    \ = sum + tonumber(string.sub(s,i,i))\n  end\n  return sum\nend", "  local sum\
    \ = 0\n  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n  end\n\
    \  return sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
