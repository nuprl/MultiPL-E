name: HumanEval_137_compare_one
language: lua
prompt: "-- Create a function that takes integers, floats, or strings representing\n\
  -- real numbers, and returns the larger variable in its given variable type.\n--\
  \ Return None if the values are equal.\n-- Note: If a real number is represented\
  \ as a string, the floating point might be . or ,\n-- >>> compare_one(1, 2.5)\n\
  -- 2.5\n-- >>> compare_one(1, '2,3')\n-- '2,3'\n-- >>> compare_one('5,1', '6')\n\
  -- '6'\n-- >>> compare_one('1', 1)\n-- None\nlocal function compare_one(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = compare_one\n\
  \    lu.assertEquals(candidate(1, 2), 2)\n    lu.assertEquals(candidate(1, 2.5),\
  \ 2.5)\n    lu.assertEquals(candidate(2, 3), 3)\n    lu.assertEquals(candidate(5,\
  \ 6), 6)\n    lu.assertEquals(candidate(1, '2,3'), '2,3')\n    lu.assertEquals(candidate('5,1',\
  \ '6'), '6')\n    lu.assertEquals(candidate('1', '2'), '2')\n    lu.assertEquals(candidate('1',\
  \ 1), None)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local t, n = type(a), type(b)\n  if t == 'number' and n == 'number'\
    \ then\n    return a > b and a or b\n  elseif t ~= 'string' and n ~= 'string'\
    \ then\n    return a\n  end\n  return compare_one(string.rep('a', #a), string.rep('a',\
    \ #b))\nend", "    -- Assume both a and b are either numbers or strings or nothing\n\
    \    if a ~= nil then\n        if type(a) == 'number' then\n            if b ~=\
    \ nil and type(b) == 'number' then\n                if a > b then\n          \
    \          return b\n                else\n                    return a\n    \
    \            end\n            elseif b == nil then\n                return a\n\
    \            else\n                return a\n            end\n        elseif type(a)\
    \ == 'string' then\n            if type(b) == 'number' then\n                if\
    \ a > b then\n                    return b\n                else\n           \
    \         return a\n                end\n            elseif b == nil then\n  \
    \              return a\n            else\n                return a\n        \
    \    end\n        elseif type(b) == 'number' then\n            return b\n    \
    \    else\n            return a\n        end\n    end\nend", "  if type(a) ~=\
    \ type(b) then return end\n  -- Convert strings to numbers\n  if a == b or type(a)\
    \ == 'number' and type(b) == 'number' then return b end\n  if type(b) == 'string'\
    \ then\n    local function convert(x)\n      if x == ',' then return '.' else\
    \ return x end\n    end\n    a = a:gsub(',', convert)\n    b = b:gsub(',', convert)\n\
    \  end\n  -- If one of the values was a string, convert to a number\n  a = tonumber(a)\
    \ or a\n  b = tonumber(b) or b\n  -- Use == so that NaN doesn't equal NaN.\n \
    \ return a == b\nend", "\ta = tonumber(a)\n\tb = tonumber(b)\n\tif a == b then\
    \ return end\n\tlocal a_str = tostring(a) -- Convert to string for string comparison\n\
    \tlocal b_str = tostring(b)\n\tif a_str == b_str then return end\n\tif a_str >\
    \ b_str then return end\n\treturn a\nend", "  if type(a) == 'number' and type(b)\
    \ == 'number' then\n    if type(a) == type(b) then return a\n    if type(a) ==\
    \ str then a = tonumber(a); b = tonumber(b) end\n    if type(b) == str then a\
    \ = tonumber(b); b = tonumber(a) end\n    if a == b then return a\n  end\n  if\
    \ type(a) == 'string' and type(b) == 'string' then\n    if a == '.' and b == ','\
    \ then return b\n    if a == ',' and b == '.' then return a\n  end\n  return nil\n\
    end", "    if a == b then\n        return a\n    else if a ~= b then\n       \
    \ return b\n    elseif type(a) == 'table' and type(b) == 'table' then\n      \
    \  if #a > #b then\n            return a\n        else\n            return b\n\
    \        end\n    end\nend", "    if type(a) == 'number' and type(b) == 'number'\
    \ then return a>b end\n    if type(a) == 'string' and type(b) == 'string' then\
    \ return a>b end\n    return a\nend", "  if type(a) == type(b) then return a\n\
    \  elseif type(a) == 'number' or type(b) == 'number' then\n    return if a > b\
    \ then a else b end\n  elseif type(a) == 'table' or type(b) == 'table' then\n\
    \    local a_t = {}\n    for k, v in a:keys() do\n      a_t[k] = compare_one(v,\
    \ b[k])\n    end\n    if table.max(a_t) > table.max(b) then return b end\n   \
    \ return a_t\n  elseif type(a) == 'string' or type(b) == 'string' then\n    return\
    \ if a < b then a else b end\n  else\n    -- TODO: implement type comparison for\
    \ other types (eg. structs)\n    return nil\n  end\nend", "  if type(a) == 'number'\
    \ and type(b) == 'number' then\n    if math.huge == a then\n      return b\n \
    \   end\n    return a\n  end\n  if type(a) == 'string' and type(b) == 'string'\
    \ then\n    if b == '.' or b == ',' then\n      if a:sub(-2, -1) == b then\n \
    \       return b\n      end\n    end\n    if a:sub(-2, -2) == b then\n      return\
    \ b\n    end\n  end\n  return None\nend", "  if a == 'number' and\n    b == 'number'\
    \ and\n    (b == b or a == 'number' or b == 'number') then\n    -- a is a number\
    \ but b is not, so a is greater\n    return a\n  end\n  if a == 'string' and\n\
    \    b == 'string' and\n    (a == a or b == 'string') then\n    -- a is a string\
    \ but b is not, so a is greater\n    return a\n  end\n  if a == 'number' and\n\
    \    b == 'string' and\n    (a > b) then\n    -- a is greater but b is not so\
    \ b is greater\n    return b\n  end\n  if a == 'string' and\n    b == 'number'\
    \ and\n    (a > b) then\n    -- a is greater but b is not so b is greater\n  \
    \  return b\n  end\n  if a == 'number' and\n    b == 'number' and\n    (a == a\
    \ or b == b) then\n    -- Both are numbers, not strings. So they must be equal.\n\
    \    return a\n  end\n  return nil\nend", "   if a == b or a == '' then return\
    \ nil end\n   if b == '' then return a\n   if a ~= b then\n      if type(a) ==\
    \ 'number' and type(b) == 'number' then\n         if math.abs(a - b) <= 1e-10\
    \ then return 'true' end\n         if math.abs(b - a) <= 1e-10 then return 'false'\
    \ end\n      elseif a ~= b then return 'not' end\n   end\n   -- If only one of\
    \ them is a number, the other must be 'true' or 'false'\n   return b == 'true'\
    \ or b == 'false'\nend", "    if type(a) == type(b) then\n        local a_num\
    \ = tonumber(a)\n        local b_num = tonumber(b)\n        if a_num and b_num\
    \ then\n            if a_num > b_num then\n                return a\n        \
    \    elseif a_num < b_num then\n                return b\n            else\n \
    \               return nil\n            end\n        else\n            return\
    \ nil\n        end\n    else\n        return nil\n    end\nend", "  local _a =\
    \ tonumber(a) or a\n  local _b = tonumber(b) or b\n  if _a == _b then\n    return\
    \ a\n  end\n  if type(_a) == 'string' and _b == '' then -- Check if string is\
    \ an empty string\n    return b\n  end\n  if type(_a) == 'number' and _b == ''\
    \ then -- Check if a number is 0\n    return a\n  end\n  if type(_a) == 'number'\
    \ and typeof(_b) == 'string' then\n    return compare_one(_a, _b)\n  end\n  return\
    \ nil\nend\n</cell>\n<cell>", "  if type(a) == 'number' and type(b) == 'number'\
    \ then\n    if a == b then return end\n    -- Handle NaNs explicitly\n    if a\
    \ == NaN then return 'nan' end\n    if b == NaN then return 'nan' end\n    if\
    \ a == Infinity then return 'inf' end\n    if b == Infinity then return 'inf'\
    \ end\n    if a<b then return 'inf' end\n    if a>b then return 'inf' end\n  \
    \  -- Handle Infinite numbers and floats\n    if a == 'inf' or b == 'inf' then\n\
    \      if a > Inf and b < Inf then return 'inf' end\n      if a < Inf and b >\
    \ Inf then return 'inf' end\n      if a > Inf and b > Inf then return 'inf' end\n\
    \      if a < Inf and b < Inf then return 'inf' end\n      if a > Inf and b ==\
    \ Inf then return 'inf' end\n      if a < Inf and b == Inf then return 'inf' end\n\
    \      if a == Inf and b < Inf then return 'inf' end\n      if a == Inf and b\
    \ > Inf then return 'inf' end\n      return 'inf'\n    end\n  end\n  -- Handle\
    \ other cases\n  if type(a) == 'string' and type(b) == 'string' then\n    if a\
    \ == b then return end\n    -- Handle NaNs explicitly\n    if a == NaN then return\
    \ 'nan' end\n    if b == NaN then return 'nan' end\n    -- Handle Infinite numbers\
    \ and floats\n    if a == 'inf' or b == 'inf' then\n      if a < Inf and b > Inf\
    \ then return 'inf' end\n      if a > Inf and b < Inf then return 'inf' end\n\
    \      if a < Inf and b == Inf then return 'inf' end\n      if a > Inf and b ==\
    \ Inf then return 'inf' end\n      if a == Inf and b < Inf then return 'inf' end\n\
    \      if a == Inf and b > Inf then return 'inf' end\n      return 'inf'\n   \
    \ end\n  end\n  -- Handle other cases\n  if type(a) == 'table' and type(b) ==\
    \ 'table' then\n    if a:_equal(b) then return end\n  end\n  return a\nend", " \
    \   if type(a) == 'number' and type(b) == 'number' then return a > b end\n   \
    \ if type(a) == 'string' and type(b) == 'string' then return tonumber(a) > tonumber(b)\
    \ end\n    return nil\nend", "    local is_number = tonumber(a) or tonumber(b)\
    \ or a == '' or b == ''\n    if not is_number then return nil end\n    if tonumber(a)\
    \ > tonumber(b) then return b else return a end\nend", "    if a ~= b then\n \
    \       if type(a) == 'string' then\n            a = tonumber(a) or a\n      \
    \      b = tonumber(b) or b\n        elseif type(a) == 'number' and type(b) ==\
    \ 'number' then\n            local function is_equal_one(a, b)\n             \
    \   return a == b or tostring(a) == tostring(b) or type(a) == 'table' and type(b)\
    \ == 'table' or (type(a) == 'number' and type(b) == 'number')\n            end\n\
    \            if not is_equal_one(a, b) then\n                return nil\n    \
    \        end\n        end\n        return a\n    end\n    return nil\nend", " \
    \  local typeA = type(a)\n   local typeB = type(b)\n   if typeA ~= typeB then\n\
    \      return typeA\n   end\n   if typeA == 'number' then\n      local converted\
    \ = tonumber(a)\n      if converted ~= nil then\n         local converted2 = tonumber(b)\n\
    \         if converted ~= nil then\n            return converted2\n         else\n\
    \            return converted\n         end\n      else\n         return b\n \
    \     end\n   else\n      return a\n   end\nend", "    if type(a) == 'number'\
    \ and type(b) == 'number' then\n        if b > a then\n            return b\n\
    \        else\n            return a\n        end\n    end", "  local n1 = tonumber(a)\n\
    \  local n2 = tonumber(b)\n  if n1 == n2 then\n    return a\n  end\n  if n1 >\
    \ n2 then\n    return a\n  else\n    return b\n  end\nend", "    if a == b then\n\
    \        return true\n    elseif type(a) ~= 'number' or type(b) ~= 'number' then\n\
    \        return a==b\n    elseif a ~= b then\n        return a > b\n    end\n\
    end\ncompare_one = compare_one", "  if type(a) == 'number' and type(b) == 'number'\
    \ then\n    return a > b and a or b\n  end\n  if type(a) == 'string' and type(b)\
    \ == 'string' then\n    if a == '.' and b == '.' then\n      return a\n    elseif\
    \ ',' ~= ',' then\n      -- TODO: Handle multiple decimal points here\n      return\
    \ a\n    end\n    return b\n  end\n  return nil\nend", "  if type(b) ~= 'string'\
    \ then\n    local type_a = type(a)\n    if type_a == 'number' then\n      if a\
    \ > b then\n        return a\n      elseif b > a then\n        return b\n    \
    \  else\n        return nil\n      end\n    end\n    if type_a == 'string' then\n\
    \      if a~=b then\n        return a\n      else\n        return nil\n      end\n\
    \    end\n  end\n  return b\nend", "  if type(a) == 'number' and type(b) == 'number'\
    \ then\n    return a > b and a or b\n  elseif type(a) == 'string' and type(b)\
    \ == 'string' then\n    return a:len() > b:len() and a or b\n  elseif type(a)\
    \ == 'table' and type(b) == 'table' then\n    for key, value in pairs(a) do\n\
    \      if compare_one(value, b[key]) then\n        return key\n      end\n   \
    \ end\n    return nil\n  else\n    return nil\n  end\nend", "  if a == 'number'\
    \ and b == 'number' then\n    if a > b then\n      return a\n    elseif b > a\
    \ then\n      return b\n    else\n      return None\n    end\n  elseif a~=b or\
    \ b==0 then\n    return b\n  else\n    return a\n  end\nend", "    local type1,\
    \ type2 = type(a), type(b)\n    if type1 == type2 and type1 ~= 'table' and type1\
    \ ~= 'string' then\n        return compare_one(a.n, b.n)\n    elseif type1 ==\
    \ 'string' and type2 == 'string' then\n        return stringcmp(a, b)\n    elseif\
    \ type1 == 'string' then\n        if type2 ~= 'string' then return nil end\n \
    \       local function str_number(x)\n            if x == '.' then return nil\
    \ end\n            local num = tonumber(x)\n            if num ~= nil then return\
    \ num end\n        end\n        if type2 ~= 'number' then return str_number(b)\
    \ end\n        if type2 == number and type1 ~= 'number' then return compare_one(a,\
    \ b)\n        end\n        return a\n    elseif type2 == 'string' then\n     \
    \   if type1 ~= 'string' then return nil end\n        local function str_number(x)\n\
    \            if x == '.' then return nil end\n            local num = tonumber(x)\n\
    \            if num ~= nil then return num end\n        end\n        if type1\
    \ == number and type2 ~= 'number' then return compare_one(b, a)\n        end\n\
    \        return b\n    elseif type1 == 'number' and type2 == number then return\
    \ compare_one(a, b)\n    end\n    return nil\nend", "  if type(a) == type(b) then\n\
    \    if a == nil or b == nil then\n      return a == b\n    end\n    if type(a)\
    \ ~= 'table' or type(b) ~= 'table' then\n      return a > b\n    end\n    for\
    \ k,v in pairs(a) do\n      if compare_one(v, b[k]) then\n        return true\n\
    \      end\n    end\n    for k,v in pairs(b) do\n      if compare_one(a, v) then\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  if type(a)\
    \ == type(b) then\n    if type(a) == 'number' then return math.max(a, b) end\n\
    \    if type(b) == 'number' then return math.min(a, b) end\n    if type(a) ==\
    \ 'string' then return compare_one(a:match('%f'), b:match('%f'))\n           \
    \                        else return compare_one(a:match('%d'), b:match('%d'))\
    \ end\n  end\n  return nil\nend", "  if type(a) == 'number' and type(b) == 'number'\
    \ then\n    if math.abs(a - b) < 1e-8 then\n      return a\n    else\n      return\
    \ b\n    end\n  elseif a == 'string' then\n    return compare_one(tonumber(b),\
    \ tonumber(a))\n  elseif b == 'string' then\n    return compare_one(tonumber(a),\
    \ tonumber(b))\n  elseif type(a) == 'table' then\n    if type(b) == 'table' then\n\
    \      local ai, bi = 1, 1\n      if #a > #b then\n        ai, bi = 2, #b\n  \
    \    elseif #b > #a then\n        ai, bi = 1, #a\n      end\n      for i = ai,\
    \ bi do\n        local aval = compare_one(a[i], b[i])\n        if aval ~= nil\
    \ then\n          return aval\n        end\n      end\n    end\n  end\n  return\
    \ nil\nend", "\tif type(a) == 'number' then\n\t\tlocal ab, ai, af\n\t\tab, ai\
    \ = tonumber(a), tonumber(b)\n\t\tif ab and ai and ab > ai then\n\t\t\treturn\
    \ a\n\t\telseif ab and ai and ai == ab then\n\t\t\treturn b\n\t\telseif ab and\
    \ ai and ab < ai then\n\t\t\treturn a\n\t\telse\n\t\t\treturn b\n\t\tend\n\telseif\
    \ type(a) == 'string' then\n\t\tlocal ai, af = tonumber(a), tonumber(b)\n\t\t\
    if af and af > ai then\n\t\t\treturn a\n\t\telseif af and af == ai then\n\t\t\t\
    return b\n\t\telseif af and af < ai then\n\t\t\treturn a\n\t\telse\n\t\t\treturn\
    \ b\n\t\tend\n\telse\n\t\treturn nil\n\tend\nend", "\tif type(a) ~= 'number' then\n\
    \t\treturn b\n\tend\n\tif type(b) ~= 'number' then\n\t\treturn a\n\tend\n\tif\
    \ a < b then\n\t\treturn a\n\tend\n\treturn b\nend", "  if type(a) == 'table'\
    \ and type(b) == 'table' then\n    local a_nn, b_nn = 0, {}\n    for k, v in pairs(a)\
    \ do\n      if k ~= 'type' then\n        table.insert(b_nn, v)\n      end\n  \
    \  end\n    for k, v in pairs(b) do\n      if k ~= 'type' then\n        table.insert(a_nn,\
    \ v)\n      end\n    end\n    if a_nn == b_nn then return end\n    if a_nn ==\
    \ 1 or b_nn == 1 then\n      if a_nn == b_nn then\n        if type(a) == 'string'\
    \ then return b else return a end\n      end\n      if type(a) == 'number' and\
    \ type(b) == 'number' then return b end\n      if type(a) == 'number' and type(b)\
    \ == 'string' then return a end\n      if type(a) == 'string' and type(b) == 'number'\
    \ then return b end\n      if type(a) == 'string' and type(b) == 'string' then\
    \ return a end\n      return compare_one(a[1], b[1]) if a[1] == b[1] else\n  \
    \           compare_one(a[2], b[2]) if a[2] == b[2] else\n             compare_one(a[3],\
    \ b[3]) if a[3] == b[3] end\n    end\n  end\n  if type(a) == 'number' and type(b)\
    \ == 'number' then\n    if a == b then return end\n    if a > b then\n      if\
    \ type(a) == 'string' then return b else return a end\n    end\n    if a < b then\n\
    \      if type(a) == 'string' then return b else return a end\n    end\n  end\n\
    \  if type(a) == 'string' and type(b) == 'number' then\n    if a > b then\n  \
    \    if type(a) == 'string' then return b else return a end\n    end\n    if a\
    \ < b then\n      if type(a) == 'string' then return b else return a end\n   \
    \ end\n  end\n  if type(a) == 'number' and type(b) == 'string' then\n    if a\
    \ > b then\n      if type(a) == 'string' then return b else return a end\n   \
    \ end\n    if a < b then\n      if type(a) == 'string' then return b else return\
    \ a end\n    end\n  end\n  if type(a) == 'string' and type(b) == 'string' then\n\
    \    if a == b then return end\n    if a > b then\n      if type(a) == 'string'\
    \ then return b else return a end\n    end\n    if a < b then\n      if type(a)\
    \ == 'string' then return b else return a end\n    end\n  end\n  if type(a) ==\
    \ 'table' and type(b) == 'table' then\n    local a_nn, b_nn = 0, {}\n    for k,\
    \ v in pairs(a) do", "    if a ~= b then\n        if type(a) == type(\"\") then\n\
    \            if a == \",\" then\n                return b\n            elseif\
    \ b == \",\" then\n                return a\n            elseif \".\" == a then\n\
    \                return b\n            elseif \".\" == b then\n              \
    \  return a\n            else\n                return \"%.*f%s%.*f%s\" % (math.abs(a),\
    \ tonumber(b), type(a), math.abs(b), type(b))\n            end\n        elseif\
    \ type(a) == type(1) then\n            return a > b and a or \"%.*f%s\" % (math.abs(a),\
    \ tonumber(a), type(a))\n        elseif type(a) == type(true) then\n         \
    \   return a > b and a or \"%.*f%s\" % (math.abs(a), tonumber(a), type(a))\n \
    \       elseif type(a) == type(2) then\n            return a > b and a or \"%.*f%s\"\
    \ % (math.abs(a), tonumber(a), type(a))\n        else\n            return a >\
    \ b and a or b or \"%.*f%s\" % (math.abs(a), tonumber(b), type(b))\n        end\n\
    \    end\nend", "  if type(a) ~= 'table' and type(a) ~= 'userdata' and type(a)\
    \ ~= 'string' then\n    a = tonumber(a)\n  end\n  if type(b) ~= 'table' and type(b)\
    \ ~= 'userdata' and type(b) ~= 'string' then\n    b = tonumber(b)\n  end\n  if\
    \ type(a) == 'string' then\n    a = tonumber(a:sub(1,-1))\n  end\n  if type(b)\
    \ == 'string' then\n    b = tonumber(b:sub(1,-1))\n  end\n  if a ~= b then\n \
    \   return a\n  else\n    return b\n  end\nend", "    if type(b) ~= 'string' then\n\
    \        return a > b\n    else\n        if type(a) == 'string' then\n       \
    \     if a == '.' then\n                return true\n            elseif a == ','\
    \ then\n                return true\n            else\n                return\
    \ a > b\n            end\n        elseif a == '.' or a == ',' then\n         \
    \   return a > b\n        else\n            return a[1] > b[1]\n        end\n\
    \    end\nend", "  if type(b) == 'number' then\n    return a > b\n  else\n   \
    \ return tonumber(a) > tonumber(b)\n  end\nend", "  -- If a or b is a string,\
    \ it must be of the same type\n  if type(a) == 'string' then\n    if type(b) ==\
    \ 'string' then\n      if a ~= b then\n        return a\n      else\n        return\
    \ b\n      end\n    elseif type(b) ~= 'string' then\n      b = '\"' .. b .. '\"\
    '\n    end\n  elseif type(a) ~= 'string' then\n    a = tostring(a)\n  end", " \
    \ if type(b) ~= 'string' then return b end\n  local a_ = a.split('.')\n  local\
    \ b_ = b.split('.')\n  for i=#a_, 1, -1 do\n    if tonumber(a_[i]) == tonumber(b_[i])\
    \ then return a_[i] end\n  end\n  return nil\nend", "  if a == b then\n    return\
    \ a\n  elseif type(a) == type(b) then\n    if type(a) == 'number' and type(b)\
    \ == 'number' then\n      if a == b then\n        return a\n      elseif type(a)\
    \ == 'string' then\n        return b\n      elseif type(b) == 'string' then\n\
    \        return a\n      elseif type(a) == 'table' then\n        if type(b.a)\
    \ == 'number' and type(a.b) == 'number' then\n          if a.a == b.a then\n \
    \           return a.b\n          else\n            local a_string = a:str()\n\
    \            local b_string = b:str()\n            if a_string ~= b_string then\n\
    \              return b_string\n            end\n          end\n        end\n\
    \      end\n    end\n  end\nend", "\tif type(b) == 'string' then\n\t\tif a ~=\
    \ b and tonumber(a) == tonumber(b) then\n\t\t\treturn b\n\t\tend\n\t\treturn a\n\
    \tend", "  if a == \"nil\" then return \"nil\" end\n  if b == \"nil\" then return\
    \ \"nil\" end", "  if type(a) == 'number' and type(b) == 'number' then\n    if\
    \ a > b then\n      return a\n    elseif a < b then\n      return b\n    end\n\
    \  end\n  if type(a) == 'string' and type(b) == 'string' then\n    if a ~= b then\n\
    \      return a\n    end\n  end\n  if type(a) == 'table' and type(b) == 'table'\
    \ then\n    if a.~ == b then\n      return b\n    end\n  end\n  if type(a) ==\
    \ 'table' and type(b) == 'table' then\n    if a.size == 0 and b.size == 0 then\n\
    \      return true\n    elseif a.size == 0 and b.size > 0 then\n      return b[1]\n\
    \    elseif a.size > 0 and b.size == 0 then\n      return a[1]\n    else\n   \
    \   return a.max(b)\n    end\n  end\n  return nil\nend", "    local type = type(a)\n\
    \    if type ~= type(b) then return nil end", "  if type(b) == 'number' then\n\
    \    if type(a) ~= 'number' or b == '' then\n      return b\n    end\n    return\
    \ a > b and a or 'b'\n  else\n    if type(a) ~= 'string' then\n      return a\n\
    \    end\n    return a:sub(1, -1):gsub(',', '')\n  end\nend", '    if type(a)
    == type(b) then return compare_one(string(a), string(b)) end', "  if type(b) ==\
    \ 'number' then\n    if type(a) == 'number' then\n      if math.abs(b - a) <=\
    \ delta then\n        return b\n      else\n        return a\n      end\n    elseif\
    \ a == 'number' then\n      return b\n    end\n  elseif type(a) == 'number' then\n\
    \    return a\n  elseif a == 'string' then\n    if b == 'string' then\n      if\
    \ a == '' then return '' end\n      if b == '' then return '' end\n      if type(a)\
    \ == 'table' and type(b) == 'table' then\n        if #a == #b then\n         \
    \ for i = 1, #a do\n            local c = compare_one(a[i], b[i])\n          \
    \  if c ~= nil then return c end\n          end\n        end\n      end\n    \
    \  if a ~= b then return nil end\n    end\n  end\nend", "    -- Check first if\
    \ all values are strings/numbers; if not return None.\n    if type(a) ~= 'number'\
    \ or type(b) ~= 'number' or type(a) ~= type(b) then\n        return nil\n    end\n\
    \    -- Check if all values are the same.\n    if a == b then\n        return\
    \ nil\n    end\n    -- If the values are equal, return the bigger value.\n   \
    \ if a > b then\n        return b\n    else\n        return a\n    end\nend",
  "  if type(a) == 'number' and type(b) == 'number' then\n    if math.abs(a - b) <\
    \ TOLERANCE then\n      return a\n    else\n      return b\n    end\n  else\n\
    \    if a == b then\n      return a\n    end\n  end\nend", "   if type(a) ~= type(b)\
    \ then\n      return nil\n   end\n   local a_str, b_str = string(a), string(b)\n\
    \   if a_str ~= b_str then\n      return a_str\n   end\n   if type(a) == 'number'\
    \ and type(b) == 'string' then\n      if b == '.' or b == ',' then\n         return\
    \ b\n      end\n   end\n   return a\nend\n</code>\n<|/ a tags=lua,lua-table dscore=3\
    \ |>\n<| c |>\nThanks, I like this solution. I wonder if there's a way that doesn't\
    \ require to define another function, though.\n<|/ c |>\n<| c |>\nThis should\
    \ have been the accepted answer.\n<|/ c |>\n<| c |>\nNice solution, though I'd\
    \ use `if type(b) == 'table' then return max(a,b) end` to be robust against empty\
    \ tables.\n<|/ c |>\n<| a tags=lua,lua-table |>\nIf it were my code I'd do this:\n\
    <code>", "  if a == nil or b == nil then\n    return a\n  else\n    if type(a)\
    \ == 'string' then\n      a = string.lower(a)\n      b = string.lower(b)\n   \
    \ end\n    if type(b) == 'string' then\n      b = string.lower(b)\n    end\n \
    \   if a ~= b then\n      if tonumber(a) > tonumber(b) then return b else return\
    \ a end\n    end\n  end\nend", "  if type(a) ~= type(b) then return nil end\n\
    \  if type(a) == 'string' then\n    a = a:tofloat()\n  end\n  if type(b) == 'string'\
    \ then\n    b = b:tofloat()\n  end\n  if a == b then return nil end\n  if a >\
    \ b then return 'max' elseif b > a then return 'min' end\n  return a\nend", "\t\
    if type(a) == 'number' and type(b) == 'number' then\n\t\tlocal num_a = tonumber(a)\n\
    \t\tlocal num_b = tonumber(b)\n\t\tif num_a ~= nil and num_b ~= nil then\n\t\t\
    \tif num_a > num_b then\n\t\t\t\treturn b\n\t\t\telseif num_a < num_b then\n\t\
    \t\t\treturn a\n\t\t\telse\n\t\t\t\treturn None\n\t\t\tend\n\t\tend\n\tend\n\t\
    return a\nend", "    if type(a) ~= type(b) then\n        return nil\n    end\n\
    \    if a == '0' and b == '0' then\n        return true\n    end\n    if a ==\
    \ '0' and b ~= '0' then\n        return nil\n    end\n    if a ~= b or b == 0\
    \ then\n        return true\n    end\n    return false\nend", "  local t = {}\n\
    \  table.insert(t, tonumber(a) or 0)\n  table.insert(t, tonumber(b) or 0)\n  local\
    \ one = math.abs(t[1])\n  if t[1] > t[2] or t[1] < t[2] then\n    return one or\
    \ '0'\n  end\n  if t[2] > t[3] or t[2] < t[3] then\n    return compare_one(b,\
    \ a) or '0'\n  end\n  if t[3] > t[1] and t[1] < t[3] then\n    return compare_one(a,\
    \ b) or '0'\n  end\n  return compare_one(b, a) or '0'\nend", "  if type(a) ==\
    \ 'string' then\n    a = tonumber(a)\n  end\n  if type(b) == 'string' then\n \
    \   b = tonumber(b)\n  end\n  if a ~= b then\n    return b\n  end\n  return a\n\
    end", "  if type(a) == type(b) then\n    if type(a) == \"number\" then\n     \
    \ if b == 0 then return 0 end\n      if b == 1 then return 1 end\n      if type(b)\
    \ == \"number\" then\n        if b == 0.0 or b == 1.0 then return b end\n    \
    \    if type(b) == \"string\" then\n          local s = tonumber(b)\n        \
    \  if s == nil then\n            if b == '.' then return 0 end\n            if\
    \ b == ',' then return 1 end\n            return b\n          end\n        end\n\
    \      end\n    end\n    if type(b) == \"number\" then\n      if a == 0 then return\
    \ 0 end\n      if a == 1 then return 1 end\n      if type(a) == \"number\" then\n\
    \        if a == 0.0 or a == 1.0 then return a end\n        if type(a) == \"string\"\
    \ then\n          local s = tonumber(a)\n          if s == nil then\n        \
    \    if a == '.' then return 0 end\n            if a == ',' then return 1 end\n\
    \            return a\n          end\n        end\n      end\n    end\n  end\n\
    \  return nil\nend", "  local is_a_number = tonumber(a) or tonumber(b) -- Check\
    \ if both values are numbers\n  if is_a_number then\n    -- If the values are\
    \ both numbers, compare them numerically\n    if tonumber(a) > tonumber(b) then\n\
    \      return a\n    else\n      return b\n    end\n  else\n    -- If the values\
    \ are strings, then try to convert them to a number\n    -- If they are a number,\
    \ then they are equal\n    if tonumber(a) == tonumber(b) then\n      return a\n\
    \    end\n  end\n  return nil\nend", "  if type(a) ~= 'string' and type(b) ~=\
    \ 'string' then\n    return a > b\n  end\n  if a == '1' then\n    return b\n \
    \ else\n    return a\n  end\nend", "    if a ~= b then\n        return b\n   \
    \ end\n    return a\nend", "  if type(a) == 'string' and type(b) == 'string' then\n\
    \    -- Strip the ',' for easier comparison\n    a = a:gsub(',', '')\n    b =\
    \ b:gsub(',', '')\n    -- Check if a is bigger\n    if a > b then\n      return\
    \ a\n    elseif b > a then\n      return b\n    else\n      return None\n    end\n\
    \  else\n    -- Compare as numbers\n    if a < b then\n      return a\n    elseif\
    \ b < a then\n      return b\n    else\n      return None\n    end\n  end\nend",
  "  if type(b) == 'string' then b = tonumber(b) end\n  if a == b then return end\n\
    \  return a\nend", "    if a == nil then return b end\n    if b == nil then return\
    \ a end", "    -- If the input is a real number\n    if type(b) == 'number' then\n\
    \        -- If both values are equal, return the larger variable\n        if a\
    \ == b then\n            return a\n        end\n        -- Convert strings to\
    \ real numbers and compare them\n        a = tonumber(a)\n        b = tonumber(b)\n\
    \        if a == b then\n            return a\n        end\n    end\n    -- Otherwise,\
    \ treat it like a string\n    if type(b) == 'string' then\n        a = string.match(a,\
    \ '^(-?[0-9]*)((\\.[0-9]+)?)')\n        b = string.match(b, '^(-?[0-9]*)((\\.[0-9]+)?)')\n\
    \        local a_int = tonumber(a[1])\n        local b_int = tonumber(b[1])\n\
    \        local a_float = tonumber(a[2])\n        local b_float = tonumber(b[2])\n\
    \        -- If the real numbers are equal, return the larger number\n        if\
    \ a_int == b_int and a_float == b_float then\n            return a\n        end\n\
    \    end\n    -- Otherwise, treat it like a list\n    if type(b) == 'table' then\n\
    \        a = a:sort():reverse()\n        b = b:sort():reverse()\n        if a[1]\
    \ ~= b[1] then\n            return a[1] ~= b[1]\n        end\n        if a[2]\
    \ ~= b[2] then\n            return a[2] ~= b[2]\n        end\n    end\n    return\
    \ false\nend", "  if type(a) == type(b) then\n    if a == 'string' and b == 'string'\
    \ then\n      if a == b then\n        return a\n      else\n        return nil\n\
    \      end\n    elseif a == 'string' then\n      if type(b) == 'number' then\n\
    \        return b\n      else\n        return nil\n      end\n    elseif a ==\
    \ 'number' then\n      if type(b) == 'string' then\n        return a\n      else\n\
    \        return nil\n      end\n    elseif a == 'number' then\n      if type(b)\
    \ == 'number' then\n        if a > b then\n          return b\n        else\n\
    \          return a\n        end\n      else\n        return nil\n      end\n\
    \    elseif a == 'boolean' then\n      if type(b) == 'boolean' then\n        if\
    \ a == b then\n          return a\n        else\n          return nil\n      \
    \  end\n      else\n        return nil\n      end\n    elseif a == 'table' then\n\
    \      if type(b) == 'table' then\n        if #a == #b then\n          local equal\
    \ = true\n          for k, v in pairs(a) do\n            if not compare_one(v,\
    \ b[k]) then\n              equal = false\n              break\n            end\n\
    \          end\n          return equal\n        else\n          return nil\n \
    \       end\n      else\n        return nil\n      end\n    elseif a == 'function'\
    \ then\n      if type(b) == 'function' then\n        if a:isfunction() and b:isfunction()\
    \ then\n          return compare_one(a.func, b.func)\n        else\n         \
    \ return nil\n        end\n      else\n        return nil\n      end\n    elseif\
    \ a == 'cdata' then\n      if type(b) == 'cdata' then\n        if a:iscdata()\
    \ and b:iscdata() then\n          return compare_one(a.type, b.type)\n       \
    \ else\n          return nil\n        end\n      else\n        return nil\n  \
    \    end\n    elseif a == 'cfunction' then\n      if type(b) == 'cfunction' then\n\
    \        if a:iscfunction() and b:iscfunction() then\n          return compare_one(a.func,\
    \ b.func)\n        else\n          return nil\n        end\n      else\n     \
    \   return nil\n      end\n    elseif a == 'ctype' then\n      if type(b) == 'ctype'\
    \ then\n        if a:isctype() and b:isctype() then\n          return compare_one(a.type,\
    \ b.type)\n        else\n          return nil\n        end\n      else\n     \
    \   return nil\n      end\n    else\n      assert(false)\n    end\n  else\n  \
    \  return nil\n  end\nend", "  if a ~= b then return b end\n  local a_type = type(a)\n\
    \  if a_type == number or a_type == string then\n    local function decimal_cmp(x,\
    \ y)\n      local function try_match(str)\n        local a, b, c = string.match(str,\
    \ '^(-?%d+)(,%d+)?(.%d+)?$') or { 0, 0, 0 }\n        a = tonumber(a or '0')\n\
    \        if b and tonumber(b) ~= a then return a end\n        return tonumber(c)\
    \ or a\n      end\n      return decimal_cmp(x, try_match(y) or try_match(b) or\
    \ y)\n    end\n    local function int_cmp(x, y)\n      return decimal_cmp(x, y)\
    \ or decimal_cmp(y, x)\n    end\n    return decimal_cmp(int(a), int(b)) or int_cmp(int(a),\
    \ int(b)) or int_cmp(b,a)\n  end\n  assert(a_type == float)\n  return compare_one(int(a),\
    \ int(b)) or compare_one(int(a), b)\nend", "    if type(b) == 'string' then\n\
    \        -- If the second argument is a string, first try to convert it to a\n\
    \        -- number. If that fails, assume a float or int is actually a string.\n\
    \        b = tonumber(b)\n    end\n    if a == b then\n        -- If the arguments\
    \ are the same, return that value\n        return a\n    end\n    if b == 'inf'\
    \ or b == '-inf'\n        then\n        -- If the second argument is a string\
    \ representing infinity, return a\n        -- floating point representation of\
    \ that infinity value\n        return b\n    end\n    if b == 'nan' or b == '-nan'\n\
    \        then\n        -- If the second argument is a string representing a NaN,\
    \ return a float\n        -- representation of the NaN value\n        return b\n\
    \    end\n    -- Otherwise, return the first argument if it is larger, else return\
    \ None\n    return a\nend", "  if a ~= b then return b end\n  if type(a) == 'number'\
    \ and type(b) == 'number' then\n    return a > b\n  elseif a ~= b then\n    return\
    \ a > b\n  elseif type(a) == 'string' then\n    local _, last_index = a:match('%.-%d')\n\
    \    if last_index then\n      return last_index >= b\n    end\n  end\nend", " \
    \ if type(a) == 'number' then\n    return a > b\n  elseif type(a) == 'string'\
    \ then\n    if a == '.' then\n      if b == '.' then\n        return true\n  \
    \    else\n        return false\n      end\n    elseif a == ',' then\n      if\
    \ b == ',' then\n        return true\n      else\n        return false\n     \
    \ end\n    end\n  elseif type(a) == 'table' then\n    return compare_one(a[1],\
    \ a[2])\n  end\n  return nil\nend", "  if type(a) ~= 'number' or type(b) ~= 'number'\
    \ then return end\n  if a == b then return end\n  local a_str = (type(a) == 'string')\
    \ and a:sub(1, -1) or a\n  local b_str = (type(b) == 'string') and b:sub(1, -1)\
    \ or b\n  if a_str == b_str then return end\n  if a_str < b_str then return b\
    \ end\n  return a\nend", "  if type(getmetatable(a)) ~= 'table' then\n    return\
    \ compare_one(a.tostring(), b)\n  end\n  if type(a) ~= type(b) then\n    return\
    \ false\n  end\n  local t = type(a)\n  if t == 'number' then\n    return a > b\n\
    \  elseif t == 'string' then\n    if a == '.' then\n      return true\n    elseif\
    \ a == ',' then\n      return false\n    else\n      return a..b\n    end\n  else\n\
    \    return nil\n  end\nend", "  if type(a) == 'string' then\n    a = tonumber(a)\n\
    \  end\n  if type(b) == 'string' then\n    b = tonumber(b)\n  end\n  if a == nil\
    \ then\n    return b\n  elseif type(a) ~= type(b) then\n    return nil\n  elseif\
    \ type(a) == 'number' then\n    if b < a then\n      return b\n    elseif b >\
    \ a then\n      return b\n    end\n  end\n  return a\nend", "  if type(a) == 'number'\
    \ and type(b) == 'number' then\n    if math.abs(a - b) > 1e-10 then\n      return\
    \ a\n    else\n      return b\n    end\n  elseif type(a) == 'table' or type(b)\
    \ == 'table' then\n    if a ~= b then\n      return a\n    else\n      return\
    \ b\n    end\n  elseif type(a) == 'string' and type(b) == 'string' then\n    if\
    \ a ~= b then\n      return a\n    else\n      return b\n    end\n  elseif type(a)\
    \ == 'table' and type(b) == 'number' then\n    if math.abs(a) < math.abs(b) then\n\
    \      return a\n    else\n      return b\n    end\n  elseif type(a) == 'table'\
    \ and type(b) == 'table' then\n    if compare_one(a[1], b[1]) then\n      return\
    \ compare_one(a[2], b[2])\n    else\n      return compare_one(a[3], b[3])\n  \
    \  end\n  elseif type(a) == 'string' and type(b) == 'table' then\n    if compare_one(a,\
    \ tostring(b)) then\n      return compare_one(a, 1)\n    else\n      return compare_one(a,\
    \ tostring(b))\n    end\n  else\n    return a\n  end\nend", "    if type(a) ~=\
    \ type(b) then\n        local ab = type(b)\n        return a > b and ab == float\
    \ or b > a and ab == float or tostring(a) == tostring(b) or tostring(a) > tostring(b)\n\
    \    elseif a == b then return true else return false end\nend", "  if type(b)\
    \ == 'string' then\n    return compare_one(a, repfloat(b))\n  end\n  -- If numbers\
    \ are equal, compare them directly\n  if type(a) ~= 'number' or type(b) ~= 'number'\
    \ then\n    return a > b\n  end\n  -- If the values are the same, compare them\
    \ as floats\n  if a == b then\n    return false\n  end\n  -- If we're here, they're\
    \ not equal, so return them in variable type\n  return compare_one(repfloat(a),\
    \ repfloat(b))\nend", "    if type(b) ~= 'number' then return b end\n    if a\
    \ == '.' or a == '+' then a = '0' end\n    if b == '.' or b == '+' then b = '0'\
    \ end", "\tif type(a) == 'number' and type(b) == 'number' then\n\t\tif type(b)\
    \ == 'string' then\n\t\t\tlocal a_real = tonumber(a)\n\t\t\tlocal b_real = tonumber(b)\n\
    \t\t\tif a_real and b_real then\n\t\t\t\tif a_real > b_real then\n\t\t\t\t\treturn\
    \ b\n\t\t\t\telseif a_real < b_real then\n\t\t\t\t\treturn a\n\t\t\t\telse\n\t\
    \t\t\t\treturn a\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nend", "\tif type(a)\
    \ == type(b) then\n\t\tif type(a) == \"table\" then\n\t\t\tlocal a_keys = a:keys()\n\
    \t\t\tlocal b_keys = b:keys()\n\t\t\tif #a_keys == #b_keys then\n\t\t\t\tfor i\
    \ = 1, #a_keys do\n\t\t\t\t\tlocal a_value = a_keys[i]\n\t\t\t\t\tlocal b_value\
    \ = b_keys[i]\n\t\t\t\t\tif a_value == b_value then\n\t\t\t\t\t\tcompare_one(a_value,b_value)\n\
    \t\t\t\t\telse\n\t\t\t\t\t\tif type(a_value) == \"string\" then\n\t\t\t\t\t\t\t\
    if type(a_value) == \"number\" then\n\t\t\t\t\t\t\t\tif a[i] ~= a_value or b[i]\
    \ ~= b_value then\n\t\t\t\t\t\t\t\t\treturn a_value\n\t\t\t\t\t\t\t\tend\n\t\t\
    \t\t\t\t\telse\n\t\t\t\t\t\t\t\tif a[i] ~= b_value then\n\t\t\t\t\t\t\t\t\treturn\
    \ b_value\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\telseif a[i] ~=\
    \ b_value then\n\t\t\t\t\t\t\treturn b_value\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\
    \t\t\t\tend\n\t\t\telse\n\t\t\t\tif #a_keys > #b_keys then\n\t\t\t\t\treturn b\n\
    \t\t\t\telse\n\t\t\t\t\treturn a\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\tif a\
    \ == b then\n\t\t\t\treturn a\n\t\t\telse\n\t\t\t\treturn b\n\t\t\tend\n\t\tend\n\
    \telse\n\t\tif type(a) == \"string\" then\n\t\t\tif type(b) == \"number\" then\n\
    \t\t\t\tif a:len() > b then\n\t\t\t\t\treturn a\n\t\t\t\telse\n\t\t\t\t\treturn\
    \ b\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif a == b then\n\t\t\t\t\treturn a\n\t\t\
    \t\telse\n\t\t\t\t\treturn b\n\t\t\t\tend\n\t\t\tend\n\t\telseif type(a) == \"\
    number\" then\n\t\t\tif a < b then\n\t\t\t\treturn a\n\t\t\telse\n\t\t\t\treturn\
    \ b\n\t\t\tend\n\t\tend\n\tend\nend", "\tif type(a) == type(b) then\n\t\tif b\
    \ == nil then return b end\n\t\tif type(b) == \"table\" then return compare_one(b,\
    \ a) end\n\t\tif type(b) == \"number\" then return math.max(a, b) end\n\t\tif\
    \ type(b) == \"string\" then\n\t\t\tlocal a_real = tonumber(a)\n\t\t\tlocal b_real\
    \ = tonumber(b)\n\t\t\tif a_real and b_real then\n\t\t\t\treturn math.max(a_real,\
    \ b_real)\n\t\t\telseif a_real then\n\t\t\t\treturn a_real\n\t\t\telseif b_real\
    \ then\n\t\t\t\treturn b_real\n\t\t\telse\n\t\t\t\ta = a:gsub(\",\", \".\"):gsub(\"\
    ^-\", \".\"):gsub(\"^[.]+\", \"\")\n\t\t\t\tb = b:gsub(\",\", \".\"):gsub(\"^-\"\
    , \".\"):gsub(\"^[.]+\", \"\")\n\t\t\t\treturn compare_one(a, b)\n\t\t\tend\n\t\
    \tend\n\t\tif type(b) == \"boolean\" then return b end\n\t\tif type(b) == \"function\"\
    \ then return compare_one(a, b()) end\n\telse\n\t\treturn false\n\tend\nend",
  "\tlocal a_is_number = getmetatable(a) == nil\n\tlocal b_is_number = getmetatable(b)\
    \ == nil\n\tif a_is_number and b_is_number then\n\t\tif type(a) == 'number' and\
    \ type(b) == 'number' then\n\t\t\tif a > b then return b end\n\t\t\tif a < b then\
    \ return a end\n\t\t\treturn a\n\t\telseif a ~= b then return b end\n\telseif\
    \ a ~= b then return b end\n\treturn a\nend", "  a = tonumber(a) or a\n  b = tonumber(b)\
    \ or b\n  if a == b then\n    return a\n  elseif type(a) == 'string' and b ==\
    \ '' then\n    return a\n  elseif type(b) == 'string' then\n    return b\n  elseif\
    \ type(a) == 'string' then\n    return a\n  elseif a == b then\n    return a\n\
    \  elseif type(b) == 'string' then\n    return b\n  else\n    return nil\n  end\n\
    end", "  if tonumber(a) and tonumber(b) then\n    return tonumber(a) > tonumber(b)\
    \ and a or b\n  end\n  if a == b then\n    return a\n  end\n  if tostring(a) ==\
    \ tostring(b) then\n    if a:sub(1, 1) == '\"' then\n      a = a.sub(2:-1)\n \
    \   elseif a:sub(1, 1) == '{' then\n      a = json.decode(a)\n    end\n    if\
    \ b:sub(1, 1) == '\"' then\n      b = b.sub(2:-1)\n    elseif b:sub(1, 1) == '{'\
    \ then\n      b = json.decode(b)\n    end\n    return compare_one(a, b)\n  end\n\
    \  return nil\nend", "\ta = a:gsub(',', '.')\n\tb = b:gsub(',', '.')\n\tif tonumber(a)\
    \ == tonumber(b) then return tonumber(a) end\n\tif tonumber(a) < tonumber(b) then\
    \ return b end\n\treturn a\nend", "  if type(a) == 'string' then\n    a = tonumber(a)\n\
    \  end\n  if type(b) == 'string' then\n    b = tonumber(b)\n  end\n  if type(a)\
    \ == 'number' and type(b) == 'number' then\n    if a > b then\n      return b\n\
    \    else\n      return a\n    end\n  end\n  return None\nend", "  if type(a)\
    \ ~= 'table' or type(b) ~= 'table' then\n    return nil\n  end\n  local a_n, a_f,\
    \ a_p, a_v = unpack(a)\n  local b_n, b_f, b_p, b_v = unpack(b)", "  local typeA\
    \ = type(a)\n  local typeB = type(b)\n  local is_comparable_to_string = (typeA\
    \ == 'string' or typeB == 'string') and not a:sub(1,1) and b:sub(1,1) ~= ','\n\
    \  -- Return None when the values are equal.\n  if typeA == typeB and typeA ==\
    \ 'number' and typeB == 'number' then\n    return math.max(a, b)\n  end\n  if\
    \ typeA == 'number' and typeB == 'string' then\n    a = tostring(a)\n  end\n \
    \ if typeB == 'number' and typeA == 'string' then\n    b = tostring(b)\n  end\n\
    \  -- Return None when the values are uncomparable to the given types.\n  if not\
    \ is_comparable_to_string then\n    return is_comparable_to_string\n  end\n  --\
    \ When comparing strings, the floating point might not be . or ,\n  if typeA ==\
    \ 'string' then\n    a = a:gsub(',','.')\n  end\n  if typeB == 'string' then\n\
    \    b = b:gsub(',','.')\n  end\n  -- Since we're comparing floating point values,\
    \ we must convert them to integers\n  -- first. We do so by subtracting the maximum\
    \ integer value represented by the\n  -- given variable type.\n  -- For a string,\
    \ replace the decimal dot with a comma.\n  -- For a number, replace the decimal\
    \ dot with a decimal point.\n  -- For a boolean, don't replace any dots.\n  if\
    \ typeA == 'number' then\n    a = a:gsub('.','')\n  elseif typeA == 'string' then\n\
    \    a = a:gsub(',','.')\n  end\n  if typeB == 'number' then\n    b = b:gsub('.','')\n\
    \  elseif typeB == 'string' then\n    b = b:gsub(',','.')\n  end\n  -- Since a\
    \ and b are now integers, compare them.\n  if typeA == 'number' and typeB == 'number'\
    \ then\n    return a > b\n  end\n  if typeA == 'number' and typeB == 'string'\
    \ then\n    a = a:gsub(',','.')\n  end\n  if typeB == 'number' and typeA == 'string'\
    \ then\n    b = b:gsub(',','.')\n  end\n  -- Since a and b are now integers, compare\
    \ them.\n  if typeA == 'string' and typeB == 'string' then\n    return a > b\n\
    \  end\n  if typeA == 'string' and typeB == 'number' then\n    a = a:gsub('.','')\n\
    \  end\n  if typeB == 'string' and typeA == 'number' then\n    b = b:gsub('.','')\n\
    \  end\n  -- Since ", "  if type(a) == 'number' and type(b) == 'number' then\n\
    \    if a == b then\n      return a\n    elseif type(b) == 'string' then\n   \
    \   local num1, num2 = tonumber(a), tonumber(b)\n      if num1 == num2 then\n\
    \        return a\n      else\n        return b\n      end\n    else\n      assert(false,\
    \ 'Not a real number: ' .. a .. '; ' .. b .. '; ' .. type(a))\n    end\n  else\n\
    \    assert(false, 'Not a number: ' .. type(a))\n  end\nend", "    -- We want\
    \ to compare the two variables' value types.\n    if type(a) ~= type(b) then\n\
    \        -- If they are different, we want to return the type of the larger.\n\
    \        return a if type(a) > type(b) end\n    end", "  if type(a) ~= 'table'\
    \ then a = tonumber(a) end\n  if type(b) ~= 'table' then b = tonumber(b) end\n\
    \  if a == b then return end\n  if a > b then return b else return a end\nend",
  "  if type(a) ~= 'string' or type(b) ~= 'string' then\n    return math.max(a, b)\n\
    \  end\n  local a_real, a_type = tonumber(a), type(a)\n  local b_real, b_type\
    \ = tonumber(b), type(b)\n  if a_type and b_type then\n    if a_type == b_type\
    \ then\n      return compare_one(a_real, a_type)\n    else\n      if a_type ==\
    \ 'string' and b_type == 'string' then\n        return compare_one(a_real ~= 0\
    \ and a_real ~= nil and b_real ~= 0 and b_real ~= nil, a_type)\n      end\n  \
    \  end\n  end\n  return nil\nend", "    if type(a) ~= 'number' then\n        return\
    \ compare_one(b, a -- If b is not a number, compare b.\n        )\n    elseif\
    \ type(b) ~= 'number' then\n        return compare_one(a, 1 -- If a is not a number,\
    \ compare a to 1.\n        )\n    elseif math.abs(a) == math.abs(b) then return\
    \ nil -- If a and b are equal, return nil.\n    else return math.max(a, b) --\
    \ Otherwise, return the larger number.\n    end\nend", "  if type(a) ~= 'number'\
    \ then return nil end\n  if type(b) ~= 'number' then return nil end\n  -- If numbers\
    \ and a string, check that the string is one of the numbers with\n  -- a possible\
    \ decimal point or comma in it. If it has a decimal point,\n  -- remove it so\
    \ they are the same. If it has comma, remove it and make the string\n  -- a number\
    \ by calling tonumber.\n  if type(b) == 'number' and type(a) == 'number' then\n\
    \    if b == a then return nil end\n    if type(b) == str then\n      if b ==\
    \ '.' or b == ',' then\n        return tonumber(string.format('%.*f', math.abs(b),\
    \ a))\n      else\n        return b\n      end\n    elseif type(b) == float then\n\
    \      return tonumber(string.format('%.*f', math.abs(b), a))\n    end\n  end\n\
    \  return nil\nend", "    if type(a) ~= type(b) then\n        return nil\n   \
    \ end\n    if type(a) == 'string' then\n        a = tonumber(a, 8)\n        b\
    \ = tonumber(b, 8)\n    end\n    if type(a) == 'number' then\n        if type(b)\
    \ ~= 'number' then\n            return nil\n        end\n        if b < a then\n\
    \            return b\n        end\n        if b > a then\n            return\
    \ a\n        end\n        return nil\n    end\n    if type(a) == 'boolean' then\n\
    \        if a ~= b then\n            return nil\n        end\n        return a\n\
    \    end\n    return a\nend", "  if a == b then return end\n  if type(a) ~= 'number'\
    \ then a = tonumber(a) end\n  if type(b) ~= 'number' then b = tonumber(b) end\n\
    \  if a == b then return end\n  if #a > #b then return b end\n  if #a < #b then\
    \ return a end\n  if type(a) == 'string' then\n    if b == ',' then return ''\
    \ end\n    if b == '.' then return '' end\n  else\n    if b == ',' then return\
    \ '0.' end\n    if b == '.' then return '0.' end\n  end\n  return a\nend", " \
    \   if type(a) == 'number' and type(b) == 'number' then\n        if a < b then\n\
    \            return a\n        else\n            return b\n        end\n    elseif\
    \ type(a) == 'string' then\n        if string.find(a, b) then\n            return\
    \ b\n        else\n            return a\n        end\n    elseif type(a) == 'table'\
    \ then\n        if type(b) ~= 'table' then\n            return a\n        end\n\
    \        local function compare_two(one_two)\n            for k,v in pairs(one_two)\
    \ do\n                local v_comp = compare_one(v, one_two[k])\n            \
    \    if v_comp ~= nil then\n                    return v_comp\n              \
    \  end\n            end\n        end\n        if type(b) ~= 'table' then\n   \
    \         return a\n        end\n        local function compare_two(one_two)\n\
    \            for k,v in pairs(one_two) do\n                local v_comp = compare_two(v)\n\
    \                if v_comp ~= nil then\n                    return v_comp\n  \
    \              end\n            end\n        end\n        if type(b) == 'table'\
    \ then\n            local one_two = {}\n            for k,v in pairs(a) do\n \
    \               local v_comp = compare_two(v)\n                if v_comp ~= nil\
    \ then\n                    one_two[k] = v_comp\n                end\n       \
    \     end\n            for k,v in pairs(b) do\n                local v_comp =\
    \ compare_two(v)\n                if v_comp ~= nil then\n                    one_two[k]\
    \ = v_comp\n                end\n            end\n            return one_two\n\
    \        end\n    elseif type(b) == 'table' then\n        if type(a) ~= 'table'\
    \ then\n            return a\n        end\n        local one_two = {}\n      \
    \  for k,v in pairs(a) do\n            local v_comp = compare_one(v, b[k])\n \
    \           if v_comp ~= nil then\n                one_two[k] = v_comp\n     \
    \       end\n        end\n        for k,v in pairs(b) do\n            local v_comp\
    \ = compare_one(a, v)\n            if v_comp ~= nil then\n                one_two[k]\
    \ = v_comp\n            end\n        end\n        return one_two\n    end\nend",
  "  if type(a) ~= type(b) then return end\n  local types = { int, float }\n  return\
    \ types[type(b)](a) > types[type(a)](b) and a or b\nend", "  if a == b then\n\
    \    return a\n  else\n    if type(a) == \"number\" and type(b) == \"number\"\
    \ then\n      local _a, _b = tonumber(a), tonumber(b)\n      if _a == _b then\n\
    \        return a\n      else\n        if _a > _b then\n          return b\n \
    \       else\n          return a\n        end\n      end\n    elseif type(a) ==\
    \ \"string\" and type(b) == \"string\" then\n      if a:sub(1,1) == b or b:sub(1,1)\
    \ == a then\n        return a\n      else\n        if a:sub(1,1) == \",\" then\n\
    \          return b\n        else\n          return a\n        end\n      end\n\
    \    elseif type(a) == \"table\" and type(b) == \"table\" then\n      if a:size()\
    \ == b and not (#a == #b) then\n        for i=1,#a do \n          local a1, a2\
    \ = a[i], b[i]\n          if type(a1) == \"number\" and type(a2) == \"number\"\
    \ then\n            local _a1, _a2 = tonumber(a1), tonumber(a2)\n            if\
    \ _a1 == _a2 then\n              if _a1 > _a2 then\n                return b\n\
    \              else\n                return a\n              end\n           \
    \ elseif _a1 > _a2 then\n              return b\n            else\n          \
    \    return a\n            end\n          elseif type(a1) == \"string\" and type(a2)\
    \ == \"string\" then\n            if a1 == a2 then\n              if a1 > a2 then\n\
    \                return b\n              else\n                return a\n    \
    \          end\n            else\n              if a1 > a2 then\n            \
    \    return b\n              else\n                return a\n              end\n\
    \            end\n          elseif type(a1) == \"table\" and type(a2) == \"table\"\
    \ then\n            if a1:size() == a2:size() and not (#a1 == #a2) then\n    \
    \          for j=1, #a1 do \n                if type(a1[j]) == \"number\" and\
    \ type(a2[j]) == \"number\" then\n                  local _a11, _a12 = tonumber(a1[j]),\
    \ tonumber(a2[j])\n                  if _a11 == _a12 then\n                  \
    \  if _a11 > _a12 then\n                      return b\n                    else\n\
    \                      return a\n                    end\n                  elseif\
    \ _a11 > _a12 then\n                    return b\n                  else\n   \
    \                 return a\n                  end\n                elseif type(a1[j])\
    \ == \"string\" and type(a2[j]) == \"string\" then\n                  if a1[j]\
    \ == a2[j] then\n                    if a1[j] > a2[j", "  if a == b then\n   \
    \ return nil\n  elseif type(a) == \"number\" then\n    if type(b) == \"number\"\
    \ then\n      local a_int = a\n      local b_int = b\n      if b_int == 0 then\n\
    \        return a_int\n      else\n        return b_int\n      end\n    elseif\
    \ type(b) == \"string\" then\n      local a_real = a\n      local b_real = b\n\
    \      local a_int = tonumber(a)\n      local b_int = tonumber(b)\n      if a_real\
    \ ~= b_real then\n        if a_real == \"\" and b_real == \"\" then\n        \
    \  return a_real < b_real and 1 or -1\n        else\n          return a_real <\
    \ b_real and 1 or -1\n        end\n      else\n        if a_int ~= b_int then\n\
    \          return a_int < b_int and 1 or -1\n        else\n          return a_int\
    \ == b_int and 1 or -1\n        end\n      end\n    end\n  elseif type(a) == \"\
    string\" then\n    if type(b) == \"number\" then\n      local a_real = a\n   \
    \   local b_int = b\n      local a_real = tonumber(a)\n      local b_real = tonumber(b)\n\
    \      if a_real ~= b_real then\n        return a_real > b_real and -1 or 1\n\
    \      else\n        return a_real < b_real and -1 or 1\n      end\n    elseif\
    \ type(b) == \"string\" then\n      local a_real = a\n      local b_real = b\n\
    \      local a_int = tonumber(a)\n      local b_int = tonumber(b)\n      if a_real\
    \ ~= b_real then\n        return a_real < b_real and -1 or 1\n      else\n   \
    \     return a_real < b_real and -1 or 1\n      end\n    end\n  else\n    if type(b)\
    \ == \"number\" then\n      local a_str = a\n      local b_int = b\n      local\
    \ a_str = tonumber(a_str)\n      local b_int = tonumber(b_str)\n      if a_str\
    \ ~= b_real then\n        return a_str > b_real and -1 or 1\n      else\n    \
    \    return a_str < b_real and -1 or 1\n      end\n    elseif type(b) == \"string\"\
    \ then\n      local a_real = a\n      local b_real = b\n      local a_int = tonumber(a)\n\
    \      local b_int = tonumber(b)\n      if a_real ~= ", "  if tonumber(a) == tonumber(b)\
    \ then return b end\n  if strfind(a, ',') and strfind(b, ',') then\n    return\
    \ tonumber(a)\n  end\n  if strfind(a, '.') and strfind(b, '.') then\n    return\
    \ tonumber(b)\n  end\n  if strfind(a, '-') and strfind(b, '-') then\n    return\
    \ tonumber(a)\n  end\n  if strfind(a, ':') and strfind(b, ':') then\n    return\
    \ tonumber(a)\n  end\n  if strfind(a, ':') and strfind(b, ':') then\n    return\
    \ tonumber(b)\n  end\n  return nil\nend", '    if type(a) ~= type(b) then return
    nil end', "    local is_numeric, a_is_real, b_is_real = is_numeric(a), is_numeric(b),\
    \ is_numeric(a) == is_numeric(b)\n    if is_numeric then\n        if not a_is_real\
    \ or not b_is_real or tonumber(a) > tonumber(b) then\n            return b\n \
    \       end\n        return a\n    end\n    if a..=~',' then\n        return b\n\
    \    end\n    if b..=~',' then\n        return a\n    end\n    return compare_one(a:sub(1,\
    \ #a-1), b:sub(1, #b-1))\nend", "  if type(a) == 'number' and type(b) == 'number'\
    \ then\n    if a == b then\n      return a\n    else\n      if a > b then\n  \
    \      return b\n      else\n        return a\n      end\n    end\n  end", " \
    \ if type(a) == 'number' then\n    if type(b) == 'number' then\n      -- Both\
    \ are numbers, check if one is larger.\n      if a > b then\n        return a\n\
    \      elseif a < b then\n        return b\n      end\n    end\n  elseif type(b)\
    \ == 'number' then\n    -- Both are strings, but one of them is a number represented\
    \ as a string,\n    -- check if the other is larger.\n    if a > b then\n    \
    \  return a\n    elseif a < b then\n      return b\n    end\n  end\nend", "  if\
    \ type(a) == 'number' and type(b) == 'number' then\n    if a == b then\n     \
    \ return a\n    end\n    if a < b then\n      return a\n    elseif b < a then\n\
    \      return b\n    end\n  end\n  if type(a) == 'string' and type(b) == 'number'\
    \ then\n    if tonumber(a) == tonumber(b) then\n      return a\n    end\n    if\
    \ tonumber(a) < tonumber(b) then\n      return a\n    elseif tonumber(b) < tonumber(a)\
    \ then\n      return b\n    end\n  end\n  if type(b) == 'string' and type(a) ==\
    \ 'number' then\n    if tonumber(a) == tonumber(b) then\n      return b\n    end\n\
    \    if tonumber(b) < tonumber(a) then\n      return b\n    elseif tonumber(a)\
    \ < tonumber(b) then\n      return a\n    end\n  end\n  if type(a) == 'table'\
    \ and type(b) == 'table' then\n    for k, v in pairs(a) do\n      if type(v) ==\
    \ 'number' and type(b[k]) == 'number' then\n        if v < b[k] then\n       \
    \   return k\n        end\n        if b[k] < v then\n          return k\n    \
    \    end\n      end\n      if type(v) == 'string' and type(b[k]) == 'string' then\n\
    \        if v < b[k] then\n          return k\n        end\n        if b[k] <\
    \ v then\n          return k\n        end\n      end\n      if type(v) == 'table'\
    \ and type(b[k]) == 'table' then\n        if compare_one(v, b[k]) then\n     \
    \     return k\n        end\n      end\n    end\n  end\n  if type(a) == 'table'\
    \ and type(b) == 'string' then\n    if compare_one(b, a) then\n      return a\n\
    \    end\n  end\n  if type(b) == 'table' and type(a) == 'string' then\n    if\
    \ compare_one(a, a) then\n      return b\n    end\n  end\n  if type(a) == 'number'\
    \ and type(b) == 'string' then\n    if tonumber(a) == tonumber(b) then\n     \
    \ return b\n    end\n    if tonumber(b) < tonumber(a) then\n      return b\n \
    \   elseif tonumber(a) < tonumber(b) then\n      return a\n    end\n  end\n  if\
    \ type(a) == 'number' and type(b) == 'table' then\n    if tonumber(a) == tonumber(b)\
    \ then\n      return b\n    end\n    if tonumber(b) < tonumber(a) then\n     \
    \ return b\n    elseif tonumber(a) < tonumber(b) then\n      return a\n    end\n",
  "    if a == b then return nil end\n    if type(b) == 'number' and a ~= b then return\
    \ nil end\n    if type(b) == 'string' then\n        local pattern = string.format('^([0-9.]+)(%s)$',\
    \ type(a))\n        if a:match(pattern) then\n            return a:match(pattern):gsub('%S+',\
    \ function(x) x:reverse():reverse())\n        else\n            return nil\n \
    \       end\n    end\n    return a\nend", "  if type(a) == 'number' and type(b)\
    \ == 'number' then\n    return a > b\n  elseif type(a) == 'string' then\n    return\
    \ tonumber(a) > tonumber(b)\n  elseif type(b) == 'string' then\n    return tonumber(a)\
    \ > tonumber(b)\n  elseif type(a) == 'table' then\n    for _, v in pairs(a) do\n\
    \      if compare_one(v, b) then\n        return true\n      end\n    end\n  \
    \  return false\n  else\n    return false\n  end\nend", "  if a ~= b then return\
    \ b end\n  if type(a) == 'number' then return math.max(a,b) end\n  local a_s =\
    \ string.gsub(a, '[^0-9.-]', '');\n  local b_s = string.gsub(b, '[^0-9.-]', '');\n\
    \  if a_s == b_s then return string.gsub(a, '^,.-', '')\n  else\n    if b_s ==\
    \ '' then return string.gsub(a, '^,.-', '') end\n  end\n  return None\nend", "\t\
    local a_type = type(a)\n\tlocal b_type = type(b)", "  if type(a) == type(b) then\n\
    \    if a == b then\n      return nil\n    end\n    local a_type = type(a)\n \
    \   local b_type = type(b)\n    if a_type == b_type then\n      if a_type == 'number'\
    \ or a_type == 'boolean' then\n        if tonumber(a) == tonumber(b) then\n  \
    \        return a\n        end\n      elseif a_type == 'string' then\n       \
    \ if a:match(',') ~= nil or a:match('%f') ~= nil then\n          if tonumber(tonumber(a))\
    \ == tonumber(tonumber(b)) then\n            return a\n          end\n       \
    \ end\n      end\n    end\n  end\n  return a\nend", "    if type(a) == 'string'\
    \ then\n        a = string.match(a, '%w+')\n    end\n    if type(b) == 'string'\
    \ then\n        b = string.match(b, '%w+')\n    end\n    if type(a) == 'string'\
    \ and type(b) == 'string' then\n        a = a:tofloat()\n        b = b:tofloat()\n\
    \    end\n    if a ~= b then\n        return b\n    else\n        return a\n \
    \   end\nend", "  if a == b then return end\n  if tostring(a) == tostring(b) then\n\
    \    return b\n  end\n  return a\nend", "  local convert = function(t)\n    if\
    \ type(t) == 'number' then\n      if t == b then return end\n      if t == a then\
    \ return 'equal' end\n    end\n    if type(t) == 'string' then\n      local s\
    \ = string.format('%g', tonumber(t))\n      if s == b then return end\n      if\
    \ s == a then return 'equal' end\n    end\n  end", "  local t = type(a)\n  if\
    \ t == 'number' and b == a then return t end\n  if t ~= 'number' and b == '' then\
    \ return t end\n  if t ~= 'string' and a == '' then return t end\n  if t == 'string'\
    \ and b == '' then return t end\n  if t == 'number' and b == '' then return t\
    \ end\n  return b\nend", "  if tonumber(a) == tonumber(b) then return tonumber(a)\
    \ end\n  if a == '' and b == '' then return 0 end\n  if a == '' and b == '0' then\
    \ return 0 end\n  if a == '0' and b == '' then return 0 end\n  if a == '' and\
    \ b == '0' then return 0 end\n  if a == '1' and b == '1' then return 0 end\n \
    \ if a == '1' and b == '1' then return 0 end\n  if a == '' and b == '1' then return\
    \ 0 end\n  if a == b and b == '' then return 0 end\n  if a == b and b == '0' then\
    \ return 0 end\n  if a == b and b == '' then return 0 end\n  if a == b and b ==\
    \ '0' then return 0 end\n  if a == b and b == '' then return 0 end\n  if a ==\
    \ b and b == '0' then return 0 end\n  if a == '' and b == 0 then return 0 end\n\
    \  if a == '0' and b == 0 then return 0 end\n  if a == '' and b == 0 then return\
    \ 0 end\n  if a == '0' and b == 0 then return 0 end\n  if a == '' and b == 0 then\
    \ return 0 end\n  if a == '0' and b == 0 then return 0 end\n  if a == '' and b\
    \ == '0' then return 0 end\n  if a == '1' and b == 1 then return 0 end\n  if a\
    \ == '1' and b == 1 then return 0 end\n  if a == '' and b == 1 then return 0 end\n\
    \  if a == b and b == 1 then return 0 end\n  if a == b and b == 1 then return\
    \ 0 end\n  if a == b and b == '1' then return 0 end\n  if a == b and b == '1'\
    \ then return 0 end\n  if a == b and b == '' then return 0 end\n  if a == b and\
    \ b == '' then return 0 end\n  if a == b and b == '0' then return 0 end\n  if\
    \ a == b and b == '0' then return 0 end\n  if a == b and b == '' then return 0\
    \ end\n  if a == b and b == '0' then return 0 end\n  if a == b and b == '' then\
    \ return 0 end\n  if a == b and b == '0' then return 0 end\n  if a == b and b\
    \ == '' then return 0 end\n  if a == b and b == '0' then return 0 end\n  if a\
    \ == '' and b == 0 then return 0 end\n  if a == '0' and b == 0 then return 0 end\n\
    \  if a == '' and b == 0 then return 0 end\n  if a == '0' and ", "  if type(a)\
    \ == 'string' then\n    a = a:gsub(',', '.'):gsub('.', ',')\n  end\n  if type(b)\
    \ == 'string' then\n    b = b:gsub(',', '.'):gsub('.', ',')\n  end\n  return a\
    \ > b and a or b\nend", "  if a == b or a == '' or b == '' then\n    return nil\n\
    \  end", "\tif type(a) ~= 'number' or type(b) ~= 'number' then return end\n\t\
    if type(a) == 'string' and b == '.' or b == ',' then return end\n\tif a > b then\
    \ return 'greater' end\n\tif a == b then return 'equal' end\n\tif a < b then return\
    \ 'less' end\nend", "    if a == '' or b == '' then return nil end\n    if tonumber(a)\
    \ == tonumber(b) then return b\n    else return a end\nend", "  if type(a) ==\
    \ 'string' then\n    if a == b then return true end\n  elseif type(b) == 'string'\
    \ then\n    if a == b then return true end\n  end\n  if type(a) == 'table' and\
    \ type(b) == 'table' then\n    for i, v in ipairs(a) do\n      if compare_one(v,\
    \ table.get(b, i, nil)) then\n        return true\n      end\n    end\n  elseif\
    \ type(a) == 'number' and type(b) == 'number' then\n    return math.max(a, b)\n\
    \  elseif type(a) == 'number' then\n    return a\n  elseif type(b) == 'number'\
    \ then\n    return b\n  end\n  return nil\nend", "  if a == b or a == '' or b\
    \ == '' then\n    return nil\n  end\n  if a==b and type(b) ~= 'string' then\n\
    \    return a\n  elseif a:find(b) then\n    return b\n  else\n    return a\n \
    \ end\nend", "  if type(a) ~= type(b) then\n    return nil\n  end\n  if type(a)\
    \ == \"string\" then\n    if a == b then\n      return true\n    end\n    return\
    \ false\n  end\n  local a_int = tonumber(a)\n  local b_int = tonumber(b)\n  if\
    \ a_int == b_int  then\n    return true\n  end\n  return false\nend", "    if\
    \ a == b then\n        return a\n    elseif type(a) == type(table) then\n    \
    \    for k,v in pairs(a) do\n            if compare_one(b,v) then\n          \
    \      return k\n            end\n        end\n    end", "  local t, _ = type(a)\n\
    \  if t == 'string' or t == 'number' then\n    return a\n  elseif t ~= 'table'\
    \ then\n    return a\n  end\n  local a_ = a.value\n  local b_ = b.value\n  if\
    \ a_ == b_ then\n    return nil\n  end\n  if a_ < b_ then\n    return a\n  end\n\
    \  return b\nend", "  local __eq = type(a)==type(b) and function(x,y) return x==y\
    \ end or function(x,y) return a==b and false or x ~= y end\n  local __lt__ = type(a)==type(b)\
    \ and function(x,y) return x<y end or function(x,y) return a<b and true or x~=y\
    \ end\n  local __gt__ = type(a)==type(b) and function(x,y) return x>y end or function(x,y)\
    \ return a>b and false or x~=y end\n  local __lte__ = type(a)==type(b) and function(x,y)\
    \ return x<=y end or function(x,y) return a<=b and true or x~=y end\n  local __gte__\
    \ = type(a)==type(b) and function(x,y) return x>=y end or function(x,y) return\
    \ a>=b and false or x~=y end\n  local __eq = type(a)==type(b) and function(a,b)\
    \ return a==b end or function(a,b) return a~=b and true or a==b end\n  local __lt\
    \ = type(a)==type(b) and function(a,b) return a<b end or function(a,b) return\
    \ a~=b and false or a<b end\n  local __gt = type(a)==type(b) and function(a,b)\
    \ return a>b end or function(a,b) return a~=b and true or a>b end\n  local __lte\
    \ = type(a)==type(b) and function(a,b) return a<=b end or function(a,b) return\
    \ a~=b and false or a<=b end\n  local __gte = type(a)==type(b) and function(a,b)\
    \ return a>=b end or function(a,b) return a~=b and true or a>=b end\n  return\
    \ __eq and __eq(a, b) or __lt__(a, b) or __gt__(a, b) or __lte__(a, b) or __gte__(a,\
    \ b) or __eq(a, b) or __lt(a, b) or __gt(a, b) or __lte(a, b) or __gte(a, b)\n\
    end\nreturn compare_one\n})()\n</code>\nI used this function to compare two tables\
    \ (which are stored in variable table1 as key and table2 as value) in the following\
    \ manner:\n<code>\nfor k, v in pairs(table1) do\n  if compare_one(table1[k], table2[k])\
    \ == true then\n    table.insert(table3_new, k)\n  end\nend\n</code>\nI hope this\
    \ is useful to some beginners.\n<|/ a tags=lua dscore=1 ", "  if type(a) == 'number'\
    \ and type(b) == 'number' then\n    return a > b\n  elseif type(a) == 'string'\
    \ and type(b) == 'string' then\n    return a > b\n  else\n    return false\n \
    \ end\nend", "  if type(a) == 'number' then\n    if type(b) ~= 'number' then\n\
    \      return a\n    elseif b == 0 then\n      return a\n    end\n  elseif type(b)\
    \ == 'number' then\n    if type(a) ~= 'number' then\n      return b\n    elseif\
    \ a == 0 then\n      return b\n    end\n  end\n  if type(a) == 'string' then\n\
    \    if type(b) ~= 'string' then\n      return a\n    elseif b:find(',') ~= nil\
    \ then\n      return b\n    else\n      a = tonumber(a)\n      b = tonumber(b)\n\
    \      if a ~= b then\n        return a\n      end\n    end\n  end\n  return nil\n\
    end", "  if type(a) == 'number' and type(b) == 'number' and a < b then\n    return\
    \ a\n  elseif type(a) == 'string' and type(b) == 'string' then\n    if tonumber(a)\
    \ < tonumber(b) then\n      return a\n    else\n      return b\n    end\n  elseif\
    \ type(a) == 'table' and type(b) == 'table' then\n    if a[1] == b[1] then\n \
    \     return compare_one(a[2], b[2])\n    else\n      return nil\n    end\n  else\n\
    \    return nil\n  end\nend\ncompare_one = compare_one", "  local t1 = type(a\
    \ or b)\n  local t2 = t1 or 'number'\n  local f1 = tonumber(a)\n  local f2 = tonumber(b)\n\
    \  if f1 == f2 then return nil end\n  if t1 ~= 'number' or t2 ~= 'number' then\
    \ return nil end\n  if t2 ~= t1 then return nil end\n  return a > b end\nend",
  "  if type(a) ~= type(b) then return false end\n  if type(a) == 'number' and b ==\
    \ 'number' then return b <= a end\n  if type(a) == 'string' and b == 'string'\
    \ then return b ~= a end\n  if type(a) == 'table' and b == 'table' then return\
    \ compare_one(a.number, b.number) end\n  assert(false)\nend", "  if type(b) ~=\
    \ 'string' then return b end\n  if type(a) ~= 'string' then return a end\n  if\
    \ a == b then return nil end\n  if #a > #b then\n    return a\n  else\n    return\
    \ b\n  end\nend", "  local a_type, a_real = pcall(function() return type(a) end)\n\
    \  local b_type, b_real = pcall(function() return type(b) end)", "  -- If the\
    \ inputs are both strings, convert them to floats.\n  if type(a) == 'string' and\
    \ type(b) == 'string' then\n    a = tonumber(a)\n    b = tonumber(b)\n    -- If\
    \ the converted values do not match up, return None.\n    if type(a) != type(b)\
    \ then\n      return nil\n    end\n  end", "  if type(a) == 'string' then\n  \
    \  a = tonumber(a)\n  end\n  if type(b) == 'string' then\n    b = tonumber(b)\n\
    \  end\n  return b > a or b == a and b or nil\nend", "  if tonumber(a) == tonumber(b)\
    \ then\n    return a\n  elseif type(a) == 'string' then\n    return tonumber(b)\n\
    \  end\nend", "    local t1 = type(a)\n    local t2 = type(b)", "  local a_type,\
    \ b_type, a_value, b_value, a_str, b_str = unpack(\n    (a or \"\"), (b or \"\"\
    ))", "    if type(a) == 'number' and type(b) == 'number' then\n        if a >\
    \ b then\n            return a\n        end\n        if a == b then\n        \
    \    return a\n        end\n        return b\n    end\n    if type(a) == 'string'\
    \ and type(b) == 'string' then\n        if a ~= b then\n            return a\n\
    \        end\n        return b\n    end\n    return nil\nend", "    if type(a)\
    \ ~= type(b) then return nil end\n    if a == '.' or b == '.' then return a ==\
    \ b end\n    return tostring(a) > tostring(b)\nend", "  local na, nb = tonumber(a),\
    \ tonumber(b)\n  if na and nb then\n    if na >= nb then return 'a' end\n    if\
    \ na < nb then return 'b' end\n  end\n  if a == '\"' then return b end\n  if b\
    \ == '\"' then return a end\n  if a == '-' or b == '-' then\n    if tonumber(a)\
    \ == tonumber(b) then return 'a' end\n  end\n  if tonumber(a) == tonumber(b) then\
    \ return 'a' end\n  if a == '.' or b == '.' then\n    if tonumber(a) == tonumber(b)\
    \ then return 'a' end\n  end\n  if a == '(' and b == ')' then return 'a' end\n\
    \  if a == '+' or b == '+' then\n    if tonumber(a) == tonumber(b) then return\
    \ 'a' end\n  end\n  if a == '/' and b == '/' then return 'a' end\n  if a == '*'\
    \ and b == '*' then return 'a' end\n  if tonumber(a) == tonumber(b) then return\
    \ 'a' end\nend", "  if a ~= b then\n    return a\n  end\n  if type(a) == 'number'\
    \ and type(b) == 'number' then\n    if math.abs(a - b) <= math.abs(a) * tolerance\n\
    \    or (math.abs(a) < math.abs(b) and string.find(b, '.') == -1) then\n     \
    \ return b\n    else\n      return a\n    end\n  end\n  if type(a) == 'string'\
    \ and type(b) == 'string' then\n    if string.find(a, ',') ~= -1 and string.find(b,\
    \ ',') ~= -1 then\n      local a_array = string.split(a, ',')\n      local b_array\
    \ = string.split(b, ',')\n      if #a_array == #b_array then\n        for i =\
    \ 1, #a_array do\n          local a_value = tonumber(a_array[i])\n          local\
    \ b_value = tonumber(b_array[i])\n          if not compare_one(a_value,b_value)\
    \ then\n            return a_array[i]\n          end\n        end\n      else\n\
    \        local a_value = tonumber(a)\n        local b_value = tonumber(b)\n  \
    \      if not compare_one(a_value,b_value) then\n          return a\n        end\n\
    \      end\n    end\n  end\n  if type(a) == 'table' and type(b) == 'table' then\n\
    \    if #a == #b then\n      for i = 1, #a do\n        local a_value = a[i] or\
    \ nil\n        local b_value = b[i] or nil\n        if not compare_one(a_value,b_value)\
    \ then\n          return a_value\n        end\n      end\n    else\n      return\
    \ a\n    end\n  end\n  if a ~= b then\n    return a\n  end\nend", "    if type(a)\
    \ ~= 'number' or type(b) ~= 'number' then return nil end", "  if a==b then return\
    \ end\n  if type(a) == 'number' and type(b) == 'number' then\n    if a==0 and\
    \ b==0 then return end\n    return a>b and a or 'b'\n  end\n  if type(a) == 'string'\
    \ and type(b) == 'string' then\n    return compare_one(a.strip(), b.strip())\n\
    \  end\nend", "  local typea, typeb = type(a), type(b)\n  if typea == typeb then\n\
    \    if typea == 'string' then\n      if a:find('^[%z\\1-\\255]$') then\n    \
    \    a, b = b:gsub(',', '.'):gsub('.$', '')\n        return a\n      elseif b:find('^[%z\\\
    1-\\255]$') then\n        a, b = a:gsub(',', '.'):gsub('.$', '')\n        return\
    \ b\n      end\n    end\n    if typea == 'table' then\n      if typeof(a) == typeof(b)\
    \ then\n        for k, v in pairs(a) do\n          local v2, _ = compare_one(b,\
    \ v)\n          if v2 then return v2 end\n        end\n        for k, v in pairs(b)\
    \ do\n          local v2, _ = compare_one(a, v)\n          if v2 then return v2\
    \ end\n        end\n      elseif typeof(b) == typeof(a) then\n        for k, v\
    \ in pairs(b) do\n          local v2, _ = compare_one(a, v)\n          if v2 then\
    \ return v2 end\n        end\n        for k, v in pairs(a) do\n          local\
    \ v2, _ = compare_one(b, v)\n          if v2 then return v2 end\n        end\n\
    \      end\n    end\n  else\n    return a\n  end\n  return b\nend", "    local\
    \ t1, t2 = type(a), type(b)\n    if t1 ~= t2 then\n        return t1\n    end\n\
    \    if type(a) == 'number' and type(b) == 'number' then\n        return a > b\
    \ end\n    if type(a) == 'number' then\n        return 'number'\n    end\n   \
    \ if type(b) == 'number' then\n        return 'number'\n    end\n    if a == 'string'\
    \ then\n        return 'string'\n    end\n    if b == 'string' then\n        return\
    \ 'string'\n    end\n    if type(a) == 'table' then\n        local keys = {}\n\
    \        for k, v in pairs(a) do\n            keys[k] = true\n        end\n  \
    \      for k, v in pairs(b) do\n            if k ~= '__type' and k ~= '__index'\
    \ and keys[k] == true then\n                if compare_one(v, a[k]) == true then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n        return false\n    end\n    return a\nend", "  local t1, t2, t3,\
    \ t4, t5\n  if type(a) == 'number' then\n    if type(b) == 'number' then\n   \
    \   if a == b then\n        return a\n      else\n        return b\n      end\n\
    \    end\n  else\n    if type(b) == 'number' then\n      return a\n    else\n\
    \      return b\n    end\n  end\nend", "  if type(a) == 'number' then\n    return\
    \ type(b) == 'number' and a > b\n  end\n  if type(b) == 'number' then\n    return\
    \ type(a) == 'number' and a < b\n  end\n  if type(a) == 'table' and type(b) ==\
    \ 'table' then\n    local type_b = type(b)\n    if type_b == 'number' then\n \
    \     return type(a) == 'number' and a.x > b.x\n    end\n    if type_b == 'string'\
    \ then\n      return type(a) == 'string' and a > b\n    end\n    if type_b ==\
    \ 'table' then\n      return type(a) == 'table' and a.x > b.x\n    end\n  end\n\
    end", "    if type(a) ~= type(b) then\n        return nil\n    end\n    if type(a)\
    \ == \"string\" then\n        a = tonumber(a)\n        b = tonumber(b)\n    end\n\
    \    return a > b and a or b\nend", "  if a == b then return end\n  if type(a)\
    \ == type(b) then return compare_number(a, b) end\n  if type(b) == 'string' then\
    \ return compare_number(tonumber(a), tonumber(b)) end\n  return compare_number(tonumber(a),\
    \ tonumber(b))\nend", "  a = tonumber(a)\n  b = tonumber(b)\n  if a ~= nil and\
    \ b ~= nil then\n    if a > b then\n      return b\n    elseif a == b then\n \
    \     return a\n    else\n      return a\n    end\n  elseif a ~= nil then\n  \
    \  return a\n  elseif b ~= nil then\n    return b\n  end\nend", "  if type(a)\
    \ == 'number' and type(b) == 'number' then\n    if math.abs(a - b) > 0.000000001\
    \ then\n      return a\n    end\n  else\n    if a == b then\n      return a\n\
    \    end\n  end\nend", "  if type(a) == 'number' then\n    if type(b) == 'number'\
    \ then\n      if math.abs(a - b) <= precision then\n        return b\n      else\n\
    \        return a\n      end\n    end\n  end\n  if type(a) == 'string' then\n\
    \    if type(b) == 'string' then\n      if a:find(b) ~= nil then\n        return\
    \ b\n      else\n        return a\n      end\n    end\n  end\nend", "  if tonumber(a)\
    \ then a = tonumber(a) end\n  if tonumber(b) then b = tonumber(b) end\n  if a\
    \ == b then return end\n  if tonumber(a) then a = '\"' .. a .. '\"'\n  else a\
    \ = string.format('%q', a) end\n  if tonumber(b) then b = '\"' .. b .. '\"'\n\
    \  else b = string.format('%q', b) end\n  if a~=b then return end\n  if type(a)\
    \ == 'table' then\n    for _, v in pairs(a) do\n      if type(b) == 'table' then\n\
    \        for _, bv in pairs(b) do\n          local a2 = compare_one(v, bv)\n \
    \         if a2 then return a2 end\n        end\n      else\n        local a2\
    \ = compare_one(v, b)\n        if a2 then return a2 end\n      end\n    end\n\
    \  else\n    return b\n  end\nend", "  local a_, b_ = type(a), type(b)\n  if a_\
    \ == b_ then return a end\n  if a_ == 'number' and b_ == 'number' then return\
    \ max(a, b) end\n  if a_ == 'string' and b_ == 'string' then\n    local a_res\
    \ = a\n    local b_res = b\n    if a_res == '.' or a_res == ',' then a_res = '0'\
    \ end\n    if b_res == '.' or b_res == ',' then b_res = '0' end\n    if a_res\
    \ == '0' or b_res == '0' then return nil end\n    return a_res > b_res and a or\
    \ b\n  end\n  return nil\nend", "  if type(a) ~= type(b) then return false end\n\
    \  if type(a) == 'string' then\n    return compare_one(a, tonumber(b))\n  end\n\
    \  if type(a) == 'number' then\n    return math.max(a,b) == math.min(a,b)\n  end\n\
    end", "  if type(a) == 'number' and type(b) == 'number' then\n    if math.abs(a)\
    \ < math.abs(b) then\n      return a\n    end\n    if math.abs(b) < math.abs(a)\
    \ then\n      return b\n    end\n  end\n  return a == b -- Note: This is not the\
    \ same as return b == a.\nend", "  if type(b) == 'number' then\n    if type(a)\
    \ == 'number' then\n      if a >= b then return b end\n      return a\n    end\n\
    \    return a\n  elseif type(b) == 'string' then\n    if type(a) == 'string' then\n\
    \      local a_real = tonumber(a)\n      local b_real = tonumber(b)\n      if\
    \ a_real ~= nil and b_real ~= nil then\n        if a_real > b_real then return\
    \ b end\n        return a\n      end\n    end\n    return a\n  end\n  return a\n\
    end", '  if type(a) ~= type(b) then return end', "  if a == b then\n    return\
    \ a\n  elseif b == nil then\n    return a\n  elseif a ~= b then\n    return b\n\
    \  else\n    return nil\n  end\nend", "   if a == b then\n      return a\n   elseif\
    \ type(b) == 'number' then\n      return a\n   elseif type(b) == 'string' then\n\
    \      local a_ = tonumber(a) or tonumber(b)\n      if a_ then\n         return\
    \ a\n      else\n         return b\n      end\n   else\n      return nil\n   end\n\
    end", "  local is_number\n  local a_type = type(a)\n  local b_type = type(b)\n\
    \  local is_number = a_type == \"number\" and b_type == \"number\"\n  if is_number\
    \ then\n    if a == b then return end\n    if tostring(a) == tostring(b) then\
    \ return end\n    return tostring(a) > tostring(b) and a or b\n  end\n  if a_type\
    \ == \"string\" then\n    if a == b then return end\n    if string.find(tostring(a),\
    \ tostring(b)) then return end\n    if string.find(tostring(b), tostring(a)) then\
    \ return end\n    return a..\" > \"..b\n  end\n  if a_type == \"table\" then\n\
    \    for _, v in ipairs(a) do\n      local v_type = type(v)\n      if v_type ~=\
    \ \"table\" then\n        if compare_one(v, b) then return end\n      else\n \
    \       if compare_one(a[v], b[v]) then return end\n      end\n    end\n  end\n\
    \  if b_type == \"table\" then\n    for _, v in ipairs(b) do\n      local v_type\
    \ = type(v)\n      if v_type ~= \"table\" then\n        if compare_one(a, v) then\
    \ return end\n      else\n        if compare_one(a[v], b[v]) then return end\n\
    \      end\n    end\n  end\n  if a == b then return end\n  if tostring(a) == tostring(b)\
    \ then return end\n  return tostring(a) > tostring(b) and a or b\nend", "  if\
    \ type(a) ~= 'number' or type(b) ~= 'number' then return end\n  -- Special case\
    \ for 1 and -1 as they are usually the same\n  if a == 1 or b == 1 then return\
    \ '1' end\n  if a == -1 or b == -1 then return '-1' end\n  -- Special case for\
    \ 0\n  if a == 0 then return '0' end\n  if b == 0 then return '0' end\n  -- If\
    \ both are strings, return the first one alphabetically\n  if type(a) == 'string'\
    \ and type(b) == 'string' then\n    local a_string = a:lower()\n    local b_string\
    \ = b:lower()\n    if a_string < b_string then return '-1' end\n    if a_string\
    \ > b_string then return '1' end\n    -- If both are ints, just compare the numbers\n\
    \    return a\n  end\n  -- If both are ints, compare the numbers\n  if type(a)\
    \ == 'number' and type(b) == 'number' then return compare_num(a, b) end\n  if\
    \ type(a) == 'string' and type(b) == 'number' then\n    if a:lower() < b:lower()\
    \ then return '-1' end\n    if a:lower() > b:lower() then return '1' end\n   \
    \ -- If both are strings, compare the alphabetically\n    return a\n  end\n  if\
    \ type(a) == 'number' and type(b) == 'string' then\n    return compare_num(b,\
    \ a)\n  end\n  if type(a) == 'string' and type(b) == 'string' then\n    return\
    \ compare_alphanum(a, b)\n  end\n  if type(a) == 'number' and type(b) == 'string'\
    \ then\n    return compare_alphanum(b, a)\n  end\nend", "  if type(a) ~= 'number'\
    \ or type(b) ~= 'number' then\n    return nil\n  end\n  if a > b then\n    return\
    \ a\n  elseif a < b then\n    return b\n  elseif a == b then\n    return a\n \
    \ end\nend", "  if a == b then return end\n  local type = type(a)\n  if type ==\
    \ 'string' and b == '-' and a == '' then\n    return b\n  elseif type == 'number'\
    \ then\n    return compare_int(compare_float(a), compare_float(b))\n  elseif type\
    \ == 'table' then\n    if a ~= b then\n      for k,v in pairs(a) do\n        if\
    \ a[k] ~= b[k] then\n          return k\n        end\n      end\n    end\n   \
    \ return nil\n  elseif type == 'boolean' then\n    return a > b\n  else\n    --\
    \ a is a table or nil\n    if a ~= b then\n      return nil\n    end\n  end\n\
    \  return a\nend", "   if type(a) ~= type(b) then return end\n   if type(a) ==\
    \ \"number\" and type(b) == \"number\" then\n      return math.max(a, b)\n   elseif\
    \ type(a) == \"string\" then\n      local a_real = a:match(\"^-?%d+.-?%d*$\")\n\
    \      local b_real = b:match(\"^-?%d+.-?%d*$\")\n      if a_real and b_real then\n\
    \         local a_real = tonumber(a_real)\n         local b_real = tonumber(b_real)\n\
    \         return math.max(a_real, b_real)\n      else\n         if a_real then\n\
    \            return a_real\n         else\n            return b\n         end\n\
    \      end\n   else\n      return a\n   end\nend", "  local a_str = type(b) ==\
    \ 'string' and b or tostring(b)\n  local a_val = tonumber(a)\n  local b_val =\
    \ tonumber(a_str)\n  if a_val == b_val then\n    return a_val\n  elseif not a_val\
    \ then\n    return a_str\n  elseif not b_val then\n    return b_str\n  else\n\
    \    return a_val > b_val and a_str or b_str\n  end\nend", "  if type(a) ~= 'number'\
    \ or type(b) ~= 'number' then return end\n  local a_str = _to_str(a)\n  local\
    \ b_str = _to_str(b)\n  if a_str == b_str then return end\n  if a_str == '.' then\
    \ return b end\n  if b_str == '.' then return a end\n  if a_str == ',' then return\
    \ b end\n  if b_str == ',' then return a end\n  local a_decimal, a_whole = a:split('.')\n\
    \  local b_decimal, b_whole = b:split('.')\n  if a_decimal == b_decimal then return\
    \ a\n    if a_whole == b_whole then return a\n      local a_whole_int = _to_int(a_whole)\n\
    \      local b_whole_int = _to_int(b_whole)\n      if a_whole_int == b_whole_int\
    \ then return a\n        if a_whole < b_whole then return b\n          elseif\
    \ a_whole > b_whole then return a\n          end\n      end\n    end\n  end\n\
    \  if a < b then return b end\n  if a > b then return a end\nend", "  a = tostring(a)\n\
    \  b = tostring(b)", "    -- convert string representations of numbers to a number\n\
    \    if b == a then\n        return a\n    end", "  if a == b then\n    return\
    \ nil\n  elseif not tonumber(a) then a = tonumber(a) end\n  if tonumber(b) then\
    \ b = tonumber(b) end\n  if a ~= b and a > b then\n    return b\n  elseif a <\
    \ b then\n    return a\n  else\n    return nil\n  end\nend", "  if type(a) ~=\
    \ 'string' then return a else a = a:gsub(',','.') end\n  if type(b) ~= 'string'\
    \ then return b else b = b:gsub(',','.') end\n  return a > b\nend", "    if type(a)\
    \ == 'number' then\n        if type(b) == 'number' then\n            return a\
    \ > b\n        else\n            return a\n        end\n    elseif type(a) ==\
    \ 'string' then\n        if type(b) == 'number' then\n            return tonumber(a)\
    \ > b\n        else\n            return a\n        end\n    elseif type(a) ==\
    \ 'table' then\n        if type(b.x) == 'number' and type(b.y) == 'number' then\n\
    \            return compare_one(b.x, b.y)\n        elseif type(a) == 'table' then\n\
    \            return compare_one(a.x, b.x)\n        elseif type(b) == 'table' then\n\
    \            return compare_one(a.y, b.y)\n        end\n    else\n        return\
    \ a\n    end\nend", "  if type(a) == 'table' and type(b) == 'table' then\n   \
    \ local akeys, bkeys = pcall(function() pairs(a) end)\n    for k, k in ipairs(akeys)\
    \ do\n      if a[k] == b then\n        return k\n      elseif a[k] ~= b then\n\
    \        return nil\n      end\n    end\n    for k, k in ipairs(bkeys) do\n  \
    \    if a[k] == b then\n        return k\n      elseif a[k] ~= b then\n      \
    \  return nil\n      end\n    end\n  elseif type(a) == 'number' and type(b) ==\
    \ 'number' then\n    if a < b then\n      return a\n    elseif b < a  then\n \
    \     return b\n    elseif a == b then\n      return a\n    else\n      return\
    \ nil\n    end\n  elseif type(a) == 'string' and type(b) == 'string' then\n  \
    \  if a ~= b then\n      return nil\n    end\n  end\n  return nil\nend", "   \
    \ if type(a) ~= 'number' or type(b) ~= 'number' then\n        return false\n \
    \   end\n    if a == b then\n        return true\n    end\n    if a ~= b and a\
    \ ~= '[\" \" and \"]' and b != '[\" \" and \"]' then\n        a = tonumber(a)\n\
    \        b = tonumber(b)\n    end\n    if a == nil and b == nil then\n       \
    \ return true\n    end\n    if a ~= b and a ~= '[\" \" and \"]' and b != '[\"\
    \ \" and \"]' then\n        if type(a) ~= type(b) then\n            return false\n\
    \        end\n        if type(a) == 'string' then\n            return a~=b\n \
    \       else\n            return a > b\n        end\n    end\n    if type(a) ==\
    \ 'number' and type(b) == 'string' then\n        return tonumber(a) > tonumber(b)\n\
    \    end\n    if type(a) == 'string' and type(b) == 'number' then\n        return\
    \ tonumber(a) > b\n    end\n    if type(a) == 'number' and type(b) == 'number'\
    \ then\n        return a > b\n    end\n    if a == '\"' and b == '\"' then\n \
    \       return true\n    end\n    return false\nend", "  if a ~= b then\n    if\
    \ type(a) == 'number' and type(b) == 'number' then\n      if math.abs(a - b) <\
    \ 1e-9 then return 'equal' end\n      if math.abs(a - b) < 1e-6 then return 'equal'\
    \ end\n      if math.abs(a - b) < 1e-3 then return 'equal' end\n      if math.abs(a\
    \ - b) < 1e-2 then return 'equal' end\n      if math.abs(a - b) < 1e-1 then return\
    \ 'equal' end\n      if math.abs(a - b) < 0.01 then return 'equal' end\n     \
    \ if math.abs(a - b) < 0.001 then return 'equal' end\n      if math.abs(a - b)\
    \ < 0.0001 then return 'equal' end\n    end\n    if type(a) == 'string' then\n\
    \      if a == b then return 'equal' end\n    end\n  end\nend", "    if type(a)\
    \ ~= type(b) then\n        return nil\n    end\n    if type(a) ~= 'number' or\
    \ type(b) ~= 'number' then\n        return nil\n    end", "   if type(a) == 'number'\
    \ and type(b) == 'number' then\n      if a > b then\n         return b\n     \
    \ elseif a < b then\n         return a\n      else\n         return nil\n    \
    \  end\n   elseif type(a) == 'number' and type(b) == 'string' then\n      if tonumber(a)\
    \ > tonumber(b) then\n         return b\n      else\n         if tonumber(a) <\
    \ tonumber(b) then\n            return a\n         else\n            return nil\n\
    \         end\n      end\n   elseif type(a) == 'string' and type(b) == 'number'\
    \ then\n      if tonumber(a) > tonumber(b) then\n         return b\n      else\n\
    \         if tonumber(a) < tonumber(b) then\n            return a\n         else\n\
    \            return nil\n         end\n      end\n   elseif type(a) == 'string'\
    \ and type(b) == 'string' then\n      if a > b then\n         return b\n     \
    \ elseif a < b then\n         return a\n      else\n         return nil\n    \
    \  end\n   else\n      return nil\n   end\nend", "  if type(vartype(a)) == 'number'\
    \ and vartype(b) == 'number' then\n    if a == b then\n      return a\n    else\n\
    \      return None\n    end\n  end\n  if a == b then\n    return a\n  end\n  if\
    \ type(a) == 'number' and type(b) == 'string' then\n    if tonumber(a) == tonumber(b)\
    \ then\n      return a\n    else\n      return None\n    end\n  end\n  if type(a)\
    \ == 'string' and type(b) == 'number' then\n    if tonumber(a) == tonumber(b)\
    \ then\n      return a\n    else\n      return None\n    end\n  end\n  if type(a)\
    \ == 'string' and type(b) == 'string' then\n    if a == b then\n      return a\n\
    \    else\n      return None\n    end\n  end\n  return None\nend", "  if a ==\
    \ nil then\n    return b\n  end\n  if b == nil then\n    return a\n  end\n  if\
    \ type(a) == type(1) and type(b) == type(1) then\n    if type(a) == type(b) then\n\
    \      if a > b then\n        return a\n      else\n        return b\n      end\n\
    \    end\n  end\n  if type(a) == type(1) then\n    if type(b) == type(1) then\n\
    \      if a > b then\n        return b\n      else\n        return a\n      end\n\
    \    end\n  end\n  if type(b) == type(1) then\n    if type(a) == type(1) then\n\
    \      if a > b then\n        return a\n      else\n        return b\n      end\n\
    \    end\n  end\n  if type(a) == type(b) then\n    if a > b then\n      return\
    \ a\n    else\n      return b\n    end\n  end\n  return nil\nend", "  if type(a)\
    \ ~= 'table' or type(b) ~= 'table' then return end\n  if a == b then return end\n\
    \  if a == nil then return b end\n  if b == nil then return a end\n  if type(a)\
    \ == 'string' and type(b) == 'string' then return end\n  if type(a) == 'number'\
    \ and type(b) == 'number' then return end\n  if type(a) == 'table' and type(b)\
    \ == 'table' then\n    if #a > #b then\n      local t = {}\n      for i = 1, #a\
    \ do\n        t[i] = a[i]\n      end\n      return t\n    else\n      local t\
    \ = {}\n      for i = 1, #b do\n        t[i] = b[i]\n      end\n      return t\n\
    \    end\n  end\nend\nreturn compare_one\n}", "  if a == b then\n    return a\n\
    \  else\n    if a == nil or b == nil then\n      return nil\n    else\n      local\
    \ a_type = type(a)\n      local b_type = type(b)\n      if a_type == 'number'\
    \ and b_type = 'number' then\n        if a > b then\n          return a\n    \
    \    elseif b > a then\n          return b\n        else\n          return nil\n\
    \        end\n      elseif a_type == 'string' and b_type = 'string' then\n   \
    \     if a ~= b then\n          return b\n        else\n          return nil\n\
    \        end\n      else\n        return nil\n      end\n    end\n  end\nend",
  "  if type(b) == 'number' then\n    return a > b end\n  elseif type(b) == 'table'\
    \ then\n    return compare_one(a, b[1])\n  end\nend", "  if type(a) == type(b)\
    \ then\n    local function to_float(s)\n      local s = string.gsub(s, '[,.]',\
    \ '')\n      if s ~= '' then\n        return tonumber(s)\n      end\n    end\n\
    \    local a_float, b_float = 0, 0\n    if type(a) == 'number' and type(b) ==\
    \ 'number' then\n      a_float = to_float(a)\n      b_float = to_float(b)\n  \
    \  end\n    if a_float == b_float then\n      return a\n    end\n  end\n  return\
    \ nil\nend", "  if a==b or a=='' or b=='' then return nil end\n  if type(a) ==\
    \ type(\"\") and type(b) == type(\"\") then\n    return compare_one(a:gsub(\"\
    ,\",\".\"), b:gsub(\",\",\".\"))\n  end\n  if type(a) == type(0) or type(b) ==\
    \ type(0) then\n    if a==b then return \"0\" end\n    if a > b then return \"\
    1\" else return \"-1\" end\n  end\n  return a>b ? a : b\nend", "  local __a, __b\n\
    \  if b == '?' or (type(b) == 'number' and b == a) then\n    return a\n  elseif\
    \ type(b) == 'number' then\n    if a == b then\n      return a\n    elseif type(a)\
    \ == 'number' then\n      __a = a\n      __b = (b > a) and b or a\n      if math.abs(b\
    \ - __a) < math.abs(__b - __b) then\n        return a\n      else\n        return\
    \ b\n      end\n    else\n      __a = tonumber(a)\n      if tonumber(b) == __a\
    \ then\n        return b\n      else\n        __b = tonumber(b)\n        if __a\
    \ ~= __b and math.abs(__a - __b) < 1e-14 then\n          return b\n        else\n\
    \          return a\n        end\n      end\n    end\n  elseif type(b) == 'table'\
    \ then\n    for __a,__b in pairs(b) do\n      if a[__a] == __b then\n        return\
    \ b\n      else\n        if a[__a] ~= '?' then\n          local __c = a[__a]\n\
    \          a[__a] = __b\n          __b = __c\n        end\n        if b[__b] ==\
    \ __a then\n          return b\n        else\n          if b[__b] ~= '?' then\n\
    \            local __d = b[__b]\n            b[__b] = __a\n            __a = __d\n\
    \          end\n          if a[__a] == b[__b] then\n            return b\n   \
    \       else\n            if a[__a] ~= '?' then\n              local __e = a[__a]\n\
    \              a[__a] = b[__b]\n              b[__b] = __e\n            end\n\
    \            if b[__b] ~= '?' then\n              local __f = b[__b]\n       \
    \       b[__b] = __a\n              __a = __f\n            end\n            return\
    \ compare_one(a, b)\n          end\n        end\n      end\n    end\n  end\n \
    \ return nil\nend", "    if type(b) ~= 'string' then\n        if type(b) ~= 'number'\
    \ then\n            if type(a) == 'string' then\n                a = tonumber(a)\n\
    \                b = tonumber(b)\n                if a == b then\n           \
    \         return a\n                else\n                    return b\n     \
    \           end\n            else\n                return b\n            end\n\
    \        else\n            return a\n        end\n    else\n        a = string.match(a,\
    \ '%f[%p]+')\n        b = string.match(b, '%f[%p]+')\n        if a == b then\n\
    \            return a\n        else\n            return b\n        end\n    end\n\
    end", "  if type(a) ~= type(b) then return end\n  if type(a) == 'number' then\n\
    \    return if a < b then b else a end\n  end\n  if type(a) == 'string' then\n\
    \    return if a < b then a else b end\n  end\n  return nil\nend", "    local\
    \ a_value = tonumber(a)\n    local b_value = tonumber(b)\n    if a_value == b_value\
    \ then\n        return a\n    elseif a_value == b_value and a_value < b_value\
    \ then\n        return a\n    elseif a_value < b_value and a_value < b_value then\n\
    \        return b\n    end\n    return a\nend", "    if type(a) == 'string' and\
    \ b == '' then return nil end\n    if type(b) == 'string' and a == '' then return\
    \ nil end\n    if type(a) == 'number' and type(b) == 'number' and a == b then\
    \ return nil end\n    return a\nend", "  if type(a) ~= 'number' or type(b) ~=\
    \ 'number' then\n    return nil\n  end\n  if a == b then\n    return a\n  elseif\
    \ type(a) == 'string' then\n    if a ~= tostring(b) then\n      return b\n   \
    \ end\n  elseif type(b) == 'string' then\n    if a ~= tonumber(b) then\n     \
    \ return b\n    end\n  else\n    if a > b then\n      return b\n    elseif a <\
    \ b then\n      return a\n    end\n  end\nend", "   if type(a) == 'number' and\
    \ type(b) == 'number' then\n      local x = a\n      local y = b\n      local\
    \ xtype = type(x)\n      if xtype == 'number' or xtype == 'boolean' then\n   \
    \      return x\n      elseif xtype == 'table' then\n         if type(x) == 'table'\
    \ then\n            for k,v in pairs(x) do\n               if x[k] ~= y[k] then\n\
    \                  return nil\n               end\n            end\n         end\n\
    \      elseif xtype == 'string' then\n         if y == x then\n            return\
    \ nil\n         end\n         if y == x or y == ',' then\n            return y\n\
    \         end\n      end\n   end\n   return b\nend", "  if a == b or a == '' then\
    \ return nil end\n  if type(a) == 'number' then return b end\n  if type(b) ==\
    \ 'number' then return a end\n  if type(a) == 'table' and b == 'table' then return\
    \ table_len(a) < table_len(b) end\n  if type(b) == 'table' and a == 'table' then\
    \ return table_len(b) < table_len(a) end\n  if type(a) == 'string' then return\
    \ tonumber(b) end\n  if type(b) == 'string' then return tonumber(a) end\n  return\
    \ nil\nend", "  if a == b then return end\n  if type(a) == type(b) then return\
    \ compare_real(a, b) end\n  if a == nil then return b end\n  if b == nil then\
    \ return a end\n  if type(a) ~= 'number' or type(b) ~= 'number' then return a\
    \ end\n  if a == 1 then return b end\n  if b == 1 then return a end\n  if a >\
    \ b then return b end\n  if b > a then return a end\nend", "  if type(a) ~= type(b)\
    \ then return nil end\n  local num_a = tonumber(a)\n  if num_a == nil then return\
    \ nil end\n  local num_b = tonumber(b)\n  if num_b == nil then return nil end\n\
    \  if num_a == num_b then return nil end\n  return a\nend", "\tif type(a) == 'table'\
    \ then\n\t\ta = a[1]\n\tend\n\tif type(b) == 'table' then\n\t\tb = b[1]\n\tend",
  "  local v1, v2, v3 = a:gsub('([-0-9.]+)[,.]([0-9.]+)', \"\\\\1.\\\\2\")\n  local\
    \ v4, v5 = b:gsub('([-0-9.]+)[,.]([0-9.]+)', \"\\\\1.\\\\2\")\n  if v1 == v2 and\
    \ v2 == v3 then\n    return v4 .. v5\n  else\n    return v1\n  end\nend", "  if\
    \ type(a) ~= 'number' and type(a) ~= 'boolean' and type(a) ~= 'string' then\n\
    \    return false\n  end\n  if type(b) ~= 'number' and type(b) ~= 'boolean' and\
    \ type(b) ~= 'string' then\n    return false\n  end\n  if a == b then return true\
    \ end\n  if type(a) == 'number' and type(b) == 'number' then\n    return b > a\n\
    \  end\n  if type(a) == 'string' and type(b) == 'string' then\n    return b >\
    \ a\n  end\n  if type(a) == 'boolean' and type(b) == 'boolean' then\n    return\
    \ b\n  end\nend", "  local _, a_int, a_real = unpack(a)\n  local _, b_int, b_real\
    \ = unpack(b)\n  return nil if a_int ~= b_int or a_real ~= b_real or a_real ~=\
    \ '0' and b_real ~= '0' or b_real ~= '0' and a_real ~= '0' or a_real ~= '0' and\
    \ b_real ~= '0' or a_real ~= '0' and b_real ~= '0' or a_real ~= '0' and b_real\
    \ ~= '0' or a_real ~= '0' and b_real ~= '0' or a_real ~= '0' and b_real ~= '0'\
    \ or a_real ~= '0' and b_real ~= '0' or a_real ~= '0' and b_real ~= '0' or a_real\
    \ ~= '0' and b_real ~= '0' or a_real ~= '0' and b_real ~= '0' or a_real ~= '0'\
    \ and b_real ~= '0' or a_real ~= '0' and b_real ~= '0'\nend", "    if type(a)\
    \ == 'number' and type(b) == 'number' then\n        if a > b then\n          \
    \  return b\n        elseif a < b then\n            return a\n        end\n  \
    \  end\n    if type(a) == 'string' and type(b) == 'string' then\n        if a\
    \ ~= b then\n            return b\n        end\n    end\n    return nil\nend",
  "  if type(a) ~= 'number' or type(b) ~= 'number' then\n    return a\n  end", " \
    \ if a == b then\n    return nil\n  end\n  if a:gettype() == b:gettype() then\n\
    \    local vartype = a:gettype()\n    if vartype == 'int' then\n      local aint\
    \ = a\n      local ainti = tonumber(a)\n      local bint = b\n      local binti\
    \ = tonumber(b)\n      if ainti == binti then\n        return aint\n      elseif\
    \ ainti < binti then\n        return aint\n      else\n        return binti\n\
    \      end\n    elseif vartype == 'float' then\n      local afloat = a\n     \
    \ local ainti = tonumber(a)\n      local bfloat = b\n      local binti = tonumber(b)\n\
    \      if ainti == binti then\n        return afloat\n      elseif ainti < binti\
    \ then\n        return afloat\n      else\n        return binti\n      end\n \
    \   else\n      return a\n    end\n  else\n    return a\n  end\nend", "  local\
    \ a_is_number = a:is(ast.typed.expr.Number)\n  local b_is_number = b:is(ast.typed.expr.Number)\n\
    \  if a_is_number and b_is_number then\n    if tonumber(a) > tonumber(b) then\
    \ return b else return a end\n  elseif a_is_number and b_is_string then\n    if\
    \ a > b then return b else return a end\n  elseif a_is_string and b_is_number\
    \ then\n    if a > b then return a else return b end\n  else\n    return nil\n\
    \  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
