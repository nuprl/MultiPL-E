language: lua
name: HumanEval_85_add
results:
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  for _, i in ipairs(lst) do\n    if (i % 2) ==\
    \ 0 then\n      even = even + i\n    end\n  end\n  return even\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2udto4cw.lua:18:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp2udto4cw.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if lst:len() == 0 then\n    return nil\n  end\n  -- get two pointers\n\
    \  local l1, l2 = lst.first, lst\n  -- get current value\n  local value = l1:remove()\n\
    \  -- move the pointers\n  l2, l1 = l1, l2\n  -- while there are elements in the\
    \ list\n  while l1 do\n    -- if value is even\n    if value % 2 == 0 then\n \
    \     -- put it in list\n      l2:insert(value)\n    end\n    -- get the next\
    \ value\n    value = l1:remove()\n    -- move the pointer\n    l2, l1 = l1, l2\n\
    \  end\n  -- return the new list\n  return lst:list()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6y2n51us.lua:6:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp6y2n51us.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6y2n51us.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local result = 0\n    for i = 2, #lst do\n        if lst[i] %\
    \ 2 == 0 then\n            result = result + lst[i]\n        end\n    end\n  \
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pj91k4r.lua:19:\
    \ expected: 122, actual: 130\nstack traceback:\n\t/tmp/tmp_pj91k4r.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then\n    return 0\n  end\n  -- find the index of the\
    \ last element that is odd.\n  local i = #lst - 1\n  -- while there are elements\
    \ in the list, find the index of the element that is the odd one\n  while i >\
    \ 0 and lst[i] % 2 == 1 do\n    i = i - 1\n  end\n  -- Add the elements starting\
    \ from lst[i] up to the length of the list.\n  return i + add(lst:sub(i, #lst))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy4885m8_.lua:16:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpy4885m8_.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpy4885m8_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  -- Add each odd element to each even element.\n  for i = 1, #lst\
    \ do\n    lst[i] = lst[i] + lst[i+1]\n  end\n  return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2jf4gs0l.lua:8:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp2jf4gs0l.lua:8: in local 'candidate'\n\t/tmp/tmp2jf4gs0l.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n   -- First we check the list is not empty.\n   if #lst == 0 then\
    \ return 0 end\n   -- Initialize and start with a new accumulator.\n   local acc\
    \ = {}\n   -- Add the elements and check for odd indices.\n   for i = 2, #lst,\
    \ 2 do\n      acc = { i, lst[i] }\n      if #acc == 2 then\n         -- Add element\
    \ if it is a even element.\n         if acc[1]:mod(2) ~= 0 then return acc[1]\
    \ end\n      else\n         -- If we've reached the end of the list add the accumulator\
    \ and start over again.\n         acc[1] = add(acc)\n         acc[2] = add(acc)\n\
    \         -- If we reached the end of the list then stop.\n         if #acc ==\
    \ 2 then break end\n      end\n   end\n   -- If we reached the end of the list\
    \ then return the accumulator.\n   if #acc == 2 then return acc[1] end\nend\n\
    </cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwdx22b43.lua:27: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphsduzxgc.lua:17: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local total = 0\n    for i = 2, #lst do\n        total = total\
    \ + lst[i]\n        if lst[i] % 2 == 1 then return total end\n    end\n    return\
    \ total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_dj_h0o.lua:18:\
    \ expected: 122, actual: 5\nstack traceback:\n\t/tmp/tmpe_dj_h0o.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local new_lst = lst[1]\n    for i, v in ipairs(lst[2:end]) do\n\
    \        if v % 2 == 1 then\n            new_lst = setmetatable(new_lst, {__index\
    \ = function ()\n                return v\n            end})\n        end\n  \
    \  end\n    return new_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9uynnri3.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n   local function get_even_indexes(lst)\n      local indexes = {}\n\
    \      for i,v in ipairs(lst) do\n         if v mod 2 ~= 0 then\n            indexes[i]\
    \ = v\n         end\n      end\n      return indexes\n   end\n   local indexes\
    \ = get_even_indexes(lst)\n   for _, v in pairs(indexes) do\n      if lst[v] %\
    \ 2 == 0 then\n         lst[v] = lst[v] + lst[v + 1]\n         lst[v + 1] = nil\n\
    \      end\n   end\n   -- if there are an even number of elements in the list,\
    \ take the first and second\n   -- elements\n   local even_indexes = {}\n   for\
    \ _, v in ipairs(indexes) do\n      if v ~= nil then\n         even_indexes[#even_indexes\
    \ + 1] = v\n      end\n   end\n   table.sort(even_indexes, function(a,b)\n   \
    \   return #even_indexes > a and #even_indexes > b and\n         even_indexes[a]\
    \ <= even_indexes[b]\n   end)\n   -- if there are an even number of elements in\
    \ the list, take the first and second\n   -- elements\n   if #even_indexes > 0\
    \ then\n      -- if the list is empty, just return the first element\n      if\
    \ #even_indexes == 1 then\n         return even_indexes[1]\n      else\n     \
    \    -- remove the tail of the list that has odd number of elements\n        \
    \ for i = #even_indexes, 1, -1 do\n            -- add the first element and one\
    \ more\n            even_indexes[i] = even_indexes[i-1] + even_indexes[i+1]\n\
    \         end\n         -- remove the last element from the even list\n      \
    \   even_indexes[#even_indexes] = nil\n         -- add the second element to the\
    \ odd list\n         return even_indexes[1]\n      end\n   else\n      return\
    \ nil\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps22qmtg5.lua:9: ''then'' expected near ''mod''

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\n  local evenSum = 0\n  for i = 1,\
    \ #lst do\n    if math.mod(lst.i, 2) == 1 then\n      evenSum = evenSum + lst.i\n\
    \    end\n  end\n  return evenSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvxg9gozw.lua:9:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpvxg9gozw.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpvxg9gozw.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return nil end\n  local even, odd\n  local index\
    \ = -1\n  for _, x in ipairs(lst) do\n    if index % 2 == 0 then\n      even =\
    \ even + x\n    else\n      odd = odd + x\n    end\n    index = index + 1\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6kqfw76j.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'odd')\nstack traceback:\n\
    \t/tmp/tmp6kqfw76j.lua:13: in local 'candidate'\n\t/tmp/tmp6kqfw76j.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i = 1,#lst do\n        if lst[i] % 2 ==\
    \ 1 then\n            sum = sum + lst[i]\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuoe4jf5g.lua:18:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmpuoe4jf5g.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then\n    return 0\n  end\n  local evens = table.concat(\n\
    \    lst,\n    function(e)\n      return (even and e:odd()) or (not even and not\
    \ e:odd())\n    end\n  )\n  return table.concat(\n    evens,\n    function(e)\n\
    \      return (even and e:even()) or (not even and not e:even())\n    end\n  )\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw7ol12hg.lua:9:\
    \ bad argument #2 to 'concat' (string expected, got function)\nstack traceback:\n\
    \t/tmp/tmpw7ol12hg.lua:9: in local 'candidate'\n\t/tmp/tmpw7ol12hg.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  -- Base case: no even elements.\n  if lst[1] == 0 then\n    return\
    \ lst[2]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6rl5zwyy.lua:20: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for idx = 1, #lst do\n    if idx % 2 == 0 then\n\
    \      sum = sum + lst[idx]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpva7s_1n4.lua:19:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpva7s_1n4.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    if #lst < 2 then\n        return lst\n    end\n    local result\
    \ = {}\n    for i = 2, #lst, 2 do\n        if lst[i] % 2 == 0 then\n         \
    \   table.insert(result, lst[i])\n        end\n    end\n    return add(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3q5r3lk.lua:21:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpy3q5r3lk.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  for i = #lst, 2, -1 do\n    if lst[i] % 2 == 0 then\n      lst[i]\
    \ = lst[i] + 1\n    end\n  end\n  return lst[1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdt_pasvq.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpdt_pasvq.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd\n  local evenSum = 0\n  local oddSum = 0\n  local\
    \ i = 0\n  for i, even in ipairs(lst) do\n    if i % 2 == 0 then\n      evenSum\
    \ = evenSum + even\n    else\n      oddSum = oddSum + even\n    end\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmporea1kem.lua:27: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n   local evenLst = {}\n   for i = 1, #lst, 2 do\n      evenLst[i]\
    \ = lst[i] + lst[i + 1]\n   end\n   return evenLst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc29rgnab.lua:16:\
    \ expected: 88, actual: {92}\nstack traceback:\n\t/tmp/tmpc29rgnab.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local result = lst[1]\n  for i = 2, #lst do\n    if lst[i] % 2 ==\
    \ 0 then\n      result = result + lst[i]\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6yqtlpyd.lua:18:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp6yqtlpyd.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:sub(1, lst:len() / 2)\n  local odd = lst:sub(lst:len()\
    \ / 2 + 1, lst:len())\n  return even:add(odd)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp35gede6w.lua:6:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp35gede6w.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp35gede6w.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n  \
    \    sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62wyzk9k.lua:19:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp62wyzk9k.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for _, _ in ipairs(lst) do\n        if _ %\
    \ 2 == 1 then\n            sum = sum + _\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpni4a3zlp.lua:18:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmpni4a3zlp.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\n  if #lst == 1 then return lst[1]\
    \ end\n  local sum = 0\n  local i = 1\n  while i < #lst do\n    if lst[i] % 2\
    \ == 0 then\n      sum = sum + lst[i]\n      i = i + 1\n    else\n      i = i\
    \ + 1\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6kr1pf8s.lua:24:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp6kr1pf8s.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  -- write your code in function form here\n  local even = 0\n  local\
    \ odd = 0\n  for i = 1,#lst do\n    if i % 2 == 1 then even = even + lst[i] end\n\
    \    odd = odd + lst[i]\n  end\n  return even+odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt92jk4po.lua:19:\
    \ expected: 88, actual: 96\nstack traceback:\n\t/tmp/tmpt92jk4po.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local i, j = 0, #lst\n    while i < j do\n        if lst[i] %\
    \ 2 == 0 then return i + 1 end\n        i, j = i + 1, j + 1\n    end\n    return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7o_5faoh.lua:8:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp7o_5faoh.lua:8: in local 'candidate'\n\t/tmp/tmp7o_5faoh.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local ans, idx = 0, 0\n    for i = 1, #lst do\n        if i %%\
    \ 2 == 1 then\n            ans = ans + lst[i]\n        end\n        idx = idx\
    \ + 1\n    end\n    return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwz8qckmq.lua:8: unexpected symbol near ''%''

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n   local even, odd = unpack(lst)\n   local sum = 0\n   for _, v in\
    \ pairs(lst) do\n      if math.modf(v / 2)[1] ~= 0 then\n         sum = sum +\
    \ even\n      else\n         sum = sum + odd\n      end\n   end\n   return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp06q95qa2.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp06q95qa2.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp06q95qa2.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst < 2 then return 0 end\n  if #lst == 1 then return lst[1]\
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3k__nshk.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  -- Base case:\n  if #lst <= 1 then return lst\n  -- recursive case\n\
    \  else\n    local even_index = #lst:chunk(2, 1)[1]\n    local even_element =\
    \ lst[even_index]\n    local odd_index = #lst:chunk(2, 1)[2]\n    local odd_element\
    \ = lst[odd_index]\n    return even_element + odd_element + add(lst:chunk(2, 1)[3])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo_t99mkm.lua:10:\
    \ attempt to call a nil value (method 'chunk')\nstack traceback:\n\t/tmp/tmpo_t99mkm.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpo_t99mkm.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local i, count = 0, 0\n    for _, i in ipairs(lst) do\n      \
    \  if i % 2 == 0 then\n            count = count + i\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq0uepvm.lua:18:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpcq0uepvm.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\n  if #lst == 1 then return lst[1]\
    \ end\n  local even_idx = 1\n  local sum = 0\n  while even_idx <= #lst do\n  \
    \  if lst[even_idx] % 2 == 0 then\n      sum = sum + lst[even_idx]\n      even_idx\
    \ = even_idx + 1\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xk57upg.lua:22:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp1xk57upg.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local r = 0\n    for i, v in ipairs(lst) do\n        if i % 2\
    \ == 0 then r = r + v end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_oq3gq5j.lua:17:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp_oq3gq5j.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  -- base case\n  if #lst == 0 then\n    return 0\n  else\n    --\
    \ recursive case\n    return lst[1] + add(lst[#lst:-1])\n  end\nend\nprint(add({}))\n\
    print(add({1, 2, 3}))\nprint(add({1, 4, 3, 2}))\nprint(add({1, 2, 3, 1, 2, 3,\
    \ 1}))\nprint(add({1, 2, 3, 1, 2, 3, 2}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\n\
    print(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1,\
    \ 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3,\
    \ 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2,\
    \ 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\n\
    print(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1,\
    \ 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3,\
    \ 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2,\
    \ 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\n\
    print(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1,\
    \ 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3,\
    \ 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2,\
    \ 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\n\
    print(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1,\
    \ 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3,\
    \ 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2,\
    \ 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\n\
    print(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1,\
    \ 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({1, 2, 3,\
    \ 1, 2, 3, 1}))\nprint(add({1, 2, 3, 1, 2, 3, 1}))\nprint(add({\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjk9ttlb_.lua:11: <name> expected near ''-''

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local result = 0\n    for i = 2, #lst, 2 do\n        result =\
    \ result + lst[i - 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03rkeuh5.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp03rkeuh5.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even\n  for i,v in ipairs(lst) do\n    if i % 2 == 0 then\n\
    \      even = even + v\n    end\n  end\n  return even\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoigi56qv.lua:9:\
    \ attempt to perform arithmetic on a nil value (local 'even')\nstack traceback:\n\
    \t/tmp/tmpoigi56qv.lua:9: in local 'candidate'\n\t/tmp/tmpoigi56qv.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  local odds = {}\n  for i=1, #lst do\n    if\
    \ i % 2 == 0 then\n      table.insert(evens, lst[i])\n    else\n      table.insert(odds,\
    \ lst[i])\n    end\n  end\n  table.sort(odds)\n  local n = 0\n  for i=1, #odds\
    \ do\n    table.insert(evens, odds[i])\n    n = n + 1\n    if n > #evens then\n\
    \      return table.concat(evens)\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbkh4qaa.lua:30:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmplbkh4qaa.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local function iterate(tbl)\n    local even,odd = unpack(tbl)\n\
    \    if even % 2 == 0 then -- Even is even index\n      return even\n    else\
    \ -- Even is odd index\n      return even + odd + 1 -- add 1 to even so it is\
    \ an odd index\n    end\n  end\n  local evenSum = 0\n  local oddSum = 0\n  for\
    \ i,v in ipairs(lst) do\n    evenSum = iterate({evenSum, v}) -- add even elements\n\
    \    oddSum = iterate({oddSum, v}) -- add odd elements\n  end\n  return evenSum\
    \ + oddSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4cmvq66j.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp4cmvq66j.lua:7:\
    \ in local 'iterate'\n\t/tmp/tmp4cmvq66j.lua:17: in local 'candidate'\n\t/tmp/tmp4cmvq66j.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  return lst[#lst]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2jjfa9a.lua:14:\
    \ expected: 0, actual: 7\nstack traceback:\n\t/tmp/tmpu2jjfa9a.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst<2 then return nil end\n  local res=0\n  local i=1\n  while\
    \ i <= #lst do\n    if i % 2 == 0 then\n      res = res + lst[i]\n    end\n  \
    \  i = i + 1;\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg683z6o6.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpg683z6o6.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:size()\n  for i = 1, even do\n    if lst:mod(i)\
    \ ~= 0 then\n      return i\n    end\n  end\n  return even\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqj8th265.lua:6:\
    \ attempt to call a nil value (method 'size')\nstack traceback:\n\t/tmp/tmpqj8th265.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpqj8th265.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local n = 1\n    for i, v in ipairs(lst) do\n        if v ~= 0\
    \ then\n            n = n + 1\n        end\n        if i ~= n then\n         \
    \   lst[i] = v\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_rtlh50.lua:21:\
    \ expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp7_rtlh50.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst < 1 then\n    return nil\n  end\n  if #lst < 2 then\n  \
    \  return lst[1]\n  end\n  local sum = 0\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdyy80m6p.lua:25:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpdyy80m6p.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy6ruvaw1.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if lst:len() == 0 then\n    return nil\n  end\n  local even = lst:at(2)\n\
    \  lst:removeAt(2)\n  local sum = even + lst:sum()\n  lst:insert(sum)\n  return\
    \ add(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyv5icr75.lua:6:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpyv5icr75.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpyv5icr75.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even_indexes = {}\n    for i = 1, #lst do\n        if lst[i]\
    \ % 2 == 0 then\n            table.insert(even_indexes, i)\n        end\n    end\n\
    \    local result\n    if #even_indexes == 0 then\n        result = 1\n    else\n\
    \        result = #even_indexes * lst[#even_indexes + 1]\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmbm96lt6.lua:16:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpmbm96lt6.lua:16: in local 'candidate'\n\t/tmp/tmpmbm96lt6.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\n  local even = 0\n  local odd =\
    \ 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even = even + lst[i]\n\
    \    else\n      odd = odd + lst[i]\n    end\n  end\n  return even+odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfx9cvncx.lua:22:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpfx9cvncx.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    if #lst < 2 then return lst\n    else if lst[1] == 0 then return\
    \ add(lst[2:]) else return lst[1] end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz0818ap4.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even, odd = {}, {}\n    for i, v in ipairs(lst) do\n   \
    \     if v %2 == 0 then\n            table.insert(even, v)\n        else\n   \
    \         table.insert(odd, v)\n        end\n    end\n    return table.concat(even)\
    \ + table.concat(odd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4xua0gva.lua:14:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmp4xua0gva.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp4xua0gva.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even_index = 1 -- index of the first even element\n  local\
    \ max_index = #lst -- index of the last element\n  local sum = 0\n  for i = 1,\
    \ max_index do\n    if i % 2 == 1 then\n      sum = sum + lst[even_index]\n  \
    \    even_index = even_index + 1\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpriw8v7t_.lua:21:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpriw8v7t_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst > 0 then\n    local n = #lst\n    local even = {}\n    local\
    \ odd = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphjd4fftm.lua:20: ''end'' expected (to close ''if'' at line
    6) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst==0 then return 0 end\n  local even_odd= {}\n  local index\n\
    \  for index=1,#lst,2 do\n    even_odd[index]= lst[index]\n  end\n  local sum\
    \ = 0\n  for index=#lst,1,-1 do\n    if index%2 ~= 1 then\n      sum= sum + even_odd[index]\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2j1wafh1.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp2j1wafh1.lua:15: in local 'candidate'\n\t/tmp/tmp2j1wafh1.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i=1, #lst do\n    if i % 2 == 0\
    \ then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n \
    \   end\n  end\n  even.insert( table.concat(odd) )\n  local ans = table.concat(even)\n\
    \  return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcjoze_2y.lua:14:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmpcjoze_2y.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpcjoze_2y.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = unpack(lst)\n  local result = even\n  if odd ~=\
    \ nil then\n    even = even + odd\n  end\n  for _, x in ipairs(lst) do\n    if\
    \ x % 2 == 0 then\n      even = even + x\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6_swv6uj.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp6_swv6uj.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6_swv6uj.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  -- Initialize helper variables\n  local even_index = 1 -- The index\
    \ of the even element\n  local odd_index = 1 -- The index of the odd element\n\
    \  local even_value = lst[even_index] -- The value of the even element\n  local\
    \ odd_value = lst[odd_index] -- The value of the odd element\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo_k3ltps.lua:21: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even, odd = {}, {}\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq38sdzle.lua:17: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n   if #lst < 1 then return 0 end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkxcwegiw.lua:17: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local n = 1\n  local even_idx = 1\n  local odd_idx = 1\n  local\
    \ i = 1\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      if even_idx > 0 then\n\
    \        n = n + lst[even_idx] * 2\n        even_idx = even_idx + 1\n      else\n\
    \        n = n + lst[even_idx]\n      end\n    else\n      if odd_idx > 0 then\n\
    \        n = n + lst[odd_idx] * 2\n        odd_idx = odd_idx + 1\n      else\n\
    \        n = n + lst[odd_idx]\n      end\n    end\n  end\n  return n\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimombyld.lua:33:\
    \ expected: 88, actual: 17\nstack traceback:\n\t/tmp/tmpimombyld.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even\n  local odd\n  local cnt\n  for cnt = 2, #lst do\n \
    \   if lst[even] == nil then\n      even = cnt\n    else\n      odd = cnt\n  \
    \  end\n    lst[odd] = lst[even]\n    lst[even] = nil\n  end\n  return lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkkgtto06.lua:15:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpkkgtto06.lua:15: in local 'candidate'\n\
    \t/tmp/tmpkkgtto06.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i=1,#lst,2 do -- start at 1 and go until\
    \ it hits the end, then start again at 1 and go until it hits the end\n    even[#even+1]\
    \ = lst[i]\n  end\n  return #lst+1 -- return the number of elements in the list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdau14y5z.lua:16:\
    \ expected: 88, actual: 3\nstack traceback:\n\t/tmp/tmpdau14y5z.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even_indices = {}\n  for i=1,#lst do\n    if math.modf(lst[i])[1]\
    \ == 1 then\n      table.insert(even_indices, i)\n    end\n  end\n  return lst[table.maxn(even_indices)]\
    \ + (table.maxn(even_indices)+1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj_ny2gvc.lua:8:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmpj_ny2gvc.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpj_ny2gvc.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 1 then\n      even[#even + 1] = lst[i]\n    else\n      odd[#odd + 1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b927ik4.lua:20:\
    \ expected: 88, actual: {4}\nstack traceback:\n\t/tmp/tmp6b927ik4.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local result = 1\n  for i = 2, #lst do\n    if math.mod(i, 2) ==\
    \ 1 then\n      result = result + lst[i]\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk4x44t0_.lua:8:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpk4x44t0_.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpk4x44t0_.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even = #lst % 2\n    local even_element = lst[even]\n  \
    \  lst[even] = nil\n    lst[#lst+1] = even_element\n    return lst\nend\n</cell>\n\
    <text>\nExercise 4\n(7 points) Write a function that takes a string and returns\
    \ it.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjxrjxxlf.lua:12: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphsduzxgc.lua:17: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst==0 then return 0 end\n  local even, odd={}, {}\n  for i=1,#lst\
    \ do\n    if math.mod(i,2)==0 then table.insert(even,lst[i]) end\n    table.insert(odd,lst[i])\n\
    \  end\n  return table.merge(even,odd,function (x,y)\n    return x+y\n  end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvpnuqdn0.lua:9:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpvpnuqdn0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpvpnuqdn0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local result = lst[1]\n  for i = 2, #lst do\n    if lst[i] % 2 ==\
    \ 1 then\n      result = result + lst[i]\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rljmu55.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp1rljmu55.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local index = 0\n  while index <= #lst do\n    if index == 0 then\n\
    \      if lst[index] % 2 == 0 then\n        lst[index] = lst[index] - 1\n    \
    \  else\n        lst[index] = lst[index] + 1\n      end\n    else\n      if lst[index]\
    \ % 2 == 0 then\n        lst[index] = lst[index] - 1\n      else\n        lst[index]\
    \ = lst[index] + 1\n      end\n    end\n    index = index + 1\n  end\n  return\
    \ lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkui_mfmz.lua:9:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpkui_mfmz.lua:9: in local 'candidate'\n\t/tmp/tmpkui_mfmz.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n\tassert(type(lst) == \"table\")\n\t-- return the size of the table\n\
    \tlocal size = #lst\n\t-- add each item in the table together\n\tlocal result\
    \ = 0\n\tlocal i = 1\n\twhile i <= size do\n\t\t-- add each item in the table\
    \ to a number\n\t\tresult = result + lst[i]\n\t\t-- add that number to the count\
    \ of the current item\n\t\tlst[i] = result\n\t\t-- increment the count by 1\n\t\
    \ti = i + 1\n\tend\n\t-- return the updated table\n\treturn lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzt_c_lti.lua:27:\
    \ expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzt_c_lti.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if lst[1] then return add(lst[1], add(lst[2:end])) end\n  return\
    \ lst[1]\nend\n</cell>\n<text>\nAdd two functions together\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp58v52h12.lua:6: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n   if #lst < 1 then return nil end\n   local even = 0\n   local odd\
    \ = 0\n   local even_idx = 0\n   local max_idx = #lst - 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9f3vskw7.lua:21: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\n  local even = add(lst:select(2,\
    \ #lst))\n  return lst:select(2, #lst) + even\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeu5iwxdy.lua:7:\
    \ attempt to call a nil value (method 'select')\nstack traceback:\n\t/tmp/tmpeu5iwxdy.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpeu5iwxdy.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even,odd = {},{}\n  for i = 1, #lst do\n    if i % 2 ~= 0\
    \ then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd, lst[i])\n\
    \    end\n  end\n  return table.concat(even)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyw74c6v.lua:20:\
    \ expected: 88, actual: \"4\"\nstack traceback:\n\t/tmp/tmpyyw74c6v.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even = 0\n    local odd = 0\n    local total = 0\n    for\
    \ i = 1, #lst do\n        if i % 2 == 0 then\n            even = even + 1\n  \
    \          total = total + lst[i]\n        elseif i % 2 == 1 then\n          \
    \  odd = odd + 1\n        end\n    end\n    return total + even + odd\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqu02oc_r.lua:23:\
    \ expected: 88, actual: 90\nstack traceback:\n\t/tmp/tmpqu02oc_r.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\n  local sum = 0\n  local i = #lst\
    \ - 2\n  while i >= 0 do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n\
    \      lst[i] = nil\n      i = i - 1\n    end\n  end\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy9qbcd7r.lua:10:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpy9qbcd7r.lua:10: in local 'candidate'\n\t/tmp/tmpy9qbcd7r.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\n  local res = lst[1]\n  for i=2,#lst\
    \ do\n    if lst[i] % 2 == 0 then res = res + lst[i] end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdidcxbs.lua:17:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpwdidcxbs.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, x in pairs(lst) do\n    if i % 2 == 0 then\n\
    \      sum = sum + x\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbr3tzni3.lua:19:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpbr3tzni3.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local evens = {}\n    for _, x in ipairs(lst) do\n        if x\
    \ % 2 == 0 then\n            table.insert(evens, x)\n        end\n    end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmw09rw4u.lua:22: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local lsize = #lst\n  local res = lst[1]\n  if lsize > 1 then\n\
    \    for i = 2, lsize do\n      if lst[i] % 2 == 1 then\n        if res == nil\
    \ then\n          res = lst[i]\n        else\n          res = lst[i] + (res) *\
    \ 3\n        end\n      end\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuc_9zyd6.lua:25:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpuc_9zyd6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local i = 1\n    while i < #lst do\n        if i % 2 == 0 then\n\
    \            lst = lst + lst[i]\n        end\n        i = i + 1\n    end\n   \
    \ return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79g5inoi.lua:19:\
    \ expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp79g5inoi.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evens = #lst % 2\n  for i=1,evens do\n    if lst[i] % 2 ==\
    \ 1 then\n      lst[i] = lst[i] + lst[i+1]\n      lst[i+1] = nil\n    end\n  end\n\
    \  return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp873rv58_.lua:19:\
    \ expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp873rv58_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    if #lst == 0 then return 0 end\n    if #lst == 1 then return lst[0]\
    \ end\n    local even = add(lst[2])\n    local odd = add(lst[1])\n    return even\
    \ + odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprrp2cit0.lua:6:\
    \ attempt to get length of a number value (local 'lst')\nstack traceback:\n\t\
    /tmp/tmprrp2cit0.lua:6: in upvalue 'add'\n\t/tmp/tmprrp2cit0.lua:8: in local 'candidate'\n\
    \t/tmp/tmprrp2cit0.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even, odd = unpack(lst:gmatch('(%d+)'))\n    return even\
    \ * 2 + odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0vvvae3.lua:6:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmpa0vvvae3.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpa0vvvae3.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\n  local even = 0 -- keep track of\
    \ even elements\n  local odd = 0 -- keep track of odd elements\n  local evens\
    \ = 0 -- keep track of even elements in set\n  local odds = 0 -- keep track of\
    \ odd elements in set\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8tvcu7z2.lua:21: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n   local sum = 0\n   for i = 1, #lst do\n      if i % 2 == 1 then\n\
    \         sum = sum + lst[i]\n      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahvuu22s.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpahvuu22s.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = {}\n  local odd = {}\n  for i = 1, #lst do -- O(n)\
    \ loop.\n    if i % 2 ~= 0 then\n      table.insert(even, lst[i])\n    else\n\
    \      table.insert(odd, lst[i])\n    end\n  end\n  table.insert(even, lst[#lst])\
    \ -- Append last element.\n  table.insert(even, table.concat(even, \",\")) --\
    \ Append all elements.\n  return table.concat(even, \",\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxcb_6uck.lua:23:\
    \ expected: 88, actual: \"4,88,4,88\"\nstack traceback:\n\t/tmp/tmpxcb_6uck.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local i, count\n    local even = {}\n    for i, count in pairs(lst)\
    \ do\n        if i % 2 == 0 then\n            table.insert(even, count)\n    \
    \    end\n    end\n    return table.concat(even)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2l8gi36v.lua:19:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmp2l8gi36v.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  return lst[even_indexes(lst)]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0lmg7xfb.lua:6:\
    \ attempt to call a nil value (global 'even_indexes')\nstack traceback:\n\t/tmp/tmp0lmg7xfb.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp0lmg7xfb.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return end\n  for i, v in pairs(lst) do\n    if\
    \ v % 2 ~= 0 then\n      lst[i] = v + lst[i]\n    end\n  end\n  return lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcj79ordc.lua:18:\
    \ expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpcj79ordc.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for _, v in ipairs(lst) do\n    if v%2 == 1 then\n\
    \      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbx1kquyw.lua:18:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmpbx1kquyw.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even_idx = 1\n    local sum = 0\n    while even_idx <= #lst\
    \ do\n        if lst[even_idx] % 2 == 0 then\n            sum = sum + lst[even_idx]\
    \ -- add even elements\n        else\n            lst[even_idx] = 0 -- make even\
    \ elements zero\n        end\n        even_idx = even_idx + 2\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7fup75j.lua:22:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpf7fup75j.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  -- if lst is empty return nil\n  if lst:len() == 0 then return nil\
    \ end\n  -- return sum of the first odd element\n  local sum = 0\n  for i = 1,\
    \ lst:len() do\n    if i % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq45o7fsb.lua:7:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpq45o7fsb.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpq45o7fsb.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\n  local even = add(lst:sub(1, #lst\
    \ + 1))\n  return lst[1] + even + lst[2]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5s47jaa_.lua:7:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp5s47jaa_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5s47jaa_.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if not lst:IsList() then return nil end\n  local ret = lst[1]\n\
    \  for i = 2, lst:GetSize() do\n    if lst[i] % 2 == 0 then\n      ret = ret +\
    \ lst[i]\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo69dua68.lua:6:\
    \ attempt to call a nil value (method 'IsList')\nstack traceback:\n\t/tmp/tmpo69dua68.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpo69dua68.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst > 0 then\n    if lst[1] % 2 == 0 then\n      local even_index\
    \ = #lst - 1\n      while even_index > 0 do\n        lst[even_index] = lst[even_index]\
    \ - 1\n        even_index = even_index - 1\n      end\n    end\n  end\n  return\
    \ lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvawdnwet.lua:21:\
    \ expected: 88, actual: {3, 88}\nstack traceback:\n\t/tmp/tmpvawdnwet.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local res = lst[1]\n    for i=2,#lst do\n        if lst[i] % 2\
    \ == 0 then res = res +  lst[i] end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpwd1ki6.lua:16:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmprpwd1ki6.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: -1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n\tlocal even, odd = 2, 3 -- indices of even and odd elements\n\twhile\
    \ #lst > 0 do\n\t\tlst[even], lst[odd] = lst[odd], lst[even]\n\t\teven = even\
    \ + 1\n\t\todd = odd + 2\n\tend\n\treturn lst[2]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009005
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  for idx = 1, #lst do\n    if idx % 2 == 0 then\n      lst[idx] =\
    \ lst[idx] + (lst[idx] - 1 ) / 2\n    end\n  end\n  return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd116sy0f.lua:17:\
    \ expected: 88, actual: {4, 131.5}\nstack traceback:\n\t/tmp/tmpd116sy0f.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evens = 0\n  local odds = 0\n  for i = 1, #lst do\n    if\
    \ i % 2 == 0 then\n      evens = evens + lst[i]\n    else\n      odds = odds +\
    \ lst[i]\n    end\n  end\n  return evens + odds\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxl5033_.lua:21:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpoxl5033_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then\n    return nil\n  else\n    local i, even, i1,\
    \ even1 = 1, #lst, 2, 2\n    while i1 <= even do\n      if lst.i1 == even then\n\
    \        lst.i2 = even1\n      else\n        lst.i2 = even\n      end\n      even\
    \ = even*2\n      i1 = i1 + 2\n    end\n  end\n  return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fqfye2h.lua:26:\
    \ expected: 88, actual: {4, 88, i2=4611686018427387904}\nstack traceback:\n\t\
    /tmp/tmp4fqfye2h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if not lst then\n    return 0\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxr990_0q.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even_idx = 1\n  local total = 0\n  for i = 1, #lst do\n  \
    \  if i % 2 == 0 then\n      total = total + lst[i]\n      lst[even_idx] = lst[i]\n\
    \      even_idx = even_idx + 1\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ktwvvp4.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp5ktwvvp4.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local newLst = {}\n    local counter = 0\n    for i, x in ipairs(lst)\
    \ do\n        if i % 2 == 0 then\n            newLst[counter] = x\n        end\n\
    \        counter = counter + 1\n    end\n    return newLst\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 tags=lua,algorithm |>\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9dzydqd1.lua:16: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5edodqo4.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n\tlocal res = lst[1]\n\tfor i = 2, #lst do\n\t\tres = res + lst[i]\n\
    \tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuws66wwf.lua:16:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpuws66wwf.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst < 1 then return end\n  local val = 1\n  for i=1, #lst, 2\
    \ do\n    val = val * lst[i]\n  end\n  return val\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gbyauh1.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp1gbyauh1.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 1 then\n    return lst[1]\n  end\n  local sum = 0\n \
    \ for i = 1, #lst do\n    if i % 2 == 0 then\n      sum = sum + lst[i]\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8u96vxq.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpm8u96vxq.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local i, odd = 0, lst:len()\n    while i ~= odd\n    do\n    \
    \    lst[i] = lst[i + (odd+1)]\n        odd = (odd+1)::len()\n        i = i +\
    \ (odd+1)::len()\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg9ss1_y8.lua:10: ''::'' expected near ''(''

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 1\n  local odd = 0\n  for i, v in pairs(lst) do\n \
    \   if i % 2 == 0 then\n      even = even + v\n    else\n      odd = odd + v\n\
    \    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpabx1is15.lua:25: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 2, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return table.concat(evens)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1bojmpp.lua:18:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpa1bojmpp.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  -- Base case\n  if #lst <= 0 then\n    return lst\n  end\n  -- Divide\
    \ by 2 because we want the odd numbers.\n  -- Divide by 2 because we want the\
    \ even numbers.\n  local even, odd = lst:div(2)\n  return add(even) + add(odd)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfz7fepbw.lua:12:\
    \ attempt to call a nil value (method 'div')\nstack traceback:\n\t/tmp/tmpfz7fepbw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpfz7fepbw.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\n  if lst[1] ~= nil then return add(lst[1])\
    \ end\n  if #lst == 1 then return lst[1] end\n  return add(lst[1]) + add(lst[#lst])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6qp9gno3.lua:6:\
    \ attempt to get length of a number value (local 'lst')\nstack traceback:\n\t\
    /tmp/tmp6qp9gno3.lua:6: in function </tmp/tmp6qp9gno3.lua:5>\n\t(...tail calls...)\n\
    \t/tmp/tmp6qp9gno3.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  local i = 1\n  while i < #lst do\n    if lst[i]\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n    i = i + 1\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcblxdhn2.lua:20:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmpcblxdhn2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:len()\n  local odd = lst:len()\n  if even and odd\
    \ then\n    for i=1,even do\n      if lst:get(odd-i) % 2 == 0 then lst:add(odd-i,\
    \ lst:get(odd-i) + 1) end\n    end\n  end\n  return lst:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp83doxx95.lua:6:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp83doxx95.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp83doxx95.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  for i = 1, #lst - 1 do\n    if i % 2 == 0 then\n      lst[i] = lst[i]\
    \ + lst[i + 1]\n    end\n  end\n  return lst[1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphopmt0nl.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmphopmt0nl.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  -- Base case.\n  if #lst == 0 then return 0 end\n  -- Add up all\
    \ the evens, adding them to an accumulator if needed.\n  local sum = 0\n  local\
    \ sum2 = 0\n  local i = 2\n  while i <= #lst do\n    sum = sum + lst[i]\n    sum2\
    \ = sum2 + lst[i]\n    i = i + 1\n  end\n  -- If the accumulator is odd, take\
    \ the next odd number\n  -- Otherwise take whatever number was already in the\
    \ accumulator.\n  return sum % 2 == 0 and sum2 or sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvtj_edmv.lua:26:\
    \ expected: 122, actual: 142\nstack traceback:\n\t/tmp/tmpvtj_edmv.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n\tlocal evens = {}\n\tfor i = 1, #lst do -- go through each element\
    \ in lst\n\t\tif math.fmod(i, 2) == 0 then -- if the element is a even number\
    \ add it to evens\n\t\t\tevens[#evens + 1] = lst[i] -- append the even number\
    \ to the evens table\n\t\tend -- end of if the element is a even number\n\tend\
    \ -- end of for loop\n\treturn table.concat(evens) -- return the concatenated\
    \ evens table\nend -- end of add\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzz2h8cqh.lua:18:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpzz2h8cqh.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 1 then\n    return lst[1]\n  end\n  return add(lst[1])\
    \ + add(lst[2:#lst])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjm_mtw4o.lua:9: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  -- Base case:\n  if lst[1] % 2 == 0 then\n    return lst[1]\n  else\n\
    \    local even = add(lst[2])\n    return even\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cr_om2f.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp5cr_om2f.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n   -- We are making lst empty here..\n   -- But if we did not do that,\
    \ we would have to make lst empty in recursive call..\n   -- That would've been\
    \ a waste..\n   local ret = \"\"\n   for i = 1, #lst do\n      if i % 2 == 0 then\n\
    \         ret = ret .. lst[i]\n      end\n   end\n   return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45og1qw7.lua:21:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmp45og1qw7.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local result = lst[1]\n  for i = 2, #lst do\n    if type(lst[i])\
    \ == \"number\" then\n      result = result + lst[i]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vhj6hbi.lua:18:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp5vhj6hbi.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local evens = {}\n    for i=1,#lst do\n      if i%2 == 1 then\n\
    \        table.insert(evens, lst[i])\n      end\n    end\n    return #evens\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaukkcmyl.lua:18:\
    \ expected: 88, actual: 1\nstack traceback:\n\t/tmp/tmpaukkcmyl.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\n  local evens, odds = 0, 0\n  for\
    \ i = 1, #lst do\n    if i % 2 == 0 then evens = evens + lst[i] end\n    if i\
    \ % 2 == 1 then odds = odds + lst[i] end\n  end\n  return evens + odds\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_zf7vqo.lua:18:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp7_zf7vqo.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1,#lst do\n    if i %\
    \ 2 ~= 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s5tmkbx.lua:21:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3s5tmkbx.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evensAtOddIndices = {}\n  local oddsAtOddIndices = {}\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2t9xkbty.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\n  local n = #lst\n  local res =\
    \ lst[1]\n  for i = 2, n do\n    if lst[i] % 2 == 1 then\n      res = lst[i] +\
    \ (res*2)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4knjqh_e.lua:20:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp4knjqh_e.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for i = 2, #lst do\n    if i%2 ~= 0 then\n \
    \     result = result + lst[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp177_k5az.lua:18:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmp177_k5az.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even_indexes = {}\n    local sum = 0\n    for i, v in pairs(lst)\
    \ do\n        if v % 2 == 0 then\n            even_indexes[i] = v\n          \
    \  sum = sum + v\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqrs6t4xo.lua:24: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  local odds = {}\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 then\n      evens[#evens + 1] = v\n    else\n      odds[#odds\
    \ + 1] = v\n    end\n  end\n  return evens, odds\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu99sd_9j.lua:21:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpu99sd_9j.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  for i=1,#lst,2 do\n    lst[i]=lst[i]+lst[i+1]\n  end\n  return lst[1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65xpsfc3.lua:15:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp65xpsfc3.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = {}\n  -- if lst is empty or nil, return nil\n  local\
    \ n = #lst\n  if n == 0 then\n    return nil\n  elseif n % 2 == 1 then\n    return\
    \ nil\n  else\n    for i = 1, n, 2 do\n      table.insert(even, lst[i])\n    end\n\
    \    return table.concat(even)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5356tizt.lua:24:\
    \ expected: 88, actual: \"4\"\nstack traceback:\n\t/tmp/tmp5356tizt.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst==0 then\n    return 0\n  else\n    local sum = 0\n    for\
    \ i = 1, #lst do\n      if i % 2 == 1 then\n        sum = sum + lst[i]\n     \
    \ end\n    end\n    return sum\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprttjaqz2.lua:22:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmprttjaqz2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n\tlocal sum = 0\n\tlocal curr = lst[1]\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp7f480cy.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for _, val in ipairs(lst) do\n    if val % 2 ~=\
    \ 0 then\n      sum = sum + val\n    end\n  end\n  return sum\nend\n</cell>\n\
    <cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx57xa4ie.lua:14: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n\tlocal even = 0\n\tlocal odd = 0\n\tlocal total = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4e4s2que.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 1 then\n    return lst[1]\n  else\n    local even, odd\
    \ = lst[1], lst[2]\n    return even * 2 + add(odd)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpza52xdjm.lua:6:\
    \ attempt to get length of a number value (local 'lst')\nstack traceback:\n\t\
    /tmp/tmpza52xdjm.lua:6: in upvalue 'add'\n\t/tmp/tmpza52xdjm.lua:10: in local\
    \ 'candidate'\n\t/tmp/tmpza52xdjm.lua:17: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n   local sum = 0\n   for _, v in ipairs(lst) do\n      if v % 2 ==\
    \ 0 then\n         sum = sum + v\n      end\n   end\n   return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp488mop5n.lua:18:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp488mop5n.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst > 0 then\n    return lst[1] + add(lst[2:end])\n  else\n\
    \    return 0\n  end\nend\n</cell>\n<text>\nThe next cell shows an example of\
    \ how a table can be passed into our add function. The key part is that it calls\
    \ the function with a list with multiple elements. This allows the function to\
    \ access each element separately.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyyx5l_bz.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if lst:len() == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp942vkpg6.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local result = 0\n    for i=1, #lst do\n        if i %% 2 == 1\
    \ then\n            result = result + lst[i]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8btegrxh.lua:8: unexpected symbol near ''%''

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for _, v in ipairs(lst) do\n    if v & 1 == 1 then\
    \ sum = sum + v end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgn16lbpl.lua:16:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmpgn16lbpl.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even, odd = {}, {}\n    for i = 1, #lst do -- iterate over\
    \ all elements in the list\n        if i %% 2 == 0 then -- if the index is an\
    \ even number, add it to the even list\n            even[#even+1] = lst[i] \n\
    \        else -- otherwise, add it to the odd list\n            odd[#odd+1] =\
    \ lst[i]\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpym8dsbc5.lua:8: unexpected symbol near ''%''

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n\tlocal sum = 0\n\tlocal i\n\tfor i = 2, #lst do\n\t\tif i % 2 ==\
    \ 0 then\n\t\t\tsum = sum + lst[i]\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6pyj7u5.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpg6pyj7u5.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 2, #lst do\n    if i % 2 == 1 then\n  \
    \    sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25c8nyb8.lua:18:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmp25c8nyb8.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 2, #lst,\
    \ 2 do\n    sum = sum + lst[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9wgh_de.lua:18:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpy9wgh_de.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n\tlocal i = 0\n\tfor i = 1, #lst do\n\t\tif i % 2 ~= 0 then\n\t\t\t\
    lst[i + 1] = lst[i]\n\t\tend\n\tend\n\treturn #lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xgh09ms.lua:18:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmp9xgh09ms.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i=1,#lst do\n        if i%2 == 1 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggvp3sm9.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpggvp3sm9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local result = {}\n    for i=1, #lst do\n        if i % 2 ~= 1\
    \ then\n            result[#result + 1] = lst[i]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfp1mijj.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmphfp1mijj.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst[1]\n  local odd = lst[2]\n  if even > 0 then\n\
    \    odd = odd + even\n  end\n  lst[1] = odd\n  return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9iijoby.lua:18:\
    \ expected: 88, actual: {92, 88}\nstack traceback:\n\t/tmp/tmpf9iijoby.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    if #lst == 0 then return 0 end\n    local even = add(lst:sub(1,\
    \ #lst))\n    local odd = add(lst:sub(2, #lst))\n    return even + odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpakw0do04.lua:7:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpakw0do04.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpakw0do04.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local index = 1\n  while true do\n    local element = lst[index]\n\
    \    if element % 2 ~= 0 then\n      lst[index] = element\n      index = index\
    \ + 1\n    else\n      lst[index] = element + 2\n      index = index + 1\n   \
    \ end\n    if index > #lst then break end\n  end\n  return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxq4hz9yj.lua:24:\
    \ expected: 88, actual: {6, 90}\nstack traceback:\n\t/tmp/tmpxq4hz9yj.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  local odds = {}\n  for i = 1, #lst do\n    if\
    \ i % 2 == 1 then\n      table.insert(evens, lst[i])\n    else\n      table.insert(odds,\
    \ lst[i])\n    end\n  end\n  return table.concat(evens) + table.concat(odds)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoyoomxc.lua:21:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmppoyoomxc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even = []\n    local odd = []\n    for i, v in pairs(lst)\
    \ do\n        if i%2 == 1 then\n            even = even + v\n        else\n  \
    \          odd = odd + v\n        end\n    end\n    return even, odd\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnqsxyoo4.lua:6: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    local odd = 0\n    for i, v in ipairs(lst)\
    \ do\n        local index = i % 2\n        local even = index == 1\n        if\
    \ even then\n            sum = sum + v\n        end\n        if index ~= 0 then\n\
    \            odd = true -- mark the position of odd elements\n        end\n  \
    \  end\n    if odd then return sum end\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplq2ali8_.lua:25:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmplq2ali8_.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evens = false\n  local sum = 0\n  local n = #lst\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7fp5t10p.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  -- base case\n  if #lst <= 1 then\n    return lst[2]\n  else\n \
    \   -- recursive case\n    local even = add(lst[#lst - 1])\n    return even *\
    \ 2 + lst[#lst - 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbnki6un5.lua:7:\
    \ attempt to get length of a number value (local 'lst')\nstack traceback:\n\t\
    /tmp/tmpbnki6un5.lua:7: in upvalue 'add'\n\t/tmp/tmpbnki6un5.lua:11: in local\
    \ 'candidate'\n\t/tmp/tmpbnki6un5.lua:19: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphsduzxgc.lua:17: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  local total = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxl9_f88a.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  -- go through even indices\n  for i = 1, #lst do\
    \ \n    -- if the index is odd, then add even element to the sum\n    if i % 2\
    \ == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphoedjlx0.lua:20:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmphoedjlx0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = []\n  local odd = []\n  for i = 1, #lst do\n    if\
    \ i % 2 == 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbhfg88h2.lua:6: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  -- start from 0\n  local even = 0\n  local odd = 0\n  local evensum\
    \ = 0\n  local oddsum = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjbjibd85.lua:21: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n   local sum = 0\n   for i = 2, #lst,  2 do sum = sum + lst[i] end\n\
    \   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgr77x6k.lua:15:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpzgr77x6k.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local result = 0\n    for i = 1, #lst, 2 do\n        if lst[i]\
    \ % 2 ~= 0 then result = (lst[i] + result) end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ideniex.lua:16:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmp4ideniex.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n   if #lst == 0 then\n      return 0\n   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp550zuk6f.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local result = {}\n    local i = 1\n    local count = 0\n    while\
    \ i <= #lst do\n        if count % 2 == 0 then\n            result[#result+1]\
    \ = lst[i]\n        end\n        i = i + 1\n        count = count + 1\n    end\n\
    \    return result \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vd8yvyf.lua:22:\
    \ expected: 88, actual: {4}\nstack traceback:\n\t/tmp/tmp9vd8yvyf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local i, l, m = 0, #lst, 0\n    while i < l do\n        if lst[i]\
    \ % 2 ~= 0 then\n            lst[m] = lst[i]\n            i = i + 1\n        else\n\
    \            i = i + 1\n            m = m + 1\n        end\n    end\n    return\
    \ lst[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfl6xcab7.lua:8:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpfl6xcab7.lua:8: in local 'candidate'\n\t/tmp/tmpfl6xcab7.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even_sum = 0\n    for i = 1, #lst do\n        if math.modf(i\
    \ / 2)[1] > 0 then\n            even_sum = even_sum + lst[i]\n        end\n  \
    \  end\n    return even_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_xj81w2h.lua:8:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmp_xj81w2h.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp_xj81w2h.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local result = {}\n    for i = 1, #lst do\n        if i % 2 ==\
    \ 0 then\n            result[i] = lst[i]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpleq_kvdb.lua:18:\
    \ expected: 88, actual: {2=88}\nstack traceback:\n\t/tmp/tmpleq_kvdb.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local total = 0\n  for i = 2, #lst do\n    if i % 2 == 1 then total\
    \ = total + lst[i] end\n  end\n  return total\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_dm4ej71.lua:16:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmp_dm4ej71.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local res\n    for i = 1,#lst do\n        if i % 2 == 1 then\n\
    \            res = res + lst[i]\n        end\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm3mya3u.lua:9:\
    \ attempt to perform arithmetic on a nil value (local 'res')\nstack traceback:\n\
    \t/tmp/tmplm3mya3u.lua:9: in local 'candidate'\n\t/tmp/tmplm3mya3u.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n   if #lst < 2 then return 0 end\n   local even, odd = {}, {}\n  \
    \ for i, v in ipairs(lst) do\n      if i % 2 == 0 then\n         even[v] = true\n\
    \      else\n         odd[v] = true\n      end\n   end\n   local sum = 0\n   for\
    \ k in pairs(even) do\n      sum = sum + k\n   end\n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmav_qbnf.lua:26:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpmav_qbnf.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if lst.count ~= 0 then\n    return lst:add(function (x) return x\
    \ % 2 == 0 end)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu57jmw78.lua:7:\
    \ attempt to call a nil value (method 'add')\nstack traceback:\n\t/tmp/tmpu57jmw78.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpu57jmw78.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for i = 1, #lst do\n    if i % 2 == 1 then\n\
    \      result = result + lst[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8kio2gn.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpd8kio2gn.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5edodqo4.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660008999
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if (i % 2) == 0 then\n\
    \      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmimffhtt.lua:19:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpmimffhtt.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  -- return 0 if not given an array\n  if not is_array(lst) then return\
    \ 0 end\n  -- return the sum of all even numbers found\n  return lst[#lst]:map(function(_)\
    \ return 2 * _ % 2 end):sum()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcy_x9v3p.lua:7:\
    \ attempt to call a nil value (global 'is_array')\nstack traceback:\n\t/tmp/tmpcy_x9v3p.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpcy_x9v3p.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst <= 1 then return lst\n  else\n    local result = {}\n  \
    \  local last = lst[1]\n    local i = 1\n    while i <= #lst do\n      if i %\
    \ 2 == 0 then\n        last = last+lst[i]\n      end\n      i = i+1\n    end\n\
    \    if last == 0 then\n      return lst[1]\n    else\n      return last\n   \
    \ end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplt46p3ph.lua:28:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmplt46p3ph.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local sum = 0 \n  for i=1, #lst do\n    if i % 2 == 1 then\n   \
    \   sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmp9epcua.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpmp9epcua.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  for i = 2, #lst do\n    if lst[i] % 2 ~= 0 then\n      return lst[i]\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_am75ef.lua:16:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpv_am75ef.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 0 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkr5dvow.lua:19:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpfkr5dvow.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  return lst[2] + lst[1] -- add two elements at index 2 and 1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsknmci5n.lua:12:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsknmci5n.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even_index = 0\n  local odd_index = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy0skhgrs.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  local i = 1\n  while i <= #lst do -- start from\
    \ 1 because index starts with 1\n    if i % 2 == 1 then\n      sum = sum + lst[i]\n\
    \    end\n    i = i +1\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpasacfoul.lua:20:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpasacfoul.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n\tlocal even = 0\n\tlocal odd = 0\n\tfor i=1, #lst-1 do\n\t\tif ((i\
    \ % 2) ~= 0) then\n\t\t\teven = even + lst[i]\n\t\telse\n\t\t\todd = odd + lst[i]\n\
    \t\tend\n\tend\n\treturn even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1ggbgkx.lua:21:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpt1ggbgkx.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i=1,#lst,2 do\n    sum = sum + lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_lcp6m59.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp_lcp6m59.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if lst:len() == 0 then return end\n  local evens, odds = lst:sub(1,\
    \ lst:len()/2), lst:sub(lst:len()/2+1, lst:len())\n  if evens:len() > 0 then\n\
    \    if evens:sub(1, evens:len()/2) ~= odds:sub(1, odds:len()/2) then\n      return\
    \ evens:sub(1, evens:len()/2) + odds:sub(1, odds:len()/2)\n    end\n  end\n  return\
    \ lst:sub(1, lst:len()/2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn8jbh6jl.lua:6:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpn8jbh6jl.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpn8jbh6jl.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local function f(r, v)\n        if r ~= nil then\n           \
    \ v = v + v\n        else\n            r = v\n        end\n        return r\n\
    \    end\n    return table.fold(lst, f, nil)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9vv5n0dl.lua:14:\
    \ attempt to call a nil value (field 'fold')\nstack traceback:\n\t/tmp/tmp9vv5n0dl.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp9vv5n0dl.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evenSum = 0\n  for i=1, #lst do\n    local cur = lst[i]\n\
    \    if i %% 2 ~= 0 then\n      evenSum = evenSum + cur\n    end\n  end\n  return\
    \ evenSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl8zh6bab.lua:9: unexpected symbol near ''%''

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if #lst <= 0 then return 0 end\n  local even = 0\n  for i = 1, #lst\
    \ do\n    if i %% 2 == 0 then\n      even = even + lst[i]\n    end\n  end\n  return\
    \ even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7umn800m.lua:9: unexpected symbol near ''%''

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  return lst[1] + lst[2]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3qsgknw8.lua:12:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp3qsgknw8.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  if lst[1] == nil then\n    return nil\n  end\n  local value\n  if\
    \ #lst > 0 then\n    local index = 1\n    local value\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnuc2cp7t.lua:23: ''end'' expected (to close ''if'' at line
    10) near <eof>

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 2, #lst do\n    if i%2 == 0 then\n    \
    \  sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmx_fhjc.lua:19:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpvmx_fhjc.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  -- First find the first even index in the list\n  local index =\
    \ next(lst, function (x) return x % 2 == 0 end)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphznsemo2.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n   if #lst = 0 then return nil end\n   local even = 0\n   local odd\
    \ = 0\n   for i = 1,#lst do if lst[i] % 2 == 0 then even = even + lst[i] else\
    \ odd = odd + lst[i] end end\n   return even\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3dvcau0f.lua:6: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n   local i = 0\n   while i < #lst do\n      if i % 2 == 0 then\n \
    \        local element = lst[i]\n         lst[i] = element + element % 2\n   \
    \   end\n      i = i + 1\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzw3ybgmg.lua:10:\
    \ attempt to perform arithmetic on a nil value (local 'element')\nstack traceback:\n\
    \t/tmp/tmpzw3ybgmg.lua:10: in local 'candidate'\n\t/tmp/tmpzw3ybgmg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evens = lst:gt(1)\n  local odds = lst:gt(0)\n  local sum =\
    \ 0\n  if evens then\n    for i = 1, #lst:gt(2) do sum = sum + lst:get(i) end\n\
    \  else\n    sum = lst:get(1)\n  end\n  if odds then\n    for i = 1, #lst:gt(2)\
    \ do sum = sum + lst:get(i) end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqrr_1zmf.lua:6:\
    \ attempt to call a nil value (method 'gt')\nstack traceback:\n\t/tmp/tmpqrr_1zmf.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpqrr_1zmf.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n   local sum = 0\n   for i = 1, #lst do \n      if i%2 == 0 then\n\
    \         sum = sum + lst[i]\n      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokw1j4oc.lua:19:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpokw1j4oc.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i = 2, #lst do\n        if lst[i] % 2 ==\
    \ 1 then\n            sum = sum + lst[i]\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6dnj9fi5.lua:18:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmp6dnj9fi5.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    elseif i % 2 == 1 then\n    \
    \  odd = odd + lst[i]\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ed_ga91.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp1ed_ga91.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009000
