language: lua
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest, smallest_index,\
    \ i = {}, 0, 1\n    for i, v in ipairs(arr) do\n        if smallest[v] ~= nil\
    \ then\n            if smallest[v] >= v then\n                smallest[v] = nil\n\
    \                smallest_index = i\n            end\n        else\n         \
    \   smallest[v] = v\n        end\n    end\n    local evens = {}\n    for i, v\
    \ in ipairs(smallest) do\n        if v ~= nil then\n            if v % 2 == 0\
    \ then\n                evens[v] = true\n            end\n        end\n    end\n\
    \    if #evens == 0 then\n        return {}\n    else\n        return {smallest_index,\
    \ evens[smallest_index]}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdmk4pil.lua:56:\
    \ expected: {2, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmpmdmk4pil.lua:56: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Create a map of even values\
    \ to their indices.\n  local map_even = {}\n  for i = 1, #arr do\n    if math.modf(arr[i])[1]\
    \ then\n      map_even[arr[i]] = i\n    end\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcod58p53.lua:48: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Start with all the even\
    \ values.\n  local evens = {}\n  -- The picked value is stored as a pair in a\
    \ table.\n  local pick = {}\n  for _, node in ipairs(arr) do\n    -- If the value\
    \ is even, then add it to the even table.\n    if node % 2 == 0 then\n      table.insert(evens,\
    \ node)\n    end\n  end\n  -- If there are no even values, just return an empty\
    \ table.\n  if not #evens then\n    return {}\n  end\n  -- The picked value is\
    \ stored as a pair in a table.\n  table.sort(evens)\n  -- Pick the smallest even\
    \ value.\n  local smallest = table.min(evens)\n  -- If there is no smallest even\
    \ value, return an empty table.\n  if smallest == 0 then\n    return {}\n  end\n\
    \  -- For each even value in the even table, add it to the pick table.\n  for\
    \ _, node in ipairs(evens) do\n    -- If the value is equal to the smallest value,\
    \ then add it to the pick table.\n    if node == smallest then\n      table.insert(pick,\
    \ smallest)\n    end\n  end\n  -- Return the pick table.\n  return pick\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_kh6quj.lua:44:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmph_kh6quj.lua:44:\
    \ in local 'candidate'\n\t/tmp/tmph_kh6quj.lua:63: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base Case:\n  -- If there\
    \ are no even values, return an empty table:\n  return next(arr) or {} end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjpozyqkb.lua:34:\
    \ expected: {2, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpjpozyqkb.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value, index_of_smallest_value\
    \ = math.inf, nil\n    for _, v in ipairs(arr) do\n        if math.fmod(v, 2)\
    \ ~= 0 then\n            if index_of_smallest_value == nil then\n            \
    \    smalest_value, index_of_smallest_value = v, 1\n            elseif v < smalest_value\
    \ then\n                smalest_value, index_of_smallest_value = v, index_of_smallest_value\n\
    \            end\n        end\n    end\n    if index_of_smallest_value == nil\
    \ then\n        return {}\n    elseif index_of_smallest_value == 1 then\n    \
    \    return {smalest_value}\n    else\n        return {smalest_value, index_of_smallest_value}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2kbiybyx.lua:49:\
    \ expected: {2, 1}\nactual: {3}\nstack traceback:\n\t/tmp/tmp2kbiybyx.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- initialize your data structure\
    \ here.\n  local nodes = {}\n  local smallest_value = 0\n  local smallest_index\
    \ = 0\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n      table.insert(nodes,\
    \ {value = arr[i], index = i})\n      if smallest_value == 0 then\n        smallest_value\
    \ = arr[i]\n        smallest_index = i\n      elseif smallest_value ~= arr[i]\
    \ then\n        if smallest_value > arr[i] then\n          smallest_value = arr[i]\n\
    \          smallest_index = i\n        end\n      end\n    end\n  end\n  return\
    \ nodes[#nodes]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0lo037vm.lua:51:\
    \ expected: {2, 1}\nactual: {index=2, value=2}\nstack traceback:\n\t/tmp/tmp0lo037vm.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local low_index, low_value\
    \ = nil, nil\n  for idx, node in ipairs(arr) do\n    if low_value is nil or node.value\
    \ < low_value then\n      low_index, low_value = idx, node.value\n    end\n  end\n\
    \  if low_value == nil then\n    return {}\n  end\n  return {arr[low_index], low_index}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1eqhowto.lua:29: ''then'' expected near ''is''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr == 0 then return\
    \ {} end\n    local smallest, smallest_index, index\n    local indexes, values\
    \ = table.unpack({}, 2, nil)\n    for i = 2, #arr do\n        if arr[i] < smallest\
    \ then\n            smallest, smallest_index = arr[i], i\n        elseif arr[i]\
    \ == smallest then\n            indexes[indexes[1]] = i\n            values[indexes[1]]\
    \ = arr[i]\n            indexes[indexes[2]] = i\n            values[indexes[2]]\
    \ = arr[i]\n        end\n    end\n    if #values < 2 then return {} end\n    smallest_index\
    \ = 1\n    smallest, smallest_value = smallest, values[0]\n    indexes[1] = indexes[2]\n\
    \    values[1] = values[2]\n    for i = 1, #values do\n        if values[i] ~=\
    \ smallest then\n            smallest, smallest_value = values[i], arr[i]\n  \
    \          indexes[smallest_index] = values[i]\n            indexes[smallest_index\
    \ + 1] = values[i]\n            smallest_index = smallest_index + 1\n        elseif\
    \ values[i] == smallest then\n            indexes[smallest_index] = values[i]\n\
    \            smallest_index = smallest_index + 1\n        end\n    end\n    return\
    \ table.pack(indexes)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpspmc_s06.lua:31:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpspmc_s06.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpspmc_s06.lua:62: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local index = {}\n  local smalest_value,\
    \ smalest_idx\n  local count = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2npm4e3t.lua:44: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local evens = {}\n  local smalest_value\
    \ = nil\n  local smallest_index = nil\n  for i = 1, #arr do\n    local value =\
    \ arr[i]\n    if value % 2 == 0 then\n      table.insert(evens, value)\n     \
    \ if value < smalest_value then\n        smalest_value = value\n        smallest_index\
    \ = i\n      end\n    end\n  end\n  if #evens == 0 then\n    return {}\n  elseif\
    \ #evens > 1 then\n    local smallest_even = #evens\n    for i = 1, #evens do\n\
    \      if evens[i] < smallest_even then\n        smallest_even = evens[i]\n  \
    \    end\n    end\n    smalest_value = evens[smallest_even]\n    smallest_index\
    \ = smallest_index or smallest_even\n  end\n  return {smalest_value, smallest_index}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp52fv_4mp.lua:34:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp52fv_4mp.lua:34:\
    \ in local 'candidate'\n\t/tmp/tmp52fv_4mp.lua:58: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if not arr then return end\n\
    \    local smalest_value, smalest_index = 0, 1\n    for i, v in ipairs(arr) do\n\
    \        if v ~= 0 then\n            -- smalest_value will be the largest value\
    \ that occurs at this index\n            -- smalest_index will be the index in\
    \ arr that occurs first.\n            if smalest_value < v then\n            \
    \    smalest_value, smalest_index = v, i\n            end\n        end\n    end\n\
    \    return arr[(smalest_index + 1):(#arr)]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeo3dyhhn.lua:38: <name> expected near ''(''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value = math.inf\n\
    \    local smallest_index = -1\n    local min_value_index = nil\n    for i, value\
    \ in ipairs(arr) do\n        if value <= smallest_value then\n            smallest_value\
    \ = value\n            smallest_index = i\n            if value == smallest_value\
    \ then\n                min_value_index = i\n            end\n        end\n  \
    \  end\n    return { smallest_value, min_value_index }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr0yk_jo5.lua:31:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpr0yk_jo5.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpr0yk_jo5.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return end\n\
    \  local sorted_arr = table.sort(arr)\n  for i = 1, #sorted_arr do\n    if sorted_arr[i]\
    \ == sorted_arr[i + 1] then\n      if sorted_arr[i] % 2 == 0 then\n        local\
    \ index = i\n        while sorted_arr[index] % 2 == 0 and sorted_arr[index] ~=\
    \ sorted_arr[index + 1] do\n          index = index + 1\n        end\n       \
    \ return table.insert({sorted_arr[i], index}, 2)\n      else\n        return table.insert({sorted_arr[i],\
    \ i}, 2)\n      end\n    end\n  end\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplgunymua.lua:43: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then\n    return\
    \ {}\n  end\n  local tbl = {}\n  for _, node in ipairs(arr) do\n    local val,\
    \ index = node\n    if val % 2 == 0 then\n      table.insert(tbl, { val, index\
    \ })\n    end\n  end\n  local min_val, min_idx = math.min(unpack(tbl))\n  if min_val\
    \ % 2 == 0 then\n    table.insert(tbl, { min_val, min_idx })\n  end\n  return\
    \ tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2_x4vtu4.lua:37:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp2_x4vtu4.lua:37:\
    \ in local 'candidate'\n\t/tmp/tmp2_x4vtu4.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local size = #arr\n    local\
    \ smalest_value = arr[1]\n    local min_idx = 1\n    local smalest_idx\n    for\
    \ idx = 2, size do\n        local value = arr[idx]\n        if value % 2 == 0\
    \ then\n            if value < smalest_value then\n                smalest_value\
    \ = value\n                smalest_idx = idx\n            elseif value == smalest_value\
    \ then\n                if idx < min_idx then\n                    min_idx = idx\n\
    \                end\n            end\n        end\n    end\n    \n    local ret\
    \ = {smalest_value, smalest_idx}\n    \n    if smalest_idx == min_idx then\n \
    \       if size == 0 then\n            ret = {}\n        else\n            local\
    \ idx = 1\n            while idx <= size do\n                local value = arr[idx]\n\
    \                if value % 2 == 0 then\n                    idx = idx+1\n   \
    \             else\n                    break\n                end\n         \
    \   end\n            table.insert(ret, arr[min_idx])\n        end\n    end\n \
    \   \n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dmyyn06.lua:70:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp2dmyyn06.lua:70:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Your code here\n  local\
    \ smalest_value=arr[1]\n  local smalest_index=1\n  local even_values={}\n  for\
    \ i=2,#arr do\n    if arr[i]%2==0 then\n      even_values[#even_values+1]=arr[i]\n\
    \    end\n    if arr[i]<smalest_value then\n      smalest_value=arr[i]\n     \
    \ smalest_index=i\n    end\n  end\n  if #even_values == 0 then\n    return {}\n\
    \  else\n    if #even_values==1 then\n      return even_values\n    end\n    local\
    \ minimum_index=2\n    for i=#even_values,1,-1 do\n      if even_values[i]<even_values[minimum_index]\
    \ then\n        minimum_index=i\n      end\n    end\n    return even_values[minimum_index]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp070d1p4s.lua:59:\
    \ expected: {2, 1}\nactual: {2}\nstack traceback:\n\t/tmp/tmp070d1p4s.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local function pick(arr,\
    \ smallest_even_value, smallest_index)\n        local function sort_key(elem)\n\
    \            -- This key function picks a node and extracts the index\n      \
    \      -- from the element and sorts the array according to this\n           \
    \ -- index.\n            local idx = 1\n            if elem.value % 2 == 0 then\n\
    \                idx = elem.value / 2\n            end\n            return idx\n\
    \        end\n        table.sort(arr, sort_key)\n        local min_even_value,\
    \ min_idx = 1, 1\n        if #arr > 0 then\n            min_even_value, min_idx\
    \ = arr[#arr]\n        end\n        if min_even_value < smallest_even_value then\n\
    \            smallest_even_value, smallest_idx = min_even_value, min_idx\n   \
    \     end\n        return smallest_idx, arr\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu7e3lrfm.lua:62: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value, smallest_index\
    \ = math.inf, -1\n    for i = 1, #arr do\n        if smallest_index == -1 then\n\
    \            smallest_value, smallest_index = arr[i], i\n        else\n      \
    \      if arr[i] < smallest_value then\n                smallest_value, smallest_index\
    \ = arr[i], i\n            end\n        end\n    end\n    if smallest_index ==\
    \ -1 then\n        return nil\n    end\n    return {smallest_value, smallest_index}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprufvsv14.lua:46:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmprufvsv14.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\t-- base case\n\tif #arr ==\
    \ 0 then\n\t\treturn {}\n\tend\n\t-- sort the array\n\ttable.sort(arr)\n\t-- find\
    \ the smallest\n\tif arr[1] % 2 == 0 then\n\t\treturn {arr[1], arr[1]}\n\telse\n\
    \t\treturn {arr[1], #arr}\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5hutn2to.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5hutn2to.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then\n    return\
    \ {}\n  end\n  local min = arr[math.min(#arr)]\n  local index = 0\n  local min_index\
    \ = 1\n  local cur_min = arr[1]\n  for i = 2, #arr do\n    if arr[i] < min then\n\
    \      min = arr[i]\n      min_index = index\n      cur_min = arr[1]\n    end\n\
    \    if arr[i] == min then\n      index = index + 1\n      cur_min = min\n   \
    \ end\n  end\n  return { cur_min, min_index }\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzg0bgm2.lua:51:\
    \ expected: {2, 1}\nactual: {2, 0}\nstack traceback:\n\t/tmp/tmpwzg0bgm2.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 1 then\n    return\
    \ arr\n  end\n  local smaller\n  smaller = nil\n  for _, v in ipairs(arr) do\n\
    \    if smaller and smaller.value <= v then\n      smaller = nil\n    else\n \
    \     if smaller and smaller.value == v then\n        smaller.index = v\n    \
    \  else\n        smaller = {value, index = v}\n      end\n    end\n  end\n  if\
    \ smaller then\n    table.insert(smaller, #arr + 1)\n  end\n  return smaller\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6a5ax_a5.lua:33:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp6a5ax_a5.lua:33:\
    \ in local 'candidate'\n\t/tmp/tmp6a5ax_a5.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local result = {}\n    for\
    \ i, v in pairs(arr) do\n        if v %2 == 0 then\n            if result[math.min(v,\
    \ #result)] ~= nil then\n                result[math.min(v, #result)] = i\n  \
    \          else\n                result[#result+1] = i\n            end\n    \
    \    end\n    end\n    if next(result) == nil then\n        return result\n  \
    \  else\n        return result\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaf6lalqm.lua:47:\
    \ expected: {2, 1}\nactual: {2}\nstack traceback:\n\t/tmp/tmpaf6lalqm.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if arr == nil then\n    return\
    \ {}\n  end\n  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprfe755ms.lua:47: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr == 0 then\n     \
    \   return {}\n    end\n    local n = #arr\n    local even = {}\n    for i = 1,\
    \ n do\n        if arr[i] % 2 == 0 then\n            even[#even + 1] = arr[i]\n\
    \        end\n    end\n    local i, val = 0, #even\n    while i < val do\n   \
    \     i = i + 1\n        if even[i] < even[val] then\n            val = i\n  \
    \      end\n    end\n    return even[val]\nend\n</cell>\n<text>\n4.2. Find Minimum\
    \ in a BST\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe_fpiokk.lua:46: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local evens = {}\n    local\
    \ smalest_value = nil\n    local smallest_index = nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiikyj1_o.lua:44: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr == 0 then\n     \
    \   return {}\n    end\n    local result = {}\n    for _, node in ipairs(arr)\
    \ do\n        local min_index = nil\n        local min_value = nil\n        for\
    \ i = 1, #result do\n            local value = result[i].value\n            if\
    \ node.value == value then\n                if min_index == nil then\n       \
    \             min_index = i\n                    min_value = value\n         \
    \       else\n                    if value < min_value then\n                \
    \        min_index = i\n                        min_value = value\n          \
    \          end\n                end\n            end\n        end\n        table.insert(result,\
    \ {value = node, index = min_index})\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphqs88x1h.lua:36:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmphqs88x1h.lua:36:\
    \ in local 'candidate'\n\t/tmp/tmphqs88x1h.lua:56: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value, smalest_index\
    \ = nil, nil -- Initialize to nil.\n    for i = 1, #arr do\n        if arr[i]%2\
    \ == 0 then\n            if smalest_value == nil then -- Initialize to nil.\n\
    \                smalest_value = arr[i]\n                smalest_index = i\n \
    \           elseif arr[i] < smalest_value then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxefvict.lua:45:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmptxefvict.lua:45: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest, smallest_index,\
    \ index_of_smallest, even_values, smallest_even_value\n    for _, n in ipairs(arr)\
    \ do\n        if even_values == nil then\n            even_values = n\n      \
    \      smallest_even_value = n\n            smallest_index = nil\n        elseif\
    \ n < smallest_even_value\n            smallest_even_value = n\n            smallest_index\
    \ = nil\n        elseif n == smallest_even_value then\n            smallest_index\
    \ = index_of_smallest + 1\n        elseif n < even_values then\n            even_values\
    \ = n\n            smallest_even_value = n\n            smallest_index = nil\n\
    \        elseif n == even_values then\n            smallest_index = index_of_smallest\
    \ + 1\n        end\n    end\n    if smallest_index == nil then\n        return\
    \ nil\n    else\n        return {smallest_value, smallest_index}\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppgitqtgc.lua:34: ''then'' expected near ''smallest_even_value''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if arr == nil then return nil\
    \ end\n  local smallest_even_index = nil\n  local smallest_even_value = nil\n\
    \  for k, v in pairs(arr) do\n    if math.mod(v, 2) == 0 then\n      if smallest_even_index\
    \ == nil then\n        smallest_even_index = k\n        smallest_even_value =\
    \ v\n      elseif smallest_even_index > k then\n        smallest_even_index =\
    \ k\n        smallest_even_value = v\n      end\n    end\n  end\n  if smallest_even_index\
    \ ~= nil then\n    return {smallest_even_value,smallest_even_index}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmbrc3zht.lua:31:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpmbrc3zht.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpmbrc3zht.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local result = {}\n  for i\
    \ = 1, #arr do\n    local value = arr[i]\n    if value % 2 == 0 then\n      table.insert(result,\
    \ value)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoltgpce3.lua:40:\
    \ expected: {2, 1}\nactual: {4, 2}\nstack traceback:\n\t/tmp/tmpoltgpce3.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local function min_by_index(arr,\
    \ i)\n        local function compare(x, y)\n            if x < y then return -1\
    \ end\n            if x > y then return 1 end\n            return 0\n        end\n\
    \        local function smallest(num)\n            local value = num\n       \
    \     for i, v in ipairs(arr) do\n                if v < value then\n        \
    \            value = v\n                end\n            end\n            return\
    \ value\n        end\n        return smallest(arr[i])\n    end\n    local smallest\
    \ = min_by_index(arr, 1)\n    local results = {}\n    for i, v in ipairs(arr)\
    \ do\n        if smallest == v then\n            results[i] = v\n        end\n\
    \    end\n    if #results == 0 then\n        return {}\n    end\n    return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphly295fy.lua:60:\
    \ expected: {2, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmphly295fy.lua:60: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local table = {}\n    for\
    \ i = 1,#arr do\n        table[i] = {arr[i], i}\n    end\n    table.sort(function(a,\
    \ b)\n        if a.value < b.value then\n            return 1\n        else\n\
    \            return -1\n        end\n    end)\n    return table[1].value\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2l62r0a_.lua:31:\
    \ attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmp2l62r0a_.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmp2l62r0a_.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr == 1 then\n     \
    \   return arr\n    end\n    local smalest_value\n    local smallest_index\n \
    \   for index, value in pairs(arr) do\n        if smalest_value == nil then\n\
    \            smalest_value = value\n            smallest_index = index\n     \
    \   end\n        if value % 2 == 0 then\n            if smalest_value < value\
    \ then\n                smalest_value = value\n                smallest_index\
    \ = index\n            end\n        end\n    end\n    if smallest_index == nil\
    \ then\n        return {}\n    end\n    return { smalest_value = arr[smallest_index],\
    \ smallest_index = smallest_index }\nend\n</cell>\n<text>\n\u4E0A\u9762\u7684\u4EE3\
    \u7801\u4E2D\uFF0C\u6211\u4EEC\u5C06\u5728\u4E00\u4E2A\u6570\u7EC4\u4E0A\u63D0\
    \u53D6\u4E00\u4E2A\u8282\u70B9\uFF0C\u5E76\u4E14\u6211\u4EEC\u53EF\u4EE5\u63D0\
    \u53D6\u7684\u8282\u70B9\u662F\u5176\u4E2D\u4E4B\u4E00\u7684\u8282\u70B9\uFF0C\
    \u6B64\u65F6\u6211\u4EEC\u53EF\u4EE5\u76F4\u63A5\u5C06\u8FD9\u4E2A\u8282\u70B9\
    \u63D0\u53D6\u51FA\u6765\u3002\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpip09xjol.lua:49: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local res = {}\n  local smalest_value\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppmyzv0us.lua:43: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n   local min_index\n   local\
    \ min_value\n   for _, v in ipairs(arr) do\n      if v < min_value then\n    \
    \     min_index = nil\n         min_value = v\n      elseif v == min_value then\n\
    \         min_index = math.min(min_index, min_value)\n      else\n         return\
    \ nil\n      end\n   end\n   if min_index == nil then\n      return {}\n   else\n\
    \      local index\n      min_value = arr[min_index]\n      for _, v in ipairs(arr)\
    \ do\n         if v == min_value then\n            index = v\n         else\n\
    \            return nil\n         end\n      end\n      return { min_value, index\
    \ }\n   end\nend\n</cell>\n<text>\nAnd then just use that function in the cells\
    \ below to get your solution.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0dxi2qib.lua:54: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local small_index = 0\n  local\
    \ small = nil\n  local index = 0\n  for i,v in ipairs(arr) do\n    index = i\n\
    \    small = v\n    if small < 0 then small = 0\n    end\n    if small % 2 ==\
    \ 0 then small_index = i end\n  end\n  if small == nil then return [] end\n  return\
    \ { small, small_index }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphtezqv75.lua:37: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if arr == nil then return\
    \ nil end\n    if #arr == 0 then return {} end\n    local smallest_even_value,\
    \ smallest_even_index = 0, 1\n    local smallest_index, smallest_value = nil,\
    \ 1\n    for i = 1, #arr do\n        local value = arr[i]\n        if value !=\
    \ nil and (math.abs(value) > math.abs(smallest_even_value) or smallest_value ==\
    \ smallest_even_value) then\n            smallest_even_value, smallest_even_index\
    \ = value, i\n            smallest_index, smallest_value = smallest_index, smallest_even_value\n\
    \        else\n            if smallest_even_index < i then\n                smallest_even_value,\
    \ smallest_even_index = smallest_value, smallest_even_index\n                smallest_index,\
    \ smallest_value = smallest_index, smallest_even_value\n            end\n    \
    \    end\n    end\n    return arr { smallest_even_value, smallest_index }\nend\n\
    </cell>\n<text>\nProblem 3\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb9hbhcks.lua:33: ''then'' expected near ''!''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_even_value =\
    \ #arr\n  local smallest_even_index\n  local smallest_value\n  local smallest_index\n\
    \  for index, node in ipairs(arr) do\n    if smallest_even_value < node.value\
    \ then\n      smallest_even_value = node.value\n      smallest_even_index = index\n\
    \    end\n    if smallest_even_value == node.value then\n      if smallest_value\
    \ < node.value then\n        smallest_value = node.value\n        smallest_index\
    \ = index\n      end\n    end\n  end\n  if smallest_even_index and smallest_even_index\
    \ ~= 0 then\n    return {smallest_value, smallest_even_index}\n  else\n    return\
    \ {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ojnj8p4.lua:32:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmp5ojnj8p4.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmp5ojnj8p4.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n   assert(type(arr) == \"table\"\
    )\n   local min = nil\n   local min_index = -1\n   local res = {}\n   for i =\
    \ 1, #arr do\n      if arr[i] then\n         if min then\n            local m\
    \ = math.floor(arr[i]/2)\n            if arr[i] == 2 * m then\n              \
    \ res[#res+1] = m\n               res[#res+1] = i\n            else\n        \
    \       if arr[i] < 2 * m then\n                  min = arr[i]\n             \
    \     min_index = i\n               end\n            end\n         else\n    \
    \        min = arr[i]\n            min_index = i\n         end\n      end\n  \
    \ end\n   if min == nil then\n      return {}\n   else\n      if #res == 0 then\n\
    \         return {}\n      else\n         if min == 0 then\n            res[1]\
    \ = min_index\n            return res\n         else\n            local m = math.floor(min\
    \ / 2)\n            if min % 2 == 0 then\n               res[1] = min_index\n\
    \               res[2] = m\n               return res\n            end\n     \
    \    end\n      end\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyr6q9rjd.lua:74:\
    \ expected: {2, 1}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpyr6q9rjd.lua:74:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value, smalest_index\n\
    \  local max_value, max_index = math.nan, math.nan\n  for _, v in pairs(arr) do\n\
    \    if v >= 0 then\n      if smalest_value == math.nan or v < smalest_value then\n\
    \        smalest_value, smalest_index = v, 1\n      else\n        if v < max_value\
    \ then\n          max_value = v\n          max_index = smalest_index\n       \
    \ end\n      end\n    end\n  end\n  return arr[max_index], max_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxxl1m104.lua:34:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpxxl1m104.lua:34:\
    \ in local 'candidate'\n\t/tmp/tmpxxl1m104.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr == 0 then\n     \
    \   return {}\n    end\n    local SmallestEven = 1\n    local Index = 1\n    for\
    \ _, node in ipairs(arr) do\n        if SmallestEven < node.value % 2 then\n \
    \           SmallestEven = node.value % 2\n            Index = node.index\n  \
    \      end\n    end\n    return { SmallestEven, Index }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv47rtfy6.lua:33:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpv47rtfy6.lua:33:\
    \ in local 'candidate'\n\t/tmp/tmpv47rtfy6.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local n = #arr\n  local m =\
    \ math.min(2, n)\n  local smalest_values = {}\n  local smalest_index = 0\n  for\
    \ i=1,m do\n    local smalest_value = arr[smalest_index]\n    smalest_index =\
    \ smalest_index + arr[i]\n    if smalest_values[smalest_value] == nil then\n \
    \     smalest_values[smalest_value] = i\n    end\n  end\n  if smalest_values[smalest_value]\
    \ ~= nil then\n    return smalest_values, smalest_values[smalest_value]\n  end\n\
    \  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ob88lix.lua:35:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmp4ob88lix.lua:35: in local 'candidate'\n\
    \t/tmp/tmp4ob88lix.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr == 0 then\n     \
    \   return {}\n    end\n    local largest, index = {}\n    for i = 1, #arr do\n\
    \        if i % 2 == 0 then\n            if largest == nil or arr[i - 1].value\
    \ < arr[i].value then\n                largest = arr[i]\n            end\n   \
    \     else\n            if largest == nil then\n                largest = arr[i]\n\
    \            else\n                if arr[i - 1].value == largest.value then\n\
    \                    largest.index = i\n                end\n            end\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5lzxk8j9.lua:40:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp5lzxk8j9.lua:40:\
    \ in local 'candidate'\n\t/tmp/tmp5lzxk8j9.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return nil\n\
    \  if #arr == 1 then return arr[0]\n  local min, min_ind = math.min(arr.value),\
    \ 0\n  for i = 1, #arr do\n    if arr[i].value == min and math.mod(i, 2) == 0\
    \ then min_ind = i\n    else min = arr[i].value end\n  end\n  return { min = min,\
    \ index = min_ind }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8xp2jv53.lua:28: ''end'' expected (to close ''if'' at line
    27) near ''if''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local function pick(node, index)\n\
    \    local _, smalest_value = select(2, node)\n    if smalest_value % 2 == 0 then\
    \ return smalest_value end\n    return index\n  end\n  if #arr == 0 then return\
    \ {} end\n  local index = 1\n  local node = arr[1]\n  while #arr > 1 do\n    local\
    \ _ = pick(node, index)\n    node = arr[#arr]\n    index = index + 1\n  end\n\
    \  return node\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpglyjhje_.lua:42: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- write your code here\n \
    \ -- base case\n  if arr == nil then return end\n  -- base case\n  if arr[1] ==\
    \ nil then return end\n  --print(arr[1])\n  --print(arr[#arr])\n  --print(arr[#arr])\n\
    \  if arr[#arr] == nil then return end\n  --print(arr[#arr])\n  if arr[#arr] ==\
    \ arr[1] then return end\n  --print(arr[#arr])\n  --print(arr[#arr])\n  if arr[#arr]\
    \ == arr[#arr-1] then return end\n  --print(arr[#arr])\n  --print(arr[#arr])\n\
    \  if arr[#arr]%2 == 0 then return end\n  --print(arr[#arr])\n  --print(arr[#arr])\n\
    \  if arr[#arr]%2 == 1 then return end\n  --print(arr[#arr])\n  --print(arr[#arr])\n\
    \  \n  --print(arr[#arr])\n  --print(arr[#arr])\n  if arr[#arr] == arr[#arr-1]\
    \ then return end\n  --print(arr[#arr])\n  --print(arr[#arr])\n  if arr[#arr]\
    \ == arr[#arr-1] then return end\n  --print(arr[#arr])\n  --print(arr[#arr])\n\
    \  if arr[#arr] == arr[#arr-1] then return end\n  --print(arr[#arr])\n  --print(arr[#arr])\n\
    \  if arr[#arr] == arr[#arr-1] then return end\n  --print(arr[#arr])\n  --print(arr[#arr])\n\
    \  if arr[#arr] == arr[#arr-1] then return end\n  --print(arr[#arr])\n  --print(arr[#arr])\n\
    \  if arr[#arr] == arr[#arr-1] then return end\n  --print(arr[#arr])\n  --print(arr[#arr])\n\
    \  if arr[#arr] == arr[#arr-1] then return end\n  --print(arr[#arr])\n  --print(arr[#arr])\n\
    \  \n  --print(arr[#arr])\n  --print(arr[#arr])\n  if arr[#arr] == arr[#arr-1]\
    \ then return end\n  --print(arr[#arr])\n  --print(arr[#arr])\n  if arr[#arr]\
    \ == arr[#arr-1] then return end\n  --print(arr[#arr])\n  --print(arr[#arr])\n\
    \  if arr[#arr] == arr[#arr-1] then return end\n  --print(arr[#arr])\n  --print(arr[#arr])\n\
    \  if arr[#arr] == arr[#arr-1] then return end\n  --print(arr[#arr])\n  --print(arr[\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpezb6b21d.lua:102: ''end'' expected (to close ''function''
    at line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    return insert(sortByIndex(arr),\
    \ 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tvx2_az.lua:27:\
    \ attempt to call a nil value (global 'sortByIndex')\nstack traceback:\n\t/tmp/tmp3tvx2_az.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmp3tvx2_az.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if arr == nil then return\
    \ end\n    local map = {}\n    for i = 1, #arr do\n        if arr[i] % 2 == 0\
    \ then\n            local value = arr[i]\n            local index = i\n      \
    \      if value == arr[value]\n                and value ~= 0 then\n         \
    \       assert(map[value] == nil)\n                map[value] = index\n      \
    \      end\n        end\n    end\n    local smalest_value = nil\n    local smalest_index\
    \ = nil\n    for key, value in pairs(map) do\n        if smalest_value == nil\
    \ or value < smalest_value then\n            smalest_value = value\n         \
    \   smalest_index = key\n        end\n    end\n    if smalest_value == nil or\
    \ smalest_index == nil then\n        return {}\n    end\n    return { value =\
    \ smalest_value, index = smalest_index }\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0nt0gqo.lua:57:\
    \ expected: {2, 1}\nactual: {index=2, value=2}\nstack traceback:\n\t/tmp/tmpe0nt0gqo.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- your code is here\n  --\
    \ base case\n  if #arr == 0 then\n    return {}\n  else\n    -- recursive case\n\
    \    local smallest_value = arr[1]\n    local smallest_index = 1\n    local smalest_value\
    \ = smallest_value\n    local i = 1\n    while i < #arr do\n      if arr[i] %\
    \ 2 == 0 then\n        if smalest_value < arr[i] then\n          smalest_value\
    \ = arr[i]\n          smallest_index = i\n        end\n      end\n      i = i\
    \ + 1\n    end\n    return { smalest_value, smallest_index }\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmv_hthe.lua:53:\
    \ expected: {2, 1}\nactual: {4, 1}\nstack traceback:\n\t/tmp/tmpwmv_hthe.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local even\n  local min_index\n\
    \  local index\n  local min_value\n  local smalest_value\n  local min_value_index\n\
    \  local results = {}\n  local node\n  for node, even in pairs(arr) do\n    if\
    \ even then\n      if min_value is nil or (smalest_value and smalest_value < node.value\
    \ or (smalest_value and smalest_value == node.value and smalest_value < min_value))\
    \ then\n        min_value = node.value\n        min_value_index = index\n    \
    \    smalest_value = node.value\n      end\n      results[node.value] = index\n\
    \    end\n    index = index + 1\n  end\n  if smalest_value and smalest_value <\
    \ min_value then\n    return {}\n  end\n  return results\nend\n</cell>\n<text>\n\
    Problem 9\nThe following is a string of nonsensical characters:\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8nq8dxjb.lua:37: ''then'' expected near ''is''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value = math.min(arr)\n\
    \    local smallest_index = -1\n    for i, v in ipairs(arr) do\n        if smalest_value\
    \ == v then\n            smallest_index = i\n            break\n        end\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo6_h73nm.lua:49: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n   -- Write your code here\n\
    \   return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb726b757.lua:34:\
    \ expected: {2, 1}\nactual: {4, 2, 3}\nstack traceback:\n\t/tmp/tmpb726b757.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.min\n  \
    \  local len = #arr\n    local smalest_value = 0\n    local smalest_index = 0\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy1ag5a30.lua:45: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local size = #arr\n    local\
    \ index = 0\n    local minval = nil\n    local minindex = nil\n    for i = 1,\
    \ size do\n        if arr[i] == 0 then\n            if minval == nil or index\
    \ < minindex then\n                minval = arr[i]\n                minindex =\
    \ index\n            elseif arr[i] < minval then\n                minval = arr[i]\n\
    \                minindex = index\n            end\n        else\n           \
    \ index = index + 1\n        end\n    end\n    return minval, minindex\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwco34elk.lua:50:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpwco34elk.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local evens = {}\n    for\
    \ _, value in pairs(arr) do\n        if value % 2 == 0 then\n            table.insert(evens,\
    \ value)\n        end\n    end\n    local smallest_value = table.min(evens)\n\
    \    local smallest_index = tonumber(math.abs(math.floor(table.min(evens))))\n\
    \    if #evens == 0 or smallest_value == 0 then\n        return {}\n    else\n\
    \        return {smallest_value, smallest_index}\n    end\nend\n</cell>\n<text>\n\
    Let's try it out!\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpww13vxvh.lua:41: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local arr = arr or {}\n  --\
    \ Base case.\n  if #arr == 0 then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6ecolvlr.lua:46: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local result = {}\n  local\
    \ smalest_value, smalest_index\n  for i = 1, #arr do\n    local value = arr[i]\n\
    \    if smalest_value == nil or smalest_value < value then\n      smalest_value\
    \ = value\n      smalest_index = i\n    end\n  end\n  result[smalest_value] =\
    \ smalest_index\n  if smalest_index == nil then\n    return nil\n  end\n  if smalest_index\
    \ ~= 1 then\n    local smalest_index = smalest_index - 1\n    if smalest_index\
    \ ~= 1 then\n      local smalest_value = arr[smalest_index]\n      local smalest_index\
    \ = smalest_index - 1\n      result[smalest_value] = smalest_index\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfmj3_1n.lua:54:\
    \ expected: {2, 1}\nactual: {4=1}\nstack traceback:\n\t/tmp/tmpxfmj3_1n.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr == 0 then\n     \
    \   return {}\n    end\n    local smallest_value_index = nil\n    local smallest_value\
    \ = 0\n    local index_of_smallest_value = 1\n    for i = 1, #arr do\n       \
    \ if arr[i].value % 2 == 0 and arr[i].value < smallest_value then\n          \
    \  smallest_value = arr[i].value\n            smallest_value_index = i\n     \
    \       index_of_smallest_value = i\n        end\n    end\n    if smallest_value_index\
    \ == nil then\n        return {}\n    end\n    return { value = smallest_value,\
    \ index = index_of_smallest_value }\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyszu9j5i.lua:34:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpyszu9j5i.lua:34:\
    \ in local 'candidate'\n\t/tmp/tmpyszu9j5i.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  return assert(arr:sort(function(a,\
    \ b) return a.value < b end))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphd03ghia.lua:27:\
    \ attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmphd03ghia.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmphd03ghia.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal n1, n2, smalest_index,\
    \ smallest_value\n\tlocal n = {}\n\tfor _, v in ipairs(arr) do\n\t\tif v ~= 0\
    \ then\n\t\t\tn[v]\n\t\t\tsmalest_index = v\n\t\t\tsmallest_value = v\n\t\t\t\
    n[v] = v\n\t\telse\n\t\t\tsmalest_index = smalest_index or 1\n\t\t\tsmallest_value\
    \ = smallest_value\n\t\t\tif smalest_index > 1 then\n\t\t\t\tn[v] = smallest_value\n\
    \t\t\t\tsmallest_value = smallest_value\n\t\t\telse\n\t\t\t\tn[v] = 1\n\t\t\t\
    end\n\t\tend\n\tend\n\ttable.sort(n, function(n1, n2)\n\t\treturn n1 < n2\n\t\
    end)\n\tlocal smallest_even_value = n[smallest_value] or 0\n\treturn { smallest_value,\
    \ smallest_index }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpua6e4j59.lua:32: syntax error near ''smalest_index''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local small_evens = {}\n\
    \    local index, small_val\n    local smallest_even = math.min(arr.values())\n\
    \    for index, small_val in enumerate(arr:items()) do\n        if small_val[1]\
    \ == smallest_even then\n            small_evens[small_val[1]] = small_evens[small_val[1]]\
    \ or {}\n            small_evens[small_val[1]][index] = small_val\n        end\n\
    \    end\n    for _, small_ev in ipairs(small_evens) do\n        if #small_ev\
    \ > 0 then\n            index = math.min(small_ev:keys()) -- we pick the smallest\
    \ one\n            return small_ev[index], index\n        end\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsvt9ex__.lua:29:\
    \ attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmpsvt9ex__.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmpsvt9ex__.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if not arr then\n       \
    \ return []\n    end\n    local smallest_index, smallest_value\n    for index,\
    \ value in ipairs(arr) do\n        if smallest_value is nil then\n           \
    \ smallest_value = value\n            smallest_index = index\n        elseif value\
    \ < smallest_value then\n            smallest_value = value\n            smallest_index\
    \ = index\n        end\n    end\n    return arr:sub(smallest_index, 1)\nend\n\
    </cell>\n<text>\n3.4 Finding the Longest Sub-sequence\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoxze9beu.lua:28: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  return arr and { value = arr[1],\
    \ index = math.min(#arr), key = arr[math.min(#arr)] }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj3a8o3kh.lua:33:\
    \ expected: {2, 1}\nactual: {index=3, key=3, value=4}\nstack traceback:\n\t/tmp/tmpj3a8o3kh.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local pivot = 1\n    local\
    \ vals = {}\n    while true do\n        table.insert(vals, table.min(arr))\n \
    \       if table.sum(arr) == 0 then\n            return vals\n        end\n  \
    \      pivot = math.floor(pivot / 2)\n        arr = arr:gslice(pivot, #arr)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1o1taml6.lua:30:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp1o1taml6.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmp1o1taml6.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local index = {}\n    local\
    \ smalest_value\n    local smalest_index\n    for i, node in ipairs(arr) do\n\
    \        if node.value % 2 == 0 then\n            if smalest_value == nil then\n\
    \                smalest_index = i\n                smalest_value = node.value\n\
    \            else\n                if node.value < smalest_value then\n      \
    \              smalest_index = i\n                    smalest_value = node.value\n\
    \                end\n            end\n        end\n    end\n    if #index ==\
    \ 0 and smalest_value == nil then\n        return nil\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeirgleei.lua:31:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpeirgleei.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpeirgleei.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return nil\
    \ end\n  local min, index\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if min == nil or v < min then\n        min = v\n        index = i\n   \
    \   end\n    end\n  end\n  return arr[index], index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqib4g7g.lua:43:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpmqib4g7g.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value = arr[1]\n\
    \    local smallest_index = 1\n    local smalest_nodes = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpykdrv48v.lua:44: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value, smalest_index\
    \ = nil, nil\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 and smalest_value ==\
    \ nil then\n      smalest_value = arr[i]\n      smalest_index = i\n    end\n \
    \ end\n  if smalest_value == nil then\n    return nil\n  end\n  local index =\
    \ nil\n  for i, v in pairs(arr) do\n    if v % 2 == 0 and v < smalest_value then\n\
    \      smalest_value = v\n      smalest_index = i\n    end\n  end\n  if smalest_index\
    \ == nil then\n    return nil\n  end\n  return { smalest_value, smalest_index\
    \ }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwaprojo.lua:53:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpmwaprojo.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value = math.inf\n\
    \    local index_with_min_value = nil\n    local smalest_value\n    for index,\
    \ val in pairs(arr) do\n        if val <= min_value then\n            min_value\
    \ = val\n            index_with_min_value = index\n            smalest_value =\
    \ val\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    else\n        return {smalest_value, index_with_min_value}\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgmfz3jyo.lua:31:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpgmfz3jyo.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpgmfz3jyo.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\n   \
    \ local min_index\n    local smalest_value_index\n    local smalest_value_node\n\
    \    local smalest_value_indexes\n    local index\n    local value_array = {}\n\
    \    local value_array_len = #arr\n    for i = 1, value_array_len do\n       \
    \ if arr[i] < smalest_value then\n            smalest_value = arr[i]\n       \
    \     min_index = i\n        end\n    end\n    if smalest_value == 0 then\n  \
    \      smalest_value_indexes = { }\n        return\n    elseif smalest_value ==\
    \ nil then\n        smalest_value_indexes = { }\n        return\n    end\n   \
    \ smalest_value_node = arr[min_index]\n    smalest_value_indexes = { }\n    value_array_len\
    \ = #arr\n    for i = 1, value_array_len do\n        if arr[i] == smalest_value\
    \ then\n            smalest_value_indexes[#smalest_value_indexes + 1] = i\n  \
    \      end\n    end\n    smalest_value_indexes[#smalest_value_indexes + 1] = min_index\n\
    \    for i = 0, #smalest_value_indexes do\n        index = smalest_value_indexes[i]\n\
    \        value_array[index] = arr[min_index]\n    end\n    return value_array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt2br_pzb.lua:36:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpt2br_pzb.lua:36:\
    \ in local 'candidate'\n\t/tmp/tmpt2br_pzb.lua:67: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n   assert(type(arr) == \"table\"\
    \ and #arr == 1)\n   if #arr == 0 then\n      return {}\n   end\n   local min_even_value\
    \ = arr[1]\n   local min_even_index = nil\n   local i = 1\n   while i <= #arr\
    \ do\n      local value = arr[i]\n      if value % 2 == 0 then\n         if min_even_index\
    \ == nil or value < min_even_value then\n            min_even_value = value\n\
    \            min_even_index = i\n         end\n      end\n      i = i + 1\n  \
    \ end\n   if min_even_index ~= nil then\n      return { min_even_value,  min_even_index\
    \ }\n   else\n      return {}\n   end\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1dl_5n39.lua:50: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local sorted_by_value = table.sort(arr,\
    \ function (a, b) return a.value < b end)\n    local i, j, smalest_value, smalest_index\n\
    \    for i = 1, #sorted_by_value do\n        if sorted_by_value[i].value == sorted_by_value[i-1].value\
    \ then\n            smalest_value = sorted_by_value[i]\n            smalest_index\
    \ = i\n        end\n    end\n    if i == #sorted_by_value then\n        smalest_value\
    \ = nil\n    else\n        smalest_index = i - 1\n    end\n    if smalest_value\
    \ ~= nil then\n        -- smalest_index is the smallest index\n        -- smalest_value\
    \ is the smallest value\n        return { smalest_value, smalest_index }\n   \
    \ end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuyry1x5m.lua:27:\
    \ attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpuyry1x5m.lua:27:\
    \ in function </tmp/tmpuyry1x5m.lua:27>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpuyry1x5m.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmpuyry1x5m.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local small, small_index\n\
    \    for i = 1,#arr,1 do\n        if arr[i] % 2 == 0 then\n            if small_index\
    \ == nil then\n                small = arr[i]\n                small_index = i\n\
    \            else\n                if small > arr[i] then\n                  \
    \  small = arr[i]\n                    small_index = i\n                end\n\
    \            end\n        end\n    end\n    return small_index, arr[small_index]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpie6k0h_b.lua:47:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpie6k0h_b.lua:47: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Write your code here\n \
    \ local small = arr[1]\n  local idx = 1\n  for i = 2, #arr do\n    local value\
    \ = arr[i]\n    if value % 2 == 0 and value < small then\n      small = value\n\
    \      idx = i\n    end\n  end\n  return { small, idx }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxdfkr0r.lua:43:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpjxdfkr0r.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 1 then\n    return\
    \ {arr[1],1}\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpku5gtt9z.lua:44: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return {}\
    \ end\n  local smallest_value = math.min(unpack(arr))\n  local smallest_index\
    \ = 1\n  local index = 1\n  for i, v in ipairs(arr) do\n    if v == smallest_value\
    \ then\n      smallest_index = index\n    else\n      smallest_index = index\n\
    \      smallest_value = v\n    end\n    index = index + 1\n  end\n  table.insert(arr,\
    \ smallest_value, smallest_index)\n  -- print(smallest_index)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphfwrbuh_.lua:28:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmphfwrbuh_.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmphfwrbuh_.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if arr == nil then\n    return\
    \ {}\n  else\n    local smalest_value\n    local smallest_index = -1\n    for\
    \ index, value in pairs(arr) do\n      if value % 2 == 0 then\n        if not\
    \ smalest_value or value < smalest_value then\n          smalest_value = value\n\
    \          smallest_index = index\n        end\n      end\n    end\n    if not\
    \ smalest_value then\n      return nil\n    end\n    local sorted_arr = table.sort(arr)\n\
    \    local index = smallest_index\n    for _, value in pairs(sorted_arr) do\n\
    \      if value % 2 == 0 then\n        index = index + 1\n      end\n    end\n\
    \    return {\n      value = smalest_value,\n      index = index,\n    }\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8j7_jn4a.lua:45:\
    \ bad argument #1 to 'for iterator' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmp8j7_jn4a.lua:45: in local 'candidate'\n\t/tmp/tmp8j7_jn4a.lua:60: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value, smalest_index\
    \ = -1, nil\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n    \
    \        if smalest_value == -1 or smalest_index < i then\n                smalest_value,\
    \ smalest_index = v, i\n            end\n        end\n    end\n    if smalest_value\
    \ == -1 then\n        return nil\n    else\n        return {smalest_value, smalest_index}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3a0xllle.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp3a0xllle.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_index_map =\
    \ {}\n  local smallest_value = 0\n  for i = 1, #arr do\n    if smallest_index_map[arr[i]]\
    \ == nil then\n      smallest_index_map[arr[i]] = i\n      smallest_value = arr[i]\n\
    \    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9vp43wrz.lua:49: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value = 0\n\
    \    local smallest_index = 0\n    for index, value in ipairs(arr) do\n      \
    \  if smallest_value < value % 2 then smallest_value = value % 2 end\n       \
    \ if smallest_value == value % 2 then smallest_index = index end\n    end\n  \
    \  if smallest_value == 0 then return {} end\n    return { smallest_value, smallest_index\
    \ }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5j7voz8.lua:40:\
    \ expected: {2, 1}\nactual: {1, 3}\nstack traceback:\n\t/tmp/tmpb5j7voz8.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value = nil\n\
    \    local smalest_index = nil\n    local smalest_index = nil\n    for i, v in\
    \ pairs(arr) do\n        if smalest_value == nil then\n            smalest_value\
    \ = v\n            smalest_index = i\n        elseif smalest_value < v then\n\
    \            smalest_value = v\n            smalest_index = i\n        end\n \
    \   end\n    if smalest_value == nil then\n        return {}\n    end\n    return\
    \ { smalest_value, smalest_index }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavhc0esl.lua:48:\
    \ expected: {2, 1}\nactual: {4, 1}\nstack traceback:\n\t/tmp/tmpavhc0esl.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local ret = {}\n    for i\
    \ = 1, #arr do\n        if arr[i] % 2 == 0 and arr[math.abs(arr[i])] > 0 then\n\
    \            table.insert(ret, arr[math.abs(arr[i])], i)\n        end\n    end\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfl3wkzp_.lua:29:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpfl3wkzp_.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmpfl3wkzp_.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n   -- Find the smallest even\
    \ value\n   local function next_value(value)\n      while value % 2 == 0 do\n\
    \         value = value + 1\n      end\n      return value\n   end\n   local smalest_value,\
    \ smalest_index = next_value(arr[1])\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphyg_4z9x.lua:49: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local function helper(arr)\n\
    \    local i = 1\n    local smalest_value = arr[1]\n    local i = 1\n    while\
    \ i <= #arr do\n      local value = arr[i]\n      local even = value%2==0\n  \
    \    if not even then\n        if value < smalest_value then\n          smalest_value\
    \ = value\n        elseif value == smalest_value then\n          i = i-1\n   \
    \     else\n          return { smalest_value, i }\n        end\n      else\n \
    \       i = i + 1\n      end\n    end\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc7th60jk.lua:62: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value, smalest_index\
    \ = math.max({}, function(n)\n        return math.min(math.max(2, n), math.floor(n/2))\n\
    \    end)\n    for idx, node in ipairs(arr) do\n        if node % 2 == 0 then\n\
    \            if node < smalest_value then\n                smalest_value = node\n\
    \                smalest_index = idx\n            end\n        end\n    end\n\
    \    local index = {}\n    for idx2, node in ipairs(arr) do\n        if node ==\
    \ smalest_value then\n            index[smalest_index] = idx2\n        end\n \
    \   end\n    if #index == 0 then\n        local result = {}\n        for idx3,\
    \ node in ipairs(arr) do\n            if idx3 ~= smalest_index then\n        \
    \        table.insert(result, node)\n            end\n        end\n        return\
    \ unpack(result)\n    else\n        return unpack(index)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare table with function

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- First, sort the array.\n\
    \  -- Then we iterate the array from left to right,\n  -- to find the first node\
    \ where node.value is odd.\n  -- If all nodes have even value then the smallest\n\
    \  -- even value is returned, and so on..\n  -- If not all nodes have even value\
    \ we pick the first\n  -- node which has smallest index.\n  -- (The sorting is\
    \ stable, so all nodes having the same\n  -- smallest even value will have same\
    \ index in the sorted array.)\n  -- Since we're iterating from the left to right,\n\
    \  -- we will always pick the first node.\n  -- If the array is empty, we pick\
    \ the empty node {}\n  -- which has the smallest index.\n  return std.sort(arr,\n\
    \                   function(node) return node.value % 2 == 0 end,\n         \
    \          function(node) return node.value end)\n      -- Return the first node\
    \ with even value.\n  and arr[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcb456vil.lua:40:\
    \ attempt to index a nil value (global 'std')\nstack traceback:\n\t/tmp/tmpcb456vil.lua:40:\
    \ in local 'candidate'\n\t/tmp/tmpcb456vil.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value, smalest_idx\
    \ = 0, 1\n  for idx = 2, #arr do\n    if arr[idx] % 2 == 0 then\n      if smalest_value\
    \ < arr[idx] then\n        smalest_value, smalest_idx = arr[idx], idx\n      end\n\
    \    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvh83ooro.lua:49: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.abs(arr[1])\
    \ % 2\n    local min_index = nil\n    local arr2 = {}\n    for i = 1, #arr do\n\
    \        if math.abs(arr[i]) % 2 == min then\n            arr2[min] = arr[i]\n\
    \            min_index = i\n            min = min + 1\n        end\n    end\n\
    \    return arr2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfh6llf36.lua:43:\
    \ expected: {2, 1}\nactual: {0=4, 3}\nstack traceback:\n\t/tmp/tmpfh6llf36.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest, smallest_idx\n\
    \    local smalest_val, smalest_idx = nil, nil\n    local i = #arr\n    while\
    \ i do\n        if smallest == nil then\n            smallest = arr[i]\n     \
    \       smallest_idx = i\n        elseif arr[i] < smallest then\n            if\
    \ smalest_val == nil or smalest_val < arr[i] then\n                smalest_val\
    \ = arr[i]\n                smalest_idx = i\n            end\n        end\n  \
    \      i = i - 1\n    end\n    if smalest_val and smalest_idx then\n        return\
    \ smalest_val, smalest_idx\n    end\nend\n</cell>\n<cell>\n%run scripts/cleanup.lua\n\
    </cell>\n<text>\nThe next cell will load the functions you just wrote and solve\
    \ the problem, as discussed above.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4vlnkm1o.lua:46: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local results = {}\n    local\
    \ index = 1\n    local min = nil\n    for i, v in ipairs(arr) do\n        if min\
    \ == nil or v < min then\n            min = v\n            index = i\n       \
    \ elseif v == min then\n            index = i\n        end\n    end\n    results[min]\
    \ = index\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0v522oh.lua:45:\
    \ expected: {2, 1}\nactual: {2=2}\nstack traceback:\n\t/tmp/tmpj0v522oh.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then\n    return\
    \ {}\n  end\n  local smalest_value, smalest_index = #arr, 1\n  for i = 1, #arr\
    \ do\n    if arr[i].value % 2 == 0 then\n      if smalest_value > arr[i].value\
    \ then\n        smalest_value = arr[i].value\n        smalest_index = i\n    \
    \  end\n    end\n  end\n  if smalest_value == 0 then\n    return {}\n  end\n \
    \ return { value = smalest_value, index = smalest_index }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppkqw9aum.lua:32:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmppkqw9aum.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmppkqw9aum.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgooxs2z7.lua:42: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local table = {}\n    for\
    \ i = 1, #arr do\n        if arr[i].value % 2 = 0 then\n            table.insert(table,\
    \ arr[i].value)\n        end\n    end\n    if #table == 0 then\n        return\
    \ {}\n    end\n    table.sort(function(a, b) return a - b end)\n    table.insert(table,\
    \ table[1])\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps97yvsub.lua:29: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local arr_size = #arr\n  local\
    \ even_values = {}\n  local smallest_values = {}\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmb3bu3il.lua:44: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if arr == nil then return\
    \ end\n    local i, node = 1, arr[1]\n    while i <  arr[2] do\n        if node.value\
    \ == arr[i].value then\n            return { node.value, i }\n        else\n \
    \           node = { node.value, i }\n        end\n        i = i + 1\n    end\n\
    \    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpftiujm6q.lua:30:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpftiujm6q.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpftiujm6q.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- BASE CASE\n  if arr == nil\
    \ then\n    return {}\n  elseif #arr == 0 then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpse9u1n3o.lua:47: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local sorted_nodes = arr:sort(function(a,b)\
    \ return a.value < b.value end)\n    local plucked_value = sorted_nodes[1].value\
    \ -- Smallest even value\n    local plucked_index = sorted_nodes[1].index -- Smallest\
    \ even value's index\n    if sorted_nodes[1] == sorted_nodes[#sorted_nodes] then\n\
    \        return {} -- No even values to find\n    end\n    for i=1, #sorted_nodes\
    \ do\n        if sorted_nodes[i].value % 2 == 0 then\n            if plucked_value\
    \ == sorted_nodes[i].value then\n                plucked_value = sorted_nodes[i].value\
    \ -- Smallest even value\n                plucked_index = sorted_nodes[i].index\
    \ -- Smallest even value's index\n            else\n                -- We found\
    \ a smaller even value\n                if plucked_value < sorted_nodes[i].value\
    \ then\n                    plucked_value = sorted_nodes[i].value\n          \
    \          plucked_index = sorted_nodes[i].index\n                end\n      \
    \      end\n        end\n    end\n    local function is_even(i)\n        return\
    \ arr[i] == arr[i] % 2\n    end\n    for i=1, #sorted_nodes do\n        if i ==\
    \ plucked_index then\n            -- Return plucked value\n            return\
    \ { plucked_value, plucked_index }\n        end\n        if is_even(i) then\n\
    \            -- Return if found even value\n            return { sorted_nodes[i].value,\
    \ sorted_nodes[i].index }\n        end\n    end\n    return {}\nend\n</cell>\n\
    <cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxp04ytvf.lua:62: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local i = 1\n    local size\
    \ = #arr\n    local min = arr[size]\n    local index = size\n    while i <= size\
    \ do\n        if arr[i] < min then\n            min = arr[i]\n            index\
    \ = i\n        end\n        i = i + 1\n    end\n    return { min = min, index\
    \ = index }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6avo63r4.lua:44:\
    \ expected: {2, 1}\nactual: {index=2, min=2}\nstack traceback:\n\t/tmp/tmp6avo63r4.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Your code here\n  assert(#arr\
    \ == 1, 'Wrong number of nodes')\n  local result = {}\n  local smallest_value\
    \ = math.floor(arr[#arr][1])\n  local smallest_idx = 0\n  for i=1, #arr do\n \
    \   if arr[i][1] == smallest_value then\n      table.insert(result, { arr[i][1],\
    \ i })\n    elseif arr[i][1] < smallest_value then\n      smallest_value = arr[i][1]\n\
    \      smallest_idx = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoafw1e5v.lua:28:\
    \ Wrong number of nodes\nstack traceback:\n\t/tmp/tmpoafw1e5v.lua:28: in local\
    \ 'candidate'\n\t/tmp/tmpoafw1e5v.lua:46: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  return select(\n      arr,\n\
    \      function (node) return node.value % 2 == 0 end,\n      function (node)\
    \ return node.value < table.max(arr) end\n  )\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1j2okml.lua:27:\
    \ bad argument #1 to 'select' (number expected, got table)\nstack traceback:\n\
    \t/tmp/tmpc1j2okml.lua:27: in local 'candidate'\n\t/tmp/tmpc1j2okml.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local nodes = {}\n  local smalest_value,\
    \ smalest_index, smallest_even_value = 0, 0, 0\n  -- add all values\n  for _,\
    \ val in ipairs(arr) do\n    if smalest_value <= val then\n      smalest_value\
    \ = val\n      smalest_index = #nodes\n      smallest_even_value = smalest_value\
    \ % 2\n    end\n    nodes[val] = #nodes + 1\n  end\n  -- sort the nodes, except\
    \ for the smallest ones\n  for _, val in pairs(nodes) do\n    if val ~= smalest_index\
    \ then\n      local tmp, tmp_index = nodes[val], val\n      nodes[tmp] = tmp_index\n\
    \    end\n  end\n  -- remove smallest nodes\n  local result\n  if #nodes > 1 then\n\
    \    result = {}\n    for _, val in pairs(nodes) do\n      result[val] = nodes[val]\n\
    \    end\n    table.sort(result)\n    if smallest_even_value == 0 then\n     \
    \ result[1]\n    else\n      result[1]\n    end\n  else\n    {}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwo7xo6qm.lua:55: syntax error near ''else''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base Case: Empty table,\
    \ return {}\n  if not arr then\n    return {}\n  end\n  -- Base Case: 1 element,\
    \ return the head element\n  if #arr == 1 then\n    return arr[1]\n  end\n  --\
    \ Base Case: 2 elements, return smaller even value\n  if #arr == 2 then\n    local\
    \ smaller\n    -- Assume all elements greater than smallest even number\n    if\
    \ arr[1] % 2 == 0 then\n      smaller = arr[1]\n    else\n      smaller = arr[1]\
    \ + 2\n    end\n    -- Check each element, if it is even return the smallest even\
    \ number, else return the smallest odd number\n    local function smaller_even(value)\n\
    \      if value % 2 == 0 then\n        smaller = value\n      else\n        smaller\
    \ = value + 2\n      end\n    end\n    map(arr, smaller_even)\n    return smaller\n\
    \  end\n  -- Base Case: >2 elements, return the smallest odd number\n  local smallest_odd\n\
    \  if #arr > 2 then\n    smallest_odd = arr[1]\n  else\n    return nil\n  end\n\
    \  -- Assume all elements greater than smallest even number\n  local function\
    \ smaller_even(value)\n    if value % 2 == 0 then\n      smallest_odd = value\n\
    \    else\n      smallest_odd = value + 2\n    end\n  end\n  map(arr, smaller_even)\n\
    \  -- Return smallest odd number\n  return smallest_odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7t1nm610.lua:70:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp7t1nm610.lua:70:\
    \ in local 'candidate'\n\t/tmp/tmp7t1nm610.lua:78: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then\n    return\
    \ {}\n  else\n    local smallest_even_value, smallest_even_index\n    for _, val\
    \ in ipairs(arr) do\n      if smallest_even_value == nil then\n        smallest_even_value\
    \ = val\n        smallest_even_index = 1\n      elseif smallest_even_value % 2\
    \ == 0 and smallest_even_value < val then\n        smallest_even_value = val\n\
    \        smallest_even_index = smallest_even_index + 1\n      end\n    end\n \
    \   local plucked_value = smallest_even_value + smallest_even_index\n    if plucked_value\
    \ % 2 == 0 then\n      plucked_value = plucked_value - 1;\n    end\n    return\
    \ { plucked_value, smallest_even_index }\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9tm86lfh.lua:51:\
    \ expected: {2, 1}\nactual: {5, 1}\nstack traceback:\n\t/tmp/tmp9tm86lfh.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr == 0 then\n     \
    \   return {}\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9b9zb5dr.lua:44: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal min = math.abs(arr[1])\n\
    \tfor i = 2, #arr do\n\t\tif arr[i] < min then\n\t\t\tmin = arr[i]\n\t\tend\n\t\
    end\n\tlocal index = #arr\n\tlocal val = 0\n\tfor i = #arr, 1, -1 do\n\t\tif arr[i]\
    \ <= min then\n\t\t\tval = arr[i]\n\t\t\tindex = i\n\t\tend\n\tend\n\tif index\
    \ == 0 then\n\t\treturn {}\n\tend\n\treturn { val, index }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqk1bz3_.lua:50:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpyqk1bz3_.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value, smallest_index\
    \ = math.abs(arr[1]), 1\n  for i = 2, #arr do\n    if smallest_value < math.abs(arr[i])\
    \ then\n      smallest_value = math.abs(arr[i])\n      smallest_index = i\n  \
    \  end\n  end\n  if smallest_value < math.abs(smallest_value) then\n    smallest_value\
    \ = math.abs(smallest_value)\n    smallest_index = smallest_index\n  end\n  return\
    \ smallest_value, smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03kildzs.lua:44:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp03kildzs.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local function f(index)\n\
    \        local i = 1\n        while i <= arr[index] do\n            if ((arr[index]\
    \ - i) % 2 == 0) then\n                return i, index\n            end\n    \
    \        i = i + 2\n        end\n    end\n    local min = math.inf\n    local\
    \ min_index = -1\n    for i = 2, #arr do\n        local index, value = f(i - 1)\n\
    \        if value < min then\n            min = value\n            min_index =\
    \ index\n        end\n    end\n    if min > math.inf then\n        return nil\n\
    \    end\n    return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwx6_a75a.lua:40:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpwx6_a75a.lua:40:\
    \ in local 'candidate'\n\t/tmp/tmpwx6_a75a.lua:54: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Write your code here.\n\
    \  -- Return the plucked value in a table of [smallest_value, index]\n  local\
    \ smallest = 0\n  local index = 1\n  local even = nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6blm2utj.lua:46: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then\n    return\
    \ {}\n  elseif #arr == 1 then\n    return arr\n  else\n    local i = 1\n    local\
    \ minval = math.inf\n    while i <= #arr do\n      local val = (i - 1) % 2\n \
    \     if minval > arr[i] and arr[i] % 2 == 0 then\n        -- arr[i] is odd\n\
    \        minval = arr[i]\n      elseif arr[i] == minval then\n        -- arr[i]\
    \ equals minval\n        if arr[i] % 2 == 0 then\n          -- arr[i] is even\n\
    \          -- if the min of the two evens is even, pick the one that is smaller\n\
    \          local t = arr[i]\n          while arr[i] % 2 == 0 do\n            arr[i]\
    \ = (arr[i] + 1) / 2\n          end\n          arr[i] = t\n        end\n     \
    \ end\n      i = i + 1\n    end\n    return minval\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwzgqrqzn.lua:36:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpwzgqrqzn.lua:36:\
    \ in local 'candidate'\n\t/tmp/tmpwzgqrqzn.lua:60: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then\n    return\
    \ {}\n  end\n  local min_index = 1\n  local min_value = arr[1]\n  for i = 2, #arr\
    \ do\n    if arr[i] < min_value then\n      min_index = i\n      min_value = arr[i]\n\
    \    end\n  end\n  if min_value == 0 then\n    return nil\n  end\n  return { value\
    \ = min_value, index = min_index }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3bnffuf5.lua:47:\
    \ expected: {2, 1}\nactual: {index=2, value=2}\nstack traceback:\n\t/tmp/tmp3bnffuf5.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case:\n  if #arr ==\
    \ 0 then\n    return {}\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdcmyv5la.lua:45: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local res = {}\n    for i\
    \ = 1, #arr do\n        if arr[i] % 2 == 0 then\n            table.insert(res,\
    \ arr[i])\n        end\n    end\n    table.sort(res)\n    if #res > 0 then\n \
    \       return res[1]\n    else\n        return nil\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgixk5b3i.lua:44:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpgixk5b3i.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local small_value = math.min(arr.value)\
    \ - 1 -- The value that has a smaller index\n    local min_even_value = small_value\
    \ % 2\n    local result = {}\n    local n = 0\n    for i = 1, #arr do\n      \
    \  local value = arr[i]\n        if value == min_even_value then\n           \
    \ result[n] = value\n            n = n + 1\n        end\n    end\n    if n ==\
    \ 0 then\n        return {}\n    elseif n == 1 then\n        return result[1]\n\
    \    else\n        return {result[1], result[2]}\n    end\nend\n</cell>\n<text>\n\
    \_Exercise 2\nWhat if the array is empty?\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcuytxb00.lua:46: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then\n    return\
    \ {}\n  elseif #arr == 1 then\n    return arr[1]\n  else\n    local i, minIndex\
    \ = 0, 1\n    for i = 2, #arr do\n      local v = arr[i]\n      if v % 2 == 0\
    \ then\n        if v < arr[i-1] then\n          minIndex = i\n        end\n  \
    \    else\n        if minIndex == 1 then\n          minIndex = i\n        end\n\
    \      end\n    end\n    return arr[minIndex]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgq661xf.lua:52:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpsgq661xf.lua:52: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local small_values, small_index\
    \ = nil\n    local small_val, small_i = nil\n    local num_smaller_index = 0\n\
    \    local max_i = #arr\n    local max_val = arr[max_i] -- get max value\n   \
    \ for i = 1, max_i do\n        -- check whether current value is smaller or equal\n\
    \        if arr[i] > max_val or arr[i] == max_val and arr[i] ~= 0 then\n     \
    \       small_val = arr[i]\n            small_i = i\n            num_smaller_index\
    \ = 0\n        else\n            -- if it is smaller or equal, we keep searching\n\
    \            num_smaller_index = num_smaller_index + 1\n        end\n        if\
    \ num_smaller_index > 1 then\n            if small_val ~= small_val or small_i\
    \ ~= small_i then\n                small_val, small_i = small_val, small_i\n \
    \               small_values[num_smaller_index] = small_val\n                small_index[num_smaller_index]\
    \ = small_i\n            end\n        end\n    end\n    return small_values, small_index\n\
    end\n</cell>\n<code language=conda-env-adventofcode-py>\n# Problem 4\n# Given\
    \ a non-empty binary search tree and a node in that tree, design an algorithm\
    \ to\n# find the in-order successor of that node. The in-order successor of a\
    \ node v\n# is the node (v, h) where h is some node in the tree that is less than\
    \ v.\n# For example, given the following tree:\n# [5,6,8,10,null,13,20]\n# Call\
    \ a node v a left child if v\u2019s left is null and v\u2019s right is not null.\n\
    # Otherwise v would be a right child.\n# Also call a null node e a right child\
    \ if e has no right child.\n# Return null if v is the sole node in the tree.\n\
    # Notes:\n# This is a straightforward recursive algorithm, similar to the in-order\
    \ traversal\n# of binary trees. However there are two twists.\n# First, you will\
    \ need to find the in-order successor of a node before you find its in-order successor.\n\
    # Second, you do not necessarily need to do this in-order preorder-traversal search;\
    \ you can do it postorder-traversal.\n# The above steps are shown in the following\
    \ animation:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpukvbpq81.lua:52: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n  if #arr ==\
    \ 0 then\n    return {}\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxlwcu_ny.lua:45: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then\n    return\
    \ {}\n  elseif #arr == 1 then\n    return { arr[1], 1 }\n  else\n    local largest\
    \ = { math.inf, -1 }\n    for i = 1, #arr do\n      if arr[i] >= largest.value\
    \ then\n        largest.value = arr[i]\n        largest.index = i\n      end\n\
    \    end\n    if largest.value < 0 then\n      return {}\n    else\n      local\
    \ smallest = largest\n      local smallest_index = largest.index\n      for i\
    \ = 1, #arr do\n        if arr[i] == smallest then\n          smallest.value =\
    \ arr[i]\n          smallest.index = i\n        elseif arr[i] < smallest then\n\
    \          smallest = { arr[i], i }\n          smallest_index = i\n        end\n\
    \      end\n      return { smallest.value, smallest_index }\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvalm7d61.lua:34:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpvalm7d61.lua:34:\
    \ in local 'candidate'\n\t/tmp/tmpvalm7d61.lua:61: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n  if arr == nil\
    \ then return {}\n  if type(arr) == \"table\" then return arr end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3cr652i_.lua:29: ''end'' expected (to close ''if'' at line
    28) near ''if''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value -- Smallest\
    \ value to return\n    local smallest_index -- Smallest index to return\n    local\
    \ new_arr = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3htmcwse.lua:44: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest = nil\n  \
    \  local smallest_index = 1\n    for _, v in ipairs(arr) do\n        if smallest\
    \ == nil then\n            smallest = v\n        elseif smallest ~= v then\n \
    \           if smallest % 2 == 0 then\n                if smallest < v then\n\
    \                    smallest_index = v\n                end\n            else\n\
    \                if smallest < v then\n                    smallest_index = smallest_index\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ smallest_index, smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnei7d203.lua:50:\
    \ expected: {2, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpnei7d203.lua:50: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    return helper(arr, {}, {})\n\
    end\nassert(pluck({4, 2, 3}) == {2, 1})\nassert(pluck({1, 2, 3}) == {2, 1})\n\
    assert(pluck({0, 0}) == {})\nassert(pluck({}) == {})\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp62lhtl4m.lua:27: attempt to call a nil value (global 'helper')\n\
    stack traceback:\n\t/tmp/tmp62lhtl4m.lua:27: in local 'pluck'\n\t/tmp/tmp62lhtl4m.lua:29:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n  if arr == nil\
    \ then\n    return nil\n  end\n  -- Find the smallest even value in arr\n  local\
    \ smallest_even, smallest_even_index = nil, nil\n  local smallest_index, smallest_value_index\
    \ = 1, 1\n  for index = 2, #arr do\n    if arr[index] % 2 == 0 then\n      if\
    \ smallest_even_index == nil then\n        smallest_even = arr[index]\n      \
    \  smallest_even_index = index\n      elseif arr[index] < smallest_even then\n\
    \        smallest_even = arr[index]\n        smallest_even_index = index\n   \
    \   end\n    else\n      if smallest_index == nil then\n        smallest_value\
    \ = arr[index]\n        smallest_index = index\n      end\n    end\n    smallest_index\
    \ = smallest_index + 1\n  end\n  -- If the smallest even value was already found\
    \ then\n  if smallest_even_index == smallest_index then\n    -- Return the array\
    \ with the smallest even value\n    return {smallest_even, smallest_index}\n \
    \ else\n    -- Return the array with the smallest value\n    return {smallest_value,\
    \ smallest_index}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5ypwc4_.lua:64:\
    \ expected: {2, 1}\nactual: {2=3}\nstack traceback:\n\t/tmp/tmpa5ypwc4_.lua:64:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest = {}\n   \
    \ local smallest_value = nil\n    local index = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1a6vmict.lua:44: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n  if #arr ==\
    \ 0 then\n    return {}\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxlwcu_ny.lua:45: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local arr2 = {}\n    for\
    \ _, v in pairs(arr) do\n        arr2[math.floor(v / 2)] = v\n    end\n    local\
    \ vals = {}\n    for i, v in pairs(arr2) do\n        if v % 2 == 0 then\n    \
    \        table.insert(vals, v)\n        else\n            table.insert(vals, v)\n\
    \            table.insert(vals, i)\n        end\n    end\n    if #vals > 0 then\n\
    \        vals = vals[1]\n    end\n    return vals\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rjb5wbf.lua:49:\
    \ expected: {2, 1}\nactual: 3\nstack traceback:\n\t/tmp/tmp3rjb5wbf.lua:49: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local n = #arr\n    local\
    \ min_val = 0\n    local min_idx = 0\n    for idx = 1, n do\n        if arr[idx]\
    \ % 2 == 0 then\n            if min_val == 0 or min_val < arr[idx] then\n    \
    \            min_val = arr[idx]\n                min_idx = idx\n            end\n\
    \        end\n    end\n    if min_val == 0 then\n        return []\n    end\n\
    \    return { arr[ min_idx ], min_idx }\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfbou4qeb.lua:39: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n   local smalest_val, smallest_idx\n\
    \   local smalest_idx, smallest_val\n   local small_arr\n   if #arr == 0 then\
    \ return {} end\n   small_arr = {}\n   largest(arr, function(val, idx)\n     \
    \ if small_arr[val] ~= nil then\n         if small_arr[val].val ~= val then\n\
    \            if small_arr[val].idx < idx then\n               small_arr[val].val\
    \ = val\n               small_arr[val].idx = idx\n            end\n         else\n\
    \            if small_arr[val].idx > idx then\n               small_arr[val].idx\
    \ = idx\n            end\n         end\n      else\n         small_arr[val] =\
    \ {}\n         small_arr[val].val = val\n         small_arr[val].idx = idx\n \
    \        small_arr[val].idx1 = idx+1\n         small_arr[val].idx2 = idx+2\n \
    \        small_arr[val].idx3 = idx+3\n         small_arr[val].idx4 = idx+4\n \
    \        small_arr[val].idx5 = idx+5\n         small_arr[val].idx6 = idx+6\n \
    \        small_arr[val].idx7 = idx+7\n         small_arr[val].idx8 = idx+8\n \
    \        small_arr[val].idx9 = idx+9\n         small_arr[val].idx10 = idx+10\n\
    \         small_arr[val].idx11 = idx+11\n         small_arr[val].idx12 = idx+12\n\
    \         small_arr[val].idx13 = idx+13\n         small_arr[val].idx14 = idx+14\n\
    \         small_arr[val].idx15 = idx+15\n      end\n   end)\n   if small_arr[arr[1]].val\
    \ == arr[1] then\n      smalest_val = small_arr[arr[1]].val\n      smalest_idx\
    \ = small_arr[arr[1]].idx\n      return small_arr[arr[1]]\n   end\n   smallest_val\
    \ = 0\n   smallest_idx = 0\n   largest(small_arr[1], function(val, idx)\n    \
    \  if val < smallest_val then\n         smallest_val = val\n         smallest_idx\
    \ = idx\n      end\n   end)\n   return small_arr[smallest_idx]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp79xjatmq.lua:32:\
    \ attempt to call a nil value (global 'largest')\nstack traceback:\n\t/tmp/tmp79xjatmq.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmp79xjatmq.lua:84: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal index = 0\n\tlocal value\
    \ = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptigyayyx.lua:43: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n   -- Your code here\n   return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp599f8awx.lua:34:\
    \ expected: {2, 1}\nactual: {4, 2, 3}\nstack traceback:\n\t/tmp/tmp599f8awx.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if arr == nil then return end\n\
    \  if #arr == 1 then\n    return unpack(arr, {1, 2})\n  else\n    local maxValues\
    \ = {}\n    local maxIndex = {}\n    for i = 1, #arr do\n      local v, i = arr[i],\
    \ i + 1\n      if v <= 0 then break end\n      table.insert(maxValues, v)\n  \
    \    table.insert(maxIndex, i)\n    end\n    local minValue, minIndex = 0, 1\n\
    \    if #maxValues > 1 then\n      for i = #maxValues, 2, -1 do\n        local\
    \ v = (maxValues[i - 1] + maxValues[i]) / 2\n        if v == maxValues[i - 1]\
    \ then\n          minIndex = minIndex + 1\n        elseif v < maxValues[i - 1]\
    \ then\n          minValue, minIndex = v, i\n        end\n      end\n    end\n\
    \    return unpack(arr, {minValue, minIndex})\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprwetg2hi.lua:50:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmprwetg2hi.lua:50:\
    \ in local 'candidate'\n\t/tmp/tmprwetg2hi.lua:57: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return {}\
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi0kzlbbk.lua:42: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr == 0 then\n     \
    \   return nil\n    end\n    local smallestValues = {}\n    local smallestIndex\
    \ = {}\n    for _, v in pairs(arr) do\n        smallestValues[v] = smallestValues[v]\
    \ and smallestValues[v] + 1 or 1\n        smallestIndex[v] = smallestIndex[v]\
    \ and smallestIndex[v] + 1 or 1\n    end\n    for v, i in pairs(smallestValues)\
    \ do\n        if smallestValues[v] % 2 == 0 then\n            return v, smallestIndex[v]\n\
    \        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmpj1741.lua:47:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmptmpj1741.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- write your code here\n \
    \ local min_val = arr[1]\n  local min_idx = 1\n  for idx = 2, #arr do\n    if\
    \ arr[idx] % 2 == 0 then\n      if min_val == nil then\n        min_val = arr[idx]\n\
    \      elseif min_val > arr[idx] then\n        min_val = arr[idx]\n        min_idx\
    \ = idx\n      end\n    end\n  end\n  if min_val == nil then\n    return {}\n\
    \  end\n  local res = {min_val, min_idx}\n  \n  \n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79cynaun.lua:52:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp79cynaun.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr == 0 then\n     \
    \   return {}\n    end\n    local smalest_value, smalest_index\n    local smalest_value_count\
    \ = 0\n    local smalest_index_count = 0\n    for index, value in pairs(arr) do\n\
    \        if value % 2 == 0 then\n            if smalest_value is nil then\n  \
    \              smalest_value, smalest_index = value, index\n                smalest_value_count\
    \ = 1\n                smalest_index_count = index\n            else\n       \
    \         if smalest_value > value then\n                    smalest_value, smalest_index\
    \ = value, index\n                    smalest_value_count = 1\n              \
    \      smalest_index_count = index\n                else\n                   \
    \ smalest_value_count = smalest_value_count + 1\n                end\n       \
    \     end\n        end\n    end\n    if smalest_value_count == 1 then\n      \
    \  return {smalest_value, smalest_index}\n    end\n    local index = #arr\n  \
    \  for index, value in pairs(arr) do\n        if value % 2 == 0 then\n       \
    \     index = index - 1\n            if index == 0 then\n                return\
    \ {smalest_value, smalest_index}\n            else\n                local index_lower\
    \ = math.ceil(index / 2)\n                local index_higher = math.floor(index\
    \ / 2)\n                local value_lower = arr[index + index_lower]\n       \
    \         local value_higher = arr[index + index_higher]\n                if value_lower\
    \ % 2 == 0 then\n                    if value_lower < smalest_value then\n   \
    \                     smalest_value, smalest_index = value_lower, index_lower\n\
    \                    else\n                        if value_lower == smalest_value\
    \ then\n                            smalest_index = smalest_index_count\n    \
    \                    end\n                    end\n                elseif value_higher\
    \ % 2 == 0 then\n                    if value_higher < smalest_value then\n  \
    \                      smalest_value, smalest_index = value_higher, index_higher\n\
    \                    else\n                        if value_higher == smalest_value\
    \ then\n                            smalest_index = smalest_index_count\n    \
    \                    end\n                    end\n                end\n     \
    \       end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp3zmh2hx.lua:35: ''then'' expected near ''is''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min = #arr\n    local\
    \ index = 1\n    local smallest = {}\n    while min > 1 do\n        local min2\
    \ = #arr\n        if min2 == min then\n            return smallest\n        end\n\
    \        for i = 1, min2 do\n            if arr[i].value == arr[min].value and\
    \ not (arr[i].value % 2 == 0 and arr[min].value % 2 == 0) then\n             \
    \   if min > index then\n                    index = min\n                end\n\
    \                min = i\n            end\n        end\n    end\n    return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqmo2p99.lua:50:\
    \ expected: {2, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmpnqmo2p99.lua:50: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local even_values = {}\n  local\
    \ smallests = {}\n  local results = {}\n  local index, smallest_value\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd9yph3n5.lua:45: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if arr ~= nil and #arr ==\
    \ 0 then\n        return {}\n    end\n    local result = {}\n    for i = 1, #arr\
    \ do\n        if arr[i] % 2 == 0 then\n            result[arr[i]] = i\n      \
    \  end\n    end\n    local max = 0\n    local maxIndex\n    for i = 1, #result\
    \ do\n        if result[i] > max then\n            max = result[i]\n         \
    \   maxIndex = i\n        end\n    end\n    if maxIndex == #result then\n    \
    \    maxIndex = 1\n    end\n    return { result[max], maxIndex }\nend\n</cell>\n\
    <text>\n4.3. Solutions\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptha46bks.lua:49: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Your code here\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8a0p1bll.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp8a0p1bll.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- If there are no even values,\
    \ return an empty table.\n  if #arr % 2 == 0 then\n    return {}\n  end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb6spq7dn.lua:45: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local m = {}\n    for i =\
    \ 1, #arr do\n        if arr[i][1] % 2 == 0 then\n            m[arr[i][1]] = arr[i]\n\
    \        end\n    end\n    local sorted = table.sort(m)\n    if #sorted == 0 then\n\
    \        return {}\n    end\n    return sorted[1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppd7nxdw7.lua:29:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmppd7nxdw7.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmppd7nxdw7.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value = math.inf\n\
    \    local smallest_index = 0\n    for i, v in ipairs(arr) do\n        if v <=\
    \ 0 then\n            if smalest_value < v then\n                smalest_value\
    \ = v\n                smallest_index = i\n            end\n        else\n   \
    \         if smalest_value == math.inf then\n                smalest_value = v\n\
    \                smallest_index = i\n            end\n        end\n    end\n \
    \   if smallest_index == 0 then\n        return {}\n    else\n        return {smalest_value,\
    \ smallest_index}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8bs_p97.lua:52:\
    \ expected: {2, 1}\nactual: {4, 1}\nstack traceback:\n\t/tmp/tmpd8bs_p97.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value = nil\n\
    \  local smallest_index = nil\n  local size = #arr\n  for _, node in ipairs(arr)\
    \ do\n    if node.value == 0 then\n      smallest_index = nil\n      break\n \
    \   end\n    if smallest_index == nil then\n      smallest_index = node.value\n\
    \      smalest_value = node.value\n    else\n      if node.value < smallest_index\
    \ then\n        smallest_index = node.value\n        smalest_value = node.value\n\
    \      else\n        if node.value == smalest_value then\n          smallest_index\
    \ = node.value\n        else\n          smalest_value = node.value\n        end\n\
    \      end\n    end\n  end\n  if smallest_index == nil or smallest_index == 0\
    \ then\n    return {}\n  end\n  -- If there are no even values, just return []\n\
    \  if not arr[smallest_index].even then\n    return {}\n  end\n  return { smalest_value\
    \ = arr[smallest_index].value, index = smallest_index }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvgw7__6v.lua:31:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpvgw7__6v.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpvgw7__6v.lua:64: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr == 0 then return\
    \ {} end\n    local even, smallest = arr[1], 1\n    local smallest_index\n   \
    \ for i = 2, #arr do\n        local v = arr[i]\n        if even < v then\n   \
    \         even, smallest = v, i\n            smallest_index = i\n        else\n\
    \            if smallest > i then\n                even, smallest = v, i\n   \
    \             smallest_index = i\n            end\n        end\n    end\n    return\
    \ {even, smallest_index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3cfa9p9.lua:48:\
    \ expected: {2, 1}\nactual: {4}\nstack traceback:\n\t/tmp/tmpz3cfa9p9.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then\n    return\
    \ {}\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplcrqv0on.lua:44: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local function compare(x, y)\n\
    \    if x ~= y then\n      return x < y\n    else\n      return x == y\n    end\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcxw3lnx4.lua:48: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- write your code here\n \
    \ local ans = {}\n  local index = -1\n  local index2 = 0\n  for index, v in pairs(arr)\
    \ do\n    if v ~= 0 then\n      index2 = index2\n    end\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppqujj4o0.lua:50: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptj539j_c.lua:33:\
    \ expected: {2, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmptj539j_c.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Create a hash map for storing\
    \ the smallest even values found.\n  local map = {}\n  -- Loop through the given\
    \ array, and find one with smallest even value.\n  for i, v in ipairs(arr) do\n\
    \    if v then -- The array is empty or null, no elements.\n      -- If the current\
    \ value is odd, store it into the hash map.\n      if v % 2 == 1 then\n      \
    \  map[v] = i\n      end\n    end\n  end\n  -- Loop through all the elements again\
    \ to find the one that has the smallest index.\n  local res = {}\n  for i, v in\
    \ ipairs(map) do\n    res[map[v]] = v\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe50obau0.lua:49:\
    \ expected: {2, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmpe50obau0.lua:49: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal function compare(x, y)\n\
    \t\tif x < y then return -1 end\n\t\tif x > y then return 1 end\n\t\treturn 0\n\
    \tend\n\tlocal function find_even_index(node)\n\t\tif node.value % 2 == 0 then\n\
    \t\t\ttable.insert(arr, node.value)\n\t\t\treturn node.index + 1\n\t\telse\n\t\
    \t\treturn 1\n\t\tend\n\tend\n\ttable.sort(arr, compare)\n\tlocal n = #arr\n\t\
    local even_index = n - 1\n\tif even_index < 1 then\n\t\treturn {}\n\tend\n\tlocal\
    \ smalest_value, smalest_index = arr[1], 1\n\tfor i = 2, n do\n\t\tif arr[i] %\
    \ 2 == 0 then\n\t\t\tsmalest_value = arr[i]\n\t\t\tsmalest_index = i\n\t\tend\n\
    \tend\n\ttable.insert(arr, smalest_value)\n\ttable.insert(arr, smalest_index)\n\
    \ttable.sort(arr, compare)\n\treturn arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmvy901ip.lua:55:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmpmvy901ip.lua:55:\
    \ in local 'candidate'\n\t/tmp/tmpmvy901ip.lua:62: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case: if the input\
    \ table is empty, return an empty table\n  if #arr == 0 then return { } end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprzt_s9ju.lua:43: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local arr = arr or {}\n \
    \   local n = #arr\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_c9mbi_4.lua:43: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then\n    return\
    \ {}\n  elseif #arr == 1 then\n    return { arr[0], 1 }\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvgmc7xfj.lua:46: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Write your code here.\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gf95__f.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp1gf95__f.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value = nil\n\
    \    local smallest_index = nil\n    for _, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 then\n            if smalest_value == nil or smalest_value < v then\n\
    \                smalest_value, smallest_index = v, 1\n            elseif smalest_value\
    \ == v and smallest_index == 1 then\n                smallest_index = smallest_index\
    \ + 1\n            end\n        end\n    end\n    if smallest_index == nil then\n\
    \        return nil\n    end\n    return smalest_value, smallest_index\nend\n\
    </cell>\n<cell>\nsolution = Solution()\nsolution.pluck({4, 2, 3})\n</cell>\n<text>\n\
    4.2.2 Pluck All Nodes\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpulabrfa1.lua:43: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- write your code here\n \
    \ local min = arr[1]\n  local index = 1\n  for i in arr:gmatch(\"..\") do\n  \
    \  min = min < i ? i : min\n    index = index + 1\n  end\n  return { min = min,\
    \ index = index }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp41ic0ouw.lua:31: unexpected symbol near ''?''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then\n    return\
    \ {}\n  end\n  local smallest_even_value, smallest_even_index = nil\n  for i =\
    \ 1, #arr do\n    local even_value, index = math.abs(arr[i])\n    if even_value\
    \ ~= 0 then\n      if smallest_even_value == nil then\n        smallest_even_value\
    \ = even_value\n        smallest_even_index = index\n      else\n        if smallest_even_value\
    \ < even_value then\n          smallest_even_value = even_value\n          smallest_even_index\
    \ = index\n        end\n      end\n    end\n  end\n  if smallest_even_value ==\
    \ nil then\n    return nil\n  end\n  return smallest_even_value, smallest_even_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3iuwd_1s.lua:54:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp3iuwd_1s.lua:54: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if arr == nil then\n    return\
    \ nil\n  else\n    local res = {}\n    local smallest_index = 1\n    local smallest_value\
    \ = 0\n    for k, v in pairs(arr) do\n      if k % 2 == 0 then\n        if smallest_value\
    \ == 0 then\n          smallest_value = v\n          smallest_index = v\n    \
    \    else\n          if smallest_value < v then\n            smallest_value =\
    \ v\n            smallest_index = v\n          end\n        end\n      end\n \
    \   end\n    if smallest_index == 1 then\n      return {}\n    else\n      res.value\
    \ = smallest_value\n      res.index = smallest_index\n      return res\n    end\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hv6z2jl.lua:59:\
    \ expected: {2, 1}\nactual: {index=2, value=2}\nstack traceback:\n\t/tmp/tmp4hv6z2jl.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local result = {}\n    for\
    \ i = #arr, 1, -1 do\n        if arr[i].value % 2 == 0 then\n            table.insert(result,\
    \ arr[i])\n        end\n    end\n    return unpack(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2btxfm2g.lua:29:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp2btxfm2g.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmp2btxfm2g.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if arr and #arr > 0 then\n\
    \        local min = arr[1]\n        local i = 1\n        for i = 2, #arr do\n\
    \            if arr[i] < min then\n                min = arr[i]\n            end\n\
    \        end\n        return { min, i }\n    end\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ygk4hmx.lua:44:\
    \ expected: {2, 1}\nactual: {1, 1}\nstack traceback:\n\t/tmp/tmp_ygk4hmx.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local n = #arr\n    if n\
    \ == 0 then return {} end\n    local smallest, smallest_index\n    for i = 1,\
    \ n do\n        local v = arr[i]\n        if v <= smallest then\n            smallest,\
    \ smallest_index = v, i\n        elseif v == smallest then\n            if smallest_index\
    \ then\n                smallest_index = smallest_index - 1\n                smallest,\
    \ smallest_index = arr[i], smallest_index\n            else\n                smallest_index\
    \ = i\n                smallest, smallest_index = v, i\n            end\n    \
    \    end\n    end\n    local m = 1\n    while smallest_index and m <= n do\n \
    \       if smallest % 2 == 0 then\n            local index = smallest_index\n\
    \            smallest_index = smallest_index - 1\n            smallest, smallest_index\
    \ = arr[index], index\n        else\n            m = m + 1\n        end\n    end\n\
    \    if smallest_index and smallest_index < n then\n        local index = smallest_index\n\
    \        smallest_index = smallest_index - 1\n        smallest, smallest_index\
    \ = arr[index], index\n    end\n    if smallest_index then\n        return {smallest,\
    \ smallest_index}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttaielf9.lua:32:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpttaielf9.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmpttaielf9.lua:67: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value = nil\n\
    \    local smalest_index = nil\n    for idx, v in ipairs(arr) do\n        if smalest_value\
    \ is nil then\n            smalest_value, smalest_index = v, idx\n        elseif\
    \ smalest_value < v then\n            smalest_value, smalest_index = v, idx\n\
    \        end\n    end\n    if smalest_value == nil then\n        return nil\n\
    \    end\n    local smalest_idx = nil\n    for idx, v in ipairs(arr) do\n    \
    \    if v == smalest_value then\n            smalest_idx = idx\n        end\n\
    \    end\n    return smalest_idx, smalest_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqywjtp2x.lua:30: ''then'' expected near ''is''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Write your code here.\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gf95__f.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp1gf95__f.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min_index = -1\n  \
    \  local smalest_value\n    local is_even = false\n    for i = 1, #arr do\n  \
    \      if arr[i] % 2 == 0 then\n            smalest_value = arr[i]\n         \
    \   is_even = true\n        elseif smalest_value and is_even then\n          \
    \  if smalest_value < arr[i] then\n                smalest_value = arr[i]\n  \
    \          end\n            if smalest_value ~= arr[i] then\n                min_index\
    \ = i - 1\n            end\n            is_even = false\n        else\n      \
    \      if arr[i] < smalest_value then\n                smalest_value = arr[i]\n\
    \                min_index = i - 1\n            end\n        end\n    end\n  \
    \  if min_index == -1 then\n        return {}\n    end\n    return { smalest_value,\
    \ min_index }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpvje0uv.lua:58:\
    \ expected: {2, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmpdpvje0uv.lua:58: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_even_values\
    \ = {}\n    local smallest_even_values_index = {}\n    for i = 1, #arr do\n  \
    \      if arr[i] % 2 == 0 then\n            smallest_even_values[i] = arr[i]\n\
    \            smallest_even_values_index[i] = i\n        end\n    end\n    if #smallest_even_values\
    \ == 0 then\n        return nil\n    end\n    local smallest_even_value = smallest_even_values[1]\n\
    \    for i = 2, #smallest_even_values do\n        if smallest_even_values[i] <\
    \ smallest_even_value then\n            smallest_even_value = smallest_even_values[i]\n\
    \            smallest_even_value_index = smallest_even_values_index[i]\n     \
    \   end\n    end\n    if #smallest_even_values == 1 then\n        return { smallest_even_value,\
    \ smallest_even_value_index }\n    end\n    return smallest_even_value\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwwmkzld3.lua:54:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpwwmkzld3.lua:54: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local evens = {}\n  for i =\
    \ 1, #arr do\n    if arr[i] % 2 == 0 then table.insert(evens, arr[i]) end\n  end\n\
    \  return table.sort(evens, function(a, b) return a < b end)\nend\n</cell>\n<code\
    \ language=julia-1.4>\n# Now let's implement the helper function pluck which will\
    \ pluck an element\n# from a table and return the index and the element which\
    \ was pluck.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl_46431r.lua:33: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local pivot = arr[1]\n  local\
    \ pivotIndex = -1\n  for i = 2, #arr do\n    if arr[i] > pivot then\n      pivot\
    \ = arr[i]\n      pivotIndex = i - 1\n    end\n  end\n  if pivotIndex == -1 then\
    \ return {} end\n  local result = {pivot, pivotIndex}\n  local minIndex = pivotIndex\n\
    \  local minVal = pivot\n  for i = 2, #arr do\n    if arr[i] > minVal then\n \
    \     if arr[i] > pivot then\n        pivot = arr[i]\n        pivotIndex = i\n\
    \      end\n      minVal = arr[i]\n      minIndex = i\n    end\n  end\n  result[1]\
    \ = pivot\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xvhtgub.lua:56:\
    \ expected: {2, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmp5xvhtgub.lua:56: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Start with an empty table\
    \ of nodes\n  local nodes = {}\n  -- For every node in the given table, add the\
    \ current node\n  -- and its index to the table of nodes\n  for i = 1, #arr do\n\
    \    table.insert(nodes, {arr[i], i})\n  end\n  -- Find the smallest node by looking\
    \ at each node\n  -- for its value and seeing if it's even\n  for i = #nodes,\
    \ 1, -1 do\n    if nodes[i].value % 2 == 1 then\n      -- If it is, then we've\
    \ found the smallest value node\n      -- by the smallest index node\n      return\
    \ table.concat(nodes, 2, #nodes)\n    end\n  end\n  -- If we get here, then no\
    \ even values were found\n  return {}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu_q4iijn.lua:37:\
    \ attempt to perform arithmetic on a nil value (field 'value')\nstack traceback:\n\
    \t/tmp/tmpu_q4iijn.lua:37: in local 'candidate'\n\t/tmp/tmpu_q4iijn.lua:50: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if arr == nil then\n    \
    \    return nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp38fisryd.lua:44: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local function smallest(table)\n\
    \        local smallest = math.inf\n        local smallest_index\n        for\
    \ i, v in ipairs(table) do\n            if v < smallest then\n               \
    \ smallest = v\n                smallest_index = i\n            end\n        end\n\
    \        return smallest, smallest_index\n    end\n    local function find_smallest(table,\
    \ smallest)\n        for i, v in ipairs(table) do\n            if v == smallest\
    \ then\n                return i, v\n            end\n        end\n    end\n \
    \   local smallest, smallest_index = smallest(arr)\n    local index = false\n\
    \    for i, v in ipairs(arr) do\n        if v == smallest then\n            index\
    \ = i\n            break\n        end\n    end\n    local key = smallest - smallest_index\n\
    \    if index == false then\n        return {}\n    else\n        return {smallest_index,\
    \ key}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpth_lus7b.lua:31:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpth_lus7b.lua:31:\
    \ in local 'smallest'\n\t/tmp/tmpth_lus7b.lua:45: in local 'candidate'\n\t/tmp/tmpth_lus7b.lua:64:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- initialization \n  local\
    \ result = {}\n  local even_values, index, smallest_index = nil, nil, nil\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpld84tlxx.lua:44: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local result = {}\n    for\
    \ i = 1, #arr do\n        local node = arr[i]\n        if node.value % 2 == 0\
    \ then\n            table.insert(result, node)\n        end\n    end\n    if #result\
    \ == 0 then return end\n    local largest, largest_index = result[1]\n    for\
    \ i = 2, #result do\n        local node = result[i]\n        if node.value < largest\
    \ then\n            largest, largest_index = node.value, i\n        end\n    end\n\
    \    table.insert(result, largest, largest_index)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj7rhe31e.lua:30:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpj7rhe31e.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpj7rhe31e.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n   local ans, i, i_smalest, j,\
    \ j_start\n   local smalest_value = nil\n   for i = 1,#arr,2 do\n      local v\
    \ = arr[i]\n      if not smalest_value or smalest_value > v then\n         smalest_value,\
    \ i_smalest = v\n         j_start = i\n      end\n   end\n   if smalest_value\
    \ then\n      for i = 1,#arr,2 do\n         local v = arr[i]\n         if not\
    \ smalest_value or smalest_value > v then\n            smalest_value, i_smalest\
    \ = v\n            j_start = i+1\n         end\n      end\n      if smalest_value\
    \ then\n         ans = {}\n         for j = 1,j_start do\n            ans[arr[j]]\
    \ = arr[j]\n         end\n         return ans\n      end\n   end\n   return {}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvwdtblb.lua:58:\
    \ expected: {2, 1}\nactual: {2=2, 3=3, 4=4}\nstack traceback:\n\t/tmp/tmpwvwdtblb.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n  if #arr ==\
    \ 0 then\n    return {}\n  end\n  -- Find the smallest of all the values\n  local\
    \ smalest_value = arr[1]\n  local smalest_index = 2\n  for i = 2, #arr do\n  \
    \  if arr[i] < smalest_value then\n      smalest_value = arr[i]\n      smalest_index\
    \ = i\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5x3mwnx9.lua:54: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value = sys.inf\n\
    \    local smalest_index = -1\n    for i, v in ipairs(arr) do\n        if v ==\
    \ 0 or not v then\n            return {}\n        end\n        if v < 0 then\n\
    \            return {}\n        end\n        if v % 2 == 0 then\n            if\
    \ smalest_value < v then\n                smalest_value = v\n                smalest_index\
    \ = i\n            end\n        end\n    end\n    if smalest_value == sys.inf\
    \ then\n        return nil\n    end\n    if smalest_index == -1 then\n       \
    \ return nil\n    end\n    return smalest_value, smalest_index\nend\n</cell>\n\
    <text>\n4.2 Find a leaf node in a binary tree\nGiven a binary tree and an integer\
    \ k, find and return the kth largest leaf node in the tree.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp85wism30.lua:51: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_val = next(arr) --\
    \ smallest even value\n  local min_idx = nil -- smallest index\n  for idx, val\
    \ in pairs(arr) do\n    if val == min_val then\n      if min_idx == nil or idx\
    \ < min_idx then\n        min_idx = idx\n      end\n    elseif val % 2 == 0 then\n\
    \      min_val = val -- smallest even value\n      min_idx = idx\n    end\n  end\n\
    \  if min_idx == nil then\n    return {}\n  end\n  return table.insert({value\
    \ = min_val, index = min_idx}, 1, arr[min_idx])\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_2c0v98.lua:48:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmph_2c0v98.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr == 0 then\n     \
    \   return {}\n    end\n    local index = 0\n    local smalest_value = 0\n   \
    \ for v in arr:keys() do\n        if smalest_value < v then\n            smalest_value\
    \ = v\n            index = v:byte()\n        end\n    end\n    local key = arr[index]\n\
    \    local val = arr:get(key)\n    arr:del(key)\n    arr:del(index)\n    return\
    \ {val, key}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph9dszif5.lua:32:\
    \ attempt to call a nil value (method 'keys')\nstack traceback:\n\t/tmp/tmph9dszif5.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmph9dszif5.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local function findSmallestEvenIndex(node)\n\
    \    if node.value % 2 == 0 then\n      return node\n    end\n    local smallerEvenIndex\n\
    \    for i = 1, #node do\n      if node[i].value % 2 == 0 then\n        smallerEvenIndex\
    \ = i\n      elseif node[i].value < node[smallerEvenIndex].value then\n      \
    \  smallerEvenIndex = i\n      end\n    end\n    if smallerEvenIndex == nil then\n\
    \      smallerEvenIndex = 1\n    end\n    return node[smallerEvenIndex]\n  end\n\
    \  if #arr == 0 then\n    return {}\n  end\n  if arr[1] < arr[2] then\n    return\
    \ findSmallestEvenIndex(arr[1])\n  elseif arr[1] > arr[2] then\n    return findSmallestEvenIndex(arr[2])\n\
    \  end\n  local smallerEvenIndex\n  for i = 1, #arr do\n    if arr[i].value %\
    \ 2 == 0 then\n      smallerEvenIndex = i\n    elseif arr[i].value < arr[smallerEvenIndex].value\
    \ then\n      smallerEvenIndex = i\n    end\n  end\n  return arr[smallerEvenIndex]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuczo2d0k.lua:28:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpuczo2d0k.lua:28:\
    \ in function </tmp/tmpuczo2d0k.lua:27>\n\t(...tail calls...)\n\t/tmp/tmpuczo2d0k.lua:66:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value, smalest_index,\
    \ smallest_even =\n        table.unpack({})\n    for i, v in ipairs(arr) do\n\
    \        if smallest_even then\n            if smallest_even < v then\n      \
    \          smallest_even = v\n                smallest_index = i\n           \
    \ else\n                smallest_even, smallest_index = v, i\n            end\n\
    \        else\n            smallest_even, smallest_index = v, i\n        end\n\
    \    end\n    if smallest_even then\n        table.insert(smalest_value, smallest_even)\n\
    \        table.insert(smalest_index, smallest_index)\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu4en2n41.lua:42:\
    \ bad argument #1 to 'insert' (table expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpu4en2n41.lua:42: in local 'candidate'\n\t/tmp/tmpu4en2n41.lua:51: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value = 0\n \
    \ local smallest_index = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0\
    \ then\n      if smalest_value == nil or smalest_value > v then\n        smalest_value\
    \ = v\n        smallest_index = i\n      end\n    end\n  end\n  if smalest_value\
    \ == nil or smalest_value == 0 then\n    return {}\n  else\n    return {smalest_value,\
    \ smallest_index}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkk9329ii.lua:47:\
    \ expected: {2, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmpkk9329ii.lua:47: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- TODO: Write your code in\
    \ geeksforgeeks\n  local min_index\n  if #arr == 1 then\n    return {arr[1], 1}\n\
    \  else\n    for _, v in ipairs(arr) do\n      if v % 2 == 0 then\n        if\
    \ not min_index or (v < min_index and v) then\n          min_index = v\n     \
    \   end\n      end\n    end\n    if not min_index then\n      return {}\n    end\n\
    \    return {arr[min_index], min_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4meob5g6.lua:49:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp4meob5g6.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Your code here\n  local\
    \ sorted_list = table.remove(arr, math.min(#arr, 1))\n  local smalest_value =\
    \ 0\n  local smallest_index = 0\n  for i = 1, #sorted_list do\n    if sorted_list[i]\
    \ % 2 == 0 then\n      if smalest_value < sorted_list[i] then\n        smalest_value\
    \ = sorted_list[i]\n        smallest_index = i\n      end\n    end\n  end\n  if\
    \ smallest_index > 0 then\n    return {smalest_value, smallest_index}\n  else\n\
    \    return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjl1qszkm.lua:31:\
    \ attempt to get length of a number value (local 'sorted_list')\nstack traceback:\n\
    \t/tmp/tmpjl1qszkm.lua:31: in local 'candidate'\n\t/tmp/tmpjl1qszkm.lua:49: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr == 0 then\n     \
    \   return {}\n    end\n    local smalest_value = arr[1]\n    local smalest_index\
    \ = 1\n    for i=2, #arr do\n        local value = arr[i]\n        if value %\
    \ 2 == 0 then\n            if value < smalest_value then\n                smalest_value\
    \ = value\n                smalest_index = i\n            end\n        elseif\
    \ value == smalest_value then\n            if i < smalest_index then\n       \
    \         smalest_value = value\n                smalest_index = i\n         \
    \   end\n        end\n    end\n    if smalest_value == 0 then\n        return\
    \ {}\n    end\n    return { smalest_value, smalest_index }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53x33mm2.lua:55:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp53x33mm2.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case: no even nodes\
    \ or empty table\n  if #arr == 0 or #arr == 1 then\n    return {}\n  end\n  --\
    \ Pick two nodes from arr in left and right halfs,\n  -- but do not select any\
    \ nodes with even index in the right half.\n  local left_half, right_half\n  local\
    \ left, right = 0, #arr\n  while left <= right do\n    local mid = math.floor((left\
    \ + right) / 2)\n    local node = arr[mid]\n    if node % 2 == 0 then\n      if\
    \ mid > 0 then\n        left = mid\n      else\n        -- When picking left node,\
    \ always pick one with smallest odd value.\n        -- The picked node can be\
    \ either even or odd, it does not matter.\n        left_half = left_half + 1\n\
    \      end\n    else\n      right_half = right_half + 1\n    end\n  end\n  if\
    \ left_half > 0 then\n    -- Pick one node from left half\n    local node = left_half\
    \ == 1 and left_half % 2 == 0 and arr[left_half] or arr[left_half]\n    -- If\
    \ there are multiple nodes with the same smallest even value, choose the smallest\
    \ index.\n    -- The smallest index is the smallest even number, so add one to\
    \ the index.\n    if left_half % 2 == 0 then\n      if node % 2 == 0 then\n  \
    \      local i, k = 0, 0\n        for i = 1, left_half do k = k + 1 end\n    \
    \    if k > 1 then\n          local i\n          for i = 1, left_half do\n   \
    \         if arr[i] % 2 == 0 then break end\n          end\n          return {\
    \ node, i + 1 }\n        end\n      end\n    end\n    -- Return the smallest even\
    \ value, and its index.\n    return { node, left_half + 1 }\n  elseif right_half\
    \ > 0 then\n    -- Pick one node from right half\n    local node = right_half\
    \ == 1 and right_half % 2 == 0 and arr[right_half] or arr[right_half]\n    --\
    \ If there are multiple nodes with the same smallest even value, choose the smallest\
    \ index.\n    -- The smallest index is the smallest even number, so add one to\
    \ the index.\n    if right_half % 2 == 0 then\n      if node % 2 == 0 then\n \
    \       local i, k = 0, 0\n        for i = 1, right_half do k = k + 1 end\n  \
    \      if k > 1 then\n          local i\n          for i = 1, right_half do\n\
    \            if arr[i] % 2 == 0 then break end\n          end\n          return\
    \ { node, i + 1 }\n        end\n      end\n    end\n    -- Return the smallest\
    \ even value, and its index.\n    return { node, right_half + 1 }\n  else\n  \
    \  -- If there are multiple nodes with the same smallest \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3mgdgyat.lua:106: ''end'' expected (to close ''if'' at line
    50) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local function sort(a, b)\n\
    \        return a.value < b.value\n    end\n    local function cmp_even(a, b)\n\
    \        return a.value % 2 == 0\n    end\n    table.sort(arr, sort, cmp_even)\n\
    \    local index = #arr\n    if index == 0 then\n        -- return empty table\n\
    \        return {}\n    end\n    local smalest_value = 0\n    local smalest_index\
    \ = 0\n    for _, node in ipairs(arr) do\n        if smalest_value == 0 then\n\
    \            smalest_value = node.value\n            smalest_index = index\n \
    \       end\n        if smalest_value == node.value then\n            if node.value\
    \ % 2 == 0 then\n                smalest_value = node.value\n                smalest_index\
    \ = index\n            end\n        end\n        index = index - 1\n    end\n\
    \    return smalest_index, smalest_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv2zbfzn_.lua:28:\
    \ attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpv2zbfzn_.lua:28:\
    \ in function </tmp/tmpv2zbfzn_.lua:27>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpv2zbfzn_.lua:33:\
    \ in local 'candidate'\n\t/tmp/tmpv2zbfzn_.lua:60: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest = nil\n  \
    \  local smallest_idx = 0\n    local sorted_arr = sort(arr)\n    for i, value\
    \ in ipairs(sorted_arr) do\n        if smallest == nil then\n            smallest\
    \ = value\n        elseif value < smallest then\n            smallest = value\n\
    \            smallest_idx = i\n        end\n    end\n    if smallest == nil then\n\
    \        return {}\n    elseif smallest % 2 == 0 then\n        smallest_idx =\
    \ 0\n    end\n    return {smallest, smallest_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcn53xcs4.lua:29:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpcn53xcs4.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmpcn53xcs4.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal smalest_value = nil\n\
    \tlocal smallest_index = nil\n\tfor i,v in ipairs(arr) do\n\t\tif smallest_index\
    \ == nil then\n\t\t\tif v % 2 == 0 then\n\t\t\t\tsmallest_index = i\n\t\t\t\t\
    smalest_value = v\n\t\t\tend\n\t\telseif v % 2 == 0 and v < smalest_value then\n\
    \t\t\tsmallest_index = i\n\t\t\tsmalest_value = v\n\t\tend\n\tend\n\tif smallest_index\
    \ ~= nil then\n\t\treturn {smalest_value, smallest_index}\n\telse\n\t\treturn\
    \ {}\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6iolewc.lua:50:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpl6iolewc.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr == 0 then return\
    \ {} end\n    local min_value, index = math.min(arr.value), 1\n    local sorted_table\
    \ = arr:sort():map(function(x)\n        local value = x.value\n        if value\
    \ == 0 then value = nil end\n        if value == min_value or value == nil then\n\
    \            index = index + 1\n        elseif value == min_value + 1 then\n \
    \           return min_value, index\n        end\n        return value, index\n\
    \    end)\n    \n    if sorted_table[1] == nil then\n        return {}\n    else\n\
    \        return sorted_table[1]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn661qarv.lua:29:\
    \ attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmpn661qarv.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmpn661qarv.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Find minimum even.\n  local\
    \ smalest_value = math.inf\n  local smalest_index\n  for i = 1, #arr do\n    if\
    \ math.mod(arr[i], 2) == 0 then\n      if smalest_value == math.inf or smalest_value\
    \ < arr[i] then\n        smalest_value = arr[i]\n        smalest_index = i\n \
    \     end\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8yiy3sy6.lua:52: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 1 then\n    return\
    \ arr\n  else\n    local smallest_value, smallest_index\n    for index, v in pairs(arr)\
    \ do\n      if not smallest_value or smallest_value < v then\n        smallest_value,\
    \ smallest_index = v, index\n      end\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppzqcmw35.lua:50: ''end'' expected (to close ''if'' at line
    27) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr == 0 then return\
    \ {} end\n    if #arr == 1 then return arr[1] end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0ozqebj3.lua:43: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- base case\n  if #arr ==\
    \ 0 then\n    return {}\n  end\n  -- Find the smallest value\n  local smallest_value\
    \ = math.floor(arr[1])\n  -- Find the smallest index\n  local smallest_index =\
    \ nil\n  for i, v in pairs(arr) do\n    if v == smallest_value then\n      smallest_index\
    \ = i\n      break\n    end\n  end\n  -- If the smallest value doesn't have any\
    \ even values\n  if not smallest_index then\n    -- We reach here because there\
    \ were no even values.\n    return {}\n  end\n  -- Go over the even values and\
    \ find the smallest one that is found\n  local new_smallest_index = smallest_index\n\
    \  while smallest_value % 2 == 0 do\n    new_smallest_index = new_smallest_index\
    \ + 1\n    smallest_value = smallest_value / 2\n  end\n  -- return the value and\
    \ index\n  return { smallest_value, new_smallest_index }\nend\n</cell>\n<cell>\n\
    %%time\nres = pluck(table)\nprint(res)\n</cell>\n<text>\n4.5 Sum Squared Error\n\
    The sum squared error loss function is defined as:\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbmy7fc6s.lua:55: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\t-- Find index of smallest\n\
    \tlocal smallest_index = 1\n\tlocal smallest_value = arr[1]\n\tfor i = 2, #arr\
    \ do\n\t\tif arr[i] < smallest_value then\n\t\t\tsmallest_value = arr[i]\n\t\t\
    \tsmallest_index = i\n\t\tend\n\tend\n\t-- Pluck\n\tlocal result = {}\n\tresult[smallest_value]\
    \ = smallest_index\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_0hj71oz.lua:45:\
    \ expected: {2, 1}\nactual: {2=2}\nstack traceback:\n\t/tmp/tmp_0hj71oz.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value, i, min_index\
    \ = nil, nil, 1\n    for i = 1, #arr do\n        if arr[i] ~= 0 then\n       \
    \     local m = #arr + math.abs(arr[i] - smalest_value)\n            if m < min_index\
    \ then\n                min_index = m\n                smalest_value = arr[i]\n\
    \            else\n                min_index = math.min(min_index, m)\n      \
    \      end\n        end\n    end\n    return smalest_value, min_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg8c44t1z.lua:30:\
    \ attempt to perform arithmetic on a nil value (local 'smalest_value')\nstack\
    \ traceback:\n\t/tmp/tmpg8c44t1z.lua:30: in local 'candidate'\n\t/tmp/tmpg8c44t1z.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local table = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp323w1w7l.lua:42: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Your code here\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8a0p1bll.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp8a0p1bll.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return {}\
    \ end\n  -- Pick the first node and remove it.\n  local node = arr[1]\n  arr =\
    \ arr[2]\n  -- Pick up the first even value from the list.\n  while #arr > 0 and\
    \ arr[2] % 2 == 0 do\n    local index = #arr - 2\n    arr = arr[index + 1]\n \
    \ end\n  if #arr == 0 then return {} end\n  -- Return the picked node.\n  return\
    \ node ~= nil and { node = node, index = #arr }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6law5gsr.lua:32:\
    \ attempt to get length of a number value (local 'arr')\nstack traceback:\n\t\
    /tmp/tmp6law5gsr.lua:32: in local 'candidate'\n\t/tmp/tmp6law5gsr.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then\n    return\
    \ {}\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplcrqv0on.lua:44: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest, smallest_index\
    \ = {}, {}\n  for i, v in ipairs(arr) do\n    smallest_index[v] = i\n    if smallest\
    \ == nil then\n      smallest = v\n    else if smallest < v then\n      smallest\
    \ = v\n    end\n  end\n  if smallest == nil then\n    return nil\n  else\n   \
    \ return smallest, smallest_index\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcrhm_ozj.lua:56: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if arr == nil then return end\n\
    \  local min_index = 1\n  local smalest_value = arr[1]\n  for i = 2, #arr do\n\
    \    if arr[i] <= arr[i] then\n      smalest_value = arr[i]\n      min_index =\
    \ i\n    end\n  end\n  return { smalest_value, min_index }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvnoozmz.lua:42:\
    \ expected: {2, 1}\nactual: {3, 3}\nstack traceback:\n\t/tmp/tmplvnoozmz.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local index = 1\n  local smalest_value\
    \ = arr[1]\n  local smalest_index = index\n  for i = 2, #arr do\n    if arr[i]\
    \ ~= smalest_value then\n      if arr[i] > smalest_value then\n        smalest_value\
    \ = arr[i]\n        smalest_index = index\n      else\n        index = index +\
    \ 1\n      end\n    elseif arr[i] == smalest_value then\n      index = index +\
    \ 1\n    end\n  end\n  return { smalest_value, smalest_index }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpar7z361_.lua:48:\
    \ expected: {2, 1}\nactual: {4, 1}\nstack traceback:\n\t/tmp/tmpar7z361_.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014728
